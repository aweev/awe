// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // =============================================================================
// // MONITORING & AUDITING MODELS
// // A central place for logging, error tracking, and configuration.
// // =============================================================================
// model SystemLog {
//   id        String   @id @default(cuid())
//   level     LogLevel
//   message   String   @db.Text
//   metadata  Json?
//   context   String?
//   userId    String?
//   timestamp DateTime @default(now())

//   @@index([timestamp])
//   @@index([level])
//   @@index([context])
// }

// // Model for persisting detailed, trackable errors
// model SystemError {
//   id         String    @id @default(cuid())
//   name       String
//   message    String    @db.Text
//   stack      String?   @db.Text
//   metadata   Json?
//   context    String?
//   userId     String?
//   isResolved Boolean   @default(false)
//   resolvedAt DateTime?
//   resolvedBy String? // Should be a user ID
//   timestamp  DateTime  @default(now())

//   @@index([timestamp])
//   @@index([context])
//   @@index([isResolved])
// }

// enum LogLevel {
//   DEBUG
//   INFO
//   WARN
//   ERROR
//   FATAL
// }

// // =============================================================================
// // CONFIGURATION & FEATURE FLAGS
// // A central place for application settings and feature toggles.  
// // =============================================================================
// model Configuration {
//   key         String   @id
//   value       Json
//   description String?
//   isSecret    Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// // Basic User model for authentication and roles
// model User {
//   id       String @id @default(cuid())
//   email    String @unique
//   password String
//   role     Role   @default(USER)

//   mfaSecret    String? // Will store the ENCRYPTED secret
//   isMfaEnabled Boolean @default(false)

//   sessions             Session[]
//   impersonatedSessions Session[]         @relation("Impersonator")
//   devices              Device[]
//   passwordHistory      PasswordHistory[]
//   payments             Payment[]
//   jobs                 Job[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   auditLogs AuditLog[]
// }

// enum Role {
//   SUPER_ADMIN
//   EXECUTIVE_DIRECTOR
//   PROGRAM_MANAGER
//   CONTENT_MANAGER
//   FINANCE_MANAGER
//   VOLUNTEER_COORDINATOR
//   BOARD_MEMBER
//   DATA_ANALYST
//   USER // Generic authenticated user
// }

// // Model for auditing significant actions
// model AuditLog {
//   id        String   @id @default(cuid())
//   action    String // e.g., "user.login", "program.create"
//   actorId   String
//   actor     User     @relation(fields: [actorId], references: [id])
//   details   Json? // Contextual data about the action
//   timestamp DateTime @default(now())
// }

// model Session {
//   id        String   @id @default(cuid())
//   token     String   @unique // The session token used for authentication
//   expiresAt DateTime

//   // Relation to the user this session belongs to
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   // Relation for user impersonation, used by AdminService
//   impersonatedById String?
//   impersonatedBy   User?   @relation("Impersonator", fields: [impersonatedById], references: [id])

//   metadata  Json? // Additional metadata like IP, user agent, etc.
//   ipAddress String? // The IP address where the session was created
//   userAgent String? // The user agent of the client

//   createdAt DateTime @default(now())

//   @@index([userId])
// }

// model Device {
//   id String @id @default(cuid())

//   // Relation to the user who owns this device
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   // Device identifying information
//   userAgent String
//   ipAddress String

//   // Security status
//   isVerified Boolean  @default(false) // Has the user confirmed this device?
//   lastUsedAt DateTime @default(now())

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // A device is unique per user and user agent string
//   @@unique([userId, userAgent])
//   @@index([userId])
// }

// model PasswordHistory {
//   id           String   @id @default(cuid())
//   passwordHash String
//   createdAt    DateTime @default(now())

//   // Relation to the user
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId, createdAt])
// }

// enum PaymentStatus {
//   PENDING
//   SUCCEEDED
//   FAILED
//   REFUNDED
//   PARTIALLY_REFUNDED
// }

// enum RefundStatus {
//   PENDING
//   SUCCEEDED
//   FAILED
// }

// model Payment {
//   id                String        @id @default(cuid())
//   amount            Int // Amount in the smallest currency unit (e.g., cents)
//   currency          String
//   status            PaymentStatus @default(PENDING)
//   provider          String // e.g., "stripe"
//   providerPaymentId String        @unique // The ID from the payment provider (e.g., pi_...)

//   // Relations
//   userId  String
//   user    User     @relation(fields: [userId], references: [id])
//   refunds Refund[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

// model Refund {
//   id               String       @id @default(cuid())
//   amount           Int
//   currency         String
//   status           RefundStatus @default(PENDING)
//   providerRefundId String       @unique // The ID from the payment provider (e.g., re_...)

//   // Relation
//   paymentId String
//   payment   Payment @relation(fields: [paymentId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([paymentId])
// }

// enum JobStatus {
//   PENDING
//   WAITING
//   PROCESSING
//   COMPLETED
//   FAILED
//   CANCELLED
// }

// // -----------------------------------------------------------------------------
// // UPDATED MODEL: Job
// // -----------------------------------------------------------------------------
// model Job {
//   id      String    @id @default(cuid())
//   type    String // RENAMED: from 'name' to 'type' to match new service
//   status  JobStatus @default(PENDING)
//   payload Json
//   error   String?   @db.Text

//   // Relations
//   userId String?
//   user   User?   @relation(fields: [userId], references: [id])

//   dependsOnId String?
//   dependsOn   Job?    @relation("JobDependencies", fields: [dependsOnId], references: [id], onDelete: NoAction)
//   dependents  Job[]   @relation("JobDependencies")

//   // Provider & Execution Info
//   inngestRunId String? @unique // RENAMED: from 'providerJobId'

//   // Scheduling & Prioritization
//   scheduledFor DateTime?
//   priority     Int       @default(0)

//   // Retry Logic
//   maxRetries Int @default(3)

//   // Timestamps
//   startedAt   DateTime?
//   completedAt DateTime?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   // Generic metadata field
//   metadata Json?

//   // Relation to logs
//   logs JobLog[]

//   @@index([status])
//   @@index([type])
//   @@index([userId])
//   @@index([dependsOnId])
// }

// model JobLog {
//   id       String    @id @default(cuid())
//   status   JobStatus
//   message  String    @db.Text
//   metadata Json?

//   // Relation
//   jobId String
//   job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())

//   @@index([jobId])
// }

// prisma/schema.prisma

// ... rest of your schema
// // prisma/schema.prisma
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   // for production with a connection pooler like PgBouncer
//   // connection_limit = 1 
// }

// // =============================================================================
// // ENUMS
// // A central place for all enumerated types used across the schema.
// // =============================================================================

// enum Role {
//   // Administrative Roles
//   SUPER_ADMIN
//   EXECUTIVE_DIRECTOR
//   PROGRAM_MANAGER
//   CONTENT_MANAGER
//   FINANCE_MANAGER
//   VOLUNTEER_COORDINATOR
//   DATA_ANALYST
//   // Portal Member Roles
//   BOARD_MEMBER
//   ACTIVE_VOLUNTEER
//   PROGRAM_ALUMNI
//   CORPORATE_PARTNER
//   INDIVIDUAL_MAJOR_DONOR
//   INSTITUTIONAL_PARTNER
//   PROGRAM_MENTOR
// }

// enum PageStatus {
//   DRAFT
//   REVIEW
//   PUBLISHED
//   ARCHIVED
// }

// enum ContentStatus {
//   DRAFT
//   REVIEW
//   PUBLISHED
//   ARCHIVED
// }

// enum StoryStatus {
//   DRAFT
//   REVIEW
//   PUBLISHED
//   ARCHIVED
// }

// enum ProgramStatus {
//   DRAFT
//   OPEN
//   FULL
//   CLOSED
//   ARCHIVED
// }

// enum EventStatus {
//   DRAFT
//   PUBLISHED
//   CANCELLED
//   ARCHIVED
// }

// enum EnrolmentStatus {
//   DRAFT
//   ELIGIBLE
//   INELIGIBLE
//   SUBMITTED
//   ACCEPTED
//   REJECTED
//   WAITLISTED
// }

// enum VolunteerApplicationStatus {
//   SUBMITTED
//   UNDER_REVIEW
//   INTERVIEW_SCHEDULED
//   BACKGROUND_CHECK
//   APPROVED
//   REJECTED
//   WAITLISTED
// }

// enum MentorshipStatus {
//   REQUESTED
//   MATCHED
//   ACTIVE
//   COMPLETED
//   PAUSED
//   CANCELLED
// }

// enum PartnershipStatus {
//   PROSPECT
//   ACTIVE
//   RENEWED
//   PAUSED
//   ENDED
// }

// enum GrantStatus {
//   DRAFT
//   ACTIVE
//   COMPLETED
//   CLOSED
// }

// enum ReportStatus {
//   PENDING
//   SUBMITTED
//   REVIEWING
//   APPROVED
// }

// enum InvitationStatus {
//   PENDING
//   ACCEPTED
//   EXPIRED
//   REVOKED
// }

// enum RegistrationStatus {
//   CONFIRMED
//   WAITLISTED
//   CANCELLED
// }

// enum AttendanceStatus {
//   REGISTERED
//   ATTENDED
//   NO_SHOW
// }

// enum BlockType {
//   HERO
//   FAQ
//   CTA
//   TESTIMONIALS
//   STATS
//   GALLERY
//   TEXT_CONTENT
//   PROGRAM_CARDS
//   SUCCESS_STORIES
//   DONATION_FORM
//   VOLUNTEER_SIGNUP
//   NEWSLETTER_SIGNUP
//   PARTNER_LOGOS
//   TEAM_GRID
//   TIMELINE
//   CONTACT_FORM
//   VIDEO_EMBED
//   MAP
//   ACCORDION
//   TABS
//   DIVIDER
// }

// enum CtaStyle {
//   PRIMARY
//   SECONDARY
//   OUTLINE
//   TEXT
// }

// enum CtaSize {
//   SMALL
//   MEDIUM
//   LARGE
// }

// enum GalleryLayout {
//   GRID
//   MASONRY
//   CAROUSEL
//   SLIDER
// }

// enum TextAlign {
//   LEFT
//   CENTER
//   RIGHT
//   JUSTIFY
// }

// enum ColorScheme {
//   DEFAULT
//   PRIMARY
//   SECONDARY
//   ACCENT
//   LIGHT
//   DARK
// }

// enum SkillCategory {
//   TECHNICAL
//   SOFT_SKILLS
//   LANGUAGES
//   CREATIVE
//   MANAGEMENT
// }

// enum SkillLevel {
//   BEGINNER
//   INTERMEDIATE
//   ADVANCED
//   EXPERT
// }

// enum Visibility {
//   PRIVATE
//   INTERNAL
//   PUBLIC
// }

// enum AssetType {
//   IMAGE
//   LOGO
//   DOCUMENT
//   VIDEO
// }

// enum DocumentType {
//   FINANCIAL_REPORT
//   ANNUAL_REPORT
//   BOARD_MINUTES
//   POLICY_DOCUMENT
//   GRANT_PROPOSAL
//   IMPACT_ASSESSMENT
//   TRAINING_MATERIAL
//   MARKETING_ASSET
//   LEGAL_DOCUMENT
// }

// enum PartnershipType {
//   CORPORATE
//   INSTITUTIONAL
//   COMMUNITY
//   GOVERNMENT
//   NONPROFIT
// }

// enum ImpactMetricType {
//   PARTICIPANTS_SERVED
//   JOBS_CREATED
//   BUSINESSES_STARTED
//   GRADUATION_RATE
//   VOLUNTEER_HOURS
//   FUNDS_RAISED
//   PARTNERSHIPS_FORMED
// }

// enum FormType {
//   CONTACT
//   VOLUNTEER_APPLICATION
//   PROGRAM_APPLICATION
//   NEWSLETTER_SIGNUP
//   PARTNERSHIP_INQUIRY
//   MENTORSHIP_REQUEST
//   FEEDBACK
//   STORY_SUBMISSION
// }

// enum ActivityType {
//   USER_REGISTERED
//   DONATION_RECEIVED
//   PROGRAM_COMPLETED
//   PARTNERSHIP_STARTED
//   STORY_SUBMITTED
//   VOLUNTEER_APPLIED
//   VOTE_CAST
//   ACTION_ITEM_CREATED
// }

// enum JobStatus {
//   PENDING
//   WAITING
//   PROCESSING
//   COMPLETED
//   FAILED
//   CANCELLED
// }

// enum Channel {
//   EMAIL
//   IN_APP
//   PUSH
//   SMS
// }

// enum NotifStatus {
//   PENDING
//   SENT
//   FAILED
//   SKIPPED
// }

// enum CommunicationTemplateType {
//   WELCOME_EMAIL
//   PROGRAM_CONFIRMATION
//   DONATION_RECEIPT
//   VOLUNTEER_CONFIRMATION
//   MENTORSHIP_MATCH
//   EVENT_REMINDER
//   NEWSLETTER
//   IMPACT_UPDATE
// }

// enum TokenType {
//   RESET_PASSWORD
//   VERIFY_EMAIL
//   IMPERSONATE
//   TWO_FACTOR_AUTH
//   ACCESS_TOKEN
//   REFRESH_TOKEN
//   MFA_TOKEN
// }

// enum OAuthProvider {
//   GOOGLE
//   FACEBOOK
// }

// enum Platform {
//   IOS
//   ANDROID
//   WEB
// }

// enum FeatureFlagKey {
//   COMMUNITY_DIRECTORY
//   MENTORSHIP_PROGRAM
//   ALUMNI_JOB_BOARD
//   PEER_TO_PEER_FUNDRAISING
//   ADVANCED_ANALYTICS
//   AI_CONTENT_RECOMMENDATIONS
// }

// // =============================================================================
// // SECTION 1: CORE PLATFORM, AUTH & SECURITY
// // Foundational models for users, authentication, roles, and system settings.
// // =============================================================================

// model User {
//   id       String  @id @default(cuid())
//   email    String  @unique
//   username String? @unique

//   hashedPassword String?
//   isVerified     Boolean   @default(false)
//   emailVerified  DateTime?
//   lastLoginAt    DateTime?
//   isActive       Boolean   @default(true)
//   deactivatedAt  DateTime?
//   lockedUntil    DateTime?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt

//   impersonatingUserId   String?
//   securityTimestamp     DateTime @default(now())
//   passwordResetRequired Boolean  @default(false)

//   roles      Role[]
//   mfaSecret  String?
//   mfaEnabled Boolean @default(false)

//   // Direct Profile Info
//   profile UserProfile?

//   mfaSessions     MfaSession[]
//   // Relations to other systems
//   sessions        UserSession[]
//   tokens          Token[]
//   trustedDevices  TrustedDevice[]
//   passwordHistory PasswordHistory[]
//   //auditLogs               AuditLog[]                   @relation("AuditLogActor")
//   onboarding      UserOnboarding?
//   preferences     UserPreferences?
//   //  notificationsReceived Notification[]    @relation("RecipientNotifications")
//   userConsent     UserConsent?
//   achievements    UserAchievement[]

//   // Onboarding flags
//   onboardingStartedAt   DateTime?
//   onboardingCompletedAt DateTime?
//   onboardingSkipped     Boolean   @default(false)
//   onboardingVersion     String? // Track which template version they used

//   failedLoginAttempts FailedLoginAttempt[]

//   // Activity Relations
//   donations             Donation[]
//   eventRegistrations    EventRegistration[]
//   participantIn         ProgramParticipant[]
//   programEnrolments     ProgramEnrolment[]
//   successStories        SuccessStory[]            @relation("UserStories")
//   newsArticles          NewsArticle[]
//   volunteerApplications VolunteerApplication[]
//   documentUploads       Document[]                @relation("DocumentUploader")
//   impactReports         ImpactReport[]            @relation("ReportAuthor")
//   courseEnrollments     TrainingCourse[]          @relation("CourseEnrollments")
//   surveyResponses       SurveyResponse[]
//   partnershipContacts   Partnership[]             @relation("PartnershipContacts")
//   managedPartnerships   Partnership[]             @relation("PartnershipManager")
//   siteVisits            SiteVisit[]
//   conversationLinks     ConversationParticipant[]
//   messagesSent          Message[]

//   devices             PushDevice[]
//   auditLog            AuditLog[]     @relation("AuditLogActor")
//   organizationId      String?
//   organization        Organization[]
//   position            String?
//   activityLog         ActivityLog[]
//   onboardingCompleted Boolean        @default(false)

//   mentorshipRequests   MentorshipRequest[] @relation("MentorshipRequestRequester")
//   mentorshipsMentoring MentorshipRequest[] @relation("MentorshipRequestMentor")
//   certificationsEarned Certification[]

//   failedLoginAttemptId String?

//   // Analytics
//   analyticsProperties Json?

//   // Notification
//   notificationPreferences NotificationPreference?
//   pushSubscriptions       PushSubscription[]

//   // Relationships for new models
//   jobs              Job[]
//   dashboards        AnalyticsDashboard[]
//   analyticsEvents   AnalyticsEvent[]
//   createdReports    ReportDefinition[]   @relation("ReportCreator")
//   generatedReports  GeneratedReport[]
//   reportPermissions ReportPermission[]
//   scheduledReports  ScheduledReport[]

//   // Admin Actions
//   createdPrograms Program[]        @relation("CreatedBy")
//   updatedPrograms Program[]        @relation("UpdatedBy")
//   createdEvents   Event[]          @relation("CreatedBy")
//   invitationsSent UserInvitation[] @relation("InvitedUsers")
//   TeamMember      TeamMember?
//   Notification    Notification[]

//   // Relationships to the email system
//   emailTemplatesCreated EmailTemplate[]        @relation("EmailTemplateCreator")
//   emailTemplateVersions EmailTemplateVersion[] @relation("EmailTemplateVersionCreator")
//   emailListsCreated     EmailList[]            @relation("EmailListCreator")
//   emailCampaignsCreated EmailCampaign[]        @relation("EmailCampaignCreator")

//   @@index([email])
//   @@index([isActive])
//   @@index([lockedUntil])
// }

// model UserProfile {
//   id        String   @id @default(cuid())
//   userId    String   @unique
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   firstName String?
//   lastName  String?
//   avatarUrl String?
//   bio       String?  @db.VarChar(500)
//   phone     String?
//   jobTitle  String?
//   company   String?
//   linkedin  String?
//   twitter   String?
//   interests String[]

//   completedPct Int     @default(0)
//   // Abstracted location for future use
//   address      Address @relation(fields: [addressId], references: [id]) // { city, country, etc. }

//   skills UserSkill[]

//   createdAt   DateTime              @default(now())
//   updatedAt   DateTime              @updatedAt
//   addressId   String
//   assignments VolunteerAssignment[]
// }

// model UserPreferences {
//   id     String @id @default(cuid())
//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   theme    String @default("system")
//   language String @default("en")
//   timezone String @default("UTC")

//   profileVisibility Visibility @default(PUBLIC)

//   dateFormat String @default("MM/dd/yyyy")
//   timeFormat String @default("12h")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
//   @@index([language])
//   @@index([profileVisibility])
// }

// model UserSession {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   expiresAt    DateTime
//   ipAddress    String?
//   userAgent    String?
//   createdAt    DateTime @default(now())
//   lastAccessed DateTime @default(now())

//   deviceFingerprint String?

//   @@index([userId])
//   @@index([expiresAt])
//   @@index([sessionToken])
//   @@index([deviceFingerprint])
// }

// model Account {
//   id                String @id @default(cuid())
//   userId            String
//   provider          String
//   providerAccountId String

//   access_token  String? @db.Text
//   refresh_token String? @db.Text
//   expires_at    Int?

//   @@unique([provider, providerAccountId])
// }

// model Token {
//   id     String @id @default(cuid())
//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   type      TokenType
//   tokenHash String    @unique
//   jti       String?   @unique
//   expiresAt DateTime
//   used      Boolean   @default(false)

//   // Add fields for MFA tokens
//   mfaVerified Boolean @default(false)
//   mfaMethod   String? // "totp", "sms", "email"

//   createdAt DateTime @default(now())

//   @@index([userId])
//   @@index([type])
//   @@index([expiresAt])
//   @@index([used])
//   @@index([jti]) // Add index for JTI lookups
// }

// model TokenBlacklist {
//   id        String   @id @default(cuid())
//   jti       String   @unique
//   expiresAt DateTime // When the blacklist entry can be removed

//   @@index([expiresAt])
// }

// model MfaSession {
//   id        String   @id @default(cuid())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   tokenJti  String   @unique
//   method    String // "totp", "sms", "email"
//   verified  Boolean  @default(false)
//   expiresAt DateTime
//   createdAt DateTime @default(now())

//   @@index([userId])
//   @@index([tokenJti])
//   @@index([expiresAt])
// }

// model Permission {
//   id       String           @id @default(cuid())
//   resource String // e.g., "program", "user"
//   action   String // e.g., "create", "read", "update", "delete"
//   roles    RolePermission[]

//   @@unique([resource, action])
// }

// model RolePermission {
//   id           String     @id @default(cuid())
//   role         Role
//   permissionId String
//   permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

//   @@unique([role, permissionId])
// }

// enum TeamMemberType {
//   LEADERSHIP
//   BOARD_MEMBER
//   KEY_STAFF
//   ADVISOR
// }

// model TeamMember {
//   id          String  @id @default(cuid())
//   name        String
//   title       Json // For multi-language job titles
//   bio         Json?
//   imageUrl    String?
//   linkedinUrl String?
//   twitterUrl  String?
//   email       String?

//   type         TeamMemberType
//   displayOrder Int            @default(0)
//   isActive     Boolean        @default(true)

//   // Optional: Link to a platform user if they have an account
//   userId String? @unique
//   user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([type, isActive, displayOrder])
// }

// model AuditLog {
//   id        String   @id @default(cuid())
//   action    String
//   actorId   String?
//   actor     User?    @relation("AuditLogActor", fields: [actorId], references: [id], onDelete: SetNull)
//   meta      Json?
//   createdAt DateTime @default(now())
//   entityId  String?
//   entity    String?

//   @@index([actorId])
//   @@index([action])
//   @@index([createdAt])
// }

// model TrustedDevice {
//   id          String   @id @default(cuid())
//   userId      String
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   fingerprint String
//   userAgent   String?
//   lastIp      String?
//   lastUsedAt  DateTime @default(now()) // @updatedAt is now @default(now()) and managed manually
//   createdAt   DateTime @default(now())

//   verifiedAt DateTime?

//   @@unique([userId, fingerprint])
// }

// model PasswordHistory {
//   id             String   @id @default(cuid())
//   userId         String
//   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   hashedPassword String
//   createdAt      DateTime @default(now())

//   @@index([userId, createdAt])
// }

// model AppSetting {
//   key   String @id
//   value Json
//   group String @default("GENERAL")

//   description String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BrandConfig {
//   id        String   @id @default(cuid())
//   singleton String   @unique @default("main")
//   name      String   @default("AWE e.V.")
//   logoUrl   String?
//   colors    Json
//   contact   Json
//   social    Json
//   updatedAt DateTime @updatedAt
// }

// model FeatureFlag {
//   key         String  @id
//   description String?
//   isActive    Boolean @default(false)

//   rolloutPercentage Int      @default(0)
//   allowedUserIds    String[]
//   allowedRoles      Role[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// // ============================================================================
// // JOB QUEUE MODELS
// // ============================================================================

// model Job {
//   id           String    @id @default(cuid())
//   type         String // e.g., "email.sendWelcome"
//   status       JobStatus @default(PENDING)
//   payload      Json? // The job parameters
//   result       Json? // The job result/output
//   error        String? // Error message if failed
//   inngestRunId String?   @unique // Inngest run ID for linking

//   // Scheduling & Priority
//   scheduledFor DateTime? // When the job should run
//   priority     Int       @default(0) // Higher number = higher priority
//   maxRetries   Int       @default(3)

//   // Timestamps
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   startedAt   DateTime? // When processing started
//   completedAt DateTime? // When processing completed

//   // Relationships
//   userId String?
//   user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

//   // Metadata for custom use cases
//   metadata Json?
//   logs     JobLog[]
//   reports  GeneratedReport[]

//   dependsOnId String?
//   dependsOn   Job?    @relation("JobDependencies", fields: [dependsOnId], references: [id], onDelete: SetNull)
//   dependents  Job[]   @relation("JobDependencies")

//   @@index([type, status])
//   @@index([status, scheduledFor])
//   @@index([userId, status])
//   @@index([createdAt])
//   @@index([priority, createdAt])
//   @@index([dependsOnId])
// }

// model JobLog {
//   id    String @id @default(cuid())
//   jobId String
//   job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

//   status   JobStatus
//   message  String
//   metadata Json?

//   createdAt DateTime @default(now())

//   @@index([jobId, createdAt])
// }

// // ============================================================================
// // ANALYTICS & REPORTING SYSTEM 
// // ============================================================================

// model AnalyticsDashboard {
//   id          String @id @default(cuid())
//   name        Json // Multi-language dashboard names
//   description Json?

//   slug String @unique

//   // Dashboard Configuration
//   layout    Json // Dashboard layout and widget configuration
//   isDefault Boolean @default(false)
//   isPublic  Boolean @default(false)

//   // Access Control
//   userId       String // Owner
//   sharedWith   Json? // Array of user IDs
//   allowedRoles Role[]
//   createdBy    String

//   // Widgets
//   widgets DashboardWidget[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   User      User[]

//   @@index([isDefault, isPublic])
//   @@index([userId])
//   @@index([slug])
// }

// model DashboardWidget {
//   id          String             @id @default(cuid())
//   dashboardId String
//   dashboard   AnalyticsDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

//   title Json // Multi-language widget titles
//   type  String // chart, metric, table, map, etc.

//   // Widget Configuration
//   config     Json // Widget-specific configuration
//   dataSource String // Which data source to use
//   query      Json? // Query parameters

//   order    Int  @default(0)
//   // Layout
//   position Json // { x: 0, y: 0, width: 4, height: 2 }

//   // Display
//   isVisible   Boolean @default(true)
//   refreshRate Int? // Auto-refresh interval in seconds

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([dashboardId, order])
// }

// model AnalyticsEvent {
//   id     String  @id @default(cuid())
//   userId String?
//   user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

//   eventName  String // e.g., 'DonationCompleted', 'PageViewed'
//   properties Json // Event properties

//   createdAt DateTime @default(now())

//   @@index([userId, eventName])
//   @@index([eventName, createdAt])
//   @@index([createdAt])
// }

// // ============================================================================
// // REPORTING MODELS
// // ============================================================================

// enum ReportType {
//   DONATION_SUMMARY
//   PROGRAM_IMPACT
//   FINANCIAL_OVERVIEW
//   ENGAGEMENT_METRICS
//   VOLUNTEER_HOURS
//   PARTNERSHIP_ROI
//   CUSTOM
// }

// enum ReportFormat {
//   PDF
//   CSV
//   XLSX
//   JSON
// }

// enum ReportDeliveryMethod {
//   EMAIL
//   IN_APP
//   DOWNLOAD
//   WEBHOOK
// }

// model ReportDefinition {
//   id          String     @id @default(cuid())
//   name        String
//   slug        String     @unique
//   type        ReportType
//   description String?

//   // Query/logic definition
//   query      Json? // SQL, Prisma query, or custom logic definition
//   parameters Json? // Array of ReportParameter definitions

//   // Access control
//   createdBy   String
//   creator     User               @relation("ReportCreator", fields: [createdBy], references: [id], onDelete: Cascade)
//   isPublic    Boolean            @default(false)
//   permissions ReportPermission[]

//   // Relationships
//   generatedReports GeneratedReport[]
//   schedules        ScheduledReport[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([type])
//   @@index([slug])
//   @@index([createdBy])
// }

// model ReportPermission {
//   id                 String           @id @default(cuid())
//   reportDefinitionId String
//   reportDefinition   ReportDefinition @relation(fields: [reportDefinitionId], references: [id], onDelete: Cascade)

//   userId String?
//   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   roleId String? // For role-based permissions

//   canView     Boolean @default(false)
//   canEdit     Boolean @default(false)
//   canDelete   Boolean @default(false)
//   canSchedule Boolean @default(false)

//   createdAt DateTime @default(now())

//   @@unique([reportDefinitionId, userId])
//   @@index([userId])
// }

// model GeneratedReport {
//   id                 String           @id @default(cuid())
//   reportDefinitionId String
//   reportDefinition   ReportDefinition @relation(fields: [reportDefinitionId], references: [id], onDelete: Cascade)

//   status   String // GENERATING, COMPLETED, FAILED
//   format   ReportFormat
//   fileUrl  String? // URL to the generated file
//   fileSize Int? // Size in bytes

//   // Parameters used for generation
//   parameters Json?

//   // Delivery
//   deliveryMethod ReportDeliveryMethod
//   recipientEmail String?

//   // Generation details
//   generatedBy String
//   generator   User     @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
//   generatedAt DateTime @default(now())

//   // Linked job
//   jobId String? @unique
//   job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)

//   // Error handling
//   error String?

//   // Metadata
//   metadata Json?

//   @@index([reportDefinitionId, status])
//   @@index([generatedBy])
//   @@index([generatedAt])
// }

// model ScheduledReport {
//   id                 String           @id @default(cuid())
//   reportDefinitionId String
//   reportDefinition   ReportDefinition @relation(fields: [reportDefinitionId], references: [id], onDelete: Cascade)

//   // Schedule configuration
//   frequency  String // daily, weekly, monthly, quarterly, yearly
//   dayOfWeek  Int? // 0-6 for weekly
//   dayOfMonth Int? // 1-31 for monthly
//   time       String? // HH:mm format
//   timezone   String  @default("UTC")

//   // Recipients
//   recipients Json // Array of {email, userId?}

//   // Report configuration
//   format     ReportFormat
//   parameters Json?

//   // Control
//   isActive  Boolean   @default(true)
//   lastRunAt DateTime?
//   nextRunAt DateTime?

//   // Audit
//   createdBy String
//   creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([isActive, nextRunAt])
//   @@index([reportDefinitionId])
// }

// // ============================================================================
// // MONITORING & AUDITING MODELS
// // ============================================================================

// model SystemLog {
//   id        String   @id @default(cuid())
//   timestamp DateTime @default(now())
//   level     LogLevel
//   message   String   @db.Text
//   metadata  Json?

//   userId  String?
//   context String? // e.g., 'JobService', 'APIv1', 'DonationFlow'

//   @@index([level, timestamp])
//   @@index([userId])
//   @@index([context])
// }

// model SystemError {
//   id        String   @id @default(cuid())
//   timestamp DateTime @default(now())

//   // Error Details
//   message  String @db.Text
//   name     String // e.g., 'TypeError', 'PrismaClientKnownRequestError'
//   stack    String @db.Text
//   metadata Json?

//   // Context
//   userId  String?
//   context String? // A tag for where the error occurred

//   // Resolution Tracking
//   isResolved Boolean   @default(false)
//   resolvedAt DateTime?
//   resolvedBy String? // User ID of the resolver

//   @@index([isResolved, timestamp])
//   @@index([name])
//   @@index([userId])
// }

// enum LogLevel {
//   DEBUG
//   INFO
//   WARN
//   ERROR
//   FATAL // For critical, app-breaking errors
// }

// // =============================================================================
// // SECTION 2: CMS (Content Management System)
// // Models for building dynamic, multi-language public-facing pages.
// // =============================================================================

// model Page {
//   id          String     @id @default(cuid())
//   slug        String     @unique
//   title       Json
//   status      PageStatus @default(DRAFT)
//   publishedAt DateTime?

//   layout     String  @default("default")
//   isHomepage Boolean @default(false)

//   parentPageId String?
//   parentPage   Page?   @relation("PageHierarchy", fields: [parentPageId], references: [id])
//   childPages   Page[]  @relation("PageHierarchy")

//   blocks ContentBlock[]
//   seo    SeoConfig?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([slug])
//   @@index([status, publishedAt])
// }

// model ContentBlock {
//   id        String    @id @default(cuid())
//   pageId    String
//   page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
//   order     Int
//   blockType BlockType // e.g., "HERO", "STATS"

//   // Style overrides
//   config Json?

//   isVisible     Boolean @default(true)
//   hideOnMobile  Boolean @default(false)
//   hideOnTablet  Boolean @default(false)
//   hideOnDesktop Boolean @default(false)

//   // Block data relations
//   blockHero             BlockHero?
//   blockFaq              BlockFaq?
//   blockCta              BlockCta?
//   blockTestimonials     BlockTestimonials?
//   blockStats            BlockStats?
//   blockGallery          BlockGallery?
//   blockTextContent      BlockTextContent?
//   blockProgramCards     BlockProgramCards?
//   blockSuccessStories   BlockSuccessStories?
//   blockDonationForm     BlockDonationForm?
//   blockVolunteerSignup  BlockVolunteerSignup?
//   blockNewsletterSignup BlockNewsletterSignup?
//   blockPartnerLogos     BlockPartnerLogos?
//   blockTeamGrid         BlockTeamGrid?
//   blockTimeline         BlockTimeline?
//   blockContactForm      BlockContactForm?
//   blockVideoEmbed       BlockVideoEmbed?
//   blockMap              BlockMap?
//   blockAccordion        BlockAccordion?
//   blockTabs             BlockTabs?
//   blockDivider          BlockDivider?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([pageId, order])
// }

// model BlockHero {
//   id                 String       @id @default(cuid())
//   contentBlockId     String       @unique
//   contentBlock       ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
//   internalName       String
//   title              Json
//   subtitle           Json?
//   ctaButtons         Json? // Array of { text, href, style }
//   backgroundImageUrl String?

//   badge       Json?
//   description Json?

//   textAlign   TextAlign   @default(LEFT)
//   colorScheme ColorScheme @default(DEFAULT)
//   minHeight   String?     @default("500px")

//   backgroundImageWidth  Int?
//   backgroundImageHeight Int?
//   backgroundVideoUrl    String?
//   overlayColor          String?
//   overlayOpacity        Float?          @default(0.5)
//   HeroCtaButton         HeroCtaButton[]
// }

// model BlockTextContent {
//   id             String       @id @default(cuid())
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)
//   internalName   String
//   content        Json

//   textAlign   TextAlign   @default(LEFT)
//   colorScheme ColorScheme @default(DEFAULT)
//   maxWidth    String?     @default("prose")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockMap {
//   id             String       @id @default(cuid())
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   internalName String
//   // Fields for map data, e.g., latitude, longitude, zoom, markers
//   latitude     Float
//   longitude    Float
//   zoom         Int      @default(12)
//   markers      Json? // Array of {lat, lng, title}
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }

// model BlockAccordion {
//   id             String       @id @default(cuid())
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   internalName String
//   items        AccordionItem[]
//   createdAt    DateTime        @default(now())
//   updatedAt    DateTime        @updatedAt
// }

// model AccordionItem {
//   id               String         @id @default(cuid())
//   blockAccordionId String
//   block            BlockAccordion @relation(fields: [blockAccordionId], references: [id], onDelete: Cascade)

//   order   Int
//   title   Json
//   content Json

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([blockAccordionId, order])
// }

// model BlockTabs {
//   id             String       @id @default(cuid())
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   internalName String
//   items        TabItem[]
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }

// model TabItem {
//   id          String    @id @default(cuid())
//   blockTabsId String
//   block       BlockTabs @relation(fields: [blockTabsId], references: [id], onDelete: Cascade)

//   order   Int
//   title   Json
//   content Json

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([blockTabsId, order])
// }

// model BlockDivider {
//   id             String       @id @default(cuid())
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   internalName String
//   // Fields for divider styling
//   height       Int?    @default(1)
//   color        String?
//   style        String? @default("solid") // e.g., solid, dashed, dotted

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model SeoConfig {
//   id              String   @id @default(cuid())
//   pageId          String   @unique
//   page            Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
//   metaTitle       Json
//   metaDescription Json?
//   updatedAt       DateTime @updatedAt

//   pageSlug String @unique
//   keywords Json

//   ogTitle       Json?
//   ogDescription Json?
//   ogImageUrl    String?
//   ogType        String? @default("website")

//   twitterCard        String? @default("summary_large_image")
//   twitterTitle       Json?
//   twitterDescription Json?
//   twitterImageUrl    String?

//   canonicalUrl   String?
//   noindex        Boolean   @default(false)
//   nofollow       Boolean   @default(false)
//   structuredData Json?
//   Program        Program[]
// }

// // =============================================================================
// // SECTION 3: PROGRAM MANAGEMENT
// // The core of the NGO's activities: programs and participant tracking.
// // =============================================================================

// model ProgramCategory {
//   id           String    @id @default(cuid())
//   slug         String    @unique
//   name         Json
//   description  Json?
//   iconName     String?
//   displayOrder Int       @default(0)
//   programs     Program[]
//   color        String
//   heroImageUrl String?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
// }

// model Program {
//   id          String          @id @default(cuid())
//   slug        String          @unique
//   name        Json
//   description Json
//   tagline     Json
//   status      ProgramStatus   @default(DRAFT)
//   categoryId  String
//   category    ProgramCategory @relation(fields: [categoryId], references: [id])
//   startDate   DateTime?
//   endDate     DateTime?

//   heroImageUrl      String?
//   thumbnailUrl      String?
//   videoThumbnailUrl String?
//   mediaGallery      String[]

//   // Relations
//   enrolments             ProgramEnrolment[]
//   participants           ProgramParticipant[]
//   successStories         SuccessStory[]         @relation("ProgramStories")
//   events                 Event[]
//   volunteerOpportunities VolunteerOpportunity[]
//   trainingCourses        TrainingCourse[]
//   impactMetrics          ImpactMetric[]
//   fundraisingCampaigns   FundraisingCampaign[]
//   siteVisits             SiteVisit[]

//   tags                Json @default("[]")
//   metrics             Json @default("[]")
//   curriculum          Json @default("[]")
//   eligibilityCriteria Json @default("[]")
//   applicationSteps    Json @default("[]")

//   seo SeoConfig @relation(fields: [seoConfigId], references: [id])

//   duration            String?
//   capacity            Int?
//   applicationDeadline DateTime?

//   requirements Json?
//   minAge       Int?
//   maxAge       Int?
//   requiredDocs String[]
//   cost         Decimal?
//   currency     String   @default("EUR")

//   rules          Json
//   steps          Json
//   requiredSkills String[] @default([])

//   grants    Grant[]
//   donations Donation[]
//   media     ContentMedia[]

//   createdByUserId String?
//   createdBy       User?   @relation("CreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
//   updatedByUserId String?
//   updatedBy       User?   @relation("UpdatedBy", fields: [updatedByUserId], references: [id], onDelete: SetNull)

//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   seoConfigId     String
//   ProgramCardItem ProgramCardItem[]
// }

// model ProgramEnrolment {
//   id        String          @id @default(cuid())
//   programId String
//   program   Program         @relation(fields: [programId], references: [id])
//   userId    String
//   user      User            @relation(fields: [userId], references: [id])
//   status    EnrolmentStatus @default(DRAFT)
//   answers   Json?
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt

//   @@unique([programId, userId])
// }

// model ProgramParticipant {
//   id             String    @id @default(cuid())
//   programId      String
//   program        Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
//   userId         String
//   user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   status         String // e.g., active, completed, withdrawn
//   enrollmentDate DateTime
//   completionDate DateTime?
//   outcomes       Json?

//   notes     String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([programId, userId])
// }

// // =============================================================================
// // SECTION 4: COMMUNITY & ENGAGEMENT
// // Models for community interaction, content, and events.
// // =============================================================================

// model SuccessStory {
//   id          String      @id @default(cuid())
//   slug        String      @unique
//   title       Json
//   excerpt     Json
//   content     Json
//   quote       String      @db.Text
//   status      StoryStatus @default(DRAFT)
//   publishedAt DateTime?
//   imageUrl    String?

//   authorId String?
//   author   User?   @relation("UserStories", fields: [authorId], references: [id], onDelete: SetNull)

//   programId String
//   program   Program @relation("ProgramStories", fields: [programId], references: [id])

//   testimonials TestimonialItem[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model NewsArticle {
//   id               String        @id @default(cuid())
//   slug             String        @unique
//   title            Json
//   content          Json
//   excerpt          Json?
//   featuredImageUrl String?
//   status           ContentStatus @default(DRAFT)
//   publishedAt      DateTime?

//   authorId String
//   author   User   @relation(fields: [authorId], references: [id])

//   media ContentMedia[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Event {
//   id          String      @id @default(cuid())
//   title       Json
//   description Json
//   eventType   String // workshop, fundraiser, community, board_meeting
//   startDate   DateTime
//   endDate     DateTime
//   location    Address?    @relation(fields: [addressId], references: [id]) // { name, address, url }
//   capacity    Int?
//   status      EventStatus @default(DRAFT)

//   // Flags & Special Properties
//   isVirtual            Boolean   @default(false)
//   meetingUrl           String?
//   registrationRequired Boolean   @default(true)
//   registrationDeadline DateTime?
//   requiresApproval     Boolean   @default(false)
//   tags                 String[]
//   imageUrl             String?

//   // Audience Control
//   corporateVolunteerFriendly Boolean @default(false)
//   alumniOnly                 Boolean @default(false)
//   majorDonorOnly             Boolean @default(false)

//   programId String?
//   program   Program? @relation(fields: [programId], references: [id], onDelete: SetNull)

//   createdByUserId String
//   createdBy       User   @relation("CreatedBy", fields: [createdByUserId], references: [id])

//   registrations EventRegistration[]
//   agenda        Agenda? // For board meetings

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   addressId String?

//   @@index([startDate])
//   @@index([eventType])
//   @@index([programId])
// }

// model EventRegistration {
//   id               String             @id @default(cuid())
//   eventId          String
//   event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
//   userId           String
//   user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
//   status           RegistrationStatus @default(CONFIRMED)
//   attendanceStatus AttendanceStatus   @default(REGISTERED)
//   createdAt        DateTime           @default(now())
//   registrationData Json? // { "specialRequirements": "...", "consentPhoto": true }
//   feedback         Json?
//   updatedAt        DateTime           @updatedAt

//   @@unique([eventId, userId])
//   @@index([status])
// }

// // =============================================================================
// // SECTION 5: INTERNAL MESSAGING SYSTEM
// // =============================================================================

// model Conversation {
//   id           String                    @id @default(cuid())
//   createdAt    DateTime                  @default(now())
//   updatedAt    DateTime                  @updatedAt
//   messages     Message[]
//   participants ConversationParticipant[]
// }

// model ConversationParticipant {
//   id             String       @id @default(cuid())
//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   userId         String
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   lastReadAt     DateTime?

//   @@unique([conversationId, userId])
// }

// model Message {
//   id             String       @id @default(cuid())
//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   senderId       String
//   sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
//   content        String       @db.Text
//   createdAt      DateTime     @default(now())
// }

// // =============================================================================
// // SECTION 6: VOLUNTEER & MENTORSHIP SYSTEMS
// // Models for managing volunteers, mentors, skills, and recognition.
// // =============================================================================

// model VolunteerOpportunity {
//   id             String  @id @default(cuid())
//   title          Json
//   description    Json
//   programId      String
//   program        Program @relation(fields: [programId], references: [id])
//   timeCommitment String
//   location       Json
//   isActive       Boolean @default(true)

//   maxVolunteers     Int?
//   currentVolunteers Int  @default(0)

//   //applications VolunteerApplication[] @relation("VolunteerInterests")

//   // Scheduling
//   startDate           DateTime?
//   endDate             DateTime?
//   applicationDeadline DateTime?

//   // Skills and matching
//   requiredSkills  String[]
//   preferredSkills String[]

//   // Categorization
//   tags        String[]
//   isUrgent    Boolean  @default(false)
//   isRecurring Boolean  @default(false)

//   // Relations
//   interestedVolunteers VolunteerApplication[] @relation("VolunteerInterests")
//   assignments          VolunteerAssignment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([programId, isActive])
// }

// model VolunteerApplication {
//   id                      String                     @id @default(cuid())
//   userId                  String
//   user                    User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
//   status                  VolunteerApplicationStatus @default(SUBMITTED)
//   motivation              String                     @db.Text
//   availability            Json
//   createdAt               DateTime                   @default(now())
//   updatedAt               DateTime                   @updatedAt
//   interestedOpportunities VolunteerOpportunity[]     @relation("VolunteerInterests")

//   backgroundCheck     Boolean   @default(false)
//   backgroundCheckDate DateTime?
//   references          Json? // Array of reference contacts
//   emergencyContact    Json?

//   // Review Process
//   reviewedBy    String?
//   reviewedAt    DateTime?
//   reviewNotes   String?
//   interviewDate DateTime?

//   @@index([userId])
//   @@index([status])
// }

// model VolunteerAssignment {
//   id                     String               @id @default(cuid())
//   volunteerOpportunityId String
//   opportunity            VolunteerOpportunity @relation(fields: [volunteerOpportunityId], references: [id])
//   userProfileId          String
//   volunteer              UserProfile          @relation(fields: [userProfileId], references: [id])
//   status                 String               @default("active")
//   startDate              DateTime
//   endDate                DateTime?
//   hoursCompleted         Int                  @default(0)

//   hoursCommitted  Int     @default(0)
//   feedback        String?
//   rating          Int? // 1-5 rating from program staff
//   completionNotes String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([volunteerOpportunityId, userProfileId])
//   @@index([userProfileId])
// }

// model MentorshipRequest {
//   id          String           @id @default(cuid())
//   requesterId String
//   requester   User             @relation("MentorshipRequestRequester", fields: [requesterId], references: [id])
//   mentorId    String?
//   mentor      User?            @relation("MentorshipRequestMentor", fields: [mentorId], references: [id], onDelete: SetNull)
//   status      MentorshipStatus @default(REQUESTED)

//   // Request Details
//   programId   String? // Which program context
//   goals       Json // What the mentee wants to achieve
//   preferences Json // Meeting preferences, communication style, etc.
//   duration    String // e.g., "3 months", "6 months", "ongoing"

//   // Matching
//   matchedAt   DateTime?
//   matchedBy   String? // Admin who made the match
//   matchReason String? // Why this pairing was made

//   // Progress Tracking
//   sessionsCompleted Int       @default(0)
//   lastSessionDate   DateTime?
//   nextSessionDate   DateTime?
//   completionNotes   String?

//   sessions MentorshipSession[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([requesterId])
//   @@index([mentorId])
//   @@index([status])
// }

// model MentorshipSession {
//   id                  String            @id @default(cuid())
//   mentorshipRequestId String
//   mentorshipRequest   MentorshipRequest @relation(fields: [mentorshipRequestId], references: [id], onDelete: Cascade)
//   scheduledAt         DateTime
//   duration            Int               @default(60) // minutes
//   format              String            @default("virtual") // virtual, in-person, phone
//   status              String            @default("scheduled") // scheduled, completed, cancelled, no-show

//   notes       String? @db.Text
//   actionItems Json?
//   // Session Details
//   agenda      Agenda? @relation(fields: [agendaId], references: [id])

//   // Feedback
//   mentorRating   Int? // 1-5
//   menteeRating   Int? // 1-5
//   mentorFeedback String?
//   menteeFeedback String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   agendaId  String?

//   @@index([mentorshipRequestId])
// }

// model Skill {
//   id       String        @id @default(cuid())
//   key      String        @unique
//   name     Json
//   category SkillCategory
//   users    UserSkill[]
// }

// model UserSkill {
//   id            String      @id @default(cuid())
//   userProfileId String
//   profile       UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
//   skillId       String
//   skill         Skill       @relation(fields: [skillId], references: [id])
//   level         SkillLevel  @default(INTERMEDIATE)

//   @@unique([userProfileId, skillId])
//   @@index([userProfileId])
//   @@index([skillId])
//   @@index([level])
// }

// model Badge {
//   id               String            @id @default(cuid())
//   name             Json
//   description      Json
//   imageUrl         String
//   criteria         String // e.g., "Logged 50 hours", "Completed Cultural Competency training"
//   userAchievements UserAchievement[]
// }

// model UserAchievement {
//   id        String   @id @default(cuid())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id])
//   badgeId   String
//   badge     Badge    @relation(fields: [badgeId], references: [id])
//   awardedAt DateTime @default(now())
//   notes     String?

//   @@unique([userId, badgeId])
// }

// // =============================================================================
// // SECTION 7: FINANCIALS, DONATIONS & PARTNERSHIPS
// // Models for managing revenue streams, partners, and grants.
// // =============================================================================

// model FundraisingCampaign {
//   id   String @id @default(cuid())
//   slug String @unique

//   title       Json // Multi-language campaign titles
//   description Json
//   story       Json? // Campaign story/narrative

//   // Campaign Details
//   type     String  @default("general") // general, emergency, program-specific, peer-to-peer
//   category String? // education, health, economic-empowerment, etc.

//   // Financial Goals
//   targetAmount    Decimal
//   currentAmount   Decimal  @default(0)
//   currency        String   @default("EUR")
//   minimumDonation Decimal? @default(5)

//   // Campaign Period
//   startDate DateTime
//   endDate   DateTime?
//   isActive  Boolean   @default(true)

//   // Visual Assets
//   heroImageUrl  String?
//   videoUrl      String?
//   galleryImages String[]

//   // Program Association
//   programId String?
//   program   Program? @relation(fields: [programId], references: [id], onDelete: SetNull)

//   // Campaign Management
//   managerId      String?
//   isPublic       Boolean @default(true)
//   allowRecurring Boolean @default(true)

//   // Tracking
//   donorCount Int @default(0)
//   shareCount Int @default(0)
//   viewCount  Int @default(0)

//   // Related campaigns (peer-to-peer)
//   parentCampaignId String?
//   parentCampaign   FundraisingCampaign?  @relation("CampaignHierarchy", fields: [parentCampaignId], references: [id])
//   childCampaigns   FundraisingCampaign[] @relation("CampaignHierarchy")

//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   Donation  Donation[]

//   @@index([isActive, startDate, endDate])
//   @@index([programId])
//   @@index([parentCampaignId])
// }

// model Donation {
//   id          String  @id @default(cuid())
//   amount      Decimal @db.Decimal(10, 2)
//   currency    String  @default("EUR")
//   isRecurring Boolean @default(false)
//   frequency   String  @default("ONE_TIME")

//   paymentMethod String?
//   paymentId     String? @unique

//   status            String // e.g., succeeded, pending, failed
//   processedAt       DateTime?
//   anonymous         Boolean              @default(false)
//   donorId           String
//   donor             User                 @relation(fields: [donorId], references: [id])
//   programId         String?
//   program           Program?             @relation(fields: [programId], references: [id], onDelete: SetNull)
//   campaignId        String?
//   campaign          FundraisingCampaign? @relation(fields: [campaignId], references: [id])
//   createdAt         DateTime             @default(now())
//   updatedAt         DateTime             @updatedAt
//   paymentGatewayRef String?              @unique
//   donorMessage      String?
//   taxReceiptSent    Boolean              @default(false)
//   taxReceiptSentAt  DateTime?

//   recurringInterval String? // monthly, quarterly, yearly
//   nextPaymentDate   DateTime?
//   metadata          Json? // For additional campaign-specific data
// }

// model Organization {
//   id           String        @id @default(cuid())
//   name         String        @unique
//   website      String?
//   logoUrl      String?
//   partnerships Partnership[] @relation("OrganizationPartnerships")
//   grants       Grant[]
//   jobPostings  JobPosting[]

//   description  String?
//   industry     String?
//   size         String? // e.g., "1-10", "11-50", "51-200"
//   contactEmail String?
//   contactPhone String?
//   address      Json?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   User      User?    @relation(fields: [userId], references: [id])
//   userId    String?
// }

// model Partnership {
//   id   String @id @default(cuid())
//   slug String @unique

//   // Basic Info
//   name           Json // Multi-language partner name
//   organizationId String
//   organization   Organization @relation("OrganizationPartnerships", fields: [organizationId], references: [id])

//   type   PartnershipType
//   status PartnershipStatus @default(PROSPECT)

//   // Partnership Details
//   description Json
//   value       Decimal? // Annual partnership value
//   currency    String    @default("EUR")
//   startDate   DateTime?
//   endDate     DateTime?
//   renewalDate DateTime?

//   // Management
//   managerId String?
//   manager   User?   @relation("PartnershipManager", fields: [managerId], references: [id], onDelete: SetNull)

//   // Contact Information
//   primaryContacts User[] @relation("PartnershipContacts")

//   // Partnership Benefits & Deliverables
//   benefits     Json // What the partner gets
//   deliverables Json // What AWE provides
//   requirements Json // What AWE needs from partner

//   // Tracking
//   lastContact  DateTime?
//   nextFollowUp DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   reports      PartnershipReport[]
//   interactions PartnershipInteraction[]
//   renewals     PartnershipRenewal[]
//   BrandBenefit BrandBenefit[]

//   @@index([status])
//   @@index([type])
//   @@index([renewalDate])
// }

// model PartnershipReport {
//   id            String      @id @default(cuid())
//   partnershipId String
//   partnership   Partnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

//   reportPeriod String // e.g., "Q1 2024", "Annual 2023"
//   generatedAt  DateTime @default(now())
//   generatedBy  String?

//   // Impact Data
//   impactMetrics Json
//   outcomes      Json
//   feedback      Json

//   // Files
//   reportUrl       String? // PDF report link
//   presentationUrl String? // Presentation slides link

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([partnershipId])
// }

// model PartnershipInteraction {
//   id              String      @id @default(cuid())
//   partnershipId   String
//   partnership     Partnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
//   interactionType String // meeting, email, call
//   subject         String
//   summary         String?     @db.Text
//   interactedAt    DateTime    @default(now())

//   attendees        String[] // User IDs or external contacts
//   followUpRequired Boolean   @default(false)
//   followUpDate     DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([partnershipId])
//   @@index([followUpRequired, followUpDate])
// }

// model BrandBenefit {
//   id            String      @id @default(cuid())
//   partnershipId String
//   partnership   Partnership @relation(fields: [partnershipId], references: [id])
//   type          String // e.g., media_mention, social_media_post
//   description   String
//   url           String?
//   date          DateTime
//   value         Decimal? // Estimated monetary value
// }

// model Grant {
//   id             String        @id @default(cuid())
//   organizationId String
//   organization   Organization  @relation(fields: [organizationId], references: [id])
//   programId      String
//   program        Program       @relation(fields: [programId], references: [id])
//   name           String
//   grantAmount    Decimal
//   startDate      DateTime
//   endDate        DateTime
//   status         GrantStatus   @default(ACTIVE)
//   reports        GrantReport[]

//   goals             Json
//   createdAt         DateTime  @default(now())
//   updatedAt         DateTime  @updatedAt
//   grantReference    String? // External reference number
//   contactPerson     String?
//   contactEmail      String?
//   renewalEligible   Boolean   @default(false)
//   nextReviewDate    DateTime?
//   requiresMatching  Boolean   @default(false)
//   matchingAmount    Decimal?
//   restrictions      Json? // Spending restrictions
//   reportingSchedule Json? // When reports are due
// }

// model GrantReport {
//   id            String       @id @default(cuid())
//   grantId       String
//   grant         Grant        @relation(fields: [grantId], references: [id], onDelete: Cascade)
//   title         String
//   dueDate       DateTime
//   submittedDate DateTime?
//   status        ReportStatus @default(PENDING)
//   documentUrl   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   reportType  String    @default("progress") // progress, financial, final
//   reviewedBy  String?
//   reviewedAt  DateTime?
//   feedback    String?
//   isApproved  Boolean   @default(false)
//   nextDueDate DateTime?
// }

// model JobPosting {
//   id                     String        @id @default(cuid())
//   title                  String
//   company                String
//   link                   String
//   location               Address?      @relation(fields: [addressId], references: [id])
//   alumniVisible          Boolean       @default(true)
//   postedByOrganizationId String?
//   postedByOrganization   Organization? @relation(fields: [postedByOrganizationId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   description         String?
//   requirements        String[]
//   salaryRange         String?
//   jobType             String? // full-time, part-time, contract, internship
//   isRemote            Boolean   @default(false)
//   applicationDeadline DateTime?
//   isActive            Boolean   @default(true)
//   tags                String[]
//   experienceLevel     String? // entry, mid, senior
//   addressId           String?
// }

// // =============================================================================
// // SECTION 8: BOARD GOVERNANCE PORTAL
// // Specific models for Board Member portal features like meetings and voting.
// // =============================================================================

// model Agenda {
//   id                String              @id @default(cuid())
//   eventId           String              @unique
//   event             Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
//   items             AgendaItem[]
//   status            String              @default("draft") // draft, finalized
//   MentorshipSession MentorshipSession[]
// }

// model AgendaItem {
//   id          String       @id @default(cuid())
//   agendaId    String
//   agenda      Agenda       @relation(fields: [agendaId], references: [id], onDelete: Cascade)
//   order       Int
//   title       String
//   presenter   String?
//   notes       String?
//   duration    Int? // in minutes
//   vote        Vote?
//   actionItems ActionItem[]
// }

// model Vote {
//   id           String     @id @default(cuid())
//   agendaItemId String     @unique
//   agendaItem   AgendaItem @relation(fields: [agendaItemId], references: [id])
//   question     String
//   options      Json // ["For", "Against", "Abstain"]
//   status       String     @default("open") // open, closed
//   result       String?
//   ballots      Ballot[]
// }

// model Ballot {
//   id      String   @id @default(cuid())
//   voteId  String
//   vote    Vote     @relation(fields: [voteId], references: [id])
//   voterId String // User ID of the board member
//   choice  String
//   castAt  DateTime @default(now())

//   @@unique([voteId, voterId])
// }

// model ActionItem {
//   id           String      @id @default(cuid())
//   description  String
//   ownerId      String // User ID of the owner
//   dueDate      DateTime?
//   status       String      @default("pending") // pending, in-progress, completed
//   agendaItemId String?
//   agendaItem   AgendaItem? @relation(fields: [agendaItemId], references: [id])
//   createdAt    DateTime    @default(now())
//   completedAt  DateTime?
// }

// // =============================================================================
// // SECTION 9: DONOR PORTAL FEATURES
// // Specific models for Major Donor portal features.
// // =============================================================================

// model SiteVisit {
//   id            String    @id @default(cuid())
//   donorId       String
//   donor         User      @relation(fields: [donorId], references: [id])
//   programId     String
//   program       Program   @relation(fields: [programId], references: [id])
//   requestedDate DateTime
//   scheduledDate DateTime?
//   status        String    @default("requested") // requested, scheduled, completed, cancelled
//   notes         String?
// }

// // =============================================================================
// // SECTION 10: SUPPORTING SYSTEMS
// // Cross-cutting concerns like documents, media, notifications, and analytics.
// // =============================================================================

// model Document {
//   id    String       @id @default(cuid())
//   title Json
//   type  DocumentType

//   // File Information
//   fileUrl  String
//   fileName String
//   mimeType String?
//   size     Int? // in bytes

//   // Metadata
//   description Json?
//   tags        String[]
//   version     String   @default("1.0")
//   language    String   @default("en")

//   // Access Control
//   isPublic       Boolean @default(false)
//   allowedRoles   Role[]
//   accessPassword String? // For password-protected docs

//   uploaderId String
//   uploader   User   @relation("DocumentUploader", fields: [uploaderId], references: [id])

//   // Approval Workflow
//   requiresApproval Boolean   @default(false)
//   isApproved       Boolean   @default(true)
//   approvedBy       String?
//   approvedAt       DateTime?

//   // Tracking
//   downloadCount Int       @default(0)
//   lastAccessed  DateTime?

//   // Relationships
//   categoryId String?
//   category   DocumentCategory? @relation(fields: [categoryId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([type])
//   @@index([isPublic, isApproved])
//   @@index([categoryId])
// }

// model DocumentCategory {
//   id          String @id @default(cuid())
//   name        Json
//   description Json?

//   slug      String             @unique
//   parentId  String?
//   parent    DocumentCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
//   children  DocumentCategory[] @relation("CategoryHierarchy")
//   documents Document[]

//   displayOrder Int     @default(0)
//   isActive     Boolean @default(true)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([slug])
//   @@index([parentId])
// }

// model MediaAsset {
//   id           String         @id @default(cuid())
//   publicId     String         @unique
//   secureUrl    String
//   title        String?
//   assetType    AssetType      @default(IMAGE)
//   tags         String[]
//   createdAt    DateTime       @default(now())
//   ContentMedia ContentMedia[]
// }

// // ============================================================================
// // Notification System Database Schema 
// // Add to your existing schema.prisma
// // ============================================================================

// // SECTION: Notification Templates
// model NotificationTemplate {
//   id       String               @id @default(cuid())
//   // ✅ REFINEMENT: Renamed `key` to `slug` for consistency with other models.
//   slug     String               @unique // e.g., "auth.password-reset", "donation.receipt"
//   name     String
//   category NotificationCategory

//   // ✅ REFINEMENT: `type` is removed. Category is sufficient for routing logic.
//   // The specific content is determined by the `slug`.

//   // Content (JSON with language variants)
//   // { "email": { "en": { "subject": "...", "body": "..." }, "de": { ... } }, "push": { "en": { ... } } }
//   content Json

//   // Metadata
//   variables Json @default("[]") // Expected template variables with descriptions: [{ "name": "firstName", "description": "User's first name" }]

//   // Rules Engine
//   // ✅ REFINEMENT: Simplified rules. The service logic will handle this.
//   canBeDisabled Boolean @default(true) // Can users opt out of this specific notification?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   isActive  Boolean  @default(true)

//   // Relation
//   notifications Notification[]

//   @@index([slug])
//   @@index([category])
// }

// // SECTION: The Core Notification Request (The "What" and "Who")
// model Notification {
//   id String @id @default(cuid())

//   // Template & Recipient
//   templateId String
//   template   NotificationTemplate @relation(fields: [templateId], references: [id])
//   userId     String
//   user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

//   // Context
//   data Json? // The variables used to render the templates (e.g., { "amount": 50, "currency": "EUR" })

//   // ✅ REFINEMENT: Status now reflects user interaction, not delivery.
//   readAt     DateTime?
//   archivedAt DateTime?

//   // Audit & Creation
//   createdAt DateTime @default(now())

//   // Relation to individual delivery attempts
//   deliveries NotificationDelivery[]

//   @@index([userId, readAt, createdAt(sort: Desc)])
// }

// // SECTION: Individual Delivery Attempts (The "How" and "When")
// model NotificationDelivery {
//   id String @id @default(cuid())

//   // Parent Notification Request
//   notificationId String
//   notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

//   // Channel & Status
//   channel NotificationChannel
//   status  NotificationStatus  @default(PENDING)

//   // Content (rendered for this specific channel)
//   subject String? // For email, push
//   body    String  @db.Text

//   // Scheduling & Delivery
//   jobId        String?   @unique // ID of the Inngest job processing this delivery
//   scheduledFor DateTime?
//   sentAt       DateTime?
//   failedAt     DateTime?
//   errorMessage String?
//   retryCount   Int       @default(0)

//   // Tracking
//   providerMessageId String? // e.g., Resend Message-ID, Twilio SID
//   openedAt          DateTime?
//   clickedAt         DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([status, scheduledFor, createdAt])
//   @@index([notificationId])
//   @@index([channel, status])
// }

// // SECTION: User Notification Preferences
// model NotificationPreference {
//   id     String @id @default(cuid())
//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   // ✅ REFINEMENT: Structure preferences by category for clarity and scalability.
//   // JSON field allows adding new categories without schema migrations.
//   // Example: { "TRANSACTIONAL": { "EMAIL": true, "PUSH": false }, "PROMOTIONAL": { "EMAIL": true } }
//   channelPreferences Json @default("{}")

//   // GDPR Consent for marketing
//   marketingConsent   Boolean   @default(false)
//   marketingConsentAt DateTime?

//   // ✅ REFINEMENT: `preferredLanguage` moved to the main `UserPreferences` model
//   // as it's a general preference, not specific to notifications.

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// // SECTION: Device Tokens for Push Notifications
// model PushSubscription {
//   id        String   @id @default(cuid())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   endpoint  String   @unique // The unique URL provided by the browser's push service
//   keys      Json // p256dh and auth keys
//   createdAt DateTime @default(now())

//   @@index([userId])
// }

// // SECTION: Enums

// // ✅ REFINEMENT: Simplified categories
// enum NotificationCategory {
//   SYSTEM_ALERT // Non-disableable (e.g., password reset, security alerts)
//   TRANSACTIONAL // Service-related, defaults ON, user can disable by channel (e.g., donation receipt)
//   PROMOTIONAL // Marketing-related, defaults OFF, user must opt-in (e.g., newsletter)
// }

// enum NotificationChannel {
//   EMAIL
//   SMS
//   PUSH
//   IN_APP // This is a virtual channel; its existence is the `Notification` record itself.
// }

// // ✅ REFINEMENT: Status is for delivery attempts, not the parent notification.
// enum NotificationStatus {
//   PENDING // Waiting to be picked up by a job.
//   QUEUED // Job has picked it up and is about to send.
//   SENT // Sent to the provider API successfully.
//   DELIVERED // Confirmation received from provider (if supported).
//   FAILED // Delivery attempt failed.
//   CANCELLED // Canceled before it was sent.
// }

// enum NotificationType {
//   USER_WELCOME
//   USER_APPLICATION_RECEIVED
//   USER_APPLICATION_APPROVED
//   DONATION_THANK_YOU
//   DONATION_IMPACT_UPDATE
//   PARTNER_REPORT_READY
//   BOARD_MEETING_REMINDER
//   BOARD_DOCUMENT_UPLOADED
//   BOARD_VOTE_REQUIRED
//   ACTION_ITEM_ASSIGNED
//   MESSAGE_RECEIVED

//   USER_APPLICATION_REJECTED
//   VOLUNTEER_NEW_OPPORTUNITY
//   VOLUNTEER_SCHEDULE_REMINDER
//   VOLUNTEER_TRAINING_AVAILABLE
//   VOLUNTEER_RECOGNITION_AWARDED
//   MENTOR_NEW_REQUEST
//   MENTOR_SESSION_REMINDER
//   ALUMNI_EVENT_INVITE
//   ALUMNI_GIVE_BACK_CAMPAIGN

//   ADMIN_STORY_PENDING_REVIEW
//   ADMIN_VOLUNTEER_APPLICATION_RECEIVED
//   ADMIN_PARTNERSHIP_INQUIRY
// }

// model WebhookSubscription {
//   id          String   @id @default(cuid())
//   url         String
//   events      String[] // Array of WebhookEvent enum values
//   secret      String
//   description String?
//   isActive    Boolean  @default(true)
//   metadata    Json?

//   deliveries WebhookDelivery[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([isActive])
// }

// model WebhookDelivery {
//   id             String              @id @default(cuid())
//   subscriptionId String
//   subscription   WebhookSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

//   event       String
//   payload     Json
//   status      String    @default("PENDING") // PENDING, DELIVERED, FAILED
//   attempts    Int       @default(0)
//   deliveredAt DateTime?
//   error       String?

//   createdAt DateTime @default(now())

//   @@index([subscriptionId, status])
//   @@index([event, createdAt])
// }

// model ImpactMetric {
//   id        String           @id @default(cuid())
//   programId String
//   program   Program          @relation(fields: [programId], references: [id])
//   name      Json
//   type      ImpactMetricType
//   unit      String // people, hours, euros, percent

//   // Target vs Actual
//   targetValue  Decimal?
//   currentValue Decimal   @default(0)
//   targetDate   DateTime?

//   // Calculation Method
//   calculationMethod String? // How this metric is calculated
//   isAutoCalculated  Boolean   @default(false)
//   lastCalculated    DateTime?

//   // Display
//   displayOrder    Int     @default(0)
//   isPublic        Boolean @default(true)
//   showOnDashboard Boolean @default(false)

//   // Tracking
//   dataPoints ImpactDataPoint[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([programId])
//   @@index([type])
// }

// model ImpactDataPoint {
//   id         String       @id @default(cuid())
//   metricId   String
//   metric     ImpactMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
//   value      Decimal
//   recordedAt DateTime     @default(now())

//   recordedBy String?
//   period     String? // e.g., "2024-Q1", "2024-03", "weekly"

//   // Context
//   notes      String?
//   source     String? // Where this data came from
//   isVerified Boolean   @default(false)
//   verifiedBy String?
//   verifiedAt DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([metricId, recordedAt])
// }

// model ImpactReport {
//   id    String @id @default(cuid())
//   title Json // Multi-language titles
//   type  String // "monthly", "quarterly", "annual", "program-specific"

//   // Report Period
//   startDate DateTime
//   endDate   DateTime

//   // Content
//   summary    Json // Executive summary in multiple languages
//   keyMetrics Json // Highlighted metrics and achievements
//   challenges Json? // Challenges faced during the period
//   nextSteps  Json? // Plans for next period

//   // Files
//   reportUrl       String? // Link to full PDF report
//   presentationUrl String? // Link to presentation slides

//   // Management
//   authorId String
//   author   User   @relation("ReportAuthor", fields: [authorId], references: [id])

//   status      String    @default("draft") // draft, review, approved, published
//   publishedAt DateTime?

//   // Access
//   isPublic     Boolean @default(false)
//   allowedRoles Role[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([type, startDate, endDate])
//   @@index([status, publishedAt])
// }

// model TrainingCourse {
//   id        String   @id @default(cuid())
//   programId String?
//   program   Program? @relation(fields: [programId], references: [id], onDelete: SetNull)

//   title       Json // Multi-language titles
//   description Json
//   curriculum  Json // Course outline and modules

//   // Course Details
//   duration      String? // e.g., "4 weeks", "2 days"
//   format        String  @default("online") // online, in-person, hybrid
//   difficulty    String  @default("beginner") // beginner, intermediate, advanced
//   prerequisites Json?

//   // Content
//   materialUrl String? // Link to course materials
//   videoUrl    String? // Link to video content

//   // Requirements
//   isRequired         Boolean @default(false) // For volunteers/staff
//   requiresCompletion Boolean @default(true)
//   passingScore       Int? // If there's an assessment

//   // Certification
//   providesCertificate Boolean @default(false)
//   certificateTemplate String?

//   // Management
//   instructorId    String?
//   maxParticipants Int?
//   isActive        Boolean @default(true)

//   // Scheduling
//   startDate            DateTime?
//   endDate              DateTime?
//   registrationDeadline DateTime?

//   enrollments    User[]          @relation("CourseEnrollments")
//   certifications Certification[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([programId])
//   @@index([isActive, startDate])
// }

// model Certification {
//   id               String @id @default(cuid())
//   trainingCourseId String
//   userId           String

//   course TrainingCourse @relation(fields: [trainingCourseId], references: [id], onDelete: Cascade)
//   user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

//   // Certification Details
//   certificateNumber String    @unique
//   issuedDate        DateTime  @default(now())
//   expiresAt         DateTime?
//   isActive          Boolean   @default(true)

//   // Assessment Results
//   finalScore     Int?
//   isPassed       Boolean @default(true)
//   assessmentData Json?

//   // Certificate File
//   certificateUrl String? // Link to generated certificate PDF

//   // Verification
//   verificationCode String  @unique
//   isVerified       Boolean @default(true)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([trainingCourseId, userId])
//   @@index([userId])
//   @@index([verificationCode])
// }

// model Survey {
//   id          String @id @default(cuid())
//   title       Json // Multi-language survey titles
//   description Json?

//   // Survey Configuration
//   type        String  @default("feedback") // feedback, satisfaction, evaluation, research
//   isActive    Boolean @default(true)
//   isAnonymous Boolean @default(false)

//   // Targeting
//   targetAudience String[] // User roles who can take this survey
//   programId      String? // If survey is program-specific

//   // Scheduling
//   startDate DateTime?
//   endDate   DateTime?

//   // Questions
//   questions SurveyQuestion[]
//   responses SurveyResponse[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([isActive, type])
//   @@index([programId])
// }

// model SurveyQuestion {
//   id       String @id @default(cuid())
//   surveyId String
//   survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

//   question   Json // Multi-language question text
//   type       String // text, textarea, radio, checkbox, rating, scale
//   options    Json? // For multiple choice questions
//   isRequired Boolean @default(false)
//   order      Int     @default(0)

//   // Conditional Logic
//   showIf Json? // Conditions for showing this question

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([surveyId, order])
// }

// model SurveyResponse {
//   id       String @id @default(cuid())
//   surveyId String
//   survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

//   userId String?
//   user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

//   // Response Data
//   answers     Json // All question answers
//   isComplete  Boolean   @default(false)
//   completedAt DateTime?

//   // Metadata
//   ipAddress String?
//   userAgent String?
//   timeSpent Int? // Time spent in seconds

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([surveyId])
//   @@index([userId])
// }

// // -----------------------------
// // MODELS
// // -----------------------------
// model HeroCtaButton {
//   id     String    @id @default(cuid())
//   heroId String
//   hero   BlockHero @relation(fields: [heroId], references: [id], onDelete: Cascade)

//   order        Int
//   text         Json
//   href         String
//   style        CtaStyle @default(PRIMARY)
//   size         CtaSize  @default(MEDIUM)
//   openInNewTab Boolean  @default(false)

//   @@index([heroId, order])
// }

// model BlockFaq {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json
//   description Json?

//   allowMultipleOpen Boolean @default(false)
//   defaultOpenFirst  Boolean @default(true)

//   items          FaqItem[]
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model FaqItem {
//   id      String   @id @default(cuid())
//   blockId String
//   block   BlockFaq @relation(fields: [blockId], references: [id], onDelete: Cascade)

//   order    Int
//   question Json
//   answer   Json

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([blockId, order])
// }

// model BlockCta {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json
//   description Json?

//   primaryButtonText  Json
//   primaryButtonHref  String
//   primaryButtonStyle CtaStyle @default(PRIMARY)

//   secondaryButtonText  Json?
//   secondaryButtonHref  String?
//   secondaryButtonStyle CtaStyle @default(SECONDARY)

//   textAlign   TextAlign   @default(CENTER)
//   colorScheme ColorScheme @default(PRIMARY)

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockTestimonials {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json
//   description Json?

//   layout        String  @default("carousel")
//   itemsPerRow   Int     @default(3)
//   autoplay      Boolean @default(true)
//   autoplaySpeed Int     @default(5000)

//   testimonials   TestimonialItem[]
//   contentBlockId String            @unique
//   contentBlock   ContentBlock      @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model TestimonialItem {
//   id                  String            @id @default(cuid())
//   blockTestimonialsId String
//   block               BlockTestimonials @relation(fields: [blockTestimonialsId], references: [id], onDelete: Cascade)

//   order Int

//   quote          Json
//   authorName     String
//   authorRole     Json
//   authorImageUrl String?

//   successStoryId String?
//   successStory   SuccessStory? @relation(fields: [successStoryId], references: [id])

//   @@index([blockTestimonialsId, order])
// }

// model BlockStats {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   layout      String @default("row")
//   itemsPerRow Int    @default(4)

//   stats          StatItem[]
//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model StatItem {
//   id           String     @id @default(cuid())
//   blockStatsId String
//   block        BlockStats @relation(fields: [blockStatsId], references: [id], onDelete: Cascade)

//   order Int

//   value       String
//   label       Json
//   description Json?

//   iconName String?
//   color    String?

//   @@index([blockStatsId, order])
// }

// model BlockGallery {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json?
//   description Json?

//   layout      GalleryLayout @default(GRID)
//   columns     Int           @default(3)
//   spacing     String        @default("1rem")
//   aspectRatio String?       @default("16/9")

//   images         GalleryImage[]
//   contentBlockId String         @unique
//   contentBlock   ContentBlock   @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model GalleryImage {
//   id             String       @id @default(cuid())
//   blockGalleryId String
//   block          BlockGallery @relation(fields: [blockGalleryId], references: [id], onDelete: Cascade)

//   order Int

//   imageUrl    String
//   imageWidth  Int?
//   imageHeight Int?
//   altText     Json
//   caption     Json?

//   @@index([blockGalleryId, order])
// }

// model BlockProgramCards {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   layout          String  @default("grid")
//   itemsPerRow     Int     @default(3)
//   showAllPrograms Boolean @default(true)

//   selectedPrograms ProgramCardItem[]

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model ProgramCardItem {
//   id                  String            @id @default(cuid())
//   blockProgramCardsId String
//   block               BlockProgramCards @relation(fields: [blockProgramCardsId], references: [id], onDelete: Cascade)

//   order     Int
//   programId String
//   program   Program @relation(fields: [programId], references: [id])

//   @@index([blockProgramCardsId, order])
// }

// model BlockSuccessStories {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   layout        String  @default("carousel")
//   maxItems      Int     @default(6)
//   autoplay      Boolean @default(true)
//   programFilter String?

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockDonationForm {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json
//   description Json?

//   showAmountButtons Boolean @default(true)
//   defaultAmounts    Json    @default("[25, 50, 100, 250]")
//   allowCustomAmount Boolean @default(true)
//   showRecurring     Boolean @default(true)

//   colorScheme ColorScheme @default(PRIMARY)

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockVolunteerSignup {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json
//   description Json?

//   showSkillsInput   Boolean @default(true)
//   showAvailability  Boolean @default(true)
//   requireBackground Boolean @default(false)

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockNewsletterSignup {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json
//   description Json?
//   buttonText  Json

//   showNameField Boolean @default(false)
//   placeholder   Json

//   layout      String      @default("horizontal")
//   colorScheme ColorScheme @default(DEFAULT)

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model BlockPartnerLogos {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json?
//   description Json?

//   layout      String  @default("grid")
//   itemsPerRow Int     @default(5)
//   grayscale   Boolean @default(false)

//   partners       PartnerLogoItem[]
//   contentBlockId String            @unique
//   contentBlock   ContentBlock      @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PartnerLogoItem {
//   id                  String            @id @default(cuid())
//   blockPartnerLogosId String
//   block               BlockPartnerLogos @relation(fields: [blockPartnerLogosId], references: [id], onDelete: Cascade)

//   order Int

//   name    String
//   logoUrl String
//   website String?

//   @@index([blockPartnerLogosId, order])
// }

// model BlockTeamGrid {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   itemsPerRow Int @default(3)

//   members        TeamMemberItem[]
//   contentBlockId String           @unique
//   contentBlock   ContentBlock     @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model TeamMemberItem {
//   id              String        @id @default(cuid())
//   blockTeamGridId String
//   block           BlockTeamGrid @relation(fields: [blockTeamGridId], references: [id], onDelete: Cascade)

//   order Int

//   name        String
//   role        Json
//   bio         Json?
//   imageUrl    String?
//   linkedinUrl String?
//   twitterUrl  String?
//   emailUrl    String?

//   @@index([blockTeamGridId, order])
// }

// model BlockTimeline {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   layout String @default("vertical")

//   events         TimelineEvent[]
//   contentBlockId String          @unique
//   contentBlock   ContentBlock    @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model TimelineEvent {
//   id              String        @id @default(cuid())
//   blockTimelineId String
//   block           BlockTimeline @relation(fields: [blockTimelineId], references: [id], onDelete: Cascade)

//   order Int

//   date        String
//   title       Json
//   description Json?
//   imageUrl    String?

//   @@index([blockTimelineId, order])
// }

// model BlockContactForm {
//   id           String @id @default(cuid())
//   internalName String

//   title       Json
//   description Json?

//   showNameField         Boolean @default(true)
//   showPhoneField        Boolean @default(false)
//   showSubjectField      Boolean @default(true)
//   showOrganizationField Boolean @default(false)

//   customFields ContactFormField[]

//   recipientEmail String
//   successMessage Json

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model ContactFormField {
//   id                 String           @id @default(cuid())
//   blockContactFormId String
//   block              BlockContactForm @relation(fields: [blockContactFormId], references: [id], onDelete: Cascade)

//   order Int

//   fieldType   String
//   label       Json
//   placeholder Json?
//   required    Boolean @default(false)

//   options Json?

//   @@index([blockContactFormId, order])
// }

// model BlockVideoEmbed {
//   id           String @id @default(cuid())
//   internalName String

//   badge       Json?
//   title       Json?
//   description Json?

//   videoUrl     String
//   thumbnailUrl String?
//   aspectRatio  String  @default("16/9")
//   autoplay     Boolean @default(false)
//   showControls Boolean @default(true)

//   contentBlockId String       @unique
//   contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PageTemplate {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   description String?
//   thumbnail   String?
//   category    String?

//   templateBlocks Json

//   isActive  Boolean  @default(true)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model FormSubmission {
//   id       String @id @default(cuid())
//   formType String
//   pageSlug String

//   data      Json
//   ipAddress String?
//   userAgent String?

//   status     String  @default("new")
//   assignedTo String?
//   notes      String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([formType, status])
//   @@index([pageSlug, createdAt])
// }

// model UserOnboarding {
//   id     String @id @default(cuid())
//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   isCompleted Boolean   @default(false)
//   completedAt DateTime?
//   steps       Json

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model UserConsent {
//   id          String   @id @default(cuid())
//   userId      String   @unique
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   preferences Json
//   ipAddress   String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model PageContent {
//   id        String   @id @default(cuid())
//   pageSlug  String   @unique
//   content   Json
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model ContentMedia {
//   id String @id @default(cuid())

//   altText Json?
//   caption Json?

//   newsArticleId String?
//   programId     String?
//   storyId       String?

//   mediaAssetId String
//   mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)

//   newsArticle NewsArticle? @relation(fields: [newsArticleId], references: [id], onDelete: Cascade)
//   program     Program?     @relation(fields: [programId], references: [id], onDelete: Cascade)

//   order Int @default(0)

//   @@index([newsArticleId])
//   @@index([programId])
//   @@index([storyId])
// }

// model ActivityLog {
//   id          String       @id @default(cuid())
//   type        ActivityType
//   title       String
//   description String?
//   linkHref    String?
//   actorId     String?
//   actor       User?        @relation(fields: [actorId], references: [id], onDelete: SetNull)
//   createdAt   DateTime     @default(now())

//   entityType String? // e.g., "program", "donation", "user"
//   entityId   String?
//   metadata   Json?
//   ipAddress  String?
//   userAgent  String?
// }

// model FinancialBudget {
//   id           String   @id @default(cuid())
//   year         Int
//   quarter      Int
//   targetAmount Decimal
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   actualAmount Decimal   @default(0)
//   category     String? // e.g., "programs", "operations", "fundraising"
//   description  String?
//   isApproved   Boolean   @default(false)
//   approvedBy   String?
//   approvedAt   DateTime?

//   @@unique([year, quarter])
// }

// model PartnershipRenewal {
//   id            String      @id @default(cuid())
//   partnershipId String
//   partnership   Partnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

//   previousEndDate DateTime
//   newEndDate      DateTime
//   renewalValue    Decimal?
//   renewalTerms    Json?

//   negotiatedBy String?
//   approvedBy   String?
//   approvedAt   DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([partnershipId])
// }

// model Address {
//   id          String        @id @default(cuid())
//   street1     String
//   street2     String?
//   city        String
//   state       String
//   postalCode  String
//   country     String
//   // Add relations back to the models that need an address
//   // organizationId String? @unique
//   // eventId String? @unique
//   UserProfile UserProfile[]
//   Event       Event[]
//   JobPosting  JobPosting[]
// }

// // -----------------------------
// // TRAINING & CERTIFICATION SYSTEM
// // -----------------------------

// // -----------------------------
// // COMMUNICATION TEMPLATES SYSTEM
// // -----------------------------

// model CommunicationTemplate {
//   id   String @id @default(cuid())
//   slug String @unique

//   name        Json // Multi-language template names
//   type        CommunicationTemplateType
//   description Json?

//   // Template Content
//   subject  Json // For emails
//   bodyText Json // Plain text version
//   bodyHtml Json? // HTML version for emails

//   // Variables and Personalization
//   variables Json @default("[]") // Available template variables

//   // Settings
//   isActive Boolean @default(true)
//   isSystem Boolean @default(false) // System templates can't be deleted

//   // Usage Tracking
//   timesUsed Int       @default(0)
//   lastUsed  DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([type])
//   @@index([isActive])
// }

// // -----------------------------
// SLETTER & COMMUNICATION SYSTEM
// // -----------------------------

// model Newsletter {
//   id    String @id @default(cuid())
//   title Json // Multi-language titles

//   // Content
//   subject     Json
//   content     Json // Rich text content
//   previewText Json? // Email preview text

//   // Scheduling
//   status      String    @default("draft") // draft, scheduled, sent
//   scheduledAt DateTime?
//   sentAt      DateTime?

//   // Targeting
//   audienceType   String @default("all") // all, segments, custom
//   segmentRules   Json? // Audience segmentation rules
//   recipientCount Int    @default(0)

//   // Analytics
//   openRate        Decimal? @default(0)
//   clickRate       Decimal? @default(0)
//   unsubscribeRate Decimal? @default(0)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   campaigns NewsletterCampaign[]

//   @@index([status, scheduledAt])
// }

// model NewsletterCampaign {
//   id           String     @id @default(cuid())
//   newsletterId String
//   newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

//   name        String
//   description String?

//   // Campaign Settings
//   fromEmail    String
//   fromName     Json // Multi-language from names
//   replyToEmail String?

//   // Tracking
//   deliveredCount    Int @default(0)
//   openedCount       Int @default(0)
//   clickedCount      Int @default(0)
//   unsubscribedCount Int @default(0)

//   sentAt    DateTime?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   @@index([newsletterId])
// }

// model NewsletterSubscription {
//   id     String  @id @default(cuid())
//   email  String
//   userId String?

//   // Subscription Status
//   isActive       Boolean   @default(true)
//   subscribedAt   DateTime  @default(now())
//   unsubscribedAt DateTime?

//   // Preferences
//   language  String   @default("en")
//   frequency String   @default("weekly") // daily, weekly, monthly
//   topics    String[] @default([])

//   // Tracking
//   confirmationToken String?   @unique
//   isConfirmed       Boolean   @default(false)
//   confirmedAt       DateTime?

//   // Engagement
//   lastOpenedAt DateTime?
//   totalOpens   Int       @default(0)
//   totalClicks  Int       @default(0)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([email])
//   @@index([isActive, language])
//   @@index([userId])
// }

// model PushDevice {
//   id        String   @id @default(cuid())
//   userId    String
//   token     String   @unique
//   platform  Platform
//   locale    String   @default("en")
//   createdAt DateTime @default(now())
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// // ============================================================================
// // Email System Prisma Models
// // Add these to your schema.prisma file
// // ============================================================================

// enum EmailTemplateStatus {
//   DRAFT
//   PUBLISHED
//   ARCHIVED
// }

// enum EmailCampaignStatus {
//   DRAFT
//   SCHEDULED
//   SENDING
//   SENT
//   PAUSED
//   CANCELLED
// }

// enum EmailLogStatus {
//   PENDING
//   SCHEDULED
//   SENDING
//   SENT
//   DELIVERED
//   BOUNCED
//   COMPLAINED
//   FAILED
// }

// // Example language enum, expand as needed
// enum Language {
//   EN // English
//   DE // German
//   FR // French
//   ES // Spanish
// }

// model EmailTemplate {
//   id          String  @id @default(cuid())
//   name        String
//   slug        String // e.g., 'welcome-email', 'donation-receipt'
//   description String?
//   category    String? // e.g., 'transactional', 'marketing', 'notification'

//   // Default content for this template
//   subject     String
//   htmlContent String  @db.Text
//   textContent String? @db.Text
//   variables   Json    @default("[]") // Array of variable names used: [{ "name": "firstName", "description": "..." }]

//   // Metadata
//   status        EmailTemplateStatus @default(DRAFT)
//   activeVersion Int                 @default(1)

//   // Relationships
//   createdBy String
//   creator   User                   @relation("EmailTemplateCreator", fields: [createdBy], references: [id])
//   versions  EmailTemplateVersion[]
//   // Used in these campaigns (can be used in many)
//   campaigns EmailCampaign[]
//   // Direct email sends using this template
//   emails    EmailLog[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([slug])
//   @@index([category, status])
// }

// // Email Templates - Multi-language support
// model EmailCampaign {
//   id      String @id @default(cuid())
//   name    String
//   subject String

//   // Template & Content
//   templateId String
//   template   EmailTemplate @relation(fields: [templateId], references: [id])
//   variables  Json? // Global variables to merge into the template for this campaign

//   // Targeting
//   lists          EmailList[]
//   segmentFilters Json? // Additional filters for advanced segmentation

//   // Scheduling
//   status       EmailCampaignStatus @default(DRAFT)
//   scheduledFor DateTime?
//   sentAt       DateTime?

//   // Pre-send Analytics
//   recipientCount Int @default(0)

//   // Post-send Analytics
//   sentCount      Int @default(0)
//   deliveredCount Int @default(0)
//   openedCount    Int @default(0)
//   clickedCount   Int @default(0)
//   bouncedCount   Int @default(0)

//   // Relationships
//   createdBy String
//   creator   User       @relation("EmailCampaignCreator", fields: [createdBy], references: [id])
//   // All individual email logs generated by this campaign
//   emails    EmailLog[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([status, scheduledFor])
// }

// // Captures a snapshot of a template at a specific point in time.
// model EmailTemplateVersion {
//   id         String        @id @default(cuid())
//   templateId String
//   template   EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

//   version     Int // Incremental version number for the parent template
//   subject     String
//   htmlContent String  @db.Text
//   textContent String? @db.Text
//   variables   Json    @default("[]")

//   // Audit Trail
//   createdBy String
//   creator   User     @relation("EmailTemplateVersionCreator", fields: [createdBy], references: [id])
//   createdAt DateTime @default(now())

//   @@unique([templateId, version])
//   @@index([templateId])
// }

// // A collection of subscribers for sending campaigns.
// model EmailList {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   description String?

//   // Relationships
//   subscribers EmailSubscriber[]
//   campaigns   EmailCampaign[]

//   // Audit Trail
//   createdBy String?
//   creator   User?    @relation("EmailListCreator", fields: [createdBy], references: [id], onDelete: SetNull)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([name])
// }

// // Represents a single email contact and their subscription status.
// model EmailSubscriber {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   firstName String?
//   lastName  String?
//   language  Language @default(EN)

//   // Subscription Management
//   isActive          Boolean   @default(true)
//   isVerified        Boolean   @default(false)
//   verificationToken String?   @unique
//   verifiedAt        DateTime?
//   unsubscribedAt    DateTime?
//   unsubscribeReason String?

//   // Metadata for segmentation
//   source   String? // How they subscribed: 'website-footer', 'import-2024', 'api'
//   tags     String[] @default([])
//   metadata Json? // Custom fields like { "city": "Berlin", "interests": ["tech"] }

//   // Relationships
//   lists  EmailList[]
//   // A log of all emails sent to this subscriber
//   emails EmailLog[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([isActive, isVerified])
// }

// // Email Delivery Log
// model EmailLog {
//   id String @id @default(cuid())

//   // Origin: Was it from a campaign or a direct transactional send?
//   templateId String?
//   template   EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
//   campaignId String?
//   campaign   EmailCampaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

//   // Recipient Information
//   recipient    String
//   subscriberId String?
//   subscriber   EmailSubscriber? @relation(fields: [subscriberId], references: [id], onDelete: SetNull)

//   // Content Snapshot (the exact content that was sent)
//   subject     String
//   htmlContent String  @db.Text
//   textContent String? @db.Text

//   // Delivery Status & Timeline
//   status       EmailLogStatus @default(PENDING)
//   scheduledFor DateTime?
//   sentAt       DateTime?
//   deliveredAt  DateTime?

//   // Engagement Tracking
//   openedAt   DateTime?
//   openCount  Int       @default(0)
//   clickedAt  DateTime?
//   clickCount Int       @default(0)

//   // Problem Tracking
//   bouncedAt    DateTime?
//   bounceType   String? // 'hard' or 'soft'
//   bounceReason String?
//   complainedAt DateTime?

//   // Provider Information for webhook matching
//   providerMessageId String? @unique
//   provider          String? @default("resend")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([status, scheduledFor])
//   @@index([recipient])
//   @@index([campaignId, status])
//   @@index([templateId])
//   @@index([createdAt])
// }

// // Email Bounce Tracking (for detailed bounce analysis)
// model EmailBounce {
//   id             String   @id @default(cuid())
//   email          String
//   bounceType     String // 'hard', 'soft', 'transient'
//   bounceReason   String?
//   diagnosticCode String?  @db.Text
//   emailLogId     String? // Optional: link back to the specific send
//   createdAt      DateTime @default(now())

//   @@index([email, bounceType])
//   @@index([createdAt])
// }

// // Email Complaint Tracking (spam reports)
// model EmailComplaint {
//   id            String   @id @default(cuid())
//   email         String
//   complaintType String? // 'abuse', 'fraud', 'spam'
//   userAgent     String?
//   emailLogId    String? // Optional: link back to the specific send
//   createdAt     DateTime @default(now())

//   @@index([email])
//   @@index([createdAt])
// }

// model OnboardingTemplate {
//   id          String   @id @default(cuid())
//   name        String   @unique
//   description String?
//   isDefault   Boolean  @default(false)
//   isActive    Boolean  @default(true)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   roles       Role[]   @unique

//   path OnboardingPath[]

//   // Metadata
//   createdById String?
//   updatedById String?

//   @@index([isActive, isDefault])
// }

// model OnboardingPath {
//   id         String  @id @default(cuid())
//   templateId String
//   rank       Int
//   isRequired Boolean @default(true)

//   // Role-based visibility
//   roleWhitelist Role[]
//   roleBlacklist Role[]

//   template                   OnboardingTemplate        @relation(fields: [templateId], references: [id], onDelete: Cascade)
//   OnboardingStepDefinition   OnboardingStepDefinition? @relation(fields: [onboardingStepDefinitionId], references: [id])
//   onboardingStepDefinitionId String?

//   // Conditional logic
//   showIf Json? // Conditions for showing this step

//   // UI configuration
//   uiConfig Json? // Step-specific UI settings

//   stepId String
//   step   OnboardingStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

//   @@unique([templateId, stepId])
//   @@index([templateId, rank])
// }

// model OnboardingStep {
//   id        String  @id @default(cuid())
//   name      String  @unique
//   titleKey  String
//   descKey   String
//   component String
//   isActive  Boolean @default(true)

//   // Step configuration
//   validationSchema Json? // Zod schema as JSON
//   defaultData      Json? // Default field values

//   // Metadata
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   paths OnboardingPath[]
// }

// model OnboardingConfig {
//   id        String @id @default(cuid())
//   singleton String @unique @default("main")

//   // Feature flags
//   enabled                       Boolean @default(true)
//   allowSkip                     Boolean @default(false)
//   requireCompletionBeforeAccess Boolean @default(true)

//   // Invitation settings
//   invitationExpiryDays       Int     @default(7)
//   requireInvitationForAdmins Boolean @default(true)

//   // Template settings
//   autoAssignTemplateByRole Boolean @default(true)

//   // Notification settings
//   sendWelcomeEmail     Boolean @default(true)
//   sendReminderEmails   Boolean @default(true)
//   reminderIntervalDays Int     @default(3)

//   updatedAt DateTime @updatedAt
//   updatedBy String?
// }

// model UserInvitation {
//   id    String @id @default(cuid())
//   email String
//   token String @unique
//   roles Role[]

//   invitedById String
//   invitedBy   User   @relation("InvitedUsers", fields: [invitedById], references: [id])

//   status     InvitationStatus @default(PENDING)
//   expiresAt  DateTime
//   acceptedAt DateTime?

//   // Invitation context
//   organizationId String?
//   message        String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([email, status])
//   @@index([token])
//   @@index([expiresAt])
// }

// model OnboardingStepDefinition {
//   id            String @id @default(cuid())
//   componentName String @unique
//   name          Json
//   description   Json

//   templatePaths OnboardingPath[]
// }

// model FailedLoginAttempt {
//   id        String   @id @default(cuid())
//   email     String
//   createdAt DateTime @default(now())

//   userId String?
//   user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   ipAddress String?
//   userAgent String?

//   @@index([email])
//   @@index([createdAt])
//   @@index([userId])
// }
