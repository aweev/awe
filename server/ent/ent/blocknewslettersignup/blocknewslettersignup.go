// Code generated by ent, DO NOT EDIT.

package blocknewslettersignup

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blocknewslettersignup type in the database.
	Label = "block_newsletter_signup"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldButtonText holds the string denoting the button_text field in the database.
	FieldButtonText = "button_text"
	// FieldShowNameField holds the string denoting the show_name_field field in the database.
	FieldShowNameField = "show_name_field"
	// FieldPlaceholder holds the string denoting the placeholder field in the database.
	FieldPlaceholder = "placeholder"
	// FieldLayout holds the string denoting the layout field in the database.
	FieldLayout = "layout"
	// FieldColorScheme holds the string denoting the color_scheme field in the database.
	FieldColorScheme = "color_scheme"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// Table holds the table name of the blocknewslettersignup in the database.
	Table = "block_newsletter_signups"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_newsletter_signups"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_newsletter_signup"
)

// Columns holds all SQL columns for blocknewslettersignup fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldTitle,
	FieldDescription,
	FieldButtonText,
	FieldShowNameField,
	FieldPlaceholder,
	FieldLayout,
	FieldColorScheme,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_newsletter_signups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_newsletter_signup",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultShowNameField holds the default value on creation for the "show_name_field" field.
	DefaultShowNameField bool
	// DefaultLayout holds the default value on creation for the "layout" field.
	DefaultLayout string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// ColorScheme defines the type for the "color_scheme" enum field.
type ColorScheme string

// ColorSchemeDEFAULT is the default value of the ColorScheme enum.
const DefaultColorScheme = ColorSchemeDEFAULT

// ColorScheme values.
const (
	ColorSchemeDEFAULT   ColorScheme = "DEFAULT"
	ColorSchemePRIMARY   ColorScheme = "PRIMARY"
	ColorSchemeSECONDARY ColorScheme = "SECONDARY"
	ColorSchemeACCENT    ColorScheme = "ACCENT"
	ColorSchemeLIGHT     ColorScheme = "LIGHT"
	ColorSchemeDARK      ColorScheme = "DARK"
)

func (cs ColorScheme) String() string {
	return string(cs)
}

// ColorSchemeValidator is a validator for the "color_scheme" field enum values. It is called by the builders before save.
func ColorSchemeValidator(cs ColorScheme) error {
	switch cs {
	case ColorSchemeDEFAULT, ColorSchemePRIMARY, ColorSchemeSECONDARY, ColorSchemeACCENT, ColorSchemeLIGHT, ColorSchemeDARK:
		return nil
	default:
		return fmt.Errorf("blocknewslettersignup: invalid enum value for color_scheme field: %q", cs)
	}
}

// OrderOption defines the ordering options for the BlockNewsletterSignup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByShowNameField orders the results by the show_name_field field.
func ByShowNameField(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowNameField, opts...).ToFunc()
}

// ByLayout orders the results by the layout field.
func ByLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayout, opts...).ToFunc()
}

// ByColorScheme orders the results by the color_scheme field.
func ByColorScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorScheme, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
