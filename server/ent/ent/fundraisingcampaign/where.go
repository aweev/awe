// Code generated by ent, DO NOT EDIT.

package fundraisingcampaign

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldSlug, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldType, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCategory, v))
}

// TargetAmount applies equality check predicate on the "target_amount" field. It's identical to TargetAmountEQ.
func TargetAmount(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldTargetAmount, v))
}

// CurrentAmount applies equality check predicate on the "current_amount" field. It's identical to CurrentAmountEQ.
func CurrentAmount(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCurrentAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCurrency, v))
}

// MinimumDonation applies equality check predicate on the "minimum_donation" field. It's identical to MinimumDonationEQ.
func MinimumDonation(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldMinimumDonation, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldEndDate, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldIsActive, v))
}

// HeroImageURL applies equality check predicate on the "hero_image_url" field. It's identical to HeroImageURLEQ.
func HeroImageURL(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldHeroImageURL, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldVideoURL, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldManagerID, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldIsPublic, v))
}

// AllowRecurring applies equality check predicate on the "allow_recurring" field. It's identical to AllowRecurringEQ.
func AllowRecurring(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldAllowRecurring, v))
}

// DonorCount applies equality check predicate on the "donor_count" field. It's identical to DonorCountEQ.
func DonorCount(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldDonorCount, v))
}

// ShareCount applies equality check predicate on the "share_count" field. It's identical to ShareCountEQ.
func ShareCount(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldShareCount, v))
}

// ViewCount applies equality check predicate on the "view_count" field. It's identical to ViewCountEQ.
func ViewCount(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldViewCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldUpdatedAt, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldSlug, v))
}

// StoryIsNil applies the IsNil predicate on the "story" field.
func StoryIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldStory))
}

// StoryNotNil applies the NotNil predicate on the "story" field.
func StoryNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldStory))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldType, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldCategory, v))
}

// TargetAmountEQ applies the EQ predicate on the "target_amount" field.
func TargetAmountEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldTargetAmount, v))
}

// TargetAmountNEQ applies the NEQ predicate on the "target_amount" field.
func TargetAmountNEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldTargetAmount, v))
}

// TargetAmountIn applies the In predicate on the "target_amount" field.
func TargetAmountIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldTargetAmount, vs...))
}

// TargetAmountNotIn applies the NotIn predicate on the "target_amount" field.
func TargetAmountNotIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldTargetAmount, vs...))
}

// TargetAmountGT applies the GT predicate on the "target_amount" field.
func TargetAmountGT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldTargetAmount, v))
}

// TargetAmountGTE applies the GTE predicate on the "target_amount" field.
func TargetAmountGTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldTargetAmount, v))
}

// TargetAmountLT applies the LT predicate on the "target_amount" field.
func TargetAmountLT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldTargetAmount, v))
}

// TargetAmountLTE applies the LTE predicate on the "target_amount" field.
func TargetAmountLTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldTargetAmount, v))
}

// CurrentAmountEQ applies the EQ predicate on the "current_amount" field.
func CurrentAmountEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCurrentAmount, v))
}

// CurrentAmountNEQ applies the NEQ predicate on the "current_amount" field.
func CurrentAmountNEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldCurrentAmount, v))
}

// CurrentAmountIn applies the In predicate on the "current_amount" field.
func CurrentAmountIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldCurrentAmount, vs...))
}

// CurrentAmountNotIn applies the NotIn predicate on the "current_amount" field.
func CurrentAmountNotIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldCurrentAmount, vs...))
}

// CurrentAmountGT applies the GT predicate on the "current_amount" field.
func CurrentAmountGT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldCurrentAmount, v))
}

// CurrentAmountGTE applies the GTE predicate on the "current_amount" field.
func CurrentAmountGTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldCurrentAmount, v))
}

// CurrentAmountLT applies the LT predicate on the "current_amount" field.
func CurrentAmountLT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldCurrentAmount, v))
}

// CurrentAmountLTE applies the LTE predicate on the "current_amount" field.
func CurrentAmountLTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldCurrentAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldCurrency, v))
}

// MinimumDonationEQ applies the EQ predicate on the "minimum_donation" field.
func MinimumDonationEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldMinimumDonation, v))
}

// MinimumDonationNEQ applies the NEQ predicate on the "minimum_donation" field.
func MinimumDonationNEQ(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldMinimumDonation, v))
}

// MinimumDonationIn applies the In predicate on the "minimum_donation" field.
func MinimumDonationIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldMinimumDonation, vs...))
}

// MinimumDonationNotIn applies the NotIn predicate on the "minimum_donation" field.
func MinimumDonationNotIn(vs ...float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldMinimumDonation, vs...))
}

// MinimumDonationGT applies the GT predicate on the "minimum_donation" field.
func MinimumDonationGT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldMinimumDonation, v))
}

// MinimumDonationGTE applies the GTE predicate on the "minimum_donation" field.
func MinimumDonationGTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldMinimumDonation, v))
}

// MinimumDonationLT applies the LT predicate on the "minimum_donation" field.
func MinimumDonationLT(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldMinimumDonation, v))
}

// MinimumDonationLTE applies the LTE predicate on the "minimum_donation" field.
func MinimumDonationLTE(v float64) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldMinimumDonation, v))
}

// MinimumDonationIsNil applies the IsNil predicate on the "minimum_donation" field.
func MinimumDonationIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldMinimumDonation))
}

// MinimumDonationNotNil applies the NotNil predicate on the "minimum_donation" field.
func MinimumDonationNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldMinimumDonation))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldEndDate))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldIsActive, v))
}

// HeroImageURLEQ applies the EQ predicate on the "hero_image_url" field.
func HeroImageURLEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldHeroImageURL, v))
}

// HeroImageURLNEQ applies the NEQ predicate on the "hero_image_url" field.
func HeroImageURLNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldHeroImageURL, v))
}

// HeroImageURLIn applies the In predicate on the "hero_image_url" field.
func HeroImageURLIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldHeroImageURL, vs...))
}

// HeroImageURLNotIn applies the NotIn predicate on the "hero_image_url" field.
func HeroImageURLNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldHeroImageURL, vs...))
}

// HeroImageURLGT applies the GT predicate on the "hero_image_url" field.
func HeroImageURLGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldHeroImageURL, v))
}

// HeroImageURLGTE applies the GTE predicate on the "hero_image_url" field.
func HeroImageURLGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldHeroImageURL, v))
}

// HeroImageURLLT applies the LT predicate on the "hero_image_url" field.
func HeroImageURLLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldHeroImageURL, v))
}

// HeroImageURLLTE applies the LTE predicate on the "hero_image_url" field.
func HeroImageURLLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldHeroImageURL, v))
}

// HeroImageURLContains applies the Contains predicate on the "hero_image_url" field.
func HeroImageURLContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldHeroImageURL, v))
}

// HeroImageURLHasPrefix applies the HasPrefix predicate on the "hero_image_url" field.
func HeroImageURLHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldHeroImageURL, v))
}

// HeroImageURLHasSuffix applies the HasSuffix predicate on the "hero_image_url" field.
func HeroImageURLHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldHeroImageURL, v))
}

// HeroImageURLIsNil applies the IsNil predicate on the "hero_image_url" field.
func HeroImageURLIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldHeroImageURL))
}

// HeroImageURLNotNil applies the NotNil predicate on the "hero_image_url" field.
func HeroImageURLNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldHeroImageURL))
}

// HeroImageURLEqualFold applies the EqualFold predicate on the "hero_image_url" field.
func HeroImageURLEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldHeroImageURL, v))
}

// HeroImageURLContainsFold applies the ContainsFold predicate on the "hero_image_url" field.
func HeroImageURLContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldHeroImageURL, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLIsNil applies the IsNil predicate on the "video_url" field.
func VideoURLIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldVideoURL))
}

// VideoURLNotNil applies the NotNil predicate on the "video_url" field.
func VideoURLNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldVideoURL))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldVideoURL, v))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDGT applies the GT predicate on the "manager_id" field.
func ManagerIDGT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldManagerID, v))
}

// ManagerIDGTE applies the GTE predicate on the "manager_id" field.
func ManagerIDGTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldManagerID, v))
}

// ManagerIDLT applies the LT predicate on the "manager_id" field.
func ManagerIDLT(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldManagerID, v))
}

// ManagerIDLTE applies the LTE predicate on the "manager_id" field.
func ManagerIDLTE(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldManagerID, v))
}

// ManagerIDContains applies the Contains predicate on the "manager_id" field.
func ManagerIDContains(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContains(FieldManagerID, v))
}

// ManagerIDHasPrefix applies the HasPrefix predicate on the "manager_id" field.
func ManagerIDHasPrefix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasPrefix(FieldManagerID, v))
}

// ManagerIDHasSuffix applies the HasSuffix predicate on the "manager_id" field.
func ManagerIDHasSuffix(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldHasSuffix(FieldManagerID, v))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotNull(FieldManagerID))
}

// ManagerIDEqualFold applies the EqualFold predicate on the "manager_id" field.
func ManagerIDEqualFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEqualFold(FieldManagerID, v))
}

// ManagerIDContainsFold applies the ContainsFold predicate on the "manager_id" field.
func ManagerIDContainsFold(v string) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldContainsFold(FieldManagerID, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldIsPublic, v))
}

// AllowRecurringEQ applies the EQ predicate on the "allow_recurring" field.
func AllowRecurringEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldAllowRecurring, v))
}

// AllowRecurringNEQ applies the NEQ predicate on the "allow_recurring" field.
func AllowRecurringNEQ(v bool) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldAllowRecurring, v))
}

// DonorCountEQ applies the EQ predicate on the "donor_count" field.
func DonorCountEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldDonorCount, v))
}

// DonorCountNEQ applies the NEQ predicate on the "donor_count" field.
func DonorCountNEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldDonorCount, v))
}

// DonorCountIn applies the In predicate on the "donor_count" field.
func DonorCountIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldDonorCount, vs...))
}

// DonorCountNotIn applies the NotIn predicate on the "donor_count" field.
func DonorCountNotIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldDonorCount, vs...))
}

// DonorCountGT applies the GT predicate on the "donor_count" field.
func DonorCountGT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldDonorCount, v))
}

// DonorCountGTE applies the GTE predicate on the "donor_count" field.
func DonorCountGTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldDonorCount, v))
}

// DonorCountLT applies the LT predicate on the "donor_count" field.
func DonorCountLT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldDonorCount, v))
}

// DonorCountLTE applies the LTE predicate on the "donor_count" field.
func DonorCountLTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldDonorCount, v))
}

// ShareCountEQ applies the EQ predicate on the "share_count" field.
func ShareCountEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldShareCount, v))
}

// ShareCountNEQ applies the NEQ predicate on the "share_count" field.
func ShareCountNEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldShareCount, v))
}

// ShareCountIn applies the In predicate on the "share_count" field.
func ShareCountIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldShareCount, vs...))
}

// ShareCountNotIn applies the NotIn predicate on the "share_count" field.
func ShareCountNotIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldShareCount, vs...))
}

// ShareCountGT applies the GT predicate on the "share_count" field.
func ShareCountGT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldShareCount, v))
}

// ShareCountGTE applies the GTE predicate on the "share_count" field.
func ShareCountGTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldShareCount, v))
}

// ShareCountLT applies the LT predicate on the "share_count" field.
func ShareCountLT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldShareCount, v))
}

// ShareCountLTE applies the LTE predicate on the "share_count" field.
func ShareCountLTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldShareCount, v))
}

// ViewCountEQ applies the EQ predicate on the "view_count" field.
func ViewCountEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldViewCount, v))
}

// ViewCountNEQ applies the NEQ predicate on the "view_count" field.
func ViewCountNEQ(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldViewCount, v))
}

// ViewCountIn applies the In predicate on the "view_count" field.
func ViewCountIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldViewCount, vs...))
}

// ViewCountNotIn applies the NotIn predicate on the "view_count" field.
func ViewCountNotIn(vs ...int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldViewCount, vs...))
}

// ViewCountGT applies the GT predicate on the "view_count" field.
func ViewCountGT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldViewCount, v))
}

// ViewCountGTE applies the GTE predicate on the "view_count" field.
func ViewCountGTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldViewCount, v))
}

// ViewCountLT applies the LT predicate on the "view_count" field.
func ViewCountLT(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldViewCount, v))
}

// ViewCountLTE applies the LTE predicate on the "view_count" field.
func ViewCountLTE(v int) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldViewCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildCampaigns applies the HasEdge predicate on the "child_campaigns" edge.
func HasChildCampaigns() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildCampaignsTable, ChildCampaignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildCampaignsWith applies the HasEdge predicate on the "child_campaigns" edge with a given conditions (other predicates).
func HasChildCampaignsWith(preds ...predicate.FundraisingCampaign) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := newChildCampaignsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentCampaign applies the HasEdge predicate on the "parent_campaign" edge.
func HasParentCampaign() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentCampaignTable, ParentCampaignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentCampaignWith applies the HasEdge predicate on the "parent_campaign" edge with a given conditions (other predicates).
func HasParentCampaignWith(preds ...predicate.FundraisingCampaign) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := newParentCampaignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDonations applies the HasEdge predicate on the "donations" edge.
func HasDonations() predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonationsWith applies the HasEdge predicate on the "donations" edge with a given conditions (other predicates).
func HasDonationsWith(preds ...predicate.Donation) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(func(s *sql.Selector) {
		step := newDonationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FundraisingCampaign) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FundraisingCampaign) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FundraisingCampaign) predicate.FundraisingCampaign {
	return predicate.FundraisingCampaign(sql.NotPredicates(p))
}
