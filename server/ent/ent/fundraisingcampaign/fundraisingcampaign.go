// Code generated by ent, DO NOT EDIT.

package fundraisingcampaign

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fundraisingcampaign type in the database.
	Label = "fundraising_campaign"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStory holds the string denoting the story field in the database.
	FieldStory = "story"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldTargetAmount holds the string denoting the target_amount field in the database.
	FieldTargetAmount = "target_amount"
	// FieldCurrentAmount holds the string denoting the current_amount field in the database.
	FieldCurrentAmount = "current_amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldMinimumDonation holds the string denoting the minimum_donation field in the database.
	FieldMinimumDonation = "minimum_donation"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldHeroImageURL holds the string denoting the hero_image_url field in the database.
	FieldHeroImageURL = "hero_image_url"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldGalleryImages holds the string denoting the gallery_images field in the database.
	FieldGalleryImages = "gallery_images"
	// FieldManagerID holds the string denoting the manager_id field in the database.
	FieldManagerID = "manager_id"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldAllowRecurring holds the string denoting the allow_recurring field in the database.
	FieldAllowRecurring = "allow_recurring"
	// FieldDonorCount holds the string denoting the donor_count field in the database.
	FieldDonorCount = "donor_count"
	// FieldShareCount holds the string denoting the share_count field in the database.
	FieldShareCount = "share_count"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeChildCampaigns holds the string denoting the child_campaigns edge name in mutations.
	EdgeChildCampaigns = "child_campaigns"
	// EdgeParentCampaign holds the string denoting the parent_campaign edge name in mutations.
	EdgeParentCampaign = "parent_campaign"
	// EdgeDonations holds the string denoting the donations edge name in mutations.
	EdgeDonations = "donations"
	// Table holds the table name of the fundraisingcampaign in the database.
	Table = "fundraising_campaigns"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "fundraising_campaigns"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_fundraising_campaigns"
	// ChildCampaignsTable is the table that holds the child_campaigns relation/edge.
	ChildCampaignsTable = "fundraising_campaigns"
	// ChildCampaignsColumn is the table column denoting the child_campaigns relation/edge.
	ChildCampaignsColumn = "fundraising_campaign_parent_campaign"
	// ParentCampaignTable is the table that holds the parent_campaign relation/edge.
	ParentCampaignTable = "fundraising_campaigns"
	// ParentCampaignColumn is the table column denoting the parent_campaign relation/edge.
	ParentCampaignColumn = "fundraising_campaign_parent_campaign"
	// DonationsTable is the table that holds the donations relation/edge.
	DonationsTable = "donations"
	// DonationsInverseTable is the table name for the Donation entity.
	// It exists in this package in order to avoid circular dependency with the "donation" package.
	DonationsInverseTable = "donations"
	// DonationsColumn is the table column denoting the donations relation/edge.
	DonationsColumn = "fundraising_campaign_donations"
)

// Columns holds all SQL columns for fundraisingcampaign fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldTitle,
	FieldDescription,
	FieldStory,
	FieldType,
	FieldCategory,
	FieldTargetAmount,
	FieldCurrentAmount,
	FieldCurrency,
	FieldMinimumDonation,
	FieldStartDate,
	FieldEndDate,
	FieldIsActive,
	FieldHeroImageURL,
	FieldVideoURL,
	FieldGalleryImages,
	FieldManagerID,
	FieldIsPublic,
	FieldAllowRecurring,
	FieldDonorCount,
	FieldShareCount,
	FieldViewCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fundraising_campaigns"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fundraising_campaign_parent_campaign",
	"program_fundraising_campaigns",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultCurrentAmount holds the default value on creation for the "current_amount" field.
	DefaultCurrentAmount float64
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultAllowRecurring holds the default value on creation for the "allow_recurring" field.
	DefaultAllowRecurring bool
	// DefaultDonorCount holds the default value on creation for the "donor_count" field.
	DefaultDonorCount int
	// DefaultShareCount holds the default value on creation for the "share_count" field.
	DefaultShareCount int
	// DefaultViewCount holds the default value on creation for the "view_count" field.
	DefaultViewCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the FundraisingCampaign queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByTargetAmount orders the results by the target_amount field.
func ByTargetAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetAmount, opts...).ToFunc()
}

// ByCurrentAmount orders the results by the current_amount field.
func ByCurrentAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByMinimumDonation orders the results by the minimum_donation field.
func ByMinimumDonation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumDonation, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByHeroImageURL orders the results by the hero_image_url field.
func ByHeroImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeroImageURL, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByManagerID orders the results by the manager_id field.
func ByManagerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerID, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByAllowRecurring orders the results by the allow_recurring field.
func ByAllowRecurring(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowRecurring, opts...).ToFunc()
}

// ByDonorCount orders the results by the donor_count field.
func ByDonorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDonorCount, opts...).ToFunc()
}

// ByShareCount orders the results by the share_count field.
func ByShareCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareCount, opts...).ToFunc()
}

// ByViewCount orders the results by the view_count field.
func ByViewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildCampaignsCount orders the results by child_campaigns count.
func ByChildCampaignsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildCampaignsStep(), opts...)
	}
}

// ByChildCampaigns orders the results by child_campaigns terms.
func ByChildCampaigns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildCampaignsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentCampaignField orders the results by parent_campaign field.
func ByParentCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentCampaignStep(), sql.OrderByField(field, opts...))
	}
}

// ByDonationsCount orders the results by donations count.
func ByDonationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDonationsStep(), opts...)
	}
}

// ByDonations orders the results by donations terms.
func ByDonations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDonationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newChildCampaignsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ChildCampaignsTable, ChildCampaignsColumn),
	)
}
func newParentCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParentCampaignTable, ParentCampaignColumn),
	)
}
func newDonationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DonationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
	)
}
