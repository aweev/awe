// Code generated by ent, DO NOT EDIT.

package partnershiprenewal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the partnershiprenewal type in the database.
	Label = "partnership_renewal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPreviousEndDate holds the string denoting the previous_end_date field in the database.
	FieldPreviousEndDate = "previous_end_date"
	// FieldNewEndDate holds the string denoting the new_end_date field in the database.
	FieldNewEndDate = "new_end_date"
	// FieldRenewalValue holds the string denoting the renewal_value field in the database.
	FieldRenewalValue = "renewal_value"
	// FieldRenewalTerms holds the string denoting the renewal_terms field in the database.
	FieldRenewalTerms = "renewal_terms"
	// FieldNegotiatedBy holds the string denoting the negotiated_by field in the database.
	FieldNegotiatedBy = "negotiated_by"
	// FieldApprovedBy holds the string denoting the approved_by field in the database.
	FieldApprovedBy = "approved_by"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePartnership holds the string denoting the partnership edge name in mutations.
	EdgePartnership = "partnership"
	// Table holds the table name of the partnershiprenewal in the database.
	Table = "partnership_renewals"
	// PartnershipTable is the table that holds the partnership relation/edge.
	PartnershipTable = "partnership_renewals"
	// PartnershipInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipInverseTable = "partnerships"
	// PartnershipColumn is the table column denoting the partnership relation/edge.
	PartnershipColumn = "partnership_renewals"
)

// Columns holds all SQL columns for partnershiprenewal fields.
var Columns = []string{
	FieldID,
	FieldPreviousEndDate,
	FieldNewEndDate,
	FieldRenewalValue,
	FieldRenewalTerms,
	FieldNegotiatedBy,
	FieldApprovedBy,
	FieldApprovedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "partnership_renewals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partnership_renewals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PartnershipRenewal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPreviousEndDate orders the results by the previous_end_date field.
func ByPreviousEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreviousEndDate, opts...).ToFunc()
}

// ByNewEndDate orders the results by the new_end_date field.
func ByNewEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewEndDate, opts...).ToFunc()
}

// ByRenewalValue orders the results by the renewal_value field.
func ByRenewalValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewalValue, opts...).ToFunc()
}

// ByNegotiatedBy orders the results by the negotiated_by field.
func ByNegotiatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNegotiatedBy, opts...).ToFunc()
}

// ByApprovedBy orders the results by the approved_by field.
func ByApprovedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedBy, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartnershipField orders the results by partnership field.
func ByPartnershipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipStep(), sql.OrderByField(field, opts...))
	}
}
func newPartnershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
	)
}
