// Code generated by ent, DO NOT EDIT.

package partnershiprenewal

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldID, id))
}

// PreviousEndDate applies equality check predicate on the "previous_end_date" field. It's identical to PreviousEndDateEQ.
func PreviousEndDate(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldPreviousEndDate, v))
}

// NewEndDate applies equality check predicate on the "new_end_date" field. It's identical to NewEndDateEQ.
func NewEndDate(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldNewEndDate, v))
}

// RenewalValue applies equality check predicate on the "renewal_value" field. It's identical to RenewalValueEQ.
func RenewalValue(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldRenewalValue, v))
}

// NegotiatedBy applies equality check predicate on the "negotiated_by" field. It's identical to NegotiatedByEQ.
func NegotiatedBy(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldNegotiatedBy, v))
}

// ApprovedBy applies equality check predicate on the "approved_by" field. It's identical to ApprovedByEQ.
func ApprovedBy(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedAt applies equality check predicate on the "approved_at" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldApprovedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldUpdatedAt, v))
}

// PreviousEndDateEQ applies the EQ predicate on the "previous_end_date" field.
func PreviousEndDateEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldPreviousEndDate, v))
}

// PreviousEndDateNEQ applies the NEQ predicate on the "previous_end_date" field.
func PreviousEndDateNEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldPreviousEndDate, v))
}

// PreviousEndDateIn applies the In predicate on the "previous_end_date" field.
func PreviousEndDateIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldPreviousEndDate, vs...))
}

// PreviousEndDateNotIn applies the NotIn predicate on the "previous_end_date" field.
func PreviousEndDateNotIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldPreviousEndDate, vs...))
}

// PreviousEndDateGT applies the GT predicate on the "previous_end_date" field.
func PreviousEndDateGT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldPreviousEndDate, v))
}

// PreviousEndDateGTE applies the GTE predicate on the "previous_end_date" field.
func PreviousEndDateGTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldPreviousEndDate, v))
}

// PreviousEndDateLT applies the LT predicate on the "previous_end_date" field.
func PreviousEndDateLT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldPreviousEndDate, v))
}

// PreviousEndDateLTE applies the LTE predicate on the "previous_end_date" field.
func PreviousEndDateLTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldPreviousEndDate, v))
}

// NewEndDateEQ applies the EQ predicate on the "new_end_date" field.
func NewEndDateEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldNewEndDate, v))
}

// NewEndDateNEQ applies the NEQ predicate on the "new_end_date" field.
func NewEndDateNEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldNewEndDate, v))
}

// NewEndDateIn applies the In predicate on the "new_end_date" field.
func NewEndDateIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldNewEndDate, vs...))
}

// NewEndDateNotIn applies the NotIn predicate on the "new_end_date" field.
func NewEndDateNotIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldNewEndDate, vs...))
}

// NewEndDateGT applies the GT predicate on the "new_end_date" field.
func NewEndDateGT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldNewEndDate, v))
}

// NewEndDateGTE applies the GTE predicate on the "new_end_date" field.
func NewEndDateGTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldNewEndDate, v))
}

// NewEndDateLT applies the LT predicate on the "new_end_date" field.
func NewEndDateLT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldNewEndDate, v))
}

// NewEndDateLTE applies the LTE predicate on the "new_end_date" field.
func NewEndDateLTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldNewEndDate, v))
}

// RenewalValueEQ applies the EQ predicate on the "renewal_value" field.
func RenewalValueEQ(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldRenewalValue, v))
}

// RenewalValueNEQ applies the NEQ predicate on the "renewal_value" field.
func RenewalValueNEQ(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldRenewalValue, v))
}

// RenewalValueIn applies the In predicate on the "renewal_value" field.
func RenewalValueIn(vs ...float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldRenewalValue, vs...))
}

// RenewalValueNotIn applies the NotIn predicate on the "renewal_value" field.
func RenewalValueNotIn(vs ...float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldRenewalValue, vs...))
}

// RenewalValueGT applies the GT predicate on the "renewal_value" field.
func RenewalValueGT(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldRenewalValue, v))
}

// RenewalValueGTE applies the GTE predicate on the "renewal_value" field.
func RenewalValueGTE(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldRenewalValue, v))
}

// RenewalValueLT applies the LT predicate on the "renewal_value" field.
func RenewalValueLT(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldRenewalValue, v))
}

// RenewalValueLTE applies the LTE predicate on the "renewal_value" field.
func RenewalValueLTE(v float64) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldRenewalValue, v))
}

// RenewalValueIsNil applies the IsNil predicate on the "renewal_value" field.
func RenewalValueIsNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIsNull(FieldRenewalValue))
}

// RenewalValueNotNil applies the NotNil predicate on the "renewal_value" field.
func RenewalValueNotNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotNull(FieldRenewalValue))
}

// RenewalTermsIsNil applies the IsNil predicate on the "renewal_terms" field.
func RenewalTermsIsNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIsNull(FieldRenewalTerms))
}

// RenewalTermsNotNil applies the NotNil predicate on the "renewal_terms" field.
func RenewalTermsNotNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotNull(FieldRenewalTerms))
}

// NegotiatedByEQ applies the EQ predicate on the "negotiated_by" field.
func NegotiatedByEQ(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldNegotiatedBy, v))
}

// NegotiatedByNEQ applies the NEQ predicate on the "negotiated_by" field.
func NegotiatedByNEQ(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldNegotiatedBy, v))
}

// NegotiatedByIn applies the In predicate on the "negotiated_by" field.
func NegotiatedByIn(vs ...string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldNegotiatedBy, vs...))
}

// NegotiatedByNotIn applies the NotIn predicate on the "negotiated_by" field.
func NegotiatedByNotIn(vs ...string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldNegotiatedBy, vs...))
}

// NegotiatedByGT applies the GT predicate on the "negotiated_by" field.
func NegotiatedByGT(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldNegotiatedBy, v))
}

// NegotiatedByGTE applies the GTE predicate on the "negotiated_by" field.
func NegotiatedByGTE(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldNegotiatedBy, v))
}

// NegotiatedByLT applies the LT predicate on the "negotiated_by" field.
func NegotiatedByLT(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldNegotiatedBy, v))
}

// NegotiatedByLTE applies the LTE predicate on the "negotiated_by" field.
func NegotiatedByLTE(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldNegotiatedBy, v))
}

// NegotiatedByContains applies the Contains predicate on the "negotiated_by" field.
func NegotiatedByContains(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldContains(FieldNegotiatedBy, v))
}

// NegotiatedByHasPrefix applies the HasPrefix predicate on the "negotiated_by" field.
func NegotiatedByHasPrefix(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldHasPrefix(FieldNegotiatedBy, v))
}

// NegotiatedByHasSuffix applies the HasSuffix predicate on the "negotiated_by" field.
func NegotiatedByHasSuffix(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldHasSuffix(FieldNegotiatedBy, v))
}

// NegotiatedByIsNil applies the IsNil predicate on the "negotiated_by" field.
func NegotiatedByIsNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIsNull(FieldNegotiatedBy))
}

// NegotiatedByNotNil applies the NotNil predicate on the "negotiated_by" field.
func NegotiatedByNotNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotNull(FieldNegotiatedBy))
}

// NegotiatedByEqualFold applies the EqualFold predicate on the "negotiated_by" field.
func NegotiatedByEqualFold(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEqualFold(FieldNegotiatedBy, v))
}

// NegotiatedByContainsFold applies the ContainsFold predicate on the "negotiated_by" field.
func NegotiatedByContainsFold(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldContainsFold(FieldNegotiatedBy, v))
}

// ApprovedByEQ applies the EQ predicate on the "approved_by" field.
func ApprovedByEQ(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedByNEQ applies the NEQ predicate on the "approved_by" field.
func ApprovedByNEQ(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldApprovedBy, v))
}

// ApprovedByIn applies the In predicate on the "approved_by" field.
func ApprovedByIn(vs ...string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldApprovedBy, vs...))
}

// ApprovedByNotIn applies the NotIn predicate on the "approved_by" field.
func ApprovedByNotIn(vs ...string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldApprovedBy, vs...))
}

// ApprovedByGT applies the GT predicate on the "approved_by" field.
func ApprovedByGT(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldApprovedBy, v))
}

// ApprovedByGTE applies the GTE predicate on the "approved_by" field.
func ApprovedByGTE(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldApprovedBy, v))
}

// ApprovedByLT applies the LT predicate on the "approved_by" field.
func ApprovedByLT(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldApprovedBy, v))
}

// ApprovedByLTE applies the LTE predicate on the "approved_by" field.
func ApprovedByLTE(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldApprovedBy, v))
}

// ApprovedByContains applies the Contains predicate on the "approved_by" field.
func ApprovedByContains(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldContains(FieldApprovedBy, v))
}

// ApprovedByHasPrefix applies the HasPrefix predicate on the "approved_by" field.
func ApprovedByHasPrefix(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldHasPrefix(FieldApprovedBy, v))
}

// ApprovedByHasSuffix applies the HasSuffix predicate on the "approved_by" field.
func ApprovedByHasSuffix(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldHasSuffix(FieldApprovedBy, v))
}

// ApprovedByIsNil applies the IsNil predicate on the "approved_by" field.
func ApprovedByIsNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIsNull(FieldApprovedBy))
}

// ApprovedByNotNil applies the NotNil predicate on the "approved_by" field.
func ApprovedByNotNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotNull(FieldApprovedBy))
}

// ApprovedByEqualFold applies the EqualFold predicate on the "approved_by" field.
func ApprovedByEqualFold(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEqualFold(FieldApprovedBy, v))
}

// ApprovedByContainsFold applies the ContainsFold predicate on the "approved_by" field.
func ApprovedByContainsFold(v string) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldContainsFold(FieldApprovedBy, v))
}

// ApprovedAtEQ applies the EQ predicate on the "approved_at" field.
func ApprovedAtEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approved_at" field.
func ApprovedAtNEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approved_at" field.
func ApprovedAtIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approved_at" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approved_at" field.
func ApprovedAtGT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approved_at" field.
func ApprovedAtGTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approved_at" field.
func ApprovedAtLT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approved_at" field.
func ApprovedAtLTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldApprovedAt, v))
}

// ApprovedAtIsNil applies the IsNil predicate on the "approved_at" field.
func ApprovedAtIsNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIsNull(FieldApprovedAt))
}

// ApprovedAtNotNil applies the NotNil predicate on the "approved_at" field.
func ApprovedAtNotNil() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotNull(FieldApprovedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPartnership applies the HasEdge predicate on the "partnership" edge.
func HasPartnership() predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnershipWith applies the HasEdge predicate on the "partnership" edge with a given conditions (other predicates).
func HasPartnershipWith(preds ...predicate.Partnership) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(func(s *sql.Selector) {
		step := newPartnershipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnershipRenewal) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnershipRenewal) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnershipRenewal) predicate.PartnershipRenewal {
	return predicate.PartnershipRenewal(sql.NotPredicates(p))
}
