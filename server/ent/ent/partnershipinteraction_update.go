// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PartnershipInteractionUpdate is the builder for updating PartnershipInteraction entities.
type PartnershipInteractionUpdate struct {
	config
	hooks    []Hook
	mutation *PartnershipInteractionMutation
}

// Where appends a list predicates to the PartnershipInteractionUpdate builder.
func (_u *PartnershipInteractionUpdate) Where(ps ...predicate.PartnershipInteraction) *PartnershipInteractionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInteractionType sets the "interaction_type" field.
func (_u *PartnershipInteractionUpdate) SetInteractionType(v string) *PartnershipInteractionUpdate {
	_u.mutation.SetInteractionType(v)
	return _u
}

// SetNillableInteractionType sets the "interaction_type" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableInteractionType(v *string) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetInteractionType(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PartnershipInteractionUpdate) SetSubject(v string) *PartnershipInteractionUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableSubject(v *string) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetSummary sets the "summary" field.
func (_u *PartnershipInteractionUpdate) SetSummary(v string) *PartnershipInteractionUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableSummary(v *string) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *PartnershipInteractionUpdate) ClearSummary() *PartnershipInteractionUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetInteractedAt sets the "interacted_at" field.
func (_u *PartnershipInteractionUpdate) SetInteractedAt(v time.Time) *PartnershipInteractionUpdate {
	_u.mutation.SetInteractedAt(v)
	return _u
}

// SetNillableInteractedAt sets the "interacted_at" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableInteractedAt(v *time.Time) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetInteractedAt(*v)
	}
	return _u
}

// SetAttendees sets the "attendees" field.
func (_u *PartnershipInteractionUpdate) SetAttendees(v []string) *PartnershipInteractionUpdate {
	_u.mutation.SetAttendees(v)
	return _u
}

// AppendAttendees appends value to the "attendees" field.
func (_u *PartnershipInteractionUpdate) AppendAttendees(v []string) *PartnershipInteractionUpdate {
	_u.mutation.AppendAttendees(v)
	return _u
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (_u *PartnershipInteractionUpdate) SetFollowUpRequired(v bool) *PartnershipInteractionUpdate {
	_u.mutation.SetFollowUpRequired(v)
	return _u
}

// SetNillableFollowUpRequired sets the "follow_up_required" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableFollowUpRequired(v *bool) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetFollowUpRequired(*v)
	}
	return _u
}

// SetFollowUpDate sets the "follow_up_date" field.
func (_u *PartnershipInteractionUpdate) SetFollowUpDate(v time.Time) *PartnershipInteractionUpdate {
	_u.mutation.SetFollowUpDate(v)
	return _u
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (_u *PartnershipInteractionUpdate) SetNillableFollowUpDate(v *time.Time) *PartnershipInteractionUpdate {
	if v != nil {
		_u.SetFollowUpDate(*v)
	}
	return _u
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (_u *PartnershipInteractionUpdate) ClearFollowUpDate() *PartnershipInteractionUpdate {
	_u.mutation.ClearFollowUpDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipInteractionUpdate) SetUpdatedAt(v time.Time) *PartnershipInteractionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipInteractionUpdate) SetPartnershipID(id int) *PartnershipInteractionUpdate {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipInteractionUpdate) SetPartnership(v *Partnership) *PartnershipInteractionUpdate {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipInteractionMutation object of the builder.
func (_u *PartnershipInteractionUpdate) Mutation() *PartnershipInteractionMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipInteractionUpdate) ClearPartnership() *PartnershipInteractionUpdate {
	_u.mutation.ClearPartnership()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnershipInteractionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipInteractionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnershipInteractionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipInteractionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipInteractionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershipinteraction.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipInteractionUpdate) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipInteraction.partnership"`)
	}
	return nil
}

func (_u *PartnershipInteractionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershipinteraction.Table, partnershipinteraction.Columns, sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InteractionType(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractionType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(partnershipinteraction.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(partnershipinteraction.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(partnershipinteraction.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.InteractedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Attendees(); ok {
		_spec.SetField(partnershipinteraction.FieldAttendees, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAttendees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipinteraction.FieldAttendees, value)
		})
	}
	if value, ok := _u.mutation.FollowUpRequired(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.FollowUpDate(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpDate, field.TypeTime, value)
	}
	if _u.mutation.FollowUpDateCleared() {
		_spec.ClearField(partnershipinteraction.FieldFollowUpDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershipinteraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnershipInteractionUpdateOne is the builder for updating a single PartnershipInteraction entity.
type PartnershipInteractionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnershipInteractionMutation
}

// SetInteractionType sets the "interaction_type" field.
func (_u *PartnershipInteractionUpdateOne) SetInteractionType(v string) *PartnershipInteractionUpdateOne {
	_u.mutation.SetInteractionType(v)
	return _u
}

// SetNillableInteractionType sets the "interaction_type" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableInteractionType(v *string) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetInteractionType(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PartnershipInteractionUpdateOne) SetSubject(v string) *PartnershipInteractionUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableSubject(v *string) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetSummary sets the "summary" field.
func (_u *PartnershipInteractionUpdateOne) SetSummary(v string) *PartnershipInteractionUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableSummary(v *string) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *PartnershipInteractionUpdateOne) ClearSummary() *PartnershipInteractionUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetInteractedAt sets the "interacted_at" field.
func (_u *PartnershipInteractionUpdateOne) SetInteractedAt(v time.Time) *PartnershipInteractionUpdateOne {
	_u.mutation.SetInteractedAt(v)
	return _u
}

// SetNillableInteractedAt sets the "interacted_at" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableInteractedAt(v *time.Time) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetInteractedAt(*v)
	}
	return _u
}

// SetAttendees sets the "attendees" field.
func (_u *PartnershipInteractionUpdateOne) SetAttendees(v []string) *PartnershipInteractionUpdateOne {
	_u.mutation.SetAttendees(v)
	return _u
}

// AppendAttendees appends value to the "attendees" field.
func (_u *PartnershipInteractionUpdateOne) AppendAttendees(v []string) *PartnershipInteractionUpdateOne {
	_u.mutation.AppendAttendees(v)
	return _u
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (_u *PartnershipInteractionUpdateOne) SetFollowUpRequired(v bool) *PartnershipInteractionUpdateOne {
	_u.mutation.SetFollowUpRequired(v)
	return _u
}

// SetNillableFollowUpRequired sets the "follow_up_required" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableFollowUpRequired(v *bool) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetFollowUpRequired(*v)
	}
	return _u
}

// SetFollowUpDate sets the "follow_up_date" field.
func (_u *PartnershipInteractionUpdateOne) SetFollowUpDate(v time.Time) *PartnershipInteractionUpdateOne {
	_u.mutation.SetFollowUpDate(v)
	return _u
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (_u *PartnershipInteractionUpdateOne) SetNillableFollowUpDate(v *time.Time) *PartnershipInteractionUpdateOne {
	if v != nil {
		_u.SetFollowUpDate(*v)
	}
	return _u
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (_u *PartnershipInteractionUpdateOne) ClearFollowUpDate() *PartnershipInteractionUpdateOne {
	_u.mutation.ClearFollowUpDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipInteractionUpdateOne) SetUpdatedAt(v time.Time) *PartnershipInteractionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipInteractionUpdateOne) SetPartnershipID(id int) *PartnershipInteractionUpdateOne {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipInteractionUpdateOne) SetPartnership(v *Partnership) *PartnershipInteractionUpdateOne {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipInteractionMutation object of the builder.
func (_u *PartnershipInteractionUpdateOne) Mutation() *PartnershipInteractionMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipInteractionUpdateOne) ClearPartnership() *PartnershipInteractionUpdateOne {
	_u.mutation.ClearPartnership()
	return _u
}

// Where appends a list predicates to the PartnershipInteractionUpdate builder.
func (_u *PartnershipInteractionUpdateOne) Where(ps ...predicate.PartnershipInteraction) *PartnershipInteractionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnershipInteractionUpdateOne) Select(field string, fields ...string) *PartnershipInteractionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PartnershipInteraction entity.
func (_u *PartnershipInteractionUpdateOne) Save(ctx context.Context) (*PartnershipInteraction, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipInteractionUpdateOne) SaveX(ctx context.Context) *PartnershipInteraction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnershipInteractionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipInteractionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipInteractionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershipinteraction.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipInteractionUpdateOne) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipInteraction.partnership"`)
	}
	return nil
}

func (_u *PartnershipInteractionUpdateOne) sqlSave(ctx context.Context) (_node *PartnershipInteraction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershipinteraction.Table, partnershipinteraction.Columns, sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnershipInteraction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnershipinteraction.FieldID)
		for _, f := range fields {
			if !partnershipinteraction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnershipinteraction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InteractionType(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractionType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(partnershipinteraction.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(partnershipinteraction.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(partnershipinteraction.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.InteractedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Attendees(); ok {
		_spec.SetField(partnershipinteraction.FieldAttendees, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAttendees(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipinteraction.FieldAttendees, value)
		})
	}
	if value, ok := _u.mutation.FollowUpRequired(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.FollowUpDate(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpDate, field.TypeTime, value)
	}
	if _u.mutation.FollowUpDateCleared() {
		_spec.ClearField(partnershipinteraction.FieldFollowUpDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartnershipInteraction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershipinteraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
