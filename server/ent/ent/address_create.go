// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/event"
	"awe/ent/ent/userprofile"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStreet1 sets the "street1" field.
func (_c *AddressCreate) SetStreet1(v string) *AddressCreate {
	_c.mutation.SetStreet1(v)
	return _c
}

// SetStreet2 sets the "street2" field.
func (_c *AddressCreate) SetStreet2(v string) *AddressCreate {
	_c.mutation.SetStreet2(v)
	return _c
}

// SetNillableStreet2 sets the "street2" field if the given value is not nil.
func (_c *AddressCreate) SetNillableStreet2(v *string) *AddressCreate {
	if v != nil {
		_c.SetStreet2(*v)
	}
	return _c
}

// SetCity sets the "city" field.
func (_c *AddressCreate) SetCity(v string) *AddressCreate {
	_c.mutation.SetCity(v)
	return _c
}

// SetState sets the "state" field.
func (_c *AddressCreate) SetState(v string) *AddressCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetPostalCode sets the "postal_code" field.
func (_c *AddressCreate) SetPostalCode(v string) *AddressCreate {
	_c.mutation.SetPostalCode(v)
	return _c
}

// SetCountry sets the "country" field.
func (_c *AddressCreate) SetCountry(v string) *AddressCreate {
	_c.mutation.SetCountry(v)
	return _c
}

// AddUserProfileIDs adds the "user_profiles" edge to the UserProfile entity by IDs.
func (_c *AddressCreate) AddUserProfileIDs(ids ...int) *AddressCreate {
	_c.mutation.AddUserProfileIDs(ids...)
	return _c
}

// AddUserProfiles adds the "user_profiles" edges to the UserProfile entity.
func (_c *AddressCreate) AddUserProfiles(v ...*UserProfile) *AddressCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *AddressCreate) AddEventIDs(ids ...int) *AddressCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *AddressCreate) AddEvents(v ...*Event) *AddressCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (_c *AddressCreate) Mutation() *AddressMutation {
	return _c.mutation
}

// Save creates the Address in the database.
func (_c *AddressCreate) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddressCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddressCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AddressCreate) check() error {
	if _, ok := _c.mutation.Street1(); !ok {
		return &ValidationError{Name: "street1", err: errors.New(`ent: missing required field "Address.street1"`)}
	}
	if _, ok := _c.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Address.city"`)}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Address.state"`)}
	}
	if _, ok := _c.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Address.postal_code"`)}
	}
	if _, ok := _c.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Address.country"`)}
	}
	return nil
}

func (_c *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Street1(); ok {
		_spec.SetField(address.FieldStreet1, field.TypeString, value)
		_node.Street1 = value
	}
	if value, ok := _c.mutation.Street2(); ok {
		_spec.SetField(address.FieldStreet2, field.TypeString, value)
		_node.Street2 = value
	}
	if value, ok := _c.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := _c.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := _c.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if nodes := _c.mutation.UserProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.Create().
//		SetStreet1(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetStreet1(v+v).
//		}).
//		Exec(ctx)
func (_c *AddressCreate) OnConflict(opts ...sql.ConflictOption) *AddressUpsertOne {
	_c.conflict = opts
	return &AddressUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddressCreate) OnConflictColumns(columns ...string) *AddressUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertOne{
		create: _c,
	}
}

type (
	// AddressUpsertOne is the builder for "upsert"-ing
	//  one Address node.
	AddressUpsertOne struct {
		create *AddressCreate
	}

	// AddressUpsert is the "OnConflict" setter.
	AddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetStreet1 sets the "street1" field.
func (u *AddressUpsert) SetStreet1(v string) *AddressUpsert {
	u.Set(address.FieldStreet1, v)
	return u
}

// UpdateStreet1 sets the "street1" field to the value that was provided on create.
func (u *AddressUpsert) UpdateStreet1() *AddressUpsert {
	u.SetExcluded(address.FieldStreet1)
	return u
}

// SetStreet2 sets the "street2" field.
func (u *AddressUpsert) SetStreet2(v string) *AddressUpsert {
	u.Set(address.FieldStreet2, v)
	return u
}

// UpdateStreet2 sets the "street2" field to the value that was provided on create.
func (u *AddressUpsert) UpdateStreet2() *AddressUpsert {
	u.SetExcluded(address.FieldStreet2)
	return u
}

// ClearStreet2 clears the value of the "street2" field.
func (u *AddressUpsert) ClearStreet2() *AddressUpsert {
	u.SetNull(address.FieldStreet2)
	return u
}

// SetCity sets the "city" field.
func (u *AddressUpsert) SetCity(v string) *AddressUpsert {
	u.Set(address.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCity() *AddressUpsert {
	u.SetExcluded(address.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *AddressUpsert) SetState(v string) *AddressUpsert {
	u.Set(address.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsert) UpdateState() *AddressUpsert {
	u.SetExcluded(address.FieldState)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *AddressUpsert) SetPostalCode(v string) *AddressUpsert {
	u.Set(address.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AddressUpsert) UpdatePostalCode() *AddressUpsert {
	u.SetExcluded(address.FieldPostalCode)
	return u
}

// SetCountry sets the "country" field.
func (u *AddressUpsert) SetCountry(v string) *AddressUpsert {
	u.Set(address.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCountry() *AddressUpsert {
	u.SetExcluded(address.FieldCountry)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AddressUpsertOne) UpdateNewValues() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressUpsertOne) Ignore() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertOne) DoNothing() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreate.OnConflict
// documentation for more info.
func (u *AddressUpsertOne) Update(set func(*AddressUpsert)) *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetStreet1 sets the "street1" field.
func (u *AddressUpsertOne) SetStreet1(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet1(v)
	})
}

// UpdateStreet1 sets the "street1" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateStreet1() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet1()
	})
}

// SetStreet2 sets the "street2" field.
func (u *AddressUpsertOne) SetStreet2(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet2(v)
	})
}

// UpdateStreet2 sets the "street2" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateStreet2() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet2()
	})
}

// ClearStreet2 clears the value of the "street2" field.
func (u *AddressUpsertOne) ClearStreet2() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearStreet2()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertOne) SetCity(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCity() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertOne) SetState(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateState() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *AddressUpsertOne) SetPostalCode(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdatePostalCode() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePostalCode()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertOne) SetCountry(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCountry() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// Exec executes the query.
func (u *AddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
	conflict []sql.ConflictOption
}

// Save creates the Address entities in the database.
func (_c *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Address, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetStreet1(v+v).
//		}).
//		Exec(ctx)
func (_c *AddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressUpsertBulk {
	_c.conflict = opts
	return &AddressUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AddressCreateBulk) OnConflictColumns(columns ...string) *AddressUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertBulk{
		create: _c,
	}
}

// AddressUpsertBulk is the builder for "upsert"-ing
// a bulk of Address nodes.
type AddressUpsertBulk struct {
	create *AddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AddressUpsertBulk) UpdateNewValues() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressUpsertBulk) Ignore() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertBulk) DoNothing() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreateBulk.OnConflict
// documentation for more info.
func (u *AddressUpsertBulk) Update(set func(*AddressUpsert)) *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetStreet1 sets the "street1" field.
func (u *AddressUpsertBulk) SetStreet1(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet1(v)
	})
}

// UpdateStreet1 sets the "street1" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateStreet1() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet1()
	})
}

// SetStreet2 sets the "street2" field.
func (u *AddressUpsertBulk) SetStreet2(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetStreet2(v)
	})
}

// UpdateStreet2 sets the "street2" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateStreet2() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateStreet2()
	})
}

// ClearStreet2 clears the value of the "street2" field.
func (u *AddressUpsertBulk) ClearStreet2() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearStreet2()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertBulk) SetCity(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCity() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertBulk) SetState(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateState() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *AddressUpsertBulk) SetPostalCode(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdatePostalCode() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePostalCode()
	})
}

// SetCountry sets the "country" field.
func (u *AddressUpsertBulk) SetCountry(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCountry() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCountry()
	})
}

// Exec executes the query.
func (u *AddressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
