// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"awe/ent/ent/volunteerapplication"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VolunteerApplicationUpdate is the builder for updating VolunteerApplication entities.
type VolunteerApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *VolunteerApplicationMutation
}

// Where appends a list predicates to the VolunteerApplicationUpdate builder.
func (_u *VolunteerApplicationUpdate) Where(ps ...predicate.VolunteerApplication) *VolunteerApplicationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *VolunteerApplicationUpdate) SetStatus(v volunteerapplication.Status) *VolunteerApplicationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableStatus(v *volunteerapplication.Status) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMotivation sets the "motivation" field.
func (_u *VolunteerApplicationUpdate) SetMotivation(v string) *VolunteerApplicationUpdate {
	_u.mutation.SetMotivation(v)
	return _u
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableMotivation(v *string) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetMotivation(*v)
	}
	return _u
}

// SetAvailability sets the "availability" field.
func (_u *VolunteerApplicationUpdate) SetAvailability(v map[string]interface{}) *VolunteerApplicationUpdate {
	_u.mutation.SetAvailability(v)
	return _u
}

// SetBackgroundCheck sets the "background_check" field.
func (_u *VolunteerApplicationUpdate) SetBackgroundCheck(v bool) *VolunteerApplicationUpdate {
	_u.mutation.SetBackgroundCheck(v)
	return _u
}

// SetNillableBackgroundCheck sets the "background_check" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableBackgroundCheck(v *bool) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetBackgroundCheck(*v)
	}
	return _u
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (_u *VolunteerApplicationUpdate) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationUpdate {
	_u.mutation.SetBackgroundCheckDate(v)
	return _u
}

// SetNillableBackgroundCheckDate sets the "background_check_date" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableBackgroundCheckDate(v *time.Time) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetBackgroundCheckDate(*v)
	}
	return _u
}

// ClearBackgroundCheckDate clears the value of the "background_check_date" field.
func (_u *VolunteerApplicationUpdate) ClearBackgroundCheckDate() *VolunteerApplicationUpdate {
	_u.mutation.ClearBackgroundCheckDate()
	return _u
}

// SetReferences sets the "references" field.
func (_u *VolunteerApplicationUpdate) SetReferences(v []map[string]interface{}) *VolunteerApplicationUpdate {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *VolunteerApplicationUpdate) AppendReferences(v []map[string]interface{}) *VolunteerApplicationUpdate {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *VolunteerApplicationUpdate) ClearReferences() *VolunteerApplicationUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// SetEmergencyContact sets the "emergency_contact" field.
func (_u *VolunteerApplicationUpdate) SetEmergencyContact(v map[string]string) *VolunteerApplicationUpdate {
	_u.mutation.SetEmergencyContact(v)
	return _u
}

// ClearEmergencyContact clears the value of the "emergency_contact" field.
func (_u *VolunteerApplicationUpdate) ClearEmergencyContact() *VolunteerApplicationUpdate {
	_u.mutation.ClearEmergencyContact()
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *VolunteerApplicationUpdate) SetReviewedBy(v string) *VolunteerApplicationUpdate {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableReviewedBy(v *string) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (_u *VolunteerApplicationUpdate) ClearReviewedBy() *VolunteerApplicationUpdate {
	_u.mutation.ClearReviewedBy()
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *VolunteerApplicationUpdate) SetReviewedAt(v time.Time) *VolunteerApplicationUpdate {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableReviewedAt(v *time.Time) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (_u *VolunteerApplicationUpdate) ClearReviewedAt() *VolunteerApplicationUpdate {
	_u.mutation.ClearReviewedAt()
	return _u
}

// SetReviewNotes sets the "review_notes" field.
func (_u *VolunteerApplicationUpdate) SetReviewNotes(v string) *VolunteerApplicationUpdate {
	_u.mutation.SetReviewNotes(v)
	return _u
}

// SetNillableReviewNotes sets the "review_notes" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableReviewNotes(v *string) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetReviewNotes(*v)
	}
	return _u
}

// ClearReviewNotes clears the value of the "review_notes" field.
func (_u *VolunteerApplicationUpdate) ClearReviewNotes() *VolunteerApplicationUpdate {
	_u.mutation.ClearReviewNotes()
	return _u
}

// SetInterviewDate sets the "interview_date" field.
func (_u *VolunteerApplicationUpdate) SetInterviewDate(v time.Time) *VolunteerApplicationUpdate {
	_u.mutation.SetInterviewDate(v)
	return _u
}

// SetNillableInterviewDate sets the "interview_date" field if the given value is not nil.
func (_u *VolunteerApplicationUpdate) SetNillableInterviewDate(v *time.Time) *VolunteerApplicationUpdate {
	if v != nil {
		_u.SetInterviewDate(*v)
	}
	return _u
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (_u *VolunteerApplicationUpdate) ClearInterviewDate() *VolunteerApplicationUpdate {
	_u.mutation.ClearInterviewDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerApplicationUpdate) SetUpdatedAt(v time.Time) *VolunteerApplicationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *VolunteerApplicationUpdate) SetUserID(id int) *VolunteerApplicationUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *VolunteerApplicationUpdate) SetUser(v *User) *VolunteerApplicationUpdate {
	return _u.SetUserID(v.ID)
}

// AddInterestedOpportunityIDs adds the "interested_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_u *VolunteerApplicationUpdate) AddInterestedOpportunityIDs(ids ...int) *VolunteerApplicationUpdate {
	_u.mutation.AddInterestedOpportunityIDs(ids...)
	return _u
}

// AddInterestedOpportunities adds the "interested_opportunities" edges to the VolunteerOpportunity entity.
func (_u *VolunteerApplicationUpdate) AddInterestedOpportunities(v ...*VolunteerOpportunity) *VolunteerApplicationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInterestedOpportunityIDs(ids...)
}

// Mutation returns the VolunteerApplicationMutation object of the builder.
func (_u *VolunteerApplicationUpdate) Mutation() *VolunteerApplicationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *VolunteerApplicationUpdate) ClearUser() *VolunteerApplicationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearInterestedOpportunities clears all "interested_opportunities" edges to the VolunteerOpportunity entity.
func (_u *VolunteerApplicationUpdate) ClearInterestedOpportunities() *VolunteerApplicationUpdate {
	_u.mutation.ClearInterestedOpportunities()
	return _u
}

// RemoveInterestedOpportunityIDs removes the "interested_opportunities" edge to VolunteerOpportunity entities by IDs.
func (_u *VolunteerApplicationUpdate) RemoveInterestedOpportunityIDs(ids ...int) *VolunteerApplicationUpdate {
	_u.mutation.RemoveInterestedOpportunityIDs(ids...)
	return _u
}

// RemoveInterestedOpportunities removes "interested_opportunities" edges to VolunteerOpportunity entities.
func (_u *VolunteerApplicationUpdate) RemoveInterestedOpportunities(v ...*VolunteerOpportunity) *VolunteerApplicationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInterestedOpportunityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VolunteerApplicationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VolunteerApplicationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerApplicationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerApplicationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteerapplication.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerApplicationUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := volunteerapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "VolunteerApplication.status": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerApplication.user"`)
	}
	return nil
}

func (_u *VolunteerApplicationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteerapplication.Table, volunteerapplication.Columns, sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(volunteerapplication.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Motivation(); ok {
		_spec.SetField(volunteerapplication.FieldMotivation, field.TypeString, value)
	}
	if value, ok := _u.mutation.Availability(); ok {
		_spec.SetField(volunteerapplication.FieldAvailability, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.BackgroundCheck(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheck, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BackgroundCheckDate(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheckDate, field.TypeTime, value)
	}
	if _u.mutation.BackgroundCheckDateCleared() {
		_spec.ClearField(volunteerapplication.FieldBackgroundCheckDate, field.TypeTime)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(volunteerapplication.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteerapplication.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(volunteerapplication.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.EmergencyContact(); ok {
		_spec.SetField(volunteerapplication.FieldEmergencyContact, field.TypeJSON, value)
	}
	if _u.mutation.EmergencyContactCleared() {
		_spec.ClearField(volunteerapplication.FieldEmergencyContact, field.TypeJSON)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedBy, field.TypeString, value)
	}
	if _u.mutation.ReviewedByCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.ReviewedAtCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewNotes(); ok {
		_spec.SetField(volunteerapplication.FieldReviewNotes, field.TypeString, value)
	}
	if _u.mutation.ReviewNotesCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewNotes, field.TypeString)
	}
	if value, ok := _u.mutation.InterviewDate(); ok {
		_spec.SetField(volunteerapplication.FieldInterviewDate, field.TypeTime, value)
	}
	if _u.mutation.InterviewDateCleared() {
		_spec.ClearField(volunteerapplication.FieldInterviewDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InterestedOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInterestedOpportunitiesIDs(); len(nodes) > 0 && !_u.mutation.InterestedOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InterestedOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteerapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VolunteerApplicationUpdateOne is the builder for updating a single VolunteerApplication entity.
type VolunteerApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VolunteerApplicationMutation
}

// SetStatus sets the "status" field.
func (_u *VolunteerApplicationUpdateOne) SetStatus(v volunteerapplication.Status) *VolunteerApplicationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableStatus(v *volunteerapplication.Status) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMotivation sets the "motivation" field.
func (_u *VolunteerApplicationUpdateOne) SetMotivation(v string) *VolunteerApplicationUpdateOne {
	_u.mutation.SetMotivation(v)
	return _u
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableMotivation(v *string) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetMotivation(*v)
	}
	return _u
}

// SetAvailability sets the "availability" field.
func (_u *VolunteerApplicationUpdateOne) SetAvailability(v map[string]interface{}) *VolunteerApplicationUpdateOne {
	_u.mutation.SetAvailability(v)
	return _u
}

// SetBackgroundCheck sets the "background_check" field.
func (_u *VolunteerApplicationUpdateOne) SetBackgroundCheck(v bool) *VolunteerApplicationUpdateOne {
	_u.mutation.SetBackgroundCheck(v)
	return _u
}

// SetNillableBackgroundCheck sets the "background_check" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableBackgroundCheck(v *bool) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetBackgroundCheck(*v)
	}
	return _u
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (_u *VolunteerApplicationUpdateOne) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationUpdateOne {
	_u.mutation.SetBackgroundCheckDate(v)
	return _u
}

// SetNillableBackgroundCheckDate sets the "background_check_date" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableBackgroundCheckDate(v *time.Time) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetBackgroundCheckDate(*v)
	}
	return _u
}

// ClearBackgroundCheckDate clears the value of the "background_check_date" field.
func (_u *VolunteerApplicationUpdateOne) ClearBackgroundCheckDate() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearBackgroundCheckDate()
	return _u
}

// SetReferences sets the "references" field.
func (_u *VolunteerApplicationUpdateOne) SetReferences(v []map[string]interface{}) *VolunteerApplicationUpdateOne {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *VolunteerApplicationUpdateOne) AppendReferences(v []map[string]interface{}) *VolunteerApplicationUpdateOne {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *VolunteerApplicationUpdateOne) ClearReferences() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// SetEmergencyContact sets the "emergency_contact" field.
func (_u *VolunteerApplicationUpdateOne) SetEmergencyContact(v map[string]string) *VolunteerApplicationUpdateOne {
	_u.mutation.SetEmergencyContact(v)
	return _u
}

// ClearEmergencyContact clears the value of the "emergency_contact" field.
func (_u *VolunteerApplicationUpdateOne) ClearEmergencyContact() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearEmergencyContact()
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *VolunteerApplicationUpdateOne) SetReviewedBy(v string) *VolunteerApplicationUpdateOne {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableReviewedBy(v *string) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (_u *VolunteerApplicationUpdateOne) ClearReviewedBy() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearReviewedBy()
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *VolunteerApplicationUpdateOne) SetReviewedAt(v time.Time) *VolunteerApplicationUpdateOne {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableReviewedAt(v *time.Time) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (_u *VolunteerApplicationUpdateOne) ClearReviewedAt() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearReviewedAt()
	return _u
}

// SetReviewNotes sets the "review_notes" field.
func (_u *VolunteerApplicationUpdateOne) SetReviewNotes(v string) *VolunteerApplicationUpdateOne {
	_u.mutation.SetReviewNotes(v)
	return _u
}

// SetNillableReviewNotes sets the "review_notes" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableReviewNotes(v *string) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetReviewNotes(*v)
	}
	return _u
}

// ClearReviewNotes clears the value of the "review_notes" field.
func (_u *VolunteerApplicationUpdateOne) ClearReviewNotes() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearReviewNotes()
	return _u
}

// SetInterviewDate sets the "interview_date" field.
func (_u *VolunteerApplicationUpdateOne) SetInterviewDate(v time.Time) *VolunteerApplicationUpdateOne {
	_u.mutation.SetInterviewDate(v)
	return _u
}

// SetNillableInterviewDate sets the "interview_date" field if the given value is not nil.
func (_u *VolunteerApplicationUpdateOne) SetNillableInterviewDate(v *time.Time) *VolunteerApplicationUpdateOne {
	if v != nil {
		_u.SetInterviewDate(*v)
	}
	return _u
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (_u *VolunteerApplicationUpdateOne) ClearInterviewDate() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearInterviewDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerApplicationUpdateOne) SetUpdatedAt(v time.Time) *VolunteerApplicationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *VolunteerApplicationUpdateOne) SetUserID(id int) *VolunteerApplicationUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *VolunteerApplicationUpdateOne) SetUser(v *User) *VolunteerApplicationUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddInterestedOpportunityIDs adds the "interested_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_u *VolunteerApplicationUpdateOne) AddInterestedOpportunityIDs(ids ...int) *VolunteerApplicationUpdateOne {
	_u.mutation.AddInterestedOpportunityIDs(ids...)
	return _u
}

// AddInterestedOpportunities adds the "interested_opportunities" edges to the VolunteerOpportunity entity.
func (_u *VolunteerApplicationUpdateOne) AddInterestedOpportunities(v ...*VolunteerOpportunity) *VolunteerApplicationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInterestedOpportunityIDs(ids...)
}

// Mutation returns the VolunteerApplicationMutation object of the builder.
func (_u *VolunteerApplicationUpdateOne) Mutation() *VolunteerApplicationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *VolunteerApplicationUpdateOne) ClearUser() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearInterestedOpportunities clears all "interested_opportunities" edges to the VolunteerOpportunity entity.
func (_u *VolunteerApplicationUpdateOne) ClearInterestedOpportunities() *VolunteerApplicationUpdateOne {
	_u.mutation.ClearInterestedOpportunities()
	return _u
}

// RemoveInterestedOpportunityIDs removes the "interested_opportunities" edge to VolunteerOpportunity entities by IDs.
func (_u *VolunteerApplicationUpdateOne) RemoveInterestedOpportunityIDs(ids ...int) *VolunteerApplicationUpdateOne {
	_u.mutation.RemoveInterestedOpportunityIDs(ids...)
	return _u
}

// RemoveInterestedOpportunities removes "interested_opportunities" edges to VolunteerOpportunity entities.
func (_u *VolunteerApplicationUpdateOne) RemoveInterestedOpportunities(v ...*VolunteerOpportunity) *VolunteerApplicationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInterestedOpportunityIDs(ids...)
}

// Where appends a list predicates to the VolunteerApplicationUpdate builder.
func (_u *VolunteerApplicationUpdateOne) Where(ps ...predicate.VolunteerApplication) *VolunteerApplicationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VolunteerApplicationUpdateOne) Select(field string, fields ...string) *VolunteerApplicationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated VolunteerApplication entity.
func (_u *VolunteerApplicationUpdateOne) Save(ctx context.Context) (*VolunteerApplication, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerApplicationUpdateOne) SaveX(ctx context.Context) *VolunteerApplication {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VolunteerApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerApplicationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteerapplication.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerApplicationUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := volunteerapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "VolunteerApplication.status": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerApplication.user"`)
	}
	return nil
}

func (_u *VolunteerApplicationUpdateOne) sqlSave(ctx context.Context) (_node *VolunteerApplication, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteerapplication.Table, volunteerapplication.Columns, sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VolunteerApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, volunteerapplication.FieldID)
		for _, f := range fields {
			if !volunteerapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != volunteerapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(volunteerapplication.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Motivation(); ok {
		_spec.SetField(volunteerapplication.FieldMotivation, field.TypeString, value)
	}
	if value, ok := _u.mutation.Availability(); ok {
		_spec.SetField(volunteerapplication.FieldAvailability, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.BackgroundCheck(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheck, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BackgroundCheckDate(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheckDate, field.TypeTime, value)
	}
	if _u.mutation.BackgroundCheckDateCleared() {
		_spec.ClearField(volunteerapplication.FieldBackgroundCheckDate, field.TypeTime)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(volunteerapplication.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteerapplication.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(volunteerapplication.FieldReferences, field.TypeJSON)
	}
	if value, ok := _u.mutation.EmergencyContact(); ok {
		_spec.SetField(volunteerapplication.FieldEmergencyContact, field.TypeJSON, value)
	}
	if _u.mutation.EmergencyContactCleared() {
		_spec.ClearField(volunteerapplication.FieldEmergencyContact, field.TypeJSON)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedBy, field.TypeString, value)
	}
	if _u.mutation.ReviewedByCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.ReviewedAtCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewNotes(); ok {
		_spec.SetField(volunteerapplication.FieldReviewNotes, field.TypeString, value)
	}
	if _u.mutation.ReviewNotesCleared() {
		_spec.ClearField(volunteerapplication.FieldReviewNotes, field.TypeString)
	}
	if value, ok := _u.mutation.InterviewDate(); ok {
		_spec.SetField(volunteerapplication.FieldInterviewDate, field.TypeTime, value)
	}
	if _u.mutation.InterviewDateCleared() {
		_spec.ClearField(volunteerapplication.FieldInterviewDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InterestedOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInterestedOpportunitiesIDs(); len(nodes) > 0 && !_u.mutation.InterestedOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InterestedOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VolunteerApplication{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteerapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
