// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/dashboardwidget"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DashboardWidget is the model entity for the DashboardWidget schema.
type DashboardWidget struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
	// DataSource holds the value of the "data_source" field.
	DataSource string `json:"data_source,omitempty"`
	// Query holds the value of the "query" field.
	Query map[string]interface{} `json:"query,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Position holds the value of the "position" field.
	Position map[string]int `json:"position,omitempty"`
	// IsVisible holds the value of the "is_visible" field.
	IsVisible bool `json:"is_visible,omitempty"`
	// RefreshRate holds the value of the "refresh_rate" field.
	RefreshRate int `json:"refresh_rate,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DashboardWidgetQuery when eager-loading is set.
	Edges                       DashboardWidgetEdges `json:"edges"`
	analytics_dashboard_widgets *int
	selectValues                sql.SelectValues
}

// DashboardWidgetEdges holds the relations/edges for other nodes in the graph.
type DashboardWidgetEdges struct {
	// Dashboard holds the value of the dashboard edge.
	Dashboard *AnalyticsDashboard `json:"dashboard,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DashboardOrErr returns the Dashboard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DashboardWidgetEdges) DashboardOrErr() (*AnalyticsDashboard, error) {
	if e.Dashboard != nil {
		return e.Dashboard, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: analyticsdashboard.Label}
	}
	return nil, &NotLoadedError{edge: "dashboard"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DashboardWidget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dashboardwidget.FieldTitle, dashboardwidget.FieldConfig, dashboardwidget.FieldQuery, dashboardwidget.FieldPosition:
			values[i] = new([]byte)
		case dashboardwidget.FieldIsVisible:
			values[i] = new(sql.NullBool)
		case dashboardwidget.FieldID, dashboardwidget.FieldOrder, dashboardwidget.FieldRefreshRate:
			values[i] = new(sql.NullInt64)
		case dashboardwidget.FieldType, dashboardwidget.FieldDataSource:
			values[i] = new(sql.NullString)
		case dashboardwidget.FieldCreatedAt, dashboardwidget.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dashboardwidget.ForeignKeys[0]: // analytics_dashboard_widgets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DashboardWidget fields.
func (_m *DashboardWidget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dashboardwidget.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case dashboardwidget.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case dashboardwidget.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case dashboardwidget.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case dashboardwidget.FieldDataSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_source", values[i])
			} else if value.Valid {
				_m.DataSource = value.String
			}
		case dashboardwidget.FieldQuery:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Query); err != nil {
					return fmt.Errorf("unmarshal field query: %w", err)
				}
			}
		case dashboardwidget.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case dashboardwidget.FieldPosition:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Position); err != nil {
					return fmt.Errorf("unmarshal field position: %w", err)
				}
			}
		case dashboardwidget.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				_m.IsVisible = value.Bool
			}
		case dashboardwidget.FieldRefreshRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_rate", values[i])
			} else if value.Valid {
				_m.RefreshRate = int(value.Int64)
			}
		case dashboardwidget.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case dashboardwidget.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case dashboardwidget.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field analytics_dashboard_widgets", value)
			} else if value.Valid {
				_m.analytics_dashboard_widgets = new(int)
				*_m.analytics_dashboard_widgets = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DashboardWidget.
// This includes values selected through modifiers, order, etc.
func (_m *DashboardWidget) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDashboard queries the "dashboard" edge of the DashboardWidget entity.
func (_m *DashboardWidget) QueryDashboard() *AnalyticsDashboardQuery {
	return NewDashboardWidgetClient(_m.config).QueryDashboard(_m)
}

// Update returns a builder for updating this DashboardWidget.
// Note that you need to call DashboardWidget.Unwrap() before calling this method if this DashboardWidget
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DashboardWidget) Update() *DashboardWidgetUpdateOne {
	return NewDashboardWidgetClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DashboardWidget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DashboardWidget) Unwrap() *DashboardWidget {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DashboardWidget is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DashboardWidget) String() string {
	var builder strings.Builder
	builder.WriteString("DashboardWidget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", _m.Config))
	builder.WriteString(", ")
	builder.WriteString("data_source=")
	builder.WriteString(_m.DataSource)
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(fmt.Sprintf("%v", _m.Query))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", _m.Position))
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsVisible))
	builder.WriteString(", ")
	builder.WriteString("refresh_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.RefreshRate))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DashboardWidgets is a parsable slice of DashboardWidget.
type DashboardWidgets []*DashboardWidget
