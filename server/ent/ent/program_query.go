// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/grant"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programcarditem"
	"awe/ent/ent/programcategory"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/user"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramQuery is the builder for querying Program entities.
type ProgramQuery struct {
	config
	ctx                        *QueryContext
	order                      []program.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Program
	withCategory               *ProgramCategoryQuery
	withEnrolments             *ProgramEnrolmentQuery
	withParticipants           *ProgramParticipantQuery
	withCreatedBy              *UserQuery
	withUpdatedBy              *UserQuery
	withProgramCardItems       *ProgramCardItemQuery
	withEvents                 *EventQuery
	withSuccessStories         *SuccessStoryQuery
	withVolunteerOpportunities *VolunteerOpportunityQuery
	withFundraisingCampaigns   *FundraisingCampaignQuery
	withDonations              *DonationQuery
	withGrants                 *GrantQuery
	withSiteVisits             *SiteVisitQuery
	withImpactMetrics          *ImpactMetricQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProgramQuery builder.
func (_q *ProgramQuery) Where(ps ...predicate.Program) *ProgramQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *ProgramQuery) Limit(limit int) *ProgramQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *ProgramQuery) Offset(offset int) *ProgramQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *ProgramQuery) Unique(unique bool) *ProgramQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *ProgramQuery) Order(o ...program.OrderOption) *ProgramQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryCategory chains the current query on the "category" edge.
func (_q *ProgramQuery) QueryCategory() *ProgramCategoryQuery {
	query := (&ProgramCategoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(programcategory.Table, programcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, program.CategoryTable, program.CategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnrolments chains the current query on the "enrolments" edge.
func (_q *ProgramQuery) QueryEnrolments() *ProgramEnrolmentQuery {
	query := (&ProgramEnrolmentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(programenrolment.Table, programenrolment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.EnrolmentsTable, program.EnrolmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipants chains the current query on the "participants" edge.
func (_q *ProgramQuery) QueryParticipants() *ProgramParticipantQuery {
	query := (&ProgramParticipantClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(programparticipant.Table, programparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.ParticipantsTable, program.ParticipantsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (_q *ProgramQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, program.CreatedByTable, program.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedBy chains the current query on the "updated_by" edge.
func (_q *ProgramQuery) QueryUpdatedBy() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, program.UpdatedByTable, program.UpdatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramCardItems chains the current query on the "program_card_items" edge.
func (_q *ProgramQuery) QueryProgramCardItems() *ProgramCardItemQuery {
	query := (&ProgramCardItemClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(programcarditem.Table, programcarditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.ProgramCardItemsTable, program.ProgramCardItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (_q *ProgramQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.EventsTable, program.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySuccessStories chains the current query on the "success_stories" edge.
func (_q *ProgramQuery) QuerySuccessStories() *SuccessStoryQuery {
	query := (&SuccessStoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(successstory.Table, successstory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.SuccessStoriesTable, program.SuccessStoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVolunteerOpportunities chains the current query on the "volunteer_opportunities" edge.
func (_q *ProgramQuery) QueryVolunteerOpportunities() *VolunteerOpportunityQuery {
	query := (&VolunteerOpportunityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(volunteeropportunity.Table, volunteeropportunity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.VolunteerOpportunitiesTable, program.VolunteerOpportunitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFundraisingCampaigns chains the current query on the "fundraising_campaigns" edge.
func (_q *ProgramQuery) QueryFundraisingCampaigns() *FundraisingCampaignQuery {
	query := (&FundraisingCampaignClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(fundraisingcampaign.Table, fundraisingcampaign.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.FundraisingCampaignsTable, program.FundraisingCampaignsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDonations chains the current query on the "donations" edge.
func (_q *ProgramQuery) QueryDonations() *DonationQuery {
	query := (&DonationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(donation.Table, donation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.DonationsTable, program.DonationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGrants chains the current query on the "grants" edge.
func (_q *ProgramQuery) QueryGrants() *GrantQuery {
	query := (&GrantClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(grant.Table, grant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.GrantsTable, program.GrantsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySiteVisits chains the current query on the "site_visits" edge.
func (_q *ProgramQuery) QuerySiteVisits() *SiteVisitQuery {
	query := (&SiteVisitClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(sitevisit.Table, sitevisit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.SiteVisitsTable, program.SiteVisitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImpactMetrics chains the current query on the "impact_metrics" edge.
func (_q *ProgramQuery) QueryImpactMetrics() *ImpactMetricQuery {
	query := (&ImpactMetricClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(program.Table, program.FieldID, selector),
			sqlgraph.To(impactmetric.Table, impactmetric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, program.ImpactMetricsTable, program.ImpactMetricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Program entity from the query.
// Returns a *NotFoundError when no Program was found.
func (_q *ProgramQuery) First(ctx context.Context) (*Program, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{program.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *ProgramQuery) FirstX(ctx context.Context) *Program {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Program ID from the query.
// Returns a *NotFoundError when no Program ID was found.
func (_q *ProgramQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{program.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *ProgramQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Program entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Program entity is found.
// Returns a *NotFoundError when no Program entities are found.
func (_q *ProgramQuery) Only(ctx context.Context) (*Program, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{program.Label}
	default:
		return nil, &NotSingularError{program.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *ProgramQuery) OnlyX(ctx context.Context) *Program {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Program ID in the query.
// Returns a *NotSingularError when more than one Program ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *ProgramQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{program.Label}
	default:
		err = &NotSingularError{program.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *ProgramQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Programs.
func (_q *ProgramQuery) All(ctx context.Context) ([]*Program, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Program, *ProgramQuery]()
	return withInterceptors[[]*Program](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *ProgramQuery) AllX(ctx context.Context) []*Program {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Program IDs.
func (_q *ProgramQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(program.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *ProgramQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *ProgramQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*ProgramQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *ProgramQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *ProgramQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *ProgramQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProgramQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *ProgramQuery) Clone() *ProgramQuery {
	if _q == nil {
		return nil
	}
	return &ProgramQuery{
		config:                     _q.config,
		ctx:                        _q.ctx.Clone(),
		order:                      append([]program.OrderOption{}, _q.order...),
		inters:                     append([]Interceptor{}, _q.inters...),
		predicates:                 append([]predicate.Program{}, _q.predicates...),
		withCategory:               _q.withCategory.Clone(),
		withEnrolments:             _q.withEnrolments.Clone(),
		withParticipants:           _q.withParticipants.Clone(),
		withCreatedBy:              _q.withCreatedBy.Clone(),
		withUpdatedBy:              _q.withUpdatedBy.Clone(),
		withProgramCardItems:       _q.withProgramCardItems.Clone(),
		withEvents:                 _q.withEvents.Clone(),
		withSuccessStories:         _q.withSuccessStories.Clone(),
		withVolunteerOpportunities: _q.withVolunteerOpportunities.Clone(),
		withFundraisingCampaigns:   _q.withFundraisingCampaigns.Clone(),
		withDonations:              _q.withDonations.Clone(),
		withGrants:                 _q.withGrants.Clone(),
		withSiteVisits:             _q.withSiteVisits.Clone(),
		withImpactMetrics:          _q.withImpactMetrics.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithCategory(opts ...func(*ProgramCategoryQuery)) *ProgramQuery {
	query := (&ProgramCategoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCategory = query
	return _q
}

// WithEnrolments tells the query-builder to eager-load the nodes that are connected to
// the "enrolments" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithEnrolments(opts ...func(*ProgramEnrolmentQuery)) *ProgramQuery {
	query := (&ProgramEnrolmentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEnrolments = query
	return _q
}

// WithParticipants tells the query-builder to eager-load the nodes that are connected to
// the "participants" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithParticipants(opts ...func(*ProgramParticipantQuery)) *ProgramQuery {
	query := (&ProgramParticipantClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withParticipants = query
	return _q
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithCreatedBy(opts ...func(*UserQuery)) *ProgramQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCreatedBy = query
	return _q
}

// WithUpdatedBy tells the query-builder to eager-load the nodes that are connected to
// the "updated_by" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithUpdatedBy(opts ...func(*UserQuery)) *ProgramQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUpdatedBy = query
	return _q
}

// WithProgramCardItems tells the query-builder to eager-load the nodes that are connected to
// the "program_card_items" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithProgramCardItems(opts ...func(*ProgramCardItemQuery)) *ProgramQuery {
	query := (&ProgramCardItemClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramCardItems = query
	return _q
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithEvents(opts ...func(*EventQuery)) *ProgramQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvents = query
	return _q
}

// WithSuccessStories tells the query-builder to eager-load the nodes that are connected to
// the "success_stories" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithSuccessStories(opts ...func(*SuccessStoryQuery)) *ProgramQuery {
	query := (&SuccessStoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSuccessStories = query
	return _q
}

// WithVolunteerOpportunities tells the query-builder to eager-load the nodes that are connected to
// the "volunteer_opportunities" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithVolunteerOpportunities(opts ...func(*VolunteerOpportunityQuery)) *ProgramQuery {
	query := (&VolunteerOpportunityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withVolunteerOpportunities = query
	return _q
}

// WithFundraisingCampaigns tells the query-builder to eager-load the nodes that are connected to
// the "fundraising_campaigns" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithFundraisingCampaigns(opts ...func(*FundraisingCampaignQuery)) *ProgramQuery {
	query := (&FundraisingCampaignClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFundraisingCampaigns = query
	return _q
}

// WithDonations tells the query-builder to eager-load the nodes that are connected to
// the "donations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithDonations(opts ...func(*DonationQuery)) *ProgramQuery {
	query := (&DonationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDonations = query
	return _q
}

// WithGrants tells the query-builder to eager-load the nodes that are connected to
// the "grants" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithGrants(opts ...func(*GrantQuery)) *ProgramQuery {
	query := (&GrantClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGrants = query
	return _q
}

// WithSiteVisits tells the query-builder to eager-load the nodes that are connected to
// the "site_visits" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithSiteVisits(opts ...func(*SiteVisitQuery)) *ProgramQuery {
	query := (&SiteVisitClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSiteVisits = query
	return _q
}

// WithImpactMetrics tells the query-builder to eager-load the nodes that are connected to
// the "impact_metrics" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProgramQuery) WithImpactMetrics(opts ...func(*ImpactMetricQuery)) *ProgramQuery {
	query := (&ImpactMetricClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withImpactMetrics = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Program.Query().
//		GroupBy(program.FieldSlug).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *ProgramQuery) GroupBy(field string, fields ...string) *ProgramGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProgramGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = program.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Slug string `json:"slug,omitempty"`
//	}
//
//	client.Program.Query().
//		Select(program.FieldSlug).
//		Scan(ctx, &v)
func (_q *ProgramQuery) Select(fields ...string) *ProgramSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &ProgramSelect{ProgramQuery: _q}
	sbuild.label = program.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProgramSelect configured with the given aggregations.
func (_q *ProgramQuery) Aggregate(fns ...AggregateFunc) *ProgramSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *ProgramQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !program.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *ProgramQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Program, error) {
	var (
		nodes       = []*Program{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [14]bool{
			_q.withCategory != nil,
			_q.withEnrolments != nil,
			_q.withParticipants != nil,
			_q.withCreatedBy != nil,
			_q.withUpdatedBy != nil,
			_q.withProgramCardItems != nil,
			_q.withEvents != nil,
			_q.withSuccessStories != nil,
			_q.withVolunteerOpportunities != nil,
			_q.withFundraisingCampaigns != nil,
			_q.withDonations != nil,
			_q.withGrants != nil,
			_q.withSiteVisits != nil,
			_q.withImpactMetrics != nil,
		}
	)
	if _q.withCategory != nil || _q.withCreatedBy != nil || _q.withUpdatedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, program.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Program).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Program{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withCategory; query != nil {
		if err := _q.loadCategory(ctx, query, nodes, nil,
			func(n *Program, e *ProgramCategory) { n.Edges.Category = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEnrolments; query != nil {
		if err := _q.loadEnrolments(ctx, query, nodes,
			func(n *Program) { n.Edges.Enrolments = []*ProgramEnrolment{} },
			func(n *Program, e *ProgramEnrolment) { n.Edges.Enrolments = append(n.Edges.Enrolments, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withParticipants; query != nil {
		if err := _q.loadParticipants(ctx, query, nodes,
			func(n *Program) { n.Edges.Participants = []*ProgramParticipant{} },
			func(n *Program, e *ProgramParticipant) { n.Edges.Participants = append(n.Edges.Participants, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCreatedBy; query != nil {
		if err := _q.loadCreatedBy(ctx, query, nodes, nil,
			func(n *Program, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withUpdatedBy; query != nil {
		if err := _q.loadUpdatedBy(ctx, query, nodes, nil,
			func(n *Program, e *User) { n.Edges.UpdatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramCardItems; query != nil {
		if err := _q.loadProgramCardItems(ctx, query, nodes,
			func(n *Program) { n.Edges.ProgramCardItems = []*ProgramCardItem{} },
			func(n *Program, e *ProgramCardItem) { n.Edges.ProgramCardItems = append(n.Edges.ProgramCardItems, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvents; query != nil {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *Program) { n.Edges.Events = []*Event{} },
			func(n *Program, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSuccessStories; query != nil {
		if err := _q.loadSuccessStories(ctx, query, nodes,
			func(n *Program) { n.Edges.SuccessStories = []*SuccessStory{} },
			func(n *Program, e *SuccessStory) { n.Edges.SuccessStories = append(n.Edges.SuccessStories, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withVolunteerOpportunities; query != nil {
		if err := _q.loadVolunteerOpportunities(ctx, query, nodes,
			func(n *Program) { n.Edges.VolunteerOpportunities = []*VolunteerOpportunity{} },
			func(n *Program, e *VolunteerOpportunity) {
				n.Edges.VolunteerOpportunities = append(n.Edges.VolunteerOpportunities, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withFundraisingCampaigns; query != nil {
		if err := _q.loadFundraisingCampaigns(ctx, query, nodes,
			func(n *Program) { n.Edges.FundraisingCampaigns = []*FundraisingCampaign{} },
			func(n *Program, e *FundraisingCampaign) {
				n.Edges.FundraisingCampaigns = append(n.Edges.FundraisingCampaigns, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withDonations; query != nil {
		if err := _q.loadDonations(ctx, query, nodes,
			func(n *Program) { n.Edges.Donations = []*Donation{} },
			func(n *Program, e *Donation) { n.Edges.Donations = append(n.Edges.Donations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGrants; query != nil {
		if err := _q.loadGrants(ctx, query, nodes,
			func(n *Program) { n.Edges.Grants = []*Grant{} },
			func(n *Program, e *Grant) { n.Edges.Grants = append(n.Edges.Grants, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSiteVisits; query != nil {
		if err := _q.loadSiteVisits(ctx, query, nodes,
			func(n *Program) { n.Edges.SiteVisits = []*SiteVisit{} },
			func(n *Program, e *SiteVisit) { n.Edges.SiteVisits = append(n.Edges.SiteVisits, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withImpactMetrics; query != nil {
		if err := _q.loadImpactMetrics(ctx, query, nodes,
			func(n *Program) { n.Edges.ImpactMetrics = []*ImpactMetric{} },
			func(n *Program, e *ImpactMetric) { n.Edges.ImpactMetrics = append(n.Edges.ImpactMetrics, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *ProgramQuery) loadCategory(ctx context.Context, query *ProgramCategoryQuery, nodes []*Program, init func(*Program), assign func(*Program, *ProgramCategory)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Program)
	for i := range nodes {
		if nodes[i].program_category_programs == nil {
			continue
		}
		fk := *nodes[i].program_category_programs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(programcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "program_category_programs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProgramQuery) loadEnrolments(ctx context.Context, query *ProgramEnrolmentQuery, nodes []*Program, init func(*Program), assign func(*Program, *ProgramEnrolment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProgramEnrolment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.EnrolmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_enrolments
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_enrolments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_enrolments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadParticipants(ctx context.Context, query *ProgramParticipantQuery, nodes []*Program, init func(*Program), assign func(*Program, *ProgramParticipant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProgramParticipant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.ParticipantsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_participants
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_participants" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_participants" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*Program, init func(*Program), assign func(*Program, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Program)
	for i := range nodes {
		if nodes[i].user_created_programs == nil {
			continue
		}
		fk := *nodes[i].user_created_programs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_created_programs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProgramQuery) loadUpdatedBy(ctx context.Context, query *UserQuery, nodes []*Program, init func(*Program), assign func(*Program, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Program)
	for i := range nodes {
		if nodes[i].user_updated_programs == nil {
			continue
		}
		fk := *nodes[i].user_updated_programs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_updated_programs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProgramQuery) loadProgramCardItems(ctx context.Context, query *ProgramCardItemQuery, nodes []*Program, init func(*Program), assign func(*Program, *ProgramCardItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProgramCardItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.ProgramCardItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_program_card_items
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_program_card_items" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_program_card_items" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Program, init func(*Program), assign func(*Program, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadSuccessStories(ctx context.Context, query *SuccessStoryQuery, nodes []*Program, init func(*Program), assign func(*Program, *SuccessStory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SuccessStory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.SuccessStoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_success_stories
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_success_stories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_success_stories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadVolunteerOpportunities(ctx context.Context, query *VolunteerOpportunityQuery, nodes []*Program, init func(*Program), assign func(*Program, *VolunteerOpportunity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.VolunteerOpportunity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.VolunteerOpportunitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_volunteer_opportunities
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_volunteer_opportunities" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_volunteer_opportunities" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadFundraisingCampaigns(ctx context.Context, query *FundraisingCampaignQuery, nodes []*Program, init func(*Program), assign func(*Program, *FundraisingCampaign)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FundraisingCampaign(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.FundraisingCampaignsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_fundraising_campaigns
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_fundraising_campaigns" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_fundraising_campaigns" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadDonations(ctx context.Context, query *DonationQuery, nodes []*Program, init func(*Program), assign func(*Program, *Donation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Donation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.DonationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_donations
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_donations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_donations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadGrants(ctx context.Context, query *GrantQuery, nodes []*Program, init func(*Program), assign func(*Program, *Grant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Grant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.GrantsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_grants
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_grants" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_grants" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadSiteVisits(ctx context.Context, query *SiteVisitQuery, nodes []*Program, init func(*Program), assign func(*Program, *SiteVisit)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SiteVisit(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.SiteVisitsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_site_visits
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_site_visits" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_site_visits" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *ProgramQuery) loadImpactMetrics(ctx context.Context, query *ImpactMetricQuery, nodes []*Program, init func(*Program), assign func(*Program, *ImpactMetric)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Program)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ImpactMetric(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(program.ImpactMetricsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.program_impact_metrics
		if fk == nil {
			return fmt.Errorf(`foreign-key "program_impact_metrics" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "program_impact_metrics" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *ProgramQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *ProgramQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, program.FieldID)
		for i := range fields {
			if fields[i] != program.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *ProgramQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(program.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = program.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProgramGroupBy is the group-by builder for Program entities.
type ProgramGroupBy struct {
	selector
	build *ProgramQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *ProgramGroupBy) Aggregate(fns ...AggregateFunc) *ProgramGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *ProgramGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProgramQuery, *ProgramGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *ProgramGroupBy) sqlScan(ctx context.Context, root *ProgramQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProgramSelect is the builder for selecting fields of Program entities.
type ProgramSelect struct {
	*ProgramQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *ProgramSelect) Aggregate(fns ...AggregateFunc) *ProgramSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *ProgramSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProgramQuery, *ProgramSelect](ctx, _s.ProgramQuery, _s, _s.inters, v)
}

func (_s *ProgramSelect) sqlScan(ctx context.Context, root *ProgramQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
