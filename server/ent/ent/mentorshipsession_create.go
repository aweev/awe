// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentorshipSessionCreate is the builder for creating a MentorshipSession entity.
type MentorshipSessionCreate struct {
	config
	mutation *MentorshipSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetScheduledAt sets the "scheduled_at" field.
func (_c *MentorshipSessionCreate) SetScheduledAt(v time.Time) *MentorshipSessionCreate {
	_c.mutation.SetScheduledAt(v)
	return _c
}

// SetDuration sets the "duration" field.
func (_c *MentorshipSessionCreate) SetDuration(v int) *MentorshipSessionCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableDuration(v *int) *MentorshipSessionCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetFormat sets the "format" field.
func (_c *MentorshipSessionCreate) SetFormat(v string) *MentorshipSessionCreate {
	_c.mutation.SetFormat(v)
	return _c
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableFormat(v *string) *MentorshipSessionCreate {
	if v != nil {
		_c.SetFormat(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *MentorshipSessionCreate) SetStatus(v string) *MentorshipSessionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableStatus(v *string) *MentorshipSessionCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetNotes sets the "notes" field.
func (_c *MentorshipSessionCreate) SetNotes(v string) *MentorshipSessionCreate {
	_c.mutation.SetNotes(v)
	return _c
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableNotes(v *string) *MentorshipSessionCreate {
	if v != nil {
		_c.SetNotes(*v)
	}
	return _c
}

// SetActionItems sets the "action_items" field.
func (_c *MentorshipSessionCreate) SetActionItems(v []string) *MentorshipSessionCreate {
	_c.mutation.SetActionItems(v)
	return _c
}

// SetMentorRating sets the "mentor_rating" field.
func (_c *MentorshipSessionCreate) SetMentorRating(v int) *MentorshipSessionCreate {
	_c.mutation.SetMentorRating(v)
	return _c
}

// SetNillableMentorRating sets the "mentor_rating" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableMentorRating(v *int) *MentorshipSessionCreate {
	if v != nil {
		_c.SetMentorRating(*v)
	}
	return _c
}

// SetMenteeRating sets the "mentee_rating" field.
func (_c *MentorshipSessionCreate) SetMenteeRating(v int) *MentorshipSessionCreate {
	_c.mutation.SetMenteeRating(v)
	return _c
}

// SetNillableMenteeRating sets the "mentee_rating" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableMenteeRating(v *int) *MentorshipSessionCreate {
	if v != nil {
		_c.SetMenteeRating(*v)
	}
	return _c
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (_c *MentorshipSessionCreate) SetMentorFeedback(v string) *MentorshipSessionCreate {
	_c.mutation.SetMentorFeedback(v)
	return _c
}

// SetNillableMentorFeedback sets the "mentor_feedback" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableMentorFeedback(v *string) *MentorshipSessionCreate {
	if v != nil {
		_c.SetMentorFeedback(*v)
	}
	return _c
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (_c *MentorshipSessionCreate) SetMenteeFeedback(v string) *MentorshipSessionCreate {
	_c.mutation.SetMenteeFeedback(v)
	return _c
}

// SetNillableMenteeFeedback sets the "mentee_feedback" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableMenteeFeedback(v *string) *MentorshipSessionCreate {
	if v != nil {
		_c.SetMenteeFeedback(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MentorshipSessionCreate) SetCreatedAt(v time.Time) *MentorshipSessionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableCreatedAt(v *time.Time) *MentorshipSessionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MentorshipSessionCreate) SetUpdatedAt(v time.Time) *MentorshipSessionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableUpdatedAt(v *time.Time) *MentorshipSessionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetMentorshipRequestID sets the "mentorship_request" edge to the MentorshipRequest entity by ID.
func (_c *MentorshipSessionCreate) SetMentorshipRequestID(id int) *MentorshipSessionCreate {
	_c.mutation.SetMentorshipRequestID(id)
	return _c
}

// SetMentorshipRequest sets the "mentorship_request" edge to the MentorshipRequest entity.
func (_c *MentorshipSessionCreate) SetMentorshipRequest(v *MentorshipRequest) *MentorshipSessionCreate {
	return _c.SetMentorshipRequestID(v.ID)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_c *MentorshipSessionCreate) SetAgendaID(id int) *MentorshipSessionCreate {
	_c.mutation.SetAgendaID(id)
	return _c
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_c *MentorshipSessionCreate) SetNillableAgendaID(id *int) *MentorshipSessionCreate {
	if id != nil {
		_c = _c.SetAgendaID(*id)
	}
	return _c
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_c *MentorshipSessionCreate) SetAgenda(v *Agenda) *MentorshipSessionCreate {
	return _c.SetAgendaID(v.ID)
}

// Mutation returns the MentorshipSessionMutation object of the builder.
func (_c *MentorshipSessionCreate) Mutation() *MentorshipSessionMutation {
	return _c.mutation
}

// Save creates the MentorshipSession in the database.
func (_c *MentorshipSessionCreate) Save(ctx context.Context) (*MentorshipSession, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MentorshipSessionCreate) SaveX(ctx context.Context) *MentorshipSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MentorshipSessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MentorshipSessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MentorshipSessionCreate) defaults() {
	if _, ok := _c.mutation.Duration(); !ok {
		v := mentorshipsession.DefaultDuration
		_c.mutation.SetDuration(v)
	}
	if _, ok := _c.mutation.Format(); !ok {
		v := mentorshipsession.DefaultFormat
		_c.mutation.SetFormat(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := mentorshipsession.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := mentorshipsession.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := mentorshipsession.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MentorshipSessionCreate) check() error {
	if _, ok := _c.mutation.ScheduledAt(); !ok {
		return &ValidationError{Name: "scheduled_at", err: errors.New(`ent: missing required field "MentorshipSession.scheduled_at"`)}
	}
	if _, ok := _c.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "MentorshipSession.duration"`)}
	}
	if _, ok := _c.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "MentorshipSession.format"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MentorshipSession.status"`)}
	}
	if v, ok := _c.mutation.MentorRating(); ok {
		if err := mentorshipsession.MentorRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentor_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentor_rating": %w`, err)}
		}
	}
	if v, ok := _c.mutation.MenteeRating(); ok {
		if err := mentorshipsession.MenteeRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentee_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentee_rating": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MentorshipSession.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MentorshipSession.updated_at"`)}
	}
	if len(_c.mutation.MentorshipRequestIDs()) == 0 {
		return &ValidationError{Name: "mentorship_request", err: errors.New(`ent: missing required edge "MentorshipSession.mentorship_request"`)}
	}
	return nil
}

func (_c *MentorshipSessionCreate) sqlSave(ctx context.Context) (*MentorshipSession, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MentorshipSessionCreate) createSpec() (*MentorshipSession, *sqlgraph.CreateSpec) {
	var (
		_node = &MentorshipSession{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(mentorshipsession.Table, sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.ScheduledAt(); ok {
		_spec.SetField(mentorshipsession.FieldScheduledAt, field.TypeTime, value)
		_node.ScheduledAt = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(mentorshipsession.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.Format(); ok {
		_spec.SetField(mentorshipsession.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(mentorshipsession.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Notes(); ok {
		_spec.SetField(mentorshipsession.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := _c.mutation.ActionItems(); ok {
		_spec.SetField(mentorshipsession.FieldActionItems, field.TypeJSON, value)
		_node.ActionItems = value
	}
	if value, ok := _c.mutation.MentorRating(); ok {
		_spec.SetField(mentorshipsession.FieldMentorRating, field.TypeInt, value)
		_node.MentorRating = value
	}
	if value, ok := _c.mutation.MenteeRating(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeRating, field.TypeInt, value)
		_node.MenteeRating = value
	}
	if value, ok := _c.mutation.MentorFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMentorFeedback, field.TypeString, value)
		_node.MentorFeedback = value
	}
	if value, ok := _c.mutation.MenteeFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeFeedback, field.TypeString, value)
		_node.MenteeFeedback = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(mentorshipsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshipsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.MentorshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mentorship_request_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MentorshipSession.Create().
//		SetScheduledAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorshipSessionUpsert) {
//			SetScheduledAt(v+v).
//		}).
//		Exec(ctx)
func (_c *MentorshipSessionCreate) OnConflict(opts ...sql.ConflictOption) *MentorshipSessionUpsertOne {
	_c.conflict = opts
	return &MentorshipSessionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MentorshipSessionCreate) OnConflictColumns(columns ...string) *MentorshipSessionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MentorshipSessionUpsertOne{
		create: _c,
	}
}

type (
	// MentorshipSessionUpsertOne is the builder for "upsert"-ing
	//  one MentorshipSession node.
	MentorshipSessionUpsertOne struct {
		create *MentorshipSessionCreate
	}

	// MentorshipSessionUpsert is the "OnConflict" setter.
	MentorshipSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetScheduledAt sets the "scheduled_at" field.
func (u *MentorshipSessionUpsert) SetScheduledAt(v time.Time) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldScheduledAt, v)
	return u
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateScheduledAt() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldScheduledAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *MentorshipSessionUpsert) SetDuration(v int) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateDuration() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *MentorshipSessionUpsert) AddDuration(v int) *MentorshipSessionUpsert {
	u.Add(mentorshipsession.FieldDuration, v)
	return u
}

// SetFormat sets the "format" field.
func (u *MentorshipSessionUpsert) SetFormat(v string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateFormat() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldFormat)
	return u
}

// SetStatus sets the "status" field.
func (u *MentorshipSessionUpsert) SetStatus(v string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateStatus() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldStatus)
	return u
}

// SetNotes sets the "notes" field.
func (u *MentorshipSessionUpsert) SetNotes(v string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateNotes() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *MentorshipSessionUpsert) ClearNotes() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldNotes)
	return u
}

// SetActionItems sets the "action_items" field.
func (u *MentorshipSessionUpsert) SetActionItems(v []string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldActionItems, v)
	return u
}

// UpdateActionItems sets the "action_items" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateActionItems() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldActionItems)
	return u
}

// ClearActionItems clears the value of the "action_items" field.
func (u *MentorshipSessionUpsert) ClearActionItems() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldActionItems)
	return u
}

// SetMentorRating sets the "mentor_rating" field.
func (u *MentorshipSessionUpsert) SetMentorRating(v int) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldMentorRating, v)
	return u
}

// UpdateMentorRating sets the "mentor_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateMentorRating() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldMentorRating)
	return u
}

// AddMentorRating adds v to the "mentor_rating" field.
func (u *MentorshipSessionUpsert) AddMentorRating(v int) *MentorshipSessionUpsert {
	u.Add(mentorshipsession.FieldMentorRating, v)
	return u
}

// ClearMentorRating clears the value of the "mentor_rating" field.
func (u *MentorshipSessionUpsert) ClearMentorRating() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldMentorRating)
	return u
}

// SetMenteeRating sets the "mentee_rating" field.
func (u *MentorshipSessionUpsert) SetMenteeRating(v int) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldMenteeRating, v)
	return u
}

// UpdateMenteeRating sets the "mentee_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateMenteeRating() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldMenteeRating)
	return u
}

// AddMenteeRating adds v to the "mentee_rating" field.
func (u *MentorshipSessionUpsert) AddMenteeRating(v int) *MentorshipSessionUpsert {
	u.Add(mentorshipsession.FieldMenteeRating, v)
	return u
}

// ClearMenteeRating clears the value of the "mentee_rating" field.
func (u *MentorshipSessionUpsert) ClearMenteeRating() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldMenteeRating)
	return u
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (u *MentorshipSessionUpsert) SetMentorFeedback(v string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldMentorFeedback, v)
	return u
}

// UpdateMentorFeedback sets the "mentor_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateMentorFeedback() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldMentorFeedback)
	return u
}

// ClearMentorFeedback clears the value of the "mentor_feedback" field.
func (u *MentorshipSessionUpsert) ClearMentorFeedback() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldMentorFeedback)
	return u
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (u *MentorshipSessionUpsert) SetMenteeFeedback(v string) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldMenteeFeedback, v)
	return u
}

// UpdateMenteeFeedback sets the "mentee_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateMenteeFeedback() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldMenteeFeedback)
	return u
}

// ClearMenteeFeedback clears the value of the "mentee_feedback" field.
func (u *MentorshipSessionUpsert) ClearMenteeFeedback() *MentorshipSessionUpsert {
	u.SetNull(mentorshipsession.FieldMenteeFeedback)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipSessionUpsert) SetUpdatedAt(v time.Time) *MentorshipSessionUpsert {
	u.Set(mentorshipsession.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsert) UpdateUpdatedAt() *MentorshipSessionUpsert {
	u.SetExcluded(mentorshipsession.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorshipSessionUpsertOne) UpdateNewValues() *MentorshipSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mentorshipsession.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MentorshipSessionUpsertOne) Ignore() *MentorshipSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorshipSessionUpsertOne) DoNothing() *MentorshipSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorshipSessionCreate.OnConflict
// documentation for more info.
func (u *MentorshipSessionUpsertOne) Update(set func(*MentorshipSessionUpsert)) *MentorshipSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorshipSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetScheduledAt sets the "scheduled_at" field.
func (u *MentorshipSessionUpsertOne) SetScheduledAt(v time.Time) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetScheduledAt(v)
	})
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateScheduledAt() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateScheduledAt()
	})
}

// SetDuration sets the "duration" field.
func (u *MentorshipSessionUpsertOne) SetDuration(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *MentorshipSessionUpsertOne) AddDuration(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateDuration() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateDuration()
	})
}

// SetFormat sets the "format" field.
func (u *MentorshipSessionUpsertOne) SetFormat(v string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateFormat() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateFormat()
	})
}

// SetStatus sets the "status" field.
func (u *MentorshipSessionUpsertOne) SetStatus(v string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateStatus() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateStatus()
	})
}

// SetNotes sets the "notes" field.
func (u *MentorshipSessionUpsertOne) SetNotes(v string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateNotes() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *MentorshipSessionUpsertOne) ClearNotes() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearNotes()
	})
}

// SetActionItems sets the "action_items" field.
func (u *MentorshipSessionUpsertOne) SetActionItems(v []string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetActionItems(v)
	})
}

// UpdateActionItems sets the "action_items" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateActionItems() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateActionItems()
	})
}

// ClearActionItems clears the value of the "action_items" field.
func (u *MentorshipSessionUpsertOne) ClearActionItems() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearActionItems()
	})
}

// SetMentorRating sets the "mentor_rating" field.
func (u *MentorshipSessionUpsertOne) SetMentorRating(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMentorRating(v)
	})
}

// AddMentorRating adds v to the "mentor_rating" field.
func (u *MentorshipSessionUpsertOne) AddMentorRating(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddMentorRating(v)
	})
}

// UpdateMentorRating sets the "mentor_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateMentorRating() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMentorRating()
	})
}

// ClearMentorRating clears the value of the "mentor_rating" field.
func (u *MentorshipSessionUpsertOne) ClearMentorRating() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMentorRating()
	})
}

// SetMenteeRating sets the "mentee_rating" field.
func (u *MentorshipSessionUpsertOne) SetMenteeRating(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMenteeRating(v)
	})
}

// AddMenteeRating adds v to the "mentee_rating" field.
func (u *MentorshipSessionUpsertOne) AddMenteeRating(v int) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddMenteeRating(v)
	})
}

// UpdateMenteeRating sets the "mentee_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateMenteeRating() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMenteeRating()
	})
}

// ClearMenteeRating clears the value of the "mentee_rating" field.
func (u *MentorshipSessionUpsertOne) ClearMenteeRating() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMenteeRating()
	})
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (u *MentorshipSessionUpsertOne) SetMentorFeedback(v string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMentorFeedback(v)
	})
}

// UpdateMentorFeedback sets the "mentor_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateMentorFeedback() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMentorFeedback()
	})
}

// ClearMentorFeedback clears the value of the "mentor_feedback" field.
func (u *MentorshipSessionUpsertOne) ClearMentorFeedback() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMentorFeedback()
	})
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (u *MentorshipSessionUpsertOne) SetMenteeFeedback(v string) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMenteeFeedback(v)
	})
}

// UpdateMenteeFeedback sets the "mentee_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateMenteeFeedback() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMenteeFeedback()
	})
}

// ClearMenteeFeedback clears the value of the "mentee_feedback" field.
func (u *MentorshipSessionUpsertOne) ClearMenteeFeedback() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMenteeFeedback()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipSessionUpsertOne) SetUpdatedAt(v time.Time) *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsertOne) UpdateUpdatedAt() *MentorshipSessionUpsertOne {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MentorshipSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorshipSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorshipSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MentorshipSessionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MentorshipSessionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MentorshipSessionCreateBulk is the builder for creating many MentorshipSession entities in bulk.
type MentorshipSessionCreateBulk struct {
	config
	err      error
	builders []*MentorshipSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the MentorshipSession entities in the database.
func (_c *MentorshipSessionCreateBulk) Save(ctx context.Context) ([]*MentorshipSession, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*MentorshipSession, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MentorshipSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MentorshipSessionCreateBulk) SaveX(ctx context.Context) []*MentorshipSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MentorshipSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MentorshipSessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MentorshipSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorshipSessionUpsert) {
//			SetScheduledAt(v+v).
//		}).
//		Exec(ctx)
func (_c *MentorshipSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MentorshipSessionUpsertBulk {
	_c.conflict = opts
	return &MentorshipSessionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MentorshipSessionCreateBulk) OnConflictColumns(columns ...string) *MentorshipSessionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MentorshipSessionUpsertBulk{
		create: _c,
	}
}

// MentorshipSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of MentorshipSession nodes.
type MentorshipSessionUpsertBulk struct {
	create *MentorshipSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorshipSessionUpsertBulk) UpdateNewValues() *MentorshipSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mentorshipsession.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MentorshipSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MentorshipSessionUpsertBulk) Ignore() *MentorshipSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorshipSessionUpsertBulk) DoNothing() *MentorshipSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorshipSessionCreateBulk.OnConflict
// documentation for more info.
func (u *MentorshipSessionUpsertBulk) Update(set func(*MentorshipSessionUpsert)) *MentorshipSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorshipSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetScheduledAt sets the "scheduled_at" field.
func (u *MentorshipSessionUpsertBulk) SetScheduledAt(v time.Time) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetScheduledAt(v)
	})
}

// UpdateScheduledAt sets the "scheduled_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateScheduledAt() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateScheduledAt()
	})
}

// SetDuration sets the "duration" field.
func (u *MentorshipSessionUpsertBulk) SetDuration(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *MentorshipSessionUpsertBulk) AddDuration(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateDuration() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateDuration()
	})
}

// SetFormat sets the "format" field.
func (u *MentorshipSessionUpsertBulk) SetFormat(v string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateFormat() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateFormat()
	})
}

// SetStatus sets the "status" field.
func (u *MentorshipSessionUpsertBulk) SetStatus(v string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateStatus() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateStatus()
	})
}

// SetNotes sets the "notes" field.
func (u *MentorshipSessionUpsertBulk) SetNotes(v string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateNotes() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *MentorshipSessionUpsertBulk) ClearNotes() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearNotes()
	})
}

// SetActionItems sets the "action_items" field.
func (u *MentorshipSessionUpsertBulk) SetActionItems(v []string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetActionItems(v)
	})
}

// UpdateActionItems sets the "action_items" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateActionItems() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateActionItems()
	})
}

// ClearActionItems clears the value of the "action_items" field.
func (u *MentorshipSessionUpsertBulk) ClearActionItems() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearActionItems()
	})
}

// SetMentorRating sets the "mentor_rating" field.
func (u *MentorshipSessionUpsertBulk) SetMentorRating(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMentorRating(v)
	})
}

// AddMentorRating adds v to the "mentor_rating" field.
func (u *MentorshipSessionUpsertBulk) AddMentorRating(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddMentorRating(v)
	})
}

// UpdateMentorRating sets the "mentor_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateMentorRating() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMentorRating()
	})
}

// ClearMentorRating clears the value of the "mentor_rating" field.
func (u *MentorshipSessionUpsertBulk) ClearMentorRating() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMentorRating()
	})
}

// SetMenteeRating sets the "mentee_rating" field.
func (u *MentorshipSessionUpsertBulk) SetMenteeRating(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMenteeRating(v)
	})
}

// AddMenteeRating adds v to the "mentee_rating" field.
func (u *MentorshipSessionUpsertBulk) AddMenteeRating(v int) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.AddMenteeRating(v)
	})
}

// UpdateMenteeRating sets the "mentee_rating" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateMenteeRating() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMenteeRating()
	})
}

// ClearMenteeRating clears the value of the "mentee_rating" field.
func (u *MentorshipSessionUpsertBulk) ClearMenteeRating() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMenteeRating()
	})
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (u *MentorshipSessionUpsertBulk) SetMentorFeedback(v string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMentorFeedback(v)
	})
}

// UpdateMentorFeedback sets the "mentor_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateMentorFeedback() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMentorFeedback()
	})
}

// ClearMentorFeedback clears the value of the "mentor_feedback" field.
func (u *MentorshipSessionUpsertBulk) ClearMentorFeedback() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMentorFeedback()
	})
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (u *MentorshipSessionUpsertBulk) SetMenteeFeedback(v string) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetMenteeFeedback(v)
	})
}

// UpdateMenteeFeedback sets the "mentee_feedback" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateMenteeFeedback() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateMenteeFeedback()
	})
}

// ClearMenteeFeedback clears the value of the "mentee_feedback" field.
func (u *MentorshipSessionUpsertBulk) ClearMenteeFeedback() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.ClearMenteeFeedback()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipSessionUpsertBulk) SetUpdatedAt(v time.Time) *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipSessionUpsertBulk) UpdateUpdatedAt() *MentorshipSessionUpsertBulk {
	return u.Update(func(s *MentorshipSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MentorshipSessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MentorshipSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorshipSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorshipSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
