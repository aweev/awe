// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldContactEmail holds the string denoting the contact_email field in the database.
	FieldContactEmail = "contact_email"
	// FieldContactPhone holds the string denoting the contact_phone field in the database.
	FieldContactPhone = "contact_phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePartnerships holds the string denoting the partnerships edge name in mutations.
	EdgePartnerships = "partnerships"
	// EdgeGrants holds the string denoting the grants edge name in mutations.
	EdgeGrants = "grants"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// PartnershipsTable is the table that holds the partnerships relation/edge.
	PartnershipsTable = "partnerships"
	// PartnershipsInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipsInverseTable = "partnerships"
	// PartnershipsColumn is the table column denoting the partnerships relation/edge.
	PartnershipsColumn = "organization_partnerships"
	// GrantsTable is the table that holds the grants relation/edge.
	GrantsTable = "grants"
	// GrantsInverseTable is the table name for the Grant entity.
	// It exists in this package in order to avoid circular dependency with the "grant" package.
	GrantsInverseTable = "grants"
	// GrantsColumn is the table column denoting the grants relation/edge.
	GrantsColumn = "organization_grants"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "organizations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_organization"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldWebsite,
	FieldLogoURL,
	FieldDescription,
	FieldIndustry,
	FieldSize,
	FieldContactEmail,
	FieldContactPhone,
	FieldAddress,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "organizations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_organization",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByContactEmail orders the results by the contact_email field.
func ByContactEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactEmail, opts...).ToFunc()
}

// ByContactPhone orders the results by the contact_phone field.
func ByContactPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPhone, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartnershipsCount orders the results by partnerships count.
func ByPartnershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnershipsStep(), opts...)
	}
}

// ByPartnerships orders the results by partnerships terms.
func ByPartnerships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGrantsCount orders the results by grants count.
func ByGrantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGrantsStep(), opts...)
	}
}

// ByGrants orders the results by grants terms.
func ByGrants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newPartnershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PartnershipsTable, PartnershipsColumn),
	)
}
func newGrantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GrantsTable, GrantsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
