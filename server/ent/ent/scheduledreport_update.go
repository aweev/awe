// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ScheduledReportUpdate is the builder for updating ScheduledReport entities.
type ScheduledReportUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduledReportMutation
}

// Where appends a list predicates to the ScheduledReportUpdate builder.
func (_u *ScheduledReportUpdate) Where(ps ...predicate.ScheduledReport) *ScheduledReportUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFrequency sets the "frequency" field.
func (_u *ScheduledReportUpdate) SetFrequency(v string) *ScheduledReportUpdate {
	_u.mutation.SetFrequency(v)
	return _u
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableFrequency(v *string) *ScheduledReportUpdate {
	if v != nil {
		_u.SetFrequency(*v)
	}
	return _u
}

// SetDayOfWeek sets the "day_of_week" field.
func (_u *ScheduledReportUpdate) SetDayOfWeek(v int) *ScheduledReportUpdate {
	_u.mutation.ResetDayOfWeek()
	_u.mutation.SetDayOfWeek(v)
	return _u
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableDayOfWeek(v *int) *ScheduledReportUpdate {
	if v != nil {
		_u.SetDayOfWeek(*v)
	}
	return _u
}

// AddDayOfWeek adds value to the "day_of_week" field.
func (_u *ScheduledReportUpdate) AddDayOfWeek(v int) *ScheduledReportUpdate {
	_u.mutation.AddDayOfWeek(v)
	return _u
}

// ClearDayOfWeek clears the value of the "day_of_week" field.
func (_u *ScheduledReportUpdate) ClearDayOfWeek() *ScheduledReportUpdate {
	_u.mutation.ClearDayOfWeek()
	return _u
}

// SetDayOfMonth sets the "day_of_month" field.
func (_u *ScheduledReportUpdate) SetDayOfMonth(v int) *ScheduledReportUpdate {
	_u.mutation.ResetDayOfMonth()
	_u.mutation.SetDayOfMonth(v)
	return _u
}

// SetNillableDayOfMonth sets the "day_of_month" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableDayOfMonth(v *int) *ScheduledReportUpdate {
	if v != nil {
		_u.SetDayOfMonth(*v)
	}
	return _u
}

// AddDayOfMonth adds value to the "day_of_month" field.
func (_u *ScheduledReportUpdate) AddDayOfMonth(v int) *ScheduledReportUpdate {
	_u.mutation.AddDayOfMonth(v)
	return _u
}

// ClearDayOfMonth clears the value of the "day_of_month" field.
func (_u *ScheduledReportUpdate) ClearDayOfMonth() *ScheduledReportUpdate {
	_u.mutation.ClearDayOfMonth()
	return _u
}

// SetTime sets the "time" field.
func (_u *ScheduledReportUpdate) SetTime(v string) *ScheduledReportUpdate {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableTime(v *string) *ScheduledReportUpdate {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *ScheduledReportUpdate) ClearTime() *ScheduledReportUpdate {
	_u.mutation.ClearTime()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *ScheduledReportUpdate) SetTimezone(v string) *ScheduledReportUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableTimezone(v *string) *ScheduledReportUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetRecipients sets the "recipients" field.
func (_u *ScheduledReportUpdate) SetRecipients(v []map[string]interface{}) *ScheduledReportUpdate {
	_u.mutation.SetRecipients(v)
	return _u
}

// AppendRecipients appends value to the "recipients" field.
func (_u *ScheduledReportUpdate) AppendRecipients(v []map[string]interface{}) *ScheduledReportUpdate {
	_u.mutation.AppendRecipients(v)
	return _u
}

// SetFormat sets the "format" field.
func (_u *ScheduledReportUpdate) SetFormat(v scheduledreport.Format) *ScheduledReportUpdate {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableFormat(v *scheduledreport.Format) *ScheduledReportUpdate {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *ScheduledReportUpdate) SetParameters(v map[string]interface{}) *ScheduledReportUpdate {
	_u.mutation.SetParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *ScheduledReportUpdate) ClearParameters() *ScheduledReportUpdate {
	_u.mutation.ClearParameters()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *ScheduledReportUpdate) SetIsActive(v bool) *ScheduledReportUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableIsActive(v *bool) *ScheduledReportUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastRunAt sets the "last_run_at" field.
func (_u *ScheduledReportUpdate) SetLastRunAt(v time.Time) *ScheduledReportUpdate {
	_u.mutation.SetLastRunAt(v)
	return _u
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableLastRunAt(v *time.Time) *ScheduledReportUpdate {
	if v != nil {
		_u.SetLastRunAt(*v)
	}
	return _u
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (_u *ScheduledReportUpdate) ClearLastRunAt() *ScheduledReportUpdate {
	_u.mutation.ClearLastRunAt()
	return _u
}

// SetNextRunAt sets the "next_run_at" field.
func (_u *ScheduledReportUpdate) SetNextRunAt(v time.Time) *ScheduledReportUpdate {
	_u.mutation.SetNextRunAt(v)
	return _u
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (_u *ScheduledReportUpdate) SetNillableNextRunAt(v *time.Time) *ScheduledReportUpdate {
	if v != nil {
		_u.SetNextRunAt(*v)
	}
	return _u
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (_u *ScheduledReportUpdate) ClearNextRunAt() *ScheduledReportUpdate {
	_u.mutation.ClearNextRunAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScheduledReportUpdate) SetUpdatedAt(v time.Time) *ScheduledReportUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *ScheduledReportUpdate) SetReportDefinitionID(id int) *ScheduledReportUpdate {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *ScheduledReportUpdate) SetReportDefinition(v *ReportDefinition) *ScheduledReportUpdate {
	return _u.SetReportDefinitionID(v.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *ScheduledReportUpdate) SetCreatorID(id int) *ScheduledReportUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ScheduledReportUpdate) SetCreator(v *User) *ScheduledReportUpdate {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the ScheduledReportMutation object of the builder.
func (_u *ScheduledReportUpdate) Mutation() *ScheduledReportMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *ScheduledReportUpdate) ClearReportDefinition() *ScheduledReportUpdate {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ScheduledReportUpdate) ClearCreator() *ScheduledReportUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ScheduledReportUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScheduledReportUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ScheduledReportUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScheduledReportUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScheduledReportUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := scheduledreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScheduledReportUpdate) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := scheduledreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ScheduledReport.format": %w`, err)}
		}
	}
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledReport.report_definition"`)
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledReport.creator"`)
	}
	return nil
}

func (_u *ScheduledReportUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledreport.Table, scheduledreport.Columns, sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Frequency(); ok {
		_spec.SetField(scheduledreport.FieldFrequency, field.TypeString, value)
	}
	if value, ok := _u.mutation.DayOfWeek(); ok {
		_spec.SetField(scheduledreport.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDayOfWeek(); ok {
		_spec.AddField(scheduledreport.FieldDayOfWeek, field.TypeInt, value)
	}
	if _u.mutation.DayOfWeekCleared() {
		_spec.ClearField(scheduledreport.FieldDayOfWeek, field.TypeInt)
	}
	if value, ok := _u.mutation.DayOfMonth(); ok {
		_spec.SetField(scheduledreport.FieldDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDayOfMonth(); ok {
		_spec.AddField(scheduledreport.FieldDayOfMonth, field.TypeInt, value)
	}
	if _u.mutation.DayOfMonthCleared() {
		_spec.ClearField(scheduledreport.FieldDayOfMonth, field.TypeInt)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(scheduledreport.FieldTime, field.TypeString, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(scheduledreport.FieldTime, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(scheduledreport.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Recipients(); ok {
		_spec.SetField(scheduledreport.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledreport.FieldRecipients, value)
		})
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(scheduledreport.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(scheduledreport.FieldParameters, field.TypeJSON, value)
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(scheduledreport.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(scheduledreport.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledreport.FieldLastRunAt, field.TypeTime, value)
	}
	if _u.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledreport.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := _u.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledreport.FieldNextRunAt, field.TypeTime, value)
	}
	if _u.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledreport.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ScheduledReportUpdateOne is the builder for updating a single ScheduledReport entity.
type ScheduledReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduledReportMutation
}

// SetFrequency sets the "frequency" field.
func (_u *ScheduledReportUpdateOne) SetFrequency(v string) *ScheduledReportUpdateOne {
	_u.mutation.SetFrequency(v)
	return _u
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableFrequency(v *string) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetFrequency(*v)
	}
	return _u
}

// SetDayOfWeek sets the "day_of_week" field.
func (_u *ScheduledReportUpdateOne) SetDayOfWeek(v int) *ScheduledReportUpdateOne {
	_u.mutation.ResetDayOfWeek()
	_u.mutation.SetDayOfWeek(v)
	return _u
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableDayOfWeek(v *int) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetDayOfWeek(*v)
	}
	return _u
}

// AddDayOfWeek adds value to the "day_of_week" field.
func (_u *ScheduledReportUpdateOne) AddDayOfWeek(v int) *ScheduledReportUpdateOne {
	_u.mutation.AddDayOfWeek(v)
	return _u
}

// ClearDayOfWeek clears the value of the "day_of_week" field.
func (_u *ScheduledReportUpdateOne) ClearDayOfWeek() *ScheduledReportUpdateOne {
	_u.mutation.ClearDayOfWeek()
	return _u
}

// SetDayOfMonth sets the "day_of_month" field.
func (_u *ScheduledReportUpdateOne) SetDayOfMonth(v int) *ScheduledReportUpdateOne {
	_u.mutation.ResetDayOfMonth()
	_u.mutation.SetDayOfMonth(v)
	return _u
}

// SetNillableDayOfMonth sets the "day_of_month" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableDayOfMonth(v *int) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetDayOfMonth(*v)
	}
	return _u
}

// AddDayOfMonth adds value to the "day_of_month" field.
func (_u *ScheduledReportUpdateOne) AddDayOfMonth(v int) *ScheduledReportUpdateOne {
	_u.mutation.AddDayOfMonth(v)
	return _u
}

// ClearDayOfMonth clears the value of the "day_of_month" field.
func (_u *ScheduledReportUpdateOne) ClearDayOfMonth() *ScheduledReportUpdateOne {
	_u.mutation.ClearDayOfMonth()
	return _u
}

// SetTime sets the "time" field.
func (_u *ScheduledReportUpdateOne) SetTime(v string) *ScheduledReportUpdateOne {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableTime(v *string) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// ClearTime clears the value of the "time" field.
func (_u *ScheduledReportUpdateOne) ClearTime() *ScheduledReportUpdateOne {
	_u.mutation.ClearTime()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *ScheduledReportUpdateOne) SetTimezone(v string) *ScheduledReportUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableTimezone(v *string) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetRecipients sets the "recipients" field.
func (_u *ScheduledReportUpdateOne) SetRecipients(v []map[string]interface{}) *ScheduledReportUpdateOne {
	_u.mutation.SetRecipients(v)
	return _u
}

// AppendRecipients appends value to the "recipients" field.
func (_u *ScheduledReportUpdateOne) AppendRecipients(v []map[string]interface{}) *ScheduledReportUpdateOne {
	_u.mutation.AppendRecipients(v)
	return _u
}

// SetFormat sets the "format" field.
func (_u *ScheduledReportUpdateOne) SetFormat(v scheduledreport.Format) *ScheduledReportUpdateOne {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableFormat(v *scheduledreport.Format) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *ScheduledReportUpdateOne) SetParameters(v map[string]interface{}) *ScheduledReportUpdateOne {
	_u.mutation.SetParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *ScheduledReportUpdateOne) ClearParameters() *ScheduledReportUpdateOne {
	_u.mutation.ClearParameters()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *ScheduledReportUpdateOne) SetIsActive(v bool) *ScheduledReportUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableIsActive(v *bool) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetLastRunAt sets the "last_run_at" field.
func (_u *ScheduledReportUpdateOne) SetLastRunAt(v time.Time) *ScheduledReportUpdateOne {
	_u.mutation.SetLastRunAt(v)
	return _u
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableLastRunAt(v *time.Time) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetLastRunAt(*v)
	}
	return _u
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (_u *ScheduledReportUpdateOne) ClearLastRunAt() *ScheduledReportUpdateOne {
	_u.mutation.ClearLastRunAt()
	return _u
}

// SetNextRunAt sets the "next_run_at" field.
func (_u *ScheduledReportUpdateOne) SetNextRunAt(v time.Time) *ScheduledReportUpdateOne {
	_u.mutation.SetNextRunAt(v)
	return _u
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (_u *ScheduledReportUpdateOne) SetNillableNextRunAt(v *time.Time) *ScheduledReportUpdateOne {
	if v != nil {
		_u.SetNextRunAt(*v)
	}
	return _u
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (_u *ScheduledReportUpdateOne) ClearNextRunAt() *ScheduledReportUpdateOne {
	_u.mutation.ClearNextRunAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScheduledReportUpdateOne) SetUpdatedAt(v time.Time) *ScheduledReportUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *ScheduledReportUpdateOne) SetReportDefinitionID(id int) *ScheduledReportUpdateOne {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *ScheduledReportUpdateOne) SetReportDefinition(v *ReportDefinition) *ScheduledReportUpdateOne {
	return _u.SetReportDefinitionID(v.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *ScheduledReportUpdateOne) SetCreatorID(id int) *ScheduledReportUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ScheduledReportUpdateOne) SetCreator(v *User) *ScheduledReportUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// Mutation returns the ScheduledReportMutation object of the builder.
func (_u *ScheduledReportUpdateOne) Mutation() *ScheduledReportMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *ScheduledReportUpdateOne) ClearReportDefinition() *ScheduledReportUpdateOne {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ScheduledReportUpdateOne) ClearCreator() *ScheduledReportUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// Where appends a list predicates to the ScheduledReportUpdate builder.
func (_u *ScheduledReportUpdateOne) Where(ps ...predicate.ScheduledReport) *ScheduledReportUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ScheduledReportUpdateOne) Select(field string, fields ...string) *ScheduledReportUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ScheduledReport entity.
func (_u *ScheduledReportUpdateOne) Save(ctx context.Context) (*ScheduledReport, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScheduledReportUpdateOne) SaveX(ctx context.Context) *ScheduledReport {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ScheduledReportUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScheduledReportUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScheduledReportUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := scheduledreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScheduledReportUpdateOne) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := scheduledreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ScheduledReport.format": %w`, err)}
		}
	}
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledReport.report_definition"`)
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScheduledReport.creator"`)
	}
	return nil
}

func (_u *ScheduledReportUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledReport, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledreport.Table, scheduledreport.Columns, sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScheduledReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledreport.FieldID)
		for _, f := range fields {
			if !scheduledreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scheduledreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Frequency(); ok {
		_spec.SetField(scheduledreport.FieldFrequency, field.TypeString, value)
	}
	if value, ok := _u.mutation.DayOfWeek(); ok {
		_spec.SetField(scheduledreport.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDayOfWeek(); ok {
		_spec.AddField(scheduledreport.FieldDayOfWeek, field.TypeInt, value)
	}
	if _u.mutation.DayOfWeekCleared() {
		_spec.ClearField(scheduledreport.FieldDayOfWeek, field.TypeInt)
	}
	if value, ok := _u.mutation.DayOfMonth(); ok {
		_spec.SetField(scheduledreport.FieldDayOfMonth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDayOfMonth(); ok {
		_spec.AddField(scheduledreport.FieldDayOfMonth, field.TypeInt, value)
	}
	if _u.mutation.DayOfMonthCleared() {
		_spec.ClearField(scheduledreport.FieldDayOfMonth, field.TypeInt)
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(scheduledreport.FieldTime, field.TypeString, value)
	}
	if _u.mutation.TimeCleared() {
		_spec.ClearField(scheduledreport.FieldTime, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(scheduledreport.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.Recipients(); ok {
		_spec.SetField(scheduledreport.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledreport.FieldRecipients, value)
		})
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(scheduledreport.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(scheduledreport.FieldParameters, field.TypeJSON, value)
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(scheduledreport.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(scheduledreport.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledreport.FieldLastRunAt, field.TypeTime, value)
	}
	if _u.mutation.LastRunAtCleared() {
		_spec.ClearField(scheduledreport.FieldLastRunAt, field.TypeTime)
	}
	if value, ok := _u.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledreport.FieldNextRunAt, field.TypeTime, value)
	}
	if _u.mutation.NextRunAtCleared() {
		_spec.ClearField(scheduledreport.FieldNextRunAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduledReport{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
