// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/contentblock"
	"awe/ent/ent/page"
	"awe/ent/ent/seoconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *PageCreate) SetSlug(v string) *PageCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *PageCreate) SetTitle(v map[string]string) *PageCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *PageCreate) SetStatus(v page.Status) *PageCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *PageCreate) SetNillableStatus(v *page.Status) *PageCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPublishedAt sets the "published_at" field.
func (_c *PageCreate) SetPublishedAt(v time.Time) *PageCreate {
	_c.mutation.SetPublishedAt(v)
	return _c
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_c *PageCreate) SetNillablePublishedAt(v *time.Time) *PageCreate {
	if v != nil {
		_c.SetPublishedAt(*v)
	}
	return _c
}

// SetLayout sets the "layout" field.
func (_c *PageCreate) SetLayout(v string) *PageCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *PageCreate) SetNillableLayout(v *string) *PageCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetIsHomepage sets the "is_homepage" field.
func (_c *PageCreate) SetIsHomepage(v bool) *PageCreate {
	_c.mutation.SetIsHomepage(v)
	return _c
}

// SetNillableIsHomepage sets the "is_homepage" field if the given value is not nil.
func (_c *PageCreate) SetNillableIsHomepage(v *bool) *PageCreate {
	if v != nil {
		_c.SetIsHomepage(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PageCreate) SetCreatedAt(v time.Time) *PageCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PageCreate) SetNillableCreatedAt(v *time.Time) *PageCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PageCreate) SetUpdatedAt(v time.Time) *PageCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PageCreate) SetNillableUpdatedAt(v *time.Time) *PageCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddChildPageIDs adds the "child_pages" edge to the Page entity by IDs.
func (_c *PageCreate) AddChildPageIDs(ids ...int) *PageCreate {
	_c.mutation.AddChildPageIDs(ids...)
	return _c
}

// AddChildPages adds the "child_pages" edges to the Page entity.
func (_c *PageCreate) AddChildPages(v ...*Page) *PageCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildPageIDs(ids...)
}

// SetParentPageID sets the "parent_page" edge to the Page entity by ID.
func (_c *PageCreate) SetParentPageID(id int) *PageCreate {
	_c.mutation.SetParentPageID(id)
	return _c
}

// SetNillableParentPageID sets the "parent_page" edge to the Page entity by ID if the given value is not nil.
func (_c *PageCreate) SetNillableParentPageID(id *int) *PageCreate {
	if id != nil {
		_c = _c.SetParentPageID(*id)
	}
	return _c
}

// SetParentPage sets the "parent_page" edge to the Page entity.
func (_c *PageCreate) SetParentPage(v *Page) *PageCreate {
	return _c.SetParentPageID(v.ID)
}

// AddBlockIDs adds the "blocks" edge to the ContentBlock entity by IDs.
func (_c *PageCreate) AddBlockIDs(ids ...int) *PageCreate {
	_c.mutation.AddBlockIDs(ids...)
	return _c
}

// AddBlocks adds the "blocks" edges to the ContentBlock entity.
func (_c *PageCreate) AddBlocks(v ...*ContentBlock) *PageCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockIDs(ids...)
}

// SetSeoID sets the "seo" edge to the SeoConfig entity by ID.
func (_c *PageCreate) SetSeoID(id int) *PageCreate {
	_c.mutation.SetSeoID(id)
	return _c
}

// SetNillableSeoID sets the "seo" edge to the SeoConfig entity by ID if the given value is not nil.
func (_c *PageCreate) SetNillableSeoID(id *int) *PageCreate {
	if id != nil {
		_c = _c.SetSeoID(*id)
	}
	return _c
}

// SetSeo sets the "seo" edge to the SeoConfig entity.
func (_c *PageCreate) SetSeo(v *SeoConfig) *PageCreate {
	return _c.SetSeoID(v.ID)
}

// Mutation returns the PageMutation object of the builder.
func (_c *PageCreate) Mutation() *PageMutation {
	return _c.mutation
}

// Save creates the Page in the database.
func (_c *PageCreate) Save(ctx context.Context) (*Page, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PageCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PageCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PageCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := page.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Layout(); !ok {
		v := page.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.IsHomepage(); !ok {
		v := page.DefaultIsHomepage
		_c.mutation.SetIsHomepage(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := page.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := page.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PageCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Page.slug"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Page.title"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Page.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "Page.layout"`)}
	}
	if _, ok := _c.mutation.IsHomepage(); !ok {
		return &ValidationError{Name: "is_homepage", err: errors.New(`ent: missing required field "Page.is_homepage"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Page.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Page.updated_at"`)}
	}
	return nil
}

func (_c *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(page.Table, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(page.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.PublishedAt(); ok {
		_spec.SetField(page.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(page.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.IsHomepage(); ok {
		_spec.SetField(page.FieldIsHomepage, field.TypeBool, value)
		_node.IsHomepage = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(page.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ChildPagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentPageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.page_parent_page = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SeoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *PageCreate) OnConflict(opts ...sql.ConflictOption) *PageUpsertOne {
	_c.conflict = opts
	return &PageUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PageCreate) OnConflictColumns(columns ...string) *PageUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertOne{
		create: _c,
	}
}

type (
	// PageUpsertOne is the builder for "upsert"-ing
	//  one Page node.
	PageUpsertOne struct {
		create *PageCreate
	}

	// PageUpsert is the "OnConflict" setter.
	PageUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *PageUpsert) SetSlug(v string) *PageUpsert {
	u.Set(page.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsert) UpdateSlug() *PageUpsert {
	u.SetExcluded(page.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *PageUpsert) SetTitle(v map[string]string) *PageUpsert {
	u.Set(page.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsert) UpdateTitle() *PageUpsert {
	u.SetExcluded(page.FieldTitle)
	return u
}

// SetStatus sets the "status" field.
func (u *PageUpsert) SetStatus(v page.Status) *PageUpsert {
	u.Set(page.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsert) UpdateStatus() *PageUpsert {
	u.SetExcluded(page.FieldStatus)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *PageUpsert) SetPublishedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *PageUpsert) UpdatePublishedAt() *PageUpsert {
	u.SetExcluded(page.FieldPublishedAt)
	return u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *PageUpsert) ClearPublishedAt() *PageUpsert {
	u.SetNull(page.FieldPublishedAt)
	return u
}

// SetLayout sets the "layout" field.
func (u *PageUpsert) SetLayout(v string) *PageUpsert {
	u.Set(page.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *PageUpsert) UpdateLayout() *PageUpsert {
	u.SetExcluded(page.FieldLayout)
	return u
}

// SetIsHomepage sets the "is_homepage" field.
func (u *PageUpsert) SetIsHomepage(v bool) *PageUpsert {
	u.Set(page.FieldIsHomepage, v)
	return u
}

// UpdateIsHomepage sets the "is_homepage" field to the value that was provided on create.
func (u *PageUpsert) UpdateIsHomepage() *PageUpsert {
	u.SetExcluded(page.FieldIsHomepage)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsert) SetUpdatedAt(v time.Time) *PageUpsert {
	u.Set(page.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsert) UpdateUpdatedAt() *PageUpsert {
	u.SetExcluded(page.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PageUpsertOne) UpdateNewValues() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(page.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PageUpsertOne) Ignore() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertOne) DoNothing() *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreate.OnConflict
// documentation for more info.
func (u *PageUpsertOne) Update(set func(*PageUpsert)) *PageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *PageUpsertOne) SetSlug(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateSlug() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *PageUpsertOne) SetTitle(v map[string]string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateTitle() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTitle()
	})
}

// SetStatus sets the "status" field.
func (u *PageUpsertOne) SetStatus(v page.Status) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateStatus() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *PageUpsertOne) SetPublishedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdatePublishedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *PageUpsertOne) ClearPublishedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.ClearPublishedAt()
	})
}

// SetLayout sets the "layout" field.
func (u *PageUpsertOne) SetLayout(v string) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateLayout() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateLayout()
	})
}

// SetIsHomepage sets the "is_homepage" field.
func (u *PageUpsertOne) SetIsHomepage(v bool) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetIsHomepage(v)
	})
}

// UpdateIsHomepage sets the "is_homepage" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateIsHomepage() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIsHomepage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertOne) SetUpdatedAt(v time.Time) *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertOne) UpdateUpdatedAt() *PageUpsertOne {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	err      error
	builders []*PageCreate
	conflict []sql.ConflictOption
}

// Save creates the Page entities in the database.
func (_c *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Page, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PageCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Page.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PageUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *PageCreateBulk) OnConflict(opts ...sql.ConflictOption) *PageUpsertBulk {
	_c.conflict = opts
	return &PageUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PageCreateBulk) OnConflictColumns(columns ...string) *PageUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PageUpsertBulk{
		create: _c,
	}
}

// PageUpsertBulk is the builder for "upsert"-ing
// a bulk of Page nodes.
type PageUpsertBulk struct {
	create *PageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PageUpsertBulk) UpdateNewValues() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(page.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Page.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PageUpsertBulk) Ignore() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PageUpsertBulk) DoNothing() *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PageCreateBulk.OnConflict
// documentation for more info.
func (u *PageUpsertBulk) Update(set func(*PageUpsert)) *PageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PageUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *PageUpsertBulk) SetSlug(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateSlug() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *PageUpsertBulk) SetTitle(v map[string]string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateTitle() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateTitle()
	})
}

// SetStatus sets the "status" field.
func (u *PageUpsertBulk) SetStatus(v page.Status) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateStatus() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *PageUpsertBulk) SetPublishedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdatePublishedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *PageUpsertBulk) ClearPublishedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.ClearPublishedAt()
	})
}

// SetLayout sets the "layout" field.
func (u *PageUpsertBulk) SetLayout(v string) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateLayout() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateLayout()
	})
}

// SetIsHomepage sets the "is_homepage" field.
func (u *PageUpsertBulk) SetIsHomepage(v bool) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetIsHomepage(v)
	})
}

// UpdateIsHomepage sets the "is_homepage" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateIsHomepage() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateIsHomepage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PageUpsertBulk) SetUpdatedAt(v time.Time) *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PageUpsertBulk) UpdateUpdatedAt() *PageUpsertBulk {
	return u.Update(func(s *PageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
