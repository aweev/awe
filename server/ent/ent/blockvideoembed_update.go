// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockVideoEmbedUpdate is the builder for updating BlockVideoEmbed entities.
type BlockVideoEmbedUpdate struct {
	config
	hooks    []Hook
	mutation *BlockVideoEmbedMutation
}

// Where appends a list predicates to the BlockVideoEmbedUpdate builder.
func (_u *BlockVideoEmbedUpdate) Where(ps ...predicate.BlockVideoEmbed) *BlockVideoEmbedUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockVideoEmbedUpdate) SetInternalName(v string) *BlockVideoEmbedUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableInternalName(v *string) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockVideoEmbedUpdate) SetBadge(v map[string]string) *BlockVideoEmbedUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockVideoEmbedUpdate) ClearBadge() *BlockVideoEmbedUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockVideoEmbedUpdate) SetTitle(v map[string]string) *BlockVideoEmbedUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockVideoEmbedUpdate) ClearTitle() *BlockVideoEmbedUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockVideoEmbedUpdate) SetDescription(v map[string]string) *BlockVideoEmbedUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockVideoEmbedUpdate) ClearDescription() *BlockVideoEmbedUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *BlockVideoEmbedUpdate) SetVideoURL(v string) *BlockVideoEmbedUpdate {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableVideoURL(v *string) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_u *BlockVideoEmbedUpdate) SetThumbnailURL(v string) *BlockVideoEmbedUpdate {
	_u.mutation.SetThumbnailURL(v)
	return _u
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableThumbnailURL(v *string) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetThumbnailURL(*v)
	}
	return _u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (_u *BlockVideoEmbedUpdate) ClearThumbnailURL() *BlockVideoEmbedUpdate {
	_u.mutation.ClearThumbnailURL()
	return _u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_u *BlockVideoEmbedUpdate) SetAspectRatio(v string) *BlockVideoEmbedUpdate {
	_u.mutation.SetAspectRatio(v)
	return _u
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableAspectRatio(v *string) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetAspectRatio(*v)
	}
	return _u
}

// SetAutoplay sets the "autoplay" field.
func (_u *BlockVideoEmbedUpdate) SetAutoplay(v bool) *BlockVideoEmbedUpdate {
	_u.mutation.SetAutoplay(v)
	return _u
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableAutoplay(v *bool) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetAutoplay(*v)
	}
	return _u
}

// SetShowControls sets the "show_controls" field.
func (_u *BlockVideoEmbedUpdate) SetShowControls(v bool) *BlockVideoEmbedUpdate {
	_u.mutation.SetShowControls(v)
	return _u
}

// SetNillableShowControls sets the "show_controls" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdate) SetNillableShowControls(v *bool) *BlockVideoEmbedUpdate {
	if v != nil {
		_u.SetShowControls(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockVideoEmbedUpdate) SetUpdatedAt(v time.Time) *BlockVideoEmbedUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockVideoEmbedUpdate) SetContentBlockID(id int) *BlockVideoEmbedUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockVideoEmbedUpdate) SetContentBlock(v *ContentBlock) *BlockVideoEmbedUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockVideoEmbedMutation object of the builder.
func (_u *BlockVideoEmbedUpdate) Mutation() *BlockVideoEmbedMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockVideoEmbedUpdate) ClearContentBlock() *BlockVideoEmbedUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockVideoEmbedUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockVideoEmbedUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockVideoEmbedUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockVideoEmbedUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockVideoEmbedUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockvideoembed.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockVideoEmbedUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockVideoEmbed.content_block"`)
	}
	return nil
}

func (_u *BlockVideoEmbedUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockvideoembed.Table, blockvideoembed.Columns, sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockvideoembed.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockvideoembed.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockvideoembed.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockvideoembed.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockvideoembed.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockvideoembed.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockvideoembed.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(blockvideoembed.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ThumbnailURL(); ok {
		_spec.SetField(blockvideoembed.FieldThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.ThumbnailURLCleared() {
		_spec.ClearField(blockvideoembed.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.AspectRatio(); ok {
		_spec.SetField(blockvideoembed.FieldAspectRatio, field.TypeString, value)
	}
	if value, ok := _u.mutation.Autoplay(); ok {
		_spec.SetField(blockvideoembed.FieldAutoplay, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowControls(); ok {
		_spec.SetField(blockvideoembed.FieldShowControls, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockvideoembed.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockvideoembed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockVideoEmbedUpdateOne is the builder for updating a single BlockVideoEmbed entity.
type BlockVideoEmbedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockVideoEmbedMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockVideoEmbedUpdateOne) SetInternalName(v string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableInternalName(v *string) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockVideoEmbedUpdateOne) SetBadge(v map[string]string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockVideoEmbedUpdateOne) ClearBadge() *BlockVideoEmbedUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockVideoEmbedUpdateOne) SetTitle(v map[string]string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockVideoEmbedUpdateOne) ClearTitle() *BlockVideoEmbedUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockVideoEmbedUpdateOne) SetDescription(v map[string]string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockVideoEmbedUpdateOne) ClearDescription() *BlockVideoEmbedUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *BlockVideoEmbedUpdateOne) SetVideoURL(v string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableVideoURL(v *string) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_u *BlockVideoEmbedUpdateOne) SetThumbnailURL(v string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetThumbnailURL(v)
	return _u
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableThumbnailURL(v *string) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetThumbnailURL(*v)
	}
	return _u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (_u *BlockVideoEmbedUpdateOne) ClearThumbnailURL() *BlockVideoEmbedUpdateOne {
	_u.mutation.ClearThumbnailURL()
	return _u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_u *BlockVideoEmbedUpdateOne) SetAspectRatio(v string) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetAspectRatio(v)
	return _u
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableAspectRatio(v *string) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetAspectRatio(*v)
	}
	return _u
}

// SetAutoplay sets the "autoplay" field.
func (_u *BlockVideoEmbedUpdateOne) SetAutoplay(v bool) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetAutoplay(v)
	return _u
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableAutoplay(v *bool) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetAutoplay(*v)
	}
	return _u
}

// SetShowControls sets the "show_controls" field.
func (_u *BlockVideoEmbedUpdateOne) SetShowControls(v bool) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetShowControls(v)
	return _u
}

// SetNillableShowControls sets the "show_controls" field if the given value is not nil.
func (_u *BlockVideoEmbedUpdateOne) SetNillableShowControls(v *bool) *BlockVideoEmbedUpdateOne {
	if v != nil {
		_u.SetShowControls(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockVideoEmbedUpdateOne) SetUpdatedAt(v time.Time) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockVideoEmbedUpdateOne) SetContentBlockID(id int) *BlockVideoEmbedUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockVideoEmbedUpdateOne) SetContentBlock(v *ContentBlock) *BlockVideoEmbedUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockVideoEmbedMutation object of the builder.
func (_u *BlockVideoEmbedUpdateOne) Mutation() *BlockVideoEmbedMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockVideoEmbedUpdateOne) ClearContentBlock() *BlockVideoEmbedUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockVideoEmbedUpdate builder.
func (_u *BlockVideoEmbedUpdateOne) Where(ps ...predicate.BlockVideoEmbed) *BlockVideoEmbedUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockVideoEmbedUpdateOne) Select(field string, fields ...string) *BlockVideoEmbedUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockVideoEmbed entity.
func (_u *BlockVideoEmbedUpdateOne) Save(ctx context.Context) (*BlockVideoEmbed, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockVideoEmbedUpdateOne) SaveX(ctx context.Context) *BlockVideoEmbed {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockVideoEmbedUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockVideoEmbedUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockVideoEmbedUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockvideoembed.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockVideoEmbedUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockVideoEmbed.content_block"`)
	}
	return nil
}

func (_u *BlockVideoEmbedUpdateOne) sqlSave(ctx context.Context) (_node *BlockVideoEmbed, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockvideoembed.Table, blockvideoembed.Columns, sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockVideoEmbed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockvideoembed.FieldID)
		for _, f := range fields {
			if !blockvideoembed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockvideoembed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockvideoembed.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockvideoembed.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockvideoembed.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockvideoembed.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockvideoembed.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockvideoembed.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockvideoembed.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(blockvideoembed.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ThumbnailURL(); ok {
		_spec.SetField(blockvideoembed.FieldThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.ThumbnailURLCleared() {
		_spec.ClearField(blockvideoembed.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.AspectRatio(); ok {
		_spec.SetField(blockvideoembed.FieldAspectRatio, field.TypeString, value)
	}
	if value, ok := _u.mutation.Autoplay(); ok {
		_spec.SetField(blockvideoembed.FieldAutoplay, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowControls(); ok {
		_spec.SetField(blockvideoembed.FieldShowControls, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockvideoembed.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockVideoEmbed{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockvideoembed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
