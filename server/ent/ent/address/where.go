// Code generated by ent, DO NOT EDIT.

package address

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// Street1 applies equality check predicate on the "street1" field. It's identical to Street1EQ.
func Street1(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet1, v))
}

// Street2 applies equality check predicate on the "street2" field. It's identical to Street2EQ.
func Street2(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet2, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPostalCode, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCountry, v))
}

// Street1EQ applies the EQ predicate on the "street1" field.
func Street1EQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet1, v))
}

// Street1NEQ applies the NEQ predicate on the "street1" field.
func Street1NEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreet1, v))
}

// Street1In applies the In predicate on the "street1" field.
func Street1In(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreet1, vs...))
}

// Street1NotIn applies the NotIn predicate on the "street1" field.
func Street1NotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreet1, vs...))
}

// Street1GT applies the GT predicate on the "street1" field.
func Street1GT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreet1, v))
}

// Street1GTE applies the GTE predicate on the "street1" field.
func Street1GTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreet1, v))
}

// Street1LT applies the LT predicate on the "street1" field.
func Street1LT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreet1, v))
}

// Street1LTE applies the LTE predicate on the "street1" field.
func Street1LTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreet1, v))
}

// Street1Contains applies the Contains predicate on the "street1" field.
func Street1Contains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreet1, v))
}

// Street1HasPrefix applies the HasPrefix predicate on the "street1" field.
func Street1HasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreet1, v))
}

// Street1HasSuffix applies the HasSuffix predicate on the "street1" field.
func Street1HasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreet1, v))
}

// Street1EqualFold applies the EqualFold predicate on the "street1" field.
func Street1EqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreet1, v))
}

// Street1ContainsFold applies the ContainsFold predicate on the "street1" field.
func Street1ContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreet1, v))
}

// Street2EQ applies the EQ predicate on the "street2" field.
func Street2EQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreet2, v))
}

// Street2NEQ applies the NEQ predicate on the "street2" field.
func Street2NEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreet2, v))
}

// Street2In applies the In predicate on the "street2" field.
func Street2In(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreet2, vs...))
}

// Street2NotIn applies the NotIn predicate on the "street2" field.
func Street2NotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreet2, vs...))
}

// Street2GT applies the GT predicate on the "street2" field.
func Street2GT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreet2, v))
}

// Street2GTE applies the GTE predicate on the "street2" field.
func Street2GTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreet2, v))
}

// Street2LT applies the LT predicate on the "street2" field.
func Street2LT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreet2, v))
}

// Street2LTE applies the LTE predicate on the "street2" field.
func Street2LTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreet2, v))
}

// Street2Contains applies the Contains predicate on the "street2" field.
func Street2Contains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreet2, v))
}

// Street2HasPrefix applies the HasPrefix predicate on the "street2" field.
func Street2HasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreet2, v))
}

// Street2HasSuffix applies the HasSuffix predicate on the "street2" field.
func Street2HasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreet2, v))
}

// Street2IsNil applies the IsNil predicate on the "street2" field.
func Street2IsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldStreet2))
}

// Street2NotNil applies the NotNil predicate on the "street2" field.
func Street2NotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldStreet2))
}

// Street2EqualFold applies the EqualFold predicate on the "street2" field.
func Street2EqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreet2, v))
}

// Street2ContainsFold applies the ContainsFold predicate on the "street2" field.
func Street2ContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreet2, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldState, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldPostalCode, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCountry, v))
}

// HasUserProfiles applies the HasEdge predicate on the "user_profiles" edge.
func HasUserProfiles() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserProfilesTable, UserProfilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserProfilesWith applies the HasEdge predicate on the "user_profiles" edge with a given conditions (other predicates).
func HasUserProfilesWith(preds ...predicate.UserProfile) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newUserProfilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
