// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ActivityLog is the model entity for the ActivityLog schema.
type ActivityLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type activitylog.Type `json:"type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LinkHref holds the value of the "link_href" field.
	LinkHref string `json:"link_href,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityLogQuery when eager-loading is set.
	Edges              ActivityLogEdges `json:"edges"`
	user_activity_logs *int
	selectValues       sql.SelectValues
}

// ActivityLogEdges holds the relations/edges for other nodes in the graph.
type ActivityLogEdges struct {
	// Actor holds the value of the actor edge.
	Actor *User `json:"actor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActorOrErr returns the Actor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityLogEdges) ActorOrErr() (*User, error) {
	if e.Actor != nil {
		return e.Actor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "actor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activitylog.FieldMetadata:
			values[i] = new([]byte)
		case activitylog.FieldID:
			values[i] = new(sql.NullInt64)
		case activitylog.FieldType, activitylog.FieldTitle, activitylog.FieldDescription, activitylog.FieldLinkHref, activitylog.FieldEntityType, activitylog.FieldEntityID, activitylog.FieldIPAddress, activitylog.FieldUserAgent:
			values[i] = new(sql.NullString)
		case activitylog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case activitylog.ForeignKeys[0]: // user_activity_logs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityLog fields.
func (_m *ActivityLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activitylog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case activitylog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = activitylog.Type(value.String)
			}
		case activitylog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case activitylog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case activitylog.FieldLinkHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_href", values[i])
			} else if value.Valid {
				_m.LinkHref = value.String
			}
		case activitylog.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				_m.EntityType = value.String
			}
		case activitylog.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				_m.EntityID = value.String
			}
		case activitylog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case activitylog.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case activitylog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case activitylog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case activitylog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_activity_logs", value)
			} else if value.Valid {
				_m.user_activity_logs = new(int)
				*_m.user_activity_logs = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityLog.
// This includes values selected through modifiers, order, etc.
func (_m *ActivityLog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryActor queries the "actor" edge of the ActivityLog entity.
func (_m *ActivityLog) QueryActor() *UserQuery {
	return NewActivityLogClient(_m.config).QueryActor(_m)
}

// Update returns a builder for updating this ActivityLog.
// Note that you need to call ActivityLog.Unwrap() before calling this method if this ActivityLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ActivityLog) Update() *ActivityLogUpdateOne {
	return NewActivityLogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ActivityLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ActivityLog) Unwrap() *ActivityLog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityLog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ActivityLog) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("link_href=")
	builder.WriteString(_m.LinkHref)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(_m.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(_m.EntityID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityLogs is a parsable slice of ActivityLog.
type ActivityLogs []*ActivityLog
