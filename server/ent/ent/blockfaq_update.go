// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/faqitem"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockFaqUpdate is the builder for updating BlockFaq entities.
type BlockFaqUpdate struct {
	config
	hooks    []Hook
	mutation *BlockFaqMutation
}

// Where appends a list predicates to the BlockFaqUpdate builder.
func (_u *BlockFaqUpdate) Where(ps ...predicate.BlockFaq) *BlockFaqUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockFaqUpdate) SetInternalName(v string) *BlockFaqUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockFaqUpdate) SetNillableInternalName(v *string) *BlockFaqUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockFaqUpdate) SetBadge(v map[string]string) *BlockFaqUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockFaqUpdate) ClearBadge() *BlockFaqUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockFaqUpdate) SetTitle(v map[string]string) *BlockFaqUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockFaqUpdate) SetDescription(v map[string]string) *BlockFaqUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockFaqUpdate) ClearDescription() *BlockFaqUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (_u *BlockFaqUpdate) SetAllowMultipleOpen(v bool) *BlockFaqUpdate {
	_u.mutation.SetAllowMultipleOpen(v)
	return _u
}

// SetNillableAllowMultipleOpen sets the "allow_multiple_open" field if the given value is not nil.
func (_u *BlockFaqUpdate) SetNillableAllowMultipleOpen(v *bool) *BlockFaqUpdate {
	if v != nil {
		_u.SetAllowMultipleOpen(*v)
	}
	return _u
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (_u *BlockFaqUpdate) SetDefaultOpenFirst(v bool) *BlockFaqUpdate {
	_u.mutation.SetDefaultOpenFirst(v)
	return _u
}

// SetNillableDefaultOpenFirst sets the "default_open_first" field if the given value is not nil.
func (_u *BlockFaqUpdate) SetNillableDefaultOpenFirst(v *bool) *BlockFaqUpdate {
	if v != nil {
		_u.SetDefaultOpenFirst(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockFaqUpdate) SetUpdatedAt(v time.Time) *BlockFaqUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockFaqUpdate) SetContentBlockID(id int) *BlockFaqUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockFaqUpdate) SetContentBlock(v *ContentBlock) *BlockFaqUpdate {
	return _u.SetContentBlockID(v.ID)
}

// AddItemIDs adds the "items" edge to the FaqItem entity by IDs.
func (_u *BlockFaqUpdate) AddItemIDs(ids ...int) *BlockFaqUpdate {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the FaqItem entity.
func (_u *BlockFaqUpdate) AddItems(v ...*FaqItem) *BlockFaqUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// Mutation returns the BlockFaqMutation object of the builder.
func (_u *BlockFaqUpdate) Mutation() *BlockFaqMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockFaqUpdate) ClearContentBlock() *BlockFaqUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearItems clears all "items" edges to the FaqItem entity.
func (_u *BlockFaqUpdate) ClearItems() *BlockFaqUpdate {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to FaqItem entities by IDs.
func (_u *BlockFaqUpdate) RemoveItemIDs(ids ...int) *BlockFaqUpdate {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to FaqItem entities.
func (_u *BlockFaqUpdate) RemoveItems(v ...*FaqItem) *BlockFaqUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockFaqUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockFaqUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockFaqUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockFaqUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockFaqUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockfaq.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockFaqUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockFaq.content_block"`)
	}
	return nil
}

func (_u *BlockFaqUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockfaq.Table, blockfaq.Columns, sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockfaq.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockfaq.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockfaq.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockfaq.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockfaq.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockfaq.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.AllowMultipleOpen(); ok {
		_spec.SetField(blockfaq.FieldAllowMultipleOpen, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultOpenFirst(); ok {
		_spec.SetField(blockfaq.FieldDefaultOpenFirst, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockfaq.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockfaq.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockFaqUpdateOne is the builder for updating a single BlockFaq entity.
type BlockFaqUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockFaqMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockFaqUpdateOne) SetInternalName(v string) *BlockFaqUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockFaqUpdateOne) SetNillableInternalName(v *string) *BlockFaqUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockFaqUpdateOne) SetBadge(v map[string]string) *BlockFaqUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockFaqUpdateOne) ClearBadge() *BlockFaqUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockFaqUpdateOne) SetTitle(v map[string]string) *BlockFaqUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockFaqUpdateOne) SetDescription(v map[string]string) *BlockFaqUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockFaqUpdateOne) ClearDescription() *BlockFaqUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (_u *BlockFaqUpdateOne) SetAllowMultipleOpen(v bool) *BlockFaqUpdateOne {
	_u.mutation.SetAllowMultipleOpen(v)
	return _u
}

// SetNillableAllowMultipleOpen sets the "allow_multiple_open" field if the given value is not nil.
func (_u *BlockFaqUpdateOne) SetNillableAllowMultipleOpen(v *bool) *BlockFaqUpdateOne {
	if v != nil {
		_u.SetAllowMultipleOpen(*v)
	}
	return _u
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (_u *BlockFaqUpdateOne) SetDefaultOpenFirst(v bool) *BlockFaqUpdateOne {
	_u.mutation.SetDefaultOpenFirst(v)
	return _u
}

// SetNillableDefaultOpenFirst sets the "default_open_first" field if the given value is not nil.
func (_u *BlockFaqUpdateOne) SetNillableDefaultOpenFirst(v *bool) *BlockFaqUpdateOne {
	if v != nil {
		_u.SetDefaultOpenFirst(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockFaqUpdateOne) SetUpdatedAt(v time.Time) *BlockFaqUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockFaqUpdateOne) SetContentBlockID(id int) *BlockFaqUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockFaqUpdateOne) SetContentBlock(v *ContentBlock) *BlockFaqUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// AddItemIDs adds the "items" edge to the FaqItem entity by IDs.
func (_u *BlockFaqUpdateOne) AddItemIDs(ids ...int) *BlockFaqUpdateOne {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the FaqItem entity.
func (_u *BlockFaqUpdateOne) AddItems(v ...*FaqItem) *BlockFaqUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// Mutation returns the BlockFaqMutation object of the builder.
func (_u *BlockFaqUpdateOne) Mutation() *BlockFaqMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockFaqUpdateOne) ClearContentBlock() *BlockFaqUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearItems clears all "items" edges to the FaqItem entity.
func (_u *BlockFaqUpdateOne) ClearItems() *BlockFaqUpdateOne {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to FaqItem entities by IDs.
func (_u *BlockFaqUpdateOne) RemoveItemIDs(ids ...int) *BlockFaqUpdateOne {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to FaqItem entities.
func (_u *BlockFaqUpdateOne) RemoveItems(v ...*FaqItem) *BlockFaqUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the BlockFaqUpdate builder.
func (_u *BlockFaqUpdateOne) Where(ps ...predicate.BlockFaq) *BlockFaqUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockFaqUpdateOne) Select(field string, fields ...string) *BlockFaqUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockFaq entity.
func (_u *BlockFaqUpdateOne) Save(ctx context.Context) (*BlockFaq, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockFaqUpdateOne) SaveX(ctx context.Context) *BlockFaq {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockFaqUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockFaqUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockFaqUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockfaq.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockFaqUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockFaq.content_block"`)
	}
	return nil
}

func (_u *BlockFaqUpdateOne) sqlSave(ctx context.Context) (_node *BlockFaq, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockfaq.Table, blockfaq.Columns, sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockFaq.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockfaq.FieldID)
		for _, f := range fields {
			if !blockfaq.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockfaq.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockfaq.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockfaq.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockfaq.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockfaq.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockfaq.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockfaq.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.AllowMultipleOpen(); ok {
		_spec.SetField(blockfaq.FieldAllowMultipleOpen, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultOpenFirst(); ok {
		_spec.SetField(blockfaq.FieldDefaultOpenFirst, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockfaq.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockFaq{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockfaq.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
