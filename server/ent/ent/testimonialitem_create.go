// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/successstory"
	"awe/ent/ent/testimonialitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestimonialItemCreate is the builder for creating a TestimonialItem entity.
type TestimonialItemCreate struct {
	config
	mutation *TestimonialItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *TestimonialItemCreate) SetOrder(v int) *TestimonialItemCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetQuote sets the "quote" field.
func (_c *TestimonialItemCreate) SetQuote(v map[string]string) *TestimonialItemCreate {
	_c.mutation.SetQuote(v)
	return _c
}

// SetAuthorName sets the "author_name" field.
func (_c *TestimonialItemCreate) SetAuthorName(v string) *TestimonialItemCreate {
	_c.mutation.SetAuthorName(v)
	return _c
}

// SetAuthorRole sets the "author_role" field.
func (_c *TestimonialItemCreate) SetAuthorRole(v map[string]string) *TestimonialItemCreate {
	_c.mutation.SetAuthorRole(v)
	return _c
}

// SetAuthorImageURL sets the "author_image_url" field.
func (_c *TestimonialItemCreate) SetAuthorImageURL(v string) *TestimonialItemCreate {
	_c.mutation.SetAuthorImageURL(v)
	return _c
}

// SetNillableAuthorImageURL sets the "author_image_url" field if the given value is not nil.
func (_c *TestimonialItemCreate) SetNillableAuthorImageURL(v *string) *TestimonialItemCreate {
	if v != nil {
		_c.SetAuthorImageURL(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the BlockTestimonials entity by ID.
func (_c *TestimonialItemCreate) SetBlockID(id int) *TestimonialItemCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockTestimonials entity.
func (_c *TestimonialItemCreate) SetBlock(v *BlockTestimonials) *TestimonialItemCreate {
	return _c.SetBlockID(v.ID)
}

// SetSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID.
func (_c *TestimonialItemCreate) SetSuccessStoryID(id int) *TestimonialItemCreate {
	_c.mutation.SetSuccessStoryID(id)
	return _c
}

// SetNillableSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID if the given value is not nil.
func (_c *TestimonialItemCreate) SetNillableSuccessStoryID(id *int) *TestimonialItemCreate {
	if id != nil {
		_c = _c.SetSuccessStoryID(*id)
	}
	return _c
}

// SetSuccessStory sets the "success_story" edge to the SuccessStory entity.
func (_c *TestimonialItemCreate) SetSuccessStory(v *SuccessStory) *TestimonialItemCreate {
	return _c.SetSuccessStoryID(v.ID)
}

// Mutation returns the TestimonialItemMutation object of the builder.
func (_c *TestimonialItemCreate) Mutation() *TestimonialItemMutation {
	return _c.mutation
}

// Save creates the TestimonialItem in the database.
func (_c *TestimonialItemCreate) Save(ctx context.Context) (*TestimonialItem, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TestimonialItemCreate) SaveX(ctx context.Context) *TestimonialItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TestimonialItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TestimonialItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TestimonialItemCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TestimonialItem.order"`)}
	}
	if _, ok := _c.mutation.Quote(); !ok {
		return &ValidationError{Name: "quote", err: errors.New(`ent: missing required field "TestimonialItem.quote"`)}
	}
	if _, ok := _c.mutation.AuthorName(); !ok {
		return &ValidationError{Name: "author_name", err: errors.New(`ent: missing required field "TestimonialItem.author_name"`)}
	}
	if _, ok := _c.mutation.AuthorRole(); !ok {
		return &ValidationError{Name: "author_role", err: errors.New(`ent: missing required field "TestimonialItem.author_role"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "TestimonialItem.block"`)}
	}
	return nil
}

func (_c *TestimonialItemCreate) sqlSave(ctx context.Context) (*TestimonialItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TestimonialItemCreate) createSpec() (*TestimonialItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TestimonialItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(testimonialitem.Table, sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(testimonialitem.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Quote(); ok {
		_spec.SetField(testimonialitem.FieldQuote, field.TypeJSON, value)
		_node.Quote = value
	}
	if value, ok := _c.mutation.AuthorName(); ok {
		_spec.SetField(testimonialitem.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := _c.mutation.AuthorRole(); ok {
		_spec.SetField(testimonialitem.FieldAuthorRole, field.TypeJSON, value)
		_node.AuthorRole = value
	}
	if value, ok := _c.mutation.AuthorImageURL(); ok {
		_spec.SetField(testimonialitem.FieldAuthorImageURL, field.TypeString, value)
		_node.AuthorImageURL = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_testimonials_testimonials = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SuccessStoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.testimonial_item_success_story = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestimonialItem.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestimonialItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TestimonialItemCreate) OnConflict(opts ...sql.ConflictOption) *TestimonialItemUpsertOne {
	_c.conflict = opts
	return &TestimonialItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TestimonialItemCreate) OnConflictColumns(columns ...string) *TestimonialItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TestimonialItemUpsertOne{
		create: _c,
	}
}

type (
	// TestimonialItemUpsertOne is the builder for "upsert"-ing
	//  one TestimonialItem node.
	TestimonialItemUpsertOne struct {
		create *TestimonialItemCreate
	}

	// TestimonialItemUpsert is the "OnConflict" setter.
	TestimonialItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *TestimonialItemUpsert) SetOrder(v int) *TestimonialItemUpsert {
	u.Set(testimonialitem.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TestimonialItemUpsert) UpdateOrder() *TestimonialItemUpsert {
	u.SetExcluded(testimonialitem.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *TestimonialItemUpsert) AddOrder(v int) *TestimonialItemUpsert {
	u.Add(testimonialitem.FieldOrder, v)
	return u
}

// SetQuote sets the "quote" field.
func (u *TestimonialItemUpsert) SetQuote(v map[string]string) *TestimonialItemUpsert {
	u.Set(testimonialitem.FieldQuote, v)
	return u
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *TestimonialItemUpsert) UpdateQuote() *TestimonialItemUpsert {
	u.SetExcluded(testimonialitem.FieldQuote)
	return u
}

// SetAuthorName sets the "author_name" field.
func (u *TestimonialItemUpsert) SetAuthorName(v string) *TestimonialItemUpsert {
	u.Set(testimonialitem.FieldAuthorName, v)
	return u
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TestimonialItemUpsert) UpdateAuthorName() *TestimonialItemUpsert {
	u.SetExcluded(testimonialitem.FieldAuthorName)
	return u
}

// SetAuthorRole sets the "author_role" field.
func (u *TestimonialItemUpsert) SetAuthorRole(v map[string]string) *TestimonialItemUpsert {
	u.Set(testimonialitem.FieldAuthorRole, v)
	return u
}

// UpdateAuthorRole sets the "author_role" field to the value that was provided on create.
func (u *TestimonialItemUpsert) UpdateAuthorRole() *TestimonialItemUpsert {
	u.SetExcluded(testimonialitem.FieldAuthorRole)
	return u
}

// SetAuthorImageURL sets the "author_image_url" field.
func (u *TestimonialItemUpsert) SetAuthorImageURL(v string) *TestimonialItemUpsert {
	u.Set(testimonialitem.FieldAuthorImageURL, v)
	return u
}

// UpdateAuthorImageURL sets the "author_image_url" field to the value that was provided on create.
func (u *TestimonialItemUpsert) UpdateAuthorImageURL() *TestimonialItemUpsert {
	u.SetExcluded(testimonialitem.FieldAuthorImageURL)
	return u
}

// ClearAuthorImageURL clears the value of the "author_image_url" field.
func (u *TestimonialItemUpsert) ClearAuthorImageURL() *TestimonialItemUpsert {
	u.SetNull(testimonialitem.FieldAuthorImageURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestimonialItemUpsertOne) UpdateNewValues() *TestimonialItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TestimonialItemUpsertOne) Ignore() *TestimonialItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestimonialItemUpsertOne) DoNothing() *TestimonialItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestimonialItemCreate.OnConflict
// documentation for more info.
func (u *TestimonialItemUpsertOne) Update(set func(*TestimonialItemUpsert)) *TestimonialItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestimonialItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TestimonialItemUpsertOne) SetOrder(v int) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TestimonialItemUpsertOne) AddOrder(v int) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TestimonialItemUpsertOne) UpdateOrder() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateOrder()
	})
}

// SetQuote sets the "quote" field.
func (u *TestimonialItemUpsertOne) SetQuote(v map[string]string) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *TestimonialItemUpsertOne) UpdateQuote() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateQuote()
	})
}

// SetAuthorName sets the "author_name" field.
func (u *TestimonialItemUpsertOne) SetAuthorName(v string) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorName(v)
	})
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TestimonialItemUpsertOne) UpdateAuthorName() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorName()
	})
}

// SetAuthorRole sets the "author_role" field.
func (u *TestimonialItemUpsertOne) SetAuthorRole(v map[string]string) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorRole(v)
	})
}

// UpdateAuthorRole sets the "author_role" field to the value that was provided on create.
func (u *TestimonialItemUpsertOne) UpdateAuthorRole() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorRole()
	})
}

// SetAuthorImageURL sets the "author_image_url" field.
func (u *TestimonialItemUpsertOne) SetAuthorImageURL(v string) *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorImageURL(v)
	})
}

// UpdateAuthorImageURL sets the "author_image_url" field to the value that was provided on create.
func (u *TestimonialItemUpsertOne) UpdateAuthorImageURL() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorImageURL()
	})
}

// ClearAuthorImageURL clears the value of the "author_image_url" field.
func (u *TestimonialItemUpsertOne) ClearAuthorImageURL() *TestimonialItemUpsertOne {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.ClearAuthorImageURL()
	})
}

// Exec executes the query.
func (u *TestimonialItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestimonialItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestimonialItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestimonialItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestimonialItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestimonialItemCreateBulk is the builder for creating many TestimonialItem entities in bulk.
type TestimonialItemCreateBulk struct {
	config
	err      error
	builders []*TestimonialItemCreate
	conflict []sql.ConflictOption
}

// Save creates the TestimonialItem entities in the database.
func (_c *TestimonialItemCreateBulk) Save(ctx context.Context) ([]*TestimonialItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TestimonialItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestimonialItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TestimonialItemCreateBulk) SaveX(ctx context.Context) []*TestimonialItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TestimonialItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TestimonialItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestimonialItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestimonialItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TestimonialItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestimonialItemUpsertBulk {
	_c.conflict = opts
	return &TestimonialItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TestimonialItemCreateBulk) OnConflictColumns(columns ...string) *TestimonialItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TestimonialItemUpsertBulk{
		create: _c,
	}
}

// TestimonialItemUpsertBulk is the builder for "upsert"-ing
// a bulk of TestimonialItem nodes.
type TestimonialItemUpsertBulk struct {
	create *TestimonialItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TestimonialItemUpsertBulk) UpdateNewValues() *TestimonialItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestimonialItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TestimonialItemUpsertBulk) Ignore() *TestimonialItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestimonialItemUpsertBulk) DoNothing() *TestimonialItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestimonialItemCreateBulk.OnConflict
// documentation for more info.
func (u *TestimonialItemUpsertBulk) Update(set func(*TestimonialItemUpsert)) *TestimonialItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestimonialItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TestimonialItemUpsertBulk) SetOrder(v int) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TestimonialItemUpsertBulk) AddOrder(v int) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TestimonialItemUpsertBulk) UpdateOrder() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateOrder()
	})
}

// SetQuote sets the "quote" field.
func (u *TestimonialItemUpsertBulk) SetQuote(v map[string]string) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *TestimonialItemUpsertBulk) UpdateQuote() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateQuote()
	})
}

// SetAuthorName sets the "author_name" field.
func (u *TestimonialItemUpsertBulk) SetAuthorName(v string) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorName(v)
	})
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TestimonialItemUpsertBulk) UpdateAuthorName() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorName()
	})
}

// SetAuthorRole sets the "author_role" field.
func (u *TestimonialItemUpsertBulk) SetAuthorRole(v map[string]string) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorRole(v)
	})
}

// UpdateAuthorRole sets the "author_role" field to the value that was provided on create.
func (u *TestimonialItemUpsertBulk) UpdateAuthorRole() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorRole()
	})
}

// SetAuthorImageURL sets the "author_image_url" field.
func (u *TestimonialItemUpsertBulk) SetAuthorImageURL(v string) *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.SetAuthorImageURL(v)
	})
}

// UpdateAuthorImageURL sets the "author_image_url" field to the value that was provided on create.
func (u *TestimonialItemUpsertBulk) UpdateAuthorImageURL() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.UpdateAuthorImageURL()
	})
}

// ClearAuthorImageURL clears the value of the "author_image_url" field.
func (u *TestimonialItemUpsertBulk) ClearAuthorImageURL() *TestimonialItemUpsertBulk {
	return u.Update(func(s *TestimonialItemUpsert) {
		s.ClearAuthorImageURL()
	})
}

// Exec executes the query.
func (u *TestimonialItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestimonialItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestimonialItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestimonialItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
