// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"awe/ent/ent/timelineevent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockTimelineUpdate is the builder for updating BlockTimeline entities.
type BlockTimelineUpdate struct {
	config
	hooks    []Hook
	mutation *BlockTimelineMutation
}

// Where appends a list predicates to the BlockTimelineUpdate builder.
func (_u *BlockTimelineUpdate) Where(ps ...predicate.BlockTimeline) *BlockTimelineUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockTimelineUpdate) SetInternalName(v string) *BlockTimelineUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockTimelineUpdate) SetNillableInternalName(v *string) *BlockTimelineUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockTimelineUpdate) SetBadge(v map[string]string) *BlockTimelineUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockTimelineUpdate) ClearBadge() *BlockTimelineUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockTimelineUpdate) SetTitle(v map[string]string) *BlockTimelineUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockTimelineUpdate) ClearTitle() *BlockTimelineUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockTimelineUpdate) SetDescription(v map[string]string) *BlockTimelineUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockTimelineUpdate) ClearDescription() *BlockTimelineUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockTimelineUpdate) SetLayout(v string) *BlockTimelineUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockTimelineUpdate) SetNillableLayout(v *string) *BlockTimelineUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockTimelineUpdate) SetUpdatedAt(v time.Time) *BlockTimelineUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockTimelineUpdate) SetContentBlockID(id int) *BlockTimelineUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockTimelineUpdate) SetContentBlock(v *ContentBlock) *BlockTimelineUpdate {
	return _u.SetContentBlockID(v.ID)
}

// AddEventIDs adds the "events" edge to the TimelineEvent entity by IDs.
func (_u *BlockTimelineUpdate) AddEventIDs(ids ...int) *BlockTimelineUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the TimelineEvent entity.
func (_u *BlockTimelineUpdate) AddEvents(v ...*TimelineEvent) *BlockTimelineUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the BlockTimelineMutation object of the builder.
func (_u *BlockTimelineUpdate) Mutation() *BlockTimelineMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockTimelineUpdate) ClearContentBlock() *BlockTimelineUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearEvents clears all "events" edges to the TimelineEvent entity.
func (_u *BlockTimelineUpdate) ClearEvents() *BlockTimelineUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to TimelineEvent entities by IDs.
func (_u *BlockTimelineUpdate) RemoveEventIDs(ids ...int) *BlockTimelineUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to TimelineEvent entities.
func (_u *BlockTimelineUpdate) RemoveEvents(v ...*TimelineEvent) *BlockTimelineUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockTimelineUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockTimelineUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockTimelineUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockTimelineUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockTimelineUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocktimeline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockTimelineUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockTimeline.content_block"`)
	}
	return nil
}

func (_u *BlockTimelineUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocktimeline.Table, blocktimeline.Columns, sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocktimeline.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blocktimeline.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blocktimeline.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocktimeline.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blocktimeline.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocktimeline.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocktimeline.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocktimeline.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktimeline.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktimeline.ContentBlockTable,
			Columns: []string{blocktimeline.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktimeline.ContentBlockTable,
			Columns: []string{blocktimeline.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocktimeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockTimelineUpdateOne is the builder for updating a single BlockTimeline entity.
type BlockTimelineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockTimelineMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockTimelineUpdateOne) SetInternalName(v string) *BlockTimelineUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockTimelineUpdateOne) SetNillableInternalName(v *string) *BlockTimelineUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockTimelineUpdateOne) SetBadge(v map[string]string) *BlockTimelineUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockTimelineUpdateOne) ClearBadge() *BlockTimelineUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockTimelineUpdateOne) SetTitle(v map[string]string) *BlockTimelineUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockTimelineUpdateOne) ClearTitle() *BlockTimelineUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockTimelineUpdateOne) SetDescription(v map[string]string) *BlockTimelineUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockTimelineUpdateOne) ClearDescription() *BlockTimelineUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockTimelineUpdateOne) SetLayout(v string) *BlockTimelineUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockTimelineUpdateOne) SetNillableLayout(v *string) *BlockTimelineUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockTimelineUpdateOne) SetUpdatedAt(v time.Time) *BlockTimelineUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockTimelineUpdateOne) SetContentBlockID(id int) *BlockTimelineUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockTimelineUpdateOne) SetContentBlock(v *ContentBlock) *BlockTimelineUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// AddEventIDs adds the "events" edge to the TimelineEvent entity by IDs.
func (_u *BlockTimelineUpdateOne) AddEventIDs(ids ...int) *BlockTimelineUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the TimelineEvent entity.
func (_u *BlockTimelineUpdateOne) AddEvents(v ...*TimelineEvent) *BlockTimelineUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the BlockTimelineMutation object of the builder.
func (_u *BlockTimelineUpdateOne) Mutation() *BlockTimelineMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockTimelineUpdateOne) ClearContentBlock() *BlockTimelineUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearEvents clears all "events" edges to the TimelineEvent entity.
func (_u *BlockTimelineUpdateOne) ClearEvents() *BlockTimelineUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to TimelineEvent entities by IDs.
func (_u *BlockTimelineUpdateOne) RemoveEventIDs(ids ...int) *BlockTimelineUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to TimelineEvent entities.
func (_u *BlockTimelineUpdateOne) RemoveEvents(v ...*TimelineEvent) *BlockTimelineUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the BlockTimelineUpdate builder.
func (_u *BlockTimelineUpdateOne) Where(ps ...predicate.BlockTimeline) *BlockTimelineUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockTimelineUpdateOne) Select(field string, fields ...string) *BlockTimelineUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockTimeline entity.
func (_u *BlockTimelineUpdateOne) Save(ctx context.Context) (*BlockTimeline, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockTimelineUpdateOne) SaveX(ctx context.Context) *BlockTimeline {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockTimelineUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockTimelineUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockTimelineUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocktimeline.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockTimelineUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockTimeline.content_block"`)
	}
	return nil
}

func (_u *BlockTimelineUpdateOne) sqlSave(ctx context.Context) (_node *BlockTimeline, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocktimeline.Table, blocktimeline.Columns, sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockTimeline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocktimeline.FieldID)
		for _, f := range fields {
			if !blocktimeline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocktimeline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocktimeline.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blocktimeline.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blocktimeline.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocktimeline.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blocktimeline.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocktimeline.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocktimeline.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocktimeline.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktimeline.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktimeline.ContentBlockTable,
			Columns: []string{blocktimeline.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktimeline.ContentBlockTable,
			Columns: []string{blocktimeline.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockTimeline{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocktimeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
