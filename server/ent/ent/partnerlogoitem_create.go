// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/partnerlogoitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerLogoItemCreate is the builder for creating a PartnerLogoItem entity.
type PartnerLogoItemCreate struct {
	config
	mutation *PartnerLogoItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *PartnerLogoItemCreate) SetOrder(v int) *PartnerLogoItemCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetName sets the "name" field.
func (_c *PartnerLogoItemCreate) SetName(v string) *PartnerLogoItemCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetLogoURL sets the "logo_url" field.
func (_c *PartnerLogoItemCreate) SetLogoURL(v string) *PartnerLogoItemCreate {
	_c.mutation.SetLogoURL(v)
	return _c
}

// SetWebsite sets the "website" field.
func (_c *PartnerLogoItemCreate) SetWebsite(v string) *PartnerLogoItemCreate {
	_c.mutation.SetWebsite(v)
	return _c
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_c *PartnerLogoItemCreate) SetNillableWebsite(v *string) *PartnerLogoItemCreate {
	if v != nil {
		_c.SetWebsite(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the BlockPartnerLogos entity by ID.
func (_c *PartnerLogoItemCreate) SetBlockID(id int) *PartnerLogoItemCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockPartnerLogos entity.
func (_c *PartnerLogoItemCreate) SetBlock(v *BlockPartnerLogos) *PartnerLogoItemCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the PartnerLogoItemMutation object of the builder.
func (_c *PartnerLogoItemCreate) Mutation() *PartnerLogoItemMutation {
	return _c.mutation
}

// Save creates the PartnerLogoItem in the database.
func (_c *PartnerLogoItemCreate) Save(ctx context.Context) (*PartnerLogoItem, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnerLogoItemCreate) SaveX(ctx context.Context) *PartnerLogoItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnerLogoItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnerLogoItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnerLogoItemCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "PartnerLogoItem.order"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PartnerLogoItem.name"`)}
	}
	if _, ok := _c.mutation.LogoURL(); !ok {
		return &ValidationError{Name: "logo_url", err: errors.New(`ent: missing required field "PartnerLogoItem.logo_url"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "PartnerLogoItem.block"`)}
	}
	return nil
}

func (_c *PartnerLogoItemCreate) sqlSave(ctx context.Context) (*PartnerLogoItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnerLogoItemCreate) createSpec() (*PartnerLogoItem, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnerLogoItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partnerlogoitem.Table, sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(partnerlogoitem.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(partnerlogoitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.LogoURL(); ok {
		_spec.SetField(partnerlogoitem.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := _c.mutation.Website(); ok {
		_spec.SetField(partnerlogoitem.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerlogoitem.BlockTable,
			Columns: []string{partnerlogoitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_partner_logos_partners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerLogoItem.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerLogoItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnerLogoItemCreate) OnConflict(opts ...sql.ConflictOption) *PartnerLogoItemUpsertOne {
	_c.conflict = opts
	return &PartnerLogoItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnerLogoItemCreate) OnConflictColumns(columns ...string) *PartnerLogoItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnerLogoItemUpsertOne{
		create: _c,
	}
}

type (
	// PartnerLogoItemUpsertOne is the builder for "upsert"-ing
	//  one PartnerLogoItem node.
	PartnerLogoItemUpsertOne struct {
		create *PartnerLogoItemCreate
	}

	// PartnerLogoItemUpsert is the "OnConflict" setter.
	PartnerLogoItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *PartnerLogoItemUpsert) SetOrder(v int) *PartnerLogoItemUpsert {
	u.Set(partnerlogoitem.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *PartnerLogoItemUpsert) UpdateOrder() *PartnerLogoItemUpsert {
	u.SetExcluded(partnerlogoitem.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *PartnerLogoItemUpsert) AddOrder(v int) *PartnerLogoItemUpsert {
	u.Add(partnerlogoitem.FieldOrder, v)
	return u
}

// SetName sets the "name" field.
func (u *PartnerLogoItemUpsert) SetName(v string) *PartnerLogoItemUpsert {
	u.Set(partnerlogoitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerLogoItemUpsert) UpdateName() *PartnerLogoItemUpsert {
	u.SetExcluded(partnerlogoitem.FieldName)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *PartnerLogoItemUpsert) SetLogoURL(v string) *PartnerLogoItemUpsert {
	u.Set(partnerlogoitem.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *PartnerLogoItemUpsert) UpdateLogoURL() *PartnerLogoItemUpsert {
	u.SetExcluded(partnerlogoitem.FieldLogoURL)
	return u
}

// SetWebsite sets the "website" field.
func (u *PartnerLogoItemUpsert) SetWebsite(v string) *PartnerLogoItemUpsert {
	u.Set(partnerlogoitem.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerLogoItemUpsert) UpdateWebsite() *PartnerLogoItemUpsert {
	u.SetExcluded(partnerlogoitem.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerLogoItemUpsert) ClearWebsite() *PartnerLogoItemUpsert {
	u.SetNull(partnerlogoitem.FieldWebsite)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnerLogoItemUpsertOne) UpdateNewValues() *PartnerLogoItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnerLogoItemUpsertOne) Ignore() *PartnerLogoItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerLogoItemUpsertOne) DoNothing() *PartnerLogoItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerLogoItemCreate.OnConflict
// documentation for more info.
func (u *PartnerLogoItemUpsertOne) Update(set func(*PartnerLogoItemUpsert)) *PartnerLogoItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerLogoItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *PartnerLogoItemUpsertOne) SetOrder(v int) *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *PartnerLogoItemUpsertOne) AddOrder(v int) *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertOne) UpdateOrder() *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateOrder()
	})
}

// SetName sets the "name" field.
func (u *PartnerLogoItemUpsertOne) SetName(v string) *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertOne) UpdateName() *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateName()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *PartnerLogoItemUpsertOne) SetLogoURL(v string) *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertOne) UpdateLogoURL() *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateLogoURL()
	})
}

// SetWebsite sets the "website" field.
func (u *PartnerLogoItemUpsertOne) SetWebsite(v string) *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertOne) UpdateWebsite() *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerLogoItemUpsertOne) ClearWebsite() *PartnerLogoItemUpsertOne {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.ClearWebsite()
	})
}

// Exec executes the query.
func (u *PartnerLogoItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerLogoItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerLogoItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnerLogoItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnerLogoItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnerLogoItemCreateBulk is the builder for creating many PartnerLogoItem entities in bulk.
type PartnerLogoItemCreateBulk struct {
	config
	err      error
	builders []*PartnerLogoItemCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnerLogoItem entities in the database.
func (_c *PartnerLogoItemCreateBulk) Save(ctx context.Context) ([]*PartnerLogoItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PartnerLogoItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerLogoItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnerLogoItemCreateBulk) SaveX(ctx context.Context) []*PartnerLogoItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnerLogoItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnerLogoItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnerLogoItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnerLogoItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnerLogoItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnerLogoItemUpsertBulk {
	_c.conflict = opts
	return &PartnerLogoItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnerLogoItemCreateBulk) OnConflictColumns(columns ...string) *PartnerLogoItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnerLogoItemUpsertBulk{
		create: _c,
	}
}

// PartnerLogoItemUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnerLogoItem nodes.
type PartnerLogoItemUpsertBulk struct {
	create *PartnerLogoItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnerLogoItemUpsertBulk) UpdateNewValues() *PartnerLogoItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnerLogoItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnerLogoItemUpsertBulk) Ignore() *PartnerLogoItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnerLogoItemUpsertBulk) DoNothing() *PartnerLogoItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnerLogoItemCreateBulk.OnConflict
// documentation for more info.
func (u *PartnerLogoItemUpsertBulk) Update(set func(*PartnerLogoItemUpsert)) *PartnerLogoItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnerLogoItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *PartnerLogoItemUpsertBulk) SetOrder(v int) *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *PartnerLogoItemUpsertBulk) AddOrder(v int) *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertBulk) UpdateOrder() *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateOrder()
	})
}

// SetName sets the "name" field.
func (u *PartnerLogoItemUpsertBulk) SetName(v string) *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertBulk) UpdateName() *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateName()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *PartnerLogoItemUpsertBulk) SetLogoURL(v string) *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertBulk) UpdateLogoURL() *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateLogoURL()
	})
}

// SetWebsite sets the "website" field.
func (u *PartnerLogoItemUpsertBulk) SetWebsite(v string) *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *PartnerLogoItemUpsertBulk) UpdateWebsite() *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *PartnerLogoItemUpsertBulk) ClearWebsite() *PartnerLogoItemUpsertBulk {
	return u.Update(func(s *PartnerLogoItemUpsert) {
		s.ClearWebsite()
	})
}

// Exec executes the query.
func (u *PartnerLogoItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnerLogoItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnerLogoItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnerLogoItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
