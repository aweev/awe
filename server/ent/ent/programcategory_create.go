// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/programcategory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramCategoryCreate is the builder for creating a ProgramCategory entity.
type ProgramCategoryCreate struct {
	config
	mutation *ProgramCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *ProgramCategoryCreate) SetSlug(v string) *ProgramCategoryCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetName sets the "name" field.
func (_c *ProgramCategoryCreate) SetName(v map[string]string) *ProgramCategoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ProgramCategoryCreate) SetDescription(v map[string]string) *ProgramCategoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetIconName sets the "icon_name" field.
func (_c *ProgramCategoryCreate) SetIconName(v string) *ProgramCategoryCreate {
	_c.mutation.SetIconName(v)
	return _c
}

// SetNillableIconName sets the "icon_name" field if the given value is not nil.
func (_c *ProgramCategoryCreate) SetNillableIconName(v *string) *ProgramCategoryCreate {
	if v != nil {
		_c.SetIconName(*v)
	}
	return _c
}

// SetDisplayOrder sets the "display_order" field.
func (_c *ProgramCategoryCreate) SetDisplayOrder(v int) *ProgramCategoryCreate {
	_c.mutation.SetDisplayOrder(v)
	return _c
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_c *ProgramCategoryCreate) SetNillableDisplayOrder(v *int) *ProgramCategoryCreate {
	if v != nil {
		_c.SetDisplayOrder(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *ProgramCategoryCreate) SetColor(v string) *ProgramCategoryCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_c *ProgramCategoryCreate) SetHeroImageURL(v string) *ProgramCategoryCreate {
	_c.mutation.SetHeroImageURL(v)
	return _c
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_c *ProgramCategoryCreate) SetNillableHeroImageURL(v *string) *ProgramCategoryCreate {
	if v != nil {
		_c.SetHeroImageURL(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ProgramCategoryCreate) SetCreatedAt(v time.Time) *ProgramCategoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ProgramCategoryCreate) SetNillableCreatedAt(v *time.Time) *ProgramCategoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProgramCategoryCreate) SetUpdatedAt(v time.Time) *ProgramCategoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProgramCategoryCreate) SetNillableUpdatedAt(v *time.Time) *ProgramCategoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *ProgramCategoryCreate) AddProgramIDs(ids ...int) *ProgramCategoryCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *ProgramCategoryCreate) AddPrograms(v ...*Program) *ProgramCategoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// Mutation returns the ProgramCategoryMutation object of the builder.
func (_c *ProgramCategoryCreate) Mutation() *ProgramCategoryMutation {
	return _c.mutation
}

// Save creates the ProgramCategory in the database.
func (_c *ProgramCategoryCreate) Save(ctx context.Context) (*ProgramCategory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProgramCategoryCreate) SaveX(ctx context.Context) *ProgramCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramCategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramCategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProgramCategoryCreate) defaults() {
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		v := programcategory.DefaultDisplayOrder
		_c.mutation.SetDisplayOrder(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := programcategory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := programcategory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProgramCategoryCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "ProgramCategory.slug"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProgramCategory.name"`)}
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "ProgramCategory.display_order"`)}
	}
	if _, ok := _c.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "ProgramCategory.color"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProgramCategory.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProgramCategory.updated_at"`)}
	}
	return nil
}

func (_c *ProgramCategoryCreate) sqlSave(ctx context.Context) (*ProgramCategory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProgramCategoryCreate) createSpec() (*ProgramCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramCategory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(programcategory.Table, sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(programcategory.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(programcategory.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(programcategory.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.IconName(); ok {
		_spec.SetField(programcategory.FieldIconName, field.TypeString, value)
		_node.IconName = value
	}
	if value, ok := _c.mutation.DisplayOrder(); ok {
		_spec.SetField(programcategory.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(programcategory.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := _c.mutation.HeroImageURL(); ok {
		_spec.SetField(programcategory.FieldHeroImageURL, field.TypeString, value)
		_node.HeroImageURL = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(programcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(programcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProgramCategory.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgramCategoryUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgramCategoryCreate) OnConflict(opts ...sql.ConflictOption) *ProgramCategoryUpsertOne {
	_c.conflict = opts
	return &ProgramCategoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgramCategoryCreate) OnConflictColumns(columns ...string) *ProgramCategoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgramCategoryUpsertOne{
		create: _c,
	}
}

type (
	// ProgramCategoryUpsertOne is the builder for "upsert"-ing
	//  one ProgramCategory node.
	ProgramCategoryUpsertOne struct {
		create *ProgramCategoryCreate
	}

	// ProgramCategoryUpsert is the "OnConflict" setter.
	ProgramCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *ProgramCategoryUpsert) SetSlug(v string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateSlug() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldSlug)
	return u
}

// SetName sets the "name" field.
func (u *ProgramCategoryUpsert) SetName(v map[string]string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateName() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProgramCategoryUpsert) SetDescription(v map[string]string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateDescription() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ProgramCategoryUpsert) ClearDescription() *ProgramCategoryUpsert {
	u.SetNull(programcategory.FieldDescription)
	return u
}

// SetIconName sets the "icon_name" field.
func (u *ProgramCategoryUpsert) SetIconName(v string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldIconName, v)
	return u
}

// UpdateIconName sets the "icon_name" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateIconName() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldIconName)
	return u
}

// ClearIconName clears the value of the "icon_name" field.
func (u *ProgramCategoryUpsert) ClearIconName() *ProgramCategoryUpsert {
	u.SetNull(programcategory.FieldIconName)
	return u
}

// SetDisplayOrder sets the "display_order" field.
func (u *ProgramCategoryUpsert) SetDisplayOrder(v int) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldDisplayOrder, v)
	return u
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateDisplayOrder() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldDisplayOrder)
	return u
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ProgramCategoryUpsert) AddDisplayOrder(v int) *ProgramCategoryUpsert {
	u.Add(programcategory.FieldDisplayOrder, v)
	return u
}

// SetColor sets the "color" field.
func (u *ProgramCategoryUpsert) SetColor(v string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateColor() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldColor)
	return u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramCategoryUpsert) SetHeroImageURL(v string) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldHeroImageURL, v)
	return u
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateHeroImageURL() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldHeroImageURL)
	return u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramCategoryUpsert) ClearHeroImageURL() *ProgramCategoryUpsert {
	u.SetNull(programcategory.FieldHeroImageURL)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramCategoryUpsert) SetUpdatedAt(v time.Time) *ProgramCategoryUpsert {
	u.Set(programcategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramCategoryUpsert) UpdateUpdatedAt() *ProgramCategoryUpsert {
	u.SetExcluded(programcategory.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProgramCategoryUpsertOne) UpdateNewValues() *ProgramCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(programcategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProgramCategoryUpsertOne) Ignore() *ProgramCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgramCategoryUpsertOne) DoNothing() *ProgramCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgramCategoryCreate.OnConflict
// documentation for more info.
func (u *ProgramCategoryUpsertOne) Update(set func(*ProgramCategoryUpsert)) *ProgramCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgramCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *ProgramCategoryUpsertOne) SetSlug(v string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateSlug() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *ProgramCategoryUpsertOne) SetName(v map[string]string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateName() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProgramCategoryUpsertOne) SetDescription(v map[string]string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateDescription() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProgramCategoryUpsertOne) ClearDescription() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetIconName sets the "icon_name" field.
func (u *ProgramCategoryUpsertOne) SetIconName(v string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetIconName(v)
	})
}

// UpdateIconName sets the "icon_name" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateIconName() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateIconName()
	})
}

// ClearIconName clears the value of the "icon_name" field.
func (u *ProgramCategoryUpsertOne) ClearIconName() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearIconName()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *ProgramCategoryUpsertOne) SetDisplayOrder(v int) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ProgramCategoryUpsertOne) AddDisplayOrder(v int) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateDisplayOrder() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetColor sets the "color" field.
func (u *ProgramCategoryUpsertOne) SetColor(v string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateColor() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateColor()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramCategoryUpsertOne) SetHeroImageURL(v string) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateHeroImageURL() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramCategoryUpsertOne) ClearHeroImageURL() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramCategoryUpsertOne) SetUpdatedAt(v time.Time) *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramCategoryUpsertOne) UpdateUpdatedAt() *ProgramCategoryUpsertOne {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProgramCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgramCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgramCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProgramCategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProgramCategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProgramCategoryCreateBulk is the builder for creating many ProgramCategory entities in bulk.
type ProgramCategoryCreateBulk struct {
	config
	err      error
	builders []*ProgramCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the ProgramCategory entities in the database.
func (_c *ProgramCategoryCreateBulk) Save(ctx context.Context) ([]*ProgramCategory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ProgramCategory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProgramCategoryCreateBulk) SaveX(ctx context.Context) []*ProgramCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProgramCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgramCategoryUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgramCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProgramCategoryUpsertBulk {
	_c.conflict = opts
	return &ProgramCategoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgramCategoryCreateBulk) OnConflictColumns(columns ...string) *ProgramCategoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgramCategoryUpsertBulk{
		create: _c,
	}
}

// ProgramCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of ProgramCategory nodes.
type ProgramCategoryUpsertBulk struct {
	create *ProgramCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProgramCategoryUpsertBulk) UpdateNewValues() *ProgramCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(programcategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProgramCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProgramCategoryUpsertBulk) Ignore() *ProgramCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgramCategoryUpsertBulk) DoNothing() *ProgramCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgramCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *ProgramCategoryUpsertBulk) Update(set func(*ProgramCategoryUpsert)) *ProgramCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgramCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *ProgramCategoryUpsertBulk) SetSlug(v string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateSlug() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *ProgramCategoryUpsertBulk) SetName(v map[string]string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateName() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProgramCategoryUpsertBulk) SetDescription(v map[string]string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateDescription() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProgramCategoryUpsertBulk) ClearDescription() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetIconName sets the "icon_name" field.
func (u *ProgramCategoryUpsertBulk) SetIconName(v string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetIconName(v)
	})
}

// UpdateIconName sets the "icon_name" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateIconName() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateIconName()
	})
}

// ClearIconName clears the value of the "icon_name" field.
func (u *ProgramCategoryUpsertBulk) ClearIconName() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearIconName()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *ProgramCategoryUpsertBulk) SetDisplayOrder(v int) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ProgramCategoryUpsertBulk) AddDisplayOrder(v int) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateDisplayOrder() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetColor sets the "color" field.
func (u *ProgramCategoryUpsertBulk) SetColor(v string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateColor() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateColor()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramCategoryUpsertBulk) SetHeroImageURL(v string) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateHeroImageURL() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramCategoryUpsertBulk) ClearHeroImageURL() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramCategoryUpsertBulk) SetUpdatedAt(v time.Time) *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramCategoryUpsertBulk) UpdateUpdatedAt() *ProgramCategoryUpsertBulk {
	return u.Update(func(s *ProgramCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProgramCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProgramCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgramCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgramCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
