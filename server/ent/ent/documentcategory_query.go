// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"awe/ent/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCategoryQuery is the builder for querying DocumentCategory entities.
type DocumentCategoryQuery struct {
	config
	ctx           *QueryContext
	order         []documentcategory.OrderOption
	inters        []Interceptor
	predicates    []predicate.DocumentCategory
	withChildren  *DocumentCategoryQuery
	withParent    *DocumentCategoryQuery
	withDocuments *DocumentQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentCategoryQuery builder.
func (_q *DocumentCategoryQuery) Where(ps ...predicate.DocumentCategory) *DocumentCategoryQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *DocumentCategoryQuery) Limit(limit int) *DocumentCategoryQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *DocumentCategoryQuery) Offset(offset int) *DocumentCategoryQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *DocumentCategoryQuery) Unique(unique bool) *DocumentCategoryQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *DocumentCategoryQuery) Order(o ...documentcategory.OrderOption) *DocumentCategoryQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryChildren chains the current query on the "children" edge.
func (_q *DocumentCategoryQuery) QueryChildren() *DocumentCategoryQuery {
	query := (&DocumentCategoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, selector),
			sqlgraph.To(documentcategory.Table, documentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, documentcategory.ChildrenTable, documentcategory.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (_q *DocumentCategoryQuery) QueryParent() *DocumentCategoryQuery {
	query := (&DocumentCategoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, selector),
			sqlgraph.To(documentcategory.Table, documentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentcategory.ParentTable, documentcategory.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (_q *DocumentCategoryQuery) QueryDocuments() *DocumentQuery {
	query := (&DocumentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, documentcategory.DocumentsTable, documentcategory.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DocumentCategory entity from the query.
// Returns a *NotFoundError when no DocumentCategory was found.
func (_q *DocumentCategoryQuery) First(ctx context.Context) (*DocumentCategory, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{documentcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *DocumentCategoryQuery) FirstX(ctx context.Context) *DocumentCategory {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DocumentCategory ID from the query.
// Returns a *NotFoundError when no DocumentCategory ID was found.
func (_q *DocumentCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{documentcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *DocumentCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DocumentCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DocumentCategory entity is found.
// Returns a *NotFoundError when no DocumentCategory entities are found.
func (_q *DocumentCategoryQuery) Only(ctx context.Context) (*DocumentCategory, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{documentcategory.Label}
	default:
		return nil, &NotSingularError{documentcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *DocumentCategoryQuery) OnlyX(ctx context.Context) *DocumentCategory {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DocumentCategory ID in the query.
// Returns a *NotSingularError when more than one DocumentCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *DocumentCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{documentcategory.Label}
	default:
		err = &NotSingularError{documentcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *DocumentCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DocumentCategories.
func (_q *DocumentCategoryQuery) All(ctx context.Context) ([]*DocumentCategory, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DocumentCategory, *DocumentCategoryQuery]()
	return withInterceptors[[]*DocumentCategory](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *DocumentCategoryQuery) AllX(ctx context.Context) []*DocumentCategory {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DocumentCategory IDs.
func (_q *DocumentCategoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(documentcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *DocumentCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *DocumentCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*DocumentCategoryQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *DocumentCategoryQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *DocumentCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *DocumentCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *DocumentCategoryQuery) Clone() *DocumentCategoryQuery {
	if _q == nil {
		return nil
	}
	return &DocumentCategoryQuery{
		config:        _q.config,
		ctx:           _q.ctx.Clone(),
		order:         append([]documentcategory.OrderOption{}, _q.order...),
		inters:        append([]Interceptor{}, _q.inters...),
		predicates:    append([]predicate.DocumentCategory{}, _q.predicates...),
		withChildren:  _q.withChildren.Clone(),
		withParent:    _q.withParent.Clone(),
		withDocuments: _q.withDocuments.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *DocumentCategoryQuery) WithChildren(opts ...func(*DocumentCategoryQuery)) *DocumentCategoryQuery {
	query := (&DocumentCategoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withChildren = query
	return _q
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *DocumentCategoryQuery) WithParent(opts ...func(*DocumentCategoryQuery)) *DocumentCategoryQuery {
	query := (&DocumentCategoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withParent = query
	return _q
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *DocumentCategoryQuery) WithDocuments(opts ...func(*DocumentQuery)) *DocumentCategoryQuery {
	query := (&DocumentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDocuments = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name map[string]string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DocumentCategory.Query().
//		GroupBy(documentcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *DocumentCategoryQuery) GroupBy(field string, fields ...string) *DocumentCategoryGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentCategoryGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = documentcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name map[string]string `json:"name,omitempty"`
//	}
//
//	client.DocumentCategory.Query().
//		Select(documentcategory.FieldName).
//		Scan(ctx, &v)
func (_q *DocumentCategoryQuery) Select(fields ...string) *DocumentCategorySelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &DocumentCategorySelect{DocumentCategoryQuery: _q}
	sbuild.label = documentcategory.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentCategorySelect configured with the given aggregations.
func (_q *DocumentCategoryQuery) Aggregate(fns ...AggregateFunc) *DocumentCategorySelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *DocumentCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !documentcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *DocumentCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DocumentCategory, error) {
	var (
		nodes       = []*DocumentCategory{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [3]bool{
			_q.withChildren != nil,
			_q.withParent != nil,
			_q.withDocuments != nil,
		}
	)
	if _q.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, documentcategory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DocumentCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DocumentCategory{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withChildren; query != nil {
		if err := _q.loadChildren(ctx, query, nodes,
			func(n *DocumentCategory) { n.Edges.Children = []*DocumentCategory{} },
			func(n *DocumentCategory, e *DocumentCategory) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withParent; query != nil {
		if err := _q.loadParent(ctx, query, nodes, nil,
			func(n *DocumentCategory, e *DocumentCategory) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDocuments; query != nil {
		if err := _q.loadDocuments(ctx, query, nodes,
			func(n *DocumentCategory) { n.Edges.Documents = []*Document{} },
			func(n *DocumentCategory, e *Document) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *DocumentCategoryQuery) loadChildren(ctx context.Context, query *DocumentCategoryQuery, nodes []*DocumentCategory, init func(*DocumentCategory), assign func(*DocumentCategory, *DocumentCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DocumentCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DocumentCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(documentcategory.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.document_category_parent
		if fk == nil {
			return fmt.Errorf(`foreign-key "document_category_parent" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "document_category_parent" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *DocumentCategoryQuery) loadParent(ctx context.Context, query *DocumentCategoryQuery, nodes []*DocumentCategory, init func(*DocumentCategory), assign func(*DocumentCategory, *DocumentCategory)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*DocumentCategory)
	for i := range nodes {
		if nodes[i].document_category_parent == nil {
			continue
		}
		fk := *nodes[i].document_category_parent
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(documentcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "document_category_parent" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *DocumentCategoryQuery) loadDocuments(ctx context.Context, query *DocumentQuery, nodes []*DocumentCategory, init func(*DocumentCategory), assign func(*DocumentCategory, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*DocumentCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(documentcategory.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.document_category_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "document_category_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "document_category_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *DocumentCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *DocumentCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(documentcategory.Table, documentcategory.Columns, sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentcategory.FieldID)
		for i := range fields {
			if fields[i] != documentcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *DocumentCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(documentcategory.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = documentcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DocumentCategoryGroupBy is the group-by builder for DocumentCategory entities.
type DocumentCategoryGroupBy struct {
	selector
	build *DocumentCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *DocumentCategoryGroupBy) Aggregate(fns ...AggregateFunc) *DocumentCategoryGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *DocumentCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentCategoryQuery, *DocumentCategoryGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *DocumentCategoryGroupBy) sqlScan(ctx context.Context, root *DocumentCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentCategorySelect is the builder for selecting fields of DocumentCategory entities.
type DocumentCategorySelect struct {
	*DocumentCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *DocumentCategorySelect) Aggregate(fns ...AggregateFunc) *DocumentCategorySelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *DocumentCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentCategoryQuery, *DocumentCategorySelect](ctx, _s.DocumentCategoryQuery, _s, _s.inters, v)
}

func (_s *DocumentCategorySelect) sqlScan(ctx context.Context, root *DocumentCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
