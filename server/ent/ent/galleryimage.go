// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/galleryimage"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GalleryImage is the model entity for the GalleryImage schema.
type GalleryImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// ImageWidth holds the value of the "image_width" field.
	ImageWidth int `json:"image_width,omitempty"`
	// ImageHeight holds the value of the "image_height" field.
	ImageHeight int `json:"image_height,omitempty"`
	// AltText holds the value of the "alt_text" field.
	AltText map[string]string `json:"alt_text,omitempty"`
	// Caption holds the value of the "caption" field.
	Caption map[string]string `json:"caption,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GalleryImageQuery when eager-loading is set.
	Edges                GalleryImageEdges `json:"edges"`
	block_gallery_images *int
	selectValues         sql.SelectValues
}

// GalleryImageEdges holds the relations/edges for other nodes in the graph.
type GalleryImageEdges struct {
	// Block holds the value of the block edge.
	Block *BlockGallery `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GalleryImageEdges) BlockOrErr() (*BlockGallery, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockgallery.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GalleryImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case galleryimage.FieldAltText, galleryimage.FieldCaption:
			values[i] = new([]byte)
		case galleryimage.FieldID, galleryimage.FieldOrder, galleryimage.FieldImageWidth, galleryimage.FieldImageHeight:
			values[i] = new(sql.NullInt64)
		case galleryimage.FieldImageURL:
			values[i] = new(sql.NullString)
		case galleryimage.ForeignKeys[0]: // block_gallery_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GalleryImage fields.
func (_m *GalleryImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case galleryimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case galleryimage.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case galleryimage.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case galleryimage.FieldImageWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_width", values[i])
			} else if value.Valid {
				_m.ImageWidth = int(value.Int64)
			}
		case galleryimage.FieldImageHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_height", values[i])
			} else if value.Valid {
				_m.ImageHeight = int(value.Int64)
			}
		case galleryimage.FieldAltText:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field alt_text", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AltText); err != nil {
					return fmt.Errorf("unmarshal field alt_text: %w", err)
				}
			}
		case galleryimage.FieldCaption:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field caption", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Caption); err != nil {
					return fmt.Errorf("unmarshal field caption: %w", err)
				}
			}
		case galleryimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_gallery_images", value)
			} else if value.Valid {
				_m.block_gallery_images = new(int)
				*_m.block_gallery_images = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GalleryImage.
// This includes values selected through modifiers, order, etc.
func (_m *GalleryImage) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the GalleryImage entity.
func (_m *GalleryImage) QueryBlock() *BlockGalleryQuery {
	return NewGalleryImageClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this GalleryImage.
// Note that you need to call GalleryImage.Unwrap() before calling this method if this GalleryImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GalleryImage) Update() *GalleryImageUpdateOne {
	return NewGalleryImageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GalleryImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GalleryImage) Unwrap() *GalleryImage {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: GalleryImage is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GalleryImage) String() string {
	var builder strings.Builder
	builder.WriteString("GalleryImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("image_width=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImageWidth))
	builder.WriteString(", ")
	builder.WriteString("image_height=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImageHeight))
	builder.WriteString(", ")
	builder.WriteString("alt_text=")
	builder.WriteString(fmt.Sprintf("%v", _m.AltText))
	builder.WriteString(", ")
	builder.WriteString("caption=")
	builder.WriteString(fmt.Sprintf("%v", _m.Caption))
	builder.WriteByte(')')
	return builder.String()
}

// GalleryImages is a parsable slice of GalleryImage.
type GalleryImages []*GalleryImage
