// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/auditlog"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogMutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (_u *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAction sets the "action" field.
func (_u *AuditLogUpdate) SetAction(v string) *AuditLogUpdate {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableAction(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetMeta sets the "meta" field.
func (_u *AuditLogUpdate) SetMeta(v map[string]interface{}) *AuditLogUpdate {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *AuditLogUpdate) ClearMeta() *AuditLogUpdate {
	_u.mutation.ClearMeta()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *AuditLogUpdate) SetEntityID(v string) *AuditLogUpdate {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableEntityID(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *AuditLogUpdate) ClearEntityID() *AuditLogUpdate {
	_u.mutation.ClearEntityID()
	return _u
}

// SetEntityType sets the "entity_type" field.
func (_u *AuditLogUpdate) SetEntityType(v string) *AuditLogUpdate {
	_u.mutation.SetEntityType(v)
	return _u
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableEntityType(v *string) *AuditLogUpdate {
	if v != nil {
		_u.SetEntityType(*v)
	}
	return _u
}

// ClearEntityType clears the value of the "entity_type" field.
func (_u *AuditLogUpdate) ClearEntityType() *AuditLogUpdate {
	_u.mutation.ClearEntityType()
	return _u
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_u *AuditLogUpdate) SetActorID(id int) *AuditLogUpdate {
	_u.mutation.SetActorID(id)
	return _u
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_u *AuditLogUpdate) SetNillableActorID(id *int) *AuditLogUpdate {
	if id != nil {
		_u = _u.SetActorID(*id)
	}
	return _u
}

// SetActor sets the "actor" edge to the User entity.
func (_u *AuditLogUpdate) SetActor(v *User) *AuditLogUpdate {
	return _u.SetActorID(v.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (_u *AuditLogUpdate) Mutation() *AuditLogMutation {
	return _u.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (_u *AuditLogUpdate) ClearActor() *AuditLogUpdate {
	_u.mutation.ClearActor()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuditLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(auditlog.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(auditlog.FieldMeta, field.TypeJSON)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(auditlog.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(auditlog.FieldEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.EntityType(); ok {
		_spec.SetField(auditlog.FieldEntityType, field.TypeString, value)
	}
	if _u.mutation.EntityTypeCleared() {
		_spec.ClearField(auditlog.FieldEntityType, field.TypeString)
	}
	if _u.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogMutation
}

// SetAction sets the "action" field.
func (_u *AuditLogUpdateOne) SetAction(v string) *AuditLogUpdateOne {
	_u.mutation.SetAction(v)
	return _u
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableAction(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetAction(*v)
	}
	return _u
}

// SetMeta sets the "meta" field.
func (_u *AuditLogUpdateOne) SetMeta(v map[string]interface{}) *AuditLogUpdateOne {
	_u.mutation.SetMeta(v)
	return _u
}

// ClearMeta clears the value of the "meta" field.
func (_u *AuditLogUpdateOne) ClearMeta() *AuditLogUpdateOne {
	_u.mutation.ClearMeta()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *AuditLogUpdateOne) SetEntityID(v string) *AuditLogUpdateOne {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableEntityID(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *AuditLogUpdateOne) ClearEntityID() *AuditLogUpdateOne {
	_u.mutation.ClearEntityID()
	return _u
}

// SetEntityType sets the "entity_type" field.
func (_u *AuditLogUpdateOne) SetEntityType(v string) *AuditLogUpdateOne {
	_u.mutation.SetEntityType(v)
	return _u
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableEntityType(v *string) *AuditLogUpdateOne {
	if v != nil {
		_u.SetEntityType(*v)
	}
	return _u
}

// ClearEntityType clears the value of the "entity_type" field.
func (_u *AuditLogUpdateOne) ClearEntityType() *AuditLogUpdateOne {
	_u.mutation.ClearEntityType()
	return _u
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_u *AuditLogUpdateOne) SetActorID(id int) *AuditLogUpdateOne {
	_u.mutation.SetActorID(id)
	return _u
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_u *AuditLogUpdateOne) SetNillableActorID(id *int) *AuditLogUpdateOne {
	if id != nil {
		_u = _u.SetActorID(*id)
	}
	return _u
}

// SetActor sets the "actor" edge to the User entity.
func (_u *AuditLogUpdateOne) SetActor(v *User) *AuditLogUpdateOne {
	return _u.SetActorID(v.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (_u *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return _u.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (_u *AuditLogUpdateOne) ClearActor() *AuditLogUpdateOne {
	_u.mutation.ClearActor()
	return _u
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (_u *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuditLog entity.
func (_u *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := _u.mutation.Meta(); ok {
		_spec.SetField(auditlog.FieldMeta, field.TypeJSON, value)
	}
	if _u.mutation.MetaCleared() {
		_spec.ClearField(auditlog.FieldMeta, field.TypeJSON)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(auditlog.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(auditlog.FieldEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.EntityType(); ok {
		_spec.SetField(auditlog.FieldEntityType, field.TypeString, value)
	}
	if _u.mutation.EntityTypeCleared() {
		_spec.ClearField(auditlog.FieldEntityType, field.TypeString)
	}
	if _u.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuditLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
