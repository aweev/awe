// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TrustedDevice is the model entity for the TrustedDevice schema.
type TrustedDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Fingerprint holds the value of the "fingerprint" field.
	Fingerprint string `json:"fingerprint,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// LastIP holds the value of the "last_ip" field.
	LastIP string `json:"last_ip,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// VerifiedAt holds the value of the "verified_at" field.
	VerifiedAt time.Time `json:"verified_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustedDeviceQuery when eager-loading is set.
	Edges                TrustedDeviceEdges `json:"edges"`
	user_trusted_devices *int
	selectValues         sql.SelectValues
}

// TrustedDeviceEdges holds the relations/edges for other nodes in the graph.
type TrustedDeviceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustedDeviceEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustedDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trusteddevice.FieldID:
			values[i] = new(sql.NullInt64)
		case trusteddevice.FieldFingerprint, trusteddevice.FieldUserAgent, trusteddevice.FieldLastIP:
			values[i] = new(sql.NullString)
		case trusteddevice.FieldLastUsedAt, trusteddevice.FieldCreatedAt, trusteddevice.FieldVerifiedAt:
			values[i] = new(sql.NullTime)
		case trusteddevice.ForeignKeys[0]: // user_trusted_devices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustedDevice fields.
func (_m *TrustedDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trusteddevice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case trusteddevice.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				_m.Fingerprint = value.String
			}
		case trusteddevice.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case trusteddevice.FieldLastIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_ip", values[i])
			} else if value.Valid {
				_m.LastIP = value.String
			}
		case trusteddevice.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				_m.LastUsedAt = value.Time
			}
		case trusteddevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trusteddevice.FieldVerifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verified_at", values[i])
			} else if value.Valid {
				_m.VerifiedAt = value.Time
			}
		case trusteddevice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_trusted_devices", value)
			} else if value.Valid {
				_m.user_trusted_devices = new(int)
				*_m.user_trusted_devices = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustedDevice.
// This includes values selected through modifiers, order, etc.
func (_m *TrustedDevice) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TrustedDevice entity.
func (_m *TrustedDevice) QueryUser() *UserQuery {
	return NewTrustedDeviceClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this TrustedDevice.
// Note that you need to call TrustedDevice.Unwrap() before calling this method if this TrustedDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustedDevice) Update() *TrustedDeviceUpdateOne {
	return NewTrustedDeviceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustedDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustedDevice) Unwrap() *TrustedDevice {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrustedDevice is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustedDevice) String() string {
	var builder strings.Builder
	builder.WriteString("TrustedDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("fingerprint=")
	builder.WriteString(_m.Fingerprint)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("last_ip=")
	builder.WriteString(_m.LastIP)
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(_m.LastUsedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verified_at=")
	builder.WriteString(_m.VerifiedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TrustedDevices is a parsable slice of TrustedDevice.
type TrustedDevices []*TrustedDevice
