// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/conversation"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/message"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (_u *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConversationUpdate) SetUpdatedAt(v time.Time) *ConversationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ConversationUpdate) AddMessageIDs(ids ...int) *ConversationUpdate {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ConversationUpdate) AddMessages(v ...*Message) *ConversationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ConversationParticipant entity by IDs.
func (_u *ConversationUpdate) AddParticipantIDs(ids ...int) *ConversationUpdate {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ConversationParticipant entity.
func (_u *ConversationUpdate) AddParticipants(v ...*ConversationParticipant) *ConversationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (_u *ConversationUpdate) Mutation() *ConversationMutation {
	return _u.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ConversationUpdate) ClearMessages() *ConversationUpdate {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ConversationUpdate) RemoveMessageIDs(ids ...int) *ConversationUpdate {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ConversationUpdate) RemoveMessages(v ...*Message) *ConversationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ConversationParticipant entity.
func (_u *ConversationUpdate) ClearParticipants() *ConversationUpdate {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ConversationParticipant entities by IDs.
func (_u *ConversationUpdate) RemoveParticipantIDs(ids ...int) *ConversationUpdate {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ConversationParticipant entities.
func (_u *ConversationUpdate) RemoveParticipants(v ...*ConversationParticipant) *ConversationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConversationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConversationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConversationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ConversationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConversationUpdateOne) SetUpdatedAt(v time.Time) *ConversationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (_u *ConversationUpdateOne) AddMessageIDs(ids ...int) *ConversationUpdateOne {
	_u.mutation.AddMessageIDs(ids...)
	return _u
}

// AddMessages adds the "messages" edges to the Message entity.
func (_u *ConversationUpdateOne) AddMessages(v ...*Message) *ConversationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ConversationParticipant entity by IDs.
func (_u *ConversationUpdateOne) AddParticipantIDs(ids ...int) *ConversationUpdateOne {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ConversationParticipant entity.
func (_u *ConversationUpdateOne) AddParticipants(v ...*ConversationParticipant) *ConversationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (_u *ConversationUpdateOne) Mutation() *ConversationMutation {
	return _u.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (_u *ConversationUpdateOne) ClearMessages() *ConversationUpdateOne {
	_u.mutation.ClearMessages()
	return _u
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (_u *ConversationUpdateOne) RemoveMessageIDs(ids ...int) *ConversationUpdateOne {
	_u.mutation.RemoveMessageIDs(ids...)
	return _u
}

// RemoveMessages removes "messages" edges to Message entities.
func (_u *ConversationUpdateOne) RemoveMessages(v ...*Message) *ConversationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ConversationParticipant entity.
func (_u *ConversationUpdateOne) ClearParticipants() *ConversationUpdateOne {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ConversationParticipant entities by IDs.
func (_u *ConversationUpdateOne) RemoveParticipantIDs(ids ...int) *ConversationUpdateOne {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ConversationParticipant entities.
func (_u *ConversationUpdateOne) RemoveParticipants(v ...*ConversationParticipant) *ConversationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// Where appends a list predicates to the ConversationUpdate builder.
func (_u *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Conversation entity.
func (_u *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConversationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !_u.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
