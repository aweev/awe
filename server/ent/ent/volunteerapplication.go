// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/user"
	"awe/ent/ent/volunteerapplication"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VolunteerApplication is the model entity for the VolunteerApplication schema.
type VolunteerApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status volunteerapplication.Status `json:"status,omitempty"`
	// Motivation holds the value of the "motivation" field.
	Motivation string `json:"motivation,omitempty"`
	// Availability holds the value of the "availability" field.
	Availability map[string]interface{} `json:"availability,omitempty"`
	// BackgroundCheck holds the value of the "background_check" field.
	BackgroundCheck bool `json:"background_check,omitempty"`
	// BackgroundCheckDate holds the value of the "background_check_date" field.
	BackgroundCheckDate time.Time `json:"background_check_date,omitempty"`
	// References holds the value of the "references" field.
	References []map[string]interface{} `json:"references,omitempty"`
	// EmergencyContact holds the value of the "emergency_contact" field.
	EmergencyContact map[string]string `json:"emergency_contact,omitempty"`
	// ReviewedBy holds the value of the "reviewed_by" field.
	ReviewedBy string `json:"reviewed_by,omitempty"`
	// ReviewedAt holds the value of the "reviewed_at" field.
	ReviewedAt time.Time `json:"reviewed_at,omitempty"`
	// ReviewNotes holds the value of the "review_notes" field.
	ReviewNotes string `json:"review_notes,omitempty"`
	// InterviewDate holds the value of the "interview_date" field.
	InterviewDate time.Time `json:"interview_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VolunteerApplicationQuery when eager-loading is set.
	Edges                       VolunteerApplicationEdges `json:"edges"`
	user_volunteer_applications *int
	selectValues                sql.SelectValues
}

// VolunteerApplicationEdges holds the relations/edges for other nodes in the graph.
type VolunteerApplicationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// InterestedOpportunities holds the value of the interested_opportunities edge.
	InterestedOpportunities []*VolunteerOpportunity `json:"interested_opportunities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VolunteerApplicationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// InterestedOpportunitiesOrErr returns the InterestedOpportunities value or an error if the edge
// was not loaded in eager-loading.
func (e VolunteerApplicationEdges) InterestedOpportunitiesOrErr() ([]*VolunteerOpportunity, error) {
	if e.loadedTypes[1] {
		return e.InterestedOpportunities, nil
	}
	return nil, &NotLoadedError{edge: "interested_opportunities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VolunteerApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case volunteerapplication.FieldAvailability, volunteerapplication.FieldReferences, volunteerapplication.FieldEmergencyContact:
			values[i] = new([]byte)
		case volunteerapplication.FieldBackgroundCheck:
			values[i] = new(sql.NullBool)
		case volunteerapplication.FieldID:
			values[i] = new(sql.NullInt64)
		case volunteerapplication.FieldStatus, volunteerapplication.FieldMotivation, volunteerapplication.FieldReviewedBy, volunteerapplication.FieldReviewNotes:
			values[i] = new(sql.NullString)
		case volunteerapplication.FieldBackgroundCheckDate, volunteerapplication.FieldReviewedAt, volunteerapplication.FieldInterviewDate, volunteerapplication.FieldCreatedAt, volunteerapplication.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case volunteerapplication.ForeignKeys[0]: // user_volunteer_applications
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VolunteerApplication fields.
func (_m *VolunteerApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case volunteerapplication.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case volunteerapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = volunteerapplication.Status(value.String)
			}
		case volunteerapplication.FieldMotivation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field motivation", values[i])
			} else if value.Valid {
				_m.Motivation = value.String
			}
		case volunteerapplication.FieldAvailability:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Availability); err != nil {
					return fmt.Errorf("unmarshal field availability: %w", err)
				}
			}
		case volunteerapplication.FieldBackgroundCheck:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field background_check", values[i])
			} else if value.Valid {
				_m.BackgroundCheck = value.Bool
			}
		case volunteerapplication.FieldBackgroundCheckDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field background_check_date", values[i])
			} else if value.Valid {
				_m.BackgroundCheckDate = value.Time
			}
		case volunteerapplication.FieldReferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.References); err != nil {
					return fmt.Errorf("unmarshal field references: %w", err)
				}
			}
		case volunteerapplication.FieldEmergencyContact:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field emergency_contact", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.EmergencyContact); err != nil {
					return fmt.Errorf("unmarshal field emergency_contact: %w", err)
				}
			}
		case volunteerapplication.FieldReviewedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_by", values[i])
			} else if value.Valid {
				_m.ReviewedBy = value.String
			}
		case volunteerapplication.FieldReviewedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_at", values[i])
			} else if value.Valid {
				_m.ReviewedAt = value.Time
			}
		case volunteerapplication.FieldReviewNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_notes", values[i])
			} else if value.Valid {
				_m.ReviewNotes = value.String
			}
		case volunteerapplication.FieldInterviewDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field interview_date", values[i])
			} else if value.Valid {
				_m.InterviewDate = value.Time
			}
		case volunteerapplication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case volunteerapplication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case volunteerapplication.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_volunteer_applications", value)
			} else if value.Valid {
				_m.user_volunteer_applications = new(int)
				*_m.user_volunteer_applications = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VolunteerApplication.
// This includes values selected through modifiers, order, etc.
func (_m *VolunteerApplication) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the VolunteerApplication entity.
func (_m *VolunteerApplication) QueryUser() *UserQuery {
	return NewVolunteerApplicationClient(_m.config).QueryUser(_m)
}

// QueryInterestedOpportunities queries the "interested_opportunities" edge of the VolunteerApplication entity.
func (_m *VolunteerApplication) QueryInterestedOpportunities() *VolunteerOpportunityQuery {
	return NewVolunteerApplicationClient(_m.config).QueryInterestedOpportunities(_m)
}

// Update returns a builder for updating this VolunteerApplication.
// Note that you need to call VolunteerApplication.Unwrap() before calling this method if this VolunteerApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *VolunteerApplication) Update() *VolunteerApplicationUpdateOne {
	return NewVolunteerApplicationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the VolunteerApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *VolunteerApplication) Unwrap() *VolunteerApplication {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: VolunteerApplication is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *VolunteerApplication) String() string {
	var builder strings.Builder
	builder.WriteString("VolunteerApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("motivation=")
	builder.WriteString(_m.Motivation)
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(fmt.Sprintf("%v", _m.Availability))
	builder.WriteString(", ")
	builder.WriteString("background_check=")
	builder.WriteString(fmt.Sprintf("%v", _m.BackgroundCheck))
	builder.WriteString(", ")
	builder.WriteString("background_check_date=")
	builder.WriteString(_m.BackgroundCheckDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(fmt.Sprintf("%v", _m.References))
	builder.WriteString(", ")
	builder.WriteString("emergency_contact=")
	builder.WriteString(fmt.Sprintf("%v", _m.EmergencyContact))
	builder.WriteString(", ")
	builder.WriteString("reviewed_by=")
	builder.WriteString(_m.ReviewedBy)
	builder.WriteString(", ")
	builder.WriteString("reviewed_at=")
	builder.WriteString(_m.ReviewedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("review_notes=")
	builder.WriteString(_m.ReviewNotes)
	builder.WriteString(", ")
	builder.WriteString("interview_date=")
	builder.WriteString(_m.InterviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VolunteerApplications is a parsable slice of VolunteerApplication.
type VolunteerApplications []*VolunteerApplication
