// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/faqitem"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FaqItemUpdate is the builder for updating FaqItem entities.
type FaqItemUpdate struct {
	config
	hooks    []Hook
	mutation *FaqItemMutation
}

// Where appends a list predicates to the FaqItemUpdate builder.
func (_u *FaqItemUpdate) Where(ps ...predicate.FaqItem) *FaqItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *FaqItemUpdate) SetOrder(v int) *FaqItemUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *FaqItemUpdate) SetNillableOrder(v *int) *FaqItemUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *FaqItemUpdate) AddOrder(v int) *FaqItemUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetQuestion sets the "question" field.
func (_u *FaqItemUpdate) SetQuestion(v map[string]string) *FaqItemUpdate {
	_u.mutation.SetQuestion(v)
	return _u
}

// SetAnswer sets the "answer" field.
func (_u *FaqItemUpdate) SetAnswer(v map[string]string) *FaqItemUpdate {
	_u.mutation.SetAnswer(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FaqItemUpdate) SetUpdatedAt(v time.Time) *FaqItemUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetBlockID sets the "block" edge to the BlockFaq entity by ID.
func (_u *FaqItemUpdate) SetBlockID(id int) *FaqItemUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockFaq entity.
func (_u *FaqItemUpdate) SetBlock(v *BlockFaq) *FaqItemUpdate {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the FaqItemMutation object of the builder.
func (_u *FaqItemUpdate) Mutation() *FaqItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockFaq entity.
func (_u *FaqItemUpdate) ClearBlock() *FaqItemUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FaqItemUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FaqItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FaqItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FaqItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FaqItemUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := faqitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FaqItemUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FaqItem.block"`)
	}
	return nil
}

func (_u *FaqItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(faqitem.Table, faqitem.Columns, sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(faqitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(faqitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Question(); ok {
		_spec.SetField(faqitem.FieldQuestion, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Answer(); ok {
		_spec.SetField(faqitem.FieldAnswer, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(faqitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faqitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FaqItemUpdateOne is the builder for updating a single FaqItem entity.
type FaqItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FaqItemMutation
}

// SetOrder sets the "order" field.
func (_u *FaqItemUpdateOne) SetOrder(v int) *FaqItemUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *FaqItemUpdateOne) SetNillableOrder(v *int) *FaqItemUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *FaqItemUpdateOne) AddOrder(v int) *FaqItemUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetQuestion sets the "question" field.
func (_u *FaqItemUpdateOne) SetQuestion(v map[string]string) *FaqItemUpdateOne {
	_u.mutation.SetQuestion(v)
	return _u
}

// SetAnswer sets the "answer" field.
func (_u *FaqItemUpdateOne) SetAnswer(v map[string]string) *FaqItemUpdateOne {
	_u.mutation.SetAnswer(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FaqItemUpdateOne) SetUpdatedAt(v time.Time) *FaqItemUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetBlockID sets the "block" edge to the BlockFaq entity by ID.
func (_u *FaqItemUpdateOne) SetBlockID(id int) *FaqItemUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockFaq entity.
func (_u *FaqItemUpdateOne) SetBlock(v *BlockFaq) *FaqItemUpdateOne {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the FaqItemMutation object of the builder.
func (_u *FaqItemUpdateOne) Mutation() *FaqItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockFaq entity.
func (_u *FaqItemUpdateOne) ClearBlock() *FaqItemUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// Where appends a list predicates to the FaqItemUpdate builder.
func (_u *FaqItemUpdateOne) Where(ps ...predicate.FaqItem) *FaqItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FaqItemUpdateOne) Select(field string, fields ...string) *FaqItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FaqItem entity.
func (_u *FaqItemUpdateOne) Save(ctx context.Context) (*FaqItem, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FaqItemUpdateOne) SaveX(ctx context.Context) *FaqItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FaqItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FaqItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FaqItemUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := faqitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FaqItemUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FaqItem.block"`)
	}
	return nil
}

func (_u *FaqItemUpdateOne) sqlSave(ctx context.Context) (_node *FaqItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(faqitem.Table, faqitem.Columns, sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FaqItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, faqitem.FieldID)
		for _, f := range fields {
			if !faqitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != faqitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(faqitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(faqitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Question(); ok {
		_spec.SetField(faqitem.FieldQuestion, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Answer(); ok {
		_spec.SetField(faqitem.FieldAnswer, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(faqitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FaqItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faqitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
