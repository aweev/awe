// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/partnership"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandBenefitUpdate is the builder for updating BrandBenefit entities.
type BrandBenefitUpdate struct {
	config
	hooks    []Hook
	mutation *BrandBenefitMutation
}

// Where appends a list predicates to the BrandBenefitUpdate builder.
func (_u *BrandBenefitUpdate) Where(ps ...predicate.BrandBenefit) *BrandBenefitUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *BrandBenefitUpdate) SetType(v string) *BrandBenefitUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *BrandBenefitUpdate) SetNillableType(v *string) *BrandBenefitUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BrandBenefitUpdate) SetDescription(v string) *BrandBenefitUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BrandBenefitUpdate) SetNillableDescription(v *string) *BrandBenefitUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *BrandBenefitUpdate) SetURL(v string) *BrandBenefitUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *BrandBenefitUpdate) SetNillableURL(v *string) *BrandBenefitUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *BrandBenefitUpdate) ClearURL() *BrandBenefitUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetDate sets the "date" field.
func (_u *BrandBenefitUpdate) SetDate(v time.Time) *BrandBenefitUpdate {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *BrandBenefitUpdate) SetNillableDate(v *time.Time) *BrandBenefitUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *BrandBenefitUpdate) SetValue(v float64) *BrandBenefitUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *BrandBenefitUpdate) SetNillableValue(v *float64) *BrandBenefitUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *BrandBenefitUpdate) AddValue(v float64) *BrandBenefitUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *BrandBenefitUpdate) ClearValue() *BrandBenefitUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *BrandBenefitUpdate) SetPartnershipID(id int) *BrandBenefitUpdate {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *BrandBenefitUpdate) SetPartnership(v *Partnership) *BrandBenefitUpdate {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the BrandBenefitMutation object of the builder.
func (_u *BrandBenefitUpdate) Mutation() *BrandBenefitMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *BrandBenefitUpdate) ClearPartnership() *BrandBenefitUpdate {
	_u.mutation.ClearPartnership()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BrandBenefitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BrandBenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BrandBenefitUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BrandBenefitUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BrandBenefitUpdate) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BrandBenefit.partnership"`)
	}
	return nil
}

func (_u *BrandBenefitUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(brandbenefit.Table, brandbenefit.Columns, sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(brandbenefit.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(brandbenefit.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(brandbenefit.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(brandbenefit.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(brandbenefit.FieldDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(brandbenefit.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(brandbenefit.FieldValue, field.TypeFloat64, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(brandbenefit.FieldValue, field.TypeFloat64)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brandbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BrandBenefitUpdateOne is the builder for updating a single BrandBenefit entity.
type BrandBenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BrandBenefitMutation
}

// SetType sets the "type" field.
func (_u *BrandBenefitUpdateOne) SetType(v string) *BrandBenefitUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *BrandBenefitUpdateOne) SetNillableType(v *string) *BrandBenefitUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *BrandBenefitUpdateOne) SetDescription(v string) *BrandBenefitUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *BrandBenefitUpdateOne) SetNillableDescription(v *string) *BrandBenefitUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *BrandBenefitUpdateOne) SetURL(v string) *BrandBenefitUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *BrandBenefitUpdateOne) SetNillableURL(v *string) *BrandBenefitUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *BrandBenefitUpdateOne) ClearURL() *BrandBenefitUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetDate sets the "date" field.
func (_u *BrandBenefitUpdateOne) SetDate(v time.Time) *BrandBenefitUpdateOne {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *BrandBenefitUpdateOne) SetNillableDate(v *time.Time) *BrandBenefitUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *BrandBenefitUpdateOne) SetValue(v float64) *BrandBenefitUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *BrandBenefitUpdateOne) SetNillableValue(v *float64) *BrandBenefitUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *BrandBenefitUpdateOne) AddValue(v float64) *BrandBenefitUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *BrandBenefitUpdateOne) ClearValue() *BrandBenefitUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *BrandBenefitUpdateOne) SetPartnershipID(id int) *BrandBenefitUpdateOne {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *BrandBenefitUpdateOne) SetPartnership(v *Partnership) *BrandBenefitUpdateOne {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the BrandBenefitMutation object of the builder.
func (_u *BrandBenefitUpdateOne) Mutation() *BrandBenefitMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *BrandBenefitUpdateOne) ClearPartnership() *BrandBenefitUpdateOne {
	_u.mutation.ClearPartnership()
	return _u
}

// Where appends a list predicates to the BrandBenefitUpdate builder.
func (_u *BrandBenefitUpdateOne) Where(ps ...predicate.BrandBenefit) *BrandBenefitUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BrandBenefitUpdateOne) Select(field string, fields ...string) *BrandBenefitUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BrandBenefit entity.
func (_u *BrandBenefitUpdateOne) Save(ctx context.Context) (*BrandBenefit, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BrandBenefitUpdateOne) SaveX(ctx context.Context) *BrandBenefit {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BrandBenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BrandBenefitUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BrandBenefitUpdateOne) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BrandBenefit.partnership"`)
	}
	return nil
}

func (_u *BrandBenefitUpdateOne) sqlSave(ctx context.Context) (_node *BrandBenefit, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(brandbenefit.Table, brandbenefit.Columns, sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BrandBenefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, brandbenefit.FieldID)
		for _, f := range fields {
			if !brandbenefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != brandbenefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(brandbenefit.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(brandbenefit.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(brandbenefit.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(brandbenefit.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(brandbenefit.FieldDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(brandbenefit.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(brandbenefit.FieldValue, field.TypeFloat64, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(brandbenefit.FieldValue, field.TypeFloat64)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BrandBenefit{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brandbenefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
