// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/job"
	"awe/ent/ent/joblog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobLogCreate is the builder for creating a JobLog entity.
type JobLogCreate struct {
	config
	mutation *JobLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *JobLogCreate) SetStatus(v joblog.Status) *JobLogCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetMessage sets the "message" field.
func (_c *JobLogCreate) SetMessage(v string) *JobLogCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *JobLogCreate) SetMetadata(v map[string]interface{}) *JobLogCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobLogCreate) SetCreatedAt(v time.Time) *JobLogCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobLogCreate) SetNillableCreatedAt(v *time.Time) *JobLogCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_c *JobLogCreate) SetJobID(id int) *JobLogCreate {
	_c.mutation.SetJobID(id)
	return _c
}

// SetJob sets the "job" edge to the Job entity.
func (_c *JobLogCreate) SetJob(v *Job) *JobLogCreate {
	return _c.SetJobID(v.ID)
}

// Mutation returns the JobLogMutation object of the builder.
func (_c *JobLogCreate) Mutation() *JobLogMutation {
	return _c.mutation
}

// Save creates the JobLog in the database.
func (_c *JobLogCreate) Save(ctx context.Context) (*JobLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobLogCreate) SaveX(ctx context.Context) *JobLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobLogCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := joblog.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobLogCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "JobLog.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := joblog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "JobLog.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "JobLog.message"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobLog.created_at"`)}
	}
	if len(_c.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "JobLog.job"`)}
	}
	return nil
}

func (_c *JobLogCreate) sqlSave(ctx context.Context) (*JobLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobLogCreate) createSpec() (*JobLog, *sqlgraph.CreateSpec) {
	var (
		_node = &JobLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(joblog.Table, sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(joblog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(joblog.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(joblog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(joblog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobLog.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobLogUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *JobLogCreate) OnConflict(opts ...sql.ConflictOption) *JobLogUpsertOne {
	_c.conflict = opts
	return &JobLogUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *JobLogCreate) OnConflictColumns(columns ...string) *JobLogUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &JobLogUpsertOne{
		create: _c,
	}
}

type (
	// JobLogUpsertOne is the builder for "upsert"-ing
	//  one JobLog node.
	JobLogUpsertOne struct {
		create *JobLogCreate
	}

	// JobLogUpsert is the "OnConflict" setter.
	JobLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *JobLogUpsert) SetStatus(v joblog.Status) *JobLogUpsert {
	u.Set(joblog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobLogUpsert) UpdateStatus() *JobLogUpsert {
	u.SetExcluded(joblog.FieldStatus)
	return u
}

// SetMessage sets the "message" field.
func (u *JobLogUpsert) SetMessage(v string) *JobLogUpsert {
	u.Set(joblog.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *JobLogUpsert) UpdateMessage() *JobLogUpsert {
	u.SetExcluded(joblog.FieldMessage)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *JobLogUpsert) SetMetadata(v map[string]interface{}) *JobLogUpsert {
	u.Set(joblog.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobLogUpsert) UpdateMetadata() *JobLogUpsert {
	u.SetExcluded(joblog.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobLogUpsert) ClearMetadata() *JobLogUpsert {
	u.SetNull(joblog.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.JobLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JobLogUpsertOne) UpdateNewValues() *JobLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(joblog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobLogUpsertOne) Ignore() *JobLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobLogUpsertOne) DoNothing() *JobLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobLogCreate.OnConflict
// documentation for more info.
func (u *JobLogUpsertOne) Update(set func(*JobLogUpsert)) *JobLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *JobLogUpsertOne) SetStatus(v joblog.Status) *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobLogUpsertOne) UpdateStatus() *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateStatus()
	})
}

// SetMessage sets the "message" field.
func (u *JobLogUpsertOne) SetMessage(v string) *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *JobLogUpsertOne) UpdateMessage() *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateMessage()
	})
}

// SetMetadata sets the "metadata" field.
func (u *JobLogUpsertOne) SetMetadata(v map[string]interface{}) *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobLogUpsertOne) UpdateMetadata() *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobLogUpsertOne) ClearMetadata() *JobLogUpsertOne {
	return u.Update(func(s *JobLogUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *JobLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobLogCreateBulk is the builder for creating many JobLog entities in bulk.
type JobLogCreateBulk struct {
	config
	err      error
	builders []*JobLogCreate
	conflict []sql.ConflictOption
}

// Save creates the JobLog entities in the database.
func (_c *JobLogCreateBulk) Save(ctx context.Context) ([]*JobLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*JobLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobLogCreateBulk) SaveX(ctx context.Context) []*JobLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.JobLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobLogUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *JobLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobLogUpsertBulk {
	_c.conflict = opts
	return &JobLogUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.JobLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *JobLogCreateBulk) OnConflictColumns(columns ...string) *JobLogUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &JobLogUpsertBulk{
		create: _c,
	}
}

// JobLogUpsertBulk is the builder for "upsert"-ing
// a bulk of JobLog nodes.
type JobLogUpsertBulk struct {
	create *JobLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.JobLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JobLogUpsertBulk) UpdateNewValues() *JobLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(joblog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.JobLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobLogUpsertBulk) Ignore() *JobLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobLogUpsertBulk) DoNothing() *JobLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobLogCreateBulk.OnConflict
// documentation for more info.
func (u *JobLogUpsertBulk) Update(set func(*JobLogUpsert)) *JobLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *JobLogUpsertBulk) SetStatus(v joblog.Status) *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobLogUpsertBulk) UpdateStatus() *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateStatus()
	})
}

// SetMessage sets the "message" field.
func (u *JobLogUpsertBulk) SetMessage(v string) *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *JobLogUpsertBulk) UpdateMessage() *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateMessage()
	})
}

// SetMetadata sets the "metadata" field.
func (u *JobLogUpsertBulk) SetMetadata(v map[string]interface{}) *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobLogUpsertBulk) UpdateMetadata() *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobLogUpsertBulk) ClearMetadata() *JobLogUpsertBulk {
	return u.Update(func(s *JobLogUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *JobLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
