// Code generated by ent, DO NOT EDIT.

package blockmap

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldInternalName, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldLongitude, v))
}

// Zoom applies equality check predicate on the "zoom" field. It's identical to ZoomEQ.
func Zoom(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldZoom, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldUpdatedAt, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldContainsFold(FieldInternalName, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldLatitude, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldLongitude, v))
}

// ZoomEQ applies the EQ predicate on the "zoom" field.
func ZoomEQ(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldZoom, v))
}

// ZoomNEQ applies the NEQ predicate on the "zoom" field.
func ZoomNEQ(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldZoom, v))
}

// ZoomIn applies the In predicate on the "zoom" field.
func ZoomIn(vs ...int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldZoom, vs...))
}

// ZoomNotIn applies the NotIn predicate on the "zoom" field.
func ZoomNotIn(vs ...int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldZoom, vs...))
}

// ZoomGT applies the GT predicate on the "zoom" field.
func ZoomGT(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldZoom, v))
}

// ZoomGTE applies the GTE predicate on the "zoom" field.
func ZoomGTE(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldZoom, v))
}

// ZoomLT applies the LT predicate on the "zoom" field.
func ZoomLT(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldZoom, v))
}

// ZoomLTE applies the LTE predicate on the "zoom" field.
func ZoomLTE(v int) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldZoom, v))
}

// MarkersIsNil applies the IsNil predicate on the "markers" field.
func MarkersIsNil() predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIsNull(FieldMarkers))
}

// MarkersNotNil applies the NotNil predicate on the "markers" field.
func MarkersNotNil() predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotNull(FieldMarkers))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlockMap {
	return predicate.BlockMap(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockMap {
	return predicate.BlockMap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockMap {
	return predicate.BlockMap(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockMap) predicate.BlockMap {
	return predicate.BlockMap(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockMap) predicate.BlockMap {
	return predicate.BlockMap(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockMap) predicate.BlockMap {
	return predicate.BlockMap(sql.NotPredicates(p))
}
