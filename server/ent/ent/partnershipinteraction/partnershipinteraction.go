// Code generated by ent, DO NOT EDIT.

package partnershipinteraction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the partnershipinteraction type in the database.
	Label = "partnership_interaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInteractionType holds the string denoting the interaction_type field in the database.
	FieldInteractionType = "interaction_type"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldInteractedAt holds the string denoting the interacted_at field in the database.
	FieldInteractedAt = "interacted_at"
	// FieldAttendees holds the string denoting the attendees field in the database.
	FieldAttendees = "attendees"
	// FieldFollowUpRequired holds the string denoting the follow_up_required field in the database.
	FieldFollowUpRequired = "follow_up_required"
	// FieldFollowUpDate holds the string denoting the follow_up_date field in the database.
	FieldFollowUpDate = "follow_up_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePartnership holds the string denoting the partnership edge name in mutations.
	EdgePartnership = "partnership"
	// Table holds the table name of the partnershipinteraction in the database.
	Table = "partnership_interactions"
	// PartnershipTable is the table that holds the partnership relation/edge.
	PartnershipTable = "partnership_interactions"
	// PartnershipInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipInverseTable = "partnerships"
	// PartnershipColumn is the table column denoting the partnership relation/edge.
	PartnershipColumn = "partnership_interactions"
)

// Columns holds all SQL columns for partnershipinteraction fields.
var Columns = []string{
	FieldID,
	FieldInteractionType,
	FieldSubject,
	FieldSummary,
	FieldInteractedAt,
	FieldAttendees,
	FieldFollowUpRequired,
	FieldFollowUpDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "partnership_interactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partnership_interactions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInteractedAt holds the default value on creation for the "interacted_at" field.
	DefaultInteractedAt func() time.Time
	// DefaultFollowUpRequired holds the default value on creation for the "follow_up_required" field.
	DefaultFollowUpRequired bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PartnershipInteraction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInteractionType orders the results by the interaction_type field.
func ByInteractionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInteractionType, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByInteractedAt orders the results by the interacted_at field.
func ByInteractedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInteractedAt, opts...).ToFunc()
}

// ByFollowUpRequired orders the results by the follow_up_required field.
func ByFollowUpRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowUpRequired, opts...).ToFunc()
}

// ByFollowUpDate orders the results by the follow_up_date field.
func ByFollowUpDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowUpDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartnershipField orders the results by partnership field.
func ByPartnershipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipStep(), sql.OrderByField(field, opts...))
	}
}
func newPartnershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
	)
}
