// Code generated by ent, DO NOT EDIT.

package partnershipinteraction

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldID, id))
}

// InteractionType applies equality check predicate on the "interaction_type" field. It's identical to InteractionTypeEQ.
func InteractionType(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldInteractionType, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldSubject, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldSummary, v))
}

// InteractedAt applies equality check predicate on the "interacted_at" field. It's identical to InteractedAtEQ.
func InteractedAt(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldInteractedAt, v))
}

// FollowUpRequired applies equality check predicate on the "follow_up_required" field. It's identical to FollowUpRequiredEQ.
func FollowUpRequired(v bool) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldFollowUpRequired, v))
}

// FollowUpDate applies equality check predicate on the "follow_up_date" field. It's identical to FollowUpDateEQ.
func FollowUpDate(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldFollowUpDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldUpdatedAt, v))
}

// InteractionTypeEQ applies the EQ predicate on the "interaction_type" field.
func InteractionTypeEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldInteractionType, v))
}

// InteractionTypeNEQ applies the NEQ predicate on the "interaction_type" field.
func InteractionTypeNEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldInteractionType, v))
}

// InteractionTypeIn applies the In predicate on the "interaction_type" field.
func InteractionTypeIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldInteractionType, vs...))
}

// InteractionTypeNotIn applies the NotIn predicate on the "interaction_type" field.
func InteractionTypeNotIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldInteractionType, vs...))
}

// InteractionTypeGT applies the GT predicate on the "interaction_type" field.
func InteractionTypeGT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldInteractionType, v))
}

// InteractionTypeGTE applies the GTE predicate on the "interaction_type" field.
func InteractionTypeGTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldInteractionType, v))
}

// InteractionTypeLT applies the LT predicate on the "interaction_type" field.
func InteractionTypeLT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldInteractionType, v))
}

// InteractionTypeLTE applies the LTE predicate on the "interaction_type" field.
func InteractionTypeLTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldInteractionType, v))
}

// InteractionTypeContains applies the Contains predicate on the "interaction_type" field.
func InteractionTypeContains(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContains(FieldInteractionType, v))
}

// InteractionTypeHasPrefix applies the HasPrefix predicate on the "interaction_type" field.
func InteractionTypeHasPrefix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasPrefix(FieldInteractionType, v))
}

// InteractionTypeHasSuffix applies the HasSuffix predicate on the "interaction_type" field.
func InteractionTypeHasSuffix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasSuffix(FieldInteractionType, v))
}

// InteractionTypeEqualFold applies the EqualFold predicate on the "interaction_type" field.
func InteractionTypeEqualFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEqualFold(FieldInteractionType, v))
}

// InteractionTypeContainsFold applies the ContainsFold predicate on the "interaction_type" field.
func InteractionTypeContainsFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContainsFold(FieldInteractionType, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContainsFold(FieldSubject, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIsNull(FieldSummary))
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotNull(FieldSummary))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldContainsFold(FieldSummary, v))
}

// InteractedAtEQ applies the EQ predicate on the "interacted_at" field.
func InteractedAtEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldInteractedAt, v))
}

// InteractedAtNEQ applies the NEQ predicate on the "interacted_at" field.
func InteractedAtNEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldInteractedAt, v))
}

// InteractedAtIn applies the In predicate on the "interacted_at" field.
func InteractedAtIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldInteractedAt, vs...))
}

// InteractedAtNotIn applies the NotIn predicate on the "interacted_at" field.
func InteractedAtNotIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldInteractedAt, vs...))
}

// InteractedAtGT applies the GT predicate on the "interacted_at" field.
func InteractedAtGT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldInteractedAt, v))
}

// InteractedAtGTE applies the GTE predicate on the "interacted_at" field.
func InteractedAtGTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldInteractedAt, v))
}

// InteractedAtLT applies the LT predicate on the "interacted_at" field.
func InteractedAtLT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldInteractedAt, v))
}

// InteractedAtLTE applies the LTE predicate on the "interacted_at" field.
func InteractedAtLTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldInteractedAt, v))
}

// FollowUpRequiredEQ applies the EQ predicate on the "follow_up_required" field.
func FollowUpRequiredEQ(v bool) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldFollowUpRequired, v))
}

// FollowUpRequiredNEQ applies the NEQ predicate on the "follow_up_required" field.
func FollowUpRequiredNEQ(v bool) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldFollowUpRequired, v))
}

// FollowUpDateEQ applies the EQ predicate on the "follow_up_date" field.
func FollowUpDateEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldFollowUpDate, v))
}

// FollowUpDateNEQ applies the NEQ predicate on the "follow_up_date" field.
func FollowUpDateNEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldFollowUpDate, v))
}

// FollowUpDateIn applies the In predicate on the "follow_up_date" field.
func FollowUpDateIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldFollowUpDate, vs...))
}

// FollowUpDateNotIn applies the NotIn predicate on the "follow_up_date" field.
func FollowUpDateNotIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldFollowUpDate, vs...))
}

// FollowUpDateGT applies the GT predicate on the "follow_up_date" field.
func FollowUpDateGT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldFollowUpDate, v))
}

// FollowUpDateGTE applies the GTE predicate on the "follow_up_date" field.
func FollowUpDateGTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldFollowUpDate, v))
}

// FollowUpDateLT applies the LT predicate on the "follow_up_date" field.
func FollowUpDateLT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldFollowUpDate, v))
}

// FollowUpDateLTE applies the LTE predicate on the "follow_up_date" field.
func FollowUpDateLTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldFollowUpDate, v))
}

// FollowUpDateIsNil applies the IsNil predicate on the "follow_up_date" field.
func FollowUpDateIsNil() predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIsNull(FieldFollowUpDate))
}

// FollowUpDateNotNil applies the NotNil predicate on the "follow_up_date" field.
func FollowUpDateNotNil() predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotNull(FieldFollowUpDate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPartnership applies the HasEdge predicate on the "partnership" edge.
func HasPartnership() predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnershipWith applies the HasEdge predicate on the "partnership" edge with a given conditions (other predicates).
func HasPartnershipWith(preds ...predicate.Partnership) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(func(s *sql.Selector) {
		step := newPartnershipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnershipInteraction) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnershipInteraction) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnershipInteraction) predicate.PartnershipInteraction {
	return predicate.PartnershipInteraction(sql.NotPredicates(p))
}
