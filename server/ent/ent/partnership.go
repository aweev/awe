// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Partnership is the model entity for the Partnership schema.
type Partnership struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type partnership.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status partnership.Status `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// RenewalDate holds the value of the "renewal_date" field.
	RenewalDate time.Time `json:"renewal_date,omitempty"`
	// Benefits holds the value of the "benefits" field.
	Benefits []string `json:"benefits,omitempty"`
	// Deliverables holds the value of the "deliverables" field.
	Deliverables []string `json:"deliverables,omitempty"`
	// Requirements holds the value of the "requirements" field.
	Requirements []string `json:"requirements,omitempty"`
	// LastContact holds the value of the "last_contact" field.
	LastContact time.Time `json:"last_contact,omitempty"`
	// NextFollowUp holds the value of the "next_follow_up" field.
	NextFollowUp time.Time `json:"next_follow_up,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnershipQuery when eager-loading is set.
	Edges                     PartnershipEdges `json:"edges"`
	organization_partnerships *int
	user_managed_partnerships *int
	selectValues              sql.SelectValues
}

// PartnershipEdges holds the relations/edges for other nodes in the graph.
type PartnershipEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Manager holds the value of the manager edge.
	Manager *User `json:"manager,omitempty"`
	// PrimaryContacts holds the value of the primary_contacts edge.
	PrimaryContacts []*User `json:"primary_contacts,omitempty"`
	// Reports holds the value of the reports edge.
	Reports []*PartnershipReport `json:"reports,omitempty"`
	// Interactions holds the value of the interactions edge.
	Interactions []*PartnershipInteraction `json:"interactions,omitempty"`
	// Renewals holds the value of the renewals edge.
	Renewals []*PartnershipRenewal `json:"renewals,omitempty"`
	// BrandBenefits holds the value of the brand_benefits edge.
	BrandBenefits []*BrandBenefit `json:"brand_benefits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnershipEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ManagerOrErr returns the Manager value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnershipEdges) ManagerOrErr() (*User, error) {
	if e.Manager != nil {
		return e.Manager, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "manager"}
}

// PrimaryContactsOrErr returns the PrimaryContacts value or an error if the edge
// was not loaded in eager-loading.
func (e PartnershipEdges) PrimaryContactsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.PrimaryContacts, nil
	}
	return nil, &NotLoadedError{edge: "primary_contacts"}
}

// ReportsOrErr returns the Reports value or an error if the edge
// was not loaded in eager-loading.
func (e PartnershipEdges) ReportsOrErr() ([]*PartnershipReport, error) {
	if e.loadedTypes[3] {
		return e.Reports, nil
	}
	return nil, &NotLoadedError{edge: "reports"}
}

// InteractionsOrErr returns the Interactions value or an error if the edge
// was not loaded in eager-loading.
func (e PartnershipEdges) InteractionsOrErr() ([]*PartnershipInteraction, error) {
	if e.loadedTypes[4] {
		return e.Interactions, nil
	}
	return nil, &NotLoadedError{edge: "interactions"}
}

// RenewalsOrErr returns the Renewals value or an error if the edge
// was not loaded in eager-loading.
func (e PartnershipEdges) RenewalsOrErr() ([]*PartnershipRenewal, error) {
	if e.loadedTypes[5] {
		return e.Renewals, nil
	}
	return nil, &NotLoadedError{edge: "renewals"}
}

// BrandBenefitsOrErr returns the BrandBenefits value or an error if the edge
// was not loaded in eager-loading.
func (e PartnershipEdges) BrandBenefitsOrErr() ([]*BrandBenefit, error) {
	if e.loadedTypes[6] {
		return e.BrandBenefits, nil
	}
	return nil, &NotLoadedError{edge: "brand_benefits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Partnership) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partnership.FieldName, partnership.FieldDescription, partnership.FieldBenefits, partnership.FieldDeliverables, partnership.FieldRequirements:
			values[i] = new([]byte)
		case partnership.FieldValue:
			values[i] = new(sql.NullFloat64)
		case partnership.FieldID:
			values[i] = new(sql.NullInt64)
		case partnership.FieldSlug, partnership.FieldType, partnership.FieldStatus, partnership.FieldCurrency:
			values[i] = new(sql.NullString)
		case partnership.FieldStartDate, partnership.FieldEndDate, partnership.FieldRenewalDate, partnership.FieldLastContact, partnership.FieldNextFollowUp, partnership.FieldCreatedAt, partnership.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case partnership.ForeignKeys[0]: // organization_partnerships
			values[i] = new(sql.NullInt64)
		case partnership.ForeignKeys[1]: // user_managed_partnerships
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Partnership fields.
func (_m *Partnership) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partnership.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case partnership.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case partnership.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case partnership.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = partnership.Type(value.String)
			}
		case partnership.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = partnership.Status(value.String)
			}
		case partnership.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case partnership.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.Float64
			}
		case partnership.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case partnership.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case partnership.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case partnership.FieldRenewalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_date", values[i])
			} else if value.Valid {
				_m.RenewalDate = value.Time
			}
		case partnership.FieldBenefits:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field benefits", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Benefits); err != nil {
					return fmt.Errorf("unmarshal field benefits: %w", err)
				}
			}
		case partnership.FieldDeliverables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field deliverables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Deliverables); err != nil {
					return fmt.Errorf("unmarshal field deliverables: %w", err)
				}
			}
		case partnership.FieldRequirements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field requirements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Requirements); err != nil {
					return fmt.Errorf("unmarshal field requirements: %w", err)
				}
			}
		case partnership.FieldLastContact:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_contact", values[i])
			} else if value.Valid {
				_m.LastContact = value.Time
			}
		case partnership.FieldNextFollowUp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_follow_up", values[i])
			} else if value.Valid {
				_m.NextFollowUp = value.Time
			}
		case partnership.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case partnership.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case partnership.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field organization_partnerships", value)
			} else if value.Valid {
				_m.organization_partnerships = new(int)
				*_m.organization_partnerships = int(value.Int64)
			}
		case partnership.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_managed_partnerships", value)
			} else if value.Valid {
				_m.user_managed_partnerships = new(int)
				*_m.user_managed_partnerships = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Partnership.
// This includes values selected through modifiers, order, etc.
func (_m *Partnership) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Partnership entity.
func (_m *Partnership) QueryOrganization() *OrganizationQuery {
	return NewPartnershipClient(_m.config).QueryOrganization(_m)
}

// QueryManager queries the "manager" edge of the Partnership entity.
func (_m *Partnership) QueryManager() *UserQuery {
	return NewPartnershipClient(_m.config).QueryManager(_m)
}

// QueryPrimaryContacts queries the "primary_contacts" edge of the Partnership entity.
func (_m *Partnership) QueryPrimaryContacts() *UserQuery {
	return NewPartnershipClient(_m.config).QueryPrimaryContacts(_m)
}

// QueryReports queries the "reports" edge of the Partnership entity.
func (_m *Partnership) QueryReports() *PartnershipReportQuery {
	return NewPartnershipClient(_m.config).QueryReports(_m)
}

// QueryInteractions queries the "interactions" edge of the Partnership entity.
func (_m *Partnership) QueryInteractions() *PartnershipInteractionQuery {
	return NewPartnershipClient(_m.config).QueryInteractions(_m)
}

// QueryRenewals queries the "renewals" edge of the Partnership entity.
func (_m *Partnership) QueryRenewals() *PartnershipRenewalQuery {
	return NewPartnershipClient(_m.config).QueryRenewals(_m)
}

// QueryBrandBenefits queries the "brand_benefits" edge of the Partnership entity.
func (_m *Partnership) QueryBrandBenefits() *BrandBenefitQuery {
	return NewPartnershipClient(_m.config).QueryBrandBenefits(_m)
}

// Update returns a builder for updating this Partnership.
// Note that you need to call Partnership.Unwrap() before calling this method if this Partnership
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Partnership) Update() *PartnershipUpdateOne {
	return NewPartnershipClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Partnership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Partnership) Unwrap() *Partnership {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Partnership is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Partnership) String() string {
	var builder strings.Builder
	builder.WriteString("Partnership(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("renewal_date=")
	builder.WriteString(_m.RenewalDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("benefits=")
	builder.WriteString(fmt.Sprintf("%v", _m.Benefits))
	builder.WriteString(", ")
	builder.WriteString("deliverables=")
	builder.WriteString(fmt.Sprintf("%v", _m.Deliverables))
	builder.WriteString(", ")
	builder.WriteString("requirements=")
	builder.WriteString(fmt.Sprintf("%v", _m.Requirements))
	builder.WriteString(", ")
	builder.WriteString("last_contact=")
	builder.WriteString(_m.LastContact.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("next_follow_up=")
	builder.WriteString(_m.NextFollowUp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Partnerships is a parsable slice of Partnership.
type Partnerships []*Partnership
