// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockcta"
	"awe/ent/ent/contentblock"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlockCta is the model entity for the BlockCta schema.
type BlockCta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// Badge holds the value of the "badge" field.
	Badge map[string]string `json:"badge,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// PrimaryButtonText holds the value of the "primary_button_text" field.
	PrimaryButtonText map[string]string `json:"primary_button_text,omitempty"`
	// PrimaryButtonHref holds the value of the "primary_button_href" field.
	PrimaryButtonHref string `json:"primary_button_href,omitempty"`
	// PrimaryButtonStyle holds the value of the "primary_button_style" field.
	PrimaryButtonStyle blockcta.PrimaryButtonStyle `json:"primary_button_style,omitempty"`
	// SecondaryButtonText holds the value of the "secondary_button_text" field.
	SecondaryButtonText map[string]string `json:"secondary_button_text,omitempty"`
	// SecondaryButtonHref holds the value of the "secondary_button_href" field.
	SecondaryButtonHref string `json:"secondary_button_href,omitempty"`
	// SecondaryButtonStyle holds the value of the "secondary_button_style" field.
	SecondaryButtonStyle blockcta.SecondaryButtonStyle `json:"secondary_button_style,omitempty"`
	// TextAlign holds the value of the "text_align" field.
	TextAlign blockcta.TextAlign `json:"text_align,omitempty"`
	// ColorScheme holds the value of the "color_scheme" field.
	ColorScheme blockcta.ColorScheme `json:"color_scheme,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockCtaQuery when eager-loading is set.
	Edges                   BlockCtaEdges `json:"edges"`
	content_block_block_cta *int
	selectValues            sql.SelectValues
}

// BlockCtaEdges holds the relations/edges for other nodes in the graph.
type BlockCtaEdges struct {
	// ContentBlock holds the value of the content_block edge.
	ContentBlock *ContentBlock `json:"content_block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContentBlockOrErr returns the ContentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockCtaEdges) ContentBlockOrErr() (*ContentBlock, error) {
	if e.ContentBlock != nil {
		return e.ContentBlock, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contentblock.Label}
	}
	return nil, &NotLoadedError{edge: "content_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockCta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockcta.FieldBadge, blockcta.FieldTitle, blockcta.FieldDescription, blockcta.FieldPrimaryButtonText, blockcta.FieldSecondaryButtonText:
			values[i] = new([]byte)
		case blockcta.FieldID:
			values[i] = new(sql.NullInt64)
		case blockcta.FieldInternalName, blockcta.FieldPrimaryButtonHref, blockcta.FieldPrimaryButtonStyle, blockcta.FieldSecondaryButtonHref, blockcta.FieldSecondaryButtonStyle, blockcta.FieldTextAlign, blockcta.FieldColorScheme:
			values[i] = new(sql.NullString)
		case blockcta.FieldCreatedAt, blockcta.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blockcta.ForeignKeys[0]: // content_block_block_cta
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockCta fields.
func (_m *BlockCta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockcta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case blockcta.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				_m.InternalName = value.String
			}
		case blockcta.FieldBadge:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field badge", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Badge); err != nil {
					return fmt.Errorf("unmarshal field badge: %w", err)
				}
			}
		case blockcta.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case blockcta.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case blockcta.FieldPrimaryButtonText:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field primary_button_text", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.PrimaryButtonText); err != nil {
					return fmt.Errorf("unmarshal field primary_button_text: %w", err)
				}
			}
		case blockcta.FieldPrimaryButtonHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_button_href", values[i])
			} else if value.Valid {
				_m.PrimaryButtonHref = value.String
			}
		case blockcta.FieldPrimaryButtonStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_button_style", values[i])
			} else if value.Valid {
				_m.PrimaryButtonStyle = blockcta.PrimaryButtonStyle(value.String)
			}
		case blockcta.FieldSecondaryButtonText:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_button_text", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.SecondaryButtonText); err != nil {
					return fmt.Errorf("unmarshal field secondary_button_text: %w", err)
				}
			}
		case blockcta.FieldSecondaryButtonHref:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_button_href", values[i])
			} else if value.Valid {
				_m.SecondaryButtonHref = value.String
			}
		case blockcta.FieldSecondaryButtonStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secondary_button_style", values[i])
			} else if value.Valid {
				_m.SecondaryButtonStyle = blockcta.SecondaryButtonStyle(value.String)
			}
		case blockcta.FieldTextAlign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_align", values[i])
			} else if value.Valid {
				_m.TextAlign = blockcta.TextAlign(value.String)
			}
		case blockcta.FieldColorScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_scheme", values[i])
			} else if value.Valid {
				_m.ColorScheme = blockcta.ColorScheme(value.String)
			}
		case blockcta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case blockcta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case blockcta.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field content_block_block_cta", value)
			} else if value.Valid {
				_m.content_block_block_cta = new(int)
				*_m.content_block_block_cta = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockCta.
// This includes values selected through modifiers, order, etc.
func (_m *BlockCta) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryContentBlock queries the "content_block" edge of the BlockCta entity.
func (_m *BlockCta) QueryContentBlock() *ContentBlockQuery {
	return NewBlockCtaClient(_m.config).QueryContentBlock(_m)
}

// Update returns a builder for updating this BlockCta.
// Note that you need to call BlockCta.Unwrap() before calling this method if this BlockCta
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BlockCta) Update() *BlockCtaUpdateOne {
	return NewBlockCtaClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BlockCta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BlockCta) Unwrap() *BlockCta {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockCta is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BlockCta) String() string {
	var builder strings.Builder
	builder.WriteString("BlockCta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("internal_name=")
	builder.WriteString(_m.InternalName)
	builder.WriteString(", ")
	builder.WriteString("badge=")
	builder.WriteString(fmt.Sprintf("%v", _m.Badge))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("primary_button_text=")
	builder.WriteString(fmt.Sprintf("%v", _m.PrimaryButtonText))
	builder.WriteString(", ")
	builder.WriteString("primary_button_href=")
	builder.WriteString(_m.PrimaryButtonHref)
	builder.WriteString(", ")
	builder.WriteString("primary_button_style=")
	builder.WriteString(fmt.Sprintf("%v", _m.PrimaryButtonStyle))
	builder.WriteString(", ")
	builder.WriteString("secondary_button_text=")
	builder.WriteString(fmt.Sprintf("%v", _m.SecondaryButtonText))
	builder.WriteString(", ")
	builder.WriteString("secondary_button_href=")
	builder.WriteString(_m.SecondaryButtonHref)
	builder.WriteString(", ")
	builder.WriteString("secondary_button_style=")
	builder.WriteString(fmt.Sprintf("%v", _m.SecondaryButtonStyle))
	builder.WriteString(", ")
	builder.WriteString("text_align=")
	builder.WriteString(fmt.Sprintf("%v", _m.TextAlign))
	builder.WriteString(", ")
	builder.WriteString("color_scheme=")
	builder.WriteString(fmt.Sprintf("%v", _m.ColorScheme))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlockCtaSlice is a parsable slice of BlockCta.
type BlockCtaSlice []*BlockCta
