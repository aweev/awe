// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/teammember"
	"awe/ent/ent/user"
	"awe/ent/ent/userconsent"
	"awe/ent/ent/useronboarding"
	"awe/ent/ent/userprofile"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"-"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified time.Time `json:"email_verified,omitempty"`
	// LastLoginAt holds the value of the "last_login_at" field.
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt time.Time `json:"deactivated_at,omitempty"`
	// LockedUntil holds the value of the "locked_until" field.
	LockedUntil time.Time `json:"locked_until,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ImpersonatingUserID holds the value of the "impersonating_user_id" field.
	ImpersonatingUserID string `json:"impersonating_user_id,omitempty"`
	// SecurityTimestamp holds the value of the "security_timestamp" field.
	SecurityTimestamp time.Time `json:"security_timestamp,omitempty"`
	// PasswordResetRequired holds the value of the "password_reset_required" field.
	PasswordResetRequired bool `json:"password_reset_required,omitempty"`
	// Roles holds the value of the "roles" field.
	Roles []string `json:"roles,omitempty"`
	// MfaSecret holds the value of the "mfa_secret" field.
	MfaSecret string `json:"-"`
	// MfaEnabled holds the value of the "mfa_enabled" field.
	MfaEnabled bool `json:"mfa_enabled,omitempty"`
	// OnboardingStartedAt holds the value of the "onboarding_started_at" field.
	OnboardingStartedAt time.Time `json:"onboarding_started_at,omitempty"`
	// OnboardingCompletedAt holds the value of the "onboarding_completed_at" field.
	OnboardingCompletedAt time.Time `json:"onboarding_completed_at,omitempty"`
	// OnboardingSkipped holds the value of the "onboarding_skipped" field.
	OnboardingSkipped bool `json:"onboarding_skipped,omitempty"`
	// OnboardingVersion holds the value of the "onboarding_version" field.
	OnboardingVersion string `json:"onboarding_version,omitempty"`
	// OnboardingCompleted holds the value of the "onboarding_completed" field.
	OnboardingCompleted bool `json:"onboarding_completed,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// AnalyticsProperties holds the value of the "analytics_properties" field.
	AnalyticsProperties map[string]interface{} `json:"analytics_properties,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges            UserEdges `json:"edges"`
	user_team_member *int
	selectValues     sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Profile holds the value of the profile edge.
	Profile *UserProfile `json:"profile,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*UserSession `json:"sessions,omitempty"`
	// Tokens holds the value of the tokens edge.
	Tokens []*Token `json:"tokens,omitempty"`
	// TrustedDevices holds the value of the trusted_devices edge.
	TrustedDevices []*TrustedDevice `json:"trusted_devices,omitempty"`
	// PasswordHistory holds the value of the password_history edge.
	PasswordHistory []*PasswordHistory `json:"password_history,omitempty"`
	// TeamMember holds the value of the team_member edge.
	TeamMember *TeamMember `json:"team_member,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*AuditLog `json:"audit_logs,omitempty"`
	// Jobs holds the value of the jobs edge.
	Jobs []*Job `json:"jobs,omitempty"`
	// Dashboards holds the value of the dashboards edge.
	Dashboards []*AnalyticsDashboard `json:"dashboards,omitempty"`
	// AnalyticsEvents holds the value of the analytics_events edge.
	AnalyticsEvents []*AnalyticsEvent `json:"analytics_events,omitempty"`
	// CreatedReports holds the value of the created_reports edge.
	CreatedReports []*ReportDefinition `json:"created_reports,omitempty"`
	// GeneratedReports holds the value of the generated_reports edge.
	GeneratedReports []*GeneratedReport `json:"generated_reports,omitempty"`
	// ReportPermissions holds the value of the report_permissions edge.
	ReportPermissions []*ReportPermission `json:"report_permissions,omitempty"`
	// ScheduledReports holds the value of the scheduled_reports edge.
	ScheduledReports []*ScheduledReport `json:"scheduled_reports,omitempty"`
	// CreatedPrograms holds the value of the created_programs edge.
	CreatedPrograms []*Program `json:"created_programs,omitempty"`
	// UpdatedPrograms holds the value of the updated_programs edge.
	UpdatedPrograms []*Program `json:"updated_programs,omitempty"`
	// ProgramEnrolments holds the value of the program_enrolments edge.
	ProgramEnrolments []*ProgramEnrolment `json:"program_enrolments,omitempty"`
	// ParticipantIn holds the value of the participant_in edge.
	ParticipantIn []*ProgramParticipant `json:"participant_in,omitempty"`
	// SuccessStories holds the value of the success_stories edge.
	SuccessStories []*SuccessStory `json:"success_stories,omitempty"`
	// NewsArticles holds the value of the news_articles edge.
	NewsArticles []*NewsArticle `json:"news_articles,omitempty"`
	// CreatedEvents holds the value of the created_events edge.
	CreatedEvents []*Event `json:"created_events,omitempty"`
	// EventRegistrations holds the value of the event_registrations edge.
	EventRegistrations []*EventRegistration `json:"event_registrations,omitempty"`
	// MessagesSent holds the value of the messages_sent edge.
	MessagesSent []*Message `json:"messages_sent,omitempty"`
	// ConversationLinks holds the value of the conversation_links edge.
	ConversationLinks []*ConversationParticipant `json:"conversation_links,omitempty"`
	// VolunteerApplications holds the value of the volunteer_applications edge.
	VolunteerApplications []*VolunteerApplication `json:"volunteer_applications,omitempty"`
	// MentorshipRequests holds the value of the mentorship_requests edge.
	MentorshipRequests []*MentorshipRequest `json:"mentorship_requests,omitempty"`
	// MentorshipsMentoring holds the value of the mentorships_mentoring edge.
	MentorshipsMentoring []*MentorshipRequest `json:"mentorships_mentoring,omitempty"`
	// Achievements holds the value of the achievements edge.
	Achievements []*UserAchievement `json:"achievements,omitempty"`
	// Donations holds the value of the donations edge.
	Donations []*Donation `json:"donations,omitempty"`
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// ManagedPartnerships holds the value of the managed_partnerships edge.
	ManagedPartnerships []*Partnership `json:"managed_partnerships,omitempty"`
	// PartnershipContacts holds the value of the partnership_contacts edge.
	PartnershipContacts []*Partnership `json:"partnership_contacts,omitempty"`
	// SiteVisits holds the value of the site_visits edge.
	SiteVisits []*SiteVisit `json:"site_visits,omitempty"`
	// DocumentUploads holds the value of the document_uploads edge.
	DocumentUploads []*Document `json:"document_uploads,omitempty"`
	// ActivityLogs holds the value of the activity_logs edge.
	ActivityLogs []*ActivityLog `json:"activity_logs,omitempty"`
	// Consents holds the value of the consents edge.
	Consents *UserConsent `json:"consents,omitempty"`
	// Onboarding holds the value of the onboarding edge.
	Onboarding *UserOnboarding `json:"onboarding,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [37]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ProfileOrErr() (*UserProfile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: userprofile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*UserSession, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TokensOrErr() ([]*Token, error) {
	if e.loadedTypes[2] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// TrustedDevicesOrErr returns the TrustedDevices value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TrustedDevicesOrErr() ([]*TrustedDevice, error) {
	if e.loadedTypes[3] {
		return e.TrustedDevices, nil
	}
	return nil, &NotLoadedError{edge: "trusted_devices"}
}

// PasswordHistoryOrErr returns the PasswordHistory value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PasswordHistoryOrErr() ([]*PasswordHistory, error) {
	if e.loadedTypes[4] {
		return e.PasswordHistory, nil
	}
	return nil, &NotLoadedError{edge: "password_history"}
}

// TeamMemberOrErr returns the TeamMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TeamMemberOrErr() (*TeamMember, error) {
	if e.TeamMember != nil {
		return e.TeamMember, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: teammember.Label}
	}
	return nil, &NotLoadedError{edge: "team_member"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuditLogsOrErr() ([]*AuditLog, error) {
	if e.loadedTypes[6] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JobsOrErr() ([]*Job, error) {
	if e.loadedTypes[7] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// DashboardsOrErr returns the Dashboards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DashboardsOrErr() ([]*AnalyticsDashboard, error) {
	if e.loadedTypes[8] {
		return e.Dashboards, nil
	}
	return nil, &NotLoadedError{edge: "dashboards"}
}

// AnalyticsEventsOrErr returns the AnalyticsEvents value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AnalyticsEventsOrErr() ([]*AnalyticsEvent, error) {
	if e.loadedTypes[9] {
		return e.AnalyticsEvents, nil
	}
	return nil, &NotLoadedError{edge: "analytics_events"}
}

// CreatedReportsOrErr returns the CreatedReports value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedReportsOrErr() ([]*ReportDefinition, error) {
	if e.loadedTypes[10] {
		return e.CreatedReports, nil
	}
	return nil, &NotLoadedError{edge: "created_reports"}
}

// GeneratedReportsOrErr returns the GeneratedReports value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GeneratedReportsOrErr() ([]*GeneratedReport, error) {
	if e.loadedTypes[11] {
		return e.GeneratedReports, nil
	}
	return nil, &NotLoadedError{edge: "generated_reports"}
}

// ReportPermissionsOrErr returns the ReportPermissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReportPermissionsOrErr() ([]*ReportPermission, error) {
	if e.loadedTypes[12] {
		return e.ReportPermissions, nil
	}
	return nil, &NotLoadedError{edge: "report_permissions"}
}

// ScheduledReportsOrErr returns the ScheduledReports value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ScheduledReportsOrErr() ([]*ScheduledReport, error) {
	if e.loadedTypes[13] {
		return e.ScheduledReports, nil
	}
	return nil, &NotLoadedError{edge: "scheduled_reports"}
}

// CreatedProgramsOrErr returns the CreatedPrograms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[14] {
		return e.CreatedPrograms, nil
	}
	return nil, &NotLoadedError{edge: "created_programs"}
}

// UpdatedProgramsOrErr returns the UpdatedPrograms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpdatedProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[15] {
		return e.UpdatedPrograms, nil
	}
	return nil, &NotLoadedError{edge: "updated_programs"}
}

// ProgramEnrolmentsOrErr returns the ProgramEnrolments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProgramEnrolmentsOrErr() ([]*ProgramEnrolment, error) {
	if e.loadedTypes[16] {
		return e.ProgramEnrolments, nil
	}
	return nil, &NotLoadedError{edge: "program_enrolments"}
}

// ParticipantInOrErr returns the ParticipantIn value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ParticipantInOrErr() ([]*ProgramParticipant, error) {
	if e.loadedTypes[17] {
		return e.ParticipantIn, nil
	}
	return nil, &NotLoadedError{edge: "participant_in"}
}

// SuccessStoriesOrErr returns the SuccessStories value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SuccessStoriesOrErr() ([]*SuccessStory, error) {
	if e.loadedTypes[18] {
		return e.SuccessStories, nil
	}
	return nil, &NotLoadedError{edge: "success_stories"}
}

// NewsArticlesOrErr returns the NewsArticles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NewsArticlesOrErr() ([]*NewsArticle, error) {
	if e.loadedTypes[19] {
		return e.NewsArticles, nil
	}
	return nil, &NotLoadedError{edge: "news_articles"}
}

// CreatedEventsOrErr returns the CreatedEvents value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedEventsOrErr() ([]*Event, error) {
	if e.loadedTypes[20] {
		return e.CreatedEvents, nil
	}
	return nil, &NotLoadedError{edge: "created_events"}
}

// EventRegistrationsOrErr returns the EventRegistrations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventRegistrationsOrErr() ([]*EventRegistration, error) {
	if e.loadedTypes[21] {
		return e.EventRegistrations, nil
	}
	return nil, &NotLoadedError{edge: "event_registrations"}
}

// MessagesSentOrErr returns the MessagesSent value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesSentOrErr() ([]*Message, error) {
	if e.loadedTypes[22] {
		return e.MessagesSent, nil
	}
	return nil, &NotLoadedError{edge: "messages_sent"}
}

// ConversationLinksOrErr returns the ConversationLinks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ConversationLinksOrErr() ([]*ConversationParticipant, error) {
	if e.loadedTypes[23] {
		return e.ConversationLinks, nil
	}
	return nil, &NotLoadedError{edge: "conversation_links"}
}

// VolunteerApplicationsOrErr returns the VolunteerApplications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VolunteerApplicationsOrErr() ([]*VolunteerApplication, error) {
	if e.loadedTypes[24] {
		return e.VolunteerApplications, nil
	}
	return nil, &NotLoadedError{edge: "volunteer_applications"}
}

// MentorshipRequestsOrErr returns the MentorshipRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MentorshipRequestsOrErr() ([]*MentorshipRequest, error) {
	if e.loadedTypes[25] {
		return e.MentorshipRequests, nil
	}
	return nil, &NotLoadedError{edge: "mentorship_requests"}
}

// MentorshipsMentoringOrErr returns the MentorshipsMentoring value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MentorshipsMentoringOrErr() ([]*MentorshipRequest, error) {
	if e.loadedTypes[26] {
		return e.MentorshipsMentoring, nil
	}
	return nil, &NotLoadedError{edge: "mentorships_mentoring"}
}

// AchievementsOrErr returns the Achievements value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AchievementsOrErr() ([]*UserAchievement, error) {
	if e.loadedTypes[27] {
		return e.Achievements, nil
	}
	return nil, &NotLoadedError{edge: "achievements"}
}

// DonationsOrErr returns the Donations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DonationsOrErr() ([]*Donation, error) {
	if e.loadedTypes[28] {
		return e.Donations, nil
	}
	return nil, &NotLoadedError{edge: "donations"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[29] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ManagedPartnershipsOrErr returns the ManagedPartnerships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ManagedPartnershipsOrErr() ([]*Partnership, error) {
	if e.loadedTypes[30] {
		return e.ManagedPartnerships, nil
	}
	return nil, &NotLoadedError{edge: "managed_partnerships"}
}

// PartnershipContactsOrErr returns the PartnershipContacts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PartnershipContactsOrErr() ([]*Partnership, error) {
	if e.loadedTypes[31] {
		return e.PartnershipContacts, nil
	}
	return nil, &NotLoadedError{edge: "partnership_contacts"}
}

// SiteVisitsOrErr returns the SiteVisits value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SiteVisitsOrErr() ([]*SiteVisit, error) {
	if e.loadedTypes[32] {
		return e.SiteVisits, nil
	}
	return nil, &NotLoadedError{edge: "site_visits"}
}

// DocumentUploadsOrErr returns the DocumentUploads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DocumentUploadsOrErr() ([]*Document, error) {
	if e.loadedTypes[33] {
		return e.DocumentUploads, nil
	}
	return nil, &NotLoadedError{edge: "document_uploads"}
}

// ActivityLogsOrErr returns the ActivityLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivityLogsOrErr() ([]*ActivityLog, error) {
	if e.loadedTypes[34] {
		return e.ActivityLogs, nil
	}
	return nil, &NotLoadedError{edge: "activity_logs"}
}

// ConsentsOrErr returns the Consents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ConsentsOrErr() (*UserConsent, error) {
	if e.Consents != nil {
		return e.Consents, nil
	} else if e.loadedTypes[35] {
		return nil, &NotFoundError{label: userconsent.Label}
	}
	return nil, &NotLoadedError{edge: "consents"}
}

// OnboardingOrErr returns the Onboarding value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) OnboardingOrErr() (*UserOnboarding, error) {
	if e.Onboarding != nil {
		return e.Onboarding, nil
	} else if e.loadedTypes[36] {
		return nil, &NotFoundError{label: useronboarding.Label}
	}
	return nil, &NotLoadedError{edge: "onboarding"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldRoles, user.FieldAnalyticsProperties:
			values[i] = new([]byte)
		case user.FieldIsVerified, user.FieldIsActive, user.FieldPasswordResetRequired, user.FieldMfaEnabled, user.FieldOnboardingSkipped, user.FieldOnboardingCompleted:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldUsername, user.FieldHashedPassword, user.FieldImpersonatingUserID, user.FieldMfaSecret, user.FieldOnboardingVersion, user.FieldPosition:
			values[i] = new(sql.NullString)
		case user.FieldEmailVerified, user.FieldLastLoginAt, user.FieldDeactivatedAt, user.FieldLockedUntil, user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldSecurityTimestamp, user.FieldOnboardingStartedAt, user.FieldOnboardingCompletedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // user_team_member
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = value.String
			}
		case user.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				_m.HashedPassword = value.String
			}
		case user.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				_m.IsVerified = value.Bool
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				_m.EmailVerified = value.Time
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				_m.LastLoginAt = value.Time
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case user.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				_m.DeactivatedAt = value.Time
			}
		case user.FieldLockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field locked_until", values[i])
			} else if value.Valid {
				_m.LockedUntil = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case user.FieldImpersonatingUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impersonating_user_id", values[i])
			} else if value.Valid {
				_m.ImpersonatingUserID = value.String
			}
		case user.FieldSecurityTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field security_timestamp", values[i])
			} else if value.Valid {
				_m.SecurityTimestamp = value.Time
			}
		case user.FieldPasswordResetRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset_required", values[i])
			} else if value.Valid {
				_m.PasswordResetRequired = value.Bool
			}
		case user.FieldRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Roles); err != nil {
					return fmt.Errorf("unmarshal field roles: %w", err)
				}
			}
		case user.FieldMfaSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_secret", values[i])
			} else if value.Valid {
				_m.MfaSecret = value.String
			}
		case user.FieldMfaEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_enabled", values[i])
			} else if value.Valid {
				_m.MfaEnabled = value.Bool
			}
		case user.FieldOnboardingStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_started_at", values[i])
			} else if value.Valid {
				_m.OnboardingStartedAt = value.Time
			}
		case user.FieldOnboardingCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_completed_at", values[i])
			} else if value.Valid {
				_m.OnboardingCompletedAt = value.Time
			}
		case user.FieldOnboardingSkipped:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_skipped", values[i])
			} else if value.Valid {
				_m.OnboardingSkipped = value.Bool
			}
		case user.FieldOnboardingVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_version", values[i])
			} else if value.Valid {
				_m.OnboardingVersion = value.String
			}
		case user.FieldOnboardingCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_completed", values[i])
			} else if value.Valid {
				_m.OnboardingCompleted = value.Bool
			}
		case user.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				_m.Position = value.String
			}
		case user.FieldAnalyticsProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field analytics_properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AnalyticsProperties); err != nil {
					return fmt.Errorf("unmarshal field analytics_properties: %w", err)
				}
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_team_member", value)
			} else if value.Valid {
				_m.user_team_member = new(int)
				*_m.user_team_member = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the User entity.
func (_m *User) QueryProfile() *UserProfileQuery {
	return NewUserClient(_m.config).QueryProfile(_m)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (_m *User) QuerySessions() *UserSessionQuery {
	return NewUserClient(_m.config).QuerySessions(_m)
}

// QueryTokens queries the "tokens" edge of the User entity.
func (_m *User) QueryTokens() *TokenQuery {
	return NewUserClient(_m.config).QueryTokens(_m)
}

// QueryTrustedDevices queries the "trusted_devices" edge of the User entity.
func (_m *User) QueryTrustedDevices() *TrustedDeviceQuery {
	return NewUserClient(_m.config).QueryTrustedDevices(_m)
}

// QueryPasswordHistory queries the "password_history" edge of the User entity.
func (_m *User) QueryPasswordHistory() *PasswordHistoryQuery {
	return NewUserClient(_m.config).QueryPasswordHistory(_m)
}

// QueryTeamMember queries the "team_member" edge of the User entity.
func (_m *User) QueryTeamMember() *TeamMemberQuery {
	return NewUserClient(_m.config).QueryTeamMember(_m)
}

// QueryAuditLogs queries the "audit_logs" edge of the User entity.
func (_m *User) QueryAuditLogs() *AuditLogQuery {
	return NewUserClient(_m.config).QueryAuditLogs(_m)
}

// QueryJobs queries the "jobs" edge of the User entity.
func (_m *User) QueryJobs() *JobQuery {
	return NewUserClient(_m.config).QueryJobs(_m)
}

// QueryDashboards queries the "dashboards" edge of the User entity.
func (_m *User) QueryDashboards() *AnalyticsDashboardQuery {
	return NewUserClient(_m.config).QueryDashboards(_m)
}

// QueryAnalyticsEvents queries the "analytics_events" edge of the User entity.
func (_m *User) QueryAnalyticsEvents() *AnalyticsEventQuery {
	return NewUserClient(_m.config).QueryAnalyticsEvents(_m)
}

// QueryCreatedReports queries the "created_reports" edge of the User entity.
func (_m *User) QueryCreatedReports() *ReportDefinitionQuery {
	return NewUserClient(_m.config).QueryCreatedReports(_m)
}

// QueryGeneratedReports queries the "generated_reports" edge of the User entity.
func (_m *User) QueryGeneratedReports() *GeneratedReportQuery {
	return NewUserClient(_m.config).QueryGeneratedReports(_m)
}

// QueryReportPermissions queries the "report_permissions" edge of the User entity.
func (_m *User) QueryReportPermissions() *ReportPermissionQuery {
	return NewUserClient(_m.config).QueryReportPermissions(_m)
}

// QueryScheduledReports queries the "scheduled_reports" edge of the User entity.
func (_m *User) QueryScheduledReports() *ScheduledReportQuery {
	return NewUserClient(_m.config).QueryScheduledReports(_m)
}

// QueryCreatedPrograms queries the "created_programs" edge of the User entity.
func (_m *User) QueryCreatedPrograms() *ProgramQuery {
	return NewUserClient(_m.config).QueryCreatedPrograms(_m)
}

// QueryUpdatedPrograms queries the "updated_programs" edge of the User entity.
func (_m *User) QueryUpdatedPrograms() *ProgramQuery {
	return NewUserClient(_m.config).QueryUpdatedPrograms(_m)
}

// QueryProgramEnrolments queries the "program_enrolments" edge of the User entity.
func (_m *User) QueryProgramEnrolments() *ProgramEnrolmentQuery {
	return NewUserClient(_m.config).QueryProgramEnrolments(_m)
}

// QueryParticipantIn queries the "participant_in" edge of the User entity.
func (_m *User) QueryParticipantIn() *ProgramParticipantQuery {
	return NewUserClient(_m.config).QueryParticipantIn(_m)
}

// QuerySuccessStories queries the "success_stories" edge of the User entity.
func (_m *User) QuerySuccessStories() *SuccessStoryQuery {
	return NewUserClient(_m.config).QuerySuccessStories(_m)
}

// QueryNewsArticles queries the "news_articles" edge of the User entity.
func (_m *User) QueryNewsArticles() *NewsArticleQuery {
	return NewUserClient(_m.config).QueryNewsArticles(_m)
}

// QueryCreatedEvents queries the "created_events" edge of the User entity.
func (_m *User) QueryCreatedEvents() *EventQuery {
	return NewUserClient(_m.config).QueryCreatedEvents(_m)
}

// QueryEventRegistrations queries the "event_registrations" edge of the User entity.
func (_m *User) QueryEventRegistrations() *EventRegistrationQuery {
	return NewUserClient(_m.config).QueryEventRegistrations(_m)
}

// QueryMessagesSent queries the "messages_sent" edge of the User entity.
func (_m *User) QueryMessagesSent() *MessageQuery {
	return NewUserClient(_m.config).QueryMessagesSent(_m)
}

// QueryConversationLinks queries the "conversation_links" edge of the User entity.
func (_m *User) QueryConversationLinks() *ConversationParticipantQuery {
	return NewUserClient(_m.config).QueryConversationLinks(_m)
}

// QueryVolunteerApplications queries the "volunteer_applications" edge of the User entity.
func (_m *User) QueryVolunteerApplications() *VolunteerApplicationQuery {
	return NewUserClient(_m.config).QueryVolunteerApplications(_m)
}

// QueryMentorshipRequests queries the "mentorship_requests" edge of the User entity.
func (_m *User) QueryMentorshipRequests() *MentorshipRequestQuery {
	return NewUserClient(_m.config).QueryMentorshipRequests(_m)
}

// QueryMentorshipsMentoring queries the "mentorships_mentoring" edge of the User entity.
func (_m *User) QueryMentorshipsMentoring() *MentorshipRequestQuery {
	return NewUserClient(_m.config).QueryMentorshipsMentoring(_m)
}

// QueryAchievements queries the "achievements" edge of the User entity.
func (_m *User) QueryAchievements() *UserAchievementQuery {
	return NewUserClient(_m.config).QueryAchievements(_m)
}

// QueryDonations queries the "donations" edge of the User entity.
func (_m *User) QueryDonations() *DonationQuery {
	return NewUserClient(_m.config).QueryDonations(_m)
}

// QueryOrganization queries the "organization" edge of the User entity.
func (_m *User) QueryOrganization() *OrganizationQuery {
	return NewUserClient(_m.config).QueryOrganization(_m)
}

// QueryManagedPartnerships queries the "managed_partnerships" edge of the User entity.
func (_m *User) QueryManagedPartnerships() *PartnershipQuery {
	return NewUserClient(_m.config).QueryManagedPartnerships(_m)
}

// QueryPartnershipContacts queries the "partnership_contacts" edge of the User entity.
func (_m *User) QueryPartnershipContacts() *PartnershipQuery {
	return NewUserClient(_m.config).QueryPartnershipContacts(_m)
}

// QuerySiteVisits queries the "site_visits" edge of the User entity.
func (_m *User) QuerySiteVisits() *SiteVisitQuery {
	return NewUserClient(_m.config).QuerySiteVisits(_m)
}

// QueryDocumentUploads queries the "document_uploads" edge of the User entity.
func (_m *User) QueryDocumentUploads() *DocumentQuery {
	return NewUserClient(_m.config).QueryDocumentUploads(_m)
}

// QueryActivityLogs queries the "activity_logs" edge of the User entity.
func (_m *User) QueryActivityLogs() *ActivityLogQuery {
	return NewUserClient(_m.config).QueryActivityLogs(_m)
}

// QueryConsents queries the "consents" edge of the User entity.
func (_m *User) QueryConsents() *UserConsentQuery {
	return NewUserClient(_m.config).QueryConsents(_m)
}

// QueryOnboarding queries the "onboarding" edge of the User entity.
func (_m *User) QueryOnboarding() *UserOnboardingQuery {
	return NewUserClient(_m.config).QueryOnboarding(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(_m.Username)
	builder.WriteString(", ")
	builder.WriteString("hashed_password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(_m.EmailVerified.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(_m.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("deactivated_at=")
	builder.WriteString(_m.DeactivatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("locked_until=")
	builder.WriteString(_m.LockedUntil.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("impersonating_user_id=")
	builder.WriteString(_m.ImpersonatingUserID)
	builder.WriteString(", ")
	builder.WriteString("security_timestamp=")
	builder.WriteString(_m.SecurityTimestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("password_reset_required=")
	builder.WriteString(fmt.Sprintf("%v", _m.PasswordResetRequired))
	builder.WriteString(", ")
	builder.WriteString("roles=")
	builder.WriteString(fmt.Sprintf("%v", _m.Roles))
	builder.WriteString(", ")
	builder.WriteString("mfa_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("mfa_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.MfaEnabled))
	builder.WriteString(", ")
	builder.WriteString("onboarding_started_at=")
	builder.WriteString(_m.OnboardingStartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("onboarding_completed_at=")
	builder.WriteString(_m.OnboardingCompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("onboarding_skipped=")
	builder.WriteString(fmt.Sprintf("%v", _m.OnboardingSkipped))
	builder.WriteString(", ")
	builder.WriteString("onboarding_version=")
	builder.WriteString(_m.OnboardingVersion)
	builder.WriteString(", ")
	builder.WriteString("onboarding_completed=")
	builder.WriteString(fmt.Sprintf("%v", _m.OnboardingCompleted))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(_m.Position)
	builder.WriteString(", ")
	builder.WriteString("analytics_properties=")
	builder.WriteString(fmt.Sprintf("%v", _m.AnalyticsProperties))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
