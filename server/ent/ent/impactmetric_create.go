// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImpactMetricCreate is the builder for creating a ImpactMetric entity.
type ImpactMetricCreate struct {
	config
	mutation *ImpactMetricMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *ImpactMetricCreate) SetName(v map[string]string) *ImpactMetricCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *ImpactMetricCreate) SetType(v impactmetric.Type) *ImpactMetricCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetUnit sets the "unit" field.
func (_c *ImpactMetricCreate) SetUnit(v string) *ImpactMetricCreate {
	_c.mutation.SetUnit(v)
	return _c
}

// SetTargetValue sets the "target_value" field.
func (_c *ImpactMetricCreate) SetTargetValue(v float64) *ImpactMetricCreate {
	_c.mutation.SetTargetValue(v)
	return _c
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableTargetValue(v *float64) *ImpactMetricCreate {
	if v != nil {
		_c.SetTargetValue(*v)
	}
	return _c
}

// SetCurrentValue sets the "current_value" field.
func (_c *ImpactMetricCreate) SetCurrentValue(v float64) *ImpactMetricCreate {
	_c.mutation.SetCurrentValue(v)
	return _c
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableCurrentValue(v *float64) *ImpactMetricCreate {
	if v != nil {
		_c.SetCurrentValue(*v)
	}
	return _c
}

// SetTargetDate sets the "target_date" field.
func (_c *ImpactMetricCreate) SetTargetDate(v time.Time) *ImpactMetricCreate {
	_c.mutation.SetTargetDate(v)
	return _c
}

// SetNillableTargetDate sets the "target_date" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableTargetDate(v *time.Time) *ImpactMetricCreate {
	if v != nil {
		_c.SetTargetDate(*v)
	}
	return _c
}

// SetCalculationMethod sets the "calculation_method" field.
func (_c *ImpactMetricCreate) SetCalculationMethod(v string) *ImpactMetricCreate {
	_c.mutation.SetCalculationMethod(v)
	return _c
}

// SetNillableCalculationMethod sets the "calculation_method" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableCalculationMethod(v *string) *ImpactMetricCreate {
	if v != nil {
		_c.SetCalculationMethod(*v)
	}
	return _c
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (_c *ImpactMetricCreate) SetIsAutoCalculated(v bool) *ImpactMetricCreate {
	_c.mutation.SetIsAutoCalculated(v)
	return _c
}

// SetNillableIsAutoCalculated sets the "is_auto_calculated" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableIsAutoCalculated(v *bool) *ImpactMetricCreate {
	if v != nil {
		_c.SetIsAutoCalculated(*v)
	}
	return _c
}

// SetLastCalculated sets the "last_calculated" field.
func (_c *ImpactMetricCreate) SetLastCalculated(v time.Time) *ImpactMetricCreate {
	_c.mutation.SetLastCalculated(v)
	return _c
}

// SetNillableLastCalculated sets the "last_calculated" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableLastCalculated(v *time.Time) *ImpactMetricCreate {
	if v != nil {
		_c.SetLastCalculated(*v)
	}
	return _c
}

// SetDisplayOrder sets the "display_order" field.
func (_c *ImpactMetricCreate) SetDisplayOrder(v int) *ImpactMetricCreate {
	_c.mutation.SetDisplayOrder(v)
	return _c
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableDisplayOrder(v *int) *ImpactMetricCreate {
	if v != nil {
		_c.SetDisplayOrder(*v)
	}
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *ImpactMetricCreate) SetIsPublic(v bool) *ImpactMetricCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableIsPublic(v *bool) *ImpactMetricCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (_c *ImpactMetricCreate) SetShowOnDashboard(v bool) *ImpactMetricCreate {
	_c.mutation.SetShowOnDashboard(v)
	return _c
}

// SetNillableShowOnDashboard sets the "show_on_dashboard" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableShowOnDashboard(v *bool) *ImpactMetricCreate {
	if v != nil {
		_c.SetShowOnDashboard(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ImpactMetricCreate) SetCreatedAt(v time.Time) *ImpactMetricCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableCreatedAt(v *time.Time) *ImpactMetricCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ImpactMetricCreate) SetUpdatedAt(v time.Time) *ImpactMetricCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ImpactMetricCreate) SetNillableUpdatedAt(v *time.Time) *ImpactMetricCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *ImpactMetricCreate) SetProgramID(id int) *ImpactMetricCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *ImpactMetricCreate) SetProgram(v *Program) *ImpactMetricCreate {
	return _c.SetProgramID(v.ID)
}

// AddDataPointIDs adds the "data_points" edge to the ImpactDataPoint entity by IDs.
func (_c *ImpactMetricCreate) AddDataPointIDs(ids ...int) *ImpactMetricCreate {
	_c.mutation.AddDataPointIDs(ids...)
	return _c
}

// AddDataPoints adds the "data_points" edges to the ImpactDataPoint entity.
func (_c *ImpactMetricCreate) AddDataPoints(v ...*ImpactDataPoint) *ImpactMetricCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDataPointIDs(ids...)
}

// Mutation returns the ImpactMetricMutation object of the builder.
func (_c *ImpactMetricCreate) Mutation() *ImpactMetricMutation {
	return _c.mutation
}

// Save creates the ImpactMetric in the database.
func (_c *ImpactMetricCreate) Save(ctx context.Context) (*ImpactMetric, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ImpactMetricCreate) SaveX(ctx context.Context) *ImpactMetric {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpactMetricCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpactMetricCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ImpactMetricCreate) defaults() {
	if _, ok := _c.mutation.CurrentValue(); !ok {
		v := impactmetric.DefaultCurrentValue
		_c.mutation.SetCurrentValue(v)
	}
	if _, ok := _c.mutation.IsAutoCalculated(); !ok {
		v := impactmetric.DefaultIsAutoCalculated
		_c.mutation.SetIsAutoCalculated(v)
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		v := impactmetric.DefaultDisplayOrder
		_c.mutation.SetDisplayOrder(v)
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := impactmetric.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.ShowOnDashboard(); !ok {
		v := impactmetric.DefaultShowOnDashboard
		_c.mutation.SetShowOnDashboard(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := impactmetric.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := impactmetric.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ImpactMetricCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ImpactMetric.name"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ImpactMetric.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := impactmetric.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImpactMetric.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "ImpactMetric.unit"`)}
	}
	if _, ok := _c.mutation.CurrentValue(); !ok {
		return &ValidationError{Name: "current_value", err: errors.New(`ent: missing required field "ImpactMetric.current_value"`)}
	}
	if _, ok := _c.mutation.IsAutoCalculated(); !ok {
		return &ValidationError{Name: "is_auto_calculated", err: errors.New(`ent: missing required field "ImpactMetric.is_auto_calculated"`)}
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "ImpactMetric.display_order"`)}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "ImpactMetric.is_public"`)}
	}
	if _, ok := _c.mutation.ShowOnDashboard(); !ok {
		return &ValidationError{Name: "show_on_dashboard", err: errors.New(`ent: missing required field "ImpactMetric.show_on_dashboard"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImpactMetric.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImpactMetric.updated_at"`)}
	}
	if len(_c.mutation.ProgramIDs()) == 0 {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "ImpactMetric.program"`)}
	}
	return nil
}

func (_c *ImpactMetricCreate) sqlSave(ctx context.Context) (*ImpactMetric, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ImpactMetricCreate) createSpec() (*ImpactMetric, *sqlgraph.CreateSpec) {
	var (
		_node = &ImpactMetric{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(impactmetric.Table, sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(impactmetric.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(impactmetric.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Unit(); ok {
		_spec.SetField(impactmetric.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := _c.mutation.TargetValue(); ok {
		_spec.SetField(impactmetric.FieldTargetValue, field.TypeFloat64, value)
		_node.TargetValue = value
	}
	if value, ok := _c.mutation.CurrentValue(); ok {
		_spec.SetField(impactmetric.FieldCurrentValue, field.TypeFloat64, value)
		_node.CurrentValue = value
	}
	if value, ok := _c.mutation.TargetDate(); ok {
		_spec.SetField(impactmetric.FieldTargetDate, field.TypeTime, value)
		_node.TargetDate = value
	}
	if value, ok := _c.mutation.CalculationMethod(); ok {
		_spec.SetField(impactmetric.FieldCalculationMethod, field.TypeString, value)
		_node.CalculationMethod = value
	}
	if value, ok := _c.mutation.IsAutoCalculated(); ok {
		_spec.SetField(impactmetric.FieldIsAutoCalculated, field.TypeBool, value)
		_node.IsAutoCalculated = value
	}
	if value, ok := _c.mutation.LastCalculated(); ok {
		_spec.SetField(impactmetric.FieldLastCalculated, field.TypeTime, value)
		_node.LastCalculated = value
	}
	if value, ok := _c.mutation.DisplayOrder(); ok {
		_spec.SetField(impactmetric.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(impactmetric.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.ShowOnDashboard(); ok {
		_spec.SetField(impactmetric.FieldShowOnDashboard, field.TypeBool, value)
		_node.ShowOnDashboard = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(impactmetric.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(impactmetric.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_impact_metrics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DataPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImpactMetric.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImpactMetricUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *ImpactMetricCreate) OnConflict(opts ...sql.ConflictOption) *ImpactMetricUpsertOne {
	_c.conflict = opts
	return &ImpactMetricUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ImpactMetricCreate) OnConflictColumns(columns ...string) *ImpactMetricUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ImpactMetricUpsertOne{
		create: _c,
	}
}

type (
	// ImpactMetricUpsertOne is the builder for "upsert"-ing
	//  one ImpactMetric node.
	ImpactMetricUpsertOne struct {
		create *ImpactMetricCreate
	}

	// ImpactMetricUpsert is the "OnConflict" setter.
	ImpactMetricUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ImpactMetricUpsert) SetName(v map[string]string) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateName() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *ImpactMetricUpsert) SetType(v impactmetric.Type) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateType() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldType)
	return u
}

// SetUnit sets the "unit" field.
func (u *ImpactMetricUpsert) SetUnit(v string) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateUnit() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldUnit)
	return u
}

// SetTargetValue sets the "target_value" field.
func (u *ImpactMetricUpsert) SetTargetValue(v float64) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldTargetValue, v)
	return u
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateTargetValue() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldTargetValue)
	return u
}

// AddTargetValue adds v to the "target_value" field.
func (u *ImpactMetricUpsert) AddTargetValue(v float64) *ImpactMetricUpsert {
	u.Add(impactmetric.FieldTargetValue, v)
	return u
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *ImpactMetricUpsert) ClearTargetValue() *ImpactMetricUpsert {
	u.SetNull(impactmetric.FieldTargetValue)
	return u
}

// SetCurrentValue sets the "current_value" field.
func (u *ImpactMetricUpsert) SetCurrentValue(v float64) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldCurrentValue, v)
	return u
}

// UpdateCurrentValue sets the "current_value" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateCurrentValue() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldCurrentValue)
	return u
}

// AddCurrentValue adds v to the "current_value" field.
func (u *ImpactMetricUpsert) AddCurrentValue(v float64) *ImpactMetricUpsert {
	u.Add(impactmetric.FieldCurrentValue, v)
	return u
}

// SetTargetDate sets the "target_date" field.
func (u *ImpactMetricUpsert) SetTargetDate(v time.Time) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldTargetDate, v)
	return u
}

// UpdateTargetDate sets the "target_date" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateTargetDate() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldTargetDate)
	return u
}

// ClearTargetDate clears the value of the "target_date" field.
func (u *ImpactMetricUpsert) ClearTargetDate() *ImpactMetricUpsert {
	u.SetNull(impactmetric.FieldTargetDate)
	return u
}

// SetCalculationMethod sets the "calculation_method" field.
func (u *ImpactMetricUpsert) SetCalculationMethod(v string) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldCalculationMethod, v)
	return u
}

// UpdateCalculationMethod sets the "calculation_method" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateCalculationMethod() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldCalculationMethod)
	return u
}

// ClearCalculationMethod clears the value of the "calculation_method" field.
func (u *ImpactMetricUpsert) ClearCalculationMethod() *ImpactMetricUpsert {
	u.SetNull(impactmetric.FieldCalculationMethod)
	return u
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (u *ImpactMetricUpsert) SetIsAutoCalculated(v bool) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldIsAutoCalculated, v)
	return u
}

// UpdateIsAutoCalculated sets the "is_auto_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateIsAutoCalculated() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldIsAutoCalculated)
	return u
}

// SetLastCalculated sets the "last_calculated" field.
func (u *ImpactMetricUpsert) SetLastCalculated(v time.Time) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldLastCalculated, v)
	return u
}

// UpdateLastCalculated sets the "last_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateLastCalculated() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldLastCalculated)
	return u
}

// ClearLastCalculated clears the value of the "last_calculated" field.
func (u *ImpactMetricUpsert) ClearLastCalculated() *ImpactMetricUpsert {
	u.SetNull(impactmetric.FieldLastCalculated)
	return u
}

// SetDisplayOrder sets the "display_order" field.
func (u *ImpactMetricUpsert) SetDisplayOrder(v int) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldDisplayOrder, v)
	return u
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateDisplayOrder() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldDisplayOrder)
	return u
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ImpactMetricUpsert) AddDisplayOrder(v int) *ImpactMetricUpsert {
	u.Add(impactmetric.FieldDisplayOrder, v)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *ImpactMetricUpsert) SetIsPublic(v bool) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateIsPublic() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldIsPublic)
	return u
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (u *ImpactMetricUpsert) SetShowOnDashboard(v bool) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldShowOnDashboard, v)
	return u
}

// UpdateShowOnDashboard sets the "show_on_dashboard" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateShowOnDashboard() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldShowOnDashboard)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactMetricUpsert) SetUpdatedAt(v time.Time) *ImpactMetricUpsert {
	u.Set(impactmetric.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactMetricUpsert) UpdateUpdatedAt() *ImpactMetricUpsert {
	u.SetExcluded(impactmetric.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImpactMetricUpsertOne) UpdateNewValues() *ImpactMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(impactmetric.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ImpactMetricUpsertOne) Ignore() *ImpactMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImpactMetricUpsertOne) DoNothing() *ImpactMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImpactMetricCreate.OnConflict
// documentation for more info.
func (u *ImpactMetricUpsertOne) Update(set func(*ImpactMetricUpsert)) *ImpactMetricUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImpactMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ImpactMetricUpsertOne) SetName(v map[string]string) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateName() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *ImpactMetricUpsertOne) SetType(v impactmetric.Type) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateType() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateType()
	})
}

// SetUnit sets the "unit" field.
func (u *ImpactMetricUpsertOne) SetUnit(v string) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateUnit() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateUnit()
	})
}

// SetTargetValue sets the "target_value" field.
func (u *ImpactMetricUpsertOne) SetTargetValue(v float64) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetTargetValue(v)
	})
}

// AddTargetValue adds v to the "target_value" field.
func (u *ImpactMetricUpsertOne) AddTargetValue(v float64) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddTargetValue(v)
	})
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateTargetValue() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateTargetValue()
	})
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *ImpactMetricUpsertOne) ClearTargetValue() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearTargetValue()
	})
}

// SetCurrentValue sets the "current_value" field.
func (u *ImpactMetricUpsertOne) SetCurrentValue(v float64) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetCurrentValue(v)
	})
}

// AddCurrentValue adds v to the "current_value" field.
func (u *ImpactMetricUpsertOne) AddCurrentValue(v float64) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddCurrentValue(v)
	})
}

// UpdateCurrentValue sets the "current_value" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateCurrentValue() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateCurrentValue()
	})
}

// SetTargetDate sets the "target_date" field.
func (u *ImpactMetricUpsertOne) SetTargetDate(v time.Time) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetTargetDate(v)
	})
}

// UpdateTargetDate sets the "target_date" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateTargetDate() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateTargetDate()
	})
}

// ClearTargetDate clears the value of the "target_date" field.
func (u *ImpactMetricUpsertOne) ClearTargetDate() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearTargetDate()
	})
}

// SetCalculationMethod sets the "calculation_method" field.
func (u *ImpactMetricUpsertOne) SetCalculationMethod(v string) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetCalculationMethod(v)
	})
}

// UpdateCalculationMethod sets the "calculation_method" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateCalculationMethod() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateCalculationMethod()
	})
}

// ClearCalculationMethod clears the value of the "calculation_method" field.
func (u *ImpactMetricUpsertOne) ClearCalculationMethod() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearCalculationMethod()
	})
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (u *ImpactMetricUpsertOne) SetIsAutoCalculated(v bool) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetIsAutoCalculated(v)
	})
}

// UpdateIsAutoCalculated sets the "is_auto_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateIsAutoCalculated() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateIsAutoCalculated()
	})
}

// SetLastCalculated sets the "last_calculated" field.
func (u *ImpactMetricUpsertOne) SetLastCalculated(v time.Time) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetLastCalculated(v)
	})
}

// UpdateLastCalculated sets the "last_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateLastCalculated() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateLastCalculated()
	})
}

// ClearLastCalculated clears the value of the "last_calculated" field.
func (u *ImpactMetricUpsertOne) ClearLastCalculated() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearLastCalculated()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *ImpactMetricUpsertOne) SetDisplayOrder(v int) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ImpactMetricUpsertOne) AddDisplayOrder(v int) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateDisplayOrder() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ImpactMetricUpsertOne) SetIsPublic(v bool) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateIsPublic() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateIsPublic()
	})
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (u *ImpactMetricUpsertOne) SetShowOnDashboard(v bool) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetShowOnDashboard(v)
	})
}

// UpdateShowOnDashboard sets the "show_on_dashboard" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateShowOnDashboard() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateShowOnDashboard()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactMetricUpsertOne) SetUpdatedAt(v time.Time) *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactMetricUpsertOne) UpdateUpdatedAt() *ImpactMetricUpsertOne {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ImpactMetricUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImpactMetricCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImpactMetricUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ImpactMetricUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ImpactMetricUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ImpactMetricCreateBulk is the builder for creating many ImpactMetric entities in bulk.
type ImpactMetricCreateBulk struct {
	config
	err      error
	builders []*ImpactMetricCreate
	conflict []sql.ConflictOption
}

// Save creates the ImpactMetric entities in the database.
func (_c *ImpactMetricCreateBulk) Save(ctx context.Context) ([]*ImpactMetric, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ImpactMetric, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImpactMetricMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ImpactMetricCreateBulk) SaveX(ctx context.Context) []*ImpactMetric {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpactMetricCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpactMetricCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImpactMetric.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImpactMetricUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *ImpactMetricCreateBulk) OnConflict(opts ...sql.ConflictOption) *ImpactMetricUpsertBulk {
	_c.conflict = opts
	return &ImpactMetricUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ImpactMetricCreateBulk) OnConflictColumns(columns ...string) *ImpactMetricUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ImpactMetricUpsertBulk{
		create: _c,
	}
}

// ImpactMetricUpsertBulk is the builder for "upsert"-ing
// a bulk of ImpactMetric nodes.
type ImpactMetricUpsertBulk struct {
	create *ImpactMetricCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImpactMetricUpsertBulk) UpdateNewValues() *ImpactMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(impactmetric.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImpactMetric.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ImpactMetricUpsertBulk) Ignore() *ImpactMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImpactMetricUpsertBulk) DoNothing() *ImpactMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImpactMetricCreateBulk.OnConflict
// documentation for more info.
func (u *ImpactMetricUpsertBulk) Update(set func(*ImpactMetricUpsert)) *ImpactMetricUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImpactMetricUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ImpactMetricUpsertBulk) SetName(v map[string]string) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateName() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *ImpactMetricUpsertBulk) SetType(v impactmetric.Type) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateType() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateType()
	})
}

// SetUnit sets the "unit" field.
func (u *ImpactMetricUpsertBulk) SetUnit(v string) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateUnit() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateUnit()
	})
}

// SetTargetValue sets the "target_value" field.
func (u *ImpactMetricUpsertBulk) SetTargetValue(v float64) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetTargetValue(v)
	})
}

// AddTargetValue adds v to the "target_value" field.
func (u *ImpactMetricUpsertBulk) AddTargetValue(v float64) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddTargetValue(v)
	})
}

// UpdateTargetValue sets the "target_value" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateTargetValue() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateTargetValue()
	})
}

// ClearTargetValue clears the value of the "target_value" field.
func (u *ImpactMetricUpsertBulk) ClearTargetValue() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearTargetValue()
	})
}

// SetCurrentValue sets the "current_value" field.
func (u *ImpactMetricUpsertBulk) SetCurrentValue(v float64) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetCurrentValue(v)
	})
}

// AddCurrentValue adds v to the "current_value" field.
func (u *ImpactMetricUpsertBulk) AddCurrentValue(v float64) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddCurrentValue(v)
	})
}

// UpdateCurrentValue sets the "current_value" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateCurrentValue() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateCurrentValue()
	})
}

// SetTargetDate sets the "target_date" field.
func (u *ImpactMetricUpsertBulk) SetTargetDate(v time.Time) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetTargetDate(v)
	})
}

// UpdateTargetDate sets the "target_date" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateTargetDate() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateTargetDate()
	})
}

// ClearTargetDate clears the value of the "target_date" field.
func (u *ImpactMetricUpsertBulk) ClearTargetDate() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearTargetDate()
	})
}

// SetCalculationMethod sets the "calculation_method" field.
func (u *ImpactMetricUpsertBulk) SetCalculationMethod(v string) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetCalculationMethod(v)
	})
}

// UpdateCalculationMethod sets the "calculation_method" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateCalculationMethod() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateCalculationMethod()
	})
}

// ClearCalculationMethod clears the value of the "calculation_method" field.
func (u *ImpactMetricUpsertBulk) ClearCalculationMethod() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearCalculationMethod()
	})
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (u *ImpactMetricUpsertBulk) SetIsAutoCalculated(v bool) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetIsAutoCalculated(v)
	})
}

// UpdateIsAutoCalculated sets the "is_auto_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateIsAutoCalculated() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateIsAutoCalculated()
	})
}

// SetLastCalculated sets the "last_calculated" field.
func (u *ImpactMetricUpsertBulk) SetLastCalculated(v time.Time) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetLastCalculated(v)
	})
}

// UpdateLastCalculated sets the "last_calculated" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateLastCalculated() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateLastCalculated()
	})
}

// ClearLastCalculated clears the value of the "last_calculated" field.
func (u *ImpactMetricUpsertBulk) ClearLastCalculated() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.ClearLastCalculated()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *ImpactMetricUpsertBulk) SetDisplayOrder(v int) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *ImpactMetricUpsertBulk) AddDisplayOrder(v int) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateDisplayOrder() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ImpactMetricUpsertBulk) SetIsPublic(v bool) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateIsPublic() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateIsPublic()
	})
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (u *ImpactMetricUpsertBulk) SetShowOnDashboard(v bool) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetShowOnDashboard(v)
	})
}

// UpdateShowOnDashboard sets the "show_on_dashboard" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateShowOnDashboard() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateShowOnDashboard()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactMetricUpsertBulk) SetUpdatedAt(v time.Time) *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactMetricUpsertBulk) UpdateUpdatedAt() *ImpactMetricUpsertBulk {
	return u.Update(func(s *ImpactMetricUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ImpactMetricUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ImpactMetricCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImpactMetricCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImpactMetricUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
