// Code generated by ent, DO NOT EDIT.

package faqitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the faqitem type in the database.
	Label = "faq_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldQuestion holds the string denoting the question field in the database.
	FieldQuestion = "question"
	// FieldAnswer holds the string denoting the answer field in the database.
	FieldAnswer = "answer"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// Table holds the table name of the faqitem in the database.
	Table = "faq_items"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "faq_items"
	// BlockInverseTable is the table name for the BlockFaq entity.
	// It exists in this package in order to avoid circular dependency with the "blockfaq" package.
	BlockInverseTable = "block_faqs"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "block_faq_items"
)

// Columns holds all SQL columns for faqitem fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldQuestion,
	FieldAnswer,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "faq_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_faq_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the FaqItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBlockField orders the results by block field.
func ByBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
	)
}
