// Code generated by ent, DO NOT EDIT.

package impactdatapoint

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the impactdatapoint type in the database.
	Label = "impact_data_point"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldRecordedAt holds the string denoting the recorded_at field in the database.
	FieldRecordedAt = "recorded_at"
	// FieldRecordedBy holds the string denoting the recorded_by field in the database.
	FieldRecordedBy = "recorded_by"
	// FieldPeriod holds the string denoting the period field in the database.
	FieldPeriod = "period"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldVerifiedBy holds the string denoting the verified_by field in the database.
	FieldVerifiedBy = "verified_by"
	// FieldVerifiedAt holds the string denoting the verified_at field in the database.
	FieldVerifiedAt = "verified_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMetric holds the string denoting the metric edge name in mutations.
	EdgeMetric = "metric"
	// Table holds the table name of the impactdatapoint in the database.
	Table = "impact_data_points"
	// MetricTable is the table that holds the metric relation/edge.
	MetricTable = "impact_data_points"
	// MetricInverseTable is the table name for the ImpactMetric entity.
	// It exists in this package in order to avoid circular dependency with the "impactmetric" package.
	MetricInverseTable = "impact_metrics"
	// MetricColumn is the table column denoting the metric relation/edge.
	MetricColumn = "impact_metric_data_points"
)

// Columns holds all SQL columns for impactdatapoint fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldRecordedAt,
	FieldRecordedBy,
	FieldPeriod,
	FieldNotes,
	FieldSource,
	FieldIsVerified,
	FieldVerifiedBy,
	FieldVerifiedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "impact_data_points"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"impact_metric_data_points",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRecordedAt holds the default value on creation for the "recorded_at" field.
	DefaultRecordedAt func() time.Time
	// DefaultIsVerified holds the default value on creation for the "is_verified" field.
	DefaultIsVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ImpactDataPoint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByRecordedAt orders the results by the recorded_at field.
func ByRecordedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordedAt, opts...).ToFunc()
}

// ByRecordedBy orders the results by the recorded_by field.
func ByRecordedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordedBy, opts...).ToFunc()
}

// ByPeriod orders the results by the period field.
func ByPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeriod, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByVerifiedBy orders the results by the verified_by field.
func ByVerifiedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedBy, opts...).ToFunc()
}

// ByVerifiedAt orders the results by the verified_at field.
func ByVerifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMetricField orders the results by metric field.
func ByMetricField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricStep(), sql.OrderByField(field, opts...))
	}
}
func newMetricStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MetricTable, MetricColumn),
	)
}
