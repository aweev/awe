// Code generated by ent, DO NOT EDIT.

package impactdatapoint

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldID, id))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldValue, v))
}

// RecordedAt applies equality check predicate on the "recorded_at" field. It's identical to RecordedAtEQ.
func RecordedAt(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldRecordedAt, v))
}

// RecordedBy applies equality check predicate on the "recorded_by" field. It's identical to RecordedByEQ.
func RecordedBy(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldRecordedBy, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldPeriod, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldNotes, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldSource, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldIsVerified, v))
}

// VerifiedBy applies equality check predicate on the "verified_by" field. It's identical to VerifiedByEQ.
func VerifiedBy(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldVerifiedBy, v))
}

// VerifiedAt applies equality check predicate on the "verified_at" field. It's identical to VerifiedAtEQ.
func VerifiedAt(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldVerifiedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldUpdatedAt, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldValue, v))
}

// RecordedAtEQ applies the EQ predicate on the "recorded_at" field.
func RecordedAtEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldRecordedAt, v))
}

// RecordedAtNEQ applies the NEQ predicate on the "recorded_at" field.
func RecordedAtNEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldRecordedAt, v))
}

// RecordedAtIn applies the In predicate on the "recorded_at" field.
func RecordedAtIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldRecordedAt, vs...))
}

// RecordedAtNotIn applies the NotIn predicate on the "recorded_at" field.
func RecordedAtNotIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldRecordedAt, vs...))
}

// RecordedAtGT applies the GT predicate on the "recorded_at" field.
func RecordedAtGT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldRecordedAt, v))
}

// RecordedAtGTE applies the GTE predicate on the "recorded_at" field.
func RecordedAtGTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldRecordedAt, v))
}

// RecordedAtLT applies the LT predicate on the "recorded_at" field.
func RecordedAtLT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldRecordedAt, v))
}

// RecordedAtLTE applies the LTE predicate on the "recorded_at" field.
func RecordedAtLTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldRecordedAt, v))
}

// RecordedByEQ applies the EQ predicate on the "recorded_by" field.
func RecordedByEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldRecordedBy, v))
}

// RecordedByNEQ applies the NEQ predicate on the "recorded_by" field.
func RecordedByNEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldRecordedBy, v))
}

// RecordedByIn applies the In predicate on the "recorded_by" field.
func RecordedByIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldRecordedBy, vs...))
}

// RecordedByNotIn applies the NotIn predicate on the "recorded_by" field.
func RecordedByNotIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldRecordedBy, vs...))
}

// RecordedByGT applies the GT predicate on the "recorded_by" field.
func RecordedByGT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldRecordedBy, v))
}

// RecordedByGTE applies the GTE predicate on the "recorded_by" field.
func RecordedByGTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldRecordedBy, v))
}

// RecordedByLT applies the LT predicate on the "recorded_by" field.
func RecordedByLT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldRecordedBy, v))
}

// RecordedByLTE applies the LTE predicate on the "recorded_by" field.
func RecordedByLTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldRecordedBy, v))
}

// RecordedByContains applies the Contains predicate on the "recorded_by" field.
func RecordedByContains(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContains(FieldRecordedBy, v))
}

// RecordedByHasPrefix applies the HasPrefix predicate on the "recorded_by" field.
func RecordedByHasPrefix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasPrefix(FieldRecordedBy, v))
}

// RecordedByHasSuffix applies the HasSuffix predicate on the "recorded_by" field.
func RecordedByHasSuffix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasSuffix(FieldRecordedBy, v))
}

// RecordedByIsNil applies the IsNil predicate on the "recorded_by" field.
func RecordedByIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldRecordedBy))
}

// RecordedByNotNil applies the NotNil predicate on the "recorded_by" field.
func RecordedByNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldRecordedBy))
}

// RecordedByEqualFold applies the EqualFold predicate on the "recorded_by" field.
func RecordedByEqualFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEqualFold(FieldRecordedBy, v))
}

// RecordedByContainsFold applies the ContainsFold predicate on the "recorded_by" field.
func RecordedByContainsFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContainsFold(FieldRecordedBy, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldPeriod, v))
}

// PeriodContains applies the Contains predicate on the "period" field.
func PeriodContains(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContains(FieldPeriod, v))
}

// PeriodHasPrefix applies the HasPrefix predicate on the "period" field.
func PeriodHasPrefix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasPrefix(FieldPeriod, v))
}

// PeriodHasSuffix applies the HasSuffix predicate on the "period" field.
func PeriodHasSuffix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasSuffix(FieldPeriod, v))
}

// PeriodIsNil applies the IsNil predicate on the "period" field.
func PeriodIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldPeriod))
}

// PeriodNotNil applies the NotNil predicate on the "period" field.
func PeriodNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldPeriod))
}

// PeriodEqualFold applies the EqualFold predicate on the "period" field.
func PeriodEqualFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEqualFold(FieldPeriod, v))
}

// PeriodContainsFold applies the ContainsFold predicate on the "period" field.
func PeriodContainsFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContainsFold(FieldPeriod, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContainsFold(FieldNotes, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContainsFold(FieldSource, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldIsVerified, v))
}

// VerifiedByEQ applies the EQ predicate on the "verified_by" field.
func VerifiedByEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldVerifiedBy, v))
}

// VerifiedByNEQ applies the NEQ predicate on the "verified_by" field.
func VerifiedByNEQ(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldVerifiedBy, v))
}

// VerifiedByIn applies the In predicate on the "verified_by" field.
func VerifiedByIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldVerifiedBy, vs...))
}

// VerifiedByNotIn applies the NotIn predicate on the "verified_by" field.
func VerifiedByNotIn(vs ...string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldVerifiedBy, vs...))
}

// VerifiedByGT applies the GT predicate on the "verified_by" field.
func VerifiedByGT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldVerifiedBy, v))
}

// VerifiedByGTE applies the GTE predicate on the "verified_by" field.
func VerifiedByGTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldVerifiedBy, v))
}

// VerifiedByLT applies the LT predicate on the "verified_by" field.
func VerifiedByLT(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldVerifiedBy, v))
}

// VerifiedByLTE applies the LTE predicate on the "verified_by" field.
func VerifiedByLTE(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldVerifiedBy, v))
}

// VerifiedByContains applies the Contains predicate on the "verified_by" field.
func VerifiedByContains(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContains(FieldVerifiedBy, v))
}

// VerifiedByHasPrefix applies the HasPrefix predicate on the "verified_by" field.
func VerifiedByHasPrefix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasPrefix(FieldVerifiedBy, v))
}

// VerifiedByHasSuffix applies the HasSuffix predicate on the "verified_by" field.
func VerifiedByHasSuffix(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldHasSuffix(FieldVerifiedBy, v))
}

// VerifiedByIsNil applies the IsNil predicate on the "verified_by" field.
func VerifiedByIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldVerifiedBy))
}

// VerifiedByNotNil applies the NotNil predicate on the "verified_by" field.
func VerifiedByNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldVerifiedBy))
}

// VerifiedByEqualFold applies the EqualFold predicate on the "verified_by" field.
func VerifiedByEqualFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEqualFold(FieldVerifiedBy, v))
}

// VerifiedByContainsFold applies the ContainsFold predicate on the "verified_by" field.
func VerifiedByContainsFold(v string) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldContainsFold(FieldVerifiedBy, v))
}

// VerifiedAtEQ applies the EQ predicate on the "verified_at" field.
func VerifiedAtEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldVerifiedAt, v))
}

// VerifiedAtNEQ applies the NEQ predicate on the "verified_at" field.
func VerifiedAtNEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldVerifiedAt, v))
}

// VerifiedAtIn applies the In predicate on the "verified_at" field.
func VerifiedAtIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldVerifiedAt, vs...))
}

// VerifiedAtNotIn applies the NotIn predicate on the "verified_at" field.
func VerifiedAtNotIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldVerifiedAt, vs...))
}

// VerifiedAtGT applies the GT predicate on the "verified_at" field.
func VerifiedAtGT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldVerifiedAt, v))
}

// VerifiedAtGTE applies the GTE predicate on the "verified_at" field.
func VerifiedAtGTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldVerifiedAt, v))
}

// VerifiedAtLT applies the LT predicate on the "verified_at" field.
func VerifiedAtLT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldVerifiedAt, v))
}

// VerifiedAtLTE applies the LTE predicate on the "verified_at" field.
func VerifiedAtLTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldVerifiedAt, v))
}

// VerifiedAtIsNil applies the IsNil predicate on the "verified_at" field.
func VerifiedAtIsNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIsNull(FieldVerifiedAt))
}

// VerifiedAtNotNil applies the NotNil predicate on the "verified_at" field.
func VerifiedAtNotNil() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotNull(FieldVerifiedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMetric applies the HasEdge predicate on the "metric" edge.
func HasMetric() predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MetricTable, MetricColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetricWith applies the HasEdge predicate on the "metric" edge with a given conditions (other predicates).
func HasMetricWith(preds ...predicate.ImpactMetric) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(func(s *sql.Selector) {
		step := newMetricStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImpactDataPoint) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImpactDataPoint) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImpactDataPoint) predicate.ImpactDataPoint {
	return predicate.ImpactDataPoint(sql.NotPredicates(p))
}
