// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/skill"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/userskill"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSkillUpdate is the builder for updating UserSkill entities.
type UserSkillUpdate struct {
	config
	hooks    []Hook
	mutation *UserSkillMutation
}

// Where appends a list predicates to the UserSkillUpdate builder.
func (_u *UserSkillUpdate) Where(ps ...predicate.UserSkill) *UserSkillUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLevel sets the "level" field.
func (_u *UserSkillUpdate) SetLevel(v userskill.Level) *UserSkillUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *UserSkillUpdate) SetNillableLevel(v *userskill.Level) *UserSkillUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (_u *UserSkillUpdate) SetProfileID(id int) *UserSkillUpdate {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (_u *UserSkillUpdate) SetProfile(v *UserProfile) *UserSkillUpdate {
	return _u.SetProfileID(v.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (_u *UserSkillUpdate) SetSkillID(id int) *UserSkillUpdate {
	_u.mutation.SetSkillID(id)
	return _u
}

// SetSkill sets the "skill" edge to the Skill entity.
func (_u *UserSkillUpdate) SetSkill(v *Skill) *UserSkillUpdate {
	return _u.SetSkillID(v.ID)
}

// Mutation returns the UserSkillMutation object of the builder.
func (_u *UserSkillUpdate) Mutation() *UserSkillMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (_u *UserSkillUpdate) ClearProfile() *UserSkillUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (_u *UserSkillUpdate) ClearSkill() *UserSkillUpdate {
	_u.mutation.ClearSkill()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserSkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserSkillUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserSkillUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserSkillUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserSkillUpdate) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := userskill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "UserSkill.level": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSkill.profile"`)
	}
	if _u.mutation.SkillCleared() && len(_u.mutation.SkillIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSkill.skill"`)
	}
	return nil
}

func (_u *UserSkillUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userskill.Table, userskill.Columns, sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(userskill.FieldLevel, field.TypeEnum, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.ProfileTable,
			Columns: []string{userskill.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.ProfileTable,
			Columns: []string{userskill.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserSkillUpdateOne is the builder for updating a single UserSkill entity.
type UserSkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSkillMutation
}

// SetLevel sets the "level" field.
func (_u *UserSkillUpdateOne) SetLevel(v userskill.Level) *UserSkillUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *UserSkillUpdateOne) SetNillableLevel(v *userskill.Level) *UserSkillUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (_u *UserSkillUpdateOne) SetProfileID(id int) *UserSkillUpdateOne {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (_u *UserSkillUpdateOne) SetProfile(v *UserProfile) *UserSkillUpdateOne {
	return _u.SetProfileID(v.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (_u *UserSkillUpdateOne) SetSkillID(id int) *UserSkillUpdateOne {
	_u.mutation.SetSkillID(id)
	return _u
}

// SetSkill sets the "skill" edge to the Skill entity.
func (_u *UserSkillUpdateOne) SetSkill(v *Skill) *UserSkillUpdateOne {
	return _u.SetSkillID(v.ID)
}

// Mutation returns the UserSkillMutation object of the builder.
func (_u *UserSkillUpdateOne) Mutation() *UserSkillMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (_u *UserSkillUpdateOne) ClearProfile() *UserSkillUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (_u *UserSkillUpdateOne) ClearSkill() *UserSkillUpdateOne {
	_u.mutation.ClearSkill()
	return _u
}

// Where appends a list predicates to the UserSkillUpdate builder.
func (_u *UserSkillUpdateOne) Where(ps ...predicate.UserSkill) *UserSkillUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserSkillUpdateOne) Select(field string, fields ...string) *UserSkillUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserSkill entity.
func (_u *UserSkillUpdateOne) Save(ctx context.Context) (*UserSkill, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserSkillUpdateOne) SaveX(ctx context.Context) *UserSkill {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserSkillUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserSkillUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserSkillUpdateOne) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := userskill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "UserSkill.level": %w`, err)}
		}
	}
	if _u.mutation.ProfileCleared() && len(_u.mutation.ProfileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSkill.profile"`)
	}
	if _u.mutation.SkillCleared() && len(_u.mutation.SkillIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSkill.skill"`)
	}
	return nil
}

func (_u *UserSkillUpdateOne) sqlSave(ctx context.Context) (_node *UserSkill, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userskill.Table, userskill.Columns, sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSkill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userskill.FieldID)
		for _, f := range fields {
			if !userskill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(userskill.FieldLevel, field.TypeEnum, value)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.ProfileTable,
			Columns: []string{userskill.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.ProfileTable,
			Columns: []string{userskill.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSkill{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
