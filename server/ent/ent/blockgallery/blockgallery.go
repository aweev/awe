// Code generated by ent, DO NOT EDIT.

package blockgallery

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockgallery type in the database.
	Label = "block_gallery"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLayout holds the string denoting the layout field in the database.
	FieldLayout = "layout"
	// FieldColumns holds the string denoting the columns field in the database.
	FieldColumns = "columns"
	// FieldSpacing holds the string denoting the spacing field in the database.
	FieldSpacing = "spacing"
	// FieldAspectRatio holds the string denoting the aspect_ratio field in the database.
	FieldAspectRatio = "aspect_ratio"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// Table holds the table name of the blockgallery in the database.
	Table = "block_galleries"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_galleries"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_gallery"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "gallery_images"
	// ImagesInverseTable is the table name for the GalleryImage entity.
	// It exists in this package in order to avoid circular dependency with the "galleryimage" package.
	ImagesInverseTable = "gallery_images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "block_gallery_images"
)

// Columns holds all SQL columns for blockgallery fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldTitle,
	FieldDescription,
	FieldLayout,
	FieldColumns,
	FieldSpacing,
	FieldAspectRatio,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_galleries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_gallery",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultColumns holds the default value on creation for the "columns" field.
	DefaultColumns int
	// DefaultSpacing holds the default value on creation for the "spacing" field.
	DefaultSpacing string
	// DefaultAspectRatio holds the default value on creation for the "aspect_ratio" field.
	DefaultAspectRatio string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Layout defines the type for the "layout" enum field.
type Layout string

// LayoutGRID is the default value of the Layout enum.
const DefaultLayout = LayoutGRID

// Layout values.
const (
	LayoutGRID     Layout = "GRID"
	LayoutMASONRY  Layout = "MASONRY"
	LayoutCAROUSEL Layout = "CAROUSEL"
	LayoutSLIDER   Layout = "SLIDER"
)

func (l Layout) String() string {
	return string(l)
}

// LayoutValidator is a validator for the "layout" field enum values. It is called by the builders before save.
func LayoutValidator(l Layout) error {
	switch l {
	case LayoutGRID, LayoutMASONRY, LayoutCAROUSEL, LayoutSLIDER:
		return nil
	default:
		return fmt.Errorf("blockgallery: invalid enum value for layout field: %q", l)
	}
}

// OrderOption defines the ordering options for the BlockGallery queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByLayout orders the results by the layout field.
func ByLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayout, opts...).ToFunc()
}

// ByColumns orders the results by the columns field.
func ByColumns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColumns, opts...).ToFunc()
}

// BySpacing orders the results by the spacing field.
func BySpacing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpacing, opts...).ToFunc()
}

// ByAspectRatio orders the results by the aspect_ratio field.
func ByAspectRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAspectRatio, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
	)
}
