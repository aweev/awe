// Code generated by ent, DO NOT EDIT.

package blockgallery

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldInternalName, v))
}

// Columns applies equality check predicate on the "columns" field. It's identical to ColumnsEQ.
func Columns(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldColumns, v))
}

// Spacing applies equality check predicate on the "spacing" field. It's identical to SpacingEQ.
func Spacing(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldSpacing, v))
}

// AspectRatio applies equality check predicate on the "aspect_ratio" field. It's identical to AspectRatioEQ.
func AspectRatio(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldAspectRatio, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldUpdatedAt, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContainsFold(FieldInternalName, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotNull(FieldTitle))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotNull(FieldDescription))
}

// LayoutEQ applies the EQ predicate on the "layout" field.
func LayoutEQ(v Layout) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldLayout, v))
}

// LayoutNEQ applies the NEQ predicate on the "layout" field.
func LayoutNEQ(v Layout) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldLayout, v))
}

// LayoutIn applies the In predicate on the "layout" field.
func LayoutIn(vs ...Layout) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldLayout, vs...))
}

// LayoutNotIn applies the NotIn predicate on the "layout" field.
func LayoutNotIn(vs ...Layout) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldLayout, vs...))
}

// ColumnsEQ applies the EQ predicate on the "columns" field.
func ColumnsEQ(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldColumns, v))
}

// ColumnsNEQ applies the NEQ predicate on the "columns" field.
func ColumnsNEQ(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldColumns, v))
}

// ColumnsIn applies the In predicate on the "columns" field.
func ColumnsIn(vs ...int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldColumns, vs...))
}

// ColumnsNotIn applies the NotIn predicate on the "columns" field.
func ColumnsNotIn(vs ...int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldColumns, vs...))
}

// ColumnsGT applies the GT predicate on the "columns" field.
func ColumnsGT(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldColumns, v))
}

// ColumnsGTE applies the GTE predicate on the "columns" field.
func ColumnsGTE(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldColumns, v))
}

// ColumnsLT applies the LT predicate on the "columns" field.
func ColumnsLT(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldColumns, v))
}

// ColumnsLTE applies the LTE predicate on the "columns" field.
func ColumnsLTE(v int) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldColumns, v))
}

// SpacingEQ applies the EQ predicate on the "spacing" field.
func SpacingEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldSpacing, v))
}

// SpacingNEQ applies the NEQ predicate on the "spacing" field.
func SpacingNEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldSpacing, v))
}

// SpacingIn applies the In predicate on the "spacing" field.
func SpacingIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldSpacing, vs...))
}

// SpacingNotIn applies the NotIn predicate on the "spacing" field.
func SpacingNotIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldSpacing, vs...))
}

// SpacingGT applies the GT predicate on the "spacing" field.
func SpacingGT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldSpacing, v))
}

// SpacingGTE applies the GTE predicate on the "spacing" field.
func SpacingGTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldSpacing, v))
}

// SpacingLT applies the LT predicate on the "spacing" field.
func SpacingLT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldSpacing, v))
}

// SpacingLTE applies the LTE predicate on the "spacing" field.
func SpacingLTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldSpacing, v))
}

// SpacingContains applies the Contains predicate on the "spacing" field.
func SpacingContains(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContains(FieldSpacing, v))
}

// SpacingHasPrefix applies the HasPrefix predicate on the "spacing" field.
func SpacingHasPrefix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasPrefix(FieldSpacing, v))
}

// SpacingHasSuffix applies the HasSuffix predicate on the "spacing" field.
func SpacingHasSuffix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasSuffix(FieldSpacing, v))
}

// SpacingEqualFold applies the EqualFold predicate on the "spacing" field.
func SpacingEqualFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEqualFold(FieldSpacing, v))
}

// SpacingContainsFold applies the ContainsFold predicate on the "spacing" field.
func SpacingContainsFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContainsFold(FieldSpacing, v))
}

// AspectRatioEQ applies the EQ predicate on the "aspect_ratio" field.
func AspectRatioEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldAspectRatio, v))
}

// AspectRatioNEQ applies the NEQ predicate on the "aspect_ratio" field.
func AspectRatioNEQ(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldAspectRatio, v))
}

// AspectRatioIn applies the In predicate on the "aspect_ratio" field.
func AspectRatioIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldAspectRatio, vs...))
}

// AspectRatioNotIn applies the NotIn predicate on the "aspect_ratio" field.
func AspectRatioNotIn(vs ...string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldAspectRatio, vs...))
}

// AspectRatioGT applies the GT predicate on the "aspect_ratio" field.
func AspectRatioGT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldAspectRatio, v))
}

// AspectRatioGTE applies the GTE predicate on the "aspect_ratio" field.
func AspectRatioGTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldAspectRatio, v))
}

// AspectRatioLT applies the LT predicate on the "aspect_ratio" field.
func AspectRatioLT(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldAspectRatio, v))
}

// AspectRatioLTE applies the LTE predicate on the "aspect_ratio" field.
func AspectRatioLTE(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldAspectRatio, v))
}

// AspectRatioContains applies the Contains predicate on the "aspect_ratio" field.
func AspectRatioContains(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContains(FieldAspectRatio, v))
}

// AspectRatioHasPrefix applies the HasPrefix predicate on the "aspect_ratio" field.
func AspectRatioHasPrefix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasPrefix(FieldAspectRatio, v))
}

// AspectRatioHasSuffix applies the HasSuffix predicate on the "aspect_ratio" field.
func AspectRatioHasSuffix(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldHasSuffix(FieldAspectRatio, v))
}

// AspectRatioIsNil applies the IsNil predicate on the "aspect_ratio" field.
func AspectRatioIsNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIsNull(FieldAspectRatio))
}

// AspectRatioNotNil applies the NotNil predicate on the "aspect_ratio" field.
func AspectRatioNotNil() predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotNull(FieldAspectRatio))
}

// AspectRatioEqualFold applies the EqualFold predicate on the "aspect_ratio" field.
func AspectRatioEqualFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEqualFold(FieldAspectRatio, v))
}

// AspectRatioContainsFold applies the ContainsFold predicate on the "aspect_ratio" field.
func AspectRatioContainsFold(v string) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldContainsFold(FieldAspectRatio, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlockGallery {
	return predicate.BlockGallery(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockGallery {
	return predicate.BlockGallery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockGallery {
	return predicate.BlockGallery(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.BlockGallery {
	return predicate.BlockGallery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.GalleryImage) predicate.BlockGallery {
	return predicate.BlockGallery(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockGallery) predicate.BlockGallery {
	return predicate.BlockGallery(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockGallery) predicate.BlockGallery {
	return predicate.BlockGallery(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockGallery) predicate.BlockGallery {
	return predicate.BlockGallery(sql.NotPredicates(p))
}
