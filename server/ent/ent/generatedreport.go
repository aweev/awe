// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GeneratedReport is the model entity for the GeneratedReport schema.
type GeneratedReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Format holds the value of the "format" field.
	Format generatedreport.Format `json:"format,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int `json:"file_size,omitempty"`
	// Parameters holds the value of the "parameters" field.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// DeliveryMethod holds the value of the "delivery_method" field.
	DeliveryMethod generatedreport.DeliveryMethod `json:"delivery_method,omitempty"`
	// RecipientEmail holds the value of the "recipient_email" field.
	RecipientEmail string `json:"recipient_email,omitempty"`
	// GeneratedAt holds the value of the "generated_at" field.
	GeneratedAt time.Time `json:"generated_at,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GeneratedReportQuery when eager-loading is set.
	Edges                               GeneratedReportEdges `json:"edges"`
	job_reports                         *int
	report_definition_generated_reports *int
	user_generated_reports              *int
	selectValues                        sql.SelectValues
}

// GeneratedReportEdges holds the relations/edges for other nodes in the graph.
type GeneratedReportEdges struct {
	// ReportDefinition holds the value of the report_definition edge.
	ReportDefinition *ReportDefinition `json:"report_definition,omitempty"`
	// Generator holds the value of the generator edge.
	Generator *User `json:"generator,omitempty"`
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReportDefinitionOrErr returns the ReportDefinition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneratedReportEdges) ReportDefinitionOrErr() (*ReportDefinition, error) {
	if e.ReportDefinition != nil {
		return e.ReportDefinition, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportdefinition.Label}
	}
	return nil, &NotLoadedError{edge: "report_definition"}
}

// GeneratorOrErr returns the Generator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneratedReportEdges) GeneratorOrErr() (*User, error) {
	if e.Generator != nil {
		return e.Generator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "generator"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneratedReportEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GeneratedReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case generatedreport.FieldParameters, generatedreport.FieldMetadata:
			values[i] = new([]byte)
		case generatedreport.FieldID, generatedreport.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case generatedreport.FieldStatus, generatedreport.FieldFormat, generatedreport.FieldFileURL, generatedreport.FieldDeliveryMethod, generatedreport.FieldRecipientEmail, generatedreport.FieldError:
			values[i] = new(sql.NullString)
		case generatedreport.FieldGeneratedAt:
			values[i] = new(sql.NullTime)
		case generatedreport.ForeignKeys[0]: // job_reports
			values[i] = new(sql.NullInt64)
		case generatedreport.ForeignKeys[1]: // report_definition_generated_reports
			values[i] = new(sql.NullInt64)
		case generatedreport.ForeignKeys[2]: // user_generated_reports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GeneratedReport fields.
func (_m *GeneratedReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case generatedreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case generatedreport.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case generatedreport.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				_m.Format = generatedreport.Format(value.String)
			}
		case generatedreport.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				_m.FileURL = value.String
			}
		case generatedreport.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				_m.FileSize = int(value.Int64)
			}
		case generatedreport.FieldParameters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Parameters); err != nil {
					return fmt.Errorf("unmarshal field parameters: %w", err)
				}
			}
		case generatedreport.FieldDeliveryMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_method", values[i])
			} else if value.Valid {
				_m.DeliveryMethod = generatedreport.DeliveryMethod(value.String)
			}
		case generatedreport.FieldRecipientEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recipient_email", values[i])
			} else if value.Valid {
				_m.RecipientEmail = value.String
			}
		case generatedreport.FieldGeneratedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field generated_at", values[i])
			} else if value.Valid {
				_m.GeneratedAt = value.Time
			}
		case generatedreport.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				_m.Error = value.String
			}
		case generatedreport.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case generatedreport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_reports", value)
			} else if value.Valid {
				_m.job_reports = new(int)
				*_m.job_reports = int(value.Int64)
			}
		case generatedreport.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_definition_generated_reports", value)
			} else if value.Valid {
				_m.report_definition_generated_reports = new(int)
				*_m.report_definition_generated_reports = int(value.Int64)
			}
		case generatedreport.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_generated_reports", value)
			} else if value.Valid {
				_m.user_generated_reports = new(int)
				*_m.user_generated_reports = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GeneratedReport.
// This includes values selected through modifiers, order, etc.
func (_m *GeneratedReport) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryReportDefinition queries the "report_definition" edge of the GeneratedReport entity.
func (_m *GeneratedReport) QueryReportDefinition() *ReportDefinitionQuery {
	return NewGeneratedReportClient(_m.config).QueryReportDefinition(_m)
}

// QueryGenerator queries the "generator" edge of the GeneratedReport entity.
func (_m *GeneratedReport) QueryGenerator() *UserQuery {
	return NewGeneratedReportClient(_m.config).QueryGenerator(_m)
}

// QueryJob queries the "job" edge of the GeneratedReport entity.
func (_m *GeneratedReport) QueryJob() *JobQuery {
	return NewGeneratedReportClient(_m.config).QueryJob(_m)
}

// Update returns a builder for updating this GeneratedReport.
// Note that you need to call GeneratedReport.Unwrap() before calling this method if this GeneratedReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GeneratedReport) Update() *GeneratedReportUpdateOne {
	return NewGeneratedReportClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GeneratedReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GeneratedReport) Unwrap() *GeneratedReport {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: GeneratedReport is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GeneratedReport) String() string {
	var builder strings.Builder
	builder.WriteString("GeneratedReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", _m.Format))
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(_m.FileURL)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", _m.FileSize))
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(fmt.Sprintf("%v", _m.Parameters))
	builder.WriteString(", ")
	builder.WriteString("delivery_method=")
	builder.WriteString(fmt.Sprintf("%v", _m.DeliveryMethod))
	builder.WriteString(", ")
	builder.WriteString("recipient_email=")
	builder.WriteString(_m.RecipientEmail)
	builder.WriteString(", ")
	builder.WriteString("generated_at=")
	builder.WriteString(_m.GeneratedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(_m.Error)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// GeneratedReports is a parsable slice of GeneratedReport.
type GeneratedReports []*GeneratedReport
