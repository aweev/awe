// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/volunteeropportunity"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VolunteerOpportunity is the model entity for the VolunteerOpportunity schema.
type VolunteerOpportunity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// TimeCommitment holds the value of the "time_commitment" field.
	TimeCommitment string `json:"time_commitment,omitempty"`
	// Location holds the value of the "location" field.
	Location map[string]string `json:"location,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// MaxVolunteers holds the value of the "max_volunteers" field.
	MaxVolunteers int `json:"max_volunteers,omitempty"`
	// CurrentVolunteers holds the value of the "current_volunteers" field.
	CurrentVolunteers int `json:"current_volunteers,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// ApplicationDeadline holds the value of the "application_deadline" field.
	ApplicationDeadline time.Time `json:"application_deadline,omitempty"`
	// RequiredSkills holds the value of the "required_skills" field.
	RequiredSkills []string `json:"required_skills,omitempty"`
	// PreferredSkills holds the value of the "preferred_skills" field.
	PreferredSkills []string `json:"preferred_skills,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// IsUrgent holds the value of the "is_urgent" field.
	IsUrgent bool `json:"is_urgent,omitempty"`
	// IsRecurring holds the value of the "is_recurring" field.
	IsRecurring bool `json:"is_recurring,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VolunteerOpportunityQuery when eager-loading is set.
	Edges                           VolunteerOpportunityEdges `json:"edges"`
	program_volunteer_opportunities *int
	selectValues                    sql.SelectValues
}

// VolunteerOpportunityEdges holds the relations/edges for other nodes in the graph.
type VolunteerOpportunityEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// InterestedVolunteers holds the value of the interested_volunteers edge.
	InterestedVolunteers []*VolunteerApplication `json:"interested_volunteers,omitempty"`
	// Assignments holds the value of the assignments edge.
	Assignments []*VolunteerAssignment `json:"assignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VolunteerOpportunityEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// InterestedVolunteersOrErr returns the InterestedVolunteers value or an error if the edge
// was not loaded in eager-loading.
func (e VolunteerOpportunityEdges) InterestedVolunteersOrErr() ([]*VolunteerApplication, error) {
	if e.loadedTypes[1] {
		return e.InterestedVolunteers, nil
	}
	return nil, &NotLoadedError{edge: "interested_volunteers"}
}

// AssignmentsOrErr returns the Assignments value or an error if the edge
// was not loaded in eager-loading.
func (e VolunteerOpportunityEdges) AssignmentsOrErr() ([]*VolunteerAssignment, error) {
	if e.loadedTypes[2] {
		return e.Assignments, nil
	}
	return nil, &NotLoadedError{edge: "assignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VolunteerOpportunity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case volunteeropportunity.FieldTitle, volunteeropportunity.FieldDescription, volunteeropportunity.FieldLocation, volunteeropportunity.FieldRequiredSkills, volunteeropportunity.FieldPreferredSkills, volunteeropportunity.FieldTags:
			values[i] = new([]byte)
		case volunteeropportunity.FieldIsActive, volunteeropportunity.FieldIsUrgent, volunteeropportunity.FieldIsRecurring:
			values[i] = new(sql.NullBool)
		case volunteeropportunity.FieldID, volunteeropportunity.FieldMaxVolunteers, volunteeropportunity.FieldCurrentVolunteers:
			values[i] = new(sql.NullInt64)
		case volunteeropportunity.FieldTimeCommitment:
			values[i] = new(sql.NullString)
		case volunteeropportunity.FieldStartDate, volunteeropportunity.FieldEndDate, volunteeropportunity.FieldApplicationDeadline, volunteeropportunity.FieldCreatedAt, volunteeropportunity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case volunteeropportunity.ForeignKeys[0]: // program_volunteer_opportunities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VolunteerOpportunity fields.
func (_m *VolunteerOpportunity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case volunteeropportunity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case volunteeropportunity.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case volunteeropportunity.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case volunteeropportunity.FieldTimeCommitment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_commitment", values[i])
			} else if value.Valid {
				_m.TimeCommitment = value.String
			}
		case volunteeropportunity.FieldLocation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Location); err != nil {
					return fmt.Errorf("unmarshal field location: %w", err)
				}
			}
		case volunteeropportunity.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case volunteeropportunity.FieldMaxVolunteers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_volunteers", values[i])
			} else if value.Valid {
				_m.MaxVolunteers = int(value.Int64)
			}
		case volunteeropportunity.FieldCurrentVolunteers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_volunteers", values[i])
			} else if value.Valid {
				_m.CurrentVolunteers = int(value.Int64)
			}
		case volunteeropportunity.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case volunteeropportunity.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case volunteeropportunity.FieldApplicationDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field application_deadline", values[i])
			} else if value.Valid {
				_m.ApplicationDeadline = value.Time
			}
		case volunteeropportunity.FieldRequiredSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field required_skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RequiredSkills); err != nil {
					return fmt.Errorf("unmarshal field required_skills: %w", err)
				}
			}
		case volunteeropportunity.FieldPreferredSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.PreferredSkills); err != nil {
					return fmt.Errorf("unmarshal field preferred_skills: %w", err)
				}
			}
		case volunteeropportunity.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case volunteeropportunity.FieldIsUrgent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_urgent", values[i])
			} else if value.Valid {
				_m.IsUrgent = value.Bool
			}
		case volunteeropportunity.FieldIsRecurring:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_recurring", values[i])
			} else if value.Valid {
				_m.IsRecurring = value.Bool
			}
		case volunteeropportunity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case volunteeropportunity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case volunteeropportunity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_volunteer_opportunities", value)
			} else if value.Valid {
				_m.program_volunteer_opportunities = new(int)
				*_m.program_volunteer_opportunities = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VolunteerOpportunity.
// This includes values selected through modifiers, order, etc.
func (_m *VolunteerOpportunity) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the VolunteerOpportunity entity.
func (_m *VolunteerOpportunity) QueryProgram() *ProgramQuery {
	return NewVolunteerOpportunityClient(_m.config).QueryProgram(_m)
}

// QueryInterestedVolunteers queries the "interested_volunteers" edge of the VolunteerOpportunity entity.
func (_m *VolunteerOpportunity) QueryInterestedVolunteers() *VolunteerApplicationQuery {
	return NewVolunteerOpportunityClient(_m.config).QueryInterestedVolunteers(_m)
}

// QueryAssignments queries the "assignments" edge of the VolunteerOpportunity entity.
func (_m *VolunteerOpportunity) QueryAssignments() *VolunteerAssignmentQuery {
	return NewVolunteerOpportunityClient(_m.config).QueryAssignments(_m)
}

// Update returns a builder for updating this VolunteerOpportunity.
// Note that you need to call VolunteerOpportunity.Unwrap() before calling this method if this VolunteerOpportunity
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *VolunteerOpportunity) Update() *VolunteerOpportunityUpdateOne {
	return NewVolunteerOpportunityClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the VolunteerOpportunity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *VolunteerOpportunity) Unwrap() *VolunteerOpportunity {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: VolunteerOpportunity is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *VolunteerOpportunity) String() string {
	var builder strings.Builder
	builder.WriteString("VolunteerOpportunity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("time_commitment=")
	builder.WriteString(_m.TimeCommitment)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(fmt.Sprintf("%v", _m.Location))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("max_volunteers=")
	builder.WriteString(fmt.Sprintf("%v", _m.MaxVolunteers))
	builder.WriteString(", ")
	builder.WriteString("current_volunteers=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentVolunteers))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("application_deadline=")
	builder.WriteString(_m.ApplicationDeadline.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("required_skills=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiredSkills))
	builder.WriteString(", ")
	builder.WriteString("preferred_skills=")
	builder.WriteString(fmt.Sprintf("%v", _m.PreferredSkills))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("is_urgent=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsUrgent))
	builder.WriteString(", ")
	builder.WriteString("is_recurring=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsRecurring))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VolunteerOpportunities is a parsable slice of VolunteerOpportunity.
type VolunteerOpportunities []*VolunteerOpportunity
