// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/systemerror"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SystemError is the model entity for the SystemError schema.
type SystemError struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Stack holds the value of the "stack" field.
	Stack string `json:"stack,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// IsResolved holds the value of the "is_resolved" field.
	IsResolved bool `json:"is_resolved,omitempty"`
	// ResolvedAt holds the value of the "resolved_at" field.
	ResolvedAt time.Time `json:"resolved_at,omitempty"`
	// ResolvedBy holds the value of the "resolved_by" field.
	ResolvedBy   string `json:"resolved_by,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemError) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systemerror.FieldMetadata:
			values[i] = new([]byte)
		case systemerror.FieldIsResolved:
			values[i] = new(sql.NullBool)
		case systemerror.FieldID:
			values[i] = new(sql.NullInt64)
		case systemerror.FieldMessage, systemerror.FieldName, systemerror.FieldStack, systemerror.FieldUserID, systemerror.FieldContext, systemerror.FieldResolvedBy:
			values[i] = new(sql.NullString)
		case systemerror.FieldTimestamp, systemerror.FieldResolvedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemError fields.
func (_m *SystemError) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systemerror.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case systemerror.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				_m.Timestamp = value.Time
			}
		case systemerror.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case systemerror.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case systemerror.FieldStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stack", values[i])
			} else if value.Valid {
				_m.Stack = value.String
			}
		case systemerror.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case systemerror.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case systemerror.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				_m.Context = value.String
			}
		case systemerror.FieldIsResolved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_resolved", values[i])
			} else if value.Valid {
				_m.IsResolved = value.Bool
			}
		case systemerror.FieldResolvedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_at", values[i])
			} else if value.Valid {
				_m.ResolvedAt = value.Time
			}
		case systemerror.FieldResolvedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_by", values[i])
			} else if value.Valid {
				_m.ResolvedBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SystemError.
// This includes values selected through modifiers, order, etc.
func (_m *SystemError) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this SystemError.
// Note that you need to call SystemError.Unwrap() before calling this method if this SystemError
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SystemError) Update() *SystemErrorUpdateOne {
	return NewSystemErrorClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SystemError entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SystemError) Unwrap() *SystemError {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemError is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SystemError) String() string {
	var builder strings.Builder
	builder.WriteString("SystemError(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(_m.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("stack=")
	builder.WriteString(_m.Stack)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(_m.Context)
	builder.WriteString(", ")
	builder.WriteString("is_resolved=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsResolved))
	builder.WriteString(", ")
	builder.WriteString("resolved_at=")
	builder.WriteString(_m.ResolvedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resolved_by=")
	builder.WriteString(_m.ResolvedBy)
	builder.WriteByte(')')
	return builder.String()
}

// SystemErrors is a parsable slice of SystemError.
type SystemErrors []*SystemError
