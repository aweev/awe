// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockcta"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockCtaUpdate is the builder for updating BlockCta entities.
type BlockCtaUpdate struct {
	config
	hooks    []Hook
	mutation *BlockCtaMutation
}

// Where appends a list predicates to the BlockCtaUpdate builder.
func (_u *BlockCtaUpdate) Where(ps ...predicate.BlockCta) *BlockCtaUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockCtaUpdate) SetInternalName(v string) *BlockCtaUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillableInternalName(v *string) *BlockCtaUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockCtaUpdate) SetBadge(v map[string]string) *BlockCtaUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockCtaUpdate) ClearBadge() *BlockCtaUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockCtaUpdate) SetTitle(v map[string]string) *BlockCtaUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockCtaUpdate) SetDescription(v map[string]string) *BlockCtaUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockCtaUpdate) ClearDescription() *BlockCtaUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (_u *BlockCtaUpdate) SetPrimaryButtonText(v map[string]string) *BlockCtaUpdate {
	_u.mutation.SetPrimaryButtonText(v)
	return _u
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (_u *BlockCtaUpdate) SetPrimaryButtonHref(v string) *BlockCtaUpdate {
	_u.mutation.SetPrimaryButtonHref(v)
	return _u
}

// SetNillablePrimaryButtonHref sets the "primary_button_href" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillablePrimaryButtonHref(v *string) *BlockCtaUpdate {
	if v != nil {
		_u.SetPrimaryButtonHref(*v)
	}
	return _u
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (_u *BlockCtaUpdate) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaUpdate {
	_u.mutation.SetPrimaryButtonStyle(v)
	return _u
}

// SetNillablePrimaryButtonStyle sets the "primary_button_style" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillablePrimaryButtonStyle(v *blockcta.PrimaryButtonStyle) *BlockCtaUpdate {
	if v != nil {
		_u.SetPrimaryButtonStyle(*v)
	}
	return _u
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (_u *BlockCtaUpdate) SetSecondaryButtonText(v map[string]string) *BlockCtaUpdate {
	_u.mutation.SetSecondaryButtonText(v)
	return _u
}

// ClearSecondaryButtonText clears the value of the "secondary_button_text" field.
func (_u *BlockCtaUpdate) ClearSecondaryButtonText() *BlockCtaUpdate {
	_u.mutation.ClearSecondaryButtonText()
	return _u
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (_u *BlockCtaUpdate) SetSecondaryButtonHref(v string) *BlockCtaUpdate {
	_u.mutation.SetSecondaryButtonHref(v)
	return _u
}

// SetNillableSecondaryButtonHref sets the "secondary_button_href" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillableSecondaryButtonHref(v *string) *BlockCtaUpdate {
	if v != nil {
		_u.SetSecondaryButtonHref(*v)
	}
	return _u
}

// ClearSecondaryButtonHref clears the value of the "secondary_button_href" field.
func (_u *BlockCtaUpdate) ClearSecondaryButtonHref() *BlockCtaUpdate {
	_u.mutation.ClearSecondaryButtonHref()
	return _u
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (_u *BlockCtaUpdate) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaUpdate {
	_u.mutation.SetSecondaryButtonStyle(v)
	return _u
}

// SetNillableSecondaryButtonStyle sets the "secondary_button_style" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillableSecondaryButtonStyle(v *blockcta.SecondaryButtonStyle) *BlockCtaUpdate {
	if v != nil {
		_u.SetSecondaryButtonStyle(*v)
	}
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockCtaUpdate) SetTextAlign(v blockcta.TextAlign) *BlockCtaUpdate {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillableTextAlign(v *blockcta.TextAlign) *BlockCtaUpdate {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockCtaUpdate) SetColorScheme(v blockcta.ColorScheme) *BlockCtaUpdate {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockCtaUpdate) SetNillableColorScheme(v *blockcta.ColorScheme) *BlockCtaUpdate {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockCtaUpdate) SetUpdatedAt(v time.Time) *BlockCtaUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockCtaUpdate) SetContentBlockID(id int) *BlockCtaUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockCtaUpdate) SetContentBlock(v *ContentBlock) *BlockCtaUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockCtaMutation object of the builder.
func (_u *BlockCtaUpdate) Mutation() *BlockCtaMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockCtaUpdate) ClearContentBlock() *BlockCtaUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockCtaUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockCtaUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockCtaUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockCtaUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockCtaUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockcta.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockCtaUpdate) check() error {
	if v, ok := _u.mutation.PrimaryButtonStyle(); ok {
		if err := blockcta.PrimaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "primary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.primary_button_style": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SecondaryButtonStyle(); ok {
		if err := blockcta.SecondaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "secondary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.secondary_button_style": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blockcta.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockCta.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockcta.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockCta.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockCta.content_block"`)
	}
	return nil
}

func (_u *BlockCtaUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockcta.Table, blockcta.Columns, sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockcta.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockcta.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockcta.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockcta.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockcta.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockcta.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.PrimaryButtonText(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.PrimaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonHref, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrimaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonStyle, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SecondaryButtonText(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonText, field.TypeJSON, value)
	}
	if _u.mutation.SecondaryButtonTextCleared() {
		_spec.ClearField(blockcta.FieldSecondaryButtonText, field.TypeJSON)
	}
	if value, ok := _u.mutation.SecondaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonHref, field.TypeString, value)
	}
	if _u.mutation.SecondaryButtonHrefCleared() {
		_spec.ClearField(blockcta.FieldSecondaryButtonHref, field.TypeString)
	}
	if value, ok := _u.mutation.SecondaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonStyle, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blockcta.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockcta.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcta.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockcta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockCtaUpdateOne is the builder for updating a single BlockCta entity.
type BlockCtaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockCtaMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockCtaUpdateOne) SetInternalName(v string) *BlockCtaUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillableInternalName(v *string) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockCtaUpdateOne) SetBadge(v map[string]string) *BlockCtaUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockCtaUpdateOne) ClearBadge() *BlockCtaUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockCtaUpdateOne) SetTitle(v map[string]string) *BlockCtaUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockCtaUpdateOne) SetDescription(v map[string]string) *BlockCtaUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockCtaUpdateOne) ClearDescription() *BlockCtaUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (_u *BlockCtaUpdateOne) SetPrimaryButtonText(v map[string]string) *BlockCtaUpdateOne {
	_u.mutation.SetPrimaryButtonText(v)
	return _u
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (_u *BlockCtaUpdateOne) SetPrimaryButtonHref(v string) *BlockCtaUpdateOne {
	_u.mutation.SetPrimaryButtonHref(v)
	return _u
}

// SetNillablePrimaryButtonHref sets the "primary_button_href" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillablePrimaryButtonHref(v *string) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetPrimaryButtonHref(*v)
	}
	return _u
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (_u *BlockCtaUpdateOne) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaUpdateOne {
	_u.mutation.SetPrimaryButtonStyle(v)
	return _u
}

// SetNillablePrimaryButtonStyle sets the "primary_button_style" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillablePrimaryButtonStyle(v *blockcta.PrimaryButtonStyle) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetPrimaryButtonStyle(*v)
	}
	return _u
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (_u *BlockCtaUpdateOne) SetSecondaryButtonText(v map[string]string) *BlockCtaUpdateOne {
	_u.mutation.SetSecondaryButtonText(v)
	return _u
}

// ClearSecondaryButtonText clears the value of the "secondary_button_text" field.
func (_u *BlockCtaUpdateOne) ClearSecondaryButtonText() *BlockCtaUpdateOne {
	_u.mutation.ClearSecondaryButtonText()
	return _u
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (_u *BlockCtaUpdateOne) SetSecondaryButtonHref(v string) *BlockCtaUpdateOne {
	_u.mutation.SetSecondaryButtonHref(v)
	return _u
}

// SetNillableSecondaryButtonHref sets the "secondary_button_href" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillableSecondaryButtonHref(v *string) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetSecondaryButtonHref(*v)
	}
	return _u
}

// ClearSecondaryButtonHref clears the value of the "secondary_button_href" field.
func (_u *BlockCtaUpdateOne) ClearSecondaryButtonHref() *BlockCtaUpdateOne {
	_u.mutation.ClearSecondaryButtonHref()
	return _u
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (_u *BlockCtaUpdateOne) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaUpdateOne {
	_u.mutation.SetSecondaryButtonStyle(v)
	return _u
}

// SetNillableSecondaryButtonStyle sets the "secondary_button_style" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillableSecondaryButtonStyle(v *blockcta.SecondaryButtonStyle) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetSecondaryButtonStyle(*v)
	}
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockCtaUpdateOne) SetTextAlign(v blockcta.TextAlign) *BlockCtaUpdateOne {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillableTextAlign(v *blockcta.TextAlign) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockCtaUpdateOne) SetColorScheme(v blockcta.ColorScheme) *BlockCtaUpdateOne {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockCtaUpdateOne) SetNillableColorScheme(v *blockcta.ColorScheme) *BlockCtaUpdateOne {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockCtaUpdateOne) SetUpdatedAt(v time.Time) *BlockCtaUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockCtaUpdateOne) SetContentBlockID(id int) *BlockCtaUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockCtaUpdateOne) SetContentBlock(v *ContentBlock) *BlockCtaUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockCtaMutation object of the builder.
func (_u *BlockCtaUpdateOne) Mutation() *BlockCtaMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockCtaUpdateOne) ClearContentBlock() *BlockCtaUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockCtaUpdate builder.
func (_u *BlockCtaUpdateOne) Where(ps ...predicate.BlockCta) *BlockCtaUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockCtaUpdateOne) Select(field string, fields ...string) *BlockCtaUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockCta entity.
func (_u *BlockCtaUpdateOne) Save(ctx context.Context) (*BlockCta, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockCtaUpdateOne) SaveX(ctx context.Context) *BlockCta {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockCtaUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockCtaUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockCtaUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockcta.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockCtaUpdateOne) check() error {
	if v, ok := _u.mutation.PrimaryButtonStyle(); ok {
		if err := blockcta.PrimaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "primary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.primary_button_style": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SecondaryButtonStyle(); ok {
		if err := blockcta.SecondaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "secondary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.secondary_button_style": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blockcta.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockCta.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockcta.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockCta.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockCta.content_block"`)
	}
	return nil
}

func (_u *BlockCtaUpdateOne) sqlSave(ctx context.Context) (_node *BlockCta, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockcta.Table, blockcta.Columns, sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockCta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockcta.FieldID)
		for _, f := range fields {
			if !blockcta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockcta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockcta.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockcta.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockcta.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockcta.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockcta.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockcta.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.PrimaryButtonText(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.PrimaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonHref, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrimaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonStyle, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SecondaryButtonText(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonText, field.TypeJSON, value)
	}
	if _u.mutation.SecondaryButtonTextCleared() {
		_spec.ClearField(blockcta.FieldSecondaryButtonText, field.TypeJSON)
	}
	if value, ok := _u.mutation.SecondaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonHref, field.TypeString, value)
	}
	if _u.mutation.SecondaryButtonHrefCleared() {
		_spec.ClearField(blockcta.FieldSecondaryButtonHref, field.TypeString)
	}
	if value, ok := _u.mutation.SecondaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonStyle, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blockcta.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockcta.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcta.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockCta{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockcta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
