// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockTextContentCreate is the builder for creating a BlockTextContent entity.
type BlockTextContentCreate struct {
	config
	mutation *BlockTextContentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockTextContentCreate) SetInternalName(v string) *BlockTextContentCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *BlockTextContentCreate) SetContent(v map[string]string) *BlockTextContentCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetTextAlign sets the "text_align" field.
func (_c *BlockTextContentCreate) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentCreate {
	_c.mutation.SetTextAlign(v)
	return _c
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_c *BlockTextContentCreate) SetNillableTextAlign(v *blocktextcontent.TextAlign) *BlockTextContentCreate {
	if v != nil {
		_c.SetTextAlign(*v)
	}
	return _c
}

// SetColorScheme sets the "color_scheme" field.
func (_c *BlockTextContentCreate) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentCreate {
	_c.mutation.SetColorScheme(v)
	return _c
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_c *BlockTextContentCreate) SetNillableColorScheme(v *blocktextcontent.ColorScheme) *BlockTextContentCreate {
	if v != nil {
		_c.SetColorScheme(*v)
	}
	return _c
}

// SetMaxWidth sets the "max_width" field.
func (_c *BlockTextContentCreate) SetMaxWidth(v string) *BlockTextContentCreate {
	_c.mutation.SetMaxWidth(v)
	return _c
}

// SetNillableMaxWidth sets the "max_width" field if the given value is not nil.
func (_c *BlockTextContentCreate) SetNillableMaxWidth(v *string) *BlockTextContentCreate {
	if v != nil {
		_c.SetMaxWidth(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockTextContentCreate) SetCreatedAt(v time.Time) *BlockTextContentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockTextContentCreate) SetNillableCreatedAt(v *time.Time) *BlockTextContentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockTextContentCreate) SetUpdatedAt(v time.Time) *BlockTextContentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockTextContentCreate) SetNillableUpdatedAt(v *time.Time) *BlockTextContentCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockTextContentCreate) SetContentBlockID(id int) *BlockTextContentCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockTextContentCreate) SetContentBlock(v *ContentBlock) *BlockTextContentCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockTextContentMutation object of the builder.
func (_c *BlockTextContentCreate) Mutation() *BlockTextContentMutation {
	return _c.mutation
}

// Save creates the BlockTextContent in the database.
func (_c *BlockTextContentCreate) Save(ctx context.Context) (*BlockTextContent, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockTextContentCreate) SaveX(ctx context.Context) *BlockTextContent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockTextContentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockTextContentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockTextContentCreate) defaults() {
	if _, ok := _c.mutation.TextAlign(); !ok {
		v := blocktextcontent.DefaultTextAlign
		_c.mutation.SetTextAlign(v)
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		v := blocktextcontent.DefaultColorScheme
		_c.mutation.SetColorScheme(v)
	}
	if _, ok := _c.mutation.MaxWidth(); !ok {
		v := blocktextcontent.DefaultMaxWidth
		_c.mutation.SetMaxWidth(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blocktextcontent.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blocktextcontent.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockTextContentCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockTextContent.internal_name"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlockTextContent.content"`)}
	}
	if _, ok := _c.mutation.TextAlign(); !ok {
		return &ValidationError{Name: "text_align", err: errors.New(`ent: missing required field "BlockTextContent.text_align"`)}
	}
	if v, ok := _c.mutation.TextAlign(); ok {
		if err := blocktextcontent.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.text_align": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		return &ValidationError{Name: "color_scheme", err: errors.New(`ent: missing required field "BlockTextContent.color_scheme"`)}
	}
	if v, ok := _c.mutation.ColorScheme(); ok {
		if err := blocktextcontent.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.color_scheme": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockTextContent.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockTextContent.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockTextContent.content_block"`)}
	}
	return nil
}

func (_c *BlockTextContentCreate) sqlSave(ctx context.Context) (*BlockTextContent, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockTextContentCreate) createSpec() (*BlockTextContent, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockTextContent{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blocktextcontent.Table, sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blocktextcontent.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(blocktextcontent.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.TextAlign(); ok {
		_spec.SetField(blocktextcontent.FieldTextAlign, field.TypeEnum, value)
		_node.TextAlign = value
	}
	if value, ok := _c.mutation.ColorScheme(); ok {
		_spec.SetField(blocktextcontent.FieldColorScheme, field.TypeEnum, value)
		_node.ColorScheme = value
	}
	if value, ok := _c.mutation.MaxWidth(); ok {
		_spec.SetField(blocktextcontent.FieldMaxWidth, field.TypeString, value)
		_node.MaxWidth = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blocktextcontent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktextcontent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_text_content = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockTextContent.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockTextContentUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockTextContentCreate) OnConflict(opts ...sql.ConflictOption) *BlockTextContentUpsertOne {
	_c.conflict = opts
	return &BlockTextContentUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockTextContentCreate) OnConflictColumns(columns ...string) *BlockTextContentUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockTextContentUpsertOne{
		create: _c,
	}
}

type (
	// BlockTextContentUpsertOne is the builder for "upsert"-ing
	//  one BlockTextContent node.
	BlockTextContentUpsertOne struct {
		create *BlockTextContentCreate
	}

	// BlockTextContentUpsert is the "OnConflict" setter.
	BlockTextContentUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockTextContentUpsert) SetInternalName(v string) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateInternalName() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldInternalName)
	return u
}

// SetContent sets the "content" field.
func (u *BlockTextContentUpsert) SetContent(v map[string]string) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateContent() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldContent)
	return u
}

// SetTextAlign sets the "text_align" field.
func (u *BlockTextContentUpsert) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldTextAlign, v)
	return u
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateTextAlign() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldTextAlign)
	return u
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockTextContentUpsert) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldColorScheme, v)
	return u
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateColorScheme() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldColorScheme)
	return u
}

// SetMaxWidth sets the "max_width" field.
func (u *BlockTextContentUpsert) SetMaxWidth(v string) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldMaxWidth, v)
	return u
}

// UpdateMaxWidth sets the "max_width" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateMaxWidth() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldMaxWidth)
	return u
}

// ClearMaxWidth clears the value of the "max_width" field.
func (u *BlockTextContentUpsert) ClearMaxWidth() *BlockTextContentUpsert {
	u.SetNull(blocktextcontent.FieldMaxWidth)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTextContentUpsert) SetUpdatedAt(v time.Time) *BlockTextContentUpsert {
	u.Set(blocktextcontent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTextContentUpsert) UpdateUpdatedAt() *BlockTextContentUpsert {
	u.SetExcluded(blocktextcontent.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockTextContentUpsertOne) UpdateNewValues() *BlockTextContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blocktextcontent.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockTextContentUpsertOne) Ignore() *BlockTextContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockTextContentUpsertOne) DoNothing() *BlockTextContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockTextContentCreate.OnConflict
// documentation for more info.
func (u *BlockTextContentUpsertOne) Update(set func(*BlockTextContentUpsert)) *BlockTextContentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockTextContentUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockTextContentUpsertOne) SetInternalName(v string) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateInternalName() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateInternalName()
	})
}

// SetContent sets the "content" field.
func (u *BlockTextContentUpsertOne) SetContent(v map[string]string) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateContent() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateContent()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockTextContentUpsertOne) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateTextAlign() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockTextContentUpsertOne) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateColorScheme() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateColorScheme()
	})
}

// SetMaxWidth sets the "max_width" field.
func (u *BlockTextContentUpsertOne) SetMaxWidth(v string) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetMaxWidth(v)
	})
}

// UpdateMaxWidth sets the "max_width" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateMaxWidth() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateMaxWidth()
	})
}

// ClearMaxWidth clears the value of the "max_width" field.
func (u *BlockTextContentUpsertOne) ClearMaxWidth() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.ClearMaxWidth()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTextContentUpsertOne) SetUpdatedAt(v time.Time) *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTextContentUpsertOne) UpdateUpdatedAt() *BlockTextContentUpsertOne {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockTextContentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockTextContentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockTextContentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockTextContentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockTextContentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockTextContentCreateBulk is the builder for creating many BlockTextContent entities in bulk.
type BlockTextContentCreateBulk struct {
	config
	err      error
	builders []*BlockTextContentCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockTextContent entities in the database.
func (_c *BlockTextContentCreateBulk) Save(ctx context.Context) ([]*BlockTextContent, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockTextContent, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockTextContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockTextContentCreateBulk) SaveX(ctx context.Context) []*BlockTextContent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockTextContentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockTextContentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockTextContent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockTextContentUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockTextContentCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockTextContentUpsertBulk {
	_c.conflict = opts
	return &BlockTextContentUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockTextContentCreateBulk) OnConflictColumns(columns ...string) *BlockTextContentUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockTextContentUpsertBulk{
		create: _c,
	}
}

// BlockTextContentUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockTextContent nodes.
type BlockTextContentUpsertBulk struct {
	create *BlockTextContentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockTextContentUpsertBulk) UpdateNewValues() *BlockTextContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blocktextcontent.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockTextContent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockTextContentUpsertBulk) Ignore() *BlockTextContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockTextContentUpsertBulk) DoNothing() *BlockTextContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockTextContentCreateBulk.OnConflict
// documentation for more info.
func (u *BlockTextContentUpsertBulk) Update(set func(*BlockTextContentUpsert)) *BlockTextContentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockTextContentUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockTextContentUpsertBulk) SetInternalName(v string) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateInternalName() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateInternalName()
	})
}

// SetContent sets the "content" field.
func (u *BlockTextContentUpsertBulk) SetContent(v map[string]string) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateContent() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateContent()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockTextContentUpsertBulk) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateTextAlign() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockTextContentUpsertBulk) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateColorScheme() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateColorScheme()
	})
}

// SetMaxWidth sets the "max_width" field.
func (u *BlockTextContentUpsertBulk) SetMaxWidth(v string) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetMaxWidth(v)
	})
}

// UpdateMaxWidth sets the "max_width" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateMaxWidth() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateMaxWidth()
	})
}

// ClearMaxWidth clears the value of the "max_width" field.
func (u *BlockTextContentUpsertBulk) ClearMaxWidth() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.ClearMaxWidth()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTextContentUpsertBulk) SetUpdatedAt(v time.Time) *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTextContentUpsertBulk) UpdateUpdatedAt() *BlockTextContentUpsertBulk {
	return u.Update(func(s *BlockTextContentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockTextContentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockTextContentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockTextContentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockTextContentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
