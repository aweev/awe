// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentorshipRequestCreate is the builder for creating a MentorshipRequest entity.
type MentorshipRequestCreate struct {
	config
	mutation *MentorshipRequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *MentorshipRequestCreate) SetStatus(v mentorshiprequest.Status) *MentorshipRequestCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableStatus(v *mentorshiprequest.Status) *MentorshipRequestCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetGoals sets the "goals" field.
func (_c *MentorshipRequestCreate) SetGoals(v []string) *MentorshipRequestCreate {
	_c.mutation.SetGoals(v)
	return _c
}

// SetPreferences sets the "preferences" field.
func (_c *MentorshipRequestCreate) SetPreferences(v map[string]string) *MentorshipRequestCreate {
	_c.mutation.SetPreferences(v)
	return _c
}

// SetDuration sets the "duration" field.
func (_c *MentorshipRequestCreate) SetDuration(v string) *MentorshipRequestCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetMatchedAt sets the "matched_at" field.
func (_c *MentorshipRequestCreate) SetMatchedAt(v time.Time) *MentorshipRequestCreate {
	_c.mutation.SetMatchedAt(v)
	return _c
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableMatchedAt(v *time.Time) *MentorshipRequestCreate {
	if v != nil {
		_c.SetMatchedAt(*v)
	}
	return _c
}

// SetMatchedBy sets the "matched_by" field.
func (_c *MentorshipRequestCreate) SetMatchedBy(v string) *MentorshipRequestCreate {
	_c.mutation.SetMatchedBy(v)
	return _c
}

// SetNillableMatchedBy sets the "matched_by" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableMatchedBy(v *string) *MentorshipRequestCreate {
	if v != nil {
		_c.SetMatchedBy(*v)
	}
	return _c
}

// SetMatchReason sets the "match_reason" field.
func (_c *MentorshipRequestCreate) SetMatchReason(v string) *MentorshipRequestCreate {
	_c.mutation.SetMatchReason(v)
	return _c
}

// SetNillableMatchReason sets the "match_reason" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableMatchReason(v *string) *MentorshipRequestCreate {
	if v != nil {
		_c.SetMatchReason(*v)
	}
	return _c
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (_c *MentorshipRequestCreate) SetSessionsCompleted(v int) *MentorshipRequestCreate {
	_c.mutation.SetSessionsCompleted(v)
	return _c
}

// SetNillableSessionsCompleted sets the "sessions_completed" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableSessionsCompleted(v *int) *MentorshipRequestCreate {
	if v != nil {
		_c.SetSessionsCompleted(*v)
	}
	return _c
}

// SetLastSessionDate sets the "last_session_date" field.
func (_c *MentorshipRequestCreate) SetLastSessionDate(v time.Time) *MentorshipRequestCreate {
	_c.mutation.SetLastSessionDate(v)
	return _c
}

// SetNillableLastSessionDate sets the "last_session_date" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableLastSessionDate(v *time.Time) *MentorshipRequestCreate {
	if v != nil {
		_c.SetLastSessionDate(*v)
	}
	return _c
}

// SetNextSessionDate sets the "next_session_date" field.
func (_c *MentorshipRequestCreate) SetNextSessionDate(v time.Time) *MentorshipRequestCreate {
	_c.mutation.SetNextSessionDate(v)
	return _c
}

// SetNillableNextSessionDate sets the "next_session_date" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableNextSessionDate(v *time.Time) *MentorshipRequestCreate {
	if v != nil {
		_c.SetNextSessionDate(*v)
	}
	return _c
}

// SetCompletionNotes sets the "completion_notes" field.
func (_c *MentorshipRequestCreate) SetCompletionNotes(v string) *MentorshipRequestCreate {
	_c.mutation.SetCompletionNotes(v)
	return _c
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableCompletionNotes(v *string) *MentorshipRequestCreate {
	if v != nil {
		_c.SetCompletionNotes(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MentorshipRequestCreate) SetCreatedAt(v time.Time) *MentorshipRequestCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableCreatedAt(v *time.Time) *MentorshipRequestCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MentorshipRequestCreate) SetUpdatedAt(v time.Time) *MentorshipRequestCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableUpdatedAt(v *time.Time) *MentorshipRequestCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetRequesterID sets the "requester" edge to the User entity by ID.
func (_c *MentorshipRequestCreate) SetRequesterID(id int) *MentorshipRequestCreate {
	_c.mutation.SetRequesterID(id)
	return _c
}

// SetRequester sets the "requester" edge to the User entity.
func (_c *MentorshipRequestCreate) SetRequester(v *User) *MentorshipRequestCreate {
	return _c.SetRequesterID(v.ID)
}

// SetMentorID sets the "mentor" edge to the User entity by ID.
func (_c *MentorshipRequestCreate) SetMentorID(id int) *MentorshipRequestCreate {
	_c.mutation.SetMentorID(id)
	return _c
}

// SetNillableMentorID sets the "mentor" edge to the User entity by ID if the given value is not nil.
func (_c *MentorshipRequestCreate) SetNillableMentorID(id *int) *MentorshipRequestCreate {
	if id != nil {
		_c = _c.SetMentorID(*id)
	}
	return _c
}

// SetMentor sets the "mentor" edge to the User entity.
func (_c *MentorshipRequestCreate) SetMentor(v *User) *MentorshipRequestCreate {
	return _c.SetMentorID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the MentorshipSession entity by IDs.
func (_c *MentorshipRequestCreate) AddSessionIDs(ids ...int) *MentorshipRequestCreate {
	_c.mutation.AddSessionIDs(ids...)
	return _c
}

// AddSessions adds the "sessions" edges to the MentorshipSession entity.
func (_c *MentorshipRequestCreate) AddSessions(v ...*MentorshipSession) *MentorshipRequestCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSessionIDs(ids...)
}

// Mutation returns the MentorshipRequestMutation object of the builder.
func (_c *MentorshipRequestCreate) Mutation() *MentorshipRequestMutation {
	return _c.mutation
}

// Save creates the MentorshipRequest in the database.
func (_c *MentorshipRequestCreate) Save(ctx context.Context) (*MentorshipRequest, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MentorshipRequestCreate) SaveX(ctx context.Context) *MentorshipRequest {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MentorshipRequestCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MentorshipRequestCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MentorshipRequestCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := mentorshiprequest.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.SessionsCompleted(); !ok {
		v := mentorshiprequest.DefaultSessionsCompleted
		_c.mutation.SetSessionsCompleted(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := mentorshiprequest.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := mentorshiprequest.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MentorshipRequestCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MentorshipRequest.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := mentorshiprequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MentorshipRequest.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "MentorshipRequest.goals"`)}
	}
	if _, ok := _c.mutation.Preferences(); !ok {
		return &ValidationError{Name: "preferences", err: errors.New(`ent: missing required field "MentorshipRequest.preferences"`)}
	}
	if _, ok := _c.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "MentorshipRequest.duration"`)}
	}
	if _, ok := _c.mutation.SessionsCompleted(); !ok {
		return &ValidationError{Name: "sessions_completed", err: errors.New(`ent: missing required field "MentorshipRequest.sessions_completed"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MentorshipRequest.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MentorshipRequest.updated_at"`)}
	}
	if len(_c.mutation.RequesterIDs()) == 0 {
		return &ValidationError{Name: "requester", err: errors.New(`ent: missing required edge "MentorshipRequest.requester"`)}
	}
	return nil
}

func (_c *MentorshipRequestCreate) sqlSave(ctx context.Context) (*MentorshipRequest, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MentorshipRequestCreate) createSpec() (*MentorshipRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &MentorshipRequest{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(mentorshiprequest.Table, sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(mentorshiprequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Goals(); ok {
		_spec.SetField(mentorshiprequest.FieldGoals, field.TypeJSON, value)
		_node.Goals = value
	}
	if value, ok := _c.mutation.Preferences(); ok {
		_spec.SetField(mentorshiprequest.FieldPreferences, field.TypeJSON, value)
		_node.Preferences = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(mentorshiprequest.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.MatchedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedAt, field.TypeTime, value)
		_node.MatchedAt = value
	}
	if value, ok := _c.mutation.MatchedBy(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedBy, field.TypeString, value)
		_node.MatchedBy = value
	}
	if value, ok := _c.mutation.MatchReason(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchReason, field.TypeString, value)
		_node.MatchReason = value
	}
	if value, ok := _c.mutation.SessionsCompleted(); ok {
		_spec.SetField(mentorshiprequest.FieldSessionsCompleted, field.TypeInt, value)
		_node.SessionsCompleted = value
	}
	if value, ok := _c.mutation.LastSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldLastSessionDate, field.TypeTime, value)
		_node.LastSessionDate = value
	}
	if value, ok := _c.mutation.NextSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldNextSessionDate, field.TypeTime, value)
		_node.NextSessionDate = value
	}
	if value, ok := _c.mutation.CompletionNotes(); ok {
		_spec.SetField(mentorshiprequest.FieldCompletionNotes, field.TypeString, value)
		_node.CompletionNotes = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_mentorship_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_mentorships_mentoring = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MentorshipRequest.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorshipRequestUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *MentorshipRequestCreate) OnConflict(opts ...sql.ConflictOption) *MentorshipRequestUpsertOne {
	_c.conflict = opts
	return &MentorshipRequestUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MentorshipRequestCreate) OnConflictColumns(columns ...string) *MentorshipRequestUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MentorshipRequestUpsertOne{
		create: _c,
	}
}

type (
	// MentorshipRequestUpsertOne is the builder for "upsert"-ing
	//  one MentorshipRequest node.
	MentorshipRequestUpsertOne struct {
		create *MentorshipRequestCreate
	}

	// MentorshipRequestUpsert is the "OnConflict" setter.
	MentorshipRequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *MentorshipRequestUpsert) SetStatus(v mentorshiprequest.Status) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateStatus() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldStatus)
	return u
}

// SetGoals sets the "goals" field.
func (u *MentorshipRequestUpsert) SetGoals(v []string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldGoals, v)
	return u
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateGoals() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldGoals)
	return u
}

// SetPreferences sets the "preferences" field.
func (u *MentorshipRequestUpsert) SetPreferences(v map[string]string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldPreferences, v)
	return u
}

// UpdatePreferences sets the "preferences" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdatePreferences() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldPreferences)
	return u
}

// SetDuration sets the "duration" field.
func (u *MentorshipRequestUpsert) SetDuration(v string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateDuration() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldDuration)
	return u
}

// SetMatchedAt sets the "matched_at" field.
func (u *MentorshipRequestUpsert) SetMatchedAt(v time.Time) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldMatchedAt, v)
	return u
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateMatchedAt() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldMatchedAt)
	return u
}

// ClearMatchedAt clears the value of the "matched_at" field.
func (u *MentorshipRequestUpsert) ClearMatchedAt() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldMatchedAt)
	return u
}

// SetMatchedBy sets the "matched_by" field.
func (u *MentorshipRequestUpsert) SetMatchedBy(v string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldMatchedBy, v)
	return u
}

// UpdateMatchedBy sets the "matched_by" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateMatchedBy() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldMatchedBy)
	return u
}

// ClearMatchedBy clears the value of the "matched_by" field.
func (u *MentorshipRequestUpsert) ClearMatchedBy() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldMatchedBy)
	return u
}

// SetMatchReason sets the "match_reason" field.
func (u *MentorshipRequestUpsert) SetMatchReason(v string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldMatchReason, v)
	return u
}

// UpdateMatchReason sets the "match_reason" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateMatchReason() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldMatchReason)
	return u
}

// ClearMatchReason clears the value of the "match_reason" field.
func (u *MentorshipRequestUpsert) ClearMatchReason() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldMatchReason)
	return u
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (u *MentorshipRequestUpsert) SetSessionsCompleted(v int) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldSessionsCompleted, v)
	return u
}

// UpdateSessionsCompleted sets the "sessions_completed" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateSessionsCompleted() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldSessionsCompleted)
	return u
}

// AddSessionsCompleted adds v to the "sessions_completed" field.
func (u *MentorshipRequestUpsert) AddSessionsCompleted(v int) *MentorshipRequestUpsert {
	u.Add(mentorshiprequest.FieldSessionsCompleted, v)
	return u
}

// SetLastSessionDate sets the "last_session_date" field.
func (u *MentorshipRequestUpsert) SetLastSessionDate(v time.Time) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldLastSessionDate, v)
	return u
}

// UpdateLastSessionDate sets the "last_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateLastSessionDate() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldLastSessionDate)
	return u
}

// ClearLastSessionDate clears the value of the "last_session_date" field.
func (u *MentorshipRequestUpsert) ClearLastSessionDate() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldLastSessionDate)
	return u
}

// SetNextSessionDate sets the "next_session_date" field.
func (u *MentorshipRequestUpsert) SetNextSessionDate(v time.Time) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldNextSessionDate, v)
	return u
}

// UpdateNextSessionDate sets the "next_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateNextSessionDate() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldNextSessionDate)
	return u
}

// ClearNextSessionDate clears the value of the "next_session_date" field.
func (u *MentorshipRequestUpsert) ClearNextSessionDate() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldNextSessionDate)
	return u
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *MentorshipRequestUpsert) SetCompletionNotes(v string) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldCompletionNotes, v)
	return u
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateCompletionNotes() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldCompletionNotes)
	return u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *MentorshipRequestUpsert) ClearCompletionNotes() *MentorshipRequestUpsert {
	u.SetNull(mentorshiprequest.FieldCompletionNotes)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipRequestUpsert) SetUpdatedAt(v time.Time) *MentorshipRequestUpsert {
	u.Set(mentorshiprequest.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsert) UpdateUpdatedAt() *MentorshipRequestUpsert {
	u.SetExcluded(mentorshiprequest.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorshipRequestUpsertOne) UpdateNewValues() *MentorshipRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mentorshiprequest.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MentorshipRequestUpsertOne) Ignore() *MentorshipRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorshipRequestUpsertOne) DoNothing() *MentorshipRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorshipRequestCreate.OnConflict
// documentation for more info.
func (u *MentorshipRequestUpsertOne) Update(set func(*MentorshipRequestUpsert)) *MentorshipRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorshipRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MentorshipRequestUpsertOne) SetStatus(v mentorshiprequest.Status) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateStatus() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateStatus()
	})
}

// SetGoals sets the "goals" field.
func (u *MentorshipRequestUpsertOne) SetGoals(v []string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetGoals(v)
	})
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateGoals() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateGoals()
	})
}

// SetPreferences sets the "preferences" field.
func (u *MentorshipRequestUpsertOne) SetPreferences(v map[string]string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetPreferences(v)
	})
}

// UpdatePreferences sets the "preferences" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdatePreferences() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdatePreferences()
	})
}

// SetDuration sets the "duration" field.
func (u *MentorshipRequestUpsertOne) SetDuration(v string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateDuration() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateDuration()
	})
}

// SetMatchedAt sets the "matched_at" field.
func (u *MentorshipRequestUpsertOne) SetMatchedAt(v time.Time) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchedAt(v)
	})
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateMatchedAt() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchedAt()
	})
}

// ClearMatchedAt clears the value of the "matched_at" field.
func (u *MentorshipRequestUpsertOne) ClearMatchedAt() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchedAt()
	})
}

// SetMatchedBy sets the "matched_by" field.
func (u *MentorshipRequestUpsertOne) SetMatchedBy(v string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchedBy(v)
	})
}

// UpdateMatchedBy sets the "matched_by" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateMatchedBy() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchedBy()
	})
}

// ClearMatchedBy clears the value of the "matched_by" field.
func (u *MentorshipRequestUpsertOne) ClearMatchedBy() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchedBy()
	})
}

// SetMatchReason sets the "match_reason" field.
func (u *MentorshipRequestUpsertOne) SetMatchReason(v string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchReason(v)
	})
}

// UpdateMatchReason sets the "match_reason" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateMatchReason() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchReason()
	})
}

// ClearMatchReason clears the value of the "match_reason" field.
func (u *MentorshipRequestUpsertOne) ClearMatchReason() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchReason()
	})
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (u *MentorshipRequestUpsertOne) SetSessionsCompleted(v int) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetSessionsCompleted(v)
	})
}

// AddSessionsCompleted adds v to the "sessions_completed" field.
func (u *MentorshipRequestUpsertOne) AddSessionsCompleted(v int) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.AddSessionsCompleted(v)
	})
}

// UpdateSessionsCompleted sets the "sessions_completed" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateSessionsCompleted() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateSessionsCompleted()
	})
}

// SetLastSessionDate sets the "last_session_date" field.
func (u *MentorshipRequestUpsertOne) SetLastSessionDate(v time.Time) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetLastSessionDate(v)
	})
}

// UpdateLastSessionDate sets the "last_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateLastSessionDate() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateLastSessionDate()
	})
}

// ClearLastSessionDate clears the value of the "last_session_date" field.
func (u *MentorshipRequestUpsertOne) ClearLastSessionDate() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearLastSessionDate()
	})
}

// SetNextSessionDate sets the "next_session_date" field.
func (u *MentorshipRequestUpsertOne) SetNextSessionDate(v time.Time) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetNextSessionDate(v)
	})
}

// UpdateNextSessionDate sets the "next_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateNextSessionDate() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateNextSessionDate()
	})
}

// ClearNextSessionDate clears the value of the "next_session_date" field.
func (u *MentorshipRequestUpsertOne) ClearNextSessionDate() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearNextSessionDate()
	})
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *MentorshipRequestUpsertOne) SetCompletionNotes(v string) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetCompletionNotes(v)
	})
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateCompletionNotes() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateCompletionNotes()
	})
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *MentorshipRequestUpsertOne) ClearCompletionNotes() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearCompletionNotes()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipRequestUpsertOne) SetUpdatedAt(v time.Time) *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsertOne) UpdateUpdatedAt() *MentorshipRequestUpsertOne {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MentorshipRequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorshipRequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorshipRequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MentorshipRequestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MentorshipRequestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MentorshipRequestCreateBulk is the builder for creating many MentorshipRequest entities in bulk.
type MentorshipRequestCreateBulk struct {
	config
	err      error
	builders []*MentorshipRequestCreate
	conflict []sql.ConflictOption
}

// Save creates the MentorshipRequest entities in the database.
func (_c *MentorshipRequestCreateBulk) Save(ctx context.Context) ([]*MentorshipRequest, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*MentorshipRequest, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MentorshipRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MentorshipRequestCreateBulk) SaveX(ctx context.Context) []*MentorshipRequest {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MentorshipRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MentorshipRequestCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MentorshipRequest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MentorshipRequestUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *MentorshipRequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *MentorshipRequestUpsertBulk {
	_c.conflict = opts
	return &MentorshipRequestUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MentorshipRequestCreateBulk) OnConflictColumns(columns ...string) *MentorshipRequestUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MentorshipRequestUpsertBulk{
		create: _c,
	}
}

// MentorshipRequestUpsertBulk is the builder for "upsert"-ing
// a bulk of MentorshipRequest nodes.
type MentorshipRequestUpsertBulk struct {
	create *MentorshipRequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MentorshipRequestUpsertBulk) UpdateNewValues() *MentorshipRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mentorshiprequest.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MentorshipRequest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MentorshipRequestUpsertBulk) Ignore() *MentorshipRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MentorshipRequestUpsertBulk) DoNothing() *MentorshipRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MentorshipRequestCreateBulk.OnConflict
// documentation for more info.
func (u *MentorshipRequestUpsertBulk) Update(set func(*MentorshipRequestUpsert)) *MentorshipRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MentorshipRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MentorshipRequestUpsertBulk) SetStatus(v mentorshiprequest.Status) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateStatus() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateStatus()
	})
}

// SetGoals sets the "goals" field.
func (u *MentorshipRequestUpsertBulk) SetGoals(v []string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetGoals(v)
	})
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateGoals() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateGoals()
	})
}

// SetPreferences sets the "preferences" field.
func (u *MentorshipRequestUpsertBulk) SetPreferences(v map[string]string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetPreferences(v)
	})
}

// UpdatePreferences sets the "preferences" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdatePreferences() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdatePreferences()
	})
}

// SetDuration sets the "duration" field.
func (u *MentorshipRequestUpsertBulk) SetDuration(v string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateDuration() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateDuration()
	})
}

// SetMatchedAt sets the "matched_at" field.
func (u *MentorshipRequestUpsertBulk) SetMatchedAt(v time.Time) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchedAt(v)
	})
}

// UpdateMatchedAt sets the "matched_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateMatchedAt() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchedAt()
	})
}

// ClearMatchedAt clears the value of the "matched_at" field.
func (u *MentorshipRequestUpsertBulk) ClearMatchedAt() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchedAt()
	})
}

// SetMatchedBy sets the "matched_by" field.
func (u *MentorshipRequestUpsertBulk) SetMatchedBy(v string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchedBy(v)
	})
}

// UpdateMatchedBy sets the "matched_by" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateMatchedBy() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchedBy()
	})
}

// ClearMatchedBy clears the value of the "matched_by" field.
func (u *MentorshipRequestUpsertBulk) ClearMatchedBy() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchedBy()
	})
}

// SetMatchReason sets the "match_reason" field.
func (u *MentorshipRequestUpsertBulk) SetMatchReason(v string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetMatchReason(v)
	})
}

// UpdateMatchReason sets the "match_reason" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateMatchReason() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateMatchReason()
	})
}

// ClearMatchReason clears the value of the "match_reason" field.
func (u *MentorshipRequestUpsertBulk) ClearMatchReason() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearMatchReason()
	})
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (u *MentorshipRequestUpsertBulk) SetSessionsCompleted(v int) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetSessionsCompleted(v)
	})
}

// AddSessionsCompleted adds v to the "sessions_completed" field.
func (u *MentorshipRequestUpsertBulk) AddSessionsCompleted(v int) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.AddSessionsCompleted(v)
	})
}

// UpdateSessionsCompleted sets the "sessions_completed" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateSessionsCompleted() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateSessionsCompleted()
	})
}

// SetLastSessionDate sets the "last_session_date" field.
func (u *MentorshipRequestUpsertBulk) SetLastSessionDate(v time.Time) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetLastSessionDate(v)
	})
}

// UpdateLastSessionDate sets the "last_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateLastSessionDate() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateLastSessionDate()
	})
}

// ClearLastSessionDate clears the value of the "last_session_date" field.
func (u *MentorshipRequestUpsertBulk) ClearLastSessionDate() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearLastSessionDate()
	})
}

// SetNextSessionDate sets the "next_session_date" field.
func (u *MentorshipRequestUpsertBulk) SetNextSessionDate(v time.Time) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetNextSessionDate(v)
	})
}

// UpdateNextSessionDate sets the "next_session_date" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateNextSessionDate() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateNextSessionDate()
	})
}

// ClearNextSessionDate clears the value of the "next_session_date" field.
func (u *MentorshipRequestUpsertBulk) ClearNextSessionDate() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearNextSessionDate()
	})
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *MentorshipRequestUpsertBulk) SetCompletionNotes(v string) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetCompletionNotes(v)
	})
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateCompletionNotes() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateCompletionNotes()
	})
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *MentorshipRequestUpsertBulk) ClearCompletionNotes() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.ClearCompletionNotes()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MentorshipRequestUpsertBulk) SetUpdatedAt(v time.Time) *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MentorshipRequestUpsertBulk) UpdateUpdatedAt() *MentorshipRequestUpsertBulk {
	return u.Update(func(s *MentorshipRequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MentorshipRequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MentorshipRequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MentorshipRequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MentorshipRequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
