// Code generated by ent, DO NOT EDIT.

package token

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldID, id))
}

// TokenHash applies equality check predicate on the "token_hash" field. It's identical to TokenHashEQ.
func TokenHash(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenHash, v))
}

// Jti applies equality check predicate on the "jti" field. It's identical to JtiEQ.
func Jti(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldJti, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldExpiresAt, v))
}

// Used applies equality check predicate on the "used" field. It's identical to UsedEQ.
func Used(v bool) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUsed, v))
}

// MfaVerified applies equality check predicate on the "mfa_verified" field. It's identical to MfaVerifiedEQ.
func MfaVerified(v bool) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldMfaVerified, v))
}

// MfaMethod applies equality check predicate on the "mfa_method" field. It's identical to MfaMethodEQ.
func MfaMethod(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldMfaMethod, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldType, vs...))
}

// TokenHashEQ applies the EQ predicate on the "token_hash" field.
func TokenHashEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenHash, v))
}

// TokenHashNEQ applies the NEQ predicate on the "token_hash" field.
func TokenHashNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldTokenHash, v))
}

// TokenHashIn applies the In predicate on the "token_hash" field.
func TokenHashIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldTokenHash, vs...))
}

// TokenHashNotIn applies the NotIn predicate on the "token_hash" field.
func TokenHashNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldTokenHash, vs...))
}

// TokenHashGT applies the GT predicate on the "token_hash" field.
func TokenHashGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldTokenHash, v))
}

// TokenHashGTE applies the GTE predicate on the "token_hash" field.
func TokenHashGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldTokenHash, v))
}

// TokenHashLT applies the LT predicate on the "token_hash" field.
func TokenHashLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldTokenHash, v))
}

// TokenHashLTE applies the LTE predicate on the "token_hash" field.
func TokenHashLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldTokenHash, v))
}

// TokenHashContains applies the Contains predicate on the "token_hash" field.
func TokenHashContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldTokenHash, v))
}

// TokenHashHasPrefix applies the HasPrefix predicate on the "token_hash" field.
func TokenHashHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldTokenHash, v))
}

// TokenHashHasSuffix applies the HasSuffix predicate on the "token_hash" field.
func TokenHashHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldTokenHash, v))
}

// TokenHashEqualFold applies the EqualFold predicate on the "token_hash" field.
func TokenHashEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldTokenHash, v))
}

// TokenHashContainsFold applies the ContainsFold predicate on the "token_hash" field.
func TokenHashContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldTokenHash, v))
}

// JtiEQ applies the EQ predicate on the "jti" field.
func JtiEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldJti, v))
}

// JtiNEQ applies the NEQ predicate on the "jti" field.
func JtiNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldJti, v))
}

// JtiIn applies the In predicate on the "jti" field.
func JtiIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldJti, vs...))
}

// JtiNotIn applies the NotIn predicate on the "jti" field.
func JtiNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldJti, vs...))
}

// JtiGT applies the GT predicate on the "jti" field.
func JtiGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldJti, v))
}

// JtiGTE applies the GTE predicate on the "jti" field.
func JtiGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldJti, v))
}

// JtiLT applies the LT predicate on the "jti" field.
func JtiLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldJti, v))
}

// JtiLTE applies the LTE predicate on the "jti" field.
func JtiLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldJti, v))
}

// JtiContains applies the Contains predicate on the "jti" field.
func JtiContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldJti, v))
}

// JtiHasPrefix applies the HasPrefix predicate on the "jti" field.
func JtiHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldJti, v))
}

// JtiHasSuffix applies the HasSuffix predicate on the "jti" field.
func JtiHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldJti, v))
}

// JtiIsNil applies the IsNil predicate on the "jti" field.
func JtiIsNil() predicate.Token {
	return predicate.Token(sql.FieldIsNull(FieldJti))
}

// JtiNotNil applies the NotNil predicate on the "jti" field.
func JtiNotNil() predicate.Token {
	return predicate.Token(sql.FieldNotNull(FieldJti))
}

// JtiEqualFold applies the EqualFold predicate on the "jti" field.
func JtiEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldJti, v))
}

// JtiContainsFold applies the ContainsFold predicate on the "jti" field.
func JtiContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldJti, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldExpiresAt, v))
}

// UsedEQ applies the EQ predicate on the "used" field.
func UsedEQ(v bool) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUsed, v))
}

// UsedNEQ applies the NEQ predicate on the "used" field.
func UsedNEQ(v bool) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUsed, v))
}

// MfaVerifiedEQ applies the EQ predicate on the "mfa_verified" field.
func MfaVerifiedEQ(v bool) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldMfaVerified, v))
}

// MfaVerifiedNEQ applies the NEQ predicate on the "mfa_verified" field.
func MfaVerifiedNEQ(v bool) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldMfaVerified, v))
}

// MfaMethodEQ applies the EQ predicate on the "mfa_method" field.
func MfaMethodEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldMfaMethod, v))
}

// MfaMethodNEQ applies the NEQ predicate on the "mfa_method" field.
func MfaMethodNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldMfaMethod, v))
}

// MfaMethodIn applies the In predicate on the "mfa_method" field.
func MfaMethodIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldMfaMethod, vs...))
}

// MfaMethodNotIn applies the NotIn predicate on the "mfa_method" field.
func MfaMethodNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldMfaMethod, vs...))
}

// MfaMethodGT applies the GT predicate on the "mfa_method" field.
func MfaMethodGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldMfaMethod, v))
}

// MfaMethodGTE applies the GTE predicate on the "mfa_method" field.
func MfaMethodGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldMfaMethod, v))
}

// MfaMethodLT applies the LT predicate on the "mfa_method" field.
func MfaMethodLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldMfaMethod, v))
}

// MfaMethodLTE applies the LTE predicate on the "mfa_method" field.
func MfaMethodLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldMfaMethod, v))
}

// MfaMethodContains applies the Contains predicate on the "mfa_method" field.
func MfaMethodContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldMfaMethod, v))
}

// MfaMethodHasPrefix applies the HasPrefix predicate on the "mfa_method" field.
func MfaMethodHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldMfaMethod, v))
}

// MfaMethodHasSuffix applies the HasSuffix predicate on the "mfa_method" field.
func MfaMethodHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldMfaMethod, v))
}

// MfaMethodIsNil applies the IsNil predicate on the "mfa_method" field.
func MfaMethodIsNil() predicate.Token {
	return predicate.Token(sql.FieldIsNull(FieldMfaMethod))
}

// MfaMethodNotNil applies the NotNil predicate on the "mfa_method" field.
func MfaMethodNotNil() predicate.Token {
	return predicate.Token(sql.FieldNotNull(FieldMfaMethod))
}

// MfaMethodEqualFold applies the EqualFold predicate on the "mfa_method" field.
func MfaMethodEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldMfaMethod, v))
}

// MfaMethodContainsFold applies the ContainsFold predicate on the "mfa_method" field.
func MfaMethodContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldMfaMethod, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(sql.NotPredicates(p))
}
