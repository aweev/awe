// Code generated by ent, DO NOT EDIT.

package token

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTokenHash holds the string denoting the token_hash field in the database.
	FieldTokenHash = "token_hash"
	// FieldJti holds the string denoting the jti field in the database.
	FieldJti = "jti"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldMfaVerified holds the string denoting the mfa_verified field in the database.
	FieldMfaVerified = "mfa_verified"
	// FieldMfaMethod holds the string denoting the mfa_method field in the database.
	FieldMfaMethod = "mfa_method"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the token in the database.
	Table = "tokens"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "tokens"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_tokens"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTokenHash,
	FieldJti,
	FieldExpiresAt,
	FieldUsed,
	FieldMfaVerified,
	FieldMfaMethod,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed bool
	// DefaultMfaVerified holds the default value on creation for the "mfa_verified" field.
	DefaultMfaVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRESET_PASSWORD  Type = "RESET_PASSWORD"
	TypeVERIFY_EMAIL    Type = "VERIFY_EMAIL"
	TypeIMPERSONATE     Type = "IMPERSONATE"
	TypeTWO_FACTOR_AUTH Type = "TWO_FACTOR_AUTH"
	TypeACCESS_TOKEN    Type = "ACCESS_TOKEN"
	TypeREFRESH_TOKEN   Type = "REFRESH_TOKEN"
	TypeMFA_TOKEN       Type = "MFA_TOKEN"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRESET_PASSWORD, TypeVERIFY_EMAIL, TypeIMPERSONATE, TypeTWO_FACTOR_AUTH, TypeACCESS_TOKEN, TypeREFRESH_TOKEN, TypeMFA_TOKEN:
		return nil
	default:
		return fmt.Errorf("token: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Token queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTokenHash orders the results by the token_hash field.
func ByTokenHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenHash, opts...).ToFunc()
}

// ByJti orders the results by the jti field.
func ByJti(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJti, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByMfaVerified orders the results by the mfa_verified field.
func ByMfaVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaVerified, opts...).ToFunc()
}

// ByMfaMethod orders the results by the mfa_method field.
func ByMfaMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaMethod, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
