// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityLogUpdate is the builder for updating ActivityLog entities.
type ActivityLogUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityLogMutation
}

// Where appends a list predicates to the ActivityLogUpdate builder.
func (_u *ActivityLogUpdate) Where(ps ...predicate.ActivityLog) *ActivityLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *ActivityLogUpdate) SetType(v activitylog.Type) *ActivityLogUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableType(v *activitylog.Type) *ActivityLogUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ActivityLogUpdate) SetTitle(v string) *ActivityLogUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableTitle(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ActivityLogUpdate) SetDescription(v string) *ActivityLogUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableDescription(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ActivityLogUpdate) ClearDescription() *ActivityLogUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLinkHref sets the "link_href" field.
func (_u *ActivityLogUpdate) SetLinkHref(v string) *ActivityLogUpdate {
	_u.mutation.SetLinkHref(v)
	return _u
}

// SetNillableLinkHref sets the "link_href" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableLinkHref(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetLinkHref(*v)
	}
	return _u
}

// ClearLinkHref clears the value of the "link_href" field.
func (_u *ActivityLogUpdate) ClearLinkHref() *ActivityLogUpdate {
	_u.mutation.ClearLinkHref()
	return _u
}

// SetEntityType sets the "entity_type" field.
func (_u *ActivityLogUpdate) SetEntityType(v string) *ActivityLogUpdate {
	_u.mutation.SetEntityType(v)
	return _u
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableEntityType(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetEntityType(*v)
	}
	return _u
}

// ClearEntityType clears the value of the "entity_type" field.
func (_u *ActivityLogUpdate) ClearEntityType() *ActivityLogUpdate {
	_u.mutation.ClearEntityType()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *ActivityLogUpdate) SetEntityID(v string) *ActivityLogUpdate {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableEntityID(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *ActivityLogUpdate) ClearEntityID() *ActivityLogUpdate {
	_u.mutation.ClearEntityID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ActivityLogUpdate) SetMetadata(v map[string]interface{}) *ActivityLogUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ActivityLogUpdate) ClearMetadata() *ActivityLogUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ActivityLogUpdate) SetIPAddress(v string) *ActivityLogUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableIPAddress(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ActivityLogUpdate) ClearIPAddress() *ActivityLogUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ActivityLogUpdate) SetUserAgent(v string) *ActivityLogUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableUserAgent(v *string) *ActivityLogUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ActivityLogUpdate) ClearUserAgent() *ActivityLogUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ActivityLogUpdate) SetCreatedAt(v time.Time) *ActivityLogUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableCreatedAt(v *time.Time) *ActivityLogUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_u *ActivityLogUpdate) SetActorID(id int) *ActivityLogUpdate {
	_u.mutation.SetActorID(id)
	return _u
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_u *ActivityLogUpdate) SetNillableActorID(id *int) *ActivityLogUpdate {
	if id != nil {
		_u = _u.SetActorID(*id)
	}
	return _u
}

// SetActor sets the "actor" edge to the User entity.
func (_u *ActivityLogUpdate) SetActor(v *User) *ActivityLogUpdate {
	return _u.SetActorID(v.ID)
}

// Mutation returns the ActivityLogMutation object of the builder.
func (_u *ActivityLogUpdate) Mutation() *ActivityLogMutation {
	return _u.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (_u *ActivityLogUpdate) ClearActor() *ActivityLogUpdate {
	_u.mutation.ClearActor()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ActivityLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActivityLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ActivityLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActivityLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActivityLogUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := activitylog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ActivityLog.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ActivityLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitylog.Table, activitylog.Columns, sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(activitylog.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(activitylog.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(activitylog.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(activitylog.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LinkHref(); ok {
		_spec.SetField(activitylog.FieldLinkHref, field.TypeString, value)
	}
	if _u.mutation.LinkHrefCleared() {
		_spec.ClearField(activitylog.FieldLinkHref, field.TypeString)
	}
	if value, ok := _u.mutation.EntityType(); ok {
		_spec.SetField(activitylog.FieldEntityType, field.TypeString, value)
	}
	if _u.mutation.EntityTypeCleared() {
		_spec.ClearField(activitylog.FieldEntityType, field.TypeString)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(activitylog.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(activitylog.FieldEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(activitylog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(activitylog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(activitylog.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(activitylog.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(activitylog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(activitylog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(activitylog.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ActivityLogUpdateOne is the builder for updating a single ActivityLog entity.
type ActivityLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityLogMutation
}

// SetType sets the "type" field.
func (_u *ActivityLogUpdateOne) SetType(v activitylog.Type) *ActivityLogUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableType(v *activitylog.Type) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ActivityLogUpdateOne) SetTitle(v string) *ActivityLogUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableTitle(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ActivityLogUpdateOne) SetDescription(v string) *ActivityLogUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableDescription(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ActivityLogUpdateOne) ClearDescription() *ActivityLogUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLinkHref sets the "link_href" field.
func (_u *ActivityLogUpdateOne) SetLinkHref(v string) *ActivityLogUpdateOne {
	_u.mutation.SetLinkHref(v)
	return _u
}

// SetNillableLinkHref sets the "link_href" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableLinkHref(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetLinkHref(*v)
	}
	return _u
}

// ClearLinkHref clears the value of the "link_href" field.
func (_u *ActivityLogUpdateOne) ClearLinkHref() *ActivityLogUpdateOne {
	_u.mutation.ClearLinkHref()
	return _u
}

// SetEntityType sets the "entity_type" field.
func (_u *ActivityLogUpdateOne) SetEntityType(v string) *ActivityLogUpdateOne {
	_u.mutation.SetEntityType(v)
	return _u
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableEntityType(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetEntityType(*v)
	}
	return _u
}

// ClearEntityType clears the value of the "entity_type" field.
func (_u *ActivityLogUpdateOne) ClearEntityType() *ActivityLogUpdateOne {
	_u.mutation.ClearEntityType()
	return _u
}

// SetEntityID sets the "entity_id" field.
func (_u *ActivityLogUpdateOne) SetEntityID(v string) *ActivityLogUpdateOne {
	_u.mutation.SetEntityID(v)
	return _u
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableEntityID(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetEntityID(*v)
	}
	return _u
}

// ClearEntityID clears the value of the "entity_id" field.
func (_u *ActivityLogUpdateOne) ClearEntityID() *ActivityLogUpdateOne {
	_u.mutation.ClearEntityID()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ActivityLogUpdateOne) SetMetadata(v map[string]interface{}) *ActivityLogUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ActivityLogUpdateOne) ClearMetadata() *ActivityLogUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *ActivityLogUpdateOne) SetIPAddress(v string) *ActivityLogUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableIPAddress(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *ActivityLogUpdateOne) ClearIPAddress() *ActivityLogUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *ActivityLogUpdateOne) SetUserAgent(v string) *ActivityLogUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableUserAgent(v *string) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *ActivityLogUpdateOne) ClearUserAgent() *ActivityLogUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *ActivityLogUpdateOne) SetCreatedAt(v time.Time) *ActivityLogUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableCreatedAt(v *time.Time) *ActivityLogUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_u *ActivityLogUpdateOne) SetActorID(id int) *ActivityLogUpdateOne {
	_u.mutation.SetActorID(id)
	return _u
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_u *ActivityLogUpdateOne) SetNillableActorID(id *int) *ActivityLogUpdateOne {
	if id != nil {
		_u = _u.SetActorID(*id)
	}
	return _u
}

// SetActor sets the "actor" edge to the User entity.
func (_u *ActivityLogUpdateOne) SetActor(v *User) *ActivityLogUpdateOne {
	return _u.SetActorID(v.ID)
}

// Mutation returns the ActivityLogMutation object of the builder.
func (_u *ActivityLogUpdateOne) Mutation() *ActivityLogMutation {
	return _u.mutation
}

// ClearActor clears the "actor" edge to the User entity.
func (_u *ActivityLogUpdateOne) ClearActor() *ActivityLogUpdateOne {
	_u.mutation.ClearActor()
	return _u
}

// Where appends a list predicates to the ActivityLogUpdate builder.
func (_u *ActivityLogUpdateOne) Where(ps ...predicate.ActivityLog) *ActivityLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ActivityLogUpdateOne) Select(field string, fields ...string) *ActivityLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ActivityLog entity.
func (_u *ActivityLogUpdateOne) Save(ctx context.Context) (*ActivityLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActivityLogUpdateOne) SaveX(ctx context.Context) *ActivityLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ActivityLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActivityLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActivityLogUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := activitylog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ActivityLog.type": %w`, err)}
		}
	}
	return nil
}

func (_u *ActivityLogUpdateOne) sqlSave(ctx context.Context) (_node *ActivityLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activitylog.Table, activitylog.Columns, sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivityLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitylog.FieldID)
		for _, f := range fields {
			if !activitylog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitylog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(activitylog.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(activitylog.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(activitylog.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(activitylog.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LinkHref(); ok {
		_spec.SetField(activitylog.FieldLinkHref, field.TypeString, value)
	}
	if _u.mutation.LinkHrefCleared() {
		_spec.ClearField(activitylog.FieldLinkHref, field.TypeString)
	}
	if value, ok := _u.mutation.EntityType(); ok {
		_spec.SetField(activitylog.FieldEntityType, field.TypeString, value)
	}
	if _u.mutation.EntityTypeCleared() {
		_spec.ClearField(activitylog.FieldEntityType, field.TypeString)
	}
	if value, ok := _u.mutation.EntityID(); ok {
		_spec.SetField(activitylog.FieldEntityID, field.TypeString, value)
	}
	if _u.mutation.EntityIDCleared() {
		_spec.ClearField(activitylog.FieldEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(activitylog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(activitylog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(activitylog.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(activitylog.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(activitylog.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(activitylog.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(activitylog.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivityLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitylog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
