// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/volunteerapplication"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VolunteerOpportunityCreate is the builder for creating a VolunteerOpportunity entity.
type VolunteerOpportunityCreate struct {
	config
	mutation *VolunteerOpportunityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (_c *VolunteerOpportunityCreate) SetTitle(v map[string]string) *VolunteerOpportunityCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *VolunteerOpportunityCreate) SetDescription(v map[string]string) *VolunteerOpportunityCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetTimeCommitment sets the "time_commitment" field.
func (_c *VolunteerOpportunityCreate) SetTimeCommitment(v string) *VolunteerOpportunityCreate {
	_c.mutation.SetTimeCommitment(v)
	return _c
}

// SetLocation sets the "location" field.
func (_c *VolunteerOpportunityCreate) SetLocation(v map[string]string) *VolunteerOpportunityCreate {
	_c.mutation.SetLocation(v)
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *VolunteerOpportunityCreate) SetIsActive(v bool) *VolunteerOpportunityCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableIsActive(v *bool) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (_c *VolunteerOpportunityCreate) SetMaxVolunteers(v int) *VolunteerOpportunityCreate {
	_c.mutation.SetMaxVolunteers(v)
	return _c
}

// SetNillableMaxVolunteers sets the "max_volunteers" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableMaxVolunteers(v *int) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetMaxVolunteers(*v)
	}
	return _c
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (_c *VolunteerOpportunityCreate) SetCurrentVolunteers(v int) *VolunteerOpportunityCreate {
	_c.mutation.SetCurrentVolunteers(v)
	return _c
}

// SetNillableCurrentVolunteers sets the "current_volunteers" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableCurrentVolunteers(v *int) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetCurrentVolunteers(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *VolunteerOpportunityCreate) SetStartDate(v time.Time) *VolunteerOpportunityCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableStartDate(v *time.Time) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetStartDate(*v)
	}
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *VolunteerOpportunityCreate) SetEndDate(v time.Time) *VolunteerOpportunityCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableEndDate(v *time.Time) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_c *VolunteerOpportunityCreate) SetApplicationDeadline(v time.Time) *VolunteerOpportunityCreate {
	_c.mutation.SetApplicationDeadline(v)
	return _c
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableApplicationDeadline(v *time.Time) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetApplicationDeadline(*v)
	}
	return _c
}

// SetRequiredSkills sets the "required_skills" field.
func (_c *VolunteerOpportunityCreate) SetRequiredSkills(v []string) *VolunteerOpportunityCreate {
	_c.mutation.SetRequiredSkills(v)
	return _c
}

// SetPreferredSkills sets the "preferred_skills" field.
func (_c *VolunteerOpportunityCreate) SetPreferredSkills(v []string) *VolunteerOpportunityCreate {
	_c.mutation.SetPreferredSkills(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *VolunteerOpportunityCreate) SetTags(v []string) *VolunteerOpportunityCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetIsUrgent sets the "is_urgent" field.
func (_c *VolunteerOpportunityCreate) SetIsUrgent(v bool) *VolunteerOpportunityCreate {
	_c.mutation.SetIsUrgent(v)
	return _c
}

// SetNillableIsUrgent sets the "is_urgent" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableIsUrgent(v *bool) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetIsUrgent(*v)
	}
	return _c
}

// SetIsRecurring sets the "is_recurring" field.
func (_c *VolunteerOpportunityCreate) SetIsRecurring(v bool) *VolunteerOpportunityCreate {
	_c.mutation.SetIsRecurring(v)
	return _c
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableIsRecurring(v *bool) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetIsRecurring(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *VolunteerOpportunityCreate) SetCreatedAt(v time.Time) *VolunteerOpportunityCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableCreatedAt(v *time.Time) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *VolunteerOpportunityCreate) SetUpdatedAt(v time.Time) *VolunteerOpportunityCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *VolunteerOpportunityCreate) SetNillableUpdatedAt(v *time.Time) *VolunteerOpportunityCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *VolunteerOpportunityCreate) SetProgramID(id int) *VolunteerOpportunityCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *VolunteerOpportunityCreate) SetProgram(v *Program) *VolunteerOpportunityCreate {
	return _c.SetProgramID(v.ID)
}

// AddInterestedVolunteerIDs adds the "interested_volunteers" edge to the VolunteerApplication entity by IDs.
func (_c *VolunteerOpportunityCreate) AddInterestedVolunteerIDs(ids ...int) *VolunteerOpportunityCreate {
	_c.mutation.AddInterestedVolunteerIDs(ids...)
	return _c
}

// AddInterestedVolunteers adds the "interested_volunteers" edges to the VolunteerApplication entity.
func (_c *VolunteerOpportunityCreate) AddInterestedVolunteers(v ...*VolunteerApplication) *VolunteerOpportunityCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInterestedVolunteerIDs(ids...)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_c *VolunteerOpportunityCreate) AddAssignmentIDs(ids ...int) *VolunteerOpportunityCreate {
	_c.mutation.AddAssignmentIDs(ids...)
	return _c
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_c *VolunteerOpportunityCreate) AddAssignments(v ...*VolunteerAssignment) *VolunteerOpportunityCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssignmentIDs(ids...)
}

// Mutation returns the VolunteerOpportunityMutation object of the builder.
func (_c *VolunteerOpportunityCreate) Mutation() *VolunteerOpportunityMutation {
	return _c.mutation
}

// Save creates the VolunteerOpportunity in the database.
func (_c *VolunteerOpportunityCreate) Save(ctx context.Context) (*VolunteerOpportunity, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VolunteerOpportunityCreate) SaveX(ctx context.Context) *VolunteerOpportunity {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerOpportunityCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerOpportunityCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VolunteerOpportunityCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := volunteeropportunity.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CurrentVolunteers(); !ok {
		v := volunteeropportunity.DefaultCurrentVolunteers
		_c.mutation.SetCurrentVolunteers(v)
	}
	if _, ok := _c.mutation.IsUrgent(); !ok {
		v := volunteeropportunity.DefaultIsUrgent
		_c.mutation.SetIsUrgent(v)
	}
	if _, ok := _c.mutation.IsRecurring(); !ok {
		v := volunteeropportunity.DefaultIsRecurring
		_c.mutation.SetIsRecurring(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := volunteeropportunity.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := volunteeropportunity.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VolunteerOpportunityCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "VolunteerOpportunity.title"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "VolunteerOpportunity.description"`)}
	}
	if _, ok := _c.mutation.TimeCommitment(); !ok {
		return &ValidationError{Name: "time_commitment", err: errors.New(`ent: missing required field "VolunteerOpportunity.time_commitment"`)}
	}
	if _, ok := _c.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "VolunteerOpportunity.location"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "VolunteerOpportunity.is_active"`)}
	}
	if _, ok := _c.mutation.CurrentVolunteers(); !ok {
		return &ValidationError{Name: "current_volunteers", err: errors.New(`ent: missing required field "VolunteerOpportunity.current_volunteers"`)}
	}
	if _, ok := _c.mutation.RequiredSkills(); !ok {
		return &ValidationError{Name: "required_skills", err: errors.New(`ent: missing required field "VolunteerOpportunity.required_skills"`)}
	}
	if _, ok := _c.mutation.PreferredSkills(); !ok {
		return &ValidationError{Name: "preferred_skills", err: errors.New(`ent: missing required field "VolunteerOpportunity.preferred_skills"`)}
	}
	if _, ok := _c.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "VolunteerOpportunity.tags"`)}
	}
	if _, ok := _c.mutation.IsUrgent(); !ok {
		return &ValidationError{Name: "is_urgent", err: errors.New(`ent: missing required field "VolunteerOpportunity.is_urgent"`)}
	}
	if _, ok := _c.mutation.IsRecurring(); !ok {
		return &ValidationError{Name: "is_recurring", err: errors.New(`ent: missing required field "VolunteerOpportunity.is_recurring"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VolunteerOpportunity.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VolunteerOpportunity.updated_at"`)}
	}
	if len(_c.mutation.ProgramIDs()) == 0 {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "VolunteerOpportunity.program"`)}
	}
	return nil
}

func (_c *VolunteerOpportunityCreate) sqlSave(ctx context.Context) (*VolunteerOpportunity, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VolunteerOpportunityCreate) createSpec() (*VolunteerOpportunity, *sqlgraph.CreateSpec) {
	var (
		_node = &VolunteerOpportunity{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(volunteeropportunity.Table, sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(volunteeropportunity.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(volunteeropportunity.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.TimeCommitment(); ok {
		_spec.SetField(volunteeropportunity.FieldTimeCommitment, field.TypeString, value)
		_node.TimeCommitment = value
	}
	if value, ok := _c.mutation.Location(); ok {
		_spec.SetField(volunteeropportunity.FieldLocation, field.TypeJSON, value)
		_node.Location = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(volunteeropportunity.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.MaxVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt, value)
		_node.MaxVolunteers = value
	}
	if value, ok := _c.mutation.CurrentVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldCurrentVolunteers, field.TypeInt, value)
		_node.CurrentVolunteers = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(volunteeropportunity.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(volunteeropportunity.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.ApplicationDeadline(); ok {
		_spec.SetField(volunteeropportunity.FieldApplicationDeadline, field.TypeTime, value)
		_node.ApplicationDeadline = value
	}
	if value, ok := _c.mutation.RequiredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldRequiredSkills, field.TypeJSON, value)
		_node.RequiredSkills = value
	}
	if value, ok := _c.mutation.PreferredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldPreferredSkills, field.TypeJSON, value)
		_node.PreferredSkills = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(volunteeropportunity.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.IsUrgent(); ok {
		_spec.SetField(volunteeropportunity.FieldIsUrgent, field.TypeBool, value)
		_node.IsUrgent = value
	}
	if value, ok := _c.mutation.IsRecurring(); ok {
		_spec.SetField(volunteeropportunity.FieldIsRecurring, field.TypeBool, value)
		_node.IsRecurring = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(volunteeropportunity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteeropportunity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_volunteer_opportunities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InterestedVolunteersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerOpportunity.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerOpportunityUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerOpportunityCreate) OnConflict(opts ...sql.ConflictOption) *VolunteerOpportunityUpsertOne {
	_c.conflict = opts
	return &VolunteerOpportunityUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerOpportunityCreate) OnConflictColumns(columns ...string) *VolunteerOpportunityUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerOpportunityUpsertOne{
		create: _c,
	}
}

type (
	// VolunteerOpportunityUpsertOne is the builder for "upsert"-ing
	//  one VolunteerOpportunity node.
	VolunteerOpportunityUpsertOne struct {
		create *VolunteerOpportunityCreate
	}

	// VolunteerOpportunityUpsert is the "OnConflict" setter.
	VolunteerOpportunityUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *VolunteerOpportunityUpsert) SetTitle(v map[string]string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateTitle() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *VolunteerOpportunityUpsert) SetDescription(v map[string]string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateDescription() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldDescription)
	return u
}

// SetTimeCommitment sets the "time_commitment" field.
func (u *VolunteerOpportunityUpsert) SetTimeCommitment(v string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldTimeCommitment, v)
	return u
}

// UpdateTimeCommitment sets the "time_commitment" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateTimeCommitment() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldTimeCommitment)
	return u
}

// SetLocation sets the "location" field.
func (u *VolunteerOpportunityUpsert) SetLocation(v map[string]string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateLocation() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldLocation)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *VolunteerOpportunityUpsert) SetIsActive(v bool) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateIsActive() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldIsActive)
	return u
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (u *VolunteerOpportunityUpsert) SetMaxVolunteers(v int) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldMaxVolunteers, v)
	return u
}

// UpdateMaxVolunteers sets the "max_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateMaxVolunteers() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldMaxVolunteers)
	return u
}

// AddMaxVolunteers adds v to the "max_volunteers" field.
func (u *VolunteerOpportunityUpsert) AddMaxVolunteers(v int) *VolunteerOpportunityUpsert {
	u.Add(volunteeropportunity.FieldMaxVolunteers, v)
	return u
}

// ClearMaxVolunteers clears the value of the "max_volunteers" field.
func (u *VolunteerOpportunityUpsert) ClearMaxVolunteers() *VolunteerOpportunityUpsert {
	u.SetNull(volunteeropportunity.FieldMaxVolunteers)
	return u
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (u *VolunteerOpportunityUpsert) SetCurrentVolunteers(v int) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldCurrentVolunteers, v)
	return u
}

// UpdateCurrentVolunteers sets the "current_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateCurrentVolunteers() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldCurrentVolunteers)
	return u
}

// AddCurrentVolunteers adds v to the "current_volunteers" field.
func (u *VolunteerOpportunityUpsert) AddCurrentVolunteers(v int) *VolunteerOpportunityUpsert {
	u.Add(volunteeropportunity.FieldCurrentVolunteers, v)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerOpportunityUpsert) SetStartDate(v time.Time) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateStartDate() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *VolunteerOpportunityUpsert) ClearStartDate() *VolunteerOpportunityUpsert {
	u.SetNull(volunteeropportunity.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerOpportunityUpsert) SetEndDate(v time.Time) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateEndDate() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerOpportunityUpsert) ClearEndDate() *VolunteerOpportunityUpsert {
	u.SetNull(volunteeropportunity.FieldEndDate)
	return u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *VolunteerOpportunityUpsert) SetApplicationDeadline(v time.Time) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldApplicationDeadline, v)
	return u
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateApplicationDeadline() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldApplicationDeadline)
	return u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *VolunteerOpportunityUpsert) ClearApplicationDeadline() *VolunteerOpportunityUpsert {
	u.SetNull(volunteeropportunity.FieldApplicationDeadline)
	return u
}

// SetRequiredSkills sets the "required_skills" field.
func (u *VolunteerOpportunityUpsert) SetRequiredSkills(v []string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldRequiredSkills, v)
	return u
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateRequiredSkills() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldRequiredSkills)
	return u
}

// SetPreferredSkills sets the "preferred_skills" field.
func (u *VolunteerOpportunityUpsert) SetPreferredSkills(v []string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldPreferredSkills, v)
	return u
}

// UpdatePreferredSkills sets the "preferred_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdatePreferredSkills() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldPreferredSkills)
	return u
}

// SetTags sets the "tags" field.
func (u *VolunteerOpportunityUpsert) SetTags(v []string) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateTags() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldTags)
	return u
}

// SetIsUrgent sets the "is_urgent" field.
func (u *VolunteerOpportunityUpsert) SetIsUrgent(v bool) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldIsUrgent, v)
	return u
}

// UpdateIsUrgent sets the "is_urgent" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateIsUrgent() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldIsUrgent)
	return u
}

// SetIsRecurring sets the "is_recurring" field.
func (u *VolunteerOpportunityUpsert) SetIsRecurring(v bool) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldIsRecurring, v)
	return u
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateIsRecurring() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldIsRecurring)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerOpportunityUpsert) SetUpdatedAt(v time.Time) *VolunteerOpportunityUpsert {
	u.Set(volunteeropportunity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsert) UpdateUpdatedAt() *VolunteerOpportunityUpsert {
	u.SetExcluded(volunteeropportunity.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerOpportunityUpsertOne) UpdateNewValues() *VolunteerOpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(volunteeropportunity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VolunteerOpportunityUpsertOne) Ignore() *VolunteerOpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerOpportunityUpsertOne) DoNothing() *VolunteerOpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerOpportunityCreate.OnConflict
// documentation for more info.
func (u *VolunteerOpportunityUpsertOne) Update(set func(*VolunteerOpportunityUpsert)) *VolunteerOpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerOpportunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *VolunteerOpportunityUpsertOne) SetTitle(v map[string]string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateTitle() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VolunteerOpportunityUpsertOne) SetDescription(v map[string]string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateDescription() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateDescription()
	})
}

// SetTimeCommitment sets the "time_commitment" field.
func (u *VolunteerOpportunityUpsertOne) SetTimeCommitment(v string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTimeCommitment(v)
	})
}

// UpdateTimeCommitment sets the "time_commitment" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateTimeCommitment() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTimeCommitment()
	})
}

// SetLocation sets the "location" field.
func (u *VolunteerOpportunityUpsertOne) SetLocation(v map[string]string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateLocation() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateLocation()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VolunteerOpportunityUpsertOne) SetIsActive(v bool) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateIsActive() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsActive()
	})
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertOne) SetMaxVolunteers(v int) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetMaxVolunteers(v)
	})
}

// AddMaxVolunteers adds v to the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertOne) AddMaxVolunteers(v int) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.AddMaxVolunteers(v)
	})
}

// UpdateMaxVolunteers sets the "max_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateMaxVolunteers() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateMaxVolunteers()
	})
}

// ClearMaxVolunteers clears the value of the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertOne) ClearMaxVolunteers() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearMaxVolunteers()
	})
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (u *VolunteerOpportunityUpsertOne) SetCurrentVolunteers(v int) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetCurrentVolunteers(v)
	})
}

// AddCurrentVolunteers adds v to the "current_volunteers" field.
func (u *VolunteerOpportunityUpsertOne) AddCurrentVolunteers(v int) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.AddCurrentVolunteers(v)
	})
}

// UpdateCurrentVolunteers sets the "current_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateCurrentVolunteers() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateCurrentVolunteers()
	})
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerOpportunityUpsertOne) SetStartDate(v time.Time) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateStartDate() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *VolunteerOpportunityUpsertOne) ClearStartDate() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerOpportunityUpsertOne) SetEndDate(v time.Time) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateEndDate() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerOpportunityUpsertOne) ClearEndDate() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearEndDate()
	})
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *VolunteerOpportunityUpsertOne) SetApplicationDeadline(v time.Time) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetApplicationDeadline(v)
	})
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateApplicationDeadline() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateApplicationDeadline()
	})
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *VolunteerOpportunityUpsertOne) ClearApplicationDeadline() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearApplicationDeadline()
	})
}

// SetRequiredSkills sets the "required_skills" field.
func (u *VolunteerOpportunityUpsertOne) SetRequiredSkills(v []string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetRequiredSkills(v)
	})
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateRequiredSkills() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateRequiredSkills()
	})
}

// SetPreferredSkills sets the "preferred_skills" field.
func (u *VolunteerOpportunityUpsertOne) SetPreferredSkills(v []string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetPreferredSkills(v)
	})
}

// UpdatePreferredSkills sets the "preferred_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdatePreferredSkills() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdatePreferredSkills()
	})
}

// SetTags sets the "tags" field.
func (u *VolunteerOpportunityUpsertOne) SetTags(v []string) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateTags() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTags()
	})
}

// SetIsUrgent sets the "is_urgent" field.
func (u *VolunteerOpportunityUpsertOne) SetIsUrgent(v bool) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsUrgent(v)
	})
}

// UpdateIsUrgent sets the "is_urgent" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateIsUrgent() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsUrgent()
	})
}

// SetIsRecurring sets the "is_recurring" field.
func (u *VolunteerOpportunityUpsertOne) SetIsRecurring(v bool) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsRecurring(v)
	})
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateIsRecurring() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsRecurring()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerOpportunityUpsertOne) SetUpdatedAt(v time.Time) *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertOne) UpdateUpdatedAt() *VolunteerOpportunityUpsertOne {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerOpportunityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerOpportunityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerOpportunityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VolunteerOpportunityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VolunteerOpportunityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VolunteerOpportunityCreateBulk is the builder for creating many VolunteerOpportunity entities in bulk.
type VolunteerOpportunityCreateBulk struct {
	config
	err      error
	builders []*VolunteerOpportunityCreate
	conflict []sql.ConflictOption
}

// Save creates the VolunteerOpportunity entities in the database.
func (_c *VolunteerOpportunityCreateBulk) Save(ctx context.Context) ([]*VolunteerOpportunity, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*VolunteerOpportunity, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VolunteerOpportunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VolunteerOpportunityCreateBulk) SaveX(ctx context.Context) []*VolunteerOpportunity {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerOpportunityCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerOpportunityCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerOpportunity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerOpportunityUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerOpportunityCreateBulk) OnConflict(opts ...sql.ConflictOption) *VolunteerOpportunityUpsertBulk {
	_c.conflict = opts
	return &VolunteerOpportunityUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerOpportunityCreateBulk) OnConflictColumns(columns ...string) *VolunteerOpportunityUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerOpportunityUpsertBulk{
		create: _c,
	}
}

// VolunteerOpportunityUpsertBulk is the builder for "upsert"-ing
// a bulk of VolunteerOpportunity nodes.
type VolunteerOpportunityUpsertBulk struct {
	create *VolunteerOpportunityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerOpportunityUpsertBulk) UpdateNewValues() *VolunteerOpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(volunteeropportunity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerOpportunity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VolunteerOpportunityUpsertBulk) Ignore() *VolunteerOpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerOpportunityUpsertBulk) DoNothing() *VolunteerOpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerOpportunityCreateBulk.OnConflict
// documentation for more info.
func (u *VolunteerOpportunityUpsertBulk) Update(set func(*VolunteerOpportunityUpsert)) *VolunteerOpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerOpportunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *VolunteerOpportunityUpsertBulk) SetTitle(v map[string]string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateTitle() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VolunteerOpportunityUpsertBulk) SetDescription(v map[string]string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateDescription() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateDescription()
	})
}

// SetTimeCommitment sets the "time_commitment" field.
func (u *VolunteerOpportunityUpsertBulk) SetTimeCommitment(v string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTimeCommitment(v)
	})
}

// UpdateTimeCommitment sets the "time_commitment" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateTimeCommitment() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTimeCommitment()
	})
}

// SetLocation sets the "location" field.
func (u *VolunteerOpportunityUpsertBulk) SetLocation(v map[string]string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateLocation() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateLocation()
	})
}

// SetIsActive sets the "is_active" field.
func (u *VolunteerOpportunityUpsertBulk) SetIsActive(v bool) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateIsActive() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsActive()
	})
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertBulk) SetMaxVolunteers(v int) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetMaxVolunteers(v)
	})
}

// AddMaxVolunteers adds v to the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertBulk) AddMaxVolunteers(v int) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.AddMaxVolunteers(v)
	})
}

// UpdateMaxVolunteers sets the "max_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateMaxVolunteers() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateMaxVolunteers()
	})
}

// ClearMaxVolunteers clears the value of the "max_volunteers" field.
func (u *VolunteerOpportunityUpsertBulk) ClearMaxVolunteers() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearMaxVolunteers()
	})
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (u *VolunteerOpportunityUpsertBulk) SetCurrentVolunteers(v int) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetCurrentVolunteers(v)
	})
}

// AddCurrentVolunteers adds v to the "current_volunteers" field.
func (u *VolunteerOpportunityUpsertBulk) AddCurrentVolunteers(v int) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.AddCurrentVolunteers(v)
	})
}

// UpdateCurrentVolunteers sets the "current_volunteers" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateCurrentVolunteers() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateCurrentVolunteers()
	})
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerOpportunityUpsertBulk) SetStartDate(v time.Time) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateStartDate() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *VolunteerOpportunityUpsertBulk) ClearStartDate() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerOpportunityUpsertBulk) SetEndDate(v time.Time) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateEndDate() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerOpportunityUpsertBulk) ClearEndDate() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearEndDate()
	})
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *VolunteerOpportunityUpsertBulk) SetApplicationDeadline(v time.Time) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetApplicationDeadline(v)
	})
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateApplicationDeadline() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateApplicationDeadline()
	})
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *VolunteerOpportunityUpsertBulk) ClearApplicationDeadline() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.ClearApplicationDeadline()
	})
}

// SetRequiredSkills sets the "required_skills" field.
func (u *VolunteerOpportunityUpsertBulk) SetRequiredSkills(v []string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetRequiredSkills(v)
	})
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateRequiredSkills() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateRequiredSkills()
	})
}

// SetPreferredSkills sets the "preferred_skills" field.
func (u *VolunteerOpportunityUpsertBulk) SetPreferredSkills(v []string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetPreferredSkills(v)
	})
}

// UpdatePreferredSkills sets the "preferred_skills" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdatePreferredSkills() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdatePreferredSkills()
	})
}

// SetTags sets the "tags" field.
func (u *VolunteerOpportunityUpsertBulk) SetTags(v []string) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateTags() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateTags()
	})
}

// SetIsUrgent sets the "is_urgent" field.
func (u *VolunteerOpportunityUpsertBulk) SetIsUrgent(v bool) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsUrgent(v)
	})
}

// UpdateIsUrgent sets the "is_urgent" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateIsUrgent() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsUrgent()
	})
}

// SetIsRecurring sets the "is_recurring" field.
func (u *VolunteerOpportunityUpsertBulk) SetIsRecurring(v bool) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetIsRecurring(v)
	})
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateIsRecurring() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateIsRecurring()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerOpportunityUpsertBulk) SetUpdatedAt(v time.Time) *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerOpportunityUpsertBulk) UpdateUpdatedAt() *VolunteerOpportunityUpsertBulk {
	return u.Update(func(s *VolunteerOpportunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerOpportunityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VolunteerOpportunityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerOpportunityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerOpportunityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
