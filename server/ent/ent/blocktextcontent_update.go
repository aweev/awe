// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockTextContentUpdate is the builder for updating BlockTextContent entities.
type BlockTextContentUpdate struct {
	config
	hooks    []Hook
	mutation *BlockTextContentMutation
}

// Where appends a list predicates to the BlockTextContentUpdate builder.
func (_u *BlockTextContentUpdate) Where(ps ...predicate.BlockTextContent) *BlockTextContentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockTextContentUpdate) SetInternalName(v string) *BlockTextContentUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockTextContentUpdate) SetNillableInternalName(v *string) *BlockTextContentUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *BlockTextContentUpdate) SetContent(v map[string]string) *BlockTextContentUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockTextContentUpdate) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentUpdate {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockTextContentUpdate) SetNillableTextAlign(v *blocktextcontent.TextAlign) *BlockTextContentUpdate {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockTextContentUpdate) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentUpdate {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockTextContentUpdate) SetNillableColorScheme(v *blocktextcontent.ColorScheme) *BlockTextContentUpdate {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetMaxWidth sets the "max_width" field.
func (_u *BlockTextContentUpdate) SetMaxWidth(v string) *BlockTextContentUpdate {
	_u.mutation.SetMaxWidth(v)
	return _u
}

// SetNillableMaxWidth sets the "max_width" field if the given value is not nil.
func (_u *BlockTextContentUpdate) SetNillableMaxWidth(v *string) *BlockTextContentUpdate {
	if v != nil {
		_u.SetMaxWidth(*v)
	}
	return _u
}

// ClearMaxWidth clears the value of the "max_width" field.
func (_u *BlockTextContentUpdate) ClearMaxWidth() *BlockTextContentUpdate {
	_u.mutation.ClearMaxWidth()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockTextContentUpdate) SetUpdatedAt(v time.Time) *BlockTextContentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockTextContentUpdate) SetContentBlockID(id int) *BlockTextContentUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockTextContentUpdate) SetContentBlock(v *ContentBlock) *BlockTextContentUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockTextContentMutation object of the builder.
func (_u *BlockTextContentUpdate) Mutation() *BlockTextContentMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockTextContentUpdate) ClearContentBlock() *BlockTextContentUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockTextContentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockTextContentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockTextContentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockTextContentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockTextContentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocktextcontent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockTextContentUpdate) check() error {
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blocktextcontent.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blocktextcontent.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockTextContent.content_block"`)
	}
	return nil
}

func (_u *BlockTextContentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocktextcontent.Table, blocktextcontent.Columns, sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocktextcontent.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(blocktextcontent.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blocktextcontent.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blocktextcontent.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.MaxWidth(); ok {
		_spec.SetField(blocktextcontent.FieldMaxWidth, field.TypeString, value)
	}
	if _u.mutation.MaxWidthCleared() {
		_spec.ClearField(blocktextcontent.FieldMaxWidth, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktextcontent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocktextcontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockTextContentUpdateOne is the builder for updating a single BlockTextContent entity.
type BlockTextContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockTextContentMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockTextContentUpdateOne) SetInternalName(v string) *BlockTextContentUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockTextContentUpdateOne) SetNillableInternalName(v *string) *BlockTextContentUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *BlockTextContentUpdateOne) SetContent(v map[string]string) *BlockTextContentUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockTextContentUpdateOne) SetTextAlign(v blocktextcontent.TextAlign) *BlockTextContentUpdateOne {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockTextContentUpdateOne) SetNillableTextAlign(v *blocktextcontent.TextAlign) *BlockTextContentUpdateOne {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockTextContentUpdateOne) SetColorScheme(v blocktextcontent.ColorScheme) *BlockTextContentUpdateOne {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockTextContentUpdateOne) SetNillableColorScheme(v *blocktextcontent.ColorScheme) *BlockTextContentUpdateOne {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetMaxWidth sets the "max_width" field.
func (_u *BlockTextContentUpdateOne) SetMaxWidth(v string) *BlockTextContentUpdateOne {
	_u.mutation.SetMaxWidth(v)
	return _u
}

// SetNillableMaxWidth sets the "max_width" field if the given value is not nil.
func (_u *BlockTextContentUpdateOne) SetNillableMaxWidth(v *string) *BlockTextContentUpdateOne {
	if v != nil {
		_u.SetMaxWidth(*v)
	}
	return _u
}

// ClearMaxWidth clears the value of the "max_width" field.
func (_u *BlockTextContentUpdateOne) ClearMaxWidth() *BlockTextContentUpdateOne {
	_u.mutation.ClearMaxWidth()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockTextContentUpdateOne) SetUpdatedAt(v time.Time) *BlockTextContentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockTextContentUpdateOne) SetContentBlockID(id int) *BlockTextContentUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockTextContentUpdateOne) SetContentBlock(v *ContentBlock) *BlockTextContentUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockTextContentMutation object of the builder.
func (_u *BlockTextContentUpdateOne) Mutation() *BlockTextContentMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockTextContentUpdateOne) ClearContentBlock() *BlockTextContentUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockTextContentUpdate builder.
func (_u *BlockTextContentUpdateOne) Where(ps ...predicate.BlockTextContent) *BlockTextContentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockTextContentUpdateOne) Select(field string, fields ...string) *BlockTextContentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockTextContent entity.
func (_u *BlockTextContentUpdateOne) Save(ctx context.Context) (*BlockTextContent, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockTextContentUpdateOne) SaveX(ctx context.Context) *BlockTextContent {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockTextContentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockTextContentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockTextContentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocktextcontent.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockTextContentUpdateOne) check() error {
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blocktextcontent.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blocktextcontent.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockTextContent.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockTextContent.content_block"`)
	}
	return nil
}

func (_u *BlockTextContentUpdateOne) sqlSave(ctx context.Context) (_node *BlockTextContent, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocktextcontent.Table, blocktextcontent.Columns, sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockTextContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocktextcontent.FieldID)
		for _, f := range fields {
			if !blocktextcontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocktextcontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocktextcontent.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(blocktextcontent.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blocktextcontent.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blocktextcontent.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.MaxWidth(); ok {
		_spec.SetField(blocktextcontent.FieldMaxWidth, field.TypeString, value)
	}
	if _u.mutation.MaxWidthCleared() {
		_spec.ClearField(blocktextcontent.FieldMaxWidth, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktextcontent.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockTextContent{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocktextcontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
