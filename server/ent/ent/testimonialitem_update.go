// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/predicate"
	"awe/ent/ent/successstory"
	"awe/ent/ent/testimonialitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestimonialItemUpdate is the builder for updating TestimonialItem entities.
type TestimonialItemUpdate struct {
	config
	hooks    []Hook
	mutation *TestimonialItemMutation
}

// Where appends a list predicates to the TestimonialItemUpdate builder.
func (_u *TestimonialItemUpdate) Where(ps ...predicate.TestimonialItem) *TestimonialItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *TestimonialItemUpdate) SetOrder(v int) *TestimonialItemUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TestimonialItemUpdate) SetNillableOrder(v *int) *TestimonialItemUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TestimonialItemUpdate) AddOrder(v int) *TestimonialItemUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetQuote sets the "quote" field.
func (_u *TestimonialItemUpdate) SetQuote(v map[string]string) *TestimonialItemUpdate {
	_u.mutation.SetQuote(v)
	return _u
}

// SetAuthorName sets the "author_name" field.
func (_u *TestimonialItemUpdate) SetAuthorName(v string) *TestimonialItemUpdate {
	_u.mutation.SetAuthorName(v)
	return _u
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (_u *TestimonialItemUpdate) SetNillableAuthorName(v *string) *TestimonialItemUpdate {
	if v != nil {
		_u.SetAuthorName(*v)
	}
	return _u
}

// SetAuthorRole sets the "author_role" field.
func (_u *TestimonialItemUpdate) SetAuthorRole(v map[string]string) *TestimonialItemUpdate {
	_u.mutation.SetAuthorRole(v)
	return _u
}

// SetAuthorImageURL sets the "author_image_url" field.
func (_u *TestimonialItemUpdate) SetAuthorImageURL(v string) *TestimonialItemUpdate {
	_u.mutation.SetAuthorImageURL(v)
	return _u
}

// SetNillableAuthorImageURL sets the "author_image_url" field if the given value is not nil.
func (_u *TestimonialItemUpdate) SetNillableAuthorImageURL(v *string) *TestimonialItemUpdate {
	if v != nil {
		_u.SetAuthorImageURL(*v)
	}
	return _u
}

// ClearAuthorImageURL clears the value of the "author_image_url" field.
func (_u *TestimonialItemUpdate) ClearAuthorImageURL() *TestimonialItemUpdate {
	_u.mutation.ClearAuthorImageURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTestimonials entity by ID.
func (_u *TestimonialItemUpdate) SetBlockID(id int) *TestimonialItemUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTestimonials entity.
func (_u *TestimonialItemUpdate) SetBlock(v *BlockTestimonials) *TestimonialItemUpdate {
	return _u.SetBlockID(v.ID)
}

// SetSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID.
func (_u *TestimonialItemUpdate) SetSuccessStoryID(id int) *TestimonialItemUpdate {
	_u.mutation.SetSuccessStoryID(id)
	return _u
}

// SetNillableSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID if the given value is not nil.
func (_u *TestimonialItemUpdate) SetNillableSuccessStoryID(id *int) *TestimonialItemUpdate {
	if id != nil {
		_u = _u.SetSuccessStoryID(*id)
	}
	return _u
}

// SetSuccessStory sets the "success_story" edge to the SuccessStory entity.
func (_u *TestimonialItemUpdate) SetSuccessStory(v *SuccessStory) *TestimonialItemUpdate {
	return _u.SetSuccessStoryID(v.ID)
}

// Mutation returns the TestimonialItemMutation object of the builder.
func (_u *TestimonialItemUpdate) Mutation() *TestimonialItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTestimonials entity.
func (_u *TestimonialItemUpdate) ClearBlock() *TestimonialItemUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// ClearSuccessStory clears the "success_story" edge to the SuccessStory entity.
func (_u *TestimonialItemUpdate) ClearSuccessStory() *TestimonialItemUpdate {
	_u.mutation.ClearSuccessStory()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TestimonialItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TestimonialItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TestimonialItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TestimonialItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TestimonialItemUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestimonialItem.block"`)
	}
	return nil
}

func (_u *TestimonialItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testimonialitem.Table, testimonialitem.Columns, sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(testimonialitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(testimonialitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Quote(); ok {
		_spec.SetField(testimonialitem.FieldQuote, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AuthorName(); ok {
		_spec.SetField(testimonialitem.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthorRole(); ok {
		_spec.SetField(testimonialitem.FieldAuthorRole, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AuthorImageURL(); ok {
		_spec.SetField(testimonialitem.FieldAuthorImageURL, field.TypeString, value)
	}
	if _u.mutation.AuthorImageURLCleared() {
		_spec.ClearField(testimonialitem.FieldAuthorImageURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testimonialitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TestimonialItemUpdateOne is the builder for updating a single TestimonialItem entity.
type TestimonialItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestimonialItemMutation
}

// SetOrder sets the "order" field.
func (_u *TestimonialItemUpdateOne) SetOrder(v int) *TestimonialItemUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TestimonialItemUpdateOne) SetNillableOrder(v *int) *TestimonialItemUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TestimonialItemUpdateOne) AddOrder(v int) *TestimonialItemUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetQuote sets the "quote" field.
func (_u *TestimonialItemUpdateOne) SetQuote(v map[string]string) *TestimonialItemUpdateOne {
	_u.mutation.SetQuote(v)
	return _u
}

// SetAuthorName sets the "author_name" field.
func (_u *TestimonialItemUpdateOne) SetAuthorName(v string) *TestimonialItemUpdateOne {
	_u.mutation.SetAuthorName(v)
	return _u
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (_u *TestimonialItemUpdateOne) SetNillableAuthorName(v *string) *TestimonialItemUpdateOne {
	if v != nil {
		_u.SetAuthorName(*v)
	}
	return _u
}

// SetAuthorRole sets the "author_role" field.
func (_u *TestimonialItemUpdateOne) SetAuthorRole(v map[string]string) *TestimonialItemUpdateOne {
	_u.mutation.SetAuthorRole(v)
	return _u
}

// SetAuthorImageURL sets the "author_image_url" field.
func (_u *TestimonialItemUpdateOne) SetAuthorImageURL(v string) *TestimonialItemUpdateOne {
	_u.mutation.SetAuthorImageURL(v)
	return _u
}

// SetNillableAuthorImageURL sets the "author_image_url" field if the given value is not nil.
func (_u *TestimonialItemUpdateOne) SetNillableAuthorImageURL(v *string) *TestimonialItemUpdateOne {
	if v != nil {
		_u.SetAuthorImageURL(*v)
	}
	return _u
}

// ClearAuthorImageURL clears the value of the "author_image_url" field.
func (_u *TestimonialItemUpdateOne) ClearAuthorImageURL() *TestimonialItemUpdateOne {
	_u.mutation.ClearAuthorImageURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTestimonials entity by ID.
func (_u *TestimonialItemUpdateOne) SetBlockID(id int) *TestimonialItemUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTestimonials entity.
func (_u *TestimonialItemUpdateOne) SetBlock(v *BlockTestimonials) *TestimonialItemUpdateOne {
	return _u.SetBlockID(v.ID)
}

// SetSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID.
func (_u *TestimonialItemUpdateOne) SetSuccessStoryID(id int) *TestimonialItemUpdateOne {
	_u.mutation.SetSuccessStoryID(id)
	return _u
}

// SetNillableSuccessStoryID sets the "success_story" edge to the SuccessStory entity by ID if the given value is not nil.
func (_u *TestimonialItemUpdateOne) SetNillableSuccessStoryID(id *int) *TestimonialItemUpdateOne {
	if id != nil {
		_u = _u.SetSuccessStoryID(*id)
	}
	return _u
}

// SetSuccessStory sets the "success_story" edge to the SuccessStory entity.
func (_u *TestimonialItemUpdateOne) SetSuccessStory(v *SuccessStory) *TestimonialItemUpdateOne {
	return _u.SetSuccessStoryID(v.ID)
}

// Mutation returns the TestimonialItemMutation object of the builder.
func (_u *TestimonialItemUpdateOne) Mutation() *TestimonialItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTestimonials entity.
func (_u *TestimonialItemUpdateOne) ClearBlock() *TestimonialItemUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// ClearSuccessStory clears the "success_story" edge to the SuccessStory entity.
func (_u *TestimonialItemUpdateOne) ClearSuccessStory() *TestimonialItemUpdateOne {
	_u.mutation.ClearSuccessStory()
	return _u
}

// Where appends a list predicates to the TestimonialItemUpdate builder.
func (_u *TestimonialItemUpdateOne) Where(ps ...predicate.TestimonialItem) *TestimonialItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TestimonialItemUpdateOne) Select(field string, fields ...string) *TestimonialItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TestimonialItem entity.
func (_u *TestimonialItemUpdateOne) Save(ctx context.Context) (*TestimonialItem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TestimonialItemUpdateOne) SaveX(ctx context.Context) *TestimonialItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TestimonialItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TestimonialItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TestimonialItemUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TestimonialItem.block"`)
	}
	return nil
}

func (_u *TestimonialItemUpdateOne) sqlSave(ctx context.Context) (_node *TestimonialItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testimonialitem.Table, testimonialitem.Columns, sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestimonialItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testimonialitem.FieldID)
		for _, f := range fields {
			if !testimonialitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testimonialitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(testimonialitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(testimonialitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Quote(); ok {
		_spec.SetField(testimonialitem.FieldQuote, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AuthorName(); ok {
		_spec.SetField(testimonialitem.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AuthorRole(); ok {
		_spec.SetField(testimonialitem.FieldAuthorRole, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AuthorImageURL(); ok {
		_spec.SetField(testimonialitem.FieldAuthorImageURL, field.TypeString, value)
	}
	if _u.mutation.AuthorImageURLCleared() {
		_spec.ClearField(testimonialitem.FieldAuthorImageURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestimonialItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testimonialitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
