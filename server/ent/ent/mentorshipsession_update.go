// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MentorshipSessionUpdate is the builder for updating MentorshipSession entities.
type MentorshipSessionUpdate struct {
	config
	hooks    []Hook
	mutation *MentorshipSessionMutation
}

// Where appends a list predicates to the MentorshipSessionUpdate builder.
func (_u *MentorshipSessionUpdate) Where(ps ...predicate.MentorshipSession) *MentorshipSessionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetScheduledAt sets the "scheduled_at" field.
func (_u *MentorshipSessionUpdate) SetScheduledAt(v time.Time) *MentorshipSessionUpdate {
	_u.mutation.SetScheduledAt(v)
	return _u
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableScheduledAt(v *time.Time) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetScheduledAt(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MentorshipSessionUpdate) SetDuration(v int) *MentorshipSessionUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableDuration(v *int) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *MentorshipSessionUpdate) AddDuration(v int) *MentorshipSessionUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// SetFormat sets the "format" field.
func (_u *MentorshipSessionUpdate) SetFormat(v string) *MentorshipSessionUpdate {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableFormat(v *string) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *MentorshipSessionUpdate) SetStatus(v string) *MentorshipSessionUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableStatus(v *string) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNotes sets the "notes" field.
func (_u *MentorshipSessionUpdate) SetNotes(v string) *MentorshipSessionUpdate {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableNotes(v *string) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *MentorshipSessionUpdate) ClearNotes() *MentorshipSessionUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// SetActionItems sets the "action_items" field.
func (_u *MentorshipSessionUpdate) SetActionItems(v []string) *MentorshipSessionUpdate {
	_u.mutation.SetActionItems(v)
	return _u
}

// AppendActionItems appends value to the "action_items" field.
func (_u *MentorshipSessionUpdate) AppendActionItems(v []string) *MentorshipSessionUpdate {
	_u.mutation.AppendActionItems(v)
	return _u
}

// ClearActionItems clears the value of the "action_items" field.
func (_u *MentorshipSessionUpdate) ClearActionItems() *MentorshipSessionUpdate {
	_u.mutation.ClearActionItems()
	return _u
}

// SetMentorRating sets the "mentor_rating" field.
func (_u *MentorshipSessionUpdate) SetMentorRating(v int) *MentorshipSessionUpdate {
	_u.mutation.ResetMentorRating()
	_u.mutation.SetMentorRating(v)
	return _u
}

// SetNillableMentorRating sets the "mentor_rating" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableMentorRating(v *int) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetMentorRating(*v)
	}
	return _u
}

// AddMentorRating adds value to the "mentor_rating" field.
func (_u *MentorshipSessionUpdate) AddMentorRating(v int) *MentorshipSessionUpdate {
	_u.mutation.AddMentorRating(v)
	return _u
}

// ClearMentorRating clears the value of the "mentor_rating" field.
func (_u *MentorshipSessionUpdate) ClearMentorRating() *MentorshipSessionUpdate {
	_u.mutation.ClearMentorRating()
	return _u
}

// SetMenteeRating sets the "mentee_rating" field.
func (_u *MentorshipSessionUpdate) SetMenteeRating(v int) *MentorshipSessionUpdate {
	_u.mutation.ResetMenteeRating()
	_u.mutation.SetMenteeRating(v)
	return _u
}

// SetNillableMenteeRating sets the "mentee_rating" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableMenteeRating(v *int) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetMenteeRating(*v)
	}
	return _u
}

// AddMenteeRating adds value to the "mentee_rating" field.
func (_u *MentorshipSessionUpdate) AddMenteeRating(v int) *MentorshipSessionUpdate {
	_u.mutation.AddMenteeRating(v)
	return _u
}

// ClearMenteeRating clears the value of the "mentee_rating" field.
func (_u *MentorshipSessionUpdate) ClearMenteeRating() *MentorshipSessionUpdate {
	_u.mutation.ClearMenteeRating()
	return _u
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (_u *MentorshipSessionUpdate) SetMentorFeedback(v string) *MentorshipSessionUpdate {
	_u.mutation.SetMentorFeedback(v)
	return _u
}

// SetNillableMentorFeedback sets the "mentor_feedback" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableMentorFeedback(v *string) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetMentorFeedback(*v)
	}
	return _u
}

// ClearMentorFeedback clears the value of the "mentor_feedback" field.
func (_u *MentorshipSessionUpdate) ClearMentorFeedback() *MentorshipSessionUpdate {
	_u.mutation.ClearMentorFeedback()
	return _u
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (_u *MentorshipSessionUpdate) SetMenteeFeedback(v string) *MentorshipSessionUpdate {
	_u.mutation.SetMenteeFeedback(v)
	return _u
}

// SetNillableMenteeFeedback sets the "mentee_feedback" field if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableMenteeFeedback(v *string) *MentorshipSessionUpdate {
	if v != nil {
		_u.SetMenteeFeedback(*v)
	}
	return _u
}

// ClearMenteeFeedback clears the value of the "mentee_feedback" field.
func (_u *MentorshipSessionUpdate) ClearMenteeFeedback() *MentorshipSessionUpdate {
	_u.mutation.ClearMenteeFeedback()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MentorshipSessionUpdate) SetUpdatedAt(v time.Time) *MentorshipSessionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMentorshipRequestID sets the "mentorship_request" edge to the MentorshipRequest entity by ID.
func (_u *MentorshipSessionUpdate) SetMentorshipRequestID(id int) *MentorshipSessionUpdate {
	_u.mutation.SetMentorshipRequestID(id)
	return _u
}

// SetMentorshipRequest sets the "mentorship_request" edge to the MentorshipRequest entity.
func (_u *MentorshipSessionUpdate) SetMentorshipRequest(v *MentorshipRequest) *MentorshipSessionUpdate {
	return _u.SetMentorshipRequestID(v.ID)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *MentorshipSessionUpdate) SetAgendaID(id int) *MentorshipSessionUpdate {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_u *MentorshipSessionUpdate) SetNillableAgendaID(id *int) *MentorshipSessionUpdate {
	if id != nil {
		_u = _u.SetAgendaID(*id)
	}
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *MentorshipSessionUpdate) SetAgenda(v *Agenda) *MentorshipSessionUpdate {
	return _u.SetAgendaID(v.ID)
}

// Mutation returns the MentorshipSessionMutation object of the builder.
func (_u *MentorshipSessionUpdate) Mutation() *MentorshipSessionMutation {
	return _u.mutation
}

// ClearMentorshipRequest clears the "mentorship_request" edge to the MentorshipRequest entity.
func (_u *MentorshipSessionUpdate) ClearMentorshipRequest() *MentorshipSessionUpdate {
	_u.mutation.ClearMentorshipRequest()
	return _u
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *MentorshipSessionUpdate) ClearAgenda() *MentorshipSessionUpdate {
	_u.mutation.ClearAgenda()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MentorshipSessionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MentorshipSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MentorshipSessionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MentorshipSessionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MentorshipSessionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := mentorshipsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MentorshipSessionUpdate) check() error {
	if v, ok := _u.mutation.MentorRating(); ok {
		if err := mentorshipsession.MentorRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentor_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentor_rating": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MenteeRating(); ok {
		if err := mentorshipsession.MenteeRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentee_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentee_rating": %w`, err)}
		}
	}
	if _u.mutation.MentorshipRequestCleared() && len(_u.mutation.MentorshipRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MentorshipSession.mentorship_request"`)
	}
	return nil
}

func (_u *MentorshipSessionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentorshipsession.Table, mentorshipsession.Columns, sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ScheduledAt(); ok {
		_spec.SetField(mentorshipsession.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(mentorshipsession.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(mentorshipsession.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(mentorshipsession.FieldFormat, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(mentorshipsession.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(mentorshipsession.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(mentorshipsession.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.ActionItems(); ok {
		_spec.SetField(mentorshipsession.FieldActionItems, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedActionItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mentorshipsession.FieldActionItems, value)
		})
	}
	if _u.mutation.ActionItemsCleared() {
		_spec.ClearField(mentorshipsession.FieldActionItems, field.TypeJSON)
	}
	if value, ok := _u.mutation.MentorRating(); ok {
		_spec.SetField(mentorshipsession.FieldMentorRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMentorRating(); ok {
		_spec.AddField(mentorshipsession.FieldMentorRating, field.TypeInt, value)
	}
	if _u.mutation.MentorRatingCleared() {
		_spec.ClearField(mentorshipsession.FieldMentorRating, field.TypeInt)
	}
	if value, ok := _u.mutation.MenteeRating(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMenteeRating(); ok {
		_spec.AddField(mentorshipsession.FieldMenteeRating, field.TypeInt, value)
	}
	if _u.mutation.MenteeRatingCleared() {
		_spec.ClearField(mentorshipsession.FieldMenteeRating, field.TypeInt)
	}
	if value, ok := _u.mutation.MentorFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMentorFeedback, field.TypeString, value)
	}
	if _u.mutation.MentorFeedbackCleared() {
		_spec.ClearField(mentorshipsession.FieldMentorFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.MenteeFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeFeedback, field.TypeString, value)
	}
	if _u.mutation.MenteeFeedbackCleared() {
		_spec.ClearField(mentorshipsession.FieldMenteeFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshipsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MentorshipRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshipsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MentorshipSessionUpdateOne is the builder for updating a single MentorshipSession entity.
type MentorshipSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MentorshipSessionMutation
}

// SetScheduledAt sets the "scheduled_at" field.
func (_u *MentorshipSessionUpdateOne) SetScheduledAt(v time.Time) *MentorshipSessionUpdateOne {
	_u.mutation.SetScheduledAt(v)
	return _u
}

// SetNillableScheduledAt sets the "scheduled_at" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableScheduledAt(v *time.Time) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetScheduledAt(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MentorshipSessionUpdateOne) SetDuration(v int) *MentorshipSessionUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableDuration(v *int) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *MentorshipSessionUpdateOne) AddDuration(v int) *MentorshipSessionUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// SetFormat sets the "format" field.
func (_u *MentorshipSessionUpdateOne) SetFormat(v string) *MentorshipSessionUpdateOne {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableFormat(v *string) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *MentorshipSessionUpdateOne) SetStatus(v string) *MentorshipSessionUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableStatus(v *string) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNotes sets the "notes" field.
func (_u *MentorshipSessionUpdateOne) SetNotes(v string) *MentorshipSessionUpdateOne {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableNotes(v *string) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *MentorshipSessionUpdateOne) ClearNotes() *MentorshipSessionUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// SetActionItems sets the "action_items" field.
func (_u *MentorshipSessionUpdateOne) SetActionItems(v []string) *MentorshipSessionUpdateOne {
	_u.mutation.SetActionItems(v)
	return _u
}

// AppendActionItems appends value to the "action_items" field.
func (_u *MentorshipSessionUpdateOne) AppendActionItems(v []string) *MentorshipSessionUpdateOne {
	_u.mutation.AppendActionItems(v)
	return _u
}

// ClearActionItems clears the value of the "action_items" field.
func (_u *MentorshipSessionUpdateOne) ClearActionItems() *MentorshipSessionUpdateOne {
	_u.mutation.ClearActionItems()
	return _u
}

// SetMentorRating sets the "mentor_rating" field.
func (_u *MentorshipSessionUpdateOne) SetMentorRating(v int) *MentorshipSessionUpdateOne {
	_u.mutation.ResetMentorRating()
	_u.mutation.SetMentorRating(v)
	return _u
}

// SetNillableMentorRating sets the "mentor_rating" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableMentorRating(v *int) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetMentorRating(*v)
	}
	return _u
}

// AddMentorRating adds value to the "mentor_rating" field.
func (_u *MentorshipSessionUpdateOne) AddMentorRating(v int) *MentorshipSessionUpdateOne {
	_u.mutation.AddMentorRating(v)
	return _u
}

// ClearMentorRating clears the value of the "mentor_rating" field.
func (_u *MentorshipSessionUpdateOne) ClearMentorRating() *MentorshipSessionUpdateOne {
	_u.mutation.ClearMentorRating()
	return _u
}

// SetMenteeRating sets the "mentee_rating" field.
func (_u *MentorshipSessionUpdateOne) SetMenteeRating(v int) *MentorshipSessionUpdateOne {
	_u.mutation.ResetMenteeRating()
	_u.mutation.SetMenteeRating(v)
	return _u
}

// SetNillableMenteeRating sets the "mentee_rating" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableMenteeRating(v *int) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetMenteeRating(*v)
	}
	return _u
}

// AddMenteeRating adds value to the "mentee_rating" field.
func (_u *MentorshipSessionUpdateOne) AddMenteeRating(v int) *MentorshipSessionUpdateOne {
	_u.mutation.AddMenteeRating(v)
	return _u
}

// ClearMenteeRating clears the value of the "mentee_rating" field.
func (_u *MentorshipSessionUpdateOne) ClearMenteeRating() *MentorshipSessionUpdateOne {
	_u.mutation.ClearMenteeRating()
	return _u
}

// SetMentorFeedback sets the "mentor_feedback" field.
func (_u *MentorshipSessionUpdateOne) SetMentorFeedback(v string) *MentorshipSessionUpdateOne {
	_u.mutation.SetMentorFeedback(v)
	return _u
}

// SetNillableMentorFeedback sets the "mentor_feedback" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableMentorFeedback(v *string) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetMentorFeedback(*v)
	}
	return _u
}

// ClearMentorFeedback clears the value of the "mentor_feedback" field.
func (_u *MentorshipSessionUpdateOne) ClearMentorFeedback() *MentorshipSessionUpdateOne {
	_u.mutation.ClearMentorFeedback()
	return _u
}

// SetMenteeFeedback sets the "mentee_feedback" field.
func (_u *MentorshipSessionUpdateOne) SetMenteeFeedback(v string) *MentorshipSessionUpdateOne {
	_u.mutation.SetMenteeFeedback(v)
	return _u
}

// SetNillableMenteeFeedback sets the "mentee_feedback" field if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableMenteeFeedback(v *string) *MentorshipSessionUpdateOne {
	if v != nil {
		_u.SetMenteeFeedback(*v)
	}
	return _u
}

// ClearMenteeFeedback clears the value of the "mentee_feedback" field.
func (_u *MentorshipSessionUpdateOne) ClearMenteeFeedback() *MentorshipSessionUpdateOne {
	_u.mutation.ClearMenteeFeedback()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MentorshipSessionUpdateOne) SetUpdatedAt(v time.Time) *MentorshipSessionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMentorshipRequestID sets the "mentorship_request" edge to the MentorshipRequest entity by ID.
func (_u *MentorshipSessionUpdateOne) SetMentorshipRequestID(id int) *MentorshipSessionUpdateOne {
	_u.mutation.SetMentorshipRequestID(id)
	return _u
}

// SetMentorshipRequest sets the "mentorship_request" edge to the MentorshipRequest entity.
func (_u *MentorshipSessionUpdateOne) SetMentorshipRequest(v *MentorshipRequest) *MentorshipSessionUpdateOne {
	return _u.SetMentorshipRequestID(v.ID)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *MentorshipSessionUpdateOne) SetAgendaID(id int) *MentorshipSessionUpdateOne {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_u *MentorshipSessionUpdateOne) SetNillableAgendaID(id *int) *MentorshipSessionUpdateOne {
	if id != nil {
		_u = _u.SetAgendaID(*id)
	}
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *MentorshipSessionUpdateOne) SetAgenda(v *Agenda) *MentorshipSessionUpdateOne {
	return _u.SetAgendaID(v.ID)
}

// Mutation returns the MentorshipSessionMutation object of the builder.
func (_u *MentorshipSessionUpdateOne) Mutation() *MentorshipSessionMutation {
	return _u.mutation
}

// ClearMentorshipRequest clears the "mentorship_request" edge to the MentorshipRequest entity.
func (_u *MentorshipSessionUpdateOne) ClearMentorshipRequest() *MentorshipSessionUpdateOne {
	_u.mutation.ClearMentorshipRequest()
	return _u
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *MentorshipSessionUpdateOne) ClearAgenda() *MentorshipSessionUpdateOne {
	_u.mutation.ClearAgenda()
	return _u
}

// Where appends a list predicates to the MentorshipSessionUpdate builder.
func (_u *MentorshipSessionUpdateOne) Where(ps ...predicate.MentorshipSession) *MentorshipSessionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MentorshipSessionUpdateOne) Select(field string, fields ...string) *MentorshipSessionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MentorshipSession entity.
func (_u *MentorshipSessionUpdateOne) Save(ctx context.Context) (*MentorshipSession, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MentorshipSessionUpdateOne) SaveX(ctx context.Context) *MentorshipSession {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MentorshipSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MentorshipSessionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MentorshipSessionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := mentorshipsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MentorshipSessionUpdateOne) check() error {
	if v, ok := _u.mutation.MentorRating(); ok {
		if err := mentorshipsession.MentorRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentor_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentor_rating": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MenteeRating(); ok {
		if err := mentorshipsession.MenteeRatingValidator(v); err != nil {
			return &ValidationError{Name: "mentee_rating", err: fmt.Errorf(`ent: validator failed for field "MentorshipSession.mentee_rating": %w`, err)}
		}
	}
	if _u.mutation.MentorshipRequestCleared() && len(_u.mutation.MentorshipRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MentorshipSession.mentorship_request"`)
	}
	return nil
}

func (_u *MentorshipSessionUpdateOne) sqlSave(ctx context.Context) (_node *MentorshipSession, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentorshipsession.Table, mentorshipsession.Columns, sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MentorshipSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mentorshipsession.FieldID)
		for _, f := range fields {
			if !mentorshipsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mentorshipsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ScheduledAt(); ok {
		_spec.SetField(mentorshipsession.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(mentorshipsession.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(mentorshipsession.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(mentorshipsession.FieldFormat, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(mentorshipsession.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(mentorshipsession.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(mentorshipsession.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.ActionItems(); ok {
		_spec.SetField(mentorshipsession.FieldActionItems, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedActionItems(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mentorshipsession.FieldActionItems, value)
		})
	}
	if _u.mutation.ActionItemsCleared() {
		_spec.ClearField(mentorshipsession.FieldActionItems, field.TypeJSON)
	}
	if value, ok := _u.mutation.MentorRating(); ok {
		_spec.SetField(mentorshipsession.FieldMentorRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMentorRating(); ok {
		_spec.AddField(mentorshipsession.FieldMentorRating, field.TypeInt, value)
	}
	if _u.mutation.MentorRatingCleared() {
		_spec.ClearField(mentorshipsession.FieldMentorRating, field.TypeInt)
	}
	if value, ok := _u.mutation.MenteeRating(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMenteeRating(); ok {
		_spec.AddField(mentorshipsession.FieldMenteeRating, field.TypeInt, value)
	}
	if _u.mutation.MenteeRatingCleared() {
		_spec.ClearField(mentorshipsession.FieldMenteeRating, field.TypeInt)
	}
	if value, ok := _u.mutation.MentorFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMentorFeedback, field.TypeString, value)
	}
	if _u.mutation.MentorFeedbackCleared() {
		_spec.ClearField(mentorshipsession.FieldMentorFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.MenteeFeedback(); ok {
		_spec.SetField(mentorshipsession.FieldMenteeFeedback, field.TypeString, value)
	}
	if _u.mutation.MenteeFeedbackCleared() {
		_spec.ClearField(mentorshipsession.FieldMenteeFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshipsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MentorshipRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MentorshipSession{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshipsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
