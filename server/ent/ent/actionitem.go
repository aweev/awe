// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/actionitem"
	"awe/ent/ent/agendaitem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ActionItem is the model entity for the ActionItem schema.
type ActionItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionItemQuery when eager-loading is set.
	Edges                    ActionItemEdges `json:"edges"`
	agenda_item_action_items *int
	selectValues             sql.SelectValues
}

// ActionItemEdges holds the relations/edges for other nodes in the graph.
type ActionItemEdges struct {
	// AgendaItem holds the value of the agenda_item edge.
	AgendaItem *AgendaItem `json:"agenda_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgendaItemOrErr returns the AgendaItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActionItemEdges) AgendaItemOrErr() (*AgendaItem, error) {
	if e.AgendaItem != nil {
		return e.AgendaItem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agendaitem.Label}
	}
	return nil, &NotLoadedError{edge: "agenda_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case actionitem.FieldID:
			values[i] = new(sql.NullInt64)
		case actionitem.FieldDescription, actionitem.FieldOwnerID, actionitem.FieldStatus:
			values[i] = new(sql.NullString)
		case actionitem.FieldDueDate, actionitem.FieldCreatedAt, actionitem.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case actionitem.ForeignKeys[0]: // agenda_item_action_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionItem fields.
func (_m *ActionItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actionitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case actionitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case actionitem.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case actionitem.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				_m.DueDate = value.Time
			}
		case actionitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case actionitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case actionitem.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				_m.CompletedAt = value.Time
			}
		case actionitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agenda_item_action_items", value)
			} else if value.Valid {
				_m.agenda_item_action_items = new(int)
				*_m.agenda_item_action_items = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActionItem.
// This includes values selected through modifiers, order, etc.
func (_m *ActionItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAgendaItem queries the "agenda_item" edge of the ActionItem entity.
func (_m *ActionItem) QueryAgendaItem() *AgendaItemQuery {
	return NewActionItemClient(_m.config).QueryAgendaItem(_m)
}

// Update returns a builder for updating this ActionItem.
// Note that you need to call ActionItem.Unwrap() before calling this method if this ActionItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ActionItem) Update() *ActionItemUpdateOne {
	return NewActionItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ActionItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ActionItem) Unwrap() *ActionItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActionItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ActionItem) String() string {
	var builder strings.Builder
	builder.WriteString("ActionItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(_m.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(_m.CompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActionItems is a parsable slice of ActionItem.
type ActionItems []*ActionItem
