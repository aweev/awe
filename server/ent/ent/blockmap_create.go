// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockmap"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockMapCreate is the builder for creating a BlockMap entity.
type BlockMapCreate struct {
	config
	mutation *BlockMapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockMapCreate) SetInternalName(v string) *BlockMapCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetLatitude sets the "latitude" field.
func (_c *BlockMapCreate) SetLatitude(v float64) *BlockMapCreate {
	_c.mutation.SetLatitude(v)
	return _c
}

// SetLongitude sets the "longitude" field.
func (_c *BlockMapCreate) SetLongitude(v float64) *BlockMapCreate {
	_c.mutation.SetLongitude(v)
	return _c
}

// SetZoom sets the "zoom" field.
func (_c *BlockMapCreate) SetZoom(v int) *BlockMapCreate {
	_c.mutation.SetZoom(v)
	return _c
}

// SetNillableZoom sets the "zoom" field if the given value is not nil.
func (_c *BlockMapCreate) SetNillableZoom(v *int) *BlockMapCreate {
	if v != nil {
		_c.SetZoom(*v)
	}
	return _c
}

// SetMarkers sets the "markers" field.
func (_c *BlockMapCreate) SetMarkers(v []map[string]interface{}) *BlockMapCreate {
	_c.mutation.SetMarkers(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockMapCreate) SetCreatedAt(v time.Time) *BlockMapCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockMapCreate) SetNillableCreatedAt(v *time.Time) *BlockMapCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockMapCreate) SetUpdatedAt(v time.Time) *BlockMapCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockMapCreate) SetNillableUpdatedAt(v *time.Time) *BlockMapCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockMapCreate) SetContentBlockID(id int) *BlockMapCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockMapCreate) SetContentBlock(v *ContentBlock) *BlockMapCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockMapMutation object of the builder.
func (_c *BlockMapCreate) Mutation() *BlockMapMutation {
	return _c.mutation
}

// Save creates the BlockMap in the database.
func (_c *BlockMapCreate) Save(ctx context.Context) (*BlockMap, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockMapCreate) SaveX(ctx context.Context) *BlockMap {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockMapCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockMapCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockMapCreate) defaults() {
	if _, ok := _c.mutation.Zoom(); !ok {
		v := blockmap.DefaultZoom
		_c.mutation.SetZoom(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockmap.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockmap.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockMapCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockMap.internal_name"`)}
	}
	if _, ok := _c.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "BlockMap.latitude"`)}
	}
	if _, ok := _c.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "BlockMap.longitude"`)}
	}
	if _, ok := _c.mutation.Zoom(); !ok {
		return &ValidationError{Name: "zoom", err: errors.New(`ent: missing required field "BlockMap.zoom"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockMap.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockMap.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockMap.content_block"`)}
	}
	return nil
}

func (_c *BlockMapCreate) sqlSave(ctx context.Context) (*BlockMap, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockMapCreate) createSpec() (*BlockMap, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockMap{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockmap.Table, sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockmap.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Latitude(); ok {
		_spec.SetField(blockmap.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := _c.mutation.Longitude(); ok {
		_spec.SetField(blockmap.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := _c.mutation.Zoom(); ok {
		_spec.SetField(blockmap.FieldZoom, field.TypeInt, value)
		_node.Zoom = value
	}
	if value, ok := _c.mutation.Markers(); ok {
		_spec.SetField(blockmap.FieldMarkers, field.TypeJSON, value)
		_node.Markers = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockmap.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockmap.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_map = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockMap.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockMapUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockMapCreate) OnConflict(opts ...sql.ConflictOption) *BlockMapUpsertOne {
	_c.conflict = opts
	return &BlockMapUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockMapCreate) OnConflictColumns(columns ...string) *BlockMapUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockMapUpsertOne{
		create: _c,
	}
}

type (
	// BlockMapUpsertOne is the builder for "upsert"-ing
	//  one BlockMap node.
	BlockMapUpsertOne struct {
		create *BlockMapCreate
	}

	// BlockMapUpsert is the "OnConflict" setter.
	BlockMapUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockMapUpsert) SetInternalName(v string) *BlockMapUpsert {
	u.Set(blockmap.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateInternalName() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldInternalName)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *BlockMapUpsert) SetLatitude(v float64) *BlockMapUpsert {
	u.Set(blockmap.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateLatitude() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *BlockMapUpsert) AddLatitude(v float64) *BlockMapUpsert {
	u.Add(blockmap.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *BlockMapUpsert) SetLongitude(v float64) *BlockMapUpsert {
	u.Set(blockmap.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateLongitude() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *BlockMapUpsert) AddLongitude(v float64) *BlockMapUpsert {
	u.Add(blockmap.FieldLongitude, v)
	return u
}

// SetZoom sets the "zoom" field.
func (u *BlockMapUpsert) SetZoom(v int) *BlockMapUpsert {
	u.Set(blockmap.FieldZoom, v)
	return u
}

// UpdateZoom sets the "zoom" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateZoom() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldZoom)
	return u
}

// AddZoom adds v to the "zoom" field.
func (u *BlockMapUpsert) AddZoom(v int) *BlockMapUpsert {
	u.Add(blockmap.FieldZoom, v)
	return u
}

// SetMarkers sets the "markers" field.
func (u *BlockMapUpsert) SetMarkers(v []map[string]interface{}) *BlockMapUpsert {
	u.Set(blockmap.FieldMarkers, v)
	return u
}

// UpdateMarkers sets the "markers" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateMarkers() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldMarkers)
	return u
}

// ClearMarkers clears the value of the "markers" field.
func (u *BlockMapUpsert) ClearMarkers() *BlockMapUpsert {
	u.SetNull(blockmap.FieldMarkers)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockMapUpsert) SetUpdatedAt(v time.Time) *BlockMapUpsert {
	u.Set(blockmap.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockMapUpsert) UpdateUpdatedAt() *BlockMapUpsert {
	u.SetExcluded(blockmap.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockMapUpsertOne) UpdateNewValues() *BlockMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockmap.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockMapUpsertOne) Ignore() *BlockMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockMapUpsertOne) DoNothing() *BlockMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockMapCreate.OnConflict
// documentation for more info.
func (u *BlockMapUpsertOne) Update(set func(*BlockMapUpsert)) *BlockMapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockMapUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockMapUpsertOne) SetInternalName(v string) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateInternalName() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateInternalName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *BlockMapUpsertOne) SetLatitude(v float64) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *BlockMapUpsertOne) AddLatitude(v float64) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateLatitude() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *BlockMapUpsertOne) SetLongitude(v float64) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *BlockMapUpsertOne) AddLongitude(v float64) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateLongitude() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateLongitude()
	})
}

// SetZoom sets the "zoom" field.
func (u *BlockMapUpsertOne) SetZoom(v int) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetZoom(v)
	})
}

// AddZoom adds v to the "zoom" field.
func (u *BlockMapUpsertOne) AddZoom(v int) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddZoom(v)
	})
}

// UpdateZoom sets the "zoom" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateZoom() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateZoom()
	})
}

// SetMarkers sets the "markers" field.
func (u *BlockMapUpsertOne) SetMarkers(v []map[string]interface{}) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetMarkers(v)
	})
}

// UpdateMarkers sets the "markers" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateMarkers() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateMarkers()
	})
}

// ClearMarkers clears the value of the "markers" field.
func (u *BlockMapUpsertOne) ClearMarkers() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.ClearMarkers()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockMapUpsertOne) SetUpdatedAt(v time.Time) *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockMapUpsertOne) UpdateUpdatedAt() *BlockMapUpsertOne {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockMapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockMapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockMapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockMapUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockMapUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockMapCreateBulk is the builder for creating many BlockMap entities in bulk.
type BlockMapCreateBulk struct {
	config
	err      error
	builders []*BlockMapCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockMap entities in the database.
func (_c *BlockMapCreateBulk) Save(ctx context.Context) ([]*BlockMap, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockMap, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockMapCreateBulk) SaveX(ctx context.Context) []*BlockMap {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockMapCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockMapCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockMap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockMapUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockMapCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockMapUpsertBulk {
	_c.conflict = opts
	return &BlockMapUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockMapCreateBulk) OnConflictColumns(columns ...string) *BlockMapUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockMapUpsertBulk{
		create: _c,
	}
}

// BlockMapUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockMap nodes.
type BlockMapUpsertBulk struct {
	create *BlockMapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockMapUpsertBulk) UpdateNewValues() *BlockMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockmap.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockMap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockMapUpsertBulk) Ignore() *BlockMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockMapUpsertBulk) DoNothing() *BlockMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockMapCreateBulk.OnConflict
// documentation for more info.
func (u *BlockMapUpsertBulk) Update(set func(*BlockMapUpsert)) *BlockMapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockMapUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockMapUpsertBulk) SetInternalName(v string) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateInternalName() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateInternalName()
	})
}

// SetLatitude sets the "latitude" field.
func (u *BlockMapUpsertBulk) SetLatitude(v float64) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *BlockMapUpsertBulk) AddLatitude(v float64) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateLatitude() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *BlockMapUpsertBulk) SetLongitude(v float64) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *BlockMapUpsertBulk) AddLongitude(v float64) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateLongitude() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateLongitude()
	})
}

// SetZoom sets the "zoom" field.
func (u *BlockMapUpsertBulk) SetZoom(v int) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetZoom(v)
	})
}

// AddZoom adds v to the "zoom" field.
func (u *BlockMapUpsertBulk) AddZoom(v int) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.AddZoom(v)
	})
}

// UpdateZoom sets the "zoom" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateZoom() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateZoom()
	})
}

// SetMarkers sets the "markers" field.
func (u *BlockMapUpsertBulk) SetMarkers(v []map[string]interface{}) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetMarkers(v)
	})
}

// UpdateMarkers sets the "markers" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateMarkers() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateMarkers()
	})
}

// ClearMarkers clears the value of the "markers" field.
func (u *BlockMapUpsertBulk) ClearMarkers() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.ClearMarkers()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockMapUpsertBulk) SetUpdatedAt(v time.Time) *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockMapUpsertBulk) UpdateUpdatedAt() *BlockMapUpsertBulk {
	return u.Update(func(s *BlockMapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockMapUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockMapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockMapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockMapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
