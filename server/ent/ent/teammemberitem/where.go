// Code generated by ent, DO NOT EDIT.

package teammemberitem

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldOrder, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldName, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldImageURL, v))
}

// LinkedinURL applies equality check predicate on the "linkedin_url" field. It's identical to LinkedinURLEQ.
func LinkedinURL(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldLinkedinURL, v))
}

// TwitterURL applies equality check predicate on the "twitter_url" field. It's identical to TwitterURLEQ.
func TwitterURL(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldTwitterURL, v))
}

// EmailURL applies equality check predicate on the "email_url" field. It's identical to EmailURLEQ.
func EmailURL(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldEmailURL, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldOrder, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContainsFold(FieldName, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotNull(FieldBio))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContainsFold(FieldImageURL, v))
}

// LinkedinURLEQ applies the EQ predicate on the "linkedin_url" field.
func LinkedinURLEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldLinkedinURL, v))
}

// LinkedinURLNEQ applies the NEQ predicate on the "linkedin_url" field.
func LinkedinURLNEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldLinkedinURL, v))
}

// LinkedinURLIn applies the In predicate on the "linkedin_url" field.
func LinkedinURLIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldLinkedinURL, vs...))
}

// LinkedinURLNotIn applies the NotIn predicate on the "linkedin_url" field.
func LinkedinURLNotIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldLinkedinURL, vs...))
}

// LinkedinURLGT applies the GT predicate on the "linkedin_url" field.
func LinkedinURLGT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldLinkedinURL, v))
}

// LinkedinURLGTE applies the GTE predicate on the "linkedin_url" field.
func LinkedinURLGTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldLinkedinURL, v))
}

// LinkedinURLLT applies the LT predicate on the "linkedin_url" field.
func LinkedinURLLT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldLinkedinURL, v))
}

// LinkedinURLLTE applies the LTE predicate on the "linkedin_url" field.
func LinkedinURLLTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldLinkedinURL, v))
}

// LinkedinURLContains applies the Contains predicate on the "linkedin_url" field.
func LinkedinURLContains(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContains(FieldLinkedinURL, v))
}

// LinkedinURLHasPrefix applies the HasPrefix predicate on the "linkedin_url" field.
func LinkedinURLHasPrefix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasPrefix(FieldLinkedinURL, v))
}

// LinkedinURLHasSuffix applies the HasSuffix predicate on the "linkedin_url" field.
func LinkedinURLHasSuffix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasSuffix(FieldLinkedinURL, v))
}

// LinkedinURLIsNil applies the IsNil predicate on the "linkedin_url" field.
func LinkedinURLIsNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIsNull(FieldLinkedinURL))
}

// LinkedinURLNotNil applies the NotNil predicate on the "linkedin_url" field.
func LinkedinURLNotNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotNull(FieldLinkedinURL))
}

// LinkedinURLEqualFold applies the EqualFold predicate on the "linkedin_url" field.
func LinkedinURLEqualFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEqualFold(FieldLinkedinURL, v))
}

// LinkedinURLContainsFold applies the ContainsFold predicate on the "linkedin_url" field.
func LinkedinURLContainsFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContainsFold(FieldLinkedinURL, v))
}

// TwitterURLEQ applies the EQ predicate on the "twitter_url" field.
func TwitterURLEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldTwitterURL, v))
}

// TwitterURLNEQ applies the NEQ predicate on the "twitter_url" field.
func TwitterURLNEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldTwitterURL, v))
}

// TwitterURLIn applies the In predicate on the "twitter_url" field.
func TwitterURLIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldTwitterURL, vs...))
}

// TwitterURLNotIn applies the NotIn predicate on the "twitter_url" field.
func TwitterURLNotIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldTwitterURL, vs...))
}

// TwitterURLGT applies the GT predicate on the "twitter_url" field.
func TwitterURLGT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldTwitterURL, v))
}

// TwitterURLGTE applies the GTE predicate on the "twitter_url" field.
func TwitterURLGTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldTwitterURL, v))
}

// TwitterURLLT applies the LT predicate on the "twitter_url" field.
func TwitterURLLT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldTwitterURL, v))
}

// TwitterURLLTE applies the LTE predicate on the "twitter_url" field.
func TwitterURLLTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldTwitterURL, v))
}

// TwitterURLContains applies the Contains predicate on the "twitter_url" field.
func TwitterURLContains(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContains(FieldTwitterURL, v))
}

// TwitterURLHasPrefix applies the HasPrefix predicate on the "twitter_url" field.
func TwitterURLHasPrefix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasPrefix(FieldTwitterURL, v))
}

// TwitterURLHasSuffix applies the HasSuffix predicate on the "twitter_url" field.
func TwitterURLHasSuffix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasSuffix(FieldTwitterURL, v))
}

// TwitterURLIsNil applies the IsNil predicate on the "twitter_url" field.
func TwitterURLIsNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIsNull(FieldTwitterURL))
}

// TwitterURLNotNil applies the NotNil predicate on the "twitter_url" field.
func TwitterURLNotNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotNull(FieldTwitterURL))
}

// TwitterURLEqualFold applies the EqualFold predicate on the "twitter_url" field.
func TwitterURLEqualFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEqualFold(FieldTwitterURL, v))
}

// TwitterURLContainsFold applies the ContainsFold predicate on the "twitter_url" field.
func TwitterURLContainsFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContainsFold(FieldTwitterURL, v))
}

// EmailURLEQ applies the EQ predicate on the "email_url" field.
func EmailURLEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEQ(FieldEmailURL, v))
}

// EmailURLNEQ applies the NEQ predicate on the "email_url" field.
func EmailURLNEQ(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNEQ(FieldEmailURL, v))
}

// EmailURLIn applies the In predicate on the "email_url" field.
func EmailURLIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIn(FieldEmailURL, vs...))
}

// EmailURLNotIn applies the NotIn predicate on the "email_url" field.
func EmailURLNotIn(vs ...string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotIn(FieldEmailURL, vs...))
}

// EmailURLGT applies the GT predicate on the "email_url" field.
func EmailURLGT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGT(FieldEmailURL, v))
}

// EmailURLGTE applies the GTE predicate on the "email_url" field.
func EmailURLGTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldGTE(FieldEmailURL, v))
}

// EmailURLLT applies the LT predicate on the "email_url" field.
func EmailURLLT(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLT(FieldEmailURL, v))
}

// EmailURLLTE applies the LTE predicate on the "email_url" field.
func EmailURLLTE(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldLTE(FieldEmailURL, v))
}

// EmailURLContains applies the Contains predicate on the "email_url" field.
func EmailURLContains(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContains(FieldEmailURL, v))
}

// EmailURLHasPrefix applies the HasPrefix predicate on the "email_url" field.
func EmailURLHasPrefix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasPrefix(FieldEmailURL, v))
}

// EmailURLHasSuffix applies the HasSuffix predicate on the "email_url" field.
func EmailURLHasSuffix(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldHasSuffix(FieldEmailURL, v))
}

// EmailURLIsNil applies the IsNil predicate on the "email_url" field.
func EmailURLIsNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldIsNull(FieldEmailURL))
}

// EmailURLNotNil applies the NotNil predicate on the "email_url" field.
func EmailURLNotNil() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldNotNull(FieldEmailURL))
}

// EmailURLEqualFold applies the EqualFold predicate on the "email_url" field.
func EmailURLEqualFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldEqualFold(FieldEmailURL, v))
}

// EmailURLContainsFold applies the ContainsFold predicate on the "email_url" field.
func EmailURLContainsFold(v string) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.FieldContainsFold(FieldEmailURL, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.TeamMemberItem {
	return predicate.TeamMemberItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.BlockTeamGrid) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TeamMemberItem) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TeamMemberItem) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TeamMemberItem) predicate.TeamMemberItem {
	return predicate.TeamMemberItem(sql.NotPredicates(p))
}
