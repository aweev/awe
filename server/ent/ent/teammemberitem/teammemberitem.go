// Code generated by ent, DO NOT EDIT.

package teammemberitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the teammemberitem type in the database.
	Label = "team_member_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldLinkedinURL holds the string denoting the linkedin_url field in the database.
	FieldLinkedinURL = "linkedin_url"
	// FieldTwitterURL holds the string denoting the twitter_url field in the database.
	FieldTwitterURL = "twitter_url"
	// FieldEmailURL holds the string denoting the email_url field in the database.
	FieldEmailURL = "email_url"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// Table holds the table name of the teammemberitem in the database.
	Table = "team_member_items"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "team_member_items"
	// BlockInverseTable is the table name for the BlockTeamGrid entity.
	// It exists in this package in order to avoid circular dependency with the "blockteamgrid" package.
	BlockInverseTable = "block_team_grids"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "block_team_grid_members"
)

// Columns holds all SQL columns for teammemberitem fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldName,
	FieldRole,
	FieldBio,
	FieldImageURL,
	FieldLinkedinURL,
	FieldTwitterURL,
	FieldEmailURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "team_member_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_team_grid_members",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TeamMemberItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByLinkedinURL orders the results by the linkedin_url field.
func ByLinkedinURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkedinURL, opts...).ToFunc()
}

// ByTwitterURL orders the results by the twitter_url field.
func ByTwitterURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitterURL, opts...).ToFunc()
}

// ByEmailURL orders the results by the email_url field.
func ByEmailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailURL, opts...).ToFunc()
}

// ByBlockField orders the results by block field.
func ByBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
	)
}
