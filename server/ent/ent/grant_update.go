// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"awe/ent/ent/organization"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// GrantUpdate is the builder for updating Grant entities.
type GrantUpdate struct {
	config
	hooks    []Hook
	mutation *GrantMutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdate) Where(ps ...predicate.Grant) *GrantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *GrantUpdate) SetName(v string) *GrantUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableName(v *string) *GrantUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetGrantAmount sets the "grant_amount" field.
func (_u *GrantUpdate) SetGrantAmount(v float64) *GrantUpdate {
	_u.mutation.ResetGrantAmount()
	_u.mutation.SetGrantAmount(v)
	return _u
}

// SetNillableGrantAmount sets the "grant_amount" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableGrantAmount(v *float64) *GrantUpdate {
	if v != nil {
		_u.SetGrantAmount(*v)
	}
	return _u
}

// AddGrantAmount adds value to the "grant_amount" field.
func (_u *GrantUpdate) AddGrantAmount(v float64) *GrantUpdate {
	_u.mutation.AddGrantAmount(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *GrantUpdate) SetStartDate(v time.Time) *GrantUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableStartDate(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *GrantUpdate) SetEndDate(v time.Time) *GrantUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableEndDate(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *GrantUpdate) SetStatus(v grant.Status) *GrantUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableStatus(v *grant.Status) *GrantUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGoals sets the "goals" field.
func (_u *GrantUpdate) SetGoals(v []string) *GrantUpdate {
	_u.mutation.SetGoals(v)
	return _u
}

// AppendGoals appends value to the "goals" field.
func (_u *GrantUpdate) AppendGoals(v []string) *GrantUpdate {
	_u.mutation.AppendGoals(v)
	return _u
}

// SetGrantReference sets the "grant_reference" field.
func (_u *GrantUpdate) SetGrantReference(v string) *GrantUpdate {
	_u.mutation.SetGrantReference(v)
	return _u
}

// SetNillableGrantReference sets the "grant_reference" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableGrantReference(v *string) *GrantUpdate {
	if v != nil {
		_u.SetGrantReference(*v)
	}
	return _u
}

// ClearGrantReference clears the value of the "grant_reference" field.
func (_u *GrantUpdate) ClearGrantReference() *GrantUpdate {
	_u.mutation.ClearGrantReference()
	return _u
}

// SetContactPerson sets the "contact_person" field.
func (_u *GrantUpdate) SetContactPerson(v string) *GrantUpdate {
	_u.mutation.SetContactPerson(v)
	return _u
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableContactPerson(v *string) *GrantUpdate {
	if v != nil {
		_u.SetContactPerson(*v)
	}
	return _u
}

// ClearContactPerson clears the value of the "contact_person" field.
func (_u *GrantUpdate) ClearContactPerson() *GrantUpdate {
	_u.mutation.ClearContactPerson()
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *GrantUpdate) SetContactEmail(v string) *GrantUpdate {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableContactEmail(v *string) *GrantUpdate {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (_u *GrantUpdate) ClearContactEmail() *GrantUpdate {
	_u.mutation.ClearContactEmail()
	return _u
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (_u *GrantUpdate) SetRenewalEligible(v bool) *GrantUpdate {
	_u.mutation.SetRenewalEligible(v)
	return _u
}

// SetNillableRenewalEligible sets the "renewal_eligible" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableRenewalEligible(v *bool) *GrantUpdate {
	if v != nil {
		_u.SetRenewalEligible(*v)
	}
	return _u
}

// SetNextReviewDate sets the "next_review_date" field.
func (_u *GrantUpdate) SetNextReviewDate(v time.Time) *GrantUpdate {
	_u.mutation.SetNextReviewDate(v)
	return _u
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableNextReviewDate(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetNextReviewDate(*v)
	}
	return _u
}

// ClearNextReviewDate clears the value of the "next_review_date" field.
func (_u *GrantUpdate) ClearNextReviewDate() *GrantUpdate {
	_u.mutation.ClearNextReviewDate()
	return _u
}

// SetRequiresMatching sets the "requires_matching" field.
func (_u *GrantUpdate) SetRequiresMatching(v bool) *GrantUpdate {
	_u.mutation.SetRequiresMatching(v)
	return _u
}

// SetNillableRequiresMatching sets the "requires_matching" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableRequiresMatching(v *bool) *GrantUpdate {
	if v != nil {
		_u.SetRequiresMatching(*v)
	}
	return _u
}

// SetMatchingAmount sets the "matching_amount" field.
func (_u *GrantUpdate) SetMatchingAmount(v float64) *GrantUpdate {
	_u.mutation.ResetMatchingAmount()
	_u.mutation.SetMatchingAmount(v)
	return _u
}

// SetNillableMatchingAmount sets the "matching_amount" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableMatchingAmount(v *float64) *GrantUpdate {
	if v != nil {
		_u.SetMatchingAmount(*v)
	}
	return _u
}

// AddMatchingAmount adds value to the "matching_amount" field.
func (_u *GrantUpdate) AddMatchingAmount(v float64) *GrantUpdate {
	_u.mutation.AddMatchingAmount(v)
	return _u
}

// ClearMatchingAmount clears the value of the "matching_amount" field.
func (_u *GrantUpdate) ClearMatchingAmount() *GrantUpdate {
	_u.mutation.ClearMatchingAmount()
	return _u
}

// SetRestrictions sets the "restrictions" field.
func (_u *GrantUpdate) SetRestrictions(v []string) *GrantUpdate {
	_u.mutation.SetRestrictions(v)
	return _u
}

// AppendRestrictions appends value to the "restrictions" field.
func (_u *GrantUpdate) AppendRestrictions(v []string) *GrantUpdate {
	_u.mutation.AppendRestrictions(v)
	return _u
}

// ClearRestrictions clears the value of the "restrictions" field.
func (_u *GrantUpdate) ClearRestrictions() *GrantUpdate {
	_u.mutation.ClearRestrictions()
	return _u
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (_u *GrantUpdate) SetReportingSchedule(v map[string]string) *GrantUpdate {
	_u.mutation.SetReportingSchedule(v)
	return _u
}

// ClearReportingSchedule clears the value of the "reporting_schedule" field.
func (_u *GrantUpdate) ClearReportingSchedule() *GrantUpdate {
	_u.mutation.ClearReportingSchedule()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantUpdate) SetUpdatedAt(v time.Time) *GrantUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *GrantUpdate) SetOrganizationID(id int) *GrantUpdate {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *GrantUpdate) SetOrganization(v *Organization) *GrantUpdate {
	return _u.SetOrganizationID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *GrantUpdate) SetProgramID(id int) *GrantUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *GrantUpdate) SetProgram(v *Program) *GrantUpdate {
	return _u.SetProgramID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GrantReport entity by IDs.
func (_u *GrantUpdate) AddReportIDs(ids ...int) *GrantUpdate {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the GrantReport entity.
func (_u *GrantUpdate) AddReports(v ...*GrantReport) *GrantUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdate) Mutation() *GrantMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *GrantUpdate) ClearOrganization() *GrantUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *GrantUpdate) ClearProgram() *GrantUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearReports clears all "reports" edges to the GrantReport entity.
func (_u *GrantUpdate) ClearReports() *GrantUpdate {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to GrantReport entities by IDs.
func (_u *GrantUpdate) RemoveReportIDs(ids ...int) *GrantUpdate {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to GrantReport entities.
func (_u *GrantUpdate) RemoveReports(v ...*GrantReport) *GrantUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GrantUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GrantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := grant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := grant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grant.status": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Grant.organization"`)
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Grant.program"`)
	}
	return nil
}

func (_u *GrantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(grant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GrantAmount(); ok {
		_spec.SetField(grant.FieldGrantAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGrantAmount(); ok {
		_spec.AddField(grant.FieldGrantAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(grant.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(grant.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Goals(); ok {
		_spec.SetField(grant.FieldGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grant.FieldGoals, value)
		})
	}
	if value, ok := _u.mutation.GrantReference(); ok {
		_spec.SetField(grant.FieldGrantReference, field.TypeString, value)
	}
	if _u.mutation.GrantReferenceCleared() {
		_spec.ClearField(grant.FieldGrantReference, field.TypeString)
	}
	if value, ok := _u.mutation.ContactPerson(); ok {
		_spec.SetField(grant.FieldContactPerson, field.TypeString, value)
	}
	if _u.mutation.ContactPersonCleared() {
		_spec.ClearField(grant.FieldContactPerson, field.TypeString)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(grant.FieldContactEmail, field.TypeString, value)
	}
	if _u.mutation.ContactEmailCleared() {
		_spec.ClearField(grant.FieldContactEmail, field.TypeString)
	}
	if value, ok := _u.mutation.RenewalEligible(); ok {
		_spec.SetField(grant.FieldRenewalEligible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NextReviewDate(); ok {
		_spec.SetField(grant.FieldNextReviewDate, field.TypeTime, value)
	}
	if _u.mutation.NextReviewDateCleared() {
		_spec.ClearField(grant.FieldNextReviewDate, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiresMatching(); ok {
		_spec.SetField(grant.FieldRequiresMatching, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MatchingAmount(); ok {
		_spec.SetField(grant.FieldMatchingAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMatchingAmount(); ok {
		_spec.AddField(grant.FieldMatchingAmount, field.TypeFloat64, value)
	}
	if _u.mutation.MatchingAmountCleared() {
		_spec.ClearField(grant.FieldMatchingAmount, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Restrictions(); ok {
		_spec.SetField(grant.FieldRestrictions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRestrictions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grant.FieldRestrictions, value)
		})
	}
	if _u.mutation.RestrictionsCleared() {
		_spec.ClearField(grant.FieldRestrictions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ReportingSchedule(); ok {
		_spec.SetField(grant.FieldReportingSchedule, field.TypeJSON, value)
	}
	if _u.mutation.ReportingScheduleCleared() {
		_spec.ClearField(grant.FieldReportingSchedule, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(grant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GrantUpdateOne is the builder for updating a single Grant entity.
type GrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantMutation
}

// SetName sets the "name" field.
func (_u *GrantUpdateOne) SetName(v string) *GrantUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableName(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetGrantAmount sets the "grant_amount" field.
func (_u *GrantUpdateOne) SetGrantAmount(v float64) *GrantUpdateOne {
	_u.mutation.ResetGrantAmount()
	_u.mutation.SetGrantAmount(v)
	return _u
}

// SetNillableGrantAmount sets the "grant_amount" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableGrantAmount(v *float64) *GrantUpdateOne {
	if v != nil {
		_u.SetGrantAmount(*v)
	}
	return _u
}

// AddGrantAmount adds value to the "grant_amount" field.
func (_u *GrantUpdateOne) AddGrantAmount(v float64) *GrantUpdateOne {
	_u.mutation.AddGrantAmount(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *GrantUpdateOne) SetStartDate(v time.Time) *GrantUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableStartDate(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *GrantUpdateOne) SetEndDate(v time.Time) *GrantUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableEndDate(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *GrantUpdateOne) SetStatus(v grant.Status) *GrantUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableStatus(v *grant.Status) *GrantUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGoals sets the "goals" field.
func (_u *GrantUpdateOne) SetGoals(v []string) *GrantUpdateOne {
	_u.mutation.SetGoals(v)
	return _u
}

// AppendGoals appends value to the "goals" field.
func (_u *GrantUpdateOne) AppendGoals(v []string) *GrantUpdateOne {
	_u.mutation.AppendGoals(v)
	return _u
}

// SetGrantReference sets the "grant_reference" field.
func (_u *GrantUpdateOne) SetGrantReference(v string) *GrantUpdateOne {
	_u.mutation.SetGrantReference(v)
	return _u
}

// SetNillableGrantReference sets the "grant_reference" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableGrantReference(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetGrantReference(*v)
	}
	return _u
}

// ClearGrantReference clears the value of the "grant_reference" field.
func (_u *GrantUpdateOne) ClearGrantReference() *GrantUpdateOne {
	_u.mutation.ClearGrantReference()
	return _u
}

// SetContactPerson sets the "contact_person" field.
func (_u *GrantUpdateOne) SetContactPerson(v string) *GrantUpdateOne {
	_u.mutation.SetContactPerson(v)
	return _u
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableContactPerson(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetContactPerson(*v)
	}
	return _u
}

// ClearContactPerson clears the value of the "contact_person" field.
func (_u *GrantUpdateOne) ClearContactPerson() *GrantUpdateOne {
	_u.mutation.ClearContactPerson()
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *GrantUpdateOne) SetContactEmail(v string) *GrantUpdateOne {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableContactEmail(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (_u *GrantUpdateOne) ClearContactEmail() *GrantUpdateOne {
	_u.mutation.ClearContactEmail()
	return _u
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (_u *GrantUpdateOne) SetRenewalEligible(v bool) *GrantUpdateOne {
	_u.mutation.SetRenewalEligible(v)
	return _u
}

// SetNillableRenewalEligible sets the "renewal_eligible" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableRenewalEligible(v *bool) *GrantUpdateOne {
	if v != nil {
		_u.SetRenewalEligible(*v)
	}
	return _u
}

// SetNextReviewDate sets the "next_review_date" field.
func (_u *GrantUpdateOne) SetNextReviewDate(v time.Time) *GrantUpdateOne {
	_u.mutation.SetNextReviewDate(v)
	return _u
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableNextReviewDate(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetNextReviewDate(*v)
	}
	return _u
}

// ClearNextReviewDate clears the value of the "next_review_date" field.
func (_u *GrantUpdateOne) ClearNextReviewDate() *GrantUpdateOne {
	_u.mutation.ClearNextReviewDate()
	return _u
}

// SetRequiresMatching sets the "requires_matching" field.
func (_u *GrantUpdateOne) SetRequiresMatching(v bool) *GrantUpdateOne {
	_u.mutation.SetRequiresMatching(v)
	return _u
}

// SetNillableRequiresMatching sets the "requires_matching" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableRequiresMatching(v *bool) *GrantUpdateOne {
	if v != nil {
		_u.SetRequiresMatching(*v)
	}
	return _u
}

// SetMatchingAmount sets the "matching_amount" field.
func (_u *GrantUpdateOne) SetMatchingAmount(v float64) *GrantUpdateOne {
	_u.mutation.ResetMatchingAmount()
	_u.mutation.SetMatchingAmount(v)
	return _u
}

// SetNillableMatchingAmount sets the "matching_amount" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableMatchingAmount(v *float64) *GrantUpdateOne {
	if v != nil {
		_u.SetMatchingAmount(*v)
	}
	return _u
}

// AddMatchingAmount adds value to the "matching_amount" field.
func (_u *GrantUpdateOne) AddMatchingAmount(v float64) *GrantUpdateOne {
	_u.mutation.AddMatchingAmount(v)
	return _u
}

// ClearMatchingAmount clears the value of the "matching_amount" field.
func (_u *GrantUpdateOne) ClearMatchingAmount() *GrantUpdateOne {
	_u.mutation.ClearMatchingAmount()
	return _u
}

// SetRestrictions sets the "restrictions" field.
func (_u *GrantUpdateOne) SetRestrictions(v []string) *GrantUpdateOne {
	_u.mutation.SetRestrictions(v)
	return _u
}

// AppendRestrictions appends value to the "restrictions" field.
func (_u *GrantUpdateOne) AppendRestrictions(v []string) *GrantUpdateOne {
	_u.mutation.AppendRestrictions(v)
	return _u
}

// ClearRestrictions clears the value of the "restrictions" field.
func (_u *GrantUpdateOne) ClearRestrictions() *GrantUpdateOne {
	_u.mutation.ClearRestrictions()
	return _u
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (_u *GrantUpdateOne) SetReportingSchedule(v map[string]string) *GrantUpdateOne {
	_u.mutation.SetReportingSchedule(v)
	return _u
}

// ClearReportingSchedule clears the value of the "reporting_schedule" field.
func (_u *GrantUpdateOne) ClearReportingSchedule() *GrantUpdateOne {
	_u.mutation.ClearReportingSchedule()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantUpdateOne) SetUpdatedAt(v time.Time) *GrantUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *GrantUpdateOne) SetOrganizationID(id int) *GrantUpdateOne {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *GrantUpdateOne) SetOrganization(v *Organization) *GrantUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *GrantUpdateOne) SetProgramID(id int) *GrantUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *GrantUpdateOne) SetProgram(v *Program) *GrantUpdateOne {
	return _u.SetProgramID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GrantReport entity by IDs.
func (_u *GrantUpdateOne) AddReportIDs(ids ...int) *GrantUpdateOne {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the GrantReport entity.
func (_u *GrantUpdateOne) AddReports(v ...*GrantReport) *GrantUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdateOne) Mutation() *GrantMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *GrantUpdateOne) ClearOrganization() *GrantUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *GrantUpdateOne) ClearProgram() *GrantUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearReports clears all "reports" edges to the GrantReport entity.
func (_u *GrantUpdateOne) ClearReports() *GrantUpdateOne {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to GrantReport entities by IDs.
func (_u *GrantUpdateOne) RemoveReportIDs(ids ...int) *GrantUpdateOne {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to GrantReport entities.
func (_u *GrantUpdateOne) RemoveReports(v ...*GrantReport) *GrantUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdateOne) Where(ps ...predicate.Grant) *GrantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GrantUpdateOne) Select(field string, fields ...string) *GrantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Grant entity.
func (_u *GrantUpdateOne) Save(ctx context.Context) (*Grant, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdateOne) SaveX(ctx context.Context) *Grant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GrantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := grant.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := grant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grant.status": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Grant.organization"`)
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Grant.program"`)
	}
	return nil
}

func (_u *GrantUpdateOne) sqlSave(ctx context.Context) (_node *Grant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grant.FieldID)
		for _, f := range fields {
			if !grant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(grant.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GrantAmount(); ok {
		_spec.SetField(grant.FieldGrantAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedGrantAmount(); ok {
		_spec.AddField(grant.FieldGrantAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(grant.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(grant.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Goals(); ok {
		_spec.SetField(grant.FieldGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grant.FieldGoals, value)
		})
	}
	if value, ok := _u.mutation.GrantReference(); ok {
		_spec.SetField(grant.FieldGrantReference, field.TypeString, value)
	}
	if _u.mutation.GrantReferenceCleared() {
		_spec.ClearField(grant.FieldGrantReference, field.TypeString)
	}
	if value, ok := _u.mutation.ContactPerson(); ok {
		_spec.SetField(grant.FieldContactPerson, field.TypeString, value)
	}
	if _u.mutation.ContactPersonCleared() {
		_spec.ClearField(grant.FieldContactPerson, field.TypeString)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(grant.FieldContactEmail, field.TypeString, value)
	}
	if _u.mutation.ContactEmailCleared() {
		_spec.ClearField(grant.FieldContactEmail, field.TypeString)
	}
	if value, ok := _u.mutation.RenewalEligible(); ok {
		_spec.SetField(grant.FieldRenewalEligible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NextReviewDate(); ok {
		_spec.SetField(grant.FieldNextReviewDate, field.TypeTime, value)
	}
	if _u.mutation.NextReviewDateCleared() {
		_spec.ClearField(grant.FieldNextReviewDate, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiresMatching(); ok {
		_spec.SetField(grant.FieldRequiresMatching, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MatchingAmount(); ok {
		_spec.SetField(grant.FieldMatchingAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMatchingAmount(); ok {
		_spec.AddField(grant.FieldMatchingAmount, field.TypeFloat64, value)
	}
	if _u.mutation.MatchingAmountCleared() {
		_spec.ClearField(grant.FieldMatchingAmount, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Restrictions(); ok {
		_spec.SetField(grant.FieldRestrictions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRestrictions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, grant.FieldRestrictions, value)
		})
	}
	if _u.mutation.RestrictionsCleared() {
		_spec.ClearField(grant.FieldRestrictions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ReportingSchedule(); ok {
		_spec.SetField(grant.FieldReportingSchedule, field.TypeJSON, value)
	}
	if _u.mutation.ReportingScheduleCleared() {
		_spec.ClearField(grant.FieldReportingSchedule, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(grant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Grant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
