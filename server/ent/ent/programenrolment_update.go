// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramEnrolmentUpdate is the builder for updating ProgramEnrolment entities.
type ProgramEnrolmentUpdate struct {
	config
	hooks    []Hook
	mutation *ProgramEnrolmentMutation
}

// Where appends a list predicates to the ProgramEnrolmentUpdate builder.
func (_u *ProgramEnrolmentUpdate) Where(ps ...predicate.ProgramEnrolment) *ProgramEnrolmentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProgramEnrolmentUpdate) SetStatus(v programenrolment.Status) *ProgramEnrolmentUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramEnrolmentUpdate) SetNillableStatus(v *programenrolment.Status) *ProgramEnrolmentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAnswers sets the "answers" field.
func (_u *ProgramEnrolmentUpdate) SetAnswers(v map[string]interface{}) *ProgramEnrolmentUpdate {
	_u.mutation.SetAnswers(v)
	return _u
}

// ClearAnswers clears the value of the "answers" field.
func (_u *ProgramEnrolmentUpdate) ClearAnswers() *ProgramEnrolmentUpdate {
	_u.mutation.ClearAnswers()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramEnrolmentUpdate) SetUpdatedAt(v time.Time) *ProgramEnrolmentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *ProgramEnrolmentUpdate) SetProgramID(id int) *ProgramEnrolmentUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *ProgramEnrolmentUpdate) SetProgram(v *Program) *ProgramEnrolmentUpdate {
	return _u.SetProgramID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProgramEnrolmentUpdate) SetUserID(id int) *ProgramEnrolmentUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProgramEnrolmentUpdate) SetUser(v *User) *ProgramEnrolmentUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProgramEnrolmentMutation object of the builder.
func (_u *ProgramEnrolmentUpdate) Mutation() *ProgramEnrolmentMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *ProgramEnrolmentUpdate) ClearProgram() *ProgramEnrolmentUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProgramEnrolmentUpdate) ClearUser() *ProgramEnrolmentUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProgramEnrolmentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramEnrolmentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProgramEnrolmentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramEnrolmentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramEnrolmentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := programenrolment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramEnrolmentUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := programenrolment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProgramEnrolment.status": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProgramEnrolment.program"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProgramEnrolment.user"`)
	}
	return nil
}

func (_u *ProgramEnrolmentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programenrolment.Table, programenrolment.Columns, sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(programenrolment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Answers(); ok {
		_spec.SetField(programenrolment.FieldAnswers, field.TypeJSON, value)
	}
	if _u.mutation.AnswersCleared() {
		_spec.ClearField(programenrolment.FieldAnswers, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programenrolment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.ProgramTable,
			Columns: []string{programenrolment.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.ProgramTable,
			Columns: []string{programenrolment.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.UserTable,
			Columns: []string{programenrolment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.UserTable,
			Columns: []string{programenrolment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programenrolment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProgramEnrolmentUpdateOne is the builder for updating a single ProgramEnrolment entity.
type ProgramEnrolmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgramEnrolmentMutation
}

// SetStatus sets the "status" field.
func (_u *ProgramEnrolmentUpdateOne) SetStatus(v programenrolment.Status) *ProgramEnrolmentUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramEnrolmentUpdateOne) SetNillableStatus(v *programenrolment.Status) *ProgramEnrolmentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAnswers sets the "answers" field.
func (_u *ProgramEnrolmentUpdateOne) SetAnswers(v map[string]interface{}) *ProgramEnrolmentUpdateOne {
	_u.mutation.SetAnswers(v)
	return _u
}

// ClearAnswers clears the value of the "answers" field.
func (_u *ProgramEnrolmentUpdateOne) ClearAnswers() *ProgramEnrolmentUpdateOne {
	_u.mutation.ClearAnswers()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramEnrolmentUpdateOne) SetUpdatedAt(v time.Time) *ProgramEnrolmentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *ProgramEnrolmentUpdateOne) SetProgramID(id int) *ProgramEnrolmentUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *ProgramEnrolmentUpdateOne) SetProgram(v *Program) *ProgramEnrolmentUpdateOne {
	return _u.SetProgramID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProgramEnrolmentUpdateOne) SetUserID(id int) *ProgramEnrolmentUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProgramEnrolmentUpdateOne) SetUser(v *User) *ProgramEnrolmentUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProgramEnrolmentMutation object of the builder.
func (_u *ProgramEnrolmentUpdateOne) Mutation() *ProgramEnrolmentMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *ProgramEnrolmentUpdateOne) ClearProgram() *ProgramEnrolmentUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProgramEnrolmentUpdateOne) ClearUser() *ProgramEnrolmentUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ProgramEnrolmentUpdate builder.
func (_u *ProgramEnrolmentUpdateOne) Where(ps ...predicate.ProgramEnrolment) *ProgramEnrolmentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProgramEnrolmentUpdateOne) Select(field string, fields ...string) *ProgramEnrolmentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProgramEnrolment entity.
func (_u *ProgramEnrolmentUpdateOne) Save(ctx context.Context) (*ProgramEnrolment, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramEnrolmentUpdateOne) SaveX(ctx context.Context) *ProgramEnrolment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProgramEnrolmentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramEnrolmentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramEnrolmentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := programenrolment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramEnrolmentUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := programenrolment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ProgramEnrolment.status": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProgramEnrolment.program"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProgramEnrolment.user"`)
	}
	return nil
}

func (_u *ProgramEnrolmentUpdateOne) sqlSave(ctx context.Context) (_node *ProgramEnrolment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programenrolment.Table, programenrolment.Columns, sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProgramEnrolment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, programenrolment.FieldID)
		for _, f := range fields {
			if !programenrolment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != programenrolment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(programenrolment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Answers(); ok {
		_spec.SetField(programenrolment.FieldAnswers, field.TypeJSON, value)
	}
	if _u.mutation.AnswersCleared() {
		_spec.ClearField(programenrolment.FieldAnswers, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programenrolment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.ProgramTable,
			Columns: []string{programenrolment.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.ProgramTable,
			Columns: []string{programenrolment.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.UserTable,
			Columns: []string{programenrolment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.UserTable,
			Columns: []string{programenrolment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProgramEnrolment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programenrolment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
