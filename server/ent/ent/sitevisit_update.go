// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SiteVisitUpdate is the builder for updating SiteVisit entities.
type SiteVisitUpdate struct {
	config
	hooks    []Hook
	mutation *SiteVisitMutation
}

// Where appends a list predicates to the SiteVisitUpdate builder.
func (_u *SiteVisitUpdate) Where(ps ...predicate.SiteVisit) *SiteVisitUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRequestedDate sets the "requested_date" field.
func (_u *SiteVisitUpdate) SetRequestedDate(v time.Time) *SiteVisitUpdate {
	_u.mutation.SetRequestedDate(v)
	return _u
}

// SetNillableRequestedDate sets the "requested_date" field if the given value is not nil.
func (_u *SiteVisitUpdate) SetNillableRequestedDate(v *time.Time) *SiteVisitUpdate {
	if v != nil {
		_u.SetRequestedDate(*v)
	}
	return _u
}

// SetScheduledDate sets the "scheduled_date" field.
func (_u *SiteVisitUpdate) SetScheduledDate(v time.Time) *SiteVisitUpdate {
	_u.mutation.SetScheduledDate(v)
	return _u
}

// SetNillableScheduledDate sets the "scheduled_date" field if the given value is not nil.
func (_u *SiteVisitUpdate) SetNillableScheduledDate(v *time.Time) *SiteVisitUpdate {
	if v != nil {
		_u.SetScheduledDate(*v)
	}
	return _u
}

// ClearScheduledDate clears the value of the "scheduled_date" field.
func (_u *SiteVisitUpdate) ClearScheduledDate() *SiteVisitUpdate {
	_u.mutation.ClearScheduledDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SiteVisitUpdate) SetStatus(v string) *SiteVisitUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SiteVisitUpdate) SetNillableStatus(v *string) *SiteVisitUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNotes sets the "notes" field.
func (_u *SiteVisitUpdate) SetNotes(v string) *SiteVisitUpdate {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *SiteVisitUpdate) SetNillableNotes(v *string) *SiteVisitUpdate {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *SiteVisitUpdate) ClearNotes() *SiteVisitUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_u *SiteVisitUpdate) SetDonorID(id int) *SiteVisitUpdate {
	_u.mutation.SetDonorID(id)
	return _u
}

// SetDonor sets the "donor" edge to the User entity.
func (_u *SiteVisitUpdate) SetDonor(v *User) *SiteVisitUpdate {
	return _u.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *SiteVisitUpdate) SetProgramID(id int) *SiteVisitUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *SiteVisitUpdate) SetProgram(v *Program) *SiteVisitUpdate {
	return _u.SetProgramID(v.ID)
}

// Mutation returns the SiteVisitMutation object of the builder.
func (_u *SiteVisitUpdate) Mutation() *SiteVisitMutation {
	return _u.mutation
}

// ClearDonor clears the "donor" edge to the User entity.
func (_u *SiteVisitUpdate) ClearDonor() *SiteVisitUpdate {
	_u.mutation.ClearDonor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *SiteVisitUpdate) ClearProgram() *SiteVisitUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SiteVisitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteVisitUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SiteVisitUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteVisitUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SiteVisitUpdate) check() error {
	if _u.mutation.DonorCleared() && len(_u.mutation.DonorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SiteVisit.donor"`)
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SiteVisit.program"`)
	}
	return nil
}

func (_u *SiteVisitUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitevisit.Table, sitevisit.Columns, sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RequestedDate(); ok {
		_spec.SetField(sitevisit.FieldRequestedDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ScheduledDate(); ok {
		_spec.SetField(sitevisit.FieldScheduledDate, field.TypeTime, value)
	}
	if _u.mutation.ScheduledDateCleared() {
		_spec.ClearField(sitevisit.FieldScheduledDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sitevisit.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(sitevisit.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(sitevisit.FieldNotes, field.TypeString)
	}
	if _u.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitevisit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SiteVisitUpdateOne is the builder for updating a single SiteVisit entity.
type SiteVisitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteVisitMutation
}

// SetRequestedDate sets the "requested_date" field.
func (_u *SiteVisitUpdateOne) SetRequestedDate(v time.Time) *SiteVisitUpdateOne {
	_u.mutation.SetRequestedDate(v)
	return _u
}

// SetNillableRequestedDate sets the "requested_date" field if the given value is not nil.
func (_u *SiteVisitUpdateOne) SetNillableRequestedDate(v *time.Time) *SiteVisitUpdateOne {
	if v != nil {
		_u.SetRequestedDate(*v)
	}
	return _u
}

// SetScheduledDate sets the "scheduled_date" field.
func (_u *SiteVisitUpdateOne) SetScheduledDate(v time.Time) *SiteVisitUpdateOne {
	_u.mutation.SetScheduledDate(v)
	return _u
}

// SetNillableScheduledDate sets the "scheduled_date" field if the given value is not nil.
func (_u *SiteVisitUpdateOne) SetNillableScheduledDate(v *time.Time) *SiteVisitUpdateOne {
	if v != nil {
		_u.SetScheduledDate(*v)
	}
	return _u
}

// ClearScheduledDate clears the value of the "scheduled_date" field.
func (_u *SiteVisitUpdateOne) ClearScheduledDate() *SiteVisitUpdateOne {
	_u.mutation.ClearScheduledDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SiteVisitUpdateOne) SetStatus(v string) *SiteVisitUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SiteVisitUpdateOne) SetNillableStatus(v *string) *SiteVisitUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNotes sets the "notes" field.
func (_u *SiteVisitUpdateOne) SetNotes(v string) *SiteVisitUpdateOne {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *SiteVisitUpdateOne) SetNillableNotes(v *string) *SiteVisitUpdateOne {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *SiteVisitUpdateOne) ClearNotes() *SiteVisitUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_u *SiteVisitUpdateOne) SetDonorID(id int) *SiteVisitUpdateOne {
	_u.mutation.SetDonorID(id)
	return _u
}

// SetDonor sets the "donor" edge to the User entity.
func (_u *SiteVisitUpdateOne) SetDonor(v *User) *SiteVisitUpdateOne {
	return _u.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *SiteVisitUpdateOne) SetProgramID(id int) *SiteVisitUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *SiteVisitUpdateOne) SetProgram(v *Program) *SiteVisitUpdateOne {
	return _u.SetProgramID(v.ID)
}

// Mutation returns the SiteVisitMutation object of the builder.
func (_u *SiteVisitUpdateOne) Mutation() *SiteVisitMutation {
	return _u.mutation
}

// ClearDonor clears the "donor" edge to the User entity.
func (_u *SiteVisitUpdateOne) ClearDonor() *SiteVisitUpdateOne {
	_u.mutation.ClearDonor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *SiteVisitUpdateOne) ClearProgram() *SiteVisitUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// Where appends a list predicates to the SiteVisitUpdate builder.
func (_u *SiteVisitUpdateOne) Where(ps ...predicate.SiteVisit) *SiteVisitUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SiteVisitUpdateOne) Select(field string, fields ...string) *SiteVisitUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SiteVisit entity.
func (_u *SiteVisitUpdateOne) Save(ctx context.Context) (*SiteVisit, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteVisitUpdateOne) SaveX(ctx context.Context) *SiteVisit {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SiteVisitUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteVisitUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SiteVisitUpdateOne) check() error {
	if _u.mutation.DonorCleared() && len(_u.mutation.DonorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SiteVisit.donor"`)
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SiteVisit.program"`)
	}
	return nil
}

func (_u *SiteVisitUpdateOne) sqlSave(ctx context.Context) (_node *SiteVisit, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitevisit.Table, sitevisit.Columns, sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteVisit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitevisit.FieldID)
		for _, f := range fields {
			if !sitevisit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitevisit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RequestedDate(); ok {
		_spec.SetField(sitevisit.FieldRequestedDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ScheduledDate(); ok {
		_spec.SetField(sitevisit.FieldScheduledDate, field.TypeTime, value)
	}
	if _u.mutation.ScheduledDateCleared() {
		_spec.ClearField(sitevisit.FieldScheduledDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(sitevisit.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(sitevisit.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(sitevisit.FieldNotes, field.TypeString)
	}
	if _u.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SiteVisit{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitevisit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
