// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/ballot"
	"awe/ent/ent/vote"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ballot is the model entity for the Ballot schema.
type Ballot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VoterID holds the value of the "voter_id" field.
	VoterID string `json:"voter_id,omitempty"`
	// Choice holds the value of the "choice" field.
	Choice string `json:"choice,omitempty"`
	// CastAt holds the value of the "cast_at" field.
	CastAt time.Time `json:"cast_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BallotQuery when eager-loading is set.
	Edges        BallotEdges `json:"edges"`
	vote_ballots *int
	selectValues sql.SelectValues
}

// BallotEdges holds the relations/edges for other nodes in the graph.
type BallotEdges struct {
	// Vote holds the value of the vote edge.
	Vote *Vote `json:"vote,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VoteOrErr returns the Vote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BallotEdges) VoteOrErr() (*Vote, error) {
	if e.Vote != nil {
		return e.Vote, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vote.Label}
	}
	return nil, &NotLoadedError{edge: "vote"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ballot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ballot.FieldID:
			values[i] = new(sql.NullInt64)
		case ballot.FieldVoterID, ballot.FieldChoice:
			values[i] = new(sql.NullString)
		case ballot.FieldCastAt:
			values[i] = new(sql.NullTime)
		case ballot.ForeignKeys[0]: // vote_ballots
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ballot fields.
func (_m *Ballot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ballot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case ballot.FieldVoterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field voter_id", values[i])
			} else if value.Valid {
				_m.VoterID = value.String
			}
		case ballot.FieldChoice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field choice", values[i])
			} else if value.Valid {
				_m.Choice = value.String
			}
		case ballot.FieldCastAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cast_at", values[i])
			} else if value.Valid {
				_m.CastAt = value.Time
			}
		case ballot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vote_ballots", value)
			} else if value.Valid {
				_m.vote_ballots = new(int)
				*_m.vote_ballots = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ballot.
// This includes values selected through modifiers, order, etc.
func (_m *Ballot) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryVote queries the "vote" edge of the Ballot entity.
func (_m *Ballot) QueryVote() *VoteQuery {
	return NewBallotClient(_m.config).QueryVote(_m)
}

// Update returns a builder for updating this Ballot.
// Note that you need to call Ballot.Unwrap() before calling this method if this Ballot
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Ballot) Update() *BallotUpdateOne {
	return NewBallotClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Ballot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Ballot) Unwrap() *Ballot {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ballot is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Ballot) String() string {
	var builder strings.Builder
	builder.WriteString("Ballot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("voter_id=")
	builder.WriteString(_m.VoterID)
	builder.WriteString(", ")
	builder.WriteString("choice=")
	builder.WriteString(_m.Choice)
	builder.WriteString(", ")
	builder.WriteString("cast_at=")
	builder.WriteString(_m.CastAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ballots is a parsable slice of Ballot.
type Ballots []*Ballot
