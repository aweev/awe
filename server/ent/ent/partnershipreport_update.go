// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipreport"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PartnershipReportUpdate is the builder for updating PartnershipReport entities.
type PartnershipReportUpdate struct {
	config
	hooks    []Hook
	mutation *PartnershipReportMutation
}

// Where appends a list predicates to the PartnershipReportUpdate builder.
func (_u *PartnershipReportUpdate) Where(ps ...predicate.PartnershipReport) *PartnershipReportUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetReportPeriod sets the "report_period" field.
func (_u *PartnershipReportUpdate) SetReportPeriod(v string) *PartnershipReportUpdate {
	_u.mutation.SetReportPeriod(v)
	return _u
}

// SetNillableReportPeriod sets the "report_period" field if the given value is not nil.
func (_u *PartnershipReportUpdate) SetNillableReportPeriod(v *string) *PartnershipReportUpdate {
	if v != nil {
		_u.SetReportPeriod(*v)
	}
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *PartnershipReportUpdate) SetGeneratedAt(v time.Time) *PartnershipReportUpdate {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *PartnershipReportUpdate) SetNillableGeneratedAt(v *time.Time) *PartnershipReportUpdate {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetGeneratedBy sets the "generated_by" field.
func (_u *PartnershipReportUpdate) SetGeneratedBy(v string) *PartnershipReportUpdate {
	_u.mutation.SetGeneratedBy(v)
	return _u
}

// SetNillableGeneratedBy sets the "generated_by" field if the given value is not nil.
func (_u *PartnershipReportUpdate) SetNillableGeneratedBy(v *string) *PartnershipReportUpdate {
	if v != nil {
		_u.SetGeneratedBy(*v)
	}
	return _u
}

// ClearGeneratedBy clears the value of the "generated_by" field.
func (_u *PartnershipReportUpdate) ClearGeneratedBy() *PartnershipReportUpdate {
	_u.mutation.ClearGeneratedBy()
	return _u
}

// SetImpactMetrics sets the "impact_metrics" field.
func (_u *PartnershipReportUpdate) SetImpactMetrics(v map[string]interface{}) *PartnershipReportUpdate {
	_u.mutation.SetImpactMetrics(v)
	return _u
}

// SetOutcomes sets the "outcomes" field.
func (_u *PartnershipReportUpdate) SetOutcomes(v []string) *PartnershipReportUpdate {
	_u.mutation.SetOutcomes(v)
	return _u
}

// AppendOutcomes appends value to the "outcomes" field.
func (_u *PartnershipReportUpdate) AppendOutcomes(v []string) *PartnershipReportUpdate {
	_u.mutation.AppendOutcomes(v)
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *PartnershipReportUpdate) SetFeedback(v []string) *PartnershipReportUpdate {
	_u.mutation.SetFeedback(v)
	return _u
}

// AppendFeedback appends value to the "feedback" field.
func (_u *PartnershipReportUpdate) AppendFeedback(v []string) *PartnershipReportUpdate {
	_u.mutation.AppendFeedback(v)
	return _u
}

// SetReportURL sets the "report_url" field.
func (_u *PartnershipReportUpdate) SetReportURL(v string) *PartnershipReportUpdate {
	_u.mutation.SetReportURL(v)
	return _u
}

// SetNillableReportURL sets the "report_url" field if the given value is not nil.
func (_u *PartnershipReportUpdate) SetNillableReportURL(v *string) *PartnershipReportUpdate {
	if v != nil {
		_u.SetReportURL(*v)
	}
	return _u
}

// ClearReportURL clears the value of the "report_url" field.
func (_u *PartnershipReportUpdate) ClearReportURL() *PartnershipReportUpdate {
	_u.mutation.ClearReportURL()
	return _u
}

// SetPresentationURL sets the "presentation_url" field.
func (_u *PartnershipReportUpdate) SetPresentationURL(v string) *PartnershipReportUpdate {
	_u.mutation.SetPresentationURL(v)
	return _u
}

// SetNillablePresentationURL sets the "presentation_url" field if the given value is not nil.
func (_u *PartnershipReportUpdate) SetNillablePresentationURL(v *string) *PartnershipReportUpdate {
	if v != nil {
		_u.SetPresentationURL(*v)
	}
	return _u
}

// ClearPresentationURL clears the value of the "presentation_url" field.
func (_u *PartnershipReportUpdate) ClearPresentationURL() *PartnershipReportUpdate {
	_u.mutation.ClearPresentationURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipReportUpdate) SetUpdatedAt(v time.Time) *PartnershipReportUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipReportUpdate) SetPartnershipID(id int) *PartnershipReportUpdate {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipReportUpdate) SetPartnership(v *Partnership) *PartnershipReportUpdate {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipReportMutation object of the builder.
func (_u *PartnershipReportUpdate) Mutation() *PartnershipReportMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipReportUpdate) ClearPartnership() *PartnershipReportUpdate {
	_u.mutation.ClearPartnership()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnershipReportUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipReportUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnershipReportUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipReportUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipReportUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershipreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipReportUpdate) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipReport.partnership"`)
	}
	return nil
}

func (_u *PartnershipReportUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershipreport.Table, partnershipreport.Columns, sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ReportPeriod(); ok {
		_spec.SetField(partnershipreport.FieldReportPeriod, field.TypeString, value)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GeneratedBy(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedBy, field.TypeString, value)
	}
	if _u.mutation.GeneratedByCleared() {
		_spec.ClearField(partnershipreport.FieldGeneratedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ImpactMetrics(); ok {
		_spec.SetField(partnershipreport.FieldImpactMetrics, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Outcomes(); ok {
		_spec.SetField(partnershipreport.FieldOutcomes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOutcomes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipreport.FieldOutcomes, value)
		})
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(partnershipreport.FieldFeedback, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeedback(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipreport.FieldFeedback, value)
		})
	}
	if value, ok := _u.mutation.ReportURL(); ok {
		_spec.SetField(partnershipreport.FieldReportURL, field.TypeString, value)
	}
	if _u.mutation.ReportURLCleared() {
		_spec.ClearField(partnershipreport.FieldReportURL, field.TypeString)
	}
	if value, ok := _u.mutation.PresentationURL(); ok {
		_spec.SetField(partnershipreport.FieldPresentationURL, field.TypeString, value)
	}
	if _u.mutation.PresentationURLCleared() {
		_spec.ClearField(partnershipreport.FieldPresentationURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershipreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnershipReportUpdateOne is the builder for updating a single PartnershipReport entity.
type PartnershipReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnershipReportMutation
}

// SetReportPeriod sets the "report_period" field.
func (_u *PartnershipReportUpdateOne) SetReportPeriod(v string) *PartnershipReportUpdateOne {
	_u.mutation.SetReportPeriod(v)
	return _u
}

// SetNillableReportPeriod sets the "report_period" field if the given value is not nil.
func (_u *PartnershipReportUpdateOne) SetNillableReportPeriod(v *string) *PartnershipReportUpdateOne {
	if v != nil {
		_u.SetReportPeriod(*v)
	}
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *PartnershipReportUpdateOne) SetGeneratedAt(v time.Time) *PartnershipReportUpdateOne {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *PartnershipReportUpdateOne) SetNillableGeneratedAt(v *time.Time) *PartnershipReportUpdateOne {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetGeneratedBy sets the "generated_by" field.
func (_u *PartnershipReportUpdateOne) SetGeneratedBy(v string) *PartnershipReportUpdateOne {
	_u.mutation.SetGeneratedBy(v)
	return _u
}

// SetNillableGeneratedBy sets the "generated_by" field if the given value is not nil.
func (_u *PartnershipReportUpdateOne) SetNillableGeneratedBy(v *string) *PartnershipReportUpdateOne {
	if v != nil {
		_u.SetGeneratedBy(*v)
	}
	return _u
}

// ClearGeneratedBy clears the value of the "generated_by" field.
func (_u *PartnershipReportUpdateOne) ClearGeneratedBy() *PartnershipReportUpdateOne {
	_u.mutation.ClearGeneratedBy()
	return _u
}

// SetImpactMetrics sets the "impact_metrics" field.
func (_u *PartnershipReportUpdateOne) SetImpactMetrics(v map[string]interface{}) *PartnershipReportUpdateOne {
	_u.mutation.SetImpactMetrics(v)
	return _u
}

// SetOutcomes sets the "outcomes" field.
func (_u *PartnershipReportUpdateOne) SetOutcomes(v []string) *PartnershipReportUpdateOne {
	_u.mutation.SetOutcomes(v)
	return _u
}

// AppendOutcomes appends value to the "outcomes" field.
func (_u *PartnershipReportUpdateOne) AppendOutcomes(v []string) *PartnershipReportUpdateOne {
	_u.mutation.AppendOutcomes(v)
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *PartnershipReportUpdateOne) SetFeedback(v []string) *PartnershipReportUpdateOne {
	_u.mutation.SetFeedback(v)
	return _u
}

// AppendFeedback appends value to the "feedback" field.
func (_u *PartnershipReportUpdateOne) AppendFeedback(v []string) *PartnershipReportUpdateOne {
	_u.mutation.AppendFeedback(v)
	return _u
}

// SetReportURL sets the "report_url" field.
func (_u *PartnershipReportUpdateOne) SetReportURL(v string) *PartnershipReportUpdateOne {
	_u.mutation.SetReportURL(v)
	return _u
}

// SetNillableReportURL sets the "report_url" field if the given value is not nil.
func (_u *PartnershipReportUpdateOne) SetNillableReportURL(v *string) *PartnershipReportUpdateOne {
	if v != nil {
		_u.SetReportURL(*v)
	}
	return _u
}

// ClearReportURL clears the value of the "report_url" field.
func (_u *PartnershipReportUpdateOne) ClearReportURL() *PartnershipReportUpdateOne {
	_u.mutation.ClearReportURL()
	return _u
}

// SetPresentationURL sets the "presentation_url" field.
func (_u *PartnershipReportUpdateOne) SetPresentationURL(v string) *PartnershipReportUpdateOne {
	_u.mutation.SetPresentationURL(v)
	return _u
}

// SetNillablePresentationURL sets the "presentation_url" field if the given value is not nil.
func (_u *PartnershipReportUpdateOne) SetNillablePresentationURL(v *string) *PartnershipReportUpdateOne {
	if v != nil {
		_u.SetPresentationURL(*v)
	}
	return _u
}

// ClearPresentationURL clears the value of the "presentation_url" field.
func (_u *PartnershipReportUpdateOne) ClearPresentationURL() *PartnershipReportUpdateOne {
	_u.mutation.ClearPresentationURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipReportUpdateOne) SetUpdatedAt(v time.Time) *PartnershipReportUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipReportUpdateOne) SetPartnershipID(id int) *PartnershipReportUpdateOne {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipReportUpdateOne) SetPartnership(v *Partnership) *PartnershipReportUpdateOne {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipReportMutation object of the builder.
func (_u *PartnershipReportUpdateOne) Mutation() *PartnershipReportMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipReportUpdateOne) ClearPartnership() *PartnershipReportUpdateOne {
	_u.mutation.ClearPartnership()
	return _u
}

// Where appends a list predicates to the PartnershipReportUpdate builder.
func (_u *PartnershipReportUpdateOne) Where(ps ...predicate.PartnershipReport) *PartnershipReportUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnershipReportUpdateOne) Select(field string, fields ...string) *PartnershipReportUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PartnershipReport entity.
func (_u *PartnershipReportUpdateOne) Save(ctx context.Context) (*PartnershipReport, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipReportUpdateOne) SaveX(ctx context.Context) *PartnershipReport {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnershipReportUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipReportUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipReportUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershipreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipReportUpdateOne) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipReport.partnership"`)
	}
	return nil
}

func (_u *PartnershipReportUpdateOne) sqlSave(ctx context.Context) (_node *PartnershipReport, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershipreport.Table, partnershipreport.Columns, sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnershipReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnershipreport.FieldID)
		for _, f := range fields {
			if !partnershipreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnershipreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ReportPeriod(); ok {
		_spec.SetField(partnershipreport.FieldReportPeriod, field.TypeString, value)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GeneratedBy(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedBy, field.TypeString, value)
	}
	if _u.mutation.GeneratedByCleared() {
		_spec.ClearField(partnershipreport.FieldGeneratedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ImpactMetrics(); ok {
		_spec.SetField(partnershipreport.FieldImpactMetrics, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Outcomes(); ok {
		_spec.SetField(partnershipreport.FieldOutcomes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOutcomes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipreport.FieldOutcomes, value)
		})
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(partnershipreport.FieldFeedback, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedFeedback(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnershipreport.FieldFeedback, value)
		})
	}
	if value, ok := _u.mutation.ReportURL(); ok {
		_spec.SetField(partnershipreport.FieldReportURL, field.TypeString, value)
	}
	if _u.mutation.ReportURLCleared() {
		_spec.ClearField(partnershipreport.FieldReportURL, field.TypeString)
	}
	if value, ok := _u.mutation.PresentationURL(); ok {
		_spec.SetField(partnershipreport.FieldPresentationURL, field.TypeString, value)
	}
	if _u.mutation.PresentationURLCleared() {
		_spec.ClearField(partnershipreport.FieldPresentationURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartnershipReport{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershipreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
