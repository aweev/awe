// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramParticipant is the model entity for the ProgramParticipant schema.
type ProgramParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// EnrollmentDate holds the value of the "enrollment_date" field.
	EnrollmentDate time.Time `json:"enrollment_date,omitempty"`
	// CompletionDate holds the value of the "completion_date" field.
	CompletionDate time.Time `json:"completion_date,omitempty"`
	// Outcomes holds the value of the "outcomes" field.
	Outcomes map[string]interface{} `json:"outcomes,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramParticipantQuery when eager-loading is set.
	Edges                ProgramParticipantEdges `json:"edges"`
	program_participants *int
	user_participant_in  *int
	selectValues         sql.SelectValues
}

// ProgramParticipantEdges holds the relations/edges for other nodes in the graph.
type ProgramParticipantEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramParticipantEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programparticipant.FieldOutcomes:
			values[i] = new([]byte)
		case programparticipant.FieldID:
			values[i] = new(sql.NullInt64)
		case programparticipant.FieldStatus, programparticipant.FieldNotes:
			values[i] = new(sql.NullString)
		case programparticipant.FieldEnrollmentDate, programparticipant.FieldCompletionDate, programparticipant.FieldCreatedAt, programparticipant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case programparticipant.ForeignKeys[0]: // program_participants
			values[i] = new(sql.NullInt64)
		case programparticipant.ForeignKeys[1]: // user_participant_in
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramParticipant fields.
func (_m *ProgramParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programparticipant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case programparticipant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case programparticipant.FieldEnrollmentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field enrollment_date", values[i])
			} else if value.Valid {
				_m.EnrollmentDate = value.Time
			}
		case programparticipant.FieldCompletionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completion_date", values[i])
			} else if value.Valid {
				_m.CompletionDate = value.Time
			}
		case programparticipant.FieldOutcomes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field outcomes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Outcomes); err != nil {
					return fmt.Errorf("unmarshal field outcomes: %w", err)
				}
			}
		case programparticipant.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				_m.Notes = value.String
			}
		case programparticipant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case programparticipant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case programparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_participants", value)
			} else if value.Valid {
				_m.program_participants = new(int)
				*_m.program_participants = int(value.Int64)
			}
		case programparticipant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_participant_in", value)
			} else if value.Valid {
				_m.user_participant_in = new(int)
				*_m.user_participant_in = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramParticipant.
// This includes values selected through modifiers, order, etc.
func (_m *ProgramParticipant) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the ProgramParticipant entity.
func (_m *ProgramParticipant) QueryProgram() *ProgramQuery {
	return NewProgramParticipantClient(_m.config).QueryProgram(_m)
}

// QueryUser queries the "user" edge of the ProgramParticipant entity.
func (_m *ProgramParticipant) QueryUser() *UserQuery {
	return NewProgramParticipantClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this ProgramParticipant.
// Note that you need to call ProgramParticipant.Unwrap() before calling this method if this ProgramParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProgramParticipant) Update() *ProgramParticipantUpdateOne {
	return NewProgramParticipantClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProgramParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProgramParticipant) Unwrap() *ProgramParticipant {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramParticipant is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProgramParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("enrollment_date=")
	builder.WriteString(_m.EnrollmentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completion_date=")
	builder.WriteString(_m.CompletionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("outcomes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Outcomes))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(_m.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProgramParticipants is a parsable slice of ProgramParticipant.
type ProgramParticipants []*ProgramParticipant
