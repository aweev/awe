// Code generated by ent, DO NOT EDIT.

package agenda

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the agenda type in the database.
	Label = "agenda"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeMentorshipSession holds the string denoting the mentorship_session edge name in mutations.
	EdgeMentorshipSession = "mentorship_session"
	// Table holds the table name of the agenda in the database.
	Table = "agendas"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "agendas"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_agenda"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "agenda_items"
	// ItemsInverseTable is the table name for the AgendaItem entity.
	// It exists in this package in order to avoid circular dependency with the "agendaitem" package.
	ItemsInverseTable = "agenda_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "agenda_items"
	// MentorshipSessionTable is the table that holds the mentorship_session relation/edge.
	MentorshipSessionTable = "agendas"
	// MentorshipSessionInverseTable is the table name for the MentorshipSession entity.
	// It exists in this package in order to avoid circular dependency with the "mentorshipsession" package.
	MentorshipSessionInverseTable = "mentorship_sessions"
	// MentorshipSessionColumn is the table column denoting the mentorship_session relation/edge.
	MentorshipSessionColumn = "mentorship_session_agenda"
)

// Columns holds all SQL columns for agenda fields.
var Columns = []string{
	FieldID,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "agendas"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_agenda",
	"mentorship_session_agenda",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the Agenda queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMentorshipSessionField orders the results by mentorship_session field.
func ByMentorshipSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorshipSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EventTable, EventColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
func newMentorshipSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorshipSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, MentorshipSessionTable, MentorshipSessionColumn),
	)
}
