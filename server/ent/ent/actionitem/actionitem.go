// Code generated by ent, DO NOT EDIT.

package actionitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the actionitem type in the database.
	Label = "action_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// EdgeAgendaItem holds the string denoting the agenda_item edge name in mutations.
	EdgeAgendaItem = "agenda_item"
	// Table holds the table name of the actionitem in the database.
	Table = "action_items"
	// AgendaItemTable is the table that holds the agenda_item relation/edge.
	AgendaItemTable = "action_items"
	// AgendaItemInverseTable is the table name for the AgendaItem entity.
	// It exists in this package in order to avoid circular dependency with the "agendaitem" package.
	AgendaItemInverseTable = "agenda_items"
	// AgendaItemColumn is the table column denoting the agenda_item relation/edge.
	AgendaItemColumn = "agenda_item_action_items"
)

// Columns holds all SQL columns for actionitem fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldOwnerID,
	FieldDueDate,
	FieldStatus,
	FieldCreatedAt,
	FieldCompletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "action_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agenda_item_action_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ActionItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByAgendaItemField orders the results by agenda_item field.
func ByAgendaItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgendaItemStep(), sql.OrderByField(field, opts...))
	}
}
func newAgendaItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgendaItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgendaItemTable, AgendaItemColumn),
	)
}
