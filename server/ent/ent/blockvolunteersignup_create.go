// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockvolunteersignup"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockVolunteerSignupCreate is the builder for creating a BlockVolunteerSignup entity.
type BlockVolunteerSignupCreate struct {
	config
	mutation *BlockVolunteerSignupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockVolunteerSignupCreate) SetInternalName(v string) *BlockVolunteerSignupCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockVolunteerSignupCreate) SetTitle(v map[string]string) *BlockVolunteerSignupCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockVolunteerSignupCreate) SetDescription(v map[string]string) *BlockVolunteerSignupCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetShowSkillsInput sets the "show_skills_input" field.
func (_c *BlockVolunteerSignupCreate) SetShowSkillsInput(v bool) *BlockVolunteerSignupCreate {
	_c.mutation.SetShowSkillsInput(v)
	return _c
}

// SetNillableShowSkillsInput sets the "show_skills_input" field if the given value is not nil.
func (_c *BlockVolunteerSignupCreate) SetNillableShowSkillsInput(v *bool) *BlockVolunteerSignupCreate {
	if v != nil {
		_c.SetShowSkillsInput(*v)
	}
	return _c
}

// SetShowAvailability sets the "show_availability" field.
func (_c *BlockVolunteerSignupCreate) SetShowAvailability(v bool) *BlockVolunteerSignupCreate {
	_c.mutation.SetShowAvailability(v)
	return _c
}

// SetNillableShowAvailability sets the "show_availability" field if the given value is not nil.
func (_c *BlockVolunteerSignupCreate) SetNillableShowAvailability(v *bool) *BlockVolunteerSignupCreate {
	if v != nil {
		_c.SetShowAvailability(*v)
	}
	return _c
}

// SetRequireBackground sets the "require_background" field.
func (_c *BlockVolunteerSignupCreate) SetRequireBackground(v bool) *BlockVolunteerSignupCreate {
	_c.mutation.SetRequireBackground(v)
	return _c
}

// SetNillableRequireBackground sets the "require_background" field if the given value is not nil.
func (_c *BlockVolunteerSignupCreate) SetNillableRequireBackground(v *bool) *BlockVolunteerSignupCreate {
	if v != nil {
		_c.SetRequireBackground(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockVolunteerSignupCreate) SetCreatedAt(v time.Time) *BlockVolunteerSignupCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockVolunteerSignupCreate) SetNillableCreatedAt(v *time.Time) *BlockVolunteerSignupCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockVolunteerSignupCreate) SetUpdatedAt(v time.Time) *BlockVolunteerSignupCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockVolunteerSignupCreate) SetNillableUpdatedAt(v *time.Time) *BlockVolunteerSignupCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockVolunteerSignupCreate) SetContentBlockID(id int) *BlockVolunteerSignupCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockVolunteerSignupCreate) SetContentBlock(v *ContentBlock) *BlockVolunteerSignupCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockVolunteerSignupMutation object of the builder.
func (_c *BlockVolunteerSignupCreate) Mutation() *BlockVolunteerSignupMutation {
	return _c.mutation
}

// Save creates the BlockVolunteerSignup in the database.
func (_c *BlockVolunteerSignupCreate) Save(ctx context.Context) (*BlockVolunteerSignup, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockVolunteerSignupCreate) SaveX(ctx context.Context) *BlockVolunteerSignup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockVolunteerSignupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockVolunteerSignupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockVolunteerSignupCreate) defaults() {
	if _, ok := _c.mutation.ShowSkillsInput(); !ok {
		v := blockvolunteersignup.DefaultShowSkillsInput
		_c.mutation.SetShowSkillsInput(v)
	}
	if _, ok := _c.mutation.ShowAvailability(); !ok {
		v := blockvolunteersignup.DefaultShowAvailability
		_c.mutation.SetShowAvailability(v)
	}
	if _, ok := _c.mutation.RequireBackground(); !ok {
		v := blockvolunteersignup.DefaultRequireBackground
		_c.mutation.SetRequireBackground(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockvolunteersignup.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockvolunteersignup.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockVolunteerSignupCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockVolunteerSignup.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockVolunteerSignup.title"`)}
	}
	if _, ok := _c.mutation.ShowSkillsInput(); !ok {
		return &ValidationError{Name: "show_skills_input", err: errors.New(`ent: missing required field "BlockVolunteerSignup.show_skills_input"`)}
	}
	if _, ok := _c.mutation.ShowAvailability(); !ok {
		return &ValidationError{Name: "show_availability", err: errors.New(`ent: missing required field "BlockVolunteerSignup.show_availability"`)}
	}
	if _, ok := _c.mutation.RequireBackground(); !ok {
		return &ValidationError{Name: "require_background", err: errors.New(`ent: missing required field "BlockVolunteerSignup.require_background"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockVolunteerSignup.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockVolunteerSignup.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockVolunteerSignup.content_block"`)}
	}
	return nil
}

func (_c *BlockVolunteerSignupCreate) sqlSave(ctx context.Context) (*BlockVolunteerSignup, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockVolunteerSignupCreate) createSpec() (*BlockVolunteerSignup, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockVolunteerSignup{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockvolunteersignup.Table, sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockvolunteersignup.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockvolunteersignup.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockvolunteersignup.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ShowSkillsInput(); ok {
		_spec.SetField(blockvolunteersignup.FieldShowSkillsInput, field.TypeBool, value)
		_node.ShowSkillsInput = value
	}
	if value, ok := _c.mutation.ShowAvailability(); ok {
		_spec.SetField(blockvolunteersignup.FieldShowAvailability, field.TypeBool, value)
		_node.ShowAvailability = value
	}
	if value, ok := _c.mutation.RequireBackground(); ok {
		_spec.SetField(blockvolunteersignup.FieldRequireBackground, field.TypeBool, value)
		_node.RequireBackground = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockvolunteersignup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockvolunteersignup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvolunteersignup.ContentBlockTable,
			Columns: []string{blockvolunteersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_volunteer_signup = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockVolunteerSignup.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockVolunteerSignupUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockVolunteerSignupCreate) OnConflict(opts ...sql.ConflictOption) *BlockVolunteerSignupUpsertOne {
	_c.conflict = opts
	return &BlockVolunteerSignupUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockVolunteerSignupCreate) OnConflictColumns(columns ...string) *BlockVolunteerSignupUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockVolunteerSignupUpsertOne{
		create: _c,
	}
}

type (
	// BlockVolunteerSignupUpsertOne is the builder for "upsert"-ing
	//  one BlockVolunteerSignup node.
	BlockVolunteerSignupUpsertOne struct {
		create *BlockVolunteerSignupCreate
	}

	// BlockVolunteerSignupUpsert is the "OnConflict" setter.
	BlockVolunteerSignupUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockVolunteerSignupUpsert) SetInternalName(v string) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateInternalName() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockVolunteerSignupUpsert) SetTitle(v map[string]string) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateTitle() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockVolunteerSignupUpsert) SetDescription(v map[string]string) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateDescription() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVolunteerSignupUpsert) ClearDescription() *BlockVolunteerSignupUpsert {
	u.SetNull(blockvolunteersignup.FieldDescription)
	return u
}

// SetShowSkillsInput sets the "show_skills_input" field.
func (u *BlockVolunteerSignupUpsert) SetShowSkillsInput(v bool) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldShowSkillsInput, v)
	return u
}

// UpdateShowSkillsInput sets the "show_skills_input" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateShowSkillsInput() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldShowSkillsInput)
	return u
}

// SetShowAvailability sets the "show_availability" field.
func (u *BlockVolunteerSignupUpsert) SetShowAvailability(v bool) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldShowAvailability, v)
	return u
}

// UpdateShowAvailability sets the "show_availability" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateShowAvailability() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldShowAvailability)
	return u
}

// SetRequireBackground sets the "require_background" field.
func (u *BlockVolunteerSignupUpsert) SetRequireBackground(v bool) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldRequireBackground, v)
	return u
}

// UpdateRequireBackground sets the "require_background" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateRequireBackground() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldRequireBackground)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVolunteerSignupUpsert) SetUpdatedAt(v time.Time) *BlockVolunteerSignupUpsert {
	u.Set(blockvolunteersignup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsert) UpdateUpdatedAt() *BlockVolunteerSignupUpsert {
	u.SetExcluded(blockvolunteersignup.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockVolunteerSignupUpsertOne) UpdateNewValues() *BlockVolunteerSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockvolunteersignup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockVolunteerSignupUpsertOne) Ignore() *BlockVolunteerSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockVolunteerSignupUpsertOne) DoNothing() *BlockVolunteerSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockVolunteerSignupCreate.OnConflict
// documentation for more info.
func (u *BlockVolunteerSignupUpsertOne) Update(set func(*BlockVolunteerSignupUpsert)) *BlockVolunteerSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockVolunteerSignupUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockVolunteerSignupUpsertOne) SetInternalName(v string) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateInternalName() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockVolunteerSignupUpsertOne) SetTitle(v map[string]string) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateTitle() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockVolunteerSignupUpsertOne) SetDescription(v map[string]string) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateDescription() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVolunteerSignupUpsertOne) ClearDescription() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.ClearDescription()
	})
}

// SetShowSkillsInput sets the "show_skills_input" field.
func (u *BlockVolunteerSignupUpsertOne) SetShowSkillsInput(v bool) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetShowSkillsInput(v)
	})
}

// UpdateShowSkillsInput sets the "show_skills_input" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateShowSkillsInput() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateShowSkillsInput()
	})
}

// SetShowAvailability sets the "show_availability" field.
func (u *BlockVolunteerSignupUpsertOne) SetShowAvailability(v bool) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetShowAvailability(v)
	})
}

// UpdateShowAvailability sets the "show_availability" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateShowAvailability() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateShowAvailability()
	})
}

// SetRequireBackground sets the "require_background" field.
func (u *BlockVolunteerSignupUpsertOne) SetRequireBackground(v bool) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetRequireBackground(v)
	})
}

// UpdateRequireBackground sets the "require_background" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateRequireBackground() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateRequireBackground()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVolunteerSignupUpsertOne) SetUpdatedAt(v time.Time) *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertOne) UpdateUpdatedAt() *BlockVolunteerSignupUpsertOne {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockVolunteerSignupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockVolunteerSignupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockVolunteerSignupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockVolunteerSignupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockVolunteerSignupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockVolunteerSignupCreateBulk is the builder for creating many BlockVolunteerSignup entities in bulk.
type BlockVolunteerSignupCreateBulk struct {
	config
	err      error
	builders []*BlockVolunteerSignupCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockVolunteerSignup entities in the database.
func (_c *BlockVolunteerSignupCreateBulk) Save(ctx context.Context) ([]*BlockVolunteerSignup, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockVolunteerSignup, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockVolunteerSignupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockVolunteerSignupCreateBulk) SaveX(ctx context.Context) []*BlockVolunteerSignup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockVolunteerSignupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockVolunteerSignupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockVolunteerSignup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockVolunteerSignupUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockVolunteerSignupCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockVolunteerSignupUpsertBulk {
	_c.conflict = opts
	return &BlockVolunteerSignupUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockVolunteerSignupCreateBulk) OnConflictColumns(columns ...string) *BlockVolunteerSignupUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockVolunteerSignupUpsertBulk{
		create: _c,
	}
}

// BlockVolunteerSignupUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockVolunteerSignup nodes.
type BlockVolunteerSignupUpsertBulk struct {
	create *BlockVolunteerSignupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockVolunteerSignupUpsertBulk) UpdateNewValues() *BlockVolunteerSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockvolunteersignup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockVolunteerSignup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockVolunteerSignupUpsertBulk) Ignore() *BlockVolunteerSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockVolunteerSignupUpsertBulk) DoNothing() *BlockVolunteerSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockVolunteerSignupCreateBulk.OnConflict
// documentation for more info.
func (u *BlockVolunteerSignupUpsertBulk) Update(set func(*BlockVolunteerSignupUpsert)) *BlockVolunteerSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockVolunteerSignupUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockVolunteerSignupUpsertBulk) SetInternalName(v string) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateInternalName() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockVolunteerSignupUpsertBulk) SetTitle(v map[string]string) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateTitle() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockVolunteerSignupUpsertBulk) SetDescription(v map[string]string) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateDescription() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVolunteerSignupUpsertBulk) ClearDescription() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.ClearDescription()
	})
}

// SetShowSkillsInput sets the "show_skills_input" field.
func (u *BlockVolunteerSignupUpsertBulk) SetShowSkillsInput(v bool) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetShowSkillsInput(v)
	})
}

// UpdateShowSkillsInput sets the "show_skills_input" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateShowSkillsInput() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateShowSkillsInput()
	})
}

// SetShowAvailability sets the "show_availability" field.
func (u *BlockVolunteerSignupUpsertBulk) SetShowAvailability(v bool) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetShowAvailability(v)
	})
}

// UpdateShowAvailability sets the "show_availability" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateShowAvailability() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateShowAvailability()
	})
}

// SetRequireBackground sets the "require_background" field.
func (u *BlockVolunteerSignupUpsertBulk) SetRequireBackground(v bool) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetRequireBackground(v)
	})
}

// UpdateRequireBackground sets the "require_background" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateRequireBackground() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateRequireBackground()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVolunteerSignupUpsertBulk) SetUpdatedAt(v time.Time) *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVolunteerSignupUpsertBulk) UpdateUpdatedAt() *BlockVolunteerSignupUpsertBulk {
	return u.Update(func(s *BlockVolunteerSignupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockVolunteerSignupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockVolunteerSignupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockVolunteerSignupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockVolunteerSignupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
