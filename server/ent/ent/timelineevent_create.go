// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/timelineevent"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimelineEventCreate is the builder for creating a TimelineEvent entity.
type TimelineEventCreate struct {
	config
	mutation *TimelineEventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *TimelineEventCreate) SetOrder(v int) *TimelineEventCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetDate sets the "date" field.
func (_c *TimelineEventCreate) SetDate(v string) *TimelineEventCreate {
	_c.mutation.SetDate(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *TimelineEventCreate) SetTitle(v map[string]string) *TimelineEventCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *TimelineEventCreate) SetDescription(v map[string]string) *TimelineEventCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *TimelineEventCreate) SetImageURL(v string) *TimelineEventCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *TimelineEventCreate) SetNillableImageURL(v *string) *TimelineEventCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the BlockTimeline entity by ID.
func (_c *TimelineEventCreate) SetBlockID(id int) *TimelineEventCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockTimeline entity.
func (_c *TimelineEventCreate) SetBlock(v *BlockTimeline) *TimelineEventCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the TimelineEventMutation object of the builder.
func (_c *TimelineEventCreate) Mutation() *TimelineEventMutation {
	return _c.mutation
}

// Save creates the TimelineEvent in the database.
func (_c *TimelineEventCreate) Save(ctx context.Context) (*TimelineEvent, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TimelineEventCreate) SaveX(ctx context.Context) *TimelineEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TimelineEventCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TimelineEventCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TimelineEventCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TimelineEvent.order"`)}
	}
	if _, ok := _c.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "TimelineEvent.date"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TimelineEvent.title"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "TimelineEvent.block"`)}
	}
	return nil
}

func (_c *TimelineEventCreate) sqlSave(ctx context.Context) (*TimelineEvent, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TimelineEventCreate) createSpec() (*TimelineEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &TimelineEvent{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(timelineevent.Table, sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(timelineevent.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Date(); ok {
		_spec.SetField(timelineevent.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(timelineevent.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(timelineevent.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(timelineevent.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_timeline_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimelineEvent.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimelineEventUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TimelineEventCreate) OnConflict(opts ...sql.ConflictOption) *TimelineEventUpsertOne {
	_c.conflict = opts
	return &TimelineEventUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TimelineEventCreate) OnConflictColumns(columns ...string) *TimelineEventUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TimelineEventUpsertOne{
		create: _c,
	}
}

type (
	// TimelineEventUpsertOne is the builder for "upsert"-ing
	//  one TimelineEvent node.
	TimelineEventUpsertOne struct {
		create *TimelineEventCreate
	}

	// TimelineEventUpsert is the "OnConflict" setter.
	TimelineEventUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *TimelineEventUpsert) SetOrder(v int) *TimelineEventUpsert {
	u.Set(timelineevent.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TimelineEventUpsert) UpdateOrder() *TimelineEventUpsert {
	u.SetExcluded(timelineevent.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *TimelineEventUpsert) AddOrder(v int) *TimelineEventUpsert {
	u.Add(timelineevent.FieldOrder, v)
	return u
}

// SetDate sets the "date" field.
func (u *TimelineEventUpsert) SetDate(v string) *TimelineEventUpsert {
	u.Set(timelineevent.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TimelineEventUpsert) UpdateDate() *TimelineEventUpsert {
	u.SetExcluded(timelineevent.FieldDate)
	return u
}

// SetTitle sets the "title" field.
func (u *TimelineEventUpsert) SetTitle(v map[string]string) *TimelineEventUpsert {
	u.Set(timelineevent.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TimelineEventUpsert) UpdateTitle() *TimelineEventUpsert {
	u.SetExcluded(timelineevent.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *TimelineEventUpsert) SetDescription(v map[string]string) *TimelineEventUpsert {
	u.Set(timelineevent.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimelineEventUpsert) UpdateDescription() *TimelineEventUpsert {
	u.SetExcluded(timelineevent.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TimelineEventUpsert) ClearDescription() *TimelineEventUpsert {
	u.SetNull(timelineevent.FieldDescription)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TimelineEventUpsert) SetImageURL(v string) *TimelineEventUpsert {
	u.Set(timelineevent.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TimelineEventUpsert) UpdateImageURL() *TimelineEventUpsert {
	u.SetExcluded(timelineevent.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TimelineEventUpsert) ClearImageURL() *TimelineEventUpsert {
	u.SetNull(timelineevent.FieldImageURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimelineEventUpsertOne) UpdateNewValues() *TimelineEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TimelineEventUpsertOne) Ignore() *TimelineEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimelineEventUpsertOne) DoNothing() *TimelineEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimelineEventCreate.OnConflict
// documentation for more info.
func (u *TimelineEventUpsertOne) Update(set func(*TimelineEventUpsert)) *TimelineEventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimelineEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TimelineEventUpsertOne) SetOrder(v int) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TimelineEventUpsertOne) AddOrder(v int) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TimelineEventUpsertOne) UpdateOrder() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateOrder()
	})
}

// SetDate sets the "date" field.
func (u *TimelineEventUpsertOne) SetDate(v string) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TimelineEventUpsertOne) UpdateDate() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateDate()
	})
}

// SetTitle sets the "title" field.
func (u *TimelineEventUpsertOne) SetTitle(v map[string]string) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TimelineEventUpsertOne) UpdateTitle() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TimelineEventUpsertOne) SetDescription(v map[string]string) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimelineEventUpsertOne) UpdateDescription() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TimelineEventUpsertOne) ClearDescription() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.ClearDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TimelineEventUpsertOne) SetImageURL(v string) *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TimelineEventUpsertOne) UpdateImageURL() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TimelineEventUpsertOne) ClearImageURL() *TimelineEventUpsertOne {
	return u.Update(func(s *TimelineEventUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *TimelineEventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimelineEventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimelineEventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TimelineEventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TimelineEventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TimelineEventCreateBulk is the builder for creating many TimelineEvent entities in bulk.
type TimelineEventCreateBulk struct {
	config
	err      error
	builders []*TimelineEventCreate
	conflict []sql.ConflictOption
}

// Save creates the TimelineEvent entities in the database.
func (_c *TimelineEventCreateBulk) Save(ctx context.Context) ([]*TimelineEvent, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TimelineEvent, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimelineEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TimelineEventCreateBulk) SaveX(ctx context.Context) []*TimelineEvent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TimelineEventCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TimelineEventCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TimelineEvent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimelineEventUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TimelineEventCreateBulk) OnConflict(opts ...sql.ConflictOption) *TimelineEventUpsertBulk {
	_c.conflict = opts
	return &TimelineEventUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TimelineEventCreateBulk) OnConflictColumns(columns ...string) *TimelineEventUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TimelineEventUpsertBulk{
		create: _c,
	}
}

// TimelineEventUpsertBulk is the builder for "upsert"-ing
// a bulk of TimelineEvent nodes.
type TimelineEventUpsertBulk struct {
	create *TimelineEventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimelineEventUpsertBulk) UpdateNewValues() *TimelineEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TimelineEvent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TimelineEventUpsertBulk) Ignore() *TimelineEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimelineEventUpsertBulk) DoNothing() *TimelineEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimelineEventCreateBulk.OnConflict
// documentation for more info.
func (u *TimelineEventUpsertBulk) Update(set func(*TimelineEventUpsert)) *TimelineEventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimelineEventUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TimelineEventUpsertBulk) SetOrder(v int) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TimelineEventUpsertBulk) AddOrder(v int) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TimelineEventUpsertBulk) UpdateOrder() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateOrder()
	})
}

// SetDate sets the "date" field.
func (u *TimelineEventUpsertBulk) SetDate(v string) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *TimelineEventUpsertBulk) UpdateDate() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateDate()
	})
}

// SetTitle sets the "title" field.
func (u *TimelineEventUpsertBulk) SetTitle(v map[string]string) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TimelineEventUpsertBulk) UpdateTitle() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *TimelineEventUpsertBulk) SetDescription(v map[string]string) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TimelineEventUpsertBulk) UpdateDescription() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TimelineEventUpsertBulk) ClearDescription() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.ClearDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TimelineEventUpsertBulk) SetImageURL(v string) *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TimelineEventUpsertBulk) UpdateImageURL() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TimelineEventUpsertBulk) ClearImageURL() *TimelineEventUpsertBulk {
	return u.Update(func(s *TimelineEventUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *TimelineEventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TimelineEventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimelineEventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimelineEventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
