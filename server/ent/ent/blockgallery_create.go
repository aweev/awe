// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/galleryimage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockGalleryCreate is the builder for creating a BlockGallery entity.
type BlockGalleryCreate struct {
	config
	mutation *BlockGalleryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockGalleryCreate) SetInternalName(v string) *BlockGalleryCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockGalleryCreate) SetTitle(v map[string]string) *BlockGalleryCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockGalleryCreate) SetDescription(v map[string]string) *BlockGalleryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *BlockGalleryCreate) SetLayout(v blockgallery.Layout) *BlockGalleryCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableLayout(v *blockgallery.Layout) *BlockGalleryCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetColumns sets the "columns" field.
func (_c *BlockGalleryCreate) SetColumns(v int) *BlockGalleryCreate {
	_c.mutation.SetColumns(v)
	return _c
}

// SetNillableColumns sets the "columns" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableColumns(v *int) *BlockGalleryCreate {
	if v != nil {
		_c.SetColumns(*v)
	}
	return _c
}

// SetSpacing sets the "spacing" field.
func (_c *BlockGalleryCreate) SetSpacing(v string) *BlockGalleryCreate {
	_c.mutation.SetSpacing(v)
	return _c
}

// SetNillableSpacing sets the "spacing" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableSpacing(v *string) *BlockGalleryCreate {
	if v != nil {
		_c.SetSpacing(*v)
	}
	return _c
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_c *BlockGalleryCreate) SetAspectRatio(v string) *BlockGalleryCreate {
	_c.mutation.SetAspectRatio(v)
	return _c
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableAspectRatio(v *string) *BlockGalleryCreate {
	if v != nil {
		_c.SetAspectRatio(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockGalleryCreate) SetCreatedAt(v time.Time) *BlockGalleryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableCreatedAt(v *time.Time) *BlockGalleryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockGalleryCreate) SetUpdatedAt(v time.Time) *BlockGalleryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockGalleryCreate) SetNillableUpdatedAt(v *time.Time) *BlockGalleryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockGalleryCreate) SetContentBlockID(id int) *BlockGalleryCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockGalleryCreate) SetContentBlock(v *ContentBlock) *BlockGalleryCreate {
	return _c.SetContentBlockID(v.ID)
}

// AddImageIDs adds the "images" edge to the GalleryImage entity by IDs.
func (_c *BlockGalleryCreate) AddImageIDs(ids ...int) *BlockGalleryCreate {
	_c.mutation.AddImageIDs(ids...)
	return _c
}

// AddImages adds the "images" edges to the GalleryImage entity.
func (_c *BlockGalleryCreate) AddImages(v ...*GalleryImage) *BlockGalleryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddImageIDs(ids...)
}

// Mutation returns the BlockGalleryMutation object of the builder.
func (_c *BlockGalleryCreate) Mutation() *BlockGalleryMutation {
	return _c.mutation
}

// Save creates the BlockGallery in the database.
func (_c *BlockGalleryCreate) Save(ctx context.Context) (*BlockGallery, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockGalleryCreate) SaveX(ctx context.Context) *BlockGallery {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockGalleryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockGalleryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockGalleryCreate) defaults() {
	if _, ok := _c.mutation.Layout(); !ok {
		v := blockgallery.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.Columns(); !ok {
		v := blockgallery.DefaultColumns
		_c.mutation.SetColumns(v)
	}
	if _, ok := _c.mutation.Spacing(); !ok {
		v := blockgallery.DefaultSpacing
		_c.mutation.SetSpacing(v)
	}
	if _, ok := _c.mutation.AspectRatio(); !ok {
		v := blockgallery.DefaultAspectRatio
		_c.mutation.SetAspectRatio(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockgallery.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockgallery.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockGalleryCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockGallery.internal_name"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "BlockGallery.layout"`)}
	}
	if v, ok := _c.mutation.Layout(); ok {
		if err := blockgallery.LayoutValidator(v); err != nil {
			return &ValidationError{Name: "layout", err: fmt.Errorf(`ent: validator failed for field "BlockGallery.layout": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Columns(); !ok {
		return &ValidationError{Name: "columns", err: errors.New(`ent: missing required field "BlockGallery.columns"`)}
	}
	if _, ok := _c.mutation.Spacing(); !ok {
		return &ValidationError{Name: "spacing", err: errors.New(`ent: missing required field "BlockGallery.spacing"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockGallery.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockGallery.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockGallery.content_block"`)}
	}
	return nil
}

func (_c *BlockGalleryCreate) sqlSave(ctx context.Context) (*BlockGallery, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockGalleryCreate) createSpec() (*BlockGallery, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockGallery{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockgallery.Table, sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockgallery.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockgallery.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockgallery.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(blockgallery.FieldLayout, field.TypeEnum, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.Columns(); ok {
		_spec.SetField(blockgallery.FieldColumns, field.TypeInt, value)
		_node.Columns = value
	}
	if value, ok := _c.mutation.Spacing(); ok {
		_spec.SetField(blockgallery.FieldSpacing, field.TypeString, value)
		_node.Spacing = value
	}
	if value, ok := _c.mutation.AspectRatio(); ok {
		_spec.SetField(blockgallery.FieldAspectRatio, field.TypeString, value)
		_node.AspectRatio = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockgallery.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockgallery.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_gallery = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockGallery.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockGalleryUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockGalleryCreate) OnConflict(opts ...sql.ConflictOption) *BlockGalleryUpsertOne {
	_c.conflict = opts
	return &BlockGalleryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockGalleryCreate) OnConflictColumns(columns ...string) *BlockGalleryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockGalleryUpsertOne{
		create: _c,
	}
}

type (
	// BlockGalleryUpsertOne is the builder for "upsert"-ing
	//  one BlockGallery node.
	BlockGalleryUpsertOne struct {
		create *BlockGalleryCreate
	}

	// BlockGalleryUpsert is the "OnConflict" setter.
	BlockGalleryUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockGalleryUpsert) SetInternalName(v string) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateInternalName() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockGalleryUpsert) SetTitle(v map[string]string) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateTitle() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *BlockGalleryUpsert) ClearTitle() *BlockGalleryUpsert {
	u.SetNull(blockgallery.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockGalleryUpsert) SetDescription(v map[string]string) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateDescription() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockGalleryUpsert) ClearDescription() *BlockGalleryUpsert {
	u.SetNull(blockgallery.FieldDescription)
	return u
}

// SetLayout sets the "layout" field.
func (u *BlockGalleryUpsert) SetLayout(v blockgallery.Layout) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateLayout() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldLayout)
	return u
}

// SetColumns sets the "columns" field.
func (u *BlockGalleryUpsert) SetColumns(v int) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldColumns, v)
	return u
}

// UpdateColumns sets the "columns" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateColumns() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldColumns)
	return u
}

// AddColumns adds v to the "columns" field.
func (u *BlockGalleryUpsert) AddColumns(v int) *BlockGalleryUpsert {
	u.Add(blockgallery.FieldColumns, v)
	return u
}

// SetSpacing sets the "spacing" field.
func (u *BlockGalleryUpsert) SetSpacing(v string) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldSpacing, v)
	return u
}

// UpdateSpacing sets the "spacing" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateSpacing() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldSpacing)
	return u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockGalleryUpsert) SetAspectRatio(v string) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldAspectRatio, v)
	return u
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateAspectRatio() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldAspectRatio)
	return u
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (u *BlockGalleryUpsert) ClearAspectRatio() *BlockGalleryUpsert {
	u.SetNull(blockgallery.FieldAspectRatio)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockGalleryUpsert) SetUpdatedAt(v time.Time) *BlockGalleryUpsert {
	u.Set(blockgallery.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockGalleryUpsert) UpdateUpdatedAt() *BlockGalleryUpsert {
	u.SetExcluded(blockgallery.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockGalleryUpsertOne) UpdateNewValues() *BlockGalleryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockgallery.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockGalleryUpsertOne) Ignore() *BlockGalleryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockGalleryUpsertOne) DoNothing() *BlockGalleryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockGalleryCreate.OnConflict
// documentation for more info.
func (u *BlockGalleryUpsertOne) Update(set func(*BlockGalleryUpsert)) *BlockGalleryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockGalleryUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockGalleryUpsertOne) SetInternalName(v string) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateInternalName() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockGalleryUpsertOne) SetTitle(v map[string]string) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateTitle() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockGalleryUpsertOne) ClearTitle() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockGalleryUpsertOne) SetDescription(v map[string]string) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateDescription() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockGalleryUpsertOne) ClearDescription() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockGalleryUpsertOne) SetLayout(v blockgallery.Layout) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateLayout() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateLayout()
	})
}

// SetColumns sets the "columns" field.
func (u *BlockGalleryUpsertOne) SetColumns(v int) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetColumns(v)
	})
}

// AddColumns adds v to the "columns" field.
func (u *BlockGalleryUpsertOne) AddColumns(v int) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.AddColumns(v)
	})
}

// UpdateColumns sets the "columns" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateColumns() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateColumns()
	})
}

// SetSpacing sets the "spacing" field.
func (u *BlockGalleryUpsertOne) SetSpacing(v string) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetSpacing(v)
	})
}

// UpdateSpacing sets the "spacing" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateSpacing() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateSpacing()
	})
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockGalleryUpsertOne) SetAspectRatio(v string) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetAspectRatio(v)
	})
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateAspectRatio() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateAspectRatio()
	})
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (u *BlockGalleryUpsertOne) ClearAspectRatio() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearAspectRatio()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockGalleryUpsertOne) SetUpdatedAt(v time.Time) *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockGalleryUpsertOne) UpdateUpdatedAt() *BlockGalleryUpsertOne {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockGalleryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockGalleryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockGalleryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockGalleryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockGalleryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockGalleryCreateBulk is the builder for creating many BlockGallery entities in bulk.
type BlockGalleryCreateBulk struct {
	config
	err      error
	builders []*BlockGalleryCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockGallery entities in the database.
func (_c *BlockGalleryCreateBulk) Save(ctx context.Context) ([]*BlockGallery, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockGallery, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockGalleryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockGalleryCreateBulk) SaveX(ctx context.Context) []*BlockGallery {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockGalleryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockGalleryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockGallery.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockGalleryUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockGalleryCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockGalleryUpsertBulk {
	_c.conflict = opts
	return &BlockGalleryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockGalleryCreateBulk) OnConflictColumns(columns ...string) *BlockGalleryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockGalleryUpsertBulk{
		create: _c,
	}
}

// BlockGalleryUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockGallery nodes.
type BlockGalleryUpsertBulk struct {
	create *BlockGalleryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockGalleryUpsertBulk) UpdateNewValues() *BlockGalleryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockgallery.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockGallery.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockGalleryUpsertBulk) Ignore() *BlockGalleryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockGalleryUpsertBulk) DoNothing() *BlockGalleryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockGalleryCreateBulk.OnConflict
// documentation for more info.
func (u *BlockGalleryUpsertBulk) Update(set func(*BlockGalleryUpsert)) *BlockGalleryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockGalleryUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockGalleryUpsertBulk) SetInternalName(v string) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateInternalName() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockGalleryUpsertBulk) SetTitle(v map[string]string) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateTitle() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockGalleryUpsertBulk) ClearTitle() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockGalleryUpsertBulk) SetDescription(v map[string]string) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateDescription() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockGalleryUpsertBulk) ClearDescription() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockGalleryUpsertBulk) SetLayout(v blockgallery.Layout) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateLayout() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateLayout()
	})
}

// SetColumns sets the "columns" field.
func (u *BlockGalleryUpsertBulk) SetColumns(v int) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetColumns(v)
	})
}

// AddColumns adds v to the "columns" field.
func (u *BlockGalleryUpsertBulk) AddColumns(v int) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.AddColumns(v)
	})
}

// UpdateColumns sets the "columns" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateColumns() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateColumns()
	})
}

// SetSpacing sets the "spacing" field.
func (u *BlockGalleryUpsertBulk) SetSpacing(v string) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetSpacing(v)
	})
}

// UpdateSpacing sets the "spacing" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateSpacing() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateSpacing()
	})
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockGalleryUpsertBulk) SetAspectRatio(v string) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetAspectRatio(v)
	})
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateAspectRatio() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateAspectRatio()
	})
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (u *BlockGalleryUpsertBulk) ClearAspectRatio() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.ClearAspectRatio()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockGalleryUpsertBulk) SetUpdatedAt(v time.Time) *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockGalleryUpsertBulk) UpdateUpdatedAt() *BlockGalleryUpsertBulk {
	return u.Update(func(s *BlockGalleryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockGalleryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockGalleryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockGalleryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockGalleryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
