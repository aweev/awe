// Code generated by ent, DO NOT EDIT.

package hook

import (
	"awe/ent/ent"
	"context"
	"fmt"
)

// The AccordionItemFunc type is an adapter to allow the use of ordinary
// function as AccordionItem mutator.
type AccordionItemFunc func(context.Context, *ent.AccordionItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccordionItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AccordionItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccordionItemMutation", m)
}

// The ActionItemFunc type is an adapter to allow the use of ordinary
// function as ActionItem mutator.
type ActionItemFunc func(context.Context, *ent.ActionItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActionItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActionItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActionItemMutation", m)
}

// The ActivityLogFunc type is an adapter to allow the use of ordinary
// function as ActivityLog mutator.
type ActivityLogFunc func(context.Context, *ent.ActivityLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityLogMutation", m)
}

// The AddressFunc type is an adapter to allow the use of ordinary
// function as Address mutator.
type AddressFunc func(context.Context, *ent.AddressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AddressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AddressMutation", m)
}

// The AgendaFunc type is an adapter to allow the use of ordinary
// function as Agenda mutator.
type AgendaFunc func(context.Context, *ent.AgendaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgendaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AgendaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgendaMutation", m)
}

// The AgendaItemFunc type is an adapter to allow the use of ordinary
// function as AgendaItem mutator.
type AgendaItemFunc func(context.Context, *ent.AgendaItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgendaItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AgendaItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgendaItemMutation", m)
}

// The AnalyticsDashboardFunc type is an adapter to allow the use of ordinary
// function as AnalyticsDashboard mutator.
type AnalyticsDashboardFunc func(context.Context, *ent.AnalyticsDashboardMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AnalyticsDashboardFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AnalyticsDashboardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AnalyticsDashboardMutation", m)
}

// The AnalyticsEventFunc type is an adapter to allow the use of ordinary
// function as AnalyticsEvent mutator.
type AnalyticsEventFunc func(context.Context, *ent.AnalyticsEventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AnalyticsEventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AnalyticsEventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AnalyticsEventMutation", m)
}

// The AppSettingFunc type is an adapter to allow the use of ordinary
// function as AppSetting mutator.
type AppSettingFunc func(context.Context, *ent.AppSettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppSettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AppSettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppSettingMutation", m)
}

// The AuditLogFunc type is an adapter to allow the use of ordinary
// function as AuditLog mutator.
type AuditLogFunc func(context.Context, *ent.AuditLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AuditLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AuditLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AuditLogMutation", m)
}

// The BadgeFunc type is an adapter to allow the use of ordinary
// function as Badge mutator.
type BadgeFunc func(context.Context, *ent.BadgeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BadgeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BadgeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BadgeMutation", m)
}

// The BallotFunc type is an adapter to allow the use of ordinary
// function as Ballot mutator.
type BallotFunc func(context.Context, *ent.BallotMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BallotFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BallotMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BallotMutation", m)
}

// The BlockAccordionFunc type is an adapter to allow the use of ordinary
// function as BlockAccordion mutator.
type BlockAccordionFunc func(context.Context, *ent.BlockAccordionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockAccordionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockAccordionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockAccordionMutation", m)
}

// The BlockContactFormFunc type is an adapter to allow the use of ordinary
// function as BlockContactForm mutator.
type BlockContactFormFunc func(context.Context, *ent.BlockContactFormMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockContactFormFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockContactFormMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockContactFormMutation", m)
}

// The BlockCtaFunc type is an adapter to allow the use of ordinary
// function as BlockCta mutator.
type BlockCtaFunc func(context.Context, *ent.BlockCtaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockCtaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockCtaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockCtaMutation", m)
}

// The BlockDividerFunc type is an adapter to allow the use of ordinary
// function as BlockDivider mutator.
type BlockDividerFunc func(context.Context, *ent.BlockDividerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockDividerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockDividerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockDividerMutation", m)
}

// The BlockDonationFormFunc type is an adapter to allow the use of ordinary
// function as BlockDonationForm mutator.
type BlockDonationFormFunc func(context.Context, *ent.BlockDonationFormMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockDonationFormFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockDonationFormMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockDonationFormMutation", m)
}

// The BlockFaqFunc type is an adapter to allow the use of ordinary
// function as BlockFaq mutator.
type BlockFaqFunc func(context.Context, *ent.BlockFaqMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockFaqFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockFaqMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockFaqMutation", m)
}

// The BlockGalleryFunc type is an adapter to allow the use of ordinary
// function as BlockGallery mutator.
type BlockGalleryFunc func(context.Context, *ent.BlockGalleryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockGalleryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockGalleryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockGalleryMutation", m)
}

// The BlockHeroFunc type is an adapter to allow the use of ordinary
// function as BlockHero mutator.
type BlockHeroFunc func(context.Context, *ent.BlockHeroMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockHeroFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockHeroMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockHeroMutation", m)
}

// The BlockMapFunc type is an adapter to allow the use of ordinary
// function as BlockMap mutator.
type BlockMapFunc func(context.Context, *ent.BlockMapMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockMapFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockMapMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockMapMutation", m)
}

// The BlockNewsletterSignupFunc type is an adapter to allow the use of ordinary
// function as BlockNewsletterSignup mutator.
type BlockNewsletterSignupFunc func(context.Context, *ent.BlockNewsletterSignupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockNewsletterSignupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockNewsletterSignupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockNewsletterSignupMutation", m)
}

// The BlockPartnerLogosFunc type is an adapter to allow the use of ordinary
// function as BlockPartnerLogos mutator.
type BlockPartnerLogosFunc func(context.Context, *ent.BlockPartnerLogosMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockPartnerLogosFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockPartnerLogosMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockPartnerLogosMutation", m)
}

// The BlockProgramCardsFunc type is an adapter to allow the use of ordinary
// function as BlockProgramCards mutator.
type BlockProgramCardsFunc func(context.Context, *ent.BlockProgramCardsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockProgramCardsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockProgramCardsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockProgramCardsMutation", m)
}

// The BlockStatsFunc type is an adapter to allow the use of ordinary
// function as BlockStats mutator.
type BlockStatsFunc func(context.Context, *ent.BlockStatsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockStatsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockStatsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockStatsMutation", m)
}

// The BlockSuccessStoriesFunc type is an adapter to allow the use of ordinary
// function as BlockSuccessStories mutator.
type BlockSuccessStoriesFunc func(context.Context, *ent.BlockSuccessStoriesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockSuccessStoriesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockSuccessStoriesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockSuccessStoriesMutation", m)
}

// The BlockTabsFunc type is an adapter to allow the use of ordinary
// function as BlockTabs mutator.
type BlockTabsFunc func(context.Context, *ent.BlockTabsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockTabsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockTabsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockTabsMutation", m)
}

// The BlockTeamGridFunc type is an adapter to allow the use of ordinary
// function as BlockTeamGrid mutator.
type BlockTeamGridFunc func(context.Context, *ent.BlockTeamGridMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockTeamGridFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockTeamGridMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockTeamGridMutation", m)
}

// The BlockTestimonialsFunc type is an adapter to allow the use of ordinary
// function as BlockTestimonials mutator.
type BlockTestimonialsFunc func(context.Context, *ent.BlockTestimonialsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockTestimonialsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockTestimonialsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockTestimonialsMutation", m)
}

// The BlockTextContentFunc type is an adapter to allow the use of ordinary
// function as BlockTextContent mutator.
type BlockTextContentFunc func(context.Context, *ent.BlockTextContentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockTextContentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockTextContentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockTextContentMutation", m)
}

// The BlockTimelineFunc type is an adapter to allow the use of ordinary
// function as BlockTimeline mutator.
type BlockTimelineFunc func(context.Context, *ent.BlockTimelineMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockTimelineFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockTimelineMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockTimelineMutation", m)
}

// The BlockVideoEmbedFunc type is an adapter to allow the use of ordinary
// function as BlockVideoEmbed mutator.
type BlockVideoEmbedFunc func(context.Context, *ent.BlockVideoEmbedMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockVideoEmbedFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockVideoEmbedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockVideoEmbedMutation", m)
}

// The BlockVolunteerSignupFunc type is an adapter to allow the use of ordinary
// function as BlockVolunteerSignup mutator.
type BlockVolunteerSignupFunc func(context.Context, *ent.BlockVolunteerSignupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockVolunteerSignupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlockVolunteerSignupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockVolunteerSignupMutation", m)
}

// The BrandBenefitFunc type is an adapter to allow the use of ordinary
// function as BrandBenefit mutator.
type BrandBenefitFunc func(context.Context, *ent.BrandBenefitMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BrandBenefitFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BrandBenefitMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BrandBenefitMutation", m)
}

// The BrandConfigFunc type is an adapter to allow the use of ordinary
// function as BrandConfig mutator.
type BrandConfigFunc func(context.Context, *ent.BrandConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BrandConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BrandConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BrandConfigMutation", m)
}

// The ContentBlockFunc type is an adapter to allow the use of ordinary
// function as ContentBlock mutator.
type ContentBlockFunc func(context.Context, *ent.ContentBlockMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContentBlockFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContentBlockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContentBlockMutation", m)
}

// The ConversationFunc type is an adapter to allow the use of ordinary
// function as Conversation mutator.
type ConversationFunc func(context.Context, *ent.ConversationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConversationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConversationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConversationMutation", m)
}

// The ConversationParticipantFunc type is an adapter to allow the use of ordinary
// function as ConversationParticipant mutator.
type ConversationParticipantFunc func(context.Context, *ent.ConversationParticipantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConversationParticipantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConversationParticipantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConversationParticipantMutation", m)
}

// The DashboardWidgetFunc type is an adapter to allow the use of ordinary
// function as DashboardWidget mutator.
type DashboardWidgetFunc func(context.Context, *ent.DashboardWidgetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DashboardWidgetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DashboardWidgetMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DashboardWidgetMutation", m)
}

// The DocumentFunc type is an adapter to allow the use of ordinary
// function as Document mutator.
type DocumentFunc func(context.Context, *ent.DocumentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentMutation", m)
}

// The DocumentCategoryFunc type is an adapter to allow the use of ordinary
// function as DocumentCategory mutator.
type DocumentCategoryFunc func(context.Context, *ent.DocumentCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DocumentCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentCategoryMutation", m)
}

// The DonationFunc type is an adapter to allow the use of ordinary
// function as Donation mutator.
type DonationFunc func(context.Context, *ent.DonationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DonationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DonationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DonationMutation", m)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *ent.EventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventMutation", m)
}

// The EventRegistrationFunc type is an adapter to allow the use of ordinary
// function as EventRegistration mutator.
type EventRegistrationFunc func(context.Context, *ent.EventRegistrationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventRegistrationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EventRegistrationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventRegistrationMutation", m)
}

// The FaqItemFunc type is an adapter to allow the use of ordinary
// function as FaqItem mutator.
type FaqItemFunc func(context.Context, *ent.FaqItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FaqItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FaqItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FaqItemMutation", m)
}

// The FeatureFlagFunc type is an adapter to allow the use of ordinary
// function as FeatureFlag mutator.
type FeatureFlagFunc func(context.Context, *ent.FeatureFlagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeatureFlagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeatureFlagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeatureFlagMutation", m)
}

// The FundraisingCampaignFunc type is an adapter to allow the use of ordinary
// function as FundraisingCampaign mutator.
type FundraisingCampaignFunc func(context.Context, *ent.FundraisingCampaignMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FundraisingCampaignFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FundraisingCampaignMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FundraisingCampaignMutation", m)
}

// The GalleryImageFunc type is an adapter to allow the use of ordinary
// function as GalleryImage mutator.
type GalleryImageFunc func(context.Context, *ent.GalleryImageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GalleryImageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.GalleryImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GalleryImageMutation", m)
}

// The GeneratedReportFunc type is an adapter to allow the use of ordinary
// function as GeneratedReport mutator.
type GeneratedReportFunc func(context.Context, *ent.GeneratedReportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GeneratedReportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.GeneratedReportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GeneratedReportMutation", m)
}

// The GrantFunc type is an adapter to allow the use of ordinary
// function as Grant mutator.
type GrantFunc func(context.Context, *ent.GrantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GrantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.GrantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GrantMutation", m)
}

// The GrantReportFunc type is an adapter to allow the use of ordinary
// function as GrantReport mutator.
type GrantReportFunc func(context.Context, *ent.GrantReportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GrantReportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.GrantReportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GrantReportMutation", m)
}

// The ImpactDataPointFunc type is an adapter to allow the use of ordinary
// function as ImpactDataPoint mutator.
type ImpactDataPointFunc func(context.Context, *ent.ImpactDataPointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImpactDataPointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImpactDataPointMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImpactDataPointMutation", m)
}

// The ImpactMetricFunc type is an adapter to allow the use of ordinary
// function as ImpactMetric mutator.
type ImpactMetricFunc func(context.Context, *ent.ImpactMetricMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImpactMetricFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImpactMetricMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImpactMetricMutation", m)
}

// The JobFunc type is an adapter to allow the use of ordinary
// function as Job mutator.
type JobFunc func(context.Context, *ent.JobMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobMutation", m)
}

// The JobLogFunc type is an adapter to allow the use of ordinary
// function as JobLog mutator.
type JobLogFunc func(context.Context, *ent.JobLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.JobLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobLogMutation", m)
}

// The MentorshipRequestFunc type is an adapter to allow the use of ordinary
// function as MentorshipRequest mutator.
type MentorshipRequestFunc func(context.Context, *ent.MentorshipRequestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MentorshipRequestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MentorshipRequestMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MentorshipRequestMutation", m)
}

// The MentorshipSessionFunc type is an adapter to allow the use of ordinary
// function as MentorshipSession mutator.
type MentorshipSessionFunc func(context.Context, *ent.MentorshipSessionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MentorshipSessionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MentorshipSessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MentorshipSessionMutation", m)
}

// The MessageFunc type is an adapter to allow the use of ordinary
// function as Message mutator.
type MessageFunc func(context.Context, *ent.MessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageMutation", m)
}

// The NewsArticleFunc type is an adapter to allow the use of ordinary
// function as NewsArticle mutator.
type NewsArticleFunc func(context.Context, *ent.NewsArticleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NewsArticleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NewsArticleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NewsArticleMutation", m)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary
// function as Organization mutator.
type OrganizationFunc func(context.Context, *ent.OrganizationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrganizationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrganizationMutation", m)
}

// The PageFunc type is an adapter to allow the use of ordinary
// function as Page mutator.
type PageFunc func(context.Context, *ent.PageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PageMutation", m)
}

// The PartnerLogoItemFunc type is an adapter to allow the use of ordinary
// function as PartnerLogoItem mutator.
type PartnerLogoItemFunc func(context.Context, *ent.PartnerLogoItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnerLogoItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnerLogoItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnerLogoItemMutation", m)
}

// The PartnershipFunc type is an adapter to allow the use of ordinary
// function as Partnership mutator.
type PartnershipFunc func(context.Context, *ent.PartnershipMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnershipFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnershipMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnershipMutation", m)
}

// The PartnershipInteractionFunc type is an adapter to allow the use of ordinary
// function as PartnershipInteraction mutator.
type PartnershipInteractionFunc func(context.Context, *ent.PartnershipInteractionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnershipInteractionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnershipInteractionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnershipInteractionMutation", m)
}

// The PartnershipRenewalFunc type is an adapter to allow the use of ordinary
// function as PartnershipRenewal mutator.
type PartnershipRenewalFunc func(context.Context, *ent.PartnershipRenewalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnershipRenewalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnershipRenewalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnershipRenewalMutation", m)
}

// The PartnershipReportFunc type is an adapter to allow the use of ordinary
// function as PartnershipReport mutator.
type PartnershipReportFunc func(context.Context, *ent.PartnershipReportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PartnershipReportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PartnershipReportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PartnershipReportMutation", m)
}

// The PasswordHistoryFunc type is an adapter to allow the use of ordinary
// function as PasswordHistory mutator.
type PasswordHistoryFunc func(context.Context, *ent.PasswordHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PasswordHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PasswordHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PasswordHistoryMutation", m)
}

// The PermissionFunc type is an adapter to allow the use of ordinary
// function as Permission mutator.
type PermissionFunc func(context.Context, *ent.PermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionMutation", m)
}

// The ProgramFunc type is an adapter to allow the use of ordinary
// function as Program mutator.
type ProgramFunc func(context.Context, *ent.ProgramMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProgramFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProgramMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProgramMutation", m)
}

// The ProgramCardItemFunc type is an adapter to allow the use of ordinary
// function as ProgramCardItem mutator.
type ProgramCardItemFunc func(context.Context, *ent.ProgramCardItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProgramCardItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProgramCardItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProgramCardItemMutation", m)
}

// The ProgramCategoryFunc type is an adapter to allow the use of ordinary
// function as ProgramCategory mutator.
type ProgramCategoryFunc func(context.Context, *ent.ProgramCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProgramCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProgramCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProgramCategoryMutation", m)
}

// The ProgramEnrolmentFunc type is an adapter to allow the use of ordinary
// function as ProgramEnrolment mutator.
type ProgramEnrolmentFunc func(context.Context, *ent.ProgramEnrolmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProgramEnrolmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProgramEnrolmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProgramEnrolmentMutation", m)
}

// The ProgramParticipantFunc type is an adapter to allow the use of ordinary
// function as ProgramParticipant mutator.
type ProgramParticipantFunc func(context.Context, *ent.ProgramParticipantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProgramParticipantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProgramParticipantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProgramParticipantMutation", m)
}

// The ReportDefinitionFunc type is an adapter to allow the use of ordinary
// function as ReportDefinition mutator.
type ReportDefinitionFunc func(context.Context, *ent.ReportDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReportDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReportDefinitionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReportDefinitionMutation", m)
}

// The ReportPermissionFunc type is an adapter to allow the use of ordinary
// function as ReportPermission mutator.
type ReportPermissionFunc func(context.Context, *ent.ReportPermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReportPermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReportPermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReportPermissionMutation", m)
}

// The RolePermissionFunc type is an adapter to allow the use of ordinary
// function as RolePermission mutator.
type RolePermissionFunc func(context.Context, *ent.RolePermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RolePermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RolePermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RolePermissionMutation", m)
}

// The ScheduledReportFunc type is an adapter to allow the use of ordinary
// function as ScheduledReport mutator.
type ScheduledReportFunc func(context.Context, *ent.ScheduledReportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ScheduledReportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ScheduledReportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ScheduledReportMutation", m)
}

// The SeoConfigFunc type is an adapter to allow the use of ordinary
// function as SeoConfig mutator.
type SeoConfigFunc func(context.Context, *ent.SeoConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SeoConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SeoConfigMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SeoConfigMutation", m)
}

// The SiteVisitFunc type is an adapter to allow the use of ordinary
// function as SiteVisit mutator.
type SiteVisitFunc func(context.Context, *ent.SiteVisitMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SiteVisitFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SiteVisitMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SiteVisitMutation", m)
}

// The SkillFunc type is an adapter to allow the use of ordinary
// function as Skill mutator.
type SkillFunc func(context.Context, *ent.SkillMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SkillFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SkillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SkillMutation", m)
}

// The StatItemFunc type is an adapter to allow the use of ordinary
// function as StatItem mutator.
type StatItemFunc func(context.Context, *ent.StatItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StatItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StatItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StatItemMutation", m)
}

// The SuccessStoryFunc type is an adapter to allow the use of ordinary
// function as SuccessStory mutator.
type SuccessStoryFunc func(context.Context, *ent.SuccessStoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SuccessStoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SuccessStoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SuccessStoryMutation", m)
}

// The SystemErrorFunc type is an adapter to allow the use of ordinary
// function as SystemError mutator.
type SystemErrorFunc func(context.Context, *ent.SystemErrorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemErrorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemErrorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemErrorMutation", m)
}

// The SystemLogFunc type is an adapter to allow the use of ordinary
// function as SystemLog mutator.
type SystemLogFunc func(context.Context, *ent.SystemLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemLogMutation", m)
}

// The TabItemFunc type is an adapter to allow the use of ordinary
// function as TabItem mutator.
type TabItemFunc func(context.Context, *ent.TabItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TabItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TabItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TabItemMutation", m)
}

// The TeamMemberFunc type is an adapter to allow the use of ordinary
// function as TeamMember mutator.
type TeamMemberFunc func(context.Context, *ent.TeamMemberMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TeamMemberFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TeamMemberMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TeamMemberMutation", m)
}

// The TeamMemberItemFunc type is an adapter to allow the use of ordinary
// function as TeamMemberItem mutator.
type TeamMemberItemFunc func(context.Context, *ent.TeamMemberItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TeamMemberItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TeamMemberItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TeamMemberItemMutation", m)
}

// The TestimonialItemFunc type is an adapter to allow the use of ordinary
// function as TestimonialItem mutator.
type TestimonialItemFunc func(context.Context, *ent.TestimonialItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TestimonialItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TestimonialItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TestimonialItemMutation", m)
}

// The TimelineEventFunc type is an adapter to allow the use of ordinary
// function as TimelineEvent mutator.
type TimelineEventFunc func(context.Context, *ent.TimelineEventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TimelineEventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TimelineEventMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TimelineEventMutation", m)
}

// The TokenFunc type is an adapter to allow the use of ordinary
// function as Token mutator.
type TokenFunc func(context.Context, *ent.TokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TokenMutation", m)
}

// The TrustedDeviceFunc type is an adapter to allow the use of ordinary
// function as TrustedDevice mutator.
type TrustedDeviceFunc func(context.Context, *ent.TrustedDeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TrustedDeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TrustedDeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TrustedDeviceMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The UserAchievementFunc type is an adapter to allow the use of ordinary
// function as UserAchievement mutator.
type UserAchievementFunc func(context.Context, *ent.UserAchievementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserAchievementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserAchievementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserAchievementMutation", m)
}

// The UserConsentFunc type is an adapter to allow the use of ordinary
// function as UserConsent mutator.
type UserConsentFunc func(context.Context, *ent.UserConsentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserConsentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserConsentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserConsentMutation", m)
}

// The UserOnboardingFunc type is an adapter to allow the use of ordinary
// function as UserOnboarding mutator.
type UserOnboardingFunc func(context.Context, *ent.UserOnboardingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserOnboardingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserOnboardingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserOnboardingMutation", m)
}

// The UserProfileFunc type is an adapter to allow the use of ordinary
// function as UserProfile mutator.
type UserProfileFunc func(context.Context, *ent.UserProfileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserProfileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserProfileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserProfileMutation", m)
}

// The UserSessionFunc type is an adapter to allow the use of ordinary
// function as UserSession mutator.
type UserSessionFunc func(context.Context, *ent.UserSessionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserSessionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserSessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserSessionMutation", m)
}

// The UserSkillFunc type is an adapter to allow the use of ordinary
// function as UserSkill mutator.
type UserSkillFunc func(context.Context, *ent.UserSkillMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserSkillFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserSkillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserSkillMutation", m)
}

// The VolunteerApplicationFunc type is an adapter to allow the use of ordinary
// function as VolunteerApplication mutator.
type VolunteerApplicationFunc func(context.Context, *ent.VolunteerApplicationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VolunteerApplicationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VolunteerApplicationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VolunteerApplicationMutation", m)
}

// The VolunteerAssignmentFunc type is an adapter to allow the use of ordinary
// function as VolunteerAssignment mutator.
type VolunteerAssignmentFunc func(context.Context, *ent.VolunteerAssignmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VolunteerAssignmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VolunteerAssignmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VolunteerAssignmentMutation", m)
}

// The VolunteerOpportunityFunc type is an adapter to allow the use of ordinary
// function as VolunteerOpportunity mutator.
type VolunteerOpportunityFunc func(context.Context, *ent.VolunteerOpportunityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VolunteerOpportunityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VolunteerOpportunityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VolunteerOpportunityMutation", m)
}

// The VoteFunc type is an adapter to allow the use of ordinary
// function as Vote mutator.
type VoteFunc func(context.Context, *ent.VoteMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VoteFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VoteMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VoteMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
