// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockSuccessStoriesCreate is the builder for creating a BlockSuccessStories entity.
type BlockSuccessStoriesCreate struct {
	config
	mutation *BlockSuccessStoriesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockSuccessStoriesCreate) SetInternalName(v string) *BlockSuccessStoriesCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockSuccessStoriesCreate) SetBadge(v map[string]string) *BlockSuccessStoriesCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockSuccessStoriesCreate) SetTitle(v map[string]string) *BlockSuccessStoriesCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockSuccessStoriesCreate) SetDescription(v map[string]string) *BlockSuccessStoriesCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *BlockSuccessStoriesCreate) SetLayout(v string) *BlockSuccessStoriesCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableLayout(v *string) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetMaxItems sets the "max_items" field.
func (_c *BlockSuccessStoriesCreate) SetMaxItems(v int) *BlockSuccessStoriesCreate {
	_c.mutation.SetMaxItems(v)
	return _c
}

// SetNillableMaxItems sets the "max_items" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableMaxItems(v *int) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetMaxItems(*v)
	}
	return _c
}

// SetAutoplay sets the "autoplay" field.
func (_c *BlockSuccessStoriesCreate) SetAutoplay(v bool) *BlockSuccessStoriesCreate {
	_c.mutation.SetAutoplay(v)
	return _c
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableAutoplay(v *bool) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetAutoplay(*v)
	}
	return _c
}

// SetProgramFilter sets the "program_filter" field.
func (_c *BlockSuccessStoriesCreate) SetProgramFilter(v string) *BlockSuccessStoriesCreate {
	_c.mutation.SetProgramFilter(v)
	return _c
}

// SetNillableProgramFilter sets the "program_filter" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableProgramFilter(v *string) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetProgramFilter(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockSuccessStoriesCreate) SetCreatedAt(v time.Time) *BlockSuccessStoriesCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableCreatedAt(v *time.Time) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockSuccessStoriesCreate) SetUpdatedAt(v time.Time) *BlockSuccessStoriesCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockSuccessStoriesCreate) SetNillableUpdatedAt(v *time.Time) *BlockSuccessStoriesCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockSuccessStoriesCreate) SetContentBlockID(id int) *BlockSuccessStoriesCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockSuccessStoriesCreate) SetContentBlock(v *ContentBlock) *BlockSuccessStoriesCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockSuccessStoriesMutation object of the builder.
func (_c *BlockSuccessStoriesCreate) Mutation() *BlockSuccessStoriesMutation {
	return _c.mutation
}

// Save creates the BlockSuccessStories in the database.
func (_c *BlockSuccessStoriesCreate) Save(ctx context.Context) (*BlockSuccessStories, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockSuccessStoriesCreate) SaveX(ctx context.Context) *BlockSuccessStories {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockSuccessStoriesCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockSuccessStoriesCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockSuccessStoriesCreate) defaults() {
	if _, ok := _c.mutation.Layout(); !ok {
		v := blocksuccessstories.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.MaxItems(); !ok {
		v := blocksuccessstories.DefaultMaxItems
		_c.mutation.SetMaxItems(v)
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		v := blocksuccessstories.DefaultAutoplay
		_c.mutation.SetAutoplay(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blocksuccessstories.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blocksuccessstories.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockSuccessStoriesCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockSuccessStories.internal_name"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "BlockSuccessStories.layout"`)}
	}
	if _, ok := _c.mutation.MaxItems(); !ok {
		return &ValidationError{Name: "max_items", err: errors.New(`ent: missing required field "BlockSuccessStories.max_items"`)}
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		return &ValidationError{Name: "autoplay", err: errors.New(`ent: missing required field "BlockSuccessStories.autoplay"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockSuccessStories.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockSuccessStories.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockSuccessStories.content_block"`)}
	}
	return nil
}

func (_c *BlockSuccessStoriesCreate) sqlSave(ctx context.Context) (*BlockSuccessStories, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockSuccessStoriesCreate) createSpec() (*BlockSuccessStories, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockSuccessStories{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blocksuccessstories.Table, sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blocksuccessstories.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blocksuccessstories.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blocksuccessstories.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blocksuccessstories.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(blocksuccessstories.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.MaxItems(); ok {
		_spec.SetField(blocksuccessstories.FieldMaxItems, field.TypeInt, value)
		_node.MaxItems = value
	}
	if value, ok := _c.mutation.Autoplay(); ok {
		_spec.SetField(blocksuccessstories.FieldAutoplay, field.TypeBool, value)
		_node.Autoplay = value
	}
	if value, ok := _c.mutation.ProgramFilter(); ok {
		_spec.SetField(blocksuccessstories.FieldProgramFilter, field.TypeString, value)
		_node.ProgramFilter = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blocksuccessstories.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blocksuccessstories.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_success_stories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockSuccessStories.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockSuccessStoriesUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockSuccessStoriesCreate) OnConflict(opts ...sql.ConflictOption) *BlockSuccessStoriesUpsertOne {
	_c.conflict = opts
	return &BlockSuccessStoriesUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockSuccessStoriesCreate) OnConflictColumns(columns ...string) *BlockSuccessStoriesUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockSuccessStoriesUpsertOne{
		create: _c,
	}
}

type (
	// BlockSuccessStoriesUpsertOne is the builder for "upsert"-ing
	//  one BlockSuccessStories node.
	BlockSuccessStoriesUpsertOne struct {
		create *BlockSuccessStoriesCreate
	}

	// BlockSuccessStoriesUpsert is the "OnConflict" setter.
	BlockSuccessStoriesUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockSuccessStoriesUpsert) SetInternalName(v string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateInternalName() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockSuccessStoriesUpsert) SetBadge(v map[string]string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateBadge() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockSuccessStoriesUpsert) ClearBadge() *BlockSuccessStoriesUpsert {
	u.SetNull(blocksuccessstories.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockSuccessStoriesUpsert) SetTitle(v map[string]string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateTitle() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *BlockSuccessStoriesUpsert) ClearTitle() *BlockSuccessStoriesUpsert {
	u.SetNull(blocksuccessstories.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockSuccessStoriesUpsert) SetDescription(v map[string]string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateDescription() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockSuccessStoriesUpsert) ClearDescription() *BlockSuccessStoriesUpsert {
	u.SetNull(blocksuccessstories.FieldDescription)
	return u
}

// SetLayout sets the "layout" field.
func (u *BlockSuccessStoriesUpsert) SetLayout(v string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateLayout() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldLayout)
	return u
}

// SetMaxItems sets the "max_items" field.
func (u *BlockSuccessStoriesUpsert) SetMaxItems(v int) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldMaxItems, v)
	return u
}

// UpdateMaxItems sets the "max_items" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateMaxItems() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldMaxItems)
	return u
}

// AddMaxItems adds v to the "max_items" field.
func (u *BlockSuccessStoriesUpsert) AddMaxItems(v int) *BlockSuccessStoriesUpsert {
	u.Add(blocksuccessstories.FieldMaxItems, v)
	return u
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockSuccessStoriesUpsert) SetAutoplay(v bool) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldAutoplay, v)
	return u
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateAutoplay() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldAutoplay)
	return u
}

// SetProgramFilter sets the "program_filter" field.
func (u *BlockSuccessStoriesUpsert) SetProgramFilter(v string) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldProgramFilter, v)
	return u
}

// UpdateProgramFilter sets the "program_filter" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateProgramFilter() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldProgramFilter)
	return u
}

// ClearProgramFilter clears the value of the "program_filter" field.
func (u *BlockSuccessStoriesUpsert) ClearProgramFilter() *BlockSuccessStoriesUpsert {
	u.SetNull(blocksuccessstories.FieldProgramFilter)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockSuccessStoriesUpsert) SetUpdatedAt(v time.Time) *BlockSuccessStoriesUpsert {
	u.Set(blocksuccessstories.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsert) UpdateUpdatedAt() *BlockSuccessStoriesUpsert {
	u.SetExcluded(blocksuccessstories.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockSuccessStoriesUpsertOne) UpdateNewValues() *BlockSuccessStoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blocksuccessstories.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockSuccessStoriesUpsertOne) Ignore() *BlockSuccessStoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockSuccessStoriesUpsertOne) DoNothing() *BlockSuccessStoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockSuccessStoriesCreate.OnConflict
// documentation for more info.
func (u *BlockSuccessStoriesUpsertOne) Update(set func(*BlockSuccessStoriesUpsert)) *BlockSuccessStoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockSuccessStoriesUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockSuccessStoriesUpsertOne) SetInternalName(v string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateInternalName() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockSuccessStoriesUpsertOne) SetBadge(v map[string]string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateBadge() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockSuccessStoriesUpsertOne) ClearBadge() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockSuccessStoriesUpsertOne) SetTitle(v map[string]string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateTitle() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockSuccessStoriesUpsertOne) ClearTitle() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockSuccessStoriesUpsertOne) SetDescription(v map[string]string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateDescription() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockSuccessStoriesUpsertOne) ClearDescription() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockSuccessStoriesUpsertOne) SetLayout(v string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateLayout() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateLayout()
	})
}

// SetMaxItems sets the "max_items" field.
func (u *BlockSuccessStoriesUpsertOne) SetMaxItems(v int) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetMaxItems(v)
	})
}

// AddMaxItems adds v to the "max_items" field.
func (u *BlockSuccessStoriesUpsertOne) AddMaxItems(v int) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.AddMaxItems(v)
	})
}

// UpdateMaxItems sets the "max_items" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateMaxItems() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateMaxItems()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockSuccessStoriesUpsertOne) SetAutoplay(v bool) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateAutoplay() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateAutoplay()
	})
}

// SetProgramFilter sets the "program_filter" field.
func (u *BlockSuccessStoriesUpsertOne) SetProgramFilter(v string) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetProgramFilter(v)
	})
}

// UpdateProgramFilter sets the "program_filter" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateProgramFilter() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateProgramFilter()
	})
}

// ClearProgramFilter clears the value of the "program_filter" field.
func (u *BlockSuccessStoriesUpsertOne) ClearProgramFilter() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearProgramFilter()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockSuccessStoriesUpsertOne) SetUpdatedAt(v time.Time) *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertOne) UpdateUpdatedAt() *BlockSuccessStoriesUpsertOne {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockSuccessStoriesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockSuccessStoriesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockSuccessStoriesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockSuccessStoriesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockSuccessStoriesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockSuccessStoriesCreateBulk is the builder for creating many BlockSuccessStories entities in bulk.
type BlockSuccessStoriesCreateBulk struct {
	config
	err      error
	builders []*BlockSuccessStoriesCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockSuccessStories entities in the database.
func (_c *BlockSuccessStoriesCreateBulk) Save(ctx context.Context) ([]*BlockSuccessStories, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockSuccessStories, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockSuccessStoriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockSuccessStoriesCreateBulk) SaveX(ctx context.Context) []*BlockSuccessStories {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockSuccessStoriesCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockSuccessStoriesCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockSuccessStories.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockSuccessStoriesUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockSuccessStoriesCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockSuccessStoriesUpsertBulk {
	_c.conflict = opts
	return &BlockSuccessStoriesUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockSuccessStoriesCreateBulk) OnConflictColumns(columns ...string) *BlockSuccessStoriesUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockSuccessStoriesUpsertBulk{
		create: _c,
	}
}

// BlockSuccessStoriesUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockSuccessStories nodes.
type BlockSuccessStoriesUpsertBulk struct {
	create *BlockSuccessStoriesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockSuccessStoriesUpsertBulk) UpdateNewValues() *BlockSuccessStoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blocksuccessstories.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockSuccessStories.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockSuccessStoriesUpsertBulk) Ignore() *BlockSuccessStoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockSuccessStoriesUpsertBulk) DoNothing() *BlockSuccessStoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockSuccessStoriesCreateBulk.OnConflict
// documentation for more info.
func (u *BlockSuccessStoriesUpsertBulk) Update(set func(*BlockSuccessStoriesUpsert)) *BlockSuccessStoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockSuccessStoriesUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockSuccessStoriesUpsertBulk) SetInternalName(v string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateInternalName() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockSuccessStoriesUpsertBulk) SetBadge(v map[string]string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateBadge() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockSuccessStoriesUpsertBulk) ClearBadge() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockSuccessStoriesUpsertBulk) SetTitle(v map[string]string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateTitle() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockSuccessStoriesUpsertBulk) ClearTitle() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockSuccessStoriesUpsertBulk) SetDescription(v map[string]string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateDescription() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockSuccessStoriesUpsertBulk) ClearDescription() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockSuccessStoriesUpsertBulk) SetLayout(v string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateLayout() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateLayout()
	})
}

// SetMaxItems sets the "max_items" field.
func (u *BlockSuccessStoriesUpsertBulk) SetMaxItems(v int) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetMaxItems(v)
	})
}

// AddMaxItems adds v to the "max_items" field.
func (u *BlockSuccessStoriesUpsertBulk) AddMaxItems(v int) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.AddMaxItems(v)
	})
}

// UpdateMaxItems sets the "max_items" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateMaxItems() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateMaxItems()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockSuccessStoriesUpsertBulk) SetAutoplay(v bool) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateAutoplay() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateAutoplay()
	})
}

// SetProgramFilter sets the "program_filter" field.
func (u *BlockSuccessStoriesUpsertBulk) SetProgramFilter(v string) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetProgramFilter(v)
	})
}

// UpdateProgramFilter sets the "program_filter" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateProgramFilter() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateProgramFilter()
	})
}

// ClearProgramFilter clears the value of the "program_filter" field.
func (u *BlockSuccessStoriesUpsertBulk) ClearProgramFilter() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.ClearProgramFilter()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockSuccessStoriesUpsertBulk) SetUpdatedAt(v time.Time) *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockSuccessStoriesUpsertBulk) UpdateUpdatedAt() *BlockSuccessStoriesUpsertBulk {
	return u.Update(func(s *BlockSuccessStoriesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockSuccessStoriesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockSuccessStoriesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockSuccessStoriesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockSuccessStoriesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
