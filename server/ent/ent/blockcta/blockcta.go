// Code generated by ent, DO NOT EDIT.

package blockcta

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockcta type in the database.
	Label = "block_cta"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldBadge holds the string denoting the badge field in the database.
	FieldBadge = "badge"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrimaryButtonText holds the string denoting the primary_button_text field in the database.
	FieldPrimaryButtonText = "primary_button_text"
	// FieldPrimaryButtonHref holds the string denoting the primary_button_href field in the database.
	FieldPrimaryButtonHref = "primary_button_href"
	// FieldPrimaryButtonStyle holds the string denoting the primary_button_style field in the database.
	FieldPrimaryButtonStyle = "primary_button_style"
	// FieldSecondaryButtonText holds the string denoting the secondary_button_text field in the database.
	FieldSecondaryButtonText = "secondary_button_text"
	// FieldSecondaryButtonHref holds the string denoting the secondary_button_href field in the database.
	FieldSecondaryButtonHref = "secondary_button_href"
	// FieldSecondaryButtonStyle holds the string denoting the secondary_button_style field in the database.
	FieldSecondaryButtonStyle = "secondary_button_style"
	// FieldTextAlign holds the string denoting the text_align field in the database.
	FieldTextAlign = "text_align"
	// FieldColorScheme holds the string denoting the color_scheme field in the database.
	FieldColorScheme = "color_scheme"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// Table holds the table name of the blockcta in the database.
	Table = "block_cta"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_cta"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_cta"
)

// Columns holds all SQL columns for blockcta fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldBadge,
	FieldTitle,
	FieldDescription,
	FieldPrimaryButtonText,
	FieldPrimaryButtonHref,
	FieldPrimaryButtonStyle,
	FieldSecondaryButtonText,
	FieldSecondaryButtonHref,
	FieldSecondaryButtonStyle,
	FieldTextAlign,
	FieldColorScheme,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_cta"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_cta",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// PrimaryButtonStyle defines the type for the "primary_button_style" enum field.
type PrimaryButtonStyle string

// PrimaryButtonStylePRIMARY is the default value of the PrimaryButtonStyle enum.
const DefaultPrimaryButtonStyle = PrimaryButtonStylePRIMARY

// PrimaryButtonStyle values.
const (
	PrimaryButtonStylePRIMARY   PrimaryButtonStyle = "PRIMARY"
	PrimaryButtonStyleSECONDARY PrimaryButtonStyle = "SECONDARY"
	PrimaryButtonStyleOUTLINE   PrimaryButtonStyle = "OUTLINE"
	PrimaryButtonStyleTEXT      PrimaryButtonStyle = "TEXT"
)

func (pbs PrimaryButtonStyle) String() string {
	return string(pbs)
}

// PrimaryButtonStyleValidator is a validator for the "primary_button_style" field enum values. It is called by the builders before save.
func PrimaryButtonStyleValidator(pbs PrimaryButtonStyle) error {
	switch pbs {
	case PrimaryButtonStylePRIMARY, PrimaryButtonStyleSECONDARY, PrimaryButtonStyleOUTLINE, PrimaryButtonStyleTEXT:
		return nil
	default:
		return fmt.Errorf("blockcta: invalid enum value for primary_button_style field: %q", pbs)
	}
}

// SecondaryButtonStyle defines the type for the "secondary_button_style" enum field.
type SecondaryButtonStyle string

// SecondaryButtonStyleSECONDARY is the default value of the SecondaryButtonStyle enum.
const DefaultSecondaryButtonStyle = SecondaryButtonStyleSECONDARY

// SecondaryButtonStyle values.
const (
	SecondaryButtonStylePRIMARY   SecondaryButtonStyle = "PRIMARY"
	SecondaryButtonStyleSECONDARY SecondaryButtonStyle = "SECONDARY"
	SecondaryButtonStyleOUTLINE   SecondaryButtonStyle = "OUTLINE"
	SecondaryButtonStyleTEXT      SecondaryButtonStyle = "TEXT"
)

func (sbs SecondaryButtonStyle) String() string {
	return string(sbs)
}

// SecondaryButtonStyleValidator is a validator for the "secondary_button_style" field enum values. It is called by the builders before save.
func SecondaryButtonStyleValidator(sbs SecondaryButtonStyle) error {
	switch sbs {
	case SecondaryButtonStylePRIMARY, SecondaryButtonStyleSECONDARY, SecondaryButtonStyleOUTLINE, SecondaryButtonStyleTEXT:
		return nil
	default:
		return fmt.Errorf("blockcta: invalid enum value for secondary_button_style field: %q", sbs)
	}
}

// TextAlign defines the type for the "text_align" enum field.
type TextAlign string

// TextAlignCENTER is the default value of the TextAlign enum.
const DefaultTextAlign = TextAlignCENTER

// TextAlign values.
const (
	TextAlignLEFT    TextAlign = "LEFT"
	TextAlignCENTER  TextAlign = "CENTER"
	TextAlignRIGHT   TextAlign = "RIGHT"
	TextAlignJUSTIFY TextAlign = "JUSTIFY"
)

func (ta TextAlign) String() string {
	return string(ta)
}

// TextAlignValidator is a validator for the "text_align" field enum values. It is called by the builders before save.
func TextAlignValidator(ta TextAlign) error {
	switch ta {
	case TextAlignLEFT, TextAlignCENTER, TextAlignRIGHT, TextAlignJUSTIFY:
		return nil
	default:
		return fmt.Errorf("blockcta: invalid enum value for text_align field: %q", ta)
	}
}

// ColorScheme defines the type for the "color_scheme" enum field.
type ColorScheme string

// ColorSchemePRIMARY is the default value of the ColorScheme enum.
const DefaultColorScheme = ColorSchemePRIMARY

// ColorScheme values.
const (
	ColorSchemeDEFAULT   ColorScheme = "DEFAULT"
	ColorSchemePRIMARY   ColorScheme = "PRIMARY"
	ColorSchemeSECONDARY ColorScheme = "SECONDARY"
	ColorSchemeACCENT    ColorScheme = "ACCENT"
	ColorSchemeLIGHT     ColorScheme = "LIGHT"
	ColorSchemeDARK      ColorScheme = "DARK"
)

func (cs ColorScheme) String() string {
	return string(cs)
}

// ColorSchemeValidator is a validator for the "color_scheme" field enum values. It is called by the builders before save.
func ColorSchemeValidator(cs ColorScheme) error {
	switch cs {
	case ColorSchemeDEFAULT, ColorSchemePRIMARY, ColorSchemeSECONDARY, ColorSchemeACCENT, ColorSchemeLIGHT, ColorSchemeDARK:
		return nil
	default:
		return fmt.Errorf("blockcta: invalid enum value for color_scheme field: %q", cs)
	}
}

// OrderOption defines the ordering options for the BlockCta queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByPrimaryButtonHref orders the results by the primary_button_href field.
func ByPrimaryButtonHref(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryButtonHref, opts...).ToFunc()
}

// ByPrimaryButtonStyle orders the results by the primary_button_style field.
func ByPrimaryButtonStyle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryButtonStyle, opts...).ToFunc()
}

// BySecondaryButtonHref orders the results by the secondary_button_href field.
func BySecondaryButtonHref(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondaryButtonHref, opts...).ToFunc()
}

// BySecondaryButtonStyle orders the results by the secondary_button_style field.
func BySecondaryButtonStyle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondaryButtonStyle, opts...).ToFunc()
}

// ByTextAlign orders the results by the text_align field.
func ByTextAlign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextAlign, opts...).ToFunc()
}

// ByColorScheme orders the results by the color_scheme field.
func ByColorScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorScheme, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
