// Code generated by ent, DO NOT EDIT.

package blockcta

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldInternalName, v))
}

// PrimaryButtonHref applies equality check predicate on the "primary_button_href" field. It's identical to PrimaryButtonHrefEQ.
func PrimaryButtonHref(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldPrimaryButtonHref, v))
}

// SecondaryButtonHref applies equality check predicate on the "secondary_button_href" field. It's identical to SecondaryButtonHrefEQ.
func SecondaryButtonHref(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldSecondaryButtonHref, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldUpdatedAt, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContainsFold(FieldInternalName, v))
}

// BadgeIsNil applies the IsNil predicate on the "badge" field.
func BadgeIsNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIsNull(FieldBadge))
}

// BadgeNotNil applies the NotNil predicate on the "badge" field.
func BadgeNotNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotNull(FieldBadge))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotNull(FieldDescription))
}

// PrimaryButtonHrefEQ applies the EQ predicate on the "primary_button_href" field.
func PrimaryButtonHrefEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefNEQ applies the NEQ predicate on the "primary_button_href" field.
func PrimaryButtonHrefNEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefIn applies the In predicate on the "primary_button_href" field.
func PrimaryButtonHrefIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldPrimaryButtonHref, vs...))
}

// PrimaryButtonHrefNotIn applies the NotIn predicate on the "primary_button_href" field.
func PrimaryButtonHrefNotIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldPrimaryButtonHref, vs...))
}

// PrimaryButtonHrefGT applies the GT predicate on the "primary_button_href" field.
func PrimaryButtonHrefGT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefGTE applies the GTE predicate on the "primary_button_href" field.
func PrimaryButtonHrefGTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefLT applies the LT predicate on the "primary_button_href" field.
func PrimaryButtonHrefLT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefLTE applies the LTE predicate on the "primary_button_href" field.
func PrimaryButtonHrefLTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefContains applies the Contains predicate on the "primary_button_href" field.
func PrimaryButtonHrefContains(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContains(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefHasPrefix applies the HasPrefix predicate on the "primary_button_href" field.
func PrimaryButtonHrefHasPrefix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasPrefix(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefHasSuffix applies the HasSuffix predicate on the "primary_button_href" field.
func PrimaryButtonHrefHasSuffix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasSuffix(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefEqualFold applies the EqualFold predicate on the "primary_button_href" field.
func PrimaryButtonHrefEqualFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEqualFold(FieldPrimaryButtonHref, v))
}

// PrimaryButtonHrefContainsFold applies the ContainsFold predicate on the "primary_button_href" field.
func PrimaryButtonHrefContainsFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContainsFold(FieldPrimaryButtonHref, v))
}

// PrimaryButtonStyleEQ applies the EQ predicate on the "primary_button_style" field.
func PrimaryButtonStyleEQ(v PrimaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldPrimaryButtonStyle, v))
}

// PrimaryButtonStyleNEQ applies the NEQ predicate on the "primary_button_style" field.
func PrimaryButtonStyleNEQ(v PrimaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldPrimaryButtonStyle, v))
}

// PrimaryButtonStyleIn applies the In predicate on the "primary_button_style" field.
func PrimaryButtonStyleIn(vs ...PrimaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldPrimaryButtonStyle, vs...))
}

// PrimaryButtonStyleNotIn applies the NotIn predicate on the "primary_button_style" field.
func PrimaryButtonStyleNotIn(vs ...PrimaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldPrimaryButtonStyle, vs...))
}

// SecondaryButtonTextIsNil applies the IsNil predicate on the "secondary_button_text" field.
func SecondaryButtonTextIsNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIsNull(FieldSecondaryButtonText))
}

// SecondaryButtonTextNotNil applies the NotNil predicate on the "secondary_button_text" field.
func SecondaryButtonTextNotNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotNull(FieldSecondaryButtonText))
}

// SecondaryButtonHrefEQ applies the EQ predicate on the "secondary_button_href" field.
func SecondaryButtonHrefEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefNEQ applies the NEQ predicate on the "secondary_button_href" field.
func SecondaryButtonHrefNEQ(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefIn applies the In predicate on the "secondary_button_href" field.
func SecondaryButtonHrefIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldSecondaryButtonHref, vs...))
}

// SecondaryButtonHrefNotIn applies the NotIn predicate on the "secondary_button_href" field.
func SecondaryButtonHrefNotIn(vs ...string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldSecondaryButtonHref, vs...))
}

// SecondaryButtonHrefGT applies the GT predicate on the "secondary_button_href" field.
func SecondaryButtonHrefGT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefGTE applies the GTE predicate on the "secondary_button_href" field.
func SecondaryButtonHrefGTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefLT applies the LT predicate on the "secondary_button_href" field.
func SecondaryButtonHrefLT(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefLTE applies the LTE predicate on the "secondary_button_href" field.
func SecondaryButtonHrefLTE(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefContains applies the Contains predicate on the "secondary_button_href" field.
func SecondaryButtonHrefContains(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContains(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefHasPrefix applies the HasPrefix predicate on the "secondary_button_href" field.
func SecondaryButtonHrefHasPrefix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasPrefix(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefHasSuffix applies the HasSuffix predicate on the "secondary_button_href" field.
func SecondaryButtonHrefHasSuffix(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldHasSuffix(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefIsNil applies the IsNil predicate on the "secondary_button_href" field.
func SecondaryButtonHrefIsNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIsNull(FieldSecondaryButtonHref))
}

// SecondaryButtonHrefNotNil applies the NotNil predicate on the "secondary_button_href" field.
func SecondaryButtonHrefNotNil() predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotNull(FieldSecondaryButtonHref))
}

// SecondaryButtonHrefEqualFold applies the EqualFold predicate on the "secondary_button_href" field.
func SecondaryButtonHrefEqualFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEqualFold(FieldSecondaryButtonHref, v))
}

// SecondaryButtonHrefContainsFold applies the ContainsFold predicate on the "secondary_button_href" field.
func SecondaryButtonHrefContainsFold(v string) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldContainsFold(FieldSecondaryButtonHref, v))
}

// SecondaryButtonStyleEQ applies the EQ predicate on the "secondary_button_style" field.
func SecondaryButtonStyleEQ(v SecondaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldSecondaryButtonStyle, v))
}

// SecondaryButtonStyleNEQ applies the NEQ predicate on the "secondary_button_style" field.
func SecondaryButtonStyleNEQ(v SecondaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldSecondaryButtonStyle, v))
}

// SecondaryButtonStyleIn applies the In predicate on the "secondary_button_style" field.
func SecondaryButtonStyleIn(vs ...SecondaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldSecondaryButtonStyle, vs...))
}

// SecondaryButtonStyleNotIn applies the NotIn predicate on the "secondary_button_style" field.
func SecondaryButtonStyleNotIn(vs ...SecondaryButtonStyle) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldSecondaryButtonStyle, vs...))
}

// TextAlignEQ applies the EQ predicate on the "text_align" field.
func TextAlignEQ(v TextAlign) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldTextAlign, v))
}

// TextAlignNEQ applies the NEQ predicate on the "text_align" field.
func TextAlignNEQ(v TextAlign) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldTextAlign, v))
}

// TextAlignIn applies the In predicate on the "text_align" field.
func TextAlignIn(vs ...TextAlign) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldTextAlign, vs...))
}

// TextAlignNotIn applies the NotIn predicate on the "text_align" field.
func TextAlignNotIn(vs ...TextAlign) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldTextAlign, vs...))
}

// ColorSchemeEQ applies the EQ predicate on the "color_scheme" field.
func ColorSchemeEQ(v ColorScheme) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldColorScheme, v))
}

// ColorSchemeNEQ applies the NEQ predicate on the "color_scheme" field.
func ColorSchemeNEQ(v ColorScheme) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldColorScheme, v))
}

// ColorSchemeIn applies the In predicate on the "color_scheme" field.
func ColorSchemeIn(vs ...ColorScheme) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldColorScheme, vs...))
}

// ColorSchemeNotIn applies the NotIn predicate on the "color_scheme" field.
func ColorSchemeNotIn(vs ...ColorScheme) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldColorScheme, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlockCta {
	return predicate.BlockCta(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockCta {
	return predicate.BlockCta(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockCta {
	return predicate.BlockCta(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockCta) predicate.BlockCta {
	return predicate.BlockCta(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockCta) predicate.BlockCta {
	return predicate.BlockCta(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockCta) predicate.BlockCta {
	return predicate.BlockCta(sql.NotPredicates(p))
}
