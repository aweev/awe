// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/userprofile"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VolunteerAssignmentCreate is the builder for creating a VolunteerAssignment entity.
type VolunteerAssignmentCreate struct {
	config
	mutation *VolunteerAssignmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *VolunteerAssignmentCreate) SetStatus(v string) *VolunteerAssignmentCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableStatus(v *string) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *VolunteerAssignmentCreate) SetStartDate(v time.Time) *VolunteerAssignmentCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *VolunteerAssignmentCreate) SetEndDate(v time.Time) *VolunteerAssignmentCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableEndDate(v *time.Time) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetHoursCompleted sets the "hours_completed" field.
func (_c *VolunteerAssignmentCreate) SetHoursCompleted(v int) *VolunteerAssignmentCreate {
	_c.mutation.SetHoursCompleted(v)
	return _c
}

// SetNillableHoursCompleted sets the "hours_completed" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableHoursCompleted(v *int) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetHoursCompleted(*v)
	}
	return _c
}

// SetHoursCommitted sets the "hours_committed" field.
func (_c *VolunteerAssignmentCreate) SetHoursCommitted(v int) *VolunteerAssignmentCreate {
	_c.mutation.SetHoursCommitted(v)
	return _c
}

// SetNillableHoursCommitted sets the "hours_committed" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableHoursCommitted(v *int) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetHoursCommitted(*v)
	}
	return _c
}

// SetFeedback sets the "feedback" field.
func (_c *VolunteerAssignmentCreate) SetFeedback(v string) *VolunteerAssignmentCreate {
	_c.mutation.SetFeedback(v)
	return _c
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableFeedback(v *string) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetFeedback(*v)
	}
	return _c
}

// SetRating sets the "rating" field.
func (_c *VolunteerAssignmentCreate) SetRating(v int) *VolunteerAssignmentCreate {
	_c.mutation.SetRating(v)
	return _c
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableRating(v *int) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetRating(*v)
	}
	return _c
}

// SetCompletionNotes sets the "completion_notes" field.
func (_c *VolunteerAssignmentCreate) SetCompletionNotes(v string) *VolunteerAssignmentCreate {
	_c.mutation.SetCompletionNotes(v)
	return _c
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableCompletionNotes(v *string) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetCompletionNotes(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *VolunteerAssignmentCreate) SetCreatedAt(v time.Time) *VolunteerAssignmentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableCreatedAt(v *time.Time) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *VolunteerAssignmentCreate) SetUpdatedAt(v time.Time) *VolunteerAssignmentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *VolunteerAssignmentCreate) SetNillableUpdatedAt(v *time.Time) *VolunteerAssignmentCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetOpportunityID sets the "opportunity" edge to the VolunteerOpportunity entity by ID.
func (_c *VolunteerAssignmentCreate) SetOpportunityID(id int) *VolunteerAssignmentCreate {
	_c.mutation.SetOpportunityID(id)
	return _c
}

// SetOpportunity sets the "opportunity" edge to the VolunteerOpportunity entity.
func (_c *VolunteerAssignmentCreate) SetOpportunity(v *VolunteerOpportunity) *VolunteerAssignmentCreate {
	return _c.SetOpportunityID(v.ID)
}

// SetVolunteerID sets the "volunteer" edge to the UserProfile entity by ID.
func (_c *VolunteerAssignmentCreate) SetVolunteerID(id int) *VolunteerAssignmentCreate {
	_c.mutation.SetVolunteerID(id)
	return _c
}

// SetVolunteer sets the "volunteer" edge to the UserProfile entity.
func (_c *VolunteerAssignmentCreate) SetVolunteer(v *UserProfile) *VolunteerAssignmentCreate {
	return _c.SetVolunteerID(v.ID)
}

// Mutation returns the VolunteerAssignmentMutation object of the builder.
func (_c *VolunteerAssignmentCreate) Mutation() *VolunteerAssignmentMutation {
	return _c.mutation
}

// Save creates the VolunteerAssignment in the database.
func (_c *VolunteerAssignmentCreate) Save(ctx context.Context) (*VolunteerAssignment, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VolunteerAssignmentCreate) SaveX(ctx context.Context) *VolunteerAssignment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerAssignmentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerAssignmentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VolunteerAssignmentCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := volunteerassignment.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.HoursCompleted(); !ok {
		v := volunteerassignment.DefaultHoursCompleted
		_c.mutation.SetHoursCompleted(v)
	}
	if _, ok := _c.mutation.HoursCommitted(); !ok {
		v := volunteerassignment.DefaultHoursCommitted
		_c.mutation.SetHoursCommitted(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := volunteerassignment.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := volunteerassignment.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VolunteerAssignmentCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "VolunteerAssignment.status"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "VolunteerAssignment.start_date"`)}
	}
	if _, ok := _c.mutation.HoursCompleted(); !ok {
		return &ValidationError{Name: "hours_completed", err: errors.New(`ent: missing required field "VolunteerAssignment.hours_completed"`)}
	}
	if _, ok := _c.mutation.HoursCommitted(); !ok {
		return &ValidationError{Name: "hours_committed", err: errors.New(`ent: missing required field "VolunteerAssignment.hours_committed"`)}
	}
	if v, ok := _c.mutation.Rating(); ok {
		if err := volunteerassignment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "VolunteerAssignment.rating": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VolunteerAssignment.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VolunteerAssignment.updated_at"`)}
	}
	if len(_c.mutation.OpportunityIDs()) == 0 {
		return &ValidationError{Name: "opportunity", err: errors.New(`ent: missing required edge "VolunteerAssignment.opportunity"`)}
	}
	if len(_c.mutation.VolunteerIDs()) == 0 {
		return &ValidationError{Name: "volunteer", err: errors.New(`ent: missing required edge "VolunteerAssignment.volunteer"`)}
	}
	return nil
}

func (_c *VolunteerAssignmentCreate) sqlSave(ctx context.Context) (*VolunteerAssignment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VolunteerAssignmentCreate) createSpec() (*VolunteerAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &VolunteerAssignment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(volunteerassignment.Table, sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(volunteerassignment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(volunteerassignment.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(volunteerassignment.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.HoursCompleted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCompleted, field.TypeInt, value)
		_node.HoursCompleted = value
	}
	if value, ok := _c.mutation.HoursCommitted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCommitted, field.TypeInt, value)
		_node.HoursCommitted = value
	}
	if value, ok := _c.mutation.Feedback(); ok {
		_spec.SetField(volunteerassignment.FieldFeedback, field.TypeString, value)
		_node.Feedback = value
	}
	if value, ok := _c.mutation.Rating(); ok {
		_spec.SetField(volunteerassignment.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := _c.mutation.CompletionNotes(); ok {
		_spec.SetField(volunteerassignment.FieldCompletionNotes, field.TypeString, value)
		_node.CompletionNotes = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(volunteerassignment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerassignment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.OpportunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.volunteer_opportunity_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profile_assignments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerAssignment.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerAssignmentUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerAssignmentCreate) OnConflict(opts ...sql.ConflictOption) *VolunteerAssignmentUpsertOne {
	_c.conflict = opts
	return &VolunteerAssignmentUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerAssignmentCreate) OnConflictColumns(columns ...string) *VolunteerAssignmentUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerAssignmentUpsertOne{
		create: _c,
	}
}

type (
	// VolunteerAssignmentUpsertOne is the builder for "upsert"-ing
	//  one VolunteerAssignment node.
	VolunteerAssignmentUpsertOne struct {
		create *VolunteerAssignmentCreate
	}

	// VolunteerAssignmentUpsert is the "OnConflict" setter.
	VolunteerAssignmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *VolunteerAssignmentUpsert) SetStatus(v string) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateStatus() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldStatus)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerAssignmentUpsert) SetStartDate(v time.Time) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateStartDate() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerAssignmentUpsert) SetEndDate(v time.Time) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateEndDate() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerAssignmentUpsert) ClearEndDate() *VolunteerAssignmentUpsert {
	u.SetNull(volunteerassignment.FieldEndDate)
	return u
}

// SetHoursCompleted sets the "hours_completed" field.
func (u *VolunteerAssignmentUpsert) SetHoursCompleted(v int) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldHoursCompleted, v)
	return u
}

// UpdateHoursCompleted sets the "hours_completed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateHoursCompleted() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldHoursCompleted)
	return u
}

// AddHoursCompleted adds v to the "hours_completed" field.
func (u *VolunteerAssignmentUpsert) AddHoursCompleted(v int) *VolunteerAssignmentUpsert {
	u.Add(volunteerassignment.FieldHoursCompleted, v)
	return u
}

// SetHoursCommitted sets the "hours_committed" field.
func (u *VolunteerAssignmentUpsert) SetHoursCommitted(v int) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldHoursCommitted, v)
	return u
}

// UpdateHoursCommitted sets the "hours_committed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateHoursCommitted() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldHoursCommitted)
	return u
}

// AddHoursCommitted adds v to the "hours_committed" field.
func (u *VolunteerAssignmentUpsert) AddHoursCommitted(v int) *VolunteerAssignmentUpsert {
	u.Add(volunteerassignment.FieldHoursCommitted, v)
	return u
}

// SetFeedback sets the "feedback" field.
func (u *VolunteerAssignmentUpsert) SetFeedback(v string) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldFeedback, v)
	return u
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateFeedback() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldFeedback)
	return u
}

// ClearFeedback clears the value of the "feedback" field.
func (u *VolunteerAssignmentUpsert) ClearFeedback() *VolunteerAssignmentUpsert {
	u.SetNull(volunteerassignment.FieldFeedback)
	return u
}

// SetRating sets the "rating" field.
func (u *VolunteerAssignmentUpsert) SetRating(v int) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldRating, v)
	return u
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateRating() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldRating)
	return u
}

// AddRating adds v to the "rating" field.
func (u *VolunteerAssignmentUpsert) AddRating(v int) *VolunteerAssignmentUpsert {
	u.Add(volunteerassignment.FieldRating, v)
	return u
}

// ClearRating clears the value of the "rating" field.
func (u *VolunteerAssignmentUpsert) ClearRating() *VolunteerAssignmentUpsert {
	u.SetNull(volunteerassignment.FieldRating)
	return u
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *VolunteerAssignmentUpsert) SetCompletionNotes(v string) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldCompletionNotes, v)
	return u
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateCompletionNotes() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldCompletionNotes)
	return u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *VolunteerAssignmentUpsert) ClearCompletionNotes() *VolunteerAssignmentUpsert {
	u.SetNull(volunteerassignment.FieldCompletionNotes)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerAssignmentUpsert) SetUpdatedAt(v time.Time) *VolunteerAssignmentUpsert {
	u.Set(volunteerassignment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsert) UpdateUpdatedAt() *VolunteerAssignmentUpsert {
	u.SetExcluded(volunteerassignment.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerAssignmentUpsertOne) UpdateNewValues() *VolunteerAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(volunteerassignment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VolunteerAssignmentUpsertOne) Ignore() *VolunteerAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerAssignmentUpsertOne) DoNothing() *VolunteerAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerAssignmentCreate.OnConflict
// documentation for more info.
func (u *VolunteerAssignmentUpsertOne) Update(set func(*VolunteerAssignmentUpsert)) *VolunteerAssignmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VolunteerAssignmentUpsertOne) SetStatus(v string) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateStatus() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateStatus()
	})
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerAssignmentUpsertOne) SetStartDate(v time.Time) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateStartDate() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerAssignmentUpsertOne) SetEndDate(v time.Time) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateEndDate() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerAssignmentUpsertOne) ClearEndDate() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearEndDate()
	})
}

// SetHoursCompleted sets the "hours_completed" field.
func (u *VolunteerAssignmentUpsertOne) SetHoursCompleted(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetHoursCompleted(v)
	})
}

// AddHoursCompleted adds v to the "hours_completed" field.
func (u *VolunteerAssignmentUpsertOne) AddHoursCompleted(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddHoursCompleted(v)
	})
}

// UpdateHoursCompleted sets the "hours_completed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateHoursCompleted() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateHoursCompleted()
	})
}

// SetHoursCommitted sets the "hours_committed" field.
func (u *VolunteerAssignmentUpsertOne) SetHoursCommitted(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetHoursCommitted(v)
	})
}

// AddHoursCommitted adds v to the "hours_committed" field.
func (u *VolunteerAssignmentUpsertOne) AddHoursCommitted(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddHoursCommitted(v)
	})
}

// UpdateHoursCommitted sets the "hours_committed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateHoursCommitted() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateHoursCommitted()
	})
}

// SetFeedback sets the "feedback" field.
func (u *VolunteerAssignmentUpsertOne) SetFeedback(v string) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateFeedback() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *VolunteerAssignmentUpsertOne) ClearFeedback() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearFeedback()
	})
}

// SetRating sets the "rating" field.
func (u *VolunteerAssignmentUpsertOne) SetRating(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *VolunteerAssignmentUpsertOne) AddRating(v int) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateRating() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateRating()
	})
}

// ClearRating clears the value of the "rating" field.
func (u *VolunteerAssignmentUpsertOne) ClearRating() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearRating()
	})
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *VolunteerAssignmentUpsertOne) SetCompletionNotes(v string) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetCompletionNotes(v)
	})
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateCompletionNotes() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateCompletionNotes()
	})
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *VolunteerAssignmentUpsertOne) ClearCompletionNotes() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearCompletionNotes()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerAssignmentUpsertOne) SetUpdatedAt(v time.Time) *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertOne) UpdateUpdatedAt() *VolunteerAssignmentUpsertOne {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerAssignmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerAssignmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerAssignmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VolunteerAssignmentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VolunteerAssignmentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VolunteerAssignmentCreateBulk is the builder for creating many VolunteerAssignment entities in bulk.
type VolunteerAssignmentCreateBulk struct {
	config
	err      error
	builders []*VolunteerAssignmentCreate
	conflict []sql.ConflictOption
}

// Save creates the VolunteerAssignment entities in the database.
func (_c *VolunteerAssignmentCreateBulk) Save(ctx context.Context) ([]*VolunteerAssignment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*VolunteerAssignment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VolunteerAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VolunteerAssignmentCreateBulk) SaveX(ctx context.Context) []*VolunteerAssignment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerAssignment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerAssignmentUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerAssignmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *VolunteerAssignmentUpsertBulk {
	_c.conflict = opts
	return &VolunteerAssignmentUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerAssignmentCreateBulk) OnConflictColumns(columns ...string) *VolunteerAssignmentUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerAssignmentUpsertBulk{
		create: _c,
	}
}

// VolunteerAssignmentUpsertBulk is the builder for "upsert"-ing
// a bulk of VolunteerAssignment nodes.
type VolunteerAssignmentUpsertBulk struct {
	create *VolunteerAssignmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerAssignmentUpsertBulk) UpdateNewValues() *VolunteerAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(volunteerassignment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerAssignment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VolunteerAssignmentUpsertBulk) Ignore() *VolunteerAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerAssignmentUpsertBulk) DoNothing() *VolunteerAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerAssignmentCreateBulk.OnConflict
// documentation for more info.
func (u *VolunteerAssignmentUpsertBulk) Update(set func(*VolunteerAssignmentUpsert)) *VolunteerAssignmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerAssignmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VolunteerAssignmentUpsertBulk) SetStatus(v string) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateStatus() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateStatus()
	})
}

// SetStartDate sets the "start_date" field.
func (u *VolunteerAssignmentUpsertBulk) SetStartDate(v time.Time) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateStartDate() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *VolunteerAssignmentUpsertBulk) SetEndDate(v time.Time) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateEndDate() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *VolunteerAssignmentUpsertBulk) ClearEndDate() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearEndDate()
	})
}

// SetHoursCompleted sets the "hours_completed" field.
func (u *VolunteerAssignmentUpsertBulk) SetHoursCompleted(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetHoursCompleted(v)
	})
}

// AddHoursCompleted adds v to the "hours_completed" field.
func (u *VolunteerAssignmentUpsertBulk) AddHoursCompleted(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddHoursCompleted(v)
	})
}

// UpdateHoursCompleted sets the "hours_completed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateHoursCompleted() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateHoursCompleted()
	})
}

// SetHoursCommitted sets the "hours_committed" field.
func (u *VolunteerAssignmentUpsertBulk) SetHoursCommitted(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetHoursCommitted(v)
	})
}

// AddHoursCommitted adds v to the "hours_committed" field.
func (u *VolunteerAssignmentUpsertBulk) AddHoursCommitted(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddHoursCommitted(v)
	})
}

// UpdateHoursCommitted sets the "hours_committed" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateHoursCommitted() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateHoursCommitted()
	})
}

// SetFeedback sets the "feedback" field.
func (u *VolunteerAssignmentUpsertBulk) SetFeedback(v string) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateFeedback() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *VolunteerAssignmentUpsertBulk) ClearFeedback() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearFeedback()
	})
}

// SetRating sets the "rating" field.
func (u *VolunteerAssignmentUpsertBulk) SetRating(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *VolunteerAssignmentUpsertBulk) AddRating(v int) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateRating() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateRating()
	})
}

// ClearRating clears the value of the "rating" field.
func (u *VolunteerAssignmentUpsertBulk) ClearRating() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearRating()
	})
}

// SetCompletionNotes sets the "completion_notes" field.
func (u *VolunteerAssignmentUpsertBulk) SetCompletionNotes(v string) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetCompletionNotes(v)
	})
}

// UpdateCompletionNotes sets the "completion_notes" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateCompletionNotes() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateCompletionNotes()
	})
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (u *VolunteerAssignmentUpsertBulk) ClearCompletionNotes() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.ClearCompletionNotes()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerAssignmentUpsertBulk) SetUpdatedAt(v time.Time) *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerAssignmentUpsertBulk) UpdateUpdatedAt() *VolunteerAssignmentUpsertBulk {
	return u.Update(func(s *VolunteerAssignmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerAssignmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VolunteerAssignmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerAssignmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerAssignmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
