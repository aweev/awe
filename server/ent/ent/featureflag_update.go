// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/featureflag"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FeatureFlagUpdate is the builder for updating FeatureFlag entities.
type FeatureFlagUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureFlagMutation
}

// Where appends a list predicates to the FeatureFlagUpdate builder.
func (_u *FeatureFlagUpdate) Where(ps ...predicate.FeatureFlag) *FeatureFlagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDescription sets the "description" field.
func (_u *FeatureFlagUpdate) SetDescription(v string) *FeatureFlagUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *FeatureFlagUpdate) SetNillableDescription(v *string) *FeatureFlagUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *FeatureFlagUpdate) ClearDescription() *FeatureFlagUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *FeatureFlagUpdate) SetIsActive(v bool) *FeatureFlagUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *FeatureFlagUpdate) SetNillableIsActive(v *bool) *FeatureFlagUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (_u *FeatureFlagUpdate) SetRolloutPercentage(v int) *FeatureFlagUpdate {
	_u.mutation.ResetRolloutPercentage()
	_u.mutation.SetRolloutPercentage(v)
	return _u
}

// SetNillableRolloutPercentage sets the "rollout_percentage" field if the given value is not nil.
func (_u *FeatureFlagUpdate) SetNillableRolloutPercentage(v *int) *FeatureFlagUpdate {
	if v != nil {
		_u.SetRolloutPercentage(*v)
	}
	return _u
}

// AddRolloutPercentage adds value to the "rollout_percentage" field.
func (_u *FeatureFlagUpdate) AddRolloutPercentage(v int) *FeatureFlagUpdate {
	_u.mutation.AddRolloutPercentage(v)
	return _u
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (_u *FeatureFlagUpdate) SetAllowedUserIds(v []string) *FeatureFlagUpdate {
	_u.mutation.SetAllowedUserIds(v)
	return _u
}

// AppendAllowedUserIds appends value to the "allowed_user_ids" field.
func (_u *FeatureFlagUpdate) AppendAllowedUserIds(v []string) *FeatureFlagUpdate {
	_u.mutation.AppendAllowedUserIds(v)
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *FeatureFlagUpdate) SetAllowedRoles(v []string) *FeatureFlagUpdate {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *FeatureFlagUpdate) AppendAllowedRoles(v []string) *FeatureFlagUpdate {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FeatureFlagUpdate) SetUpdatedAt(v time.Time) *FeatureFlagUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (_u *FeatureFlagUpdate) Mutation() *FeatureFlagMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FeatureFlagUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FeatureFlagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FeatureFlagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FeatureFlagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FeatureFlagUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := featureflag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FeatureFlagUpdate) check() error {
	if v, ok := _u.mutation.RolloutPercentage(); ok {
		if err := featureflag.RolloutPercentageValidator(v); err != nil {
			return &ValidationError{Name: "rollout_percentage", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.rollout_percentage": %w`, err)}
		}
	}
	return nil
}

func (_u *FeatureFlagUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(featureflag.Table, featureflag.Columns, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(featureflag.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(featureflag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RolloutPercentage(); ok {
		_spec.SetField(featureflag.FieldRolloutPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRolloutPercentage(); ok {
		_spec.AddField(featureflag.FieldRolloutPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AllowedUserIds(); ok {
		_spec.SetField(featureflag.FieldAllowedUserIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedUserIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, featureflag.FieldAllowedUserIds, value)
		})
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(featureflag.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, featureflag.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FeatureFlagUpdateOne is the builder for updating a single FeatureFlag entity.
type FeatureFlagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureFlagMutation
}

// SetDescription sets the "description" field.
func (_u *FeatureFlagUpdateOne) SetDescription(v string) *FeatureFlagUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *FeatureFlagUpdateOne) SetNillableDescription(v *string) *FeatureFlagUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *FeatureFlagUpdateOne) ClearDescription() *FeatureFlagUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *FeatureFlagUpdateOne) SetIsActive(v bool) *FeatureFlagUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *FeatureFlagUpdateOne) SetNillableIsActive(v *bool) *FeatureFlagUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (_u *FeatureFlagUpdateOne) SetRolloutPercentage(v int) *FeatureFlagUpdateOne {
	_u.mutation.ResetRolloutPercentage()
	_u.mutation.SetRolloutPercentage(v)
	return _u
}

// SetNillableRolloutPercentage sets the "rollout_percentage" field if the given value is not nil.
func (_u *FeatureFlagUpdateOne) SetNillableRolloutPercentage(v *int) *FeatureFlagUpdateOne {
	if v != nil {
		_u.SetRolloutPercentage(*v)
	}
	return _u
}

// AddRolloutPercentage adds value to the "rollout_percentage" field.
func (_u *FeatureFlagUpdateOne) AddRolloutPercentage(v int) *FeatureFlagUpdateOne {
	_u.mutation.AddRolloutPercentage(v)
	return _u
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (_u *FeatureFlagUpdateOne) SetAllowedUserIds(v []string) *FeatureFlagUpdateOne {
	_u.mutation.SetAllowedUserIds(v)
	return _u
}

// AppendAllowedUserIds appends value to the "allowed_user_ids" field.
func (_u *FeatureFlagUpdateOne) AppendAllowedUserIds(v []string) *FeatureFlagUpdateOne {
	_u.mutation.AppendAllowedUserIds(v)
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *FeatureFlagUpdateOne) SetAllowedRoles(v []string) *FeatureFlagUpdateOne {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *FeatureFlagUpdateOne) AppendAllowedRoles(v []string) *FeatureFlagUpdateOne {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FeatureFlagUpdateOne) SetUpdatedAt(v time.Time) *FeatureFlagUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (_u *FeatureFlagUpdateOne) Mutation() *FeatureFlagMutation {
	return _u.mutation
}

// Where appends a list predicates to the FeatureFlagUpdate builder.
func (_u *FeatureFlagUpdateOne) Where(ps ...predicate.FeatureFlag) *FeatureFlagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FeatureFlagUpdateOne) Select(field string, fields ...string) *FeatureFlagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FeatureFlag entity.
func (_u *FeatureFlagUpdateOne) Save(ctx context.Context) (*FeatureFlag, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FeatureFlagUpdateOne) SaveX(ctx context.Context) *FeatureFlag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FeatureFlagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FeatureFlagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FeatureFlagUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := featureflag.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FeatureFlagUpdateOne) check() error {
	if v, ok := _u.mutation.RolloutPercentage(); ok {
		if err := featureflag.RolloutPercentageValidator(v); err != nil {
			return &ValidationError{Name: "rollout_percentage", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.rollout_percentage": %w`, err)}
		}
	}
	return nil
}

func (_u *FeatureFlagUpdateOne) sqlSave(ctx context.Context) (_node *FeatureFlag, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(featureflag.Table, featureflag.Columns, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeatureFlag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featureflag.FieldID)
		for _, f := range fields {
			if !featureflag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featureflag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(featureflag.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(featureflag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RolloutPercentage(); ok {
		_spec.SetField(featureflag.FieldRolloutPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRolloutPercentage(); ok {
		_spec.AddField(featureflag.FieldRolloutPercentage, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AllowedUserIds(); ok {
		_spec.SetField(featureflag.FieldAllowedUserIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedUserIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, featureflag.FieldAllowedUserIds, value)
		})
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(featureflag.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, featureflag.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &FeatureFlag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featureflag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
