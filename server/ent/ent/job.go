// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/job"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status job.Status `json:"status,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// Result holds the value of the "result" field.
	Result map[string]interface{} `json:"result,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// InngestRunID holds the value of the "inngest_run_id" field.
	InngestRunID string `json:"inngest_run_id,omitempty"`
	// ScheduledFor holds the value of the "scheduled_for" field.
	ScheduledFor time.Time `json:"scheduled_for,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// MaxRetries holds the value of the "max_retries" field.
	MaxRetries int `json:"max_retries,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges          JobEdges `json:"edges"`
	job_user       *int
	job_depends_on *int
	user_jobs      *int
	selectValues   sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*JobLog `json:"logs,omitempty"`
	// Dependents holds the value of the dependents edge.
	Dependents []*Job `json:"dependents,omitempty"`
	// DependsOn holds the value of the depends_on edge.
	DependsOn *Job `json:"depends_on,omitempty"`
	// Reports holds the value of the reports edge.
	Reports []*GeneratedReport `json:"reports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) LogsOrErr() ([]*JobLog, error) {
	if e.loadedTypes[1] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// DependentsOrErr returns the Dependents value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) DependentsOrErr() ([]*Job, error) {
	if e.loadedTypes[2] {
		return e.Dependents, nil
	}
	return nil, &NotLoadedError{edge: "dependents"}
}

// DependsOnOrErr returns the DependsOn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) DependsOnOrErr() (*Job, error) {
	if e.DependsOn != nil {
		return e.DependsOn, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "depends_on"}
}

// ReportsOrErr returns the Reports value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) ReportsOrErr() ([]*GeneratedReport, error) {
	if e.loadedTypes[4] {
		return e.Reports, nil
	}
	return nil, &NotLoadedError{edge: "reports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldPayload, job.FieldResult, job.FieldMetadata:
			values[i] = new([]byte)
		case job.FieldID, job.FieldPriority, job.FieldMaxRetries:
			values[i] = new(sql.NullInt64)
		case job.FieldType, job.FieldStatus, job.FieldError, job.FieldInngestRunID:
			values[i] = new(sql.NullString)
		case job.FieldScheduledFor, job.FieldCreatedAt, job.FieldUpdatedAt, job.FieldStartedAt, job.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case job.ForeignKeys[0]: // job_user
			values[i] = new(sql.NullInt64)
		case job.ForeignKeys[1]: // job_depends_on
			values[i] = new(sql.NullInt64)
		case job.ForeignKeys[2]: // user_jobs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (_m *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case job.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case job.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = job.Status(value.String)
			}
		case job.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case job.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Result); err != nil {
					return fmt.Errorf("unmarshal field result: %w", err)
				}
			}
		case job.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				_m.Error = value.String
			}
		case job.FieldInngestRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inngest_run_id", values[i])
			} else if value.Valid {
				_m.InngestRunID = value.String
			}
		case job.FieldScheduledFor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_for", values[i])
			} else if value.Valid {
				_m.ScheduledFor = value.Time
			}
		case job.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				_m.Priority = int(value.Int64)
			}
		case job.FieldMaxRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retries", values[i])
			} else if value.Valid {
				_m.MaxRetries = int(value.Int64)
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case job.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case job.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case job.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				_m.CompletedAt = value.Time
			}
		case job.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_user", value)
			} else if value.Valid {
				_m.job_user = new(int)
				*_m.job_user = int(value.Int64)
			}
		case job.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_depends_on", value)
			} else if value.Valid {
				_m.job_depends_on = new(int)
				*_m.job_depends_on = int(value.Int64)
			}
		case job.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_jobs", value)
			} else if value.Valid {
				_m.user_jobs = new(int)
				*_m.user_jobs = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (_m *Job) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Job entity.
func (_m *Job) QueryUser() *UserQuery {
	return NewJobClient(_m.config).QueryUser(_m)
}

// QueryLogs queries the "logs" edge of the Job entity.
func (_m *Job) QueryLogs() *JobLogQuery {
	return NewJobClient(_m.config).QueryLogs(_m)
}

// QueryDependents queries the "dependents" edge of the Job entity.
func (_m *Job) QueryDependents() *JobQuery {
	return NewJobClient(_m.config).QueryDependents(_m)
}

// QueryDependsOn queries the "depends_on" edge of the Job entity.
func (_m *Job) QueryDependsOn() *JobQuery {
	return NewJobClient(_m.config).QueryDependsOn(_m)
}

// QueryReports queries the "reports" edge of the Job entity.
func (_m *Job) QueryReports() *GeneratedReportQuery {
	return NewJobClient(_m.config).QueryReports(_m)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Job) Update() *JobUpdateOne {
	return NewJobClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Job) Unwrap() *Job {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", _m.Payload))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", _m.Result))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(_m.Error)
	builder.WriteString(", ")
	builder.WriteString("inngest_run_id=")
	builder.WriteString(_m.InngestRunID)
	builder.WriteString(", ")
	builder.WriteString("scheduled_for=")
	builder.WriteString(_m.ScheduledFor.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", _m.Priority))
	builder.WriteString(", ")
	builder.WriteString("max_retries=")
	builder.WriteString(fmt.Sprintf("%v", _m.MaxRetries))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(_m.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
