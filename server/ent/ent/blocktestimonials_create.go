// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/testimonialitem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockTestimonialsCreate is the builder for creating a BlockTestimonials entity.
type BlockTestimonialsCreate struct {
	config
	mutation *BlockTestimonialsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockTestimonialsCreate) SetInternalName(v string) *BlockTestimonialsCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockTestimonialsCreate) SetBadge(v map[string]string) *BlockTestimonialsCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockTestimonialsCreate) SetTitle(v map[string]string) *BlockTestimonialsCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockTestimonialsCreate) SetDescription(v map[string]string) *BlockTestimonialsCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *BlockTestimonialsCreate) SetLayout(v string) *BlockTestimonialsCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableLayout(v *string) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetItemsPerRow sets the "items_per_row" field.
func (_c *BlockTestimonialsCreate) SetItemsPerRow(v int) *BlockTestimonialsCreate {
	_c.mutation.SetItemsPerRow(v)
	return _c
}

// SetNillableItemsPerRow sets the "items_per_row" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableItemsPerRow(v *int) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetItemsPerRow(*v)
	}
	return _c
}

// SetAutoplay sets the "autoplay" field.
func (_c *BlockTestimonialsCreate) SetAutoplay(v bool) *BlockTestimonialsCreate {
	_c.mutation.SetAutoplay(v)
	return _c
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableAutoplay(v *bool) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetAutoplay(*v)
	}
	return _c
}

// SetAutoplaySpeed sets the "autoplay_speed" field.
func (_c *BlockTestimonialsCreate) SetAutoplaySpeed(v int) *BlockTestimonialsCreate {
	_c.mutation.SetAutoplaySpeed(v)
	return _c
}

// SetNillableAutoplaySpeed sets the "autoplay_speed" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableAutoplaySpeed(v *int) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetAutoplaySpeed(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockTestimonialsCreate) SetCreatedAt(v time.Time) *BlockTestimonialsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableCreatedAt(v *time.Time) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockTestimonialsCreate) SetUpdatedAt(v time.Time) *BlockTestimonialsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockTestimonialsCreate) SetNillableUpdatedAt(v *time.Time) *BlockTestimonialsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockTestimonialsCreate) SetContentBlockID(id int) *BlockTestimonialsCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockTestimonialsCreate) SetContentBlock(v *ContentBlock) *BlockTestimonialsCreate {
	return _c.SetContentBlockID(v.ID)
}

// AddTestimonialIDs adds the "testimonials" edge to the TestimonialItem entity by IDs.
func (_c *BlockTestimonialsCreate) AddTestimonialIDs(ids ...int) *BlockTestimonialsCreate {
	_c.mutation.AddTestimonialIDs(ids...)
	return _c
}

// AddTestimonials adds the "testimonials" edges to the TestimonialItem entity.
func (_c *BlockTestimonialsCreate) AddTestimonials(v ...*TestimonialItem) *BlockTestimonialsCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTestimonialIDs(ids...)
}

// Mutation returns the BlockTestimonialsMutation object of the builder.
func (_c *BlockTestimonialsCreate) Mutation() *BlockTestimonialsMutation {
	return _c.mutation
}

// Save creates the BlockTestimonials in the database.
func (_c *BlockTestimonialsCreate) Save(ctx context.Context) (*BlockTestimonials, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockTestimonialsCreate) SaveX(ctx context.Context) *BlockTestimonials {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockTestimonialsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockTestimonialsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockTestimonialsCreate) defaults() {
	if _, ok := _c.mutation.Layout(); !ok {
		v := blocktestimonials.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.ItemsPerRow(); !ok {
		v := blocktestimonials.DefaultItemsPerRow
		_c.mutation.SetItemsPerRow(v)
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		v := blocktestimonials.DefaultAutoplay
		_c.mutation.SetAutoplay(v)
	}
	if _, ok := _c.mutation.AutoplaySpeed(); !ok {
		v := blocktestimonials.DefaultAutoplaySpeed
		_c.mutation.SetAutoplaySpeed(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blocktestimonials.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blocktestimonials.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockTestimonialsCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockTestimonials.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockTestimonials.title"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "BlockTestimonials.layout"`)}
	}
	if _, ok := _c.mutation.ItemsPerRow(); !ok {
		return &ValidationError{Name: "items_per_row", err: errors.New(`ent: missing required field "BlockTestimonials.items_per_row"`)}
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		return &ValidationError{Name: "autoplay", err: errors.New(`ent: missing required field "BlockTestimonials.autoplay"`)}
	}
	if _, ok := _c.mutation.AutoplaySpeed(); !ok {
		return &ValidationError{Name: "autoplay_speed", err: errors.New(`ent: missing required field "BlockTestimonials.autoplay_speed"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockTestimonials.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockTestimonials.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockTestimonials.content_block"`)}
	}
	return nil
}

func (_c *BlockTestimonialsCreate) sqlSave(ctx context.Context) (*BlockTestimonials, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockTestimonialsCreate) createSpec() (*BlockTestimonials, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockTestimonials{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blocktestimonials.Table, sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blocktestimonials.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blocktestimonials.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blocktestimonials.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blocktestimonials.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(blocktestimonials.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.ItemsPerRow(); ok {
		_spec.SetField(blocktestimonials.FieldItemsPerRow, field.TypeInt, value)
		_node.ItemsPerRow = value
	}
	if value, ok := _c.mutation.Autoplay(); ok {
		_spec.SetField(blocktestimonials.FieldAutoplay, field.TypeBool, value)
		_node.Autoplay = value
	}
	if value, ok := _c.mutation.AutoplaySpeed(); ok {
		_spec.SetField(blocktestimonials.FieldAutoplaySpeed, field.TypeInt, value)
		_node.AutoplaySpeed = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blocktestimonials.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blocktestimonials.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktestimonials.ContentBlockTable,
			Columns: []string{blocktestimonials.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_testimonials = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktestimonials.TestimonialsTable,
			Columns: []string{blocktestimonials.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockTestimonials.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockTestimonialsUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockTestimonialsCreate) OnConflict(opts ...sql.ConflictOption) *BlockTestimonialsUpsertOne {
	_c.conflict = opts
	return &BlockTestimonialsUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockTestimonialsCreate) OnConflictColumns(columns ...string) *BlockTestimonialsUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockTestimonialsUpsertOne{
		create: _c,
	}
}

type (
	// BlockTestimonialsUpsertOne is the builder for "upsert"-ing
	//  one BlockTestimonials node.
	BlockTestimonialsUpsertOne struct {
		create *BlockTestimonialsCreate
	}

	// BlockTestimonialsUpsert is the "OnConflict" setter.
	BlockTestimonialsUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockTestimonialsUpsert) SetInternalName(v string) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateInternalName() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockTestimonialsUpsert) SetBadge(v map[string]string) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateBadge() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockTestimonialsUpsert) ClearBadge() *BlockTestimonialsUpsert {
	u.SetNull(blocktestimonials.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockTestimonialsUpsert) SetTitle(v map[string]string) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateTitle() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockTestimonialsUpsert) SetDescription(v map[string]string) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateDescription() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockTestimonialsUpsert) ClearDescription() *BlockTestimonialsUpsert {
	u.SetNull(blocktestimonials.FieldDescription)
	return u
}

// SetLayout sets the "layout" field.
func (u *BlockTestimonialsUpsert) SetLayout(v string) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateLayout() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldLayout)
	return u
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockTestimonialsUpsert) SetItemsPerRow(v int) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldItemsPerRow, v)
	return u
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateItemsPerRow() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldItemsPerRow)
	return u
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockTestimonialsUpsert) AddItemsPerRow(v int) *BlockTestimonialsUpsert {
	u.Add(blocktestimonials.FieldItemsPerRow, v)
	return u
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockTestimonialsUpsert) SetAutoplay(v bool) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldAutoplay, v)
	return u
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateAutoplay() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldAutoplay)
	return u
}

// SetAutoplaySpeed sets the "autoplay_speed" field.
func (u *BlockTestimonialsUpsert) SetAutoplaySpeed(v int) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldAutoplaySpeed, v)
	return u
}

// UpdateAutoplaySpeed sets the "autoplay_speed" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateAutoplaySpeed() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldAutoplaySpeed)
	return u
}

// AddAutoplaySpeed adds v to the "autoplay_speed" field.
func (u *BlockTestimonialsUpsert) AddAutoplaySpeed(v int) *BlockTestimonialsUpsert {
	u.Add(blocktestimonials.FieldAutoplaySpeed, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTestimonialsUpsert) SetUpdatedAt(v time.Time) *BlockTestimonialsUpsert {
	u.Set(blocktestimonials.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTestimonialsUpsert) UpdateUpdatedAt() *BlockTestimonialsUpsert {
	u.SetExcluded(blocktestimonials.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockTestimonialsUpsertOne) UpdateNewValues() *BlockTestimonialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blocktestimonials.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockTestimonialsUpsertOne) Ignore() *BlockTestimonialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockTestimonialsUpsertOne) DoNothing() *BlockTestimonialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockTestimonialsCreate.OnConflict
// documentation for more info.
func (u *BlockTestimonialsUpsertOne) Update(set func(*BlockTestimonialsUpsert)) *BlockTestimonialsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockTestimonialsUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockTestimonialsUpsertOne) SetInternalName(v string) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateInternalName() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockTestimonialsUpsertOne) SetBadge(v map[string]string) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateBadge() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockTestimonialsUpsertOne) ClearBadge() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockTestimonialsUpsertOne) SetTitle(v map[string]string) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateTitle() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockTestimonialsUpsertOne) SetDescription(v map[string]string) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateDescription() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockTestimonialsUpsertOne) ClearDescription() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockTestimonialsUpsertOne) SetLayout(v string) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateLayout() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateLayout()
	})
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockTestimonialsUpsertOne) SetItemsPerRow(v int) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetItemsPerRow(v)
	})
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockTestimonialsUpsertOne) AddItemsPerRow(v int) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.AddItemsPerRow(v)
	})
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateItemsPerRow() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateItemsPerRow()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockTestimonialsUpsertOne) SetAutoplay(v bool) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateAutoplay() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateAutoplay()
	})
}

// SetAutoplaySpeed sets the "autoplay_speed" field.
func (u *BlockTestimonialsUpsertOne) SetAutoplaySpeed(v int) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetAutoplaySpeed(v)
	})
}

// AddAutoplaySpeed adds v to the "autoplay_speed" field.
func (u *BlockTestimonialsUpsertOne) AddAutoplaySpeed(v int) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.AddAutoplaySpeed(v)
	})
}

// UpdateAutoplaySpeed sets the "autoplay_speed" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateAutoplaySpeed() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateAutoplaySpeed()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTestimonialsUpsertOne) SetUpdatedAt(v time.Time) *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertOne) UpdateUpdatedAt() *BlockTestimonialsUpsertOne {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockTestimonialsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockTestimonialsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockTestimonialsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockTestimonialsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockTestimonialsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockTestimonialsCreateBulk is the builder for creating many BlockTestimonials entities in bulk.
type BlockTestimonialsCreateBulk struct {
	config
	err      error
	builders []*BlockTestimonialsCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockTestimonials entities in the database.
func (_c *BlockTestimonialsCreateBulk) Save(ctx context.Context) ([]*BlockTestimonials, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockTestimonials, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockTestimonialsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockTestimonialsCreateBulk) SaveX(ctx context.Context) []*BlockTestimonials {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockTestimonialsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockTestimonialsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockTestimonials.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockTestimonialsUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockTestimonialsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockTestimonialsUpsertBulk {
	_c.conflict = opts
	return &BlockTestimonialsUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockTestimonialsCreateBulk) OnConflictColumns(columns ...string) *BlockTestimonialsUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockTestimonialsUpsertBulk{
		create: _c,
	}
}

// BlockTestimonialsUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockTestimonials nodes.
type BlockTestimonialsUpsertBulk struct {
	create *BlockTestimonialsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockTestimonialsUpsertBulk) UpdateNewValues() *BlockTestimonialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blocktestimonials.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockTestimonials.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockTestimonialsUpsertBulk) Ignore() *BlockTestimonialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockTestimonialsUpsertBulk) DoNothing() *BlockTestimonialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockTestimonialsCreateBulk.OnConflict
// documentation for more info.
func (u *BlockTestimonialsUpsertBulk) Update(set func(*BlockTestimonialsUpsert)) *BlockTestimonialsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockTestimonialsUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockTestimonialsUpsertBulk) SetInternalName(v string) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateInternalName() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockTestimonialsUpsertBulk) SetBadge(v map[string]string) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateBadge() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockTestimonialsUpsertBulk) ClearBadge() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockTestimonialsUpsertBulk) SetTitle(v map[string]string) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateTitle() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockTestimonialsUpsertBulk) SetDescription(v map[string]string) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateDescription() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockTestimonialsUpsertBulk) ClearDescription() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockTestimonialsUpsertBulk) SetLayout(v string) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateLayout() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateLayout()
	})
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockTestimonialsUpsertBulk) SetItemsPerRow(v int) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetItemsPerRow(v)
	})
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockTestimonialsUpsertBulk) AddItemsPerRow(v int) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.AddItemsPerRow(v)
	})
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateItemsPerRow() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateItemsPerRow()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockTestimonialsUpsertBulk) SetAutoplay(v bool) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateAutoplay() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateAutoplay()
	})
}

// SetAutoplaySpeed sets the "autoplay_speed" field.
func (u *BlockTestimonialsUpsertBulk) SetAutoplaySpeed(v int) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetAutoplaySpeed(v)
	})
}

// AddAutoplaySpeed adds v to the "autoplay_speed" field.
func (u *BlockTestimonialsUpsertBulk) AddAutoplaySpeed(v int) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.AddAutoplaySpeed(v)
	})
}

// UpdateAutoplaySpeed sets the "autoplay_speed" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateAutoplaySpeed() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateAutoplaySpeed()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockTestimonialsUpsertBulk) SetUpdatedAt(v time.Time) *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockTestimonialsUpsertBulk) UpdateUpdatedAt() *BlockTestimonialsUpsertBulk {
	return u.Update(func(s *BlockTestimonialsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockTestimonialsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockTestimonialsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockTestimonialsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockTestimonialsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
