// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/partnership"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandBenefitCreate is the builder for creating a BrandBenefit entity.
type BrandBenefitCreate struct {
	config
	mutation *BrandBenefitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (_c *BrandBenefitCreate) SetType(v string) *BrandBenefitCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BrandBenefitCreate) SetDescription(v string) *BrandBenefitCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *BrandBenefitCreate) SetURL(v string) *BrandBenefitCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *BrandBenefitCreate) SetNillableURL(v *string) *BrandBenefitCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetDate sets the "date" field.
func (_c *BrandBenefitCreate) SetDate(v time.Time) *BrandBenefitCreate {
	_c.mutation.SetDate(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *BrandBenefitCreate) SetValue(v float64) *BrandBenefitCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_c *BrandBenefitCreate) SetNillableValue(v *float64) *BrandBenefitCreate {
	if v != nil {
		_c.SetValue(*v)
	}
	return _c
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_c *BrandBenefitCreate) SetPartnershipID(id int) *BrandBenefitCreate {
	_c.mutation.SetPartnershipID(id)
	return _c
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_c *BrandBenefitCreate) SetPartnership(v *Partnership) *BrandBenefitCreate {
	return _c.SetPartnershipID(v.ID)
}

// Mutation returns the BrandBenefitMutation object of the builder.
func (_c *BrandBenefitCreate) Mutation() *BrandBenefitMutation {
	return _c.mutation
}

// Save creates the BrandBenefit in the database.
func (_c *BrandBenefitCreate) Save(ctx context.Context) (*BrandBenefit, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BrandBenefitCreate) SaveX(ctx context.Context) *BrandBenefit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BrandBenefitCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BrandBenefitCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BrandBenefitCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "BrandBenefit.type"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "BrandBenefit.description"`)}
	}
	if _, ok := _c.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "BrandBenefit.date"`)}
	}
	if len(_c.mutation.PartnershipIDs()) == 0 {
		return &ValidationError{Name: "partnership", err: errors.New(`ent: missing required edge "BrandBenefit.partnership"`)}
	}
	return nil
}

func (_c *BrandBenefitCreate) sqlSave(ctx context.Context) (*BrandBenefit, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BrandBenefitCreate) createSpec() (*BrandBenefit, *sqlgraph.CreateSpec) {
	var (
		_node = &BrandBenefit{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(brandbenefit.Table, sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(brandbenefit.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(brandbenefit.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(brandbenefit.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.Date(); ok {
		_spec.SetField(brandbenefit.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(brandbenefit.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if nodes := _c.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partnership_brand_benefits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BrandBenefit.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BrandBenefitUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *BrandBenefitCreate) OnConflict(opts ...sql.ConflictOption) *BrandBenefitUpsertOne {
	_c.conflict = opts
	return &BrandBenefitUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BrandBenefitCreate) OnConflictColumns(columns ...string) *BrandBenefitUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BrandBenefitUpsertOne{
		create: _c,
	}
}

type (
	// BrandBenefitUpsertOne is the builder for "upsert"-ing
	//  one BrandBenefit node.
	BrandBenefitUpsertOne struct {
		create *BrandBenefitCreate
	}

	// BrandBenefitUpsert is the "OnConflict" setter.
	BrandBenefitUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *BrandBenefitUpsert) SetType(v string) *BrandBenefitUpsert {
	u.Set(brandbenefit.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BrandBenefitUpsert) UpdateType() *BrandBenefitUpsert {
	u.SetExcluded(brandbenefit.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *BrandBenefitUpsert) SetDescription(v string) *BrandBenefitUpsert {
	u.Set(brandbenefit.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BrandBenefitUpsert) UpdateDescription() *BrandBenefitUpsert {
	u.SetExcluded(brandbenefit.FieldDescription)
	return u
}

// SetURL sets the "url" field.
func (u *BrandBenefitUpsert) SetURL(v string) *BrandBenefitUpsert {
	u.Set(brandbenefit.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *BrandBenefitUpsert) UpdateURL() *BrandBenefitUpsert {
	u.SetExcluded(brandbenefit.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *BrandBenefitUpsert) ClearURL() *BrandBenefitUpsert {
	u.SetNull(brandbenefit.FieldURL)
	return u
}

// SetDate sets the "date" field.
func (u *BrandBenefitUpsert) SetDate(v time.Time) *BrandBenefitUpsert {
	u.Set(brandbenefit.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *BrandBenefitUpsert) UpdateDate() *BrandBenefitUpsert {
	u.SetExcluded(brandbenefit.FieldDate)
	return u
}

// SetValue sets the "value" field.
func (u *BrandBenefitUpsert) SetValue(v float64) *BrandBenefitUpsert {
	u.Set(brandbenefit.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BrandBenefitUpsert) UpdateValue() *BrandBenefitUpsert {
	u.SetExcluded(brandbenefit.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *BrandBenefitUpsert) AddValue(v float64) *BrandBenefitUpsert {
	u.Add(brandbenefit.FieldValue, v)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *BrandBenefitUpsert) ClearValue() *BrandBenefitUpsert {
	u.SetNull(brandbenefit.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BrandBenefitUpsertOne) UpdateNewValues() *BrandBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BrandBenefitUpsertOne) Ignore() *BrandBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BrandBenefitUpsertOne) DoNothing() *BrandBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BrandBenefitCreate.OnConflict
// documentation for more info.
func (u *BrandBenefitUpsertOne) Update(set func(*BrandBenefitUpsert)) *BrandBenefitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BrandBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *BrandBenefitUpsertOne) SetType(v string) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BrandBenefitUpsertOne) UpdateType() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *BrandBenefitUpsertOne) SetDescription(v string) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BrandBenefitUpsertOne) UpdateDescription() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateDescription()
	})
}

// SetURL sets the "url" field.
func (u *BrandBenefitUpsertOne) SetURL(v string) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *BrandBenefitUpsertOne) UpdateURL() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *BrandBenefitUpsertOne) ClearURL() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.ClearURL()
	})
}

// SetDate sets the "date" field.
func (u *BrandBenefitUpsertOne) SetDate(v time.Time) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *BrandBenefitUpsertOne) UpdateDate() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *BrandBenefitUpsertOne) SetValue(v float64) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *BrandBenefitUpsertOne) AddValue(v float64) *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BrandBenefitUpsertOne) UpdateValue() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *BrandBenefitUpsertOne) ClearValue() *BrandBenefitUpsertOne {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *BrandBenefitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BrandBenefitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BrandBenefitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BrandBenefitUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BrandBenefitUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BrandBenefitCreateBulk is the builder for creating many BrandBenefit entities in bulk.
type BrandBenefitCreateBulk struct {
	config
	err      error
	builders []*BrandBenefitCreate
	conflict []sql.ConflictOption
}

// Save creates the BrandBenefit entities in the database.
func (_c *BrandBenefitCreateBulk) Save(ctx context.Context) ([]*BrandBenefit, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BrandBenefit, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BrandBenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BrandBenefitCreateBulk) SaveX(ctx context.Context) []*BrandBenefit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BrandBenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BrandBenefitCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BrandBenefit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BrandBenefitUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *BrandBenefitCreateBulk) OnConflict(opts ...sql.ConflictOption) *BrandBenefitUpsertBulk {
	_c.conflict = opts
	return &BrandBenefitUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BrandBenefitCreateBulk) OnConflictColumns(columns ...string) *BrandBenefitUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BrandBenefitUpsertBulk{
		create: _c,
	}
}

// BrandBenefitUpsertBulk is the builder for "upsert"-ing
// a bulk of BrandBenefit nodes.
type BrandBenefitUpsertBulk struct {
	create *BrandBenefitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BrandBenefitUpsertBulk) UpdateNewValues() *BrandBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BrandBenefit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BrandBenefitUpsertBulk) Ignore() *BrandBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BrandBenefitUpsertBulk) DoNothing() *BrandBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BrandBenefitCreateBulk.OnConflict
// documentation for more info.
func (u *BrandBenefitUpsertBulk) Update(set func(*BrandBenefitUpsert)) *BrandBenefitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BrandBenefitUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *BrandBenefitUpsertBulk) SetType(v string) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BrandBenefitUpsertBulk) UpdateType() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *BrandBenefitUpsertBulk) SetDescription(v string) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BrandBenefitUpsertBulk) UpdateDescription() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateDescription()
	})
}

// SetURL sets the "url" field.
func (u *BrandBenefitUpsertBulk) SetURL(v string) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *BrandBenefitUpsertBulk) UpdateURL() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *BrandBenefitUpsertBulk) ClearURL() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.ClearURL()
	})
}

// SetDate sets the "date" field.
func (u *BrandBenefitUpsertBulk) SetDate(v time.Time) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *BrandBenefitUpsertBulk) UpdateDate() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateDate()
	})
}

// SetValue sets the "value" field.
func (u *BrandBenefitUpsertBulk) SetValue(v float64) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *BrandBenefitUpsertBulk) AddValue(v float64) *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *BrandBenefitUpsertBulk) UpdateValue() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *BrandBenefitUpsertBulk) ClearValue() *BrandBenefitUpsertBulk {
	return u.Update(func(s *BrandBenefitUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *BrandBenefitUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BrandBenefitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BrandBenefitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BrandBenefitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
