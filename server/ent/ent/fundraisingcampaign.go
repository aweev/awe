// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/program"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FundraisingCampaign is the model entity for the FundraisingCampaign schema.
type FundraisingCampaign struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// Story holds the value of the "story" field.
	Story map[string]interface{} `json:"story,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// TargetAmount holds the value of the "target_amount" field.
	TargetAmount float64 `json:"target_amount,omitempty"`
	// CurrentAmount holds the value of the "current_amount" field.
	CurrentAmount float64 `json:"current_amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// MinimumDonation holds the value of the "minimum_donation" field.
	MinimumDonation float64 `json:"minimum_donation,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// HeroImageURL holds the value of the "hero_image_url" field.
	HeroImageURL string `json:"hero_image_url,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// GalleryImages holds the value of the "gallery_images" field.
	GalleryImages []string `json:"gallery_images,omitempty"`
	// ManagerID holds the value of the "manager_id" field.
	ManagerID string `json:"manager_id,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// AllowRecurring holds the value of the "allow_recurring" field.
	AllowRecurring bool `json:"allow_recurring,omitempty"`
	// DonorCount holds the value of the "donor_count" field.
	DonorCount int `json:"donor_count,omitempty"`
	// ShareCount holds the value of the "share_count" field.
	ShareCount int `json:"share_count,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int `json:"view_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FundraisingCampaignQuery when eager-loading is set.
	Edges                                FundraisingCampaignEdges `json:"edges"`
	fundraising_campaign_parent_campaign *int
	program_fundraising_campaigns        *int
	selectValues                         sql.SelectValues
}

// FundraisingCampaignEdges holds the relations/edges for other nodes in the graph.
type FundraisingCampaignEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// ChildCampaigns holds the value of the child_campaigns edge.
	ChildCampaigns []*FundraisingCampaign `json:"child_campaigns,omitempty"`
	// ParentCampaign holds the value of the parent_campaign edge.
	ParentCampaign *FundraisingCampaign `json:"parent_campaign,omitempty"`
	// Donations holds the value of the donations edge.
	Donations []*Donation `json:"donations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FundraisingCampaignEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// ChildCampaignsOrErr returns the ChildCampaigns value or an error if the edge
// was not loaded in eager-loading.
func (e FundraisingCampaignEdges) ChildCampaignsOrErr() ([]*FundraisingCampaign, error) {
	if e.loadedTypes[1] {
		return e.ChildCampaigns, nil
	}
	return nil, &NotLoadedError{edge: "child_campaigns"}
}

// ParentCampaignOrErr returns the ParentCampaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FundraisingCampaignEdges) ParentCampaignOrErr() (*FundraisingCampaign, error) {
	if e.ParentCampaign != nil {
		return e.ParentCampaign, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: fundraisingcampaign.Label}
	}
	return nil, &NotLoadedError{edge: "parent_campaign"}
}

// DonationsOrErr returns the Donations value or an error if the edge
// was not loaded in eager-loading.
func (e FundraisingCampaignEdges) DonationsOrErr() ([]*Donation, error) {
	if e.loadedTypes[3] {
		return e.Donations, nil
	}
	return nil, &NotLoadedError{edge: "donations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FundraisingCampaign) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fundraisingcampaign.FieldTitle, fundraisingcampaign.FieldDescription, fundraisingcampaign.FieldStory, fundraisingcampaign.FieldGalleryImages:
			values[i] = new([]byte)
		case fundraisingcampaign.FieldIsActive, fundraisingcampaign.FieldIsPublic, fundraisingcampaign.FieldAllowRecurring:
			values[i] = new(sql.NullBool)
		case fundraisingcampaign.FieldTargetAmount, fundraisingcampaign.FieldCurrentAmount, fundraisingcampaign.FieldMinimumDonation:
			values[i] = new(sql.NullFloat64)
		case fundraisingcampaign.FieldID, fundraisingcampaign.FieldDonorCount, fundraisingcampaign.FieldShareCount, fundraisingcampaign.FieldViewCount:
			values[i] = new(sql.NullInt64)
		case fundraisingcampaign.FieldSlug, fundraisingcampaign.FieldType, fundraisingcampaign.FieldCategory, fundraisingcampaign.FieldCurrency, fundraisingcampaign.FieldHeroImageURL, fundraisingcampaign.FieldVideoURL, fundraisingcampaign.FieldManagerID:
			values[i] = new(sql.NullString)
		case fundraisingcampaign.FieldStartDate, fundraisingcampaign.FieldEndDate, fundraisingcampaign.FieldCreatedAt, fundraisingcampaign.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fundraisingcampaign.ForeignKeys[0]: // fundraising_campaign_parent_campaign
			values[i] = new(sql.NullInt64)
		case fundraisingcampaign.ForeignKeys[1]: // program_fundraising_campaigns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FundraisingCampaign fields.
func (_m *FundraisingCampaign) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fundraisingcampaign.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case fundraisingcampaign.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case fundraisingcampaign.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case fundraisingcampaign.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case fundraisingcampaign.FieldStory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field story", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Story); err != nil {
					return fmt.Errorf("unmarshal field story: %w", err)
				}
			}
		case fundraisingcampaign.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case fundraisingcampaign.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case fundraisingcampaign.FieldTargetAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field target_amount", values[i])
			} else if value.Valid {
				_m.TargetAmount = value.Float64
			}
		case fundraisingcampaign.FieldCurrentAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current_amount", values[i])
			} else if value.Valid {
				_m.CurrentAmount = value.Float64
			}
		case fundraisingcampaign.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case fundraisingcampaign.FieldMinimumDonation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field minimum_donation", values[i])
			} else if value.Valid {
				_m.MinimumDonation = value.Float64
			}
		case fundraisingcampaign.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case fundraisingcampaign.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case fundraisingcampaign.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case fundraisingcampaign.FieldHeroImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hero_image_url", values[i])
			} else if value.Valid {
				_m.HeroImageURL = value.String
			}
		case fundraisingcampaign.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				_m.VideoURL = value.String
			}
		case fundraisingcampaign.FieldGalleryImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field gallery_images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.GalleryImages); err != nil {
					return fmt.Errorf("unmarshal field gallery_images: %w", err)
				}
			}
		case fundraisingcampaign.FieldManagerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manager_id", values[i])
			} else if value.Valid {
				_m.ManagerID = value.String
			}
		case fundraisingcampaign.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		case fundraisingcampaign.FieldAllowRecurring:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_recurring", values[i])
			} else if value.Valid {
				_m.AllowRecurring = value.Bool
			}
		case fundraisingcampaign.FieldDonorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field donor_count", values[i])
			} else if value.Valid {
				_m.DonorCount = int(value.Int64)
			}
		case fundraisingcampaign.FieldShareCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field share_count", values[i])
			} else if value.Valid {
				_m.ShareCount = int(value.Int64)
			}
		case fundraisingcampaign.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				_m.ViewCount = int(value.Int64)
			}
		case fundraisingcampaign.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case fundraisingcampaign.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case fundraisingcampaign.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fundraising_campaign_parent_campaign", value)
			} else if value.Valid {
				_m.fundraising_campaign_parent_campaign = new(int)
				*_m.fundraising_campaign_parent_campaign = int(value.Int64)
			}
		case fundraisingcampaign.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_fundraising_campaigns", value)
			} else if value.Valid {
				_m.program_fundraising_campaigns = new(int)
				*_m.program_fundraising_campaigns = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FundraisingCampaign.
// This includes values selected through modifiers, order, etc.
func (_m *FundraisingCampaign) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the FundraisingCampaign entity.
func (_m *FundraisingCampaign) QueryProgram() *ProgramQuery {
	return NewFundraisingCampaignClient(_m.config).QueryProgram(_m)
}

// QueryChildCampaigns queries the "child_campaigns" edge of the FundraisingCampaign entity.
func (_m *FundraisingCampaign) QueryChildCampaigns() *FundraisingCampaignQuery {
	return NewFundraisingCampaignClient(_m.config).QueryChildCampaigns(_m)
}

// QueryParentCampaign queries the "parent_campaign" edge of the FundraisingCampaign entity.
func (_m *FundraisingCampaign) QueryParentCampaign() *FundraisingCampaignQuery {
	return NewFundraisingCampaignClient(_m.config).QueryParentCampaign(_m)
}

// QueryDonations queries the "donations" edge of the FundraisingCampaign entity.
func (_m *FundraisingCampaign) QueryDonations() *DonationQuery {
	return NewFundraisingCampaignClient(_m.config).QueryDonations(_m)
}

// Update returns a builder for updating this FundraisingCampaign.
// Note that you need to call FundraisingCampaign.Unwrap() before calling this method if this FundraisingCampaign
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FundraisingCampaign) Update() *FundraisingCampaignUpdateOne {
	return NewFundraisingCampaignClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FundraisingCampaign entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FundraisingCampaign) Unwrap() *FundraisingCampaign {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FundraisingCampaign is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FundraisingCampaign) String() string {
	var builder strings.Builder
	builder.WriteString("FundraisingCampaign(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("story=")
	builder.WriteString(fmt.Sprintf("%v", _m.Story))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("target_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetAmount))
	builder.WriteString(", ")
	builder.WriteString("current_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentAmount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("minimum_donation=")
	builder.WriteString(fmt.Sprintf("%v", _m.MinimumDonation))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("hero_image_url=")
	builder.WriteString(_m.HeroImageURL)
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(_m.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("gallery_images=")
	builder.WriteString(fmt.Sprintf("%v", _m.GalleryImages))
	builder.WriteString(", ")
	builder.WriteString("manager_id=")
	builder.WriteString(_m.ManagerID)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("allow_recurring=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowRecurring))
	builder.WriteString(", ")
	builder.WriteString("donor_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.DonorCount))
	builder.WriteString(", ")
	builder.WriteString("share_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.ShareCount))
	builder.WriteString(", ")
	builder.WriteString("view_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.ViewCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FundraisingCampaigns is a parsable slice of FundraisingCampaign.
type FundraisingCampaigns []*FundraisingCampaign
