// Code generated by ent, DO NOT EDIT.

package impactmetric

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the impactmetric type in the database.
	Label = "impact_metric"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldTargetValue holds the string denoting the target_value field in the database.
	FieldTargetValue = "target_value"
	// FieldCurrentValue holds the string denoting the current_value field in the database.
	FieldCurrentValue = "current_value"
	// FieldTargetDate holds the string denoting the target_date field in the database.
	FieldTargetDate = "target_date"
	// FieldCalculationMethod holds the string denoting the calculation_method field in the database.
	FieldCalculationMethod = "calculation_method"
	// FieldIsAutoCalculated holds the string denoting the is_auto_calculated field in the database.
	FieldIsAutoCalculated = "is_auto_calculated"
	// FieldLastCalculated holds the string denoting the last_calculated field in the database.
	FieldLastCalculated = "last_calculated"
	// FieldDisplayOrder holds the string denoting the display_order field in the database.
	FieldDisplayOrder = "display_order"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldShowOnDashboard holds the string denoting the show_on_dashboard field in the database.
	FieldShowOnDashboard = "show_on_dashboard"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeDataPoints holds the string denoting the data_points edge name in mutations.
	EdgeDataPoints = "data_points"
	// Table holds the table name of the impactmetric in the database.
	Table = "impact_metrics"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "impact_metrics"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_impact_metrics"
	// DataPointsTable is the table that holds the data_points relation/edge.
	DataPointsTable = "impact_data_points"
	// DataPointsInverseTable is the table name for the ImpactDataPoint entity.
	// It exists in this package in order to avoid circular dependency with the "impactdatapoint" package.
	DataPointsInverseTable = "impact_data_points"
	// DataPointsColumn is the table column denoting the data_points relation/edge.
	DataPointsColumn = "impact_metric_data_points"
)

// Columns holds all SQL columns for impactmetric fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldUnit,
	FieldTargetValue,
	FieldCurrentValue,
	FieldTargetDate,
	FieldCalculationMethod,
	FieldIsAutoCalculated,
	FieldLastCalculated,
	FieldDisplayOrder,
	FieldIsPublic,
	FieldShowOnDashboard,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "impact_metrics"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_impact_metrics",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrentValue holds the default value on creation for the "current_value" field.
	DefaultCurrentValue float64
	// DefaultIsAutoCalculated holds the default value on creation for the "is_auto_calculated" field.
	DefaultIsAutoCalculated bool
	// DefaultDisplayOrder holds the default value on creation for the "display_order" field.
	DefaultDisplayOrder int
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultShowOnDashboard holds the default value on creation for the "show_on_dashboard" field.
	DefaultShowOnDashboard bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePARTICIPANTS_SERVED Type = "PARTICIPANTS_SERVED"
	TypeJOBS_CREATED        Type = "JOBS_CREATED"
	TypeBUSINESSES_STARTED  Type = "BUSINESSES_STARTED"
	TypeGRADUATION_RATE     Type = "GRADUATION_RATE"
	TypeVOLUNTEER_HOURS     Type = "VOLUNTEER_HOURS"
	TypeFUNDS_RAISED        Type = "FUNDS_RAISED"
	TypePARTNERSHIPS_FORMED Type = "PARTNERSHIPS_FORMED"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePARTICIPANTS_SERVED, TypeJOBS_CREATED, TypeBUSINESSES_STARTED, TypeGRADUATION_RATE, TypeVOLUNTEER_HOURS, TypeFUNDS_RAISED, TypePARTNERSHIPS_FORMED:
		return nil
	default:
		return fmt.Errorf("impactmetric: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ImpactMetric queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByTargetValue orders the results by the target_value field.
func ByTargetValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetValue, opts...).ToFunc()
}

// ByCurrentValue orders the results by the current_value field.
func ByCurrentValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentValue, opts...).ToFunc()
}

// ByTargetDate orders the results by the target_date field.
func ByTargetDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetDate, opts...).ToFunc()
}

// ByCalculationMethod orders the results by the calculation_method field.
func ByCalculationMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalculationMethod, opts...).ToFunc()
}

// ByIsAutoCalculated orders the results by the is_auto_calculated field.
func ByIsAutoCalculated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAutoCalculated, opts...).ToFunc()
}

// ByLastCalculated orders the results by the last_calculated field.
func ByLastCalculated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastCalculated, opts...).ToFunc()
}

// ByDisplayOrder orders the results by the display_order field.
func ByDisplayOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayOrder, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByShowOnDashboard orders the results by the show_on_dashboard field.
func ByShowOnDashboard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowOnDashboard, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByDataPointsCount orders the results by data_points count.
func ByDataPointsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDataPointsStep(), opts...)
	}
}

// ByDataPoints orders the results by data_points terms.
func ByDataPoints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDataPointsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newDataPointsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DataPointsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DataPointsTable, DataPointsColumn),
	)
}
