// Code generated by ent, DO NOT EDIT.

package blockdivider

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldInternalName, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldHeight, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldColor, v))
}

// Style applies equality check predicate on the "style" field. It's identical to StyleEQ.
func Style(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldStyle, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldUpdatedAt, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContainsFold(FieldInternalName, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotNull(FieldHeight))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContainsFold(FieldColor, v))
}

// StyleEQ applies the EQ predicate on the "style" field.
func StyleEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldStyle, v))
}

// StyleNEQ applies the NEQ predicate on the "style" field.
func StyleNEQ(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldStyle, v))
}

// StyleIn applies the In predicate on the "style" field.
func StyleIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldStyle, vs...))
}

// StyleNotIn applies the NotIn predicate on the "style" field.
func StyleNotIn(vs ...string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldStyle, vs...))
}

// StyleGT applies the GT predicate on the "style" field.
func StyleGT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldStyle, v))
}

// StyleGTE applies the GTE predicate on the "style" field.
func StyleGTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldStyle, v))
}

// StyleLT applies the LT predicate on the "style" field.
func StyleLT(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldStyle, v))
}

// StyleLTE applies the LTE predicate on the "style" field.
func StyleLTE(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldStyle, v))
}

// StyleContains applies the Contains predicate on the "style" field.
func StyleContains(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContains(FieldStyle, v))
}

// StyleHasPrefix applies the HasPrefix predicate on the "style" field.
func StyleHasPrefix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasPrefix(FieldStyle, v))
}

// StyleHasSuffix applies the HasSuffix predicate on the "style" field.
func StyleHasSuffix(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldHasSuffix(FieldStyle, v))
}

// StyleIsNil applies the IsNil predicate on the "style" field.
func StyleIsNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIsNull(FieldStyle))
}

// StyleNotNil applies the NotNil predicate on the "style" field.
func StyleNotNil() predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotNull(FieldStyle))
}

// StyleEqualFold applies the EqualFold predicate on the "style" field.
func StyleEqualFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEqualFold(FieldStyle, v))
}

// StyleContainsFold applies the ContainsFold predicate on the "style" field.
func StyleContainsFold(v string) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldContainsFold(FieldStyle, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlockDivider {
	return predicate.BlockDivider(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockDivider {
	return predicate.BlockDivider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockDivider {
	return predicate.BlockDivider(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockDivider) predicate.BlockDivider {
	return predicate.BlockDivider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockDivider) predicate.BlockDivider {
	return predicate.BlockDivider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockDivider) predicate.BlockDivider {
	return predicate.BlockDivider(sql.NotPredicates(p))
}
