// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/volunteerapplication"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VolunteerOpportunityUpdate is the builder for updating VolunteerOpportunity entities.
type VolunteerOpportunityUpdate struct {
	config
	hooks    []Hook
	mutation *VolunteerOpportunityMutation
}

// Where appends a list predicates to the VolunteerOpportunityUpdate builder.
func (_u *VolunteerOpportunityUpdate) Where(ps ...predicate.VolunteerOpportunity) *VolunteerOpportunityUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *VolunteerOpportunityUpdate) SetTitle(v map[string]string) *VolunteerOpportunityUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *VolunteerOpportunityUpdate) SetDescription(v map[string]string) *VolunteerOpportunityUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetTimeCommitment sets the "time_commitment" field.
func (_u *VolunteerOpportunityUpdate) SetTimeCommitment(v string) *VolunteerOpportunityUpdate {
	_u.mutation.SetTimeCommitment(v)
	return _u
}

// SetNillableTimeCommitment sets the "time_commitment" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableTimeCommitment(v *string) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetTimeCommitment(*v)
	}
	return _u
}

// SetLocation sets the "location" field.
func (_u *VolunteerOpportunityUpdate) SetLocation(v map[string]string) *VolunteerOpportunityUpdate {
	_u.mutation.SetLocation(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *VolunteerOpportunityUpdate) SetIsActive(v bool) *VolunteerOpportunityUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableIsActive(v *bool) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdate) SetMaxVolunteers(v int) *VolunteerOpportunityUpdate {
	_u.mutation.ResetMaxVolunteers()
	_u.mutation.SetMaxVolunteers(v)
	return _u
}

// SetNillableMaxVolunteers sets the "max_volunteers" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableMaxVolunteers(v *int) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetMaxVolunteers(*v)
	}
	return _u
}

// AddMaxVolunteers adds value to the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdate) AddMaxVolunteers(v int) *VolunteerOpportunityUpdate {
	_u.mutation.AddMaxVolunteers(v)
	return _u
}

// ClearMaxVolunteers clears the value of the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdate) ClearMaxVolunteers() *VolunteerOpportunityUpdate {
	_u.mutation.ClearMaxVolunteers()
	return _u
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (_u *VolunteerOpportunityUpdate) SetCurrentVolunteers(v int) *VolunteerOpportunityUpdate {
	_u.mutation.ResetCurrentVolunteers()
	_u.mutation.SetCurrentVolunteers(v)
	return _u
}

// SetNillableCurrentVolunteers sets the "current_volunteers" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableCurrentVolunteers(v *int) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetCurrentVolunteers(*v)
	}
	return _u
}

// AddCurrentVolunteers adds value to the "current_volunteers" field.
func (_u *VolunteerOpportunityUpdate) AddCurrentVolunteers(v int) *VolunteerOpportunityUpdate {
	_u.mutation.AddCurrentVolunteers(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *VolunteerOpportunityUpdate) SetStartDate(v time.Time) *VolunteerOpportunityUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableStartDate(v *time.Time) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *VolunteerOpportunityUpdate) ClearStartDate() *VolunteerOpportunityUpdate {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *VolunteerOpportunityUpdate) SetEndDate(v time.Time) *VolunteerOpportunityUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableEndDate(v *time.Time) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *VolunteerOpportunityUpdate) ClearEndDate() *VolunteerOpportunityUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_u *VolunteerOpportunityUpdate) SetApplicationDeadline(v time.Time) *VolunteerOpportunityUpdate {
	_u.mutation.SetApplicationDeadline(v)
	return _u
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableApplicationDeadline(v *time.Time) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetApplicationDeadline(*v)
	}
	return _u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (_u *VolunteerOpportunityUpdate) ClearApplicationDeadline() *VolunteerOpportunityUpdate {
	_u.mutation.ClearApplicationDeadline()
	return _u
}

// SetRequiredSkills sets the "required_skills" field.
func (_u *VolunteerOpportunityUpdate) SetRequiredSkills(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.SetRequiredSkills(v)
	return _u
}

// AppendRequiredSkills appends value to the "required_skills" field.
func (_u *VolunteerOpportunityUpdate) AppendRequiredSkills(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.AppendRequiredSkills(v)
	return _u
}

// SetPreferredSkills sets the "preferred_skills" field.
func (_u *VolunteerOpportunityUpdate) SetPreferredSkills(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.SetPreferredSkills(v)
	return _u
}

// AppendPreferredSkills appends value to the "preferred_skills" field.
func (_u *VolunteerOpportunityUpdate) AppendPreferredSkills(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.AppendPreferredSkills(v)
	return _u
}

// SetTags sets the "tags" field.
func (_u *VolunteerOpportunityUpdate) SetTags(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *VolunteerOpportunityUpdate) AppendTags(v []string) *VolunteerOpportunityUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// SetIsUrgent sets the "is_urgent" field.
func (_u *VolunteerOpportunityUpdate) SetIsUrgent(v bool) *VolunteerOpportunityUpdate {
	_u.mutation.SetIsUrgent(v)
	return _u
}

// SetNillableIsUrgent sets the "is_urgent" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableIsUrgent(v *bool) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetIsUrgent(*v)
	}
	return _u
}

// SetIsRecurring sets the "is_recurring" field.
func (_u *VolunteerOpportunityUpdate) SetIsRecurring(v bool) *VolunteerOpportunityUpdate {
	_u.mutation.SetIsRecurring(v)
	return _u
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdate) SetNillableIsRecurring(v *bool) *VolunteerOpportunityUpdate {
	if v != nil {
		_u.SetIsRecurring(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerOpportunityUpdate) SetUpdatedAt(v time.Time) *VolunteerOpportunityUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *VolunteerOpportunityUpdate) SetProgramID(id int) *VolunteerOpportunityUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *VolunteerOpportunityUpdate) SetProgram(v *Program) *VolunteerOpportunityUpdate {
	return _u.SetProgramID(v.ID)
}

// AddInterestedVolunteerIDs adds the "interested_volunteers" edge to the VolunteerApplication entity by IDs.
func (_u *VolunteerOpportunityUpdate) AddInterestedVolunteerIDs(ids ...int) *VolunteerOpportunityUpdate {
	_u.mutation.AddInterestedVolunteerIDs(ids...)
	return _u
}

// AddInterestedVolunteers adds the "interested_volunteers" edges to the VolunteerApplication entity.
func (_u *VolunteerOpportunityUpdate) AddInterestedVolunteers(v ...*VolunteerApplication) *VolunteerOpportunityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInterestedVolunteerIDs(ids...)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_u *VolunteerOpportunityUpdate) AddAssignmentIDs(ids ...int) *VolunteerOpportunityUpdate {
	_u.mutation.AddAssignmentIDs(ids...)
	return _u
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_u *VolunteerOpportunityUpdate) AddAssignments(v ...*VolunteerAssignment) *VolunteerOpportunityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssignmentIDs(ids...)
}

// Mutation returns the VolunteerOpportunityMutation object of the builder.
func (_u *VolunteerOpportunityUpdate) Mutation() *VolunteerOpportunityMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *VolunteerOpportunityUpdate) ClearProgram() *VolunteerOpportunityUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearInterestedVolunteers clears all "interested_volunteers" edges to the VolunteerApplication entity.
func (_u *VolunteerOpportunityUpdate) ClearInterestedVolunteers() *VolunteerOpportunityUpdate {
	_u.mutation.ClearInterestedVolunteers()
	return _u
}

// RemoveInterestedVolunteerIDs removes the "interested_volunteers" edge to VolunteerApplication entities by IDs.
func (_u *VolunteerOpportunityUpdate) RemoveInterestedVolunteerIDs(ids ...int) *VolunteerOpportunityUpdate {
	_u.mutation.RemoveInterestedVolunteerIDs(ids...)
	return _u
}

// RemoveInterestedVolunteers removes "interested_volunteers" edges to VolunteerApplication entities.
func (_u *VolunteerOpportunityUpdate) RemoveInterestedVolunteers(v ...*VolunteerApplication) *VolunteerOpportunityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInterestedVolunteerIDs(ids...)
}

// ClearAssignments clears all "assignments" edges to the VolunteerAssignment entity.
func (_u *VolunteerOpportunityUpdate) ClearAssignments() *VolunteerOpportunityUpdate {
	_u.mutation.ClearAssignments()
	return _u
}

// RemoveAssignmentIDs removes the "assignments" edge to VolunteerAssignment entities by IDs.
func (_u *VolunteerOpportunityUpdate) RemoveAssignmentIDs(ids ...int) *VolunteerOpportunityUpdate {
	_u.mutation.RemoveAssignmentIDs(ids...)
	return _u
}

// RemoveAssignments removes "assignments" edges to VolunteerAssignment entities.
func (_u *VolunteerOpportunityUpdate) RemoveAssignments(v ...*VolunteerAssignment) *VolunteerOpportunityUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VolunteerOpportunityUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerOpportunityUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VolunteerOpportunityUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerOpportunityUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerOpportunityUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteeropportunity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerOpportunityUpdate) check() error {
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerOpportunity.program"`)
	}
	return nil
}

func (_u *VolunteerOpportunityUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteeropportunity.Table, volunteeropportunity.Columns, sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(volunteeropportunity.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(volunteeropportunity.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.TimeCommitment(); ok {
		_spec.SetField(volunteeropportunity.FieldTimeCommitment, field.TypeString, value)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(volunteeropportunity.FieldLocation, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(volunteeropportunity.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MaxVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxVolunteers(); ok {
		_spec.AddField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt, value)
	}
	if _u.mutation.MaxVolunteersCleared() {
		_spec.ClearField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt)
	}
	if value, ok := _u.mutation.CurrentVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldCurrentVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCurrentVolunteers(); ok {
		_spec.AddField(volunteeropportunity.FieldCurrentVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(volunteeropportunity.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(volunteeropportunity.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(volunteeropportunity.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(volunteeropportunity.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.ApplicationDeadline(); ok {
		_spec.SetField(volunteeropportunity.FieldApplicationDeadline, field.TypeTime, value)
	}
	if _u.mutation.ApplicationDeadlineCleared() {
		_spec.ClearField(volunteeropportunity.FieldApplicationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldRequiredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldRequiredSkills, value)
		})
	}
	if value, ok := _u.mutation.PreferredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldPreferredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPreferredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldPreferredSkills, value)
		})
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(volunteeropportunity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.IsUrgent(); ok {
		_spec.SetField(volunteeropportunity.FieldIsUrgent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsRecurring(); ok {
		_spec.SetField(volunteeropportunity.FieldIsRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteeropportunity.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InterestedVolunteersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInterestedVolunteersIDs(); len(nodes) > 0 && !_u.mutation.InterestedVolunteersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InterestedVolunteersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssignmentsIDs(); len(nodes) > 0 && !_u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteeropportunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VolunteerOpportunityUpdateOne is the builder for updating a single VolunteerOpportunity entity.
type VolunteerOpportunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VolunteerOpportunityMutation
}

// SetTitle sets the "title" field.
func (_u *VolunteerOpportunityUpdateOne) SetTitle(v map[string]string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *VolunteerOpportunityUpdateOne) SetDescription(v map[string]string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetTimeCommitment sets the "time_commitment" field.
func (_u *VolunteerOpportunityUpdateOne) SetTimeCommitment(v string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetTimeCommitment(v)
	return _u
}

// SetNillableTimeCommitment sets the "time_commitment" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableTimeCommitment(v *string) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetTimeCommitment(*v)
	}
	return _u
}

// SetLocation sets the "location" field.
func (_u *VolunteerOpportunityUpdateOne) SetLocation(v map[string]string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetLocation(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *VolunteerOpportunityUpdateOne) SetIsActive(v bool) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableIsActive(v *bool) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetMaxVolunteers sets the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdateOne) SetMaxVolunteers(v int) *VolunteerOpportunityUpdateOne {
	_u.mutation.ResetMaxVolunteers()
	_u.mutation.SetMaxVolunteers(v)
	return _u
}

// SetNillableMaxVolunteers sets the "max_volunteers" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableMaxVolunteers(v *int) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetMaxVolunteers(*v)
	}
	return _u
}

// AddMaxVolunteers adds value to the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdateOne) AddMaxVolunteers(v int) *VolunteerOpportunityUpdateOne {
	_u.mutation.AddMaxVolunteers(v)
	return _u
}

// ClearMaxVolunteers clears the value of the "max_volunteers" field.
func (_u *VolunteerOpportunityUpdateOne) ClearMaxVolunteers() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearMaxVolunteers()
	return _u
}

// SetCurrentVolunteers sets the "current_volunteers" field.
func (_u *VolunteerOpportunityUpdateOne) SetCurrentVolunteers(v int) *VolunteerOpportunityUpdateOne {
	_u.mutation.ResetCurrentVolunteers()
	_u.mutation.SetCurrentVolunteers(v)
	return _u
}

// SetNillableCurrentVolunteers sets the "current_volunteers" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableCurrentVolunteers(v *int) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetCurrentVolunteers(*v)
	}
	return _u
}

// AddCurrentVolunteers adds value to the "current_volunteers" field.
func (_u *VolunteerOpportunityUpdateOne) AddCurrentVolunteers(v int) *VolunteerOpportunityUpdateOne {
	_u.mutation.AddCurrentVolunteers(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *VolunteerOpportunityUpdateOne) SetStartDate(v time.Time) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableStartDate(v *time.Time) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *VolunteerOpportunityUpdateOne) ClearStartDate() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *VolunteerOpportunityUpdateOne) SetEndDate(v time.Time) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableEndDate(v *time.Time) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *VolunteerOpportunityUpdateOne) ClearEndDate() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_u *VolunteerOpportunityUpdateOne) SetApplicationDeadline(v time.Time) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetApplicationDeadline(v)
	return _u
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableApplicationDeadline(v *time.Time) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetApplicationDeadline(*v)
	}
	return _u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (_u *VolunteerOpportunityUpdateOne) ClearApplicationDeadline() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearApplicationDeadline()
	return _u
}

// SetRequiredSkills sets the "required_skills" field.
func (_u *VolunteerOpportunityUpdateOne) SetRequiredSkills(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetRequiredSkills(v)
	return _u
}

// AppendRequiredSkills appends value to the "required_skills" field.
func (_u *VolunteerOpportunityUpdateOne) AppendRequiredSkills(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.AppendRequiredSkills(v)
	return _u
}

// SetPreferredSkills sets the "preferred_skills" field.
func (_u *VolunteerOpportunityUpdateOne) SetPreferredSkills(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetPreferredSkills(v)
	return _u
}

// AppendPreferredSkills appends value to the "preferred_skills" field.
func (_u *VolunteerOpportunityUpdateOne) AppendPreferredSkills(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.AppendPreferredSkills(v)
	return _u
}

// SetTags sets the "tags" field.
func (_u *VolunteerOpportunityUpdateOne) SetTags(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *VolunteerOpportunityUpdateOne) AppendTags(v []string) *VolunteerOpportunityUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// SetIsUrgent sets the "is_urgent" field.
func (_u *VolunteerOpportunityUpdateOne) SetIsUrgent(v bool) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetIsUrgent(v)
	return _u
}

// SetNillableIsUrgent sets the "is_urgent" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableIsUrgent(v *bool) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetIsUrgent(*v)
	}
	return _u
}

// SetIsRecurring sets the "is_recurring" field.
func (_u *VolunteerOpportunityUpdateOne) SetIsRecurring(v bool) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetIsRecurring(v)
	return _u
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_u *VolunteerOpportunityUpdateOne) SetNillableIsRecurring(v *bool) *VolunteerOpportunityUpdateOne {
	if v != nil {
		_u.SetIsRecurring(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerOpportunityUpdateOne) SetUpdatedAt(v time.Time) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *VolunteerOpportunityUpdateOne) SetProgramID(id int) *VolunteerOpportunityUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *VolunteerOpportunityUpdateOne) SetProgram(v *Program) *VolunteerOpportunityUpdateOne {
	return _u.SetProgramID(v.ID)
}

// AddInterestedVolunteerIDs adds the "interested_volunteers" edge to the VolunteerApplication entity by IDs.
func (_u *VolunteerOpportunityUpdateOne) AddInterestedVolunteerIDs(ids ...int) *VolunteerOpportunityUpdateOne {
	_u.mutation.AddInterestedVolunteerIDs(ids...)
	return _u
}

// AddInterestedVolunteers adds the "interested_volunteers" edges to the VolunteerApplication entity.
func (_u *VolunteerOpportunityUpdateOne) AddInterestedVolunteers(v ...*VolunteerApplication) *VolunteerOpportunityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInterestedVolunteerIDs(ids...)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_u *VolunteerOpportunityUpdateOne) AddAssignmentIDs(ids ...int) *VolunteerOpportunityUpdateOne {
	_u.mutation.AddAssignmentIDs(ids...)
	return _u
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_u *VolunteerOpportunityUpdateOne) AddAssignments(v ...*VolunteerAssignment) *VolunteerOpportunityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssignmentIDs(ids...)
}

// Mutation returns the VolunteerOpportunityMutation object of the builder.
func (_u *VolunteerOpportunityUpdateOne) Mutation() *VolunteerOpportunityMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *VolunteerOpportunityUpdateOne) ClearProgram() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearInterestedVolunteers clears all "interested_volunteers" edges to the VolunteerApplication entity.
func (_u *VolunteerOpportunityUpdateOne) ClearInterestedVolunteers() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearInterestedVolunteers()
	return _u
}

// RemoveInterestedVolunteerIDs removes the "interested_volunteers" edge to VolunteerApplication entities by IDs.
func (_u *VolunteerOpportunityUpdateOne) RemoveInterestedVolunteerIDs(ids ...int) *VolunteerOpportunityUpdateOne {
	_u.mutation.RemoveInterestedVolunteerIDs(ids...)
	return _u
}

// RemoveInterestedVolunteers removes "interested_volunteers" edges to VolunteerApplication entities.
func (_u *VolunteerOpportunityUpdateOne) RemoveInterestedVolunteers(v ...*VolunteerApplication) *VolunteerOpportunityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInterestedVolunteerIDs(ids...)
}

// ClearAssignments clears all "assignments" edges to the VolunteerAssignment entity.
func (_u *VolunteerOpportunityUpdateOne) ClearAssignments() *VolunteerOpportunityUpdateOne {
	_u.mutation.ClearAssignments()
	return _u
}

// RemoveAssignmentIDs removes the "assignments" edge to VolunteerAssignment entities by IDs.
func (_u *VolunteerOpportunityUpdateOne) RemoveAssignmentIDs(ids ...int) *VolunteerOpportunityUpdateOne {
	_u.mutation.RemoveAssignmentIDs(ids...)
	return _u
}

// RemoveAssignments removes "assignments" edges to VolunteerAssignment entities.
func (_u *VolunteerOpportunityUpdateOne) RemoveAssignments(v ...*VolunteerAssignment) *VolunteerOpportunityUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssignmentIDs(ids...)
}

// Where appends a list predicates to the VolunteerOpportunityUpdate builder.
func (_u *VolunteerOpportunityUpdateOne) Where(ps ...predicate.VolunteerOpportunity) *VolunteerOpportunityUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VolunteerOpportunityUpdateOne) Select(field string, fields ...string) *VolunteerOpportunityUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated VolunteerOpportunity entity.
func (_u *VolunteerOpportunityUpdateOne) Save(ctx context.Context) (*VolunteerOpportunity, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerOpportunityUpdateOne) SaveX(ctx context.Context) *VolunteerOpportunity {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VolunteerOpportunityUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerOpportunityUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerOpportunityUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteeropportunity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerOpportunityUpdateOne) check() error {
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerOpportunity.program"`)
	}
	return nil
}

func (_u *VolunteerOpportunityUpdateOne) sqlSave(ctx context.Context) (_node *VolunteerOpportunity, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteeropportunity.Table, volunteeropportunity.Columns, sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VolunteerOpportunity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, volunteeropportunity.FieldID)
		for _, f := range fields {
			if !volunteeropportunity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != volunteeropportunity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(volunteeropportunity.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(volunteeropportunity.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.TimeCommitment(); ok {
		_spec.SetField(volunteeropportunity.FieldTimeCommitment, field.TypeString, value)
	}
	if value, ok := _u.mutation.Location(); ok {
		_spec.SetField(volunteeropportunity.FieldLocation, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(volunteeropportunity.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MaxVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxVolunteers(); ok {
		_spec.AddField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt, value)
	}
	if _u.mutation.MaxVolunteersCleared() {
		_spec.ClearField(volunteeropportunity.FieldMaxVolunteers, field.TypeInt)
	}
	if value, ok := _u.mutation.CurrentVolunteers(); ok {
		_spec.SetField(volunteeropportunity.FieldCurrentVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCurrentVolunteers(); ok {
		_spec.AddField(volunteeropportunity.FieldCurrentVolunteers, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(volunteeropportunity.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(volunteeropportunity.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(volunteeropportunity.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(volunteeropportunity.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.ApplicationDeadline(); ok {
		_spec.SetField(volunteeropportunity.FieldApplicationDeadline, field.TypeTime, value)
	}
	if _u.mutation.ApplicationDeadlineCleared() {
		_spec.ClearField(volunteeropportunity.FieldApplicationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldRequiredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldRequiredSkills, value)
		})
	}
	if value, ok := _u.mutation.PreferredSkills(); ok {
		_spec.SetField(volunteeropportunity.FieldPreferredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPreferredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldPreferredSkills, value)
		})
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(volunteeropportunity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, volunteeropportunity.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.IsUrgent(); ok {
		_spec.SetField(volunteeropportunity.FieldIsUrgent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsRecurring(); ok {
		_spec.SetField(volunteeropportunity.FieldIsRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteeropportunity.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InterestedVolunteersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInterestedVolunteersIDs(); len(nodes) > 0 && !_u.mutation.InterestedVolunteersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InterestedVolunteersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssignmentsIDs(); len(nodes) > 0 && !_u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VolunteerOpportunity{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteeropportunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
