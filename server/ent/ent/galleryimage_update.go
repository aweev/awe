// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/galleryimage"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GalleryImageUpdate is the builder for updating GalleryImage entities.
type GalleryImageUpdate struct {
	config
	hooks    []Hook
	mutation *GalleryImageMutation
}

// Where appends a list predicates to the GalleryImageUpdate builder.
func (_u *GalleryImageUpdate) Where(ps ...predicate.GalleryImage) *GalleryImageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *GalleryImageUpdate) SetOrder(v int) *GalleryImageUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *GalleryImageUpdate) SetNillableOrder(v *int) *GalleryImageUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *GalleryImageUpdate) AddOrder(v int) *GalleryImageUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *GalleryImageUpdate) SetImageURL(v string) *GalleryImageUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *GalleryImageUpdate) SetNillableImageURL(v *string) *GalleryImageUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// SetImageWidth sets the "image_width" field.
func (_u *GalleryImageUpdate) SetImageWidth(v int) *GalleryImageUpdate {
	_u.mutation.ResetImageWidth()
	_u.mutation.SetImageWidth(v)
	return _u
}

// SetNillableImageWidth sets the "image_width" field if the given value is not nil.
func (_u *GalleryImageUpdate) SetNillableImageWidth(v *int) *GalleryImageUpdate {
	if v != nil {
		_u.SetImageWidth(*v)
	}
	return _u
}

// AddImageWidth adds value to the "image_width" field.
func (_u *GalleryImageUpdate) AddImageWidth(v int) *GalleryImageUpdate {
	_u.mutation.AddImageWidth(v)
	return _u
}

// ClearImageWidth clears the value of the "image_width" field.
func (_u *GalleryImageUpdate) ClearImageWidth() *GalleryImageUpdate {
	_u.mutation.ClearImageWidth()
	return _u
}

// SetImageHeight sets the "image_height" field.
func (_u *GalleryImageUpdate) SetImageHeight(v int) *GalleryImageUpdate {
	_u.mutation.ResetImageHeight()
	_u.mutation.SetImageHeight(v)
	return _u
}

// SetNillableImageHeight sets the "image_height" field if the given value is not nil.
func (_u *GalleryImageUpdate) SetNillableImageHeight(v *int) *GalleryImageUpdate {
	if v != nil {
		_u.SetImageHeight(*v)
	}
	return _u
}

// AddImageHeight adds value to the "image_height" field.
func (_u *GalleryImageUpdate) AddImageHeight(v int) *GalleryImageUpdate {
	_u.mutation.AddImageHeight(v)
	return _u
}

// ClearImageHeight clears the value of the "image_height" field.
func (_u *GalleryImageUpdate) ClearImageHeight() *GalleryImageUpdate {
	_u.mutation.ClearImageHeight()
	return _u
}

// SetAltText sets the "alt_text" field.
func (_u *GalleryImageUpdate) SetAltText(v map[string]string) *GalleryImageUpdate {
	_u.mutation.SetAltText(v)
	return _u
}

// SetCaption sets the "caption" field.
func (_u *GalleryImageUpdate) SetCaption(v map[string]string) *GalleryImageUpdate {
	_u.mutation.SetCaption(v)
	return _u
}

// ClearCaption clears the value of the "caption" field.
func (_u *GalleryImageUpdate) ClearCaption() *GalleryImageUpdate {
	_u.mutation.ClearCaption()
	return _u
}

// SetBlockID sets the "block" edge to the BlockGallery entity by ID.
func (_u *GalleryImageUpdate) SetBlockID(id int) *GalleryImageUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockGallery entity.
func (_u *GalleryImageUpdate) SetBlock(v *BlockGallery) *GalleryImageUpdate {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the GalleryImageMutation object of the builder.
func (_u *GalleryImageUpdate) Mutation() *GalleryImageMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockGallery entity.
func (_u *GalleryImageUpdate) ClearBlock() *GalleryImageUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GalleryImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GalleryImageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GalleryImageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GalleryImageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GalleryImageUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GalleryImage.block"`)
	}
	return nil
}

func (_u *GalleryImageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(galleryimage.Table, galleryimage.Columns, sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(galleryimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(galleryimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(galleryimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImageWidth(); ok {
		_spec.SetField(galleryimage.FieldImageWidth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedImageWidth(); ok {
		_spec.AddField(galleryimage.FieldImageWidth, field.TypeInt, value)
	}
	if _u.mutation.ImageWidthCleared() {
		_spec.ClearField(galleryimage.FieldImageWidth, field.TypeInt)
	}
	if value, ok := _u.mutation.ImageHeight(); ok {
		_spec.SetField(galleryimage.FieldImageHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedImageHeight(); ok {
		_spec.AddField(galleryimage.FieldImageHeight, field.TypeInt, value)
	}
	if _u.mutation.ImageHeightCleared() {
		_spec.ClearField(galleryimage.FieldImageHeight, field.TypeInt)
	}
	if value, ok := _u.mutation.AltText(); ok {
		_spec.SetField(galleryimage.FieldAltText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Caption(); ok {
		_spec.SetField(galleryimage.FieldCaption, field.TypeJSON, value)
	}
	if _u.mutation.CaptionCleared() {
		_spec.ClearField(galleryimage.FieldCaption, field.TypeJSON)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{galleryimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GalleryImageUpdateOne is the builder for updating a single GalleryImage entity.
type GalleryImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GalleryImageMutation
}

// SetOrder sets the "order" field.
func (_u *GalleryImageUpdateOne) SetOrder(v int) *GalleryImageUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *GalleryImageUpdateOne) SetNillableOrder(v *int) *GalleryImageUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *GalleryImageUpdateOne) AddOrder(v int) *GalleryImageUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *GalleryImageUpdateOne) SetImageURL(v string) *GalleryImageUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *GalleryImageUpdateOne) SetNillableImageURL(v *string) *GalleryImageUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// SetImageWidth sets the "image_width" field.
func (_u *GalleryImageUpdateOne) SetImageWidth(v int) *GalleryImageUpdateOne {
	_u.mutation.ResetImageWidth()
	_u.mutation.SetImageWidth(v)
	return _u
}

// SetNillableImageWidth sets the "image_width" field if the given value is not nil.
func (_u *GalleryImageUpdateOne) SetNillableImageWidth(v *int) *GalleryImageUpdateOne {
	if v != nil {
		_u.SetImageWidth(*v)
	}
	return _u
}

// AddImageWidth adds value to the "image_width" field.
func (_u *GalleryImageUpdateOne) AddImageWidth(v int) *GalleryImageUpdateOne {
	_u.mutation.AddImageWidth(v)
	return _u
}

// ClearImageWidth clears the value of the "image_width" field.
func (_u *GalleryImageUpdateOne) ClearImageWidth() *GalleryImageUpdateOne {
	_u.mutation.ClearImageWidth()
	return _u
}

// SetImageHeight sets the "image_height" field.
func (_u *GalleryImageUpdateOne) SetImageHeight(v int) *GalleryImageUpdateOne {
	_u.mutation.ResetImageHeight()
	_u.mutation.SetImageHeight(v)
	return _u
}

// SetNillableImageHeight sets the "image_height" field if the given value is not nil.
func (_u *GalleryImageUpdateOne) SetNillableImageHeight(v *int) *GalleryImageUpdateOne {
	if v != nil {
		_u.SetImageHeight(*v)
	}
	return _u
}

// AddImageHeight adds value to the "image_height" field.
func (_u *GalleryImageUpdateOne) AddImageHeight(v int) *GalleryImageUpdateOne {
	_u.mutation.AddImageHeight(v)
	return _u
}

// ClearImageHeight clears the value of the "image_height" field.
func (_u *GalleryImageUpdateOne) ClearImageHeight() *GalleryImageUpdateOne {
	_u.mutation.ClearImageHeight()
	return _u
}

// SetAltText sets the "alt_text" field.
func (_u *GalleryImageUpdateOne) SetAltText(v map[string]string) *GalleryImageUpdateOne {
	_u.mutation.SetAltText(v)
	return _u
}

// SetCaption sets the "caption" field.
func (_u *GalleryImageUpdateOne) SetCaption(v map[string]string) *GalleryImageUpdateOne {
	_u.mutation.SetCaption(v)
	return _u
}

// ClearCaption clears the value of the "caption" field.
func (_u *GalleryImageUpdateOne) ClearCaption() *GalleryImageUpdateOne {
	_u.mutation.ClearCaption()
	return _u
}

// SetBlockID sets the "block" edge to the BlockGallery entity by ID.
func (_u *GalleryImageUpdateOne) SetBlockID(id int) *GalleryImageUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockGallery entity.
func (_u *GalleryImageUpdateOne) SetBlock(v *BlockGallery) *GalleryImageUpdateOne {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the GalleryImageMutation object of the builder.
func (_u *GalleryImageUpdateOne) Mutation() *GalleryImageMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockGallery entity.
func (_u *GalleryImageUpdateOne) ClearBlock() *GalleryImageUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// Where appends a list predicates to the GalleryImageUpdate builder.
func (_u *GalleryImageUpdateOne) Where(ps ...predicate.GalleryImage) *GalleryImageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GalleryImageUpdateOne) Select(field string, fields ...string) *GalleryImageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GalleryImage entity.
func (_u *GalleryImageUpdateOne) Save(ctx context.Context) (*GalleryImage, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GalleryImageUpdateOne) SaveX(ctx context.Context) *GalleryImage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GalleryImageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GalleryImageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GalleryImageUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GalleryImage.block"`)
	}
	return nil
}

func (_u *GalleryImageUpdateOne) sqlSave(ctx context.Context) (_node *GalleryImage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(galleryimage.Table, galleryimage.Columns, sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GalleryImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, galleryimage.FieldID)
		for _, f := range fields {
			if !galleryimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != galleryimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(galleryimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(galleryimage.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(galleryimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ImageWidth(); ok {
		_spec.SetField(galleryimage.FieldImageWidth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedImageWidth(); ok {
		_spec.AddField(galleryimage.FieldImageWidth, field.TypeInt, value)
	}
	if _u.mutation.ImageWidthCleared() {
		_spec.ClearField(galleryimage.FieldImageWidth, field.TypeInt)
	}
	if value, ok := _u.mutation.ImageHeight(); ok {
		_spec.SetField(galleryimage.FieldImageHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedImageHeight(); ok {
		_spec.AddField(galleryimage.FieldImageHeight, field.TypeInt, value)
	}
	if _u.mutation.ImageHeightCleared() {
		_spec.ClearField(galleryimage.FieldImageHeight, field.TypeInt)
	}
	if value, ok := _u.mutation.AltText(); ok {
		_spec.SetField(galleryimage.FieldAltText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Caption(); ok {
		_spec.SetField(galleryimage.FieldCaption, field.TypeJSON, value)
	}
	if _u.mutation.CaptionCleared() {
		_spec.ClearField(galleryimage.FieldCaption, field.TypeJSON)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GalleryImage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{galleryimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
