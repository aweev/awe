// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/page"
	"awe/ent/ent/seoconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeoConfigCreate is the builder for creating a SeoConfig entity.
type SeoConfigCreate struct {
	config
	mutation *SeoConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMetaTitle sets the "meta_title" field.
func (_c *SeoConfigCreate) SetMetaTitle(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetMetaTitle(v)
	return _c
}

// SetMetaDescription sets the "meta_description" field.
func (_c *SeoConfigCreate) SetMetaDescription(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetMetaDescription(v)
	return _c
}

// SetKeywords sets the "keywords" field.
func (_c *SeoConfigCreate) SetKeywords(v map[string][]string) *SeoConfigCreate {
	_c.mutation.SetKeywords(v)
	return _c
}

// SetOgTitle sets the "og_title" field.
func (_c *SeoConfigCreate) SetOgTitle(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetOgTitle(v)
	return _c
}

// SetOgDescription sets the "og_description" field.
func (_c *SeoConfigCreate) SetOgDescription(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetOgDescription(v)
	return _c
}

// SetOgImageURL sets the "og_image_url" field.
func (_c *SeoConfigCreate) SetOgImageURL(v string) *SeoConfigCreate {
	_c.mutation.SetOgImageURL(v)
	return _c
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableOgImageURL(v *string) *SeoConfigCreate {
	if v != nil {
		_c.SetOgImageURL(*v)
	}
	return _c
}

// SetOgType sets the "og_type" field.
func (_c *SeoConfigCreate) SetOgType(v string) *SeoConfigCreate {
	_c.mutation.SetOgType(v)
	return _c
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableOgType(v *string) *SeoConfigCreate {
	if v != nil {
		_c.SetOgType(*v)
	}
	return _c
}

// SetTwitterCard sets the "twitter_card" field.
func (_c *SeoConfigCreate) SetTwitterCard(v string) *SeoConfigCreate {
	_c.mutation.SetTwitterCard(v)
	return _c
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableTwitterCard(v *string) *SeoConfigCreate {
	if v != nil {
		_c.SetTwitterCard(*v)
	}
	return _c
}

// SetTwitterTitle sets the "twitter_title" field.
func (_c *SeoConfigCreate) SetTwitterTitle(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetTwitterTitle(v)
	return _c
}

// SetTwitterDescription sets the "twitter_description" field.
func (_c *SeoConfigCreate) SetTwitterDescription(v map[string]string) *SeoConfigCreate {
	_c.mutation.SetTwitterDescription(v)
	return _c
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (_c *SeoConfigCreate) SetTwitterImageURL(v string) *SeoConfigCreate {
	_c.mutation.SetTwitterImageURL(v)
	return _c
}

// SetNillableTwitterImageURL sets the "twitter_image_url" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableTwitterImageURL(v *string) *SeoConfigCreate {
	if v != nil {
		_c.SetTwitterImageURL(*v)
	}
	return _c
}

// SetCanonicalURL sets the "canonical_url" field.
func (_c *SeoConfigCreate) SetCanonicalURL(v string) *SeoConfigCreate {
	_c.mutation.SetCanonicalURL(v)
	return _c
}

// SetNillableCanonicalURL sets the "canonical_url" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableCanonicalURL(v *string) *SeoConfigCreate {
	if v != nil {
		_c.SetCanonicalURL(*v)
	}
	return _c
}

// SetNoindex sets the "noindex" field.
func (_c *SeoConfigCreate) SetNoindex(v bool) *SeoConfigCreate {
	_c.mutation.SetNoindex(v)
	return _c
}

// SetNillableNoindex sets the "noindex" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableNoindex(v *bool) *SeoConfigCreate {
	if v != nil {
		_c.SetNoindex(*v)
	}
	return _c
}

// SetNofollow sets the "nofollow" field.
func (_c *SeoConfigCreate) SetNofollow(v bool) *SeoConfigCreate {
	_c.mutation.SetNofollow(v)
	return _c
}

// SetNillableNofollow sets the "nofollow" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableNofollow(v *bool) *SeoConfigCreate {
	if v != nil {
		_c.SetNofollow(*v)
	}
	return _c
}

// SetStructuredData sets the "structured_data" field.
func (_c *SeoConfigCreate) SetStructuredData(v map[string]interface{}) *SeoConfigCreate {
	_c.mutation.SetStructuredData(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SeoConfigCreate) SetUpdatedAt(v time.Time) *SeoConfigCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SeoConfigCreate) SetNillableUpdatedAt(v *time.Time) *SeoConfigCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_c *SeoConfigCreate) SetPageID(id int) *SeoConfigCreate {
	_c.mutation.SetPageID(id)
	return _c
}

// SetPage sets the "page" edge to the Page entity.
func (_c *SeoConfigCreate) SetPage(v *Page) *SeoConfigCreate {
	return _c.SetPageID(v.ID)
}

// Mutation returns the SeoConfigMutation object of the builder.
func (_c *SeoConfigCreate) Mutation() *SeoConfigMutation {
	return _c.mutation
}

// Save creates the SeoConfig in the database.
func (_c *SeoConfigCreate) Save(ctx context.Context) (*SeoConfig, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SeoConfigCreate) SaveX(ctx context.Context) *SeoConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SeoConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SeoConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SeoConfigCreate) defaults() {
	if _, ok := _c.mutation.OgType(); !ok {
		v := seoconfig.DefaultOgType
		_c.mutation.SetOgType(v)
	}
	if _, ok := _c.mutation.TwitterCard(); !ok {
		v := seoconfig.DefaultTwitterCard
		_c.mutation.SetTwitterCard(v)
	}
	if _, ok := _c.mutation.Noindex(); !ok {
		v := seoconfig.DefaultNoindex
		_c.mutation.SetNoindex(v)
	}
	if _, ok := _c.mutation.Nofollow(); !ok {
		v := seoconfig.DefaultNofollow
		_c.mutation.SetNofollow(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := seoconfig.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SeoConfigCreate) check() error {
	if _, ok := _c.mutation.MetaTitle(); !ok {
		return &ValidationError{Name: "meta_title", err: errors.New(`ent: missing required field "SeoConfig.meta_title"`)}
	}
	if _, ok := _c.mutation.OgType(); !ok {
		return &ValidationError{Name: "og_type", err: errors.New(`ent: missing required field "SeoConfig.og_type"`)}
	}
	if _, ok := _c.mutation.TwitterCard(); !ok {
		return &ValidationError{Name: "twitter_card", err: errors.New(`ent: missing required field "SeoConfig.twitter_card"`)}
	}
	if _, ok := _c.mutation.Noindex(); !ok {
		return &ValidationError{Name: "noindex", err: errors.New(`ent: missing required field "SeoConfig.noindex"`)}
	}
	if _, ok := _c.mutation.Nofollow(); !ok {
		return &ValidationError{Name: "nofollow", err: errors.New(`ent: missing required field "SeoConfig.nofollow"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SeoConfig.updated_at"`)}
	}
	if len(_c.mutation.PageIDs()) == 0 {
		return &ValidationError{Name: "page", err: errors.New(`ent: missing required edge "SeoConfig.page"`)}
	}
	return nil
}

func (_c *SeoConfigCreate) sqlSave(ctx context.Context) (*SeoConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SeoConfigCreate) createSpec() (*SeoConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SeoConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(seoconfig.Table, sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.MetaTitle(); ok {
		_spec.SetField(seoconfig.FieldMetaTitle, field.TypeJSON, value)
		_node.MetaTitle = value
	}
	if value, ok := _c.mutation.MetaDescription(); ok {
		_spec.SetField(seoconfig.FieldMetaDescription, field.TypeJSON, value)
		_node.MetaDescription = value
	}
	if value, ok := _c.mutation.Keywords(); ok {
		_spec.SetField(seoconfig.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if value, ok := _c.mutation.OgTitle(); ok {
		_spec.SetField(seoconfig.FieldOgTitle, field.TypeJSON, value)
		_node.OgTitle = value
	}
	if value, ok := _c.mutation.OgDescription(); ok {
		_spec.SetField(seoconfig.FieldOgDescription, field.TypeJSON, value)
		_node.OgDescription = value
	}
	if value, ok := _c.mutation.OgImageURL(); ok {
		_spec.SetField(seoconfig.FieldOgImageURL, field.TypeString, value)
		_node.OgImageURL = value
	}
	if value, ok := _c.mutation.OgType(); ok {
		_spec.SetField(seoconfig.FieldOgType, field.TypeString, value)
		_node.OgType = value
	}
	if value, ok := _c.mutation.TwitterCard(); ok {
		_spec.SetField(seoconfig.FieldTwitterCard, field.TypeString, value)
		_node.TwitterCard = value
	}
	if value, ok := _c.mutation.TwitterTitle(); ok {
		_spec.SetField(seoconfig.FieldTwitterTitle, field.TypeJSON, value)
		_node.TwitterTitle = value
	}
	if value, ok := _c.mutation.TwitterDescription(); ok {
		_spec.SetField(seoconfig.FieldTwitterDescription, field.TypeJSON, value)
		_node.TwitterDescription = value
	}
	if value, ok := _c.mutation.TwitterImageURL(); ok {
		_spec.SetField(seoconfig.FieldTwitterImageURL, field.TypeString, value)
		_node.TwitterImageURL = value
	}
	if value, ok := _c.mutation.CanonicalURL(); ok {
		_spec.SetField(seoconfig.FieldCanonicalURL, field.TypeString, value)
		_node.CanonicalURL = value
	}
	if value, ok := _c.mutation.Noindex(); ok {
		_spec.SetField(seoconfig.FieldNoindex, field.TypeBool, value)
		_node.Noindex = value
	}
	if value, ok := _c.mutation.Nofollow(); ok {
		_spec.SetField(seoconfig.FieldNofollow, field.TypeBool, value)
		_node.Nofollow = value
	}
	if value, ok := _c.mutation.StructuredData(); ok {
		_spec.SetField(seoconfig.FieldStructuredData, field.TypeJSON, value)
		_node.StructuredData = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(seoconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.page_seo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeoConfig.Create().
//		SetMetaTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeoConfigUpsert) {
//			SetMetaTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *SeoConfigCreate) OnConflict(opts ...sql.ConflictOption) *SeoConfigUpsertOne {
	_c.conflict = opts
	return &SeoConfigUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SeoConfigCreate) OnConflictColumns(columns ...string) *SeoConfigUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SeoConfigUpsertOne{
		create: _c,
	}
}

type (
	// SeoConfigUpsertOne is the builder for "upsert"-ing
	//  one SeoConfig node.
	SeoConfigUpsertOne struct {
		create *SeoConfigCreate
	}

	// SeoConfigUpsert is the "OnConflict" setter.
	SeoConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetaTitle sets the "meta_title" field.
func (u *SeoConfigUpsert) SetMetaTitle(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldMetaTitle, v)
	return u
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateMetaTitle() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldMetaTitle)
	return u
}

// SetMetaDescription sets the "meta_description" field.
func (u *SeoConfigUpsert) SetMetaDescription(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldMetaDescription, v)
	return u
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateMetaDescription() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldMetaDescription)
	return u
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *SeoConfigUpsert) ClearMetaDescription() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldMetaDescription)
	return u
}

// SetKeywords sets the "keywords" field.
func (u *SeoConfigUpsert) SetKeywords(v map[string][]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldKeywords, v)
	return u
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateKeywords() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldKeywords)
	return u
}

// ClearKeywords clears the value of the "keywords" field.
func (u *SeoConfigUpsert) ClearKeywords() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldKeywords)
	return u
}

// SetOgTitle sets the "og_title" field.
func (u *SeoConfigUpsert) SetOgTitle(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldOgTitle, v)
	return u
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateOgTitle() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldOgTitle)
	return u
}

// ClearOgTitle clears the value of the "og_title" field.
func (u *SeoConfigUpsert) ClearOgTitle() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldOgTitle)
	return u
}

// SetOgDescription sets the "og_description" field.
func (u *SeoConfigUpsert) SetOgDescription(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldOgDescription, v)
	return u
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateOgDescription() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldOgDescription)
	return u
}

// ClearOgDescription clears the value of the "og_description" field.
func (u *SeoConfigUpsert) ClearOgDescription() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldOgDescription)
	return u
}

// SetOgImageURL sets the "og_image_url" field.
func (u *SeoConfigUpsert) SetOgImageURL(v string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldOgImageURL, v)
	return u
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateOgImageURL() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldOgImageURL)
	return u
}

// ClearOgImageURL clears the value of the "og_image_url" field.
func (u *SeoConfigUpsert) ClearOgImageURL() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldOgImageURL)
	return u
}

// SetOgType sets the "og_type" field.
func (u *SeoConfigUpsert) SetOgType(v string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldOgType, v)
	return u
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateOgType() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldOgType)
	return u
}

// SetTwitterCard sets the "twitter_card" field.
func (u *SeoConfigUpsert) SetTwitterCard(v string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldTwitterCard, v)
	return u
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateTwitterCard() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldTwitterCard)
	return u
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *SeoConfigUpsert) SetTwitterTitle(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldTwitterTitle, v)
	return u
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateTwitterTitle() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldTwitterTitle)
	return u
}

// ClearTwitterTitle clears the value of the "twitter_title" field.
func (u *SeoConfigUpsert) ClearTwitterTitle() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldTwitterTitle)
	return u
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *SeoConfigUpsert) SetTwitterDescription(v map[string]string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldTwitterDescription, v)
	return u
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateTwitterDescription() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldTwitterDescription)
	return u
}

// ClearTwitterDescription clears the value of the "twitter_description" field.
func (u *SeoConfigUpsert) ClearTwitterDescription() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldTwitterDescription)
	return u
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (u *SeoConfigUpsert) SetTwitterImageURL(v string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldTwitterImageURL, v)
	return u
}

// UpdateTwitterImageURL sets the "twitter_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateTwitterImageURL() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldTwitterImageURL)
	return u
}

// ClearTwitterImageURL clears the value of the "twitter_image_url" field.
func (u *SeoConfigUpsert) ClearTwitterImageURL() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldTwitterImageURL)
	return u
}

// SetCanonicalURL sets the "canonical_url" field.
func (u *SeoConfigUpsert) SetCanonicalURL(v string) *SeoConfigUpsert {
	u.Set(seoconfig.FieldCanonicalURL, v)
	return u
}

// UpdateCanonicalURL sets the "canonical_url" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateCanonicalURL() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldCanonicalURL)
	return u
}

// ClearCanonicalURL clears the value of the "canonical_url" field.
func (u *SeoConfigUpsert) ClearCanonicalURL() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldCanonicalURL)
	return u
}

// SetNoindex sets the "noindex" field.
func (u *SeoConfigUpsert) SetNoindex(v bool) *SeoConfigUpsert {
	u.Set(seoconfig.FieldNoindex, v)
	return u
}

// UpdateNoindex sets the "noindex" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateNoindex() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldNoindex)
	return u
}

// SetNofollow sets the "nofollow" field.
func (u *SeoConfigUpsert) SetNofollow(v bool) *SeoConfigUpsert {
	u.Set(seoconfig.FieldNofollow, v)
	return u
}

// UpdateNofollow sets the "nofollow" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateNofollow() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldNofollow)
	return u
}

// SetStructuredData sets the "structured_data" field.
func (u *SeoConfigUpsert) SetStructuredData(v map[string]interface{}) *SeoConfigUpsert {
	u.Set(seoconfig.FieldStructuredData, v)
	return u
}

// UpdateStructuredData sets the "structured_data" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateStructuredData() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldStructuredData)
	return u
}

// ClearStructuredData clears the value of the "structured_data" field.
func (u *SeoConfigUpsert) ClearStructuredData() *SeoConfigUpsert {
	u.SetNull(seoconfig.FieldStructuredData)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SeoConfigUpsert) SetUpdatedAt(v time.Time) *SeoConfigUpsert {
	u.Set(seoconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeoConfigUpsert) UpdateUpdatedAt() *SeoConfigUpsert {
	u.SetExcluded(seoconfig.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SeoConfigUpsertOne) UpdateNewValues() *SeoConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SeoConfigUpsertOne) Ignore() *SeoConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeoConfigUpsertOne) DoNothing() *SeoConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeoConfigCreate.OnConflict
// documentation for more info.
func (u *SeoConfigUpsertOne) Update(set func(*SeoConfigUpsert)) *SeoConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeoConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetaTitle sets the "meta_title" field.
func (u *SeoConfigUpsertOne) SetMetaTitle(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetMetaTitle(v)
	})
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateMetaTitle() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateMetaTitle()
	})
}

// SetMetaDescription sets the "meta_description" field.
func (u *SeoConfigUpsertOne) SetMetaDescription(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetMetaDescription(v)
	})
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateMetaDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateMetaDescription()
	})
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *SeoConfigUpsertOne) ClearMetaDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearMetaDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *SeoConfigUpsertOne) SetKeywords(v map[string][]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateKeywords() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateKeywords()
	})
}

// ClearKeywords clears the value of the "keywords" field.
func (u *SeoConfigUpsertOne) ClearKeywords() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearKeywords()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *SeoConfigUpsertOne) SetOgTitle(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateOgTitle() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgTitle()
	})
}

// ClearOgTitle clears the value of the "og_title" field.
func (u *SeoConfigUpsertOne) ClearOgTitle() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *SeoConfigUpsertOne) SetOgDescription(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateOgDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgDescription()
	})
}

// ClearOgDescription clears the value of the "og_description" field.
func (u *SeoConfigUpsertOne) ClearOgDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgDescription()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *SeoConfigUpsertOne) SetOgImageURL(v string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateOgImageURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgImageURL()
	})
}

// ClearOgImageURL clears the value of the "og_image_url" field.
func (u *SeoConfigUpsertOne) ClearOgImageURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgImageURL()
	})
}

// SetOgType sets the "og_type" field.
func (u *SeoConfigUpsertOne) SetOgType(v string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateOgType() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgType()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *SeoConfigUpsertOne) SetTwitterCard(v string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateTwitterCard() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *SeoConfigUpsertOne) SetTwitterTitle(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateTwitterTitle() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterTitle()
	})
}

// ClearTwitterTitle clears the value of the "twitter_title" field.
func (u *SeoConfigUpsertOne) ClearTwitterTitle() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *SeoConfigUpsertOne) SetTwitterDescription(v map[string]string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateTwitterDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterDescription()
	})
}

// ClearTwitterDescription clears the value of the "twitter_description" field.
func (u *SeoConfigUpsertOne) ClearTwitterDescription() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterDescription()
	})
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (u *SeoConfigUpsertOne) SetTwitterImageURL(v string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterImageURL(v)
	})
}

// UpdateTwitterImageURL sets the "twitter_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateTwitterImageURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterImageURL()
	})
}

// ClearTwitterImageURL clears the value of the "twitter_image_url" field.
func (u *SeoConfigUpsertOne) ClearTwitterImageURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterImageURL()
	})
}

// SetCanonicalURL sets the "canonical_url" field.
func (u *SeoConfigUpsertOne) SetCanonicalURL(v string) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetCanonicalURL(v)
	})
}

// UpdateCanonicalURL sets the "canonical_url" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateCanonicalURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateCanonicalURL()
	})
}

// ClearCanonicalURL clears the value of the "canonical_url" field.
func (u *SeoConfigUpsertOne) ClearCanonicalURL() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearCanonicalURL()
	})
}

// SetNoindex sets the "noindex" field.
func (u *SeoConfigUpsertOne) SetNoindex(v bool) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetNoindex(v)
	})
}

// UpdateNoindex sets the "noindex" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateNoindex() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateNoindex()
	})
}

// SetNofollow sets the "nofollow" field.
func (u *SeoConfigUpsertOne) SetNofollow(v bool) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetNofollow(v)
	})
}

// UpdateNofollow sets the "nofollow" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateNofollow() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateNofollow()
	})
}

// SetStructuredData sets the "structured_data" field.
func (u *SeoConfigUpsertOne) SetStructuredData(v map[string]interface{}) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetStructuredData(v)
	})
}

// UpdateStructuredData sets the "structured_data" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateStructuredData() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateStructuredData()
	})
}

// ClearStructuredData clears the value of the "structured_data" field.
func (u *SeoConfigUpsertOne) ClearStructuredData() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearStructuredData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SeoConfigUpsertOne) SetUpdatedAt(v time.Time) *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeoConfigUpsertOne) UpdateUpdatedAt() *SeoConfigUpsertOne {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SeoConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeoConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeoConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SeoConfigUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SeoConfigUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SeoConfigCreateBulk is the builder for creating many SeoConfig entities in bulk.
type SeoConfigCreateBulk struct {
	config
	err      error
	builders []*SeoConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the SeoConfig entities in the database.
func (_c *SeoConfigCreateBulk) Save(ctx context.Context) ([]*SeoConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SeoConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeoConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SeoConfigCreateBulk) SaveX(ctx context.Context) []*SeoConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SeoConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SeoConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeoConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeoConfigUpsert) {
//			SetMetaTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *SeoConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *SeoConfigUpsertBulk {
	_c.conflict = opts
	return &SeoConfigUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SeoConfigCreateBulk) OnConflictColumns(columns ...string) *SeoConfigUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SeoConfigUpsertBulk{
		create: _c,
	}
}

// SeoConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of SeoConfig nodes.
type SeoConfigUpsertBulk struct {
	create *SeoConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SeoConfigUpsertBulk) UpdateNewValues() *SeoConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeoConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SeoConfigUpsertBulk) Ignore() *SeoConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeoConfigUpsertBulk) DoNothing() *SeoConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeoConfigCreateBulk.OnConflict
// documentation for more info.
func (u *SeoConfigUpsertBulk) Update(set func(*SeoConfigUpsert)) *SeoConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeoConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetaTitle sets the "meta_title" field.
func (u *SeoConfigUpsertBulk) SetMetaTitle(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetMetaTitle(v)
	})
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateMetaTitle() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateMetaTitle()
	})
}

// SetMetaDescription sets the "meta_description" field.
func (u *SeoConfigUpsertBulk) SetMetaDescription(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetMetaDescription(v)
	})
}

// UpdateMetaDescription sets the "meta_description" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateMetaDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateMetaDescription()
	})
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (u *SeoConfigUpsertBulk) ClearMetaDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearMetaDescription()
	})
}

// SetKeywords sets the "keywords" field.
func (u *SeoConfigUpsertBulk) SetKeywords(v map[string][]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetKeywords(v)
	})
}

// UpdateKeywords sets the "keywords" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateKeywords() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateKeywords()
	})
}

// ClearKeywords clears the value of the "keywords" field.
func (u *SeoConfigUpsertBulk) ClearKeywords() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearKeywords()
	})
}

// SetOgTitle sets the "og_title" field.
func (u *SeoConfigUpsertBulk) SetOgTitle(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgTitle(v)
	})
}

// UpdateOgTitle sets the "og_title" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateOgTitle() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgTitle()
	})
}

// ClearOgTitle clears the value of the "og_title" field.
func (u *SeoConfigUpsertBulk) ClearOgTitle() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgTitle()
	})
}

// SetOgDescription sets the "og_description" field.
func (u *SeoConfigUpsertBulk) SetOgDescription(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgDescription(v)
	})
}

// UpdateOgDescription sets the "og_description" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateOgDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgDescription()
	})
}

// ClearOgDescription clears the value of the "og_description" field.
func (u *SeoConfigUpsertBulk) ClearOgDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgDescription()
	})
}

// SetOgImageURL sets the "og_image_url" field.
func (u *SeoConfigUpsertBulk) SetOgImageURL(v string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgImageURL(v)
	})
}

// UpdateOgImageURL sets the "og_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateOgImageURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgImageURL()
	})
}

// ClearOgImageURL clears the value of the "og_image_url" field.
func (u *SeoConfigUpsertBulk) ClearOgImageURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearOgImageURL()
	})
}

// SetOgType sets the "og_type" field.
func (u *SeoConfigUpsertBulk) SetOgType(v string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetOgType(v)
	})
}

// UpdateOgType sets the "og_type" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateOgType() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateOgType()
	})
}

// SetTwitterCard sets the "twitter_card" field.
func (u *SeoConfigUpsertBulk) SetTwitterCard(v string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterCard(v)
	})
}

// UpdateTwitterCard sets the "twitter_card" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateTwitterCard() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterCard()
	})
}

// SetTwitterTitle sets the "twitter_title" field.
func (u *SeoConfigUpsertBulk) SetTwitterTitle(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterTitle(v)
	})
}

// UpdateTwitterTitle sets the "twitter_title" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateTwitterTitle() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterTitle()
	})
}

// ClearTwitterTitle clears the value of the "twitter_title" field.
func (u *SeoConfigUpsertBulk) ClearTwitterTitle() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterTitle()
	})
}

// SetTwitterDescription sets the "twitter_description" field.
func (u *SeoConfigUpsertBulk) SetTwitterDescription(v map[string]string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterDescription(v)
	})
}

// UpdateTwitterDescription sets the "twitter_description" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateTwitterDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterDescription()
	})
}

// ClearTwitterDescription clears the value of the "twitter_description" field.
func (u *SeoConfigUpsertBulk) ClearTwitterDescription() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterDescription()
	})
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (u *SeoConfigUpsertBulk) SetTwitterImageURL(v string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetTwitterImageURL(v)
	})
}

// UpdateTwitterImageURL sets the "twitter_image_url" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateTwitterImageURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateTwitterImageURL()
	})
}

// ClearTwitterImageURL clears the value of the "twitter_image_url" field.
func (u *SeoConfigUpsertBulk) ClearTwitterImageURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearTwitterImageURL()
	})
}

// SetCanonicalURL sets the "canonical_url" field.
func (u *SeoConfigUpsertBulk) SetCanonicalURL(v string) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetCanonicalURL(v)
	})
}

// UpdateCanonicalURL sets the "canonical_url" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateCanonicalURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateCanonicalURL()
	})
}

// ClearCanonicalURL clears the value of the "canonical_url" field.
func (u *SeoConfigUpsertBulk) ClearCanonicalURL() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearCanonicalURL()
	})
}

// SetNoindex sets the "noindex" field.
func (u *SeoConfigUpsertBulk) SetNoindex(v bool) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetNoindex(v)
	})
}

// UpdateNoindex sets the "noindex" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateNoindex() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateNoindex()
	})
}

// SetNofollow sets the "nofollow" field.
func (u *SeoConfigUpsertBulk) SetNofollow(v bool) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetNofollow(v)
	})
}

// UpdateNofollow sets the "nofollow" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateNofollow() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateNofollow()
	})
}

// SetStructuredData sets the "structured_data" field.
func (u *SeoConfigUpsertBulk) SetStructuredData(v map[string]interface{}) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetStructuredData(v)
	})
}

// UpdateStructuredData sets the "structured_data" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateStructuredData() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateStructuredData()
	})
}

// ClearStructuredData clears the value of the "structured_data" field.
func (u *SeoConfigUpsertBulk) ClearStructuredData() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.ClearStructuredData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SeoConfigUpsertBulk) SetUpdatedAt(v time.Time) *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SeoConfigUpsertBulk) UpdateUpdatedAt() *SeoConfigUpsertBulk {
	return u.Update(func(s *SeoConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SeoConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SeoConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeoConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeoConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
