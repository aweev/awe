// Code generated by ent, DO NOT EDIT.

package volunteerassignment

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldStatus, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldEndDate, v))
}

// HoursCompleted applies equality check predicate on the "hours_completed" field. It's identical to HoursCompletedEQ.
func HoursCompleted(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldHoursCompleted, v))
}

// HoursCommitted applies equality check predicate on the "hours_committed" field. It's identical to HoursCommittedEQ.
func HoursCommitted(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldHoursCommitted, v))
}

// Feedback applies equality check predicate on the "feedback" field. It's identical to FeedbackEQ.
func Feedback(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldFeedback, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldRating, v))
}

// CompletionNotes applies equality check predicate on the "completion_notes" field. It's identical to CompletionNotesEQ.
func CompletionNotes(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldCompletionNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContainsFold(FieldStatus, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotNull(FieldEndDate))
}

// HoursCompletedEQ applies the EQ predicate on the "hours_completed" field.
func HoursCompletedEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldHoursCompleted, v))
}

// HoursCompletedNEQ applies the NEQ predicate on the "hours_completed" field.
func HoursCompletedNEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldHoursCompleted, v))
}

// HoursCompletedIn applies the In predicate on the "hours_completed" field.
func HoursCompletedIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldHoursCompleted, vs...))
}

// HoursCompletedNotIn applies the NotIn predicate on the "hours_completed" field.
func HoursCompletedNotIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldHoursCompleted, vs...))
}

// HoursCompletedGT applies the GT predicate on the "hours_completed" field.
func HoursCompletedGT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldHoursCompleted, v))
}

// HoursCompletedGTE applies the GTE predicate on the "hours_completed" field.
func HoursCompletedGTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldHoursCompleted, v))
}

// HoursCompletedLT applies the LT predicate on the "hours_completed" field.
func HoursCompletedLT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldHoursCompleted, v))
}

// HoursCompletedLTE applies the LTE predicate on the "hours_completed" field.
func HoursCompletedLTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldHoursCompleted, v))
}

// HoursCommittedEQ applies the EQ predicate on the "hours_committed" field.
func HoursCommittedEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldHoursCommitted, v))
}

// HoursCommittedNEQ applies the NEQ predicate on the "hours_committed" field.
func HoursCommittedNEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldHoursCommitted, v))
}

// HoursCommittedIn applies the In predicate on the "hours_committed" field.
func HoursCommittedIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldHoursCommitted, vs...))
}

// HoursCommittedNotIn applies the NotIn predicate on the "hours_committed" field.
func HoursCommittedNotIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldHoursCommitted, vs...))
}

// HoursCommittedGT applies the GT predicate on the "hours_committed" field.
func HoursCommittedGT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldHoursCommitted, v))
}

// HoursCommittedGTE applies the GTE predicate on the "hours_committed" field.
func HoursCommittedGTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldHoursCommitted, v))
}

// HoursCommittedLT applies the LT predicate on the "hours_committed" field.
func HoursCommittedLT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldHoursCommitted, v))
}

// HoursCommittedLTE applies the LTE predicate on the "hours_committed" field.
func HoursCommittedLTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldHoursCommitted, v))
}

// FeedbackEQ applies the EQ predicate on the "feedback" field.
func FeedbackEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldFeedback, v))
}

// FeedbackNEQ applies the NEQ predicate on the "feedback" field.
func FeedbackNEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldFeedback, v))
}

// FeedbackIn applies the In predicate on the "feedback" field.
func FeedbackIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldFeedback, vs...))
}

// FeedbackNotIn applies the NotIn predicate on the "feedback" field.
func FeedbackNotIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldFeedback, vs...))
}

// FeedbackGT applies the GT predicate on the "feedback" field.
func FeedbackGT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldFeedback, v))
}

// FeedbackGTE applies the GTE predicate on the "feedback" field.
func FeedbackGTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldFeedback, v))
}

// FeedbackLT applies the LT predicate on the "feedback" field.
func FeedbackLT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldFeedback, v))
}

// FeedbackLTE applies the LTE predicate on the "feedback" field.
func FeedbackLTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldFeedback, v))
}

// FeedbackContains applies the Contains predicate on the "feedback" field.
func FeedbackContains(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContains(FieldFeedback, v))
}

// FeedbackHasPrefix applies the HasPrefix predicate on the "feedback" field.
func FeedbackHasPrefix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasPrefix(FieldFeedback, v))
}

// FeedbackHasSuffix applies the HasSuffix predicate on the "feedback" field.
func FeedbackHasSuffix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasSuffix(FieldFeedback, v))
}

// FeedbackIsNil applies the IsNil predicate on the "feedback" field.
func FeedbackIsNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIsNull(FieldFeedback))
}

// FeedbackNotNil applies the NotNil predicate on the "feedback" field.
func FeedbackNotNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotNull(FieldFeedback))
}

// FeedbackEqualFold applies the EqualFold predicate on the "feedback" field.
func FeedbackEqualFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEqualFold(FieldFeedback, v))
}

// FeedbackContainsFold applies the ContainsFold predicate on the "feedback" field.
func FeedbackContainsFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContainsFold(FieldFeedback, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldRating, v))
}

// RatingIsNil applies the IsNil predicate on the "rating" field.
func RatingIsNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIsNull(FieldRating))
}

// RatingNotNil applies the NotNil predicate on the "rating" field.
func RatingNotNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotNull(FieldRating))
}

// CompletionNotesEQ applies the EQ predicate on the "completion_notes" field.
func CompletionNotesEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldCompletionNotes, v))
}

// CompletionNotesNEQ applies the NEQ predicate on the "completion_notes" field.
func CompletionNotesNEQ(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldCompletionNotes, v))
}

// CompletionNotesIn applies the In predicate on the "completion_notes" field.
func CompletionNotesIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldCompletionNotes, vs...))
}

// CompletionNotesNotIn applies the NotIn predicate on the "completion_notes" field.
func CompletionNotesNotIn(vs ...string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldCompletionNotes, vs...))
}

// CompletionNotesGT applies the GT predicate on the "completion_notes" field.
func CompletionNotesGT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldCompletionNotes, v))
}

// CompletionNotesGTE applies the GTE predicate on the "completion_notes" field.
func CompletionNotesGTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldCompletionNotes, v))
}

// CompletionNotesLT applies the LT predicate on the "completion_notes" field.
func CompletionNotesLT(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldCompletionNotes, v))
}

// CompletionNotesLTE applies the LTE predicate on the "completion_notes" field.
func CompletionNotesLTE(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldCompletionNotes, v))
}

// CompletionNotesContains applies the Contains predicate on the "completion_notes" field.
func CompletionNotesContains(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContains(FieldCompletionNotes, v))
}

// CompletionNotesHasPrefix applies the HasPrefix predicate on the "completion_notes" field.
func CompletionNotesHasPrefix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasPrefix(FieldCompletionNotes, v))
}

// CompletionNotesHasSuffix applies the HasSuffix predicate on the "completion_notes" field.
func CompletionNotesHasSuffix(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldHasSuffix(FieldCompletionNotes, v))
}

// CompletionNotesIsNil applies the IsNil predicate on the "completion_notes" field.
func CompletionNotesIsNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIsNull(FieldCompletionNotes))
}

// CompletionNotesNotNil applies the NotNil predicate on the "completion_notes" field.
func CompletionNotesNotNil() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotNull(FieldCompletionNotes))
}

// CompletionNotesEqualFold applies the EqualFold predicate on the "completion_notes" field.
func CompletionNotesEqualFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEqualFold(FieldCompletionNotes, v))
}

// CompletionNotesContainsFold applies the ContainsFold predicate on the "completion_notes" field.
func CompletionNotesContainsFold(v string) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldContainsFold(FieldCompletionNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOpportunity applies the HasEdge predicate on the "opportunity" edge.
func HasOpportunity() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OpportunityTable, OpportunityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOpportunityWith applies the HasEdge predicate on the "opportunity" edge with a given conditions (other predicates).
func HasOpportunityWith(preds ...predicate.VolunteerOpportunity) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(func(s *sql.Selector) {
		step := newOpportunityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVolunteer applies the HasEdge predicate on the "volunteer" edge.
func HasVolunteer() predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VolunteerTable, VolunteerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolunteerWith applies the HasEdge predicate on the "volunteer" edge with a given conditions (other predicates).
func HasVolunteerWith(preds ...predicate.UserProfile) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(func(s *sql.Selector) {
		step := newVolunteerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VolunteerAssignment) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VolunteerAssignment) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VolunteerAssignment) predicate.VolunteerAssignment {
	return predicate.VolunteerAssignment(sql.NotPredicates(p))
}
