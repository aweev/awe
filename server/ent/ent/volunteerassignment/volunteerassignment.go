// Code generated by ent, DO NOT EDIT.

package volunteerassignment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the volunteerassignment type in the database.
	Label = "volunteer_assignment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldHoursCompleted holds the string denoting the hours_completed field in the database.
	FieldHoursCompleted = "hours_completed"
	// FieldHoursCommitted holds the string denoting the hours_committed field in the database.
	FieldHoursCommitted = "hours_committed"
	// FieldFeedback holds the string denoting the feedback field in the database.
	FieldFeedback = "feedback"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldCompletionNotes holds the string denoting the completion_notes field in the database.
	FieldCompletionNotes = "completion_notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOpportunity holds the string denoting the opportunity edge name in mutations.
	EdgeOpportunity = "opportunity"
	// EdgeVolunteer holds the string denoting the volunteer edge name in mutations.
	EdgeVolunteer = "volunteer"
	// Table holds the table name of the volunteerassignment in the database.
	Table = "volunteer_assignments"
	// OpportunityTable is the table that holds the opportunity relation/edge.
	OpportunityTable = "volunteer_assignments"
	// OpportunityInverseTable is the table name for the VolunteerOpportunity entity.
	// It exists in this package in order to avoid circular dependency with the "volunteeropportunity" package.
	OpportunityInverseTable = "volunteer_opportunities"
	// OpportunityColumn is the table column denoting the opportunity relation/edge.
	OpportunityColumn = "volunteer_opportunity_assignments"
	// VolunteerTable is the table that holds the volunteer relation/edge.
	VolunteerTable = "volunteer_assignments"
	// VolunteerInverseTable is the table name for the UserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userprofile" package.
	VolunteerInverseTable = "user_profiles"
	// VolunteerColumn is the table column denoting the volunteer relation/edge.
	VolunteerColumn = "user_profile_assignments"
)

// Columns holds all SQL columns for volunteerassignment fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldStartDate,
	FieldEndDate,
	FieldHoursCompleted,
	FieldHoursCommitted,
	FieldFeedback,
	FieldRating,
	FieldCompletionNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "volunteer_assignments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_profile_assignments",
	"volunteer_opportunity_assignments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultHoursCompleted holds the default value on creation for the "hours_completed" field.
	DefaultHoursCompleted int
	// DefaultHoursCommitted holds the default value on creation for the "hours_committed" field.
	DefaultHoursCommitted int
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the VolunteerAssignment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByHoursCompleted orders the results by the hours_completed field.
func ByHoursCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoursCompleted, opts...).ToFunc()
}

// ByHoursCommitted orders the results by the hours_committed field.
func ByHoursCommitted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoursCommitted, opts...).ToFunc()
}

// ByFeedback orders the results by the feedback field.
func ByFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedback, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByCompletionNotes orders the results by the completion_notes field.
func ByCompletionNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOpportunityField orders the results by opportunity field.
func ByOpportunityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOpportunityStep(), sql.OrderByField(field, opts...))
	}
}

// ByVolunteerField orders the results by volunteer field.
func ByVolunteerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerStep(), sql.OrderByField(field, opts...))
	}
}
func newOpportunityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OpportunityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OpportunityTable, OpportunityColumn),
	)
}
func newVolunteerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VolunteerTable, VolunteerColumn),
	)
}
