// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AnalyticsDashboard is the model entity for the AnalyticsDashboard schema.
type AnalyticsDashboard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Layout holds the value of the "layout" field.
	Layout map[string]interface{} `json:"layout,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// SharedWith holds the value of the "shared_with" field.
	SharedWith []string `json:"shared_with,omitempty"`
	// AllowedRoles holds the value of the "allowed_roles" field.
	AllowedRoles []string `json:"allowed_roles,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnalyticsDashboardQuery when eager-loading is set.
	Edges           AnalyticsDashboardEdges `json:"edges"`
	user_dashboards *int
	selectValues    sql.SelectValues
}

// AnalyticsDashboardEdges holds the relations/edges for other nodes in the graph.
type AnalyticsDashboardEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Widgets holds the value of the widgets edge.
	Widgets []*DashboardWidget `json:"widgets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnalyticsDashboardEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// WidgetsOrErr returns the Widgets value or an error if the edge
// was not loaded in eager-loading.
func (e AnalyticsDashboardEdges) WidgetsOrErr() ([]*DashboardWidget, error) {
	if e.loadedTypes[1] {
		return e.Widgets, nil
	}
	return nil, &NotLoadedError{edge: "widgets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnalyticsDashboard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case analyticsdashboard.FieldName, analyticsdashboard.FieldDescription, analyticsdashboard.FieldLayout, analyticsdashboard.FieldSharedWith, analyticsdashboard.FieldAllowedRoles:
			values[i] = new([]byte)
		case analyticsdashboard.FieldIsDefault, analyticsdashboard.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case analyticsdashboard.FieldID:
			values[i] = new(sql.NullInt64)
		case analyticsdashboard.FieldSlug:
			values[i] = new(sql.NullString)
		case analyticsdashboard.FieldCreatedAt, analyticsdashboard.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case analyticsdashboard.ForeignKeys[0]: // user_dashboards
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnalyticsDashboard fields.
func (_m *AnalyticsDashboard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case analyticsdashboard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case analyticsdashboard.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case analyticsdashboard.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case analyticsdashboard.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case analyticsdashboard.FieldLayout:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field layout", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Layout); err != nil {
					return fmt.Errorf("unmarshal field layout: %w", err)
				}
			}
		case analyticsdashboard.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				_m.IsDefault = value.Bool
			}
		case analyticsdashboard.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		case analyticsdashboard.FieldSharedWith:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field shared_with", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.SharedWith); err != nil {
					return fmt.Errorf("unmarshal field shared_with: %w", err)
				}
			}
		case analyticsdashboard.FieldAllowedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AllowedRoles); err != nil {
					return fmt.Errorf("unmarshal field allowed_roles: %w", err)
				}
			}
		case analyticsdashboard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case analyticsdashboard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case analyticsdashboard.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_dashboards", value)
			} else if value.Valid {
				_m.user_dashboards = new(int)
				*_m.user_dashboards = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AnalyticsDashboard.
// This includes values selected through modifiers, order, etc.
func (_m *AnalyticsDashboard) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the AnalyticsDashboard entity.
func (_m *AnalyticsDashboard) QueryOwner() *UserQuery {
	return NewAnalyticsDashboardClient(_m.config).QueryOwner(_m)
}

// QueryWidgets queries the "widgets" edge of the AnalyticsDashboard entity.
func (_m *AnalyticsDashboard) QueryWidgets() *DashboardWidgetQuery {
	return NewAnalyticsDashboardClient(_m.config).QueryWidgets(_m)
}

// Update returns a builder for updating this AnalyticsDashboard.
// Note that you need to call AnalyticsDashboard.Unwrap() before calling this method if this AnalyticsDashboard
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AnalyticsDashboard) Update() *AnalyticsDashboardUpdateOne {
	return NewAnalyticsDashboardClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AnalyticsDashboard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AnalyticsDashboard) Unwrap() *AnalyticsDashboard {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnalyticsDashboard is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AnalyticsDashboard) String() string {
	var builder strings.Builder
	builder.WriteString("AnalyticsDashboard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("layout=")
	builder.WriteString(fmt.Sprintf("%v", _m.Layout))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("shared_with=")
	builder.WriteString(fmt.Sprintf("%v", _m.SharedWith))
	builder.WriteString(", ")
	builder.WriteString("allowed_roles=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowedRoles))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AnalyticsDashboards is a parsable slice of AnalyticsDashboard.
type AnalyticsDashboards []*AnalyticsDashboard
