// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/badge"
	"awe/ent/ent/userachievement"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BadgeCreate is the builder for creating a Badge entity.
type BadgeCreate struct {
	config
	mutation *BadgeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *BadgeCreate) SetName(v map[string]string) *BadgeCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BadgeCreate) SetDescription(v map[string]string) *BadgeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *BadgeCreate) SetImageURL(v string) *BadgeCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetCriteria sets the "criteria" field.
func (_c *BadgeCreate) SetCriteria(v string) *BadgeCreate {
	_c.mutation.SetCriteria(v)
	return _c
}

// AddUserAchievementIDs adds the "user_achievements" edge to the UserAchievement entity by IDs.
func (_c *BadgeCreate) AddUserAchievementIDs(ids ...int) *BadgeCreate {
	_c.mutation.AddUserAchievementIDs(ids...)
	return _c
}

// AddUserAchievements adds the "user_achievements" edges to the UserAchievement entity.
func (_c *BadgeCreate) AddUserAchievements(v ...*UserAchievement) *BadgeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserAchievementIDs(ids...)
}

// Mutation returns the BadgeMutation object of the builder.
func (_c *BadgeCreate) Mutation() *BadgeMutation {
	return _c.mutation
}

// Save creates the Badge in the database.
func (_c *BadgeCreate) Save(ctx context.Context) (*Badge, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BadgeCreate) SaveX(ctx context.Context) *Badge {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BadgeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BadgeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BadgeCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Badge.name"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Badge.description"`)}
	}
	if _, ok := _c.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Badge.image_url"`)}
	}
	if _, ok := _c.mutation.Criteria(); !ok {
		return &ValidationError{Name: "criteria", err: errors.New(`ent: missing required field "Badge.criteria"`)}
	}
	return nil
}

func (_c *BadgeCreate) sqlSave(ctx context.Context) (*Badge, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BadgeCreate) createSpec() (*Badge, *sqlgraph.CreateSpec) {
	var (
		_node = &Badge{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(badge.Table, sqlgraph.NewFieldSpec(badge.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(badge.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(badge.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(badge.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.Criteria(); ok {
		_spec.SetField(badge.FieldCriteria, field.TypeString, value)
		_node.Criteria = value
	}
	if nodes := _c.mutation.UserAchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   badge.UserAchievementsTable,
			Columns: []string{badge.UserAchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Badge.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BadgeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *BadgeCreate) OnConflict(opts ...sql.ConflictOption) *BadgeUpsertOne {
	_c.conflict = opts
	return &BadgeUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Badge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BadgeCreate) OnConflictColumns(columns ...string) *BadgeUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BadgeUpsertOne{
		create: _c,
	}
}

type (
	// BadgeUpsertOne is the builder for "upsert"-ing
	//  one Badge node.
	BadgeUpsertOne struct {
		create *BadgeCreate
	}

	// BadgeUpsert is the "OnConflict" setter.
	BadgeUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *BadgeUpsert) SetName(v map[string]string) *BadgeUpsert {
	u.Set(badge.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BadgeUpsert) UpdateName() *BadgeUpsert {
	u.SetExcluded(badge.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *BadgeUpsert) SetDescription(v map[string]string) *BadgeUpsert {
	u.Set(badge.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BadgeUpsert) UpdateDescription() *BadgeUpsert {
	u.SetExcluded(badge.FieldDescription)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *BadgeUpsert) SetImageURL(v string) *BadgeUpsert {
	u.Set(badge.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *BadgeUpsert) UpdateImageURL() *BadgeUpsert {
	u.SetExcluded(badge.FieldImageURL)
	return u
}

// SetCriteria sets the "criteria" field.
func (u *BadgeUpsert) SetCriteria(v string) *BadgeUpsert {
	u.Set(badge.FieldCriteria, v)
	return u
}

// UpdateCriteria sets the "criteria" field to the value that was provided on create.
func (u *BadgeUpsert) UpdateCriteria() *BadgeUpsert {
	u.SetExcluded(badge.FieldCriteria)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Badge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BadgeUpsertOne) UpdateNewValues() *BadgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Badge.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BadgeUpsertOne) Ignore() *BadgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BadgeUpsertOne) DoNothing() *BadgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BadgeCreate.OnConflict
// documentation for more info.
func (u *BadgeUpsertOne) Update(set func(*BadgeUpsert)) *BadgeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BadgeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BadgeUpsertOne) SetName(v map[string]string) *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BadgeUpsertOne) UpdateName() *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BadgeUpsertOne) SetDescription(v map[string]string) *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BadgeUpsertOne) UpdateDescription() *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *BadgeUpsertOne) SetImageURL(v string) *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *BadgeUpsertOne) UpdateImageURL() *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateImageURL()
	})
}

// SetCriteria sets the "criteria" field.
func (u *BadgeUpsertOne) SetCriteria(v string) *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.SetCriteria(v)
	})
}

// UpdateCriteria sets the "criteria" field to the value that was provided on create.
func (u *BadgeUpsertOne) UpdateCriteria() *BadgeUpsertOne {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateCriteria()
	})
}

// Exec executes the query.
func (u *BadgeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BadgeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BadgeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BadgeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BadgeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BadgeCreateBulk is the builder for creating many Badge entities in bulk.
type BadgeCreateBulk struct {
	config
	err      error
	builders []*BadgeCreate
	conflict []sql.ConflictOption
}

// Save creates the Badge entities in the database.
func (_c *BadgeCreateBulk) Save(ctx context.Context) ([]*Badge, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Badge, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BadgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BadgeCreateBulk) SaveX(ctx context.Context) []*Badge {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BadgeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BadgeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Badge.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BadgeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *BadgeCreateBulk) OnConflict(opts ...sql.ConflictOption) *BadgeUpsertBulk {
	_c.conflict = opts
	return &BadgeUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Badge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BadgeCreateBulk) OnConflictColumns(columns ...string) *BadgeUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BadgeUpsertBulk{
		create: _c,
	}
}

// BadgeUpsertBulk is the builder for "upsert"-ing
// a bulk of Badge nodes.
type BadgeUpsertBulk struct {
	create *BadgeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Badge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BadgeUpsertBulk) UpdateNewValues() *BadgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Badge.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BadgeUpsertBulk) Ignore() *BadgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BadgeUpsertBulk) DoNothing() *BadgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BadgeCreateBulk.OnConflict
// documentation for more info.
func (u *BadgeUpsertBulk) Update(set func(*BadgeUpsert)) *BadgeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BadgeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BadgeUpsertBulk) SetName(v map[string]string) *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BadgeUpsertBulk) UpdateName() *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *BadgeUpsertBulk) SetDescription(v map[string]string) *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BadgeUpsertBulk) UpdateDescription() *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *BadgeUpsertBulk) SetImageURL(v string) *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *BadgeUpsertBulk) UpdateImageURL() *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateImageURL()
	})
}

// SetCriteria sets the "criteria" field.
func (u *BadgeUpsertBulk) SetCriteria(v string) *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.SetCriteria(v)
	})
}

// UpdateCriteria sets the "criteria" field to the value that was provided on create.
func (u *BadgeUpsertBulk) UpdateCriteria() *BadgeUpsertBulk {
	return u.Update(func(s *BadgeUpsert) {
		s.UpdateCriteria()
	})
}

// Exec executes the query.
func (u *BadgeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BadgeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BadgeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BadgeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
