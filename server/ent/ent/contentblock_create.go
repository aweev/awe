// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockaccordion"
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/blockcta"
	"awe/ent/ent/blockdivider"
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/blockhero"
	"awe/ent/ent/blockmap"
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/blockstats"
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/blocktabs"
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/blockvolunteersignup"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/page"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContentBlockCreate is the builder for creating a ContentBlock entity.
type ContentBlockCreate struct {
	config
	mutation *ContentBlockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *ContentBlockCreate) SetOrder(v int) *ContentBlockCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetBlockType sets the "block_type" field.
func (_c *ContentBlockCreate) SetBlockType(v contentblock.BlockType) *ContentBlockCreate {
	_c.mutation.SetBlockType(v)
	return _c
}

// SetConfig sets the "config" field.
func (_c *ContentBlockCreate) SetConfig(v map[string]interface{}) *ContentBlockCreate {
	_c.mutation.SetConfig(v)
	return _c
}

// SetIsVisible sets the "is_visible" field.
func (_c *ContentBlockCreate) SetIsVisible(v bool) *ContentBlockCreate {
	_c.mutation.SetIsVisible(v)
	return _c
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableIsVisible(v *bool) *ContentBlockCreate {
	if v != nil {
		_c.SetIsVisible(*v)
	}
	return _c
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (_c *ContentBlockCreate) SetHideOnMobile(v bool) *ContentBlockCreate {
	_c.mutation.SetHideOnMobile(v)
	return _c
}

// SetNillableHideOnMobile sets the "hide_on_mobile" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableHideOnMobile(v *bool) *ContentBlockCreate {
	if v != nil {
		_c.SetHideOnMobile(*v)
	}
	return _c
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (_c *ContentBlockCreate) SetHideOnTablet(v bool) *ContentBlockCreate {
	_c.mutation.SetHideOnTablet(v)
	return _c
}

// SetNillableHideOnTablet sets the "hide_on_tablet" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableHideOnTablet(v *bool) *ContentBlockCreate {
	if v != nil {
		_c.SetHideOnTablet(*v)
	}
	return _c
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (_c *ContentBlockCreate) SetHideOnDesktop(v bool) *ContentBlockCreate {
	_c.mutation.SetHideOnDesktop(v)
	return _c
}

// SetNillableHideOnDesktop sets the "hide_on_desktop" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableHideOnDesktop(v *bool) *ContentBlockCreate {
	if v != nil {
		_c.SetHideOnDesktop(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ContentBlockCreate) SetCreatedAt(v time.Time) *ContentBlockCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableCreatedAt(v *time.Time) *ContentBlockCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ContentBlockCreate) SetUpdatedAt(v time.Time) *ContentBlockCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableUpdatedAt(v *time.Time) *ContentBlockCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_c *ContentBlockCreate) SetPageID(id int) *ContentBlockCreate {
	_c.mutation.SetPageID(id)
	return _c
}

// SetPage sets the "page" edge to the Page entity.
func (_c *ContentBlockCreate) SetPage(v *Page) *ContentBlockCreate {
	return _c.SetPageID(v.ID)
}

// SetBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID.
func (_c *ContentBlockCreate) SetBlockHeroID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockHeroID(id)
	return _c
}

// SetNillableBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockHeroID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockHeroID(*id)
	}
	return _c
}

// SetBlockHero sets the "block_hero" edge to the BlockHero entity.
func (_c *ContentBlockCreate) SetBlockHero(v *BlockHero) *ContentBlockCreate {
	return _c.SetBlockHeroID(v.ID)
}

// SetBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID.
func (_c *ContentBlockCreate) SetBlockTextContentID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockTextContentID(id)
	return _c
}

// SetNillableBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockTextContentID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockTextContentID(*id)
	}
	return _c
}

// SetBlockTextContent sets the "block_text_content" edge to the BlockTextContent entity.
func (_c *ContentBlockCreate) SetBlockTextContent(v *BlockTextContent) *ContentBlockCreate {
	return _c.SetBlockTextContentID(v.ID)
}

// SetBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID.
func (_c *ContentBlockCreate) SetBlockFaqID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockFaqID(id)
	return _c
}

// SetNillableBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockFaqID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockFaqID(*id)
	}
	return _c
}

// SetBlockFaq sets the "block_faq" edge to the BlockFaq entity.
func (_c *ContentBlockCreate) SetBlockFaq(v *BlockFaq) *ContentBlockCreate {
	return _c.SetBlockFaqID(v.ID)
}

// SetBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID.
func (_c *ContentBlockCreate) SetBlockCtaID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockCtaID(id)
	return _c
}

// SetNillableBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockCtaID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockCtaID(*id)
	}
	return _c
}

// SetBlockCta sets the "block_cta" edge to the BlockCta entity.
func (_c *ContentBlockCreate) SetBlockCta(v *BlockCta) *ContentBlockCreate {
	return _c.SetBlockCtaID(v.ID)
}

// SetBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID.
func (_c *ContentBlockCreate) SetBlockTestimonialsID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockTestimonialsID(id)
	return _c
}

// SetNillableBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockTestimonialsID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockTestimonialsID(*id)
	}
	return _c
}

// SetBlockTestimonials sets the "block_testimonials" edge to the BlockTestimonials entity.
func (_c *ContentBlockCreate) SetBlockTestimonials(v *BlockTestimonials) *ContentBlockCreate {
	return _c.SetBlockTestimonialsID(v.ID)
}

// SetBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID.
func (_c *ContentBlockCreate) SetBlockStatsID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockStatsID(id)
	return _c
}

// SetNillableBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockStatsID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockStatsID(*id)
	}
	return _c
}

// SetBlockStats sets the "block_stats" edge to the BlockStats entity.
func (_c *ContentBlockCreate) SetBlockStats(v *BlockStats) *ContentBlockCreate {
	return _c.SetBlockStatsID(v.ID)
}

// SetBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID.
func (_c *ContentBlockCreate) SetBlockGalleryID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockGalleryID(id)
	return _c
}

// SetNillableBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockGalleryID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockGalleryID(*id)
	}
	return _c
}

// SetBlockGallery sets the "block_gallery" edge to the BlockGallery entity.
func (_c *ContentBlockCreate) SetBlockGallery(v *BlockGallery) *ContentBlockCreate {
	return _c.SetBlockGalleryID(v.ID)
}

// SetBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID.
func (_c *ContentBlockCreate) SetBlockProgramCardsID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockProgramCardsID(id)
	return _c
}

// SetNillableBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockProgramCardsID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockProgramCardsID(*id)
	}
	return _c
}

// SetBlockProgramCards sets the "block_program_cards" edge to the BlockProgramCards entity.
func (_c *ContentBlockCreate) SetBlockProgramCards(v *BlockProgramCards) *ContentBlockCreate {
	return _c.SetBlockProgramCardsID(v.ID)
}

// SetBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID.
func (_c *ContentBlockCreate) SetBlockSuccessStoriesID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockSuccessStoriesID(id)
	return _c
}

// SetNillableBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockSuccessStoriesID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockSuccessStoriesID(*id)
	}
	return _c
}

// SetBlockSuccessStories sets the "block_success_stories" edge to the BlockSuccessStories entity.
func (_c *ContentBlockCreate) SetBlockSuccessStories(v *BlockSuccessStories) *ContentBlockCreate {
	return _c.SetBlockSuccessStoriesID(v.ID)
}

// SetBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID.
func (_c *ContentBlockCreate) SetBlockDonationFormID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockDonationFormID(id)
	return _c
}

// SetNillableBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockDonationFormID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockDonationFormID(*id)
	}
	return _c
}

// SetBlockDonationForm sets the "block_donation_form" edge to the BlockDonationForm entity.
func (_c *ContentBlockCreate) SetBlockDonationForm(v *BlockDonationForm) *ContentBlockCreate {
	return _c.SetBlockDonationFormID(v.ID)
}

// SetBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID.
func (_c *ContentBlockCreate) SetBlockVolunteerSignupID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockVolunteerSignupID(id)
	return _c
}

// SetNillableBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockVolunteerSignupID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockVolunteerSignupID(*id)
	}
	return _c
}

// SetBlockVolunteerSignup sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity.
func (_c *ContentBlockCreate) SetBlockVolunteerSignup(v *BlockVolunteerSignup) *ContentBlockCreate {
	return _c.SetBlockVolunteerSignupID(v.ID)
}

// SetBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID.
func (_c *ContentBlockCreate) SetBlockNewsletterSignupID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockNewsletterSignupID(id)
	return _c
}

// SetNillableBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockNewsletterSignupID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockNewsletterSignupID(*id)
	}
	return _c
}

// SetBlockNewsletterSignup sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity.
func (_c *ContentBlockCreate) SetBlockNewsletterSignup(v *BlockNewsletterSignup) *ContentBlockCreate {
	return _c.SetBlockNewsletterSignupID(v.ID)
}

// SetBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID.
func (_c *ContentBlockCreate) SetBlockPartnerLogosID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockPartnerLogosID(id)
	return _c
}

// SetNillableBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockPartnerLogosID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockPartnerLogosID(*id)
	}
	return _c
}

// SetBlockPartnerLogos sets the "block_partner_logos" edge to the BlockPartnerLogos entity.
func (_c *ContentBlockCreate) SetBlockPartnerLogos(v *BlockPartnerLogos) *ContentBlockCreate {
	return _c.SetBlockPartnerLogosID(v.ID)
}

// SetBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID.
func (_c *ContentBlockCreate) SetBlockTeamGridID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockTeamGridID(id)
	return _c
}

// SetNillableBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockTeamGridID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockTeamGridID(*id)
	}
	return _c
}

// SetBlockTeamGrid sets the "block_team_grid" edge to the BlockTeamGrid entity.
func (_c *ContentBlockCreate) SetBlockTeamGrid(v *BlockTeamGrid) *ContentBlockCreate {
	return _c.SetBlockTeamGridID(v.ID)
}

// SetBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID.
func (_c *ContentBlockCreate) SetBlockTimelineID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockTimelineID(id)
	return _c
}

// SetNillableBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockTimelineID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockTimelineID(*id)
	}
	return _c
}

// SetBlockTimeline sets the "block_timeline" edge to the BlockTimeline entity.
func (_c *ContentBlockCreate) SetBlockTimeline(v *BlockTimeline) *ContentBlockCreate {
	return _c.SetBlockTimelineID(v.ID)
}

// SetBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID.
func (_c *ContentBlockCreate) SetBlockContactFormID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockContactFormID(id)
	return _c
}

// SetNillableBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockContactFormID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockContactFormID(*id)
	}
	return _c
}

// SetBlockContactForm sets the "block_contact_form" edge to the BlockContactForm entity.
func (_c *ContentBlockCreate) SetBlockContactForm(v *BlockContactForm) *ContentBlockCreate {
	return _c.SetBlockContactFormID(v.ID)
}

// SetBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID.
func (_c *ContentBlockCreate) SetBlockVideoEmbedID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockVideoEmbedID(id)
	return _c
}

// SetNillableBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockVideoEmbedID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockVideoEmbedID(*id)
	}
	return _c
}

// SetBlockVideoEmbed sets the "block_video_embed" edge to the BlockVideoEmbed entity.
func (_c *ContentBlockCreate) SetBlockVideoEmbed(v *BlockVideoEmbed) *ContentBlockCreate {
	return _c.SetBlockVideoEmbedID(v.ID)
}

// SetBlockMapID sets the "block_map" edge to the BlockMap entity by ID.
func (_c *ContentBlockCreate) SetBlockMapID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockMapID(id)
	return _c
}

// SetNillableBlockMapID sets the "block_map" edge to the BlockMap entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockMapID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockMapID(*id)
	}
	return _c
}

// SetBlockMap sets the "block_map" edge to the BlockMap entity.
func (_c *ContentBlockCreate) SetBlockMap(v *BlockMap) *ContentBlockCreate {
	return _c.SetBlockMapID(v.ID)
}

// SetBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID.
func (_c *ContentBlockCreate) SetBlockAccordionID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockAccordionID(id)
	return _c
}

// SetNillableBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockAccordionID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockAccordionID(*id)
	}
	return _c
}

// SetBlockAccordion sets the "block_accordion" edge to the BlockAccordion entity.
func (_c *ContentBlockCreate) SetBlockAccordion(v *BlockAccordion) *ContentBlockCreate {
	return _c.SetBlockAccordionID(v.ID)
}

// SetBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID.
func (_c *ContentBlockCreate) SetBlockTabsID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockTabsID(id)
	return _c
}

// SetNillableBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockTabsID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockTabsID(*id)
	}
	return _c
}

// SetBlockTabs sets the "block_tabs" edge to the BlockTabs entity.
func (_c *ContentBlockCreate) SetBlockTabs(v *BlockTabs) *ContentBlockCreate {
	return _c.SetBlockTabsID(v.ID)
}

// SetBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID.
func (_c *ContentBlockCreate) SetBlockDividerID(id int) *ContentBlockCreate {
	_c.mutation.SetBlockDividerID(id)
	return _c
}

// SetNillableBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID if the given value is not nil.
func (_c *ContentBlockCreate) SetNillableBlockDividerID(id *int) *ContentBlockCreate {
	if id != nil {
		_c = _c.SetBlockDividerID(*id)
	}
	return _c
}

// SetBlockDivider sets the "block_divider" edge to the BlockDivider entity.
func (_c *ContentBlockCreate) SetBlockDivider(v *BlockDivider) *ContentBlockCreate {
	return _c.SetBlockDividerID(v.ID)
}

// Mutation returns the ContentBlockMutation object of the builder.
func (_c *ContentBlockCreate) Mutation() *ContentBlockMutation {
	return _c.mutation
}

// Save creates the ContentBlock in the database.
func (_c *ContentBlockCreate) Save(ctx context.Context) (*ContentBlock, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ContentBlockCreate) SaveX(ctx context.Context) *ContentBlock {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ContentBlockCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ContentBlockCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ContentBlockCreate) defaults() {
	if _, ok := _c.mutation.IsVisible(); !ok {
		v := contentblock.DefaultIsVisible
		_c.mutation.SetIsVisible(v)
	}
	if _, ok := _c.mutation.HideOnMobile(); !ok {
		v := contentblock.DefaultHideOnMobile
		_c.mutation.SetHideOnMobile(v)
	}
	if _, ok := _c.mutation.HideOnTablet(); !ok {
		v := contentblock.DefaultHideOnTablet
		_c.mutation.SetHideOnTablet(v)
	}
	if _, ok := _c.mutation.HideOnDesktop(); !ok {
		v := contentblock.DefaultHideOnDesktop
		_c.mutation.SetHideOnDesktop(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := contentblock.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := contentblock.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ContentBlockCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "ContentBlock.order"`)}
	}
	if _, ok := _c.mutation.BlockType(); !ok {
		return &ValidationError{Name: "block_type", err: errors.New(`ent: missing required field "ContentBlock.block_type"`)}
	}
	if v, ok := _c.mutation.BlockType(); ok {
		if err := contentblock.BlockTypeValidator(v); err != nil {
			return &ValidationError{Name: "block_type", err: fmt.Errorf(`ent: validator failed for field "ContentBlock.block_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsVisible(); !ok {
		return &ValidationError{Name: "is_visible", err: errors.New(`ent: missing required field "ContentBlock.is_visible"`)}
	}
	if _, ok := _c.mutation.HideOnMobile(); !ok {
		return &ValidationError{Name: "hide_on_mobile", err: errors.New(`ent: missing required field "ContentBlock.hide_on_mobile"`)}
	}
	if _, ok := _c.mutation.HideOnTablet(); !ok {
		return &ValidationError{Name: "hide_on_tablet", err: errors.New(`ent: missing required field "ContentBlock.hide_on_tablet"`)}
	}
	if _, ok := _c.mutation.HideOnDesktop(); !ok {
		return &ValidationError{Name: "hide_on_desktop", err: errors.New(`ent: missing required field "ContentBlock.hide_on_desktop"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ContentBlock.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ContentBlock.updated_at"`)}
	}
	if len(_c.mutation.PageIDs()) == 0 {
		return &ValidationError{Name: "page", err: errors.New(`ent: missing required edge "ContentBlock.page"`)}
	}
	return nil
}

func (_c *ContentBlockCreate) sqlSave(ctx context.Context) (*ContentBlock, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ContentBlockCreate) createSpec() (*ContentBlock, *sqlgraph.CreateSpec) {
	var (
		_node = &ContentBlock{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(contentblock.Table, sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(contentblock.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.BlockType(); ok {
		_spec.SetField(contentblock.FieldBlockType, field.TypeEnum, value)
		_node.BlockType = value
	}
	if value, ok := _c.mutation.Config(); ok {
		_spec.SetField(contentblock.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := _c.mutation.IsVisible(); ok {
		_spec.SetField(contentblock.FieldIsVisible, field.TypeBool, value)
		_node.IsVisible = value
	}
	if value, ok := _c.mutation.HideOnMobile(); ok {
		_spec.SetField(contentblock.FieldHideOnMobile, field.TypeBool, value)
		_node.HideOnMobile = value
	}
	if value, ok := _c.mutation.HideOnTablet(); ok {
		_spec.SetField(contentblock.FieldHideOnTablet, field.TypeBool, value)
		_node.HideOnTablet = value
	}
	if value, ok := _c.mutation.HideOnDesktop(); ok {
		_spec.SetField(contentblock.FieldHideOnDesktop, field.TypeBool, value)
		_node.HideOnDesktop = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(contentblock.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(contentblock.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.page_blocks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockHeroIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockTextContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockFaqIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockCtaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockTestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockGalleryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockProgramCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockSuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockDonationFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockVolunteerSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockNewsletterSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockPartnerLogosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockTeamGridIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockTimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockContactFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockVideoEmbedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockMapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockAccordionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockaccordion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockTabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockDividerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContentBlock.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContentBlockUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *ContentBlockCreate) OnConflict(opts ...sql.ConflictOption) *ContentBlockUpsertOne {
	_c.conflict = opts
	return &ContentBlockUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ContentBlockCreate) OnConflictColumns(columns ...string) *ContentBlockUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ContentBlockUpsertOne{
		create: _c,
	}
}

type (
	// ContentBlockUpsertOne is the builder for "upsert"-ing
	//  one ContentBlock node.
	ContentBlockUpsertOne struct {
		create *ContentBlockCreate
	}

	// ContentBlockUpsert is the "OnConflict" setter.
	ContentBlockUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *ContentBlockUpsert) SetOrder(v int) *ContentBlockUpsert {
	u.Set(contentblock.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateOrder() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *ContentBlockUpsert) AddOrder(v int) *ContentBlockUpsert {
	u.Add(contentblock.FieldOrder, v)
	return u
}

// SetBlockType sets the "block_type" field.
func (u *ContentBlockUpsert) SetBlockType(v contentblock.BlockType) *ContentBlockUpsert {
	u.Set(contentblock.FieldBlockType, v)
	return u
}

// UpdateBlockType sets the "block_type" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateBlockType() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldBlockType)
	return u
}

// SetConfig sets the "config" field.
func (u *ContentBlockUpsert) SetConfig(v map[string]interface{}) *ContentBlockUpsert {
	u.Set(contentblock.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateConfig() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldConfig)
	return u
}

// ClearConfig clears the value of the "config" field.
func (u *ContentBlockUpsert) ClearConfig() *ContentBlockUpsert {
	u.SetNull(contentblock.FieldConfig)
	return u
}

// SetIsVisible sets the "is_visible" field.
func (u *ContentBlockUpsert) SetIsVisible(v bool) *ContentBlockUpsert {
	u.Set(contentblock.FieldIsVisible, v)
	return u
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateIsVisible() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldIsVisible)
	return u
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (u *ContentBlockUpsert) SetHideOnMobile(v bool) *ContentBlockUpsert {
	u.Set(contentblock.FieldHideOnMobile, v)
	return u
}

// UpdateHideOnMobile sets the "hide_on_mobile" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateHideOnMobile() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldHideOnMobile)
	return u
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (u *ContentBlockUpsert) SetHideOnTablet(v bool) *ContentBlockUpsert {
	u.Set(contentblock.FieldHideOnTablet, v)
	return u
}

// UpdateHideOnTablet sets the "hide_on_tablet" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateHideOnTablet() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldHideOnTablet)
	return u
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (u *ContentBlockUpsert) SetHideOnDesktop(v bool) *ContentBlockUpsert {
	u.Set(contentblock.FieldHideOnDesktop, v)
	return u
}

// UpdateHideOnDesktop sets the "hide_on_desktop" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateHideOnDesktop() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldHideOnDesktop)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContentBlockUpsert) SetUpdatedAt(v time.Time) *ContentBlockUpsert {
	u.Set(contentblock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContentBlockUpsert) UpdateUpdatedAt() *ContentBlockUpsert {
	u.SetExcluded(contentblock.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContentBlockUpsertOne) UpdateNewValues() *ContentBlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(contentblock.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContentBlockUpsertOne) Ignore() *ContentBlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContentBlockUpsertOne) DoNothing() *ContentBlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContentBlockCreate.OnConflict
// documentation for more info.
func (u *ContentBlockUpsertOne) Update(set func(*ContentBlockUpsert)) *ContentBlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContentBlockUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *ContentBlockUpsertOne) SetOrder(v int) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *ContentBlockUpsertOne) AddOrder(v int) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateOrder() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateOrder()
	})
}

// SetBlockType sets the "block_type" field.
func (u *ContentBlockUpsertOne) SetBlockType(v contentblock.BlockType) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetBlockType(v)
	})
}

// UpdateBlockType sets the "block_type" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateBlockType() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateBlockType()
	})
}

// SetConfig sets the "config" field.
func (u *ContentBlockUpsertOne) SetConfig(v map[string]interface{}) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateConfig() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ContentBlockUpsertOne) ClearConfig() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.ClearConfig()
	})
}

// SetIsVisible sets the "is_visible" field.
func (u *ContentBlockUpsertOne) SetIsVisible(v bool) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetIsVisible(v)
	})
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateIsVisible() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateIsVisible()
	})
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (u *ContentBlockUpsertOne) SetHideOnMobile(v bool) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnMobile(v)
	})
}

// UpdateHideOnMobile sets the "hide_on_mobile" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateHideOnMobile() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnMobile()
	})
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (u *ContentBlockUpsertOne) SetHideOnTablet(v bool) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnTablet(v)
	})
}

// UpdateHideOnTablet sets the "hide_on_tablet" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateHideOnTablet() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnTablet()
	})
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (u *ContentBlockUpsertOne) SetHideOnDesktop(v bool) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnDesktop(v)
	})
}

// UpdateHideOnDesktop sets the "hide_on_desktop" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateHideOnDesktop() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnDesktop()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContentBlockUpsertOne) SetUpdatedAt(v time.Time) *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContentBlockUpsertOne) UpdateUpdatedAt() *ContentBlockUpsertOne {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ContentBlockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContentBlockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContentBlockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContentBlockUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContentBlockUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContentBlockCreateBulk is the builder for creating many ContentBlock entities in bulk.
type ContentBlockCreateBulk struct {
	config
	err      error
	builders []*ContentBlockCreate
	conflict []sql.ConflictOption
}

// Save creates the ContentBlock entities in the database.
func (_c *ContentBlockCreateBulk) Save(ctx context.Context) ([]*ContentBlock, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ContentBlock, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentBlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ContentBlockCreateBulk) SaveX(ctx context.Context) []*ContentBlock {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ContentBlockCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ContentBlockCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContentBlock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContentBlockUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *ContentBlockCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContentBlockUpsertBulk {
	_c.conflict = opts
	return &ContentBlockUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ContentBlockCreateBulk) OnConflictColumns(columns ...string) *ContentBlockUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ContentBlockUpsertBulk{
		create: _c,
	}
}

// ContentBlockUpsertBulk is the builder for "upsert"-ing
// a bulk of ContentBlock nodes.
type ContentBlockUpsertBulk struct {
	create *ContentBlockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContentBlockUpsertBulk) UpdateNewValues() *ContentBlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(contentblock.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContentBlock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContentBlockUpsertBulk) Ignore() *ContentBlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContentBlockUpsertBulk) DoNothing() *ContentBlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContentBlockCreateBulk.OnConflict
// documentation for more info.
func (u *ContentBlockUpsertBulk) Update(set func(*ContentBlockUpsert)) *ContentBlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContentBlockUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *ContentBlockUpsertBulk) SetOrder(v int) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *ContentBlockUpsertBulk) AddOrder(v int) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateOrder() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateOrder()
	})
}

// SetBlockType sets the "block_type" field.
func (u *ContentBlockUpsertBulk) SetBlockType(v contentblock.BlockType) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetBlockType(v)
	})
}

// UpdateBlockType sets the "block_type" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateBlockType() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateBlockType()
	})
}

// SetConfig sets the "config" field.
func (u *ContentBlockUpsertBulk) SetConfig(v map[string]interface{}) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateConfig() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ContentBlockUpsertBulk) ClearConfig() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.ClearConfig()
	})
}

// SetIsVisible sets the "is_visible" field.
func (u *ContentBlockUpsertBulk) SetIsVisible(v bool) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetIsVisible(v)
	})
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateIsVisible() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateIsVisible()
	})
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (u *ContentBlockUpsertBulk) SetHideOnMobile(v bool) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnMobile(v)
	})
}

// UpdateHideOnMobile sets the "hide_on_mobile" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateHideOnMobile() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnMobile()
	})
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (u *ContentBlockUpsertBulk) SetHideOnTablet(v bool) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnTablet(v)
	})
}

// UpdateHideOnTablet sets the "hide_on_tablet" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateHideOnTablet() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnTablet()
	})
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (u *ContentBlockUpsertBulk) SetHideOnDesktop(v bool) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetHideOnDesktop(v)
	})
}

// UpdateHideOnDesktop sets the "hide_on_desktop" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateHideOnDesktop() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateHideOnDesktop()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContentBlockUpsertBulk) SetUpdatedAt(v time.Time) *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContentBlockUpsertBulk) UpdateUpdatedAt() *ContentBlockUpsertBulk {
	return u.Update(func(s *ContentBlockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ContentBlockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContentBlockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContentBlockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContentBlockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
