// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/ballot"
	"awe/ent/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteCreate is the builder for creating a Vote entity.
type VoteCreate struct {
	config
	mutation *VoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuestion sets the "question" field.
func (_c *VoteCreate) SetQuestion(v string) *VoteCreate {
	_c.mutation.SetQuestion(v)
	return _c
}

// SetOptions sets the "options" field.
func (_c *VoteCreate) SetOptions(v []string) *VoteCreate {
	_c.mutation.SetOptions(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *VoteCreate) SetStatus(v string) *VoteCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *VoteCreate) SetNillableStatus(v *string) *VoteCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetResult sets the "result" field.
func (_c *VoteCreate) SetResult(v string) *VoteCreate {
	_c.mutation.SetResult(v)
	return _c
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_c *VoteCreate) SetNillableResult(v *string) *VoteCreate {
	if v != nil {
		_c.SetResult(*v)
	}
	return _c
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_c *VoteCreate) SetAgendaItemID(id int) *VoteCreate {
	_c.mutation.SetAgendaItemID(id)
	return _c
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_c *VoteCreate) SetAgendaItem(v *AgendaItem) *VoteCreate {
	return _c.SetAgendaItemID(v.ID)
}

// AddBallotIDs adds the "ballots" edge to the Ballot entity by IDs.
func (_c *VoteCreate) AddBallotIDs(ids ...int) *VoteCreate {
	_c.mutation.AddBallotIDs(ids...)
	return _c
}

// AddBallots adds the "ballots" edges to the Ballot entity.
func (_c *VoteCreate) AddBallots(v ...*Ballot) *VoteCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBallotIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (_c *VoteCreate) Mutation() *VoteMutation {
	return _c.mutation
}

// Save creates the Vote in the database.
func (_c *VoteCreate) Save(ctx context.Context) (*Vote, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VoteCreate) SaveX(ctx context.Context) *Vote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VoteCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VoteCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VoteCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := vote.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VoteCreate) check() error {
	if _, ok := _c.mutation.Question(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required field "Vote.question"`)}
	}
	if _, ok := _c.mutation.Options(); !ok {
		return &ValidationError{Name: "options", err: errors.New(`ent: missing required field "Vote.options"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Vote.status"`)}
	}
	if len(_c.mutation.AgendaItemIDs()) == 0 {
		return &ValidationError{Name: "agenda_item", err: errors.New(`ent: missing required edge "Vote.agenda_item"`)}
	}
	return nil
}

func (_c *VoteCreate) sqlSave(ctx context.Context) (*Vote, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VoteCreate) createSpec() (*Vote, *sqlgraph.CreateSpec) {
	var (
		_node = &Vote{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(vote.Table, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Question(); ok {
		_spec.SetField(vote.FieldQuestion, field.TypeString, value)
		_node.Question = value
	}
	if value, ok := _c.mutation.Options(); ok {
		_spec.SetField(vote.FieldOptions, field.TypeJSON, value)
		_node.Options = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(vote.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Result(); ok {
		_spec.SetField(vote.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if nodes := _c.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agenda_item_vote = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BallotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vote.Create().
//		SetQuestion(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoteUpsert) {
//			SetQuestion(v+v).
//		}).
//		Exec(ctx)
func (_c *VoteCreate) OnConflict(opts ...sql.ConflictOption) *VoteUpsertOne {
	_c.conflict = opts
	return &VoteUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VoteCreate) OnConflictColumns(columns ...string) *VoteUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VoteUpsertOne{
		create: _c,
	}
}

type (
	// VoteUpsertOne is the builder for "upsert"-ing
	//  one Vote node.
	VoteUpsertOne struct {
		create *VoteCreate
	}

	// VoteUpsert is the "OnConflict" setter.
	VoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuestion sets the "question" field.
func (u *VoteUpsert) SetQuestion(v string) *VoteUpsert {
	u.Set(vote.FieldQuestion, v)
	return u
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *VoteUpsert) UpdateQuestion() *VoteUpsert {
	u.SetExcluded(vote.FieldQuestion)
	return u
}

// SetOptions sets the "options" field.
func (u *VoteUpsert) SetOptions(v []string) *VoteUpsert {
	u.Set(vote.FieldOptions, v)
	return u
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *VoteUpsert) UpdateOptions() *VoteUpsert {
	u.SetExcluded(vote.FieldOptions)
	return u
}

// SetStatus sets the "status" field.
func (u *VoteUpsert) SetStatus(v string) *VoteUpsert {
	u.Set(vote.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VoteUpsert) UpdateStatus() *VoteUpsert {
	u.SetExcluded(vote.FieldStatus)
	return u
}

// SetResult sets the "result" field.
func (u *VoteUpsert) SetResult(v string) *VoteUpsert {
	u.Set(vote.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *VoteUpsert) UpdateResult() *VoteUpsert {
	u.SetExcluded(vote.FieldResult)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *VoteUpsert) ClearResult() *VoteUpsert {
	u.SetNull(vote.FieldResult)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VoteUpsertOne) UpdateNewValues() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VoteUpsertOne) Ignore() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoteUpsertOne) DoNothing() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoteCreate.OnConflict
// documentation for more info.
func (u *VoteUpsertOne) Update(set func(*VoteUpsert)) *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuestion sets the "question" field.
func (u *VoteUpsertOne) SetQuestion(v string) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetQuestion(v)
	})
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateQuestion() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateQuestion()
	})
}

// SetOptions sets the "options" field.
func (u *VoteUpsertOne) SetOptions(v []string) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateOptions() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateOptions()
	})
}

// SetStatus sets the "status" field.
func (u *VoteUpsertOne) SetStatus(v string) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateStatus() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *VoteUpsertOne) SetResult(v string) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateResult() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *VoteUpsertOne) ClearResult() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.ClearResult()
	})
}

// Exec executes the query.
func (u *VoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VoteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VoteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VoteCreateBulk is the builder for creating many Vote entities in bulk.
type VoteCreateBulk struct {
	config
	err      error
	builders []*VoteCreate
	conflict []sql.ConflictOption
}

// Save creates the Vote entities in the database.
func (_c *VoteCreateBulk) Save(ctx context.Context) ([]*Vote, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Vote, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VoteCreateBulk) SaveX(ctx context.Context) []*Vote {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VoteCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VoteCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoteUpsert) {
//			SetQuestion(v+v).
//		}).
//		Exec(ctx)
func (_c *VoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *VoteUpsertBulk {
	_c.conflict = opts
	return &VoteUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VoteCreateBulk) OnConflictColumns(columns ...string) *VoteUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VoteUpsertBulk{
		create: _c,
	}
}

// VoteUpsertBulk is the builder for "upsert"-ing
// a bulk of Vote nodes.
type VoteUpsertBulk struct {
	create *VoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VoteUpsertBulk) UpdateNewValues() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VoteUpsertBulk) Ignore() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoteUpsertBulk) DoNothing() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoteCreateBulk.OnConflict
// documentation for more info.
func (u *VoteUpsertBulk) Update(set func(*VoteUpsert)) *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuestion sets the "question" field.
func (u *VoteUpsertBulk) SetQuestion(v string) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetQuestion(v)
	})
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateQuestion() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateQuestion()
	})
}

// SetOptions sets the "options" field.
func (u *VoteUpsertBulk) SetOptions(v []string) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateOptions() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateOptions()
	})
}

// SetStatus sets the "status" field.
func (u *VoteUpsertBulk) SetStatus(v string) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateStatus() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateStatus()
	})
}

// SetResult sets the "result" field.
func (u *VoteUpsertBulk) SetResult(v string) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateResult() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *VoteUpsertBulk) ClearResult() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.ClearResult()
	})
}

// Exec executes the query.
func (u *VoteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
