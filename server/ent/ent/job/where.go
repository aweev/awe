// Code generated by ent, DO NOT EDIT.

package job

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// InngestRunID applies equality check predicate on the "inngest_run_id" field. It's identical to InngestRunIDEQ.
func InngestRunID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInngestRunID, v))
}

// ScheduledFor applies equality check predicate on the "scheduled_for" field. It's identical to ScheduledForEQ.
func ScheduledFor(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldScheduledFor, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// MaxRetries applies equality check predicate on the "max_retries" field. It's identical to MaxRetriesEQ.
func MaxRetries(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxRetries, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompletedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldPayload))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldResult))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldError, v))
}

// InngestRunIDEQ applies the EQ predicate on the "inngest_run_id" field.
func InngestRunIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInngestRunID, v))
}

// InngestRunIDNEQ applies the NEQ predicate on the "inngest_run_id" field.
func InngestRunIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldInngestRunID, v))
}

// InngestRunIDIn applies the In predicate on the "inngest_run_id" field.
func InngestRunIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldInngestRunID, vs...))
}

// InngestRunIDNotIn applies the NotIn predicate on the "inngest_run_id" field.
func InngestRunIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldInngestRunID, vs...))
}

// InngestRunIDGT applies the GT predicate on the "inngest_run_id" field.
func InngestRunIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldInngestRunID, v))
}

// InngestRunIDGTE applies the GTE predicate on the "inngest_run_id" field.
func InngestRunIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldInngestRunID, v))
}

// InngestRunIDLT applies the LT predicate on the "inngest_run_id" field.
func InngestRunIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldInngestRunID, v))
}

// InngestRunIDLTE applies the LTE predicate on the "inngest_run_id" field.
func InngestRunIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldInngestRunID, v))
}

// InngestRunIDContains applies the Contains predicate on the "inngest_run_id" field.
func InngestRunIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldInngestRunID, v))
}

// InngestRunIDHasPrefix applies the HasPrefix predicate on the "inngest_run_id" field.
func InngestRunIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldInngestRunID, v))
}

// InngestRunIDHasSuffix applies the HasSuffix predicate on the "inngest_run_id" field.
func InngestRunIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldInngestRunID, v))
}

// InngestRunIDIsNil applies the IsNil predicate on the "inngest_run_id" field.
func InngestRunIDIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldInngestRunID))
}

// InngestRunIDNotNil applies the NotNil predicate on the "inngest_run_id" field.
func InngestRunIDNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldInngestRunID))
}

// InngestRunIDEqualFold applies the EqualFold predicate on the "inngest_run_id" field.
func InngestRunIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldInngestRunID, v))
}

// InngestRunIDContainsFold applies the ContainsFold predicate on the "inngest_run_id" field.
func InngestRunIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldInngestRunID, v))
}

// ScheduledForEQ applies the EQ predicate on the "scheduled_for" field.
func ScheduledForEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldScheduledFor, v))
}

// ScheduledForNEQ applies the NEQ predicate on the "scheduled_for" field.
func ScheduledForNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldScheduledFor, v))
}

// ScheduledForIn applies the In predicate on the "scheduled_for" field.
func ScheduledForIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldScheduledFor, vs...))
}

// ScheduledForNotIn applies the NotIn predicate on the "scheduled_for" field.
func ScheduledForNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldScheduledFor, vs...))
}

// ScheduledForGT applies the GT predicate on the "scheduled_for" field.
func ScheduledForGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldScheduledFor, v))
}

// ScheduledForGTE applies the GTE predicate on the "scheduled_for" field.
func ScheduledForGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldScheduledFor, v))
}

// ScheduledForLT applies the LT predicate on the "scheduled_for" field.
func ScheduledForLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldScheduledFor, v))
}

// ScheduledForLTE applies the LTE predicate on the "scheduled_for" field.
func ScheduledForLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldScheduledFor, v))
}

// ScheduledForIsNil applies the IsNil predicate on the "scheduled_for" field.
func ScheduledForIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldScheduledFor))
}

// ScheduledForNotNil applies the NotNil predicate on the "scheduled_for" field.
func ScheduledForNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldScheduledFor))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPriority, v))
}

// MaxRetriesEQ applies the EQ predicate on the "max_retries" field.
func MaxRetriesEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxRetries, v))
}

// MaxRetriesNEQ applies the NEQ predicate on the "max_retries" field.
func MaxRetriesNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldMaxRetries, v))
}

// MaxRetriesIn applies the In predicate on the "max_retries" field.
func MaxRetriesIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldMaxRetries, vs...))
}

// MaxRetriesNotIn applies the NotIn predicate on the "max_retries" field.
func MaxRetriesNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldMaxRetries, vs...))
}

// MaxRetriesGT applies the GT predicate on the "max_retries" field.
func MaxRetriesGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldMaxRetries, v))
}

// MaxRetriesGTE applies the GTE predicate on the "max_retries" field.
func MaxRetriesGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldMaxRetries, v))
}

// MaxRetriesLT applies the LT predicate on the "max_retries" field.
func MaxRetriesLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldMaxRetries, v))
}

// MaxRetriesLTE applies the LTE predicate on the "max_retries" field.
func MaxRetriesLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldMaxRetries, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldCompletedAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldMetadata))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.JobLog) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependents applies the HasEdge predicate on the "dependents" edge.
func HasDependents() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependentsTable, DependentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependentsWith applies the HasEdge predicate on the "dependents" edge with a given conditions (other predicates).
func HasDependentsWith(preds ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newDependentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependsOn applies the HasEdge predicate on the "depends_on" edge.
func HasDependsOn() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DependsOnTable, DependsOnColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependsOnWith applies the HasEdge predicate on the "depends_on" edge with a given conditions (other predicates).
func HasDependsOnWith(preds ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newDependsOnStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReports applies the HasEdge predicate on the "reports" edge.
func HasReports() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.GeneratedReport) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
