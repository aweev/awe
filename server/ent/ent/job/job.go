// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldInngestRunID holds the string denoting the inngest_run_id field in the database.
	FieldInngestRunID = "inngest_run_id"
	// FieldScheduledFor holds the string denoting the scheduled_for field in the database.
	FieldScheduledFor = "scheduled_for"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldMaxRetries holds the string denoting the max_retries field in the database.
	FieldMaxRetries = "max_retries"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// EdgeDependents holds the string denoting the dependents edge name in mutations.
	EdgeDependents = "dependents"
	// EdgeDependsOn holds the string denoting the depends_on edge name in mutations.
	EdgeDependsOn = "depends_on"
	// EdgeReports holds the string denoting the reports edge name in mutations.
	EdgeReports = "reports"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "jobs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "job_user"
	// LogsTable is the table that holds the logs relation/edge.
	LogsTable = "job_logs"
	// LogsInverseTable is the table name for the JobLog entity.
	// It exists in this package in order to avoid circular dependency with the "joblog" package.
	LogsInverseTable = "job_logs"
	// LogsColumn is the table column denoting the logs relation/edge.
	LogsColumn = "job_logs"
	// DependentsTable is the table that holds the dependents relation/edge.
	DependentsTable = "jobs"
	// DependentsColumn is the table column denoting the dependents relation/edge.
	DependentsColumn = "job_depends_on"
	// DependsOnTable is the table that holds the depends_on relation/edge.
	DependsOnTable = "jobs"
	// DependsOnColumn is the table column denoting the depends_on relation/edge.
	DependsOnColumn = "job_depends_on"
	// ReportsTable is the table that holds the reports relation/edge.
	ReportsTable = "generated_reports"
	// ReportsInverseTable is the table name for the GeneratedReport entity.
	// It exists in this package in order to avoid circular dependency with the "generatedreport" package.
	ReportsInverseTable = "generated_reports"
	// ReportsColumn is the table column denoting the reports relation/edge.
	ReportsColumn = "job_reports"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldStatus,
	FieldPayload,
	FieldResult,
	FieldError,
	FieldInngestRunID,
	FieldScheduledFor,
	FieldPriority,
	FieldMaxRetries,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStartedAt,
	FieldCompletedAt,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_user",
	"job_depends_on",
	"user_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultMaxRetries holds the default value on creation for the "max_retries" field.
	DefaultMaxRetries int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusPENDING    Status = "PENDING"
	StatusWAITING    Status = "WAITING"
	StatusPROCESSING Status = "PROCESSING"
	StatusCOMPLETED  Status = "COMPLETED"
	StatusFAILED     Status = "FAILED"
	StatusCANCELLED  Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusWAITING, StatusPROCESSING, StatusCOMPLETED, StatusFAILED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByInngestRunID orders the results by the inngest_run_id field.
func ByInngestRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInngestRunID, opts...).ToFunc()
}

// ByScheduledFor orders the results by the scheduled_for field.
func ByScheduledFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledFor, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByMaxRetries orders the results by the max_retries field.
func ByMaxRetries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxRetries, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByLogsCount orders the results by logs count.
func ByLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogsStep(), opts...)
	}
}

// ByLogs orders the results by logs terms.
func ByLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependentsCount orders the results by dependents count.
func ByDependentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependentsStep(), opts...)
	}
}

// ByDependents orders the results by dependents terms.
func ByDependents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependsOnField orders the results by depends_on field.
func ByDependsOnField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependsOnStep(), sql.OrderByField(field, opts...))
	}
}

// ByReportsCount orders the results by reports count.
func ByReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportsStep(), opts...)
	}
}

// ByReports orders the results by reports terms.
func ByReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
	)
}
func newDependentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependentsTable, DependentsColumn),
	)
}
func newDependsOnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DependsOnTable, DependsOnColumn),
	)
}
func newReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
	)
}
