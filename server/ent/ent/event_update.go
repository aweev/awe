// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/agenda"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *EventUpdate) SetTitle(v map[string]string) *EventUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *EventUpdate) SetDescription(v map[string]interface{}) *EventUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *EventUpdate) SetEventType(v string) *EventUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *EventUpdate) SetNillableEventType(v *string) *EventUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *EventUpdate) SetStartDate(v time.Time) *EventUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *EventUpdate) SetNillableStartDate(v *time.Time) *EventUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *EventUpdate) SetEndDate(v time.Time) *EventUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *EventUpdate) SetNillableEndDate(v *time.Time) *EventUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// SetCapacity sets the "capacity" field.
func (_u *EventUpdate) SetCapacity(v int) *EventUpdate {
	_u.mutation.ResetCapacity()
	_u.mutation.SetCapacity(v)
	return _u
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_u *EventUpdate) SetNillableCapacity(v *int) *EventUpdate {
	if v != nil {
		_u.SetCapacity(*v)
	}
	return _u
}

// AddCapacity adds value to the "capacity" field.
func (_u *EventUpdate) AddCapacity(v int) *EventUpdate {
	_u.mutation.AddCapacity(v)
	return _u
}

// ClearCapacity clears the value of the "capacity" field.
func (_u *EventUpdate) ClearCapacity() *EventUpdate {
	_u.mutation.ClearCapacity()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EventUpdate) SetStatus(v event.Status) *EventUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EventUpdate) SetNillableStatus(v *event.Status) *EventUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetIsVirtual sets the "is_virtual" field.
func (_u *EventUpdate) SetIsVirtual(v bool) *EventUpdate {
	_u.mutation.SetIsVirtual(v)
	return _u
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (_u *EventUpdate) SetNillableIsVirtual(v *bool) *EventUpdate {
	if v != nil {
		_u.SetIsVirtual(*v)
	}
	return _u
}

// SetMeetingURL sets the "meeting_url" field.
func (_u *EventUpdate) SetMeetingURL(v string) *EventUpdate {
	_u.mutation.SetMeetingURL(v)
	return _u
}

// SetNillableMeetingURL sets the "meeting_url" field if the given value is not nil.
func (_u *EventUpdate) SetNillableMeetingURL(v *string) *EventUpdate {
	if v != nil {
		_u.SetMeetingURL(*v)
	}
	return _u
}

// ClearMeetingURL clears the value of the "meeting_url" field.
func (_u *EventUpdate) ClearMeetingURL() *EventUpdate {
	_u.mutation.ClearMeetingURL()
	return _u
}

// SetRegistrationRequired sets the "registration_required" field.
func (_u *EventUpdate) SetRegistrationRequired(v bool) *EventUpdate {
	_u.mutation.SetRegistrationRequired(v)
	return _u
}

// SetNillableRegistrationRequired sets the "registration_required" field if the given value is not nil.
func (_u *EventUpdate) SetNillableRegistrationRequired(v *bool) *EventUpdate {
	if v != nil {
		_u.SetRegistrationRequired(*v)
	}
	return _u
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (_u *EventUpdate) SetRegistrationDeadline(v time.Time) *EventUpdate {
	_u.mutation.SetRegistrationDeadline(v)
	return _u
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (_u *EventUpdate) SetNillableRegistrationDeadline(v *time.Time) *EventUpdate {
	if v != nil {
		_u.SetRegistrationDeadline(*v)
	}
	return _u
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (_u *EventUpdate) ClearRegistrationDeadline() *EventUpdate {
	_u.mutation.ClearRegistrationDeadline()
	return _u
}

// SetRequiresApproval sets the "requires_approval" field.
func (_u *EventUpdate) SetRequiresApproval(v bool) *EventUpdate {
	_u.mutation.SetRequiresApproval(v)
	return _u
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_u *EventUpdate) SetNillableRequiresApproval(v *bool) *EventUpdate {
	if v != nil {
		_u.SetRequiresApproval(*v)
	}
	return _u
}

// SetTags sets the "tags" field.
func (_u *EventUpdate) SetTags(v []string) *EventUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EventUpdate) AppendTags(v []string) *EventUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *EventUpdate) SetImageURL(v string) *EventUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *EventUpdate) SetNillableImageURL(v *string) *EventUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *EventUpdate) ClearImageURL() *EventUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (_u *EventUpdate) SetCorporateVolunteerFriendly(v bool) *EventUpdate {
	_u.mutation.SetCorporateVolunteerFriendly(v)
	return _u
}

// SetNillableCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field if the given value is not nil.
func (_u *EventUpdate) SetNillableCorporateVolunteerFriendly(v *bool) *EventUpdate {
	if v != nil {
		_u.SetCorporateVolunteerFriendly(*v)
	}
	return _u
}

// SetAlumniOnly sets the "alumni_only" field.
func (_u *EventUpdate) SetAlumniOnly(v bool) *EventUpdate {
	_u.mutation.SetAlumniOnly(v)
	return _u
}

// SetNillableAlumniOnly sets the "alumni_only" field if the given value is not nil.
func (_u *EventUpdate) SetNillableAlumniOnly(v *bool) *EventUpdate {
	if v != nil {
		_u.SetAlumniOnly(*v)
	}
	return _u
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (_u *EventUpdate) SetMajorDonorOnly(v bool) *EventUpdate {
	_u.mutation.SetMajorDonorOnly(v)
	return _u
}

// SetNillableMajorDonorOnly sets the "major_donor_only" field if the given value is not nil.
func (_u *EventUpdate) SetNillableMajorDonorOnly(v *bool) *EventUpdate {
	if v != nil {
		_u.SetMajorDonorOnly(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventUpdate) SetUpdatedAt(v time.Time) *EventUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *EventUpdate) SetProgramID(id int) *EventUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *EventUpdate) SetNillableProgramID(id *int) *EventUpdate {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *EventUpdate) SetProgram(v *Program) *EventUpdate {
	return _u.SetProgramID(v.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_u *EventUpdate) SetCreatedByID(id int) *EventUpdate {
	_u.mutation.SetCreatedByID(id)
	return _u
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_u *EventUpdate) SetCreatedBy(v *User) *EventUpdate {
	return _u.SetCreatedByID(v.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the EventRegistration entity by IDs.
func (_u *EventUpdate) AddRegistrationIDs(ids ...int) *EventUpdate {
	_u.mutation.AddRegistrationIDs(ids...)
	return _u
}

// AddRegistrations adds the "registrations" edges to the EventRegistration entity.
func (_u *EventUpdate) AddRegistrations(v ...*EventRegistration) *EventUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRegistrationIDs(ids...)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *EventUpdate) SetAgendaID(id int) *EventUpdate {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_u *EventUpdate) SetNillableAgendaID(id *int) *EventUpdate {
	if id != nil {
		_u = _u.SetAgendaID(*id)
	}
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *EventUpdate) SetAgenda(v *Agenda) *EventUpdate {
	return _u.SetAgendaID(v.ID)
}

// SetLocationID sets the "location" edge to the Address entity by ID.
func (_u *EventUpdate) SetLocationID(id int) *EventUpdate {
	_u.mutation.SetLocationID(id)
	return _u
}

// SetNillableLocationID sets the "location" edge to the Address entity by ID if the given value is not nil.
func (_u *EventUpdate) SetNillableLocationID(id *int) *EventUpdate {
	if id != nil {
		_u = _u.SetLocationID(*id)
	}
	return _u
}

// SetLocation sets the "location" edge to the Address entity.
func (_u *EventUpdate) SetLocation(v *Address) *EventUpdate {
	return _u.SetLocationID(v.ID)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdate) Mutation() *EventMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *EventUpdate) ClearProgram() *EventUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (_u *EventUpdate) ClearCreatedBy() *EventUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// ClearRegistrations clears all "registrations" edges to the EventRegistration entity.
func (_u *EventUpdate) ClearRegistrations() *EventUpdate {
	_u.mutation.ClearRegistrations()
	return _u
}

// RemoveRegistrationIDs removes the "registrations" edge to EventRegistration entities by IDs.
func (_u *EventUpdate) RemoveRegistrationIDs(ids ...int) *EventUpdate {
	_u.mutation.RemoveRegistrationIDs(ids...)
	return _u
}

// RemoveRegistrations removes "registrations" edges to EventRegistration entities.
func (_u *EventUpdate) RemoveRegistrations(v ...*EventRegistration) *EventUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRegistrationIDs(ids...)
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *EventUpdate) ClearAgenda() *EventUpdate {
	_u.mutation.ClearAgenda()
	return _u
}

// ClearLocation clears the "location" edge to the Address entity.
func (_u *EventUpdate) ClearLocation() *EventUpdate {
	_u.mutation.ClearLocation()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EventUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if _u.mutation.CreatedByCleared() && len(_u.mutation.CreatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.created_by"`)
	}
	return nil
}

func (_u *EventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCapacity(); ok {
		_spec.AddField(event.FieldCapacity, field.TypeInt, value)
	}
	if _u.mutation.CapacityCleared() {
		_spec.ClearField(event.FieldCapacity, field.TypeInt)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IsVirtual(); ok {
		_spec.SetField(event.FieldIsVirtual, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MeetingURL(); ok {
		_spec.SetField(event.FieldMeetingURL, field.TypeString, value)
	}
	if _u.mutation.MeetingURLCleared() {
		_spec.ClearField(event.FieldMeetingURL, field.TypeString)
	}
	if value, ok := _u.mutation.RegistrationRequired(); ok {
		_spec.SetField(event.FieldRegistrationRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
	}
	if _u.mutation.RegistrationDeadlineCleared() {
		_spec.ClearField(event.FieldRegistrationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiresApproval(); ok {
		_spec.SetField(event.FieldRequiresApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(event.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.CorporateVolunteerFriendly(); ok {
		_spec.SetField(event.FieldCorporateVolunteerFriendly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AlumniOnly(); ok {
		_spec.SetField(event.FieldAlumniOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MajorDonorOnly(); ok {
		_spec.SetField(event.FieldMajorDonorOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !_u.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetTitle sets the "title" field.
func (_u *EventUpdateOne) SetTitle(v map[string]string) *EventUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *EventUpdateOne) SetDescription(v map[string]interface{}) *EventUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *EventUpdateOne) SetEventType(v string) *EventUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableEventType(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *EventUpdateOne) SetStartDate(v time.Time) *EventUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableStartDate(v *time.Time) *EventUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *EventUpdateOne) SetEndDate(v time.Time) *EventUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableEndDate(v *time.Time) *EventUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// SetCapacity sets the "capacity" field.
func (_u *EventUpdateOne) SetCapacity(v int) *EventUpdateOne {
	_u.mutation.ResetCapacity()
	_u.mutation.SetCapacity(v)
	return _u
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableCapacity(v *int) *EventUpdateOne {
	if v != nil {
		_u.SetCapacity(*v)
	}
	return _u
}

// AddCapacity adds value to the "capacity" field.
func (_u *EventUpdateOne) AddCapacity(v int) *EventUpdateOne {
	_u.mutation.AddCapacity(v)
	return _u
}

// ClearCapacity clears the value of the "capacity" field.
func (_u *EventUpdateOne) ClearCapacity() *EventUpdateOne {
	_u.mutation.ClearCapacity()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EventUpdateOne) SetStatus(v event.Status) *EventUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableStatus(v *event.Status) *EventUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetIsVirtual sets the "is_virtual" field.
func (_u *EventUpdateOne) SetIsVirtual(v bool) *EventUpdateOne {
	_u.mutation.SetIsVirtual(v)
	return _u
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableIsVirtual(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetIsVirtual(*v)
	}
	return _u
}

// SetMeetingURL sets the "meeting_url" field.
func (_u *EventUpdateOne) SetMeetingURL(v string) *EventUpdateOne {
	_u.mutation.SetMeetingURL(v)
	return _u
}

// SetNillableMeetingURL sets the "meeting_url" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableMeetingURL(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetMeetingURL(*v)
	}
	return _u
}

// ClearMeetingURL clears the value of the "meeting_url" field.
func (_u *EventUpdateOne) ClearMeetingURL() *EventUpdateOne {
	_u.mutation.ClearMeetingURL()
	return _u
}

// SetRegistrationRequired sets the "registration_required" field.
func (_u *EventUpdateOne) SetRegistrationRequired(v bool) *EventUpdateOne {
	_u.mutation.SetRegistrationRequired(v)
	return _u
}

// SetNillableRegistrationRequired sets the "registration_required" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableRegistrationRequired(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetRegistrationRequired(*v)
	}
	return _u
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (_u *EventUpdateOne) SetRegistrationDeadline(v time.Time) *EventUpdateOne {
	_u.mutation.SetRegistrationDeadline(v)
	return _u
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableRegistrationDeadline(v *time.Time) *EventUpdateOne {
	if v != nil {
		_u.SetRegistrationDeadline(*v)
	}
	return _u
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (_u *EventUpdateOne) ClearRegistrationDeadline() *EventUpdateOne {
	_u.mutation.ClearRegistrationDeadline()
	return _u
}

// SetRequiresApproval sets the "requires_approval" field.
func (_u *EventUpdateOne) SetRequiresApproval(v bool) *EventUpdateOne {
	_u.mutation.SetRequiresApproval(v)
	return _u
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableRequiresApproval(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetRequiresApproval(*v)
	}
	return _u
}

// SetTags sets the "tags" field.
func (_u *EventUpdateOne) SetTags(v []string) *EventUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EventUpdateOne) AppendTags(v []string) *EventUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *EventUpdateOne) SetImageURL(v string) *EventUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableImageURL(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *EventUpdateOne) ClearImageURL() *EventUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (_u *EventUpdateOne) SetCorporateVolunteerFriendly(v bool) *EventUpdateOne {
	_u.mutation.SetCorporateVolunteerFriendly(v)
	return _u
}

// SetNillableCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableCorporateVolunteerFriendly(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetCorporateVolunteerFriendly(*v)
	}
	return _u
}

// SetAlumniOnly sets the "alumni_only" field.
func (_u *EventUpdateOne) SetAlumniOnly(v bool) *EventUpdateOne {
	_u.mutation.SetAlumniOnly(v)
	return _u
}

// SetNillableAlumniOnly sets the "alumni_only" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableAlumniOnly(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetAlumniOnly(*v)
	}
	return _u
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (_u *EventUpdateOne) SetMajorDonorOnly(v bool) *EventUpdateOne {
	_u.mutation.SetMajorDonorOnly(v)
	return _u
}

// SetNillableMajorDonorOnly sets the "major_donor_only" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableMajorDonorOnly(v *bool) *EventUpdateOne {
	if v != nil {
		_u.SetMajorDonorOnly(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventUpdateOne) SetUpdatedAt(v time.Time) *EventUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *EventUpdateOne) SetProgramID(id int) *EventUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *EventUpdateOne) SetNillableProgramID(id *int) *EventUpdateOne {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *EventUpdateOne) SetProgram(v *Program) *EventUpdateOne {
	return _u.SetProgramID(v.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_u *EventUpdateOne) SetCreatedByID(id int) *EventUpdateOne {
	_u.mutation.SetCreatedByID(id)
	return _u
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_u *EventUpdateOne) SetCreatedBy(v *User) *EventUpdateOne {
	return _u.SetCreatedByID(v.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the EventRegistration entity by IDs.
func (_u *EventUpdateOne) AddRegistrationIDs(ids ...int) *EventUpdateOne {
	_u.mutation.AddRegistrationIDs(ids...)
	return _u
}

// AddRegistrations adds the "registrations" edges to the EventRegistration entity.
func (_u *EventUpdateOne) AddRegistrations(v ...*EventRegistration) *EventUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRegistrationIDs(ids...)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *EventUpdateOne) SetAgendaID(id int) *EventUpdateOne {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_u *EventUpdateOne) SetNillableAgendaID(id *int) *EventUpdateOne {
	if id != nil {
		_u = _u.SetAgendaID(*id)
	}
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *EventUpdateOne) SetAgenda(v *Agenda) *EventUpdateOne {
	return _u.SetAgendaID(v.ID)
}

// SetLocationID sets the "location" edge to the Address entity by ID.
func (_u *EventUpdateOne) SetLocationID(id int) *EventUpdateOne {
	_u.mutation.SetLocationID(id)
	return _u
}

// SetNillableLocationID sets the "location" edge to the Address entity by ID if the given value is not nil.
func (_u *EventUpdateOne) SetNillableLocationID(id *int) *EventUpdateOne {
	if id != nil {
		_u = _u.SetLocationID(*id)
	}
	return _u
}

// SetLocation sets the "location" edge to the Address entity.
func (_u *EventUpdateOne) SetLocation(v *Address) *EventUpdateOne {
	return _u.SetLocationID(v.ID)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdateOne) Mutation() *EventMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *EventUpdateOne) ClearProgram() *EventUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (_u *EventUpdateOne) ClearCreatedBy() *EventUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// ClearRegistrations clears all "registrations" edges to the EventRegistration entity.
func (_u *EventUpdateOne) ClearRegistrations() *EventUpdateOne {
	_u.mutation.ClearRegistrations()
	return _u
}

// RemoveRegistrationIDs removes the "registrations" edge to EventRegistration entities by IDs.
func (_u *EventUpdateOne) RemoveRegistrationIDs(ids ...int) *EventUpdateOne {
	_u.mutation.RemoveRegistrationIDs(ids...)
	return _u
}

// RemoveRegistrations removes "registrations" edges to EventRegistration entities.
func (_u *EventUpdateOne) RemoveRegistrations(v ...*EventRegistration) *EventUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRegistrationIDs(ids...)
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *EventUpdateOne) ClearAgenda() *EventUpdateOne {
	_u.mutation.ClearAgenda()
	return _u
}

// ClearLocation clears the "location" edge to the Address entity.
func (_u *EventUpdateOne) ClearLocation() *EventUpdateOne {
	_u.mutation.ClearLocation()
	return _u
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Event entity.
func (_u *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if _u.mutation.CreatedByCleared() && len(_u.mutation.CreatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.created_by"`)
	}
	return nil
}

func (_u *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCapacity(); ok {
		_spec.AddField(event.FieldCapacity, field.TypeInt, value)
	}
	if _u.mutation.CapacityCleared() {
		_spec.ClearField(event.FieldCapacity, field.TypeInt)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.IsVirtual(); ok {
		_spec.SetField(event.FieldIsVirtual, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MeetingURL(); ok {
		_spec.SetField(event.FieldMeetingURL, field.TypeString, value)
	}
	if _u.mutation.MeetingURLCleared() {
		_spec.ClearField(event.FieldMeetingURL, field.TypeString)
	}
	if value, ok := _u.mutation.RegistrationRequired(); ok {
		_spec.SetField(event.FieldRegistrationRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
	}
	if _u.mutation.RegistrationDeadlineCleared() {
		_spec.ClearField(event.FieldRegistrationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.RequiresApproval(); ok {
		_spec.SetField(event.FieldRequiresApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(event.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.CorporateVolunteerFriendly(); ok {
		_spec.SetField(event.FieldCorporateVolunteerFriendly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AlumniOnly(); ok {
		_spec.SetField(event.FieldAlumniOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.MajorDonorOnly(); ok {
		_spec.SetField(event.FieldMajorDonorOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !_u.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
