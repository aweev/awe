// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccordionItemsColumns holds the columns for the "accordion_items" table.
	AccordionItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "title", Type: field.TypeJSON},
		{Name: "content", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "block_accordion_items", Type: field.TypeInt},
	}
	// AccordionItemsTable holds the schema information for the "accordion_items" table.
	AccordionItemsTable = &schema.Table{
		Name:       "accordion_items",
		Columns:    AccordionItemsColumns,
		PrimaryKey: []*schema.Column{AccordionItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accordion_items_block_accordions_items",
				Columns:    []*schema.Column{AccordionItemsColumns[6]},
				RefColumns: []*schema.Column{BlockAccordionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "accordionitem_order_block_accordion_items",
				Unique:  false,
				Columns: []*schema.Column{AccordionItemsColumns[1], AccordionItemsColumns[6]},
			},
		},
	}
	// ActionItemsColumns holds the columns for the "action_items" table.
	ActionItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "owner_id", Type: field.TypeString},
		{Name: "due_date", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "agenda_item_action_items", Type: field.TypeInt, Nullable: true},
	}
	// ActionItemsTable holds the schema information for the "action_items" table.
	ActionItemsTable = &schema.Table{
		Name:       "action_items",
		Columns:    ActionItemsColumns,
		PrimaryKey: []*schema.Column{ActionItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "action_items_agenda_items_action_items",
				Columns:    []*schema.Column{ActionItemsColumns[7]},
				RefColumns: []*schema.Column{AgendaItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ActivityLogsColumns holds the columns for the "activity_logs" table.
	ActivityLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"USER_REGISTERED", "DONATION_RECEIVED", "PROGRAM_COMPLETED", "PARTNERSHIP_STARTED", "STORY_SUBMITTED", "VOLUNTEER_APPLIED", "VOTE_CAST", "ACTION_ITEM_CREATED"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "link_href", Type: field.TypeString, Nullable: true},
		{Name: "entity_type", Type: field.TypeString, Nullable: true},
		{Name: "entity_id", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_activity_logs", Type: field.TypeInt, Nullable: true},
	}
	// ActivityLogsTable holds the schema information for the "activity_logs" table.
	ActivityLogsTable = &schema.Table{
		Name:       "activity_logs",
		Columns:    ActivityLogsColumns,
		PrimaryKey: []*schema.Column{ActivityLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activity_logs_users_activity_logs",
				Columns:    []*schema.Column{ActivityLogsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "street1", Type: field.TypeString},
		{Name: "street2", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "postal_code", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
	}
	// AgendasColumns holds the columns for the "agendas" table.
	AgendasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString, Default: "draft"},
		{Name: "event_agenda", Type: field.TypeInt, Unique: true},
		{Name: "mentorship_session_agenda", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// AgendasTable holds the schema information for the "agendas" table.
	AgendasTable = &schema.Table{
		Name:       "agendas",
		Columns:    AgendasColumns,
		PrimaryKey: []*schema.Column{AgendasColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agendas_events_agenda",
				Columns:    []*schema.Column{AgendasColumns[2]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "agendas_mentorship_sessions_agenda",
				Columns:    []*schema.Column{AgendasColumns[3]},
				RefColumns: []*schema.Column{MentorshipSessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AgendaItemsColumns holds the columns for the "agenda_items" table.
	AgendaItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "presenter", Type: field.TypeString, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "agenda_items", Type: field.TypeInt},
	}
	// AgendaItemsTable holds the schema information for the "agenda_items" table.
	AgendaItemsTable = &schema.Table{
		Name:       "agenda_items",
		Columns:    AgendaItemsColumns,
		PrimaryKey: []*schema.Column{AgendaItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agenda_items_agendas_items",
				Columns:    []*schema.Column{AgendaItemsColumns[6]},
				RefColumns: []*schema.Column{AgendasColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AnalyticsDashboardsColumns holds the columns for the "analytics_dashboards" table.
	AnalyticsDashboardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "layout", Type: field.TypeJSON},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "shared_with", Type: field.TypeJSON, Nullable: true},
		{Name: "allowed_roles", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_dashboards", Type: field.TypeInt},
	}
	// AnalyticsDashboardsTable holds the schema information for the "analytics_dashboards" table.
	AnalyticsDashboardsTable = &schema.Table{
		Name:       "analytics_dashboards",
		Columns:    AnalyticsDashboardsColumns,
		PrimaryKey: []*schema.Column{AnalyticsDashboardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "analytics_dashboards_users_dashboards",
				Columns:    []*schema.Column{AnalyticsDashboardsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "analyticsdashboard_is_default_is_public",
				Unique:  false,
				Columns: []*schema.Column{AnalyticsDashboardsColumns[5], AnalyticsDashboardsColumns[6]},
			},
			{
				Name:    "analyticsdashboard_slug",
				Unique:  false,
				Columns: []*schema.Column{AnalyticsDashboardsColumns[3]},
			},
		},
	}
	// AnalyticsEventsColumns holds the columns for the "analytics_events" table.
	AnalyticsEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "event_name", Type: field.TypeString},
		{Name: "properties", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_analytics_events", Type: field.TypeInt, Nullable: true},
	}
	// AnalyticsEventsTable holds the schema information for the "analytics_events" table.
	AnalyticsEventsTable = &schema.Table{
		Name:       "analytics_events",
		Columns:    AnalyticsEventsColumns,
		PrimaryKey: []*schema.Column{AnalyticsEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "analytics_events_users_analytics_events",
				Columns:    []*schema.Column{AnalyticsEventsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "analyticsevent_event_name_user_analytics_events",
				Unique:  false,
				Columns: []*schema.Column{AnalyticsEventsColumns[1], AnalyticsEventsColumns[4]},
			},
			{
				Name:    "analyticsevent_event_name_created_at",
				Unique:  false,
				Columns: []*schema.Column{AnalyticsEventsColumns[1], AnalyticsEventsColumns[3]},
			},
			{
				Name:    "analyticsevent_created_at",
				Unique:  false,
				Columns: []*schema.Column{AnalyticsEventsColumns[3]},
			},
		},
	}
	// AppSettingsColumns holds the columns for the "app_settings" table.
	AppSettingsColumns = []*schema.Column{
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeJSON},
		{Name: "group", Type: field.TypeString, Default: "GENERAL"},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AppSettingsTable holds the schema information for the "app_settings" table.
	AppSettingsTable = &schema.Table{
		Name:       "app_settings",
		Columns:    AppSettingsColumns,
		PrimaryKey: []*schema.Column{AppSettingsColumns[0]},
	}
	// AuditLogsColumns holds the columns for the "audit_logs" table.
	AuditLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "action", Type: field.TypeString},
		{Name: "meta", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "entity_id", Type: field.TypeString, Nullable: true},
		{Name: "entity_type", Type: field.TypeString, Nullable: true},
		{Name: "audit_log_actor", Type: field.TypeInt, Nullable: true},
		{Name: "user_audit_logs", Type: field.TypeInt, Nullable: true},
	}
	// AuditLogsTable holds the schema information for the "audit_logs" table.
	AuditLogsTable = &schema.Table{
		Name:       "audit_logs",
		Columns:    AuditLogsColumns,
		PrimaryKey: []*schema.Column{AuditLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audit_logs_users_actor",
				Columns:    []*schema.Column{AuditLogsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "audit_logs_users_audit_logs",
				Columns:    []*schema.Column{AuditLogsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "auditlog_action",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[1]},
			},
			{
				Name:    "auditlog_created_at",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[3]},
			},
		},
	}
	// BadgesColumns holds the columns for the "badges" table.
	BadgesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON},
		{Name: "image_url", Type: field.TypeString},
		{Name: "criteria", Type: field.TypeString},
	}
	// BadgesTable holds the schema information for the "badges" table.
	BadgesTable = &schema.Table{
		Name:       "badges",
		Columns:    BadgesColumns,
		PrimaryKey: []*schema.Column{BadgesColumns[0]},
	}
	// BallotsColumns holds the columns for the "ballots" table.
	BallotsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "voter_id", Type: field.TypeString},
		{Name: "choice", Type: field.TypeString},
		{Name: "cast_at", Type: field.TypeTime},
		{Name: "vote_ballots", Type: field.TypeInt},
	}
	// BallotsTable holds the schema information for the "ballots" table.
	BallotsTable = &schema.Table{
		Name:       "ballots",
		Columns:    BallotsColumns,
		PrimaryKey: []*schema.Column{BallotsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ballots_votes_ballots",
				Columns:    []*schema.Column{BallotsColumns[4]},
				RefColumns: []*schema.Column{VotesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ballot_voter_id_vote_ballots",
				Unique:  true,
				Columns: []*schema.Column{BallotsColumns[1], BallotsColumns[4]},
			},
		},
	}
	// BlockAccordionsColumns holds the columns for the "block_accordions" table.
	BlockAccordionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_accordion", Type: field.TypeInt, Unique: true},
	}
	// BlockAccordionsTable holds the schema information for the "block_accordions" table.
	BlockAccordionsTable = &schema.Table{
		Name:       "block_accordions",
		Columns:    BlockAccordionsColumns,
		PrimaryKey: []*schema.Column{BlockAccordionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_accordions_content_blocks_block_accordion",
				Columns:    []*schema.Column{BlockAccordionsColumns[4]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockContactFormsColumns holds the columns for the "block_contact_forms" table.
	BlockContactFormsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "show_name_field", Type: field.TypeBool, Default: true},
		{Name: "show_phone_field", Type: field.TypeBool, Default: false},
		{Name: "show_subject_field", Type: field.TypeBool, Default: true},
		{Name: "show_organization_field", Type: field.TypeBool, Default: false},
		{Name: "recipient_email", Type: field.TypeString},
		{Name: "success_message", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_contact_form", Type: field.TypeInt, Unique: true},
	}
	// BlockContactFormsTable holds the schema information for the "block_contact_forms" table.
	BlockContactFormsTable = &schema.Table{
		Name:       "block_contact_forms",
		Columns:    BlockContactFormsColumns,
		PrimaryKey: []*schema.Column{BlockContactFormsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_contact_forms_content_blocks_block_contact_form",
				Columns:    []*schema.Column{BlockContactFormsColumns[12]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockCtaColumns holds the columns for the "block_cta" table.
	BlockCtaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "primary_button_text", Type: field.TypeJSON},
		{Name: "primary_button_href", Type: field.TypeString},
		{Name: "primary_button_style", Type: field.TypeEnum, Enums: []string{"PRIMARY", "SECONDARY", "OUTLINE", "TEXT"}, Default: "PRIMARY"},
		{Name: "secondary_button_text", Type: field.TypeJSON, Nullable: true},
		{Name: "secondary_button_href", Type: field.TypeString, Nullable: true},
		{Name: "secondary_button_style", Type: field.TypeEnum, Enums: []string{"PRIMARY", "SECONDARY", "OUTLINE", "TEXT"}, Default: "SECONDARY"},
		{Name: "text_align", Type: field.TypeEnum, Enums: []string{"LEFT", "CENTER", "RIGHT", "JUSTIFY"}, Default: "CENTER"},
		{Name: "color_scheme", Type: field.TypeEnum, Enums: []string{"DEFAULT", "PRIMARY", "SECONDARY", "ACCENT", "LIGHT", "DARK"}, Default: "PRIMARY"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_cta", Type: field.TypeInt, Unique: true},
	}
	// BlockCtaTable holds the schema information for the "block_cta" table.
	BlockCtaTable = &schema.Table{
		Name:       "block_cta",
		Columns:    BlockCtaColumns,
		PrimaryKey: []*schema.Column{BlockCtaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_cta_content_blocks_block_cta",
				Columns:    []*schema.Column{BlockCtaColumns[15]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockDividersColumns holds the columns for the "block_dividers" table.
	BlockDividersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "height", Type: field.TypeInt, Nullable: true, Default: 1},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "style", Type: field.TypeString, Nullable: true, Default: "solid"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_divider", Type: field.TypeInt, Unique: true},
	}
	// BlockDividersTable holds the schema information for the "block_dividers" table.
	BlockDividersTable = &schema.Table{
		Name:       "block_dividers",
		Columns:    BlockDividersColumns,
		PrimaryKey: []*schema.Column{BlockDividersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_dividers_content_blocks_block_divider",
				Columns:    []*schema.Column{BlockDividersColumns[7]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockDonationFormsColumns holds the columns for the "block_donation_forms" table.
	BlockDonationFormsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "show_amount_buttons", Type: field.TypeBool, Default: true},
		{Name: "default_amounts", Type: field.TypeJSON},
		{Name: "allow_custom_amount", Type: field.TypeBool, Default: true},
		{Name: "show_recurring", Type: field.TypeBool, Default: true},
		{Name: "color_scheme", Type: field.TypeEnum, Enums: []string{"DEFAULT", "PRIMARY", "SECONDARY", "ACCENT", "LIGHT", "DARK"}, Default: "PRIMARY"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_donation_form", Type: field.TypeInt, Unique: true},
	}
	// BlockDonationFormsTable holds the schema information for the "block_donation_forms" table.
	BlockDonationFormsTable = &schema.Table{
		Name:       "block_donation_forms",
		Columns:    BlockDonationFormsColumns,
		PrimaryKey: []*schema.Column{BlockDonationFormsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_donation_forms_content_blocks_block_donation_form",
				Columns:    []*schema.Column{BlockDonationFormsColumns[11]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockFaqsColumns holds the columns for the "block_faqs" table.
	BlockFaqsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "allow_multiple_open", Type: field.TypeBool, Default: false},
		{Name: "default_open_first", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_faq", Type: field.TypeInt, Unique: true},
	}
	// BlockFaqsTable holds the schema information for the "block_faqs" table.
	BlockFaqsTable = &schema.Table{
		Name:       "block_faqs",
		Columns:    BlockFaqsColumns,
		PrimaryKey: []*schema.Column{BlockFaqsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_faqs_content_blocks_block_faq",
				Columns:    []*schema.Column{BlockFaqsColumns[9]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockGalleriesColumns holds the columns for the "block_galleries" table.
	BlockGalleriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeEnum, Enums: []string{"GRID", "MASONRY", "CAROUSEL", "SLIDER"}, Default: "GRID"},
		{Name: "columns", Type: field.TypeInt, Default: 3},
		{Name: "spacing", Type: field.TypeString, Default: "1rem"},
		{Name: "aspect_ratio", Type: field.TypeString, Nullable: true, Default: "16/9"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_gallery", Type: field.TypeInt, Unique: true},
	}
	// BlockGalleriesTable holds the schema information for the "block_galleries" table.
	BlockGalleriesTable = &schema.Table{
		Name:       "block_galleries",
		Columns:    BlockGalleriesColumns,
		PrimaryKey: []*schema.Column{BlockGalleriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_galleries_content_blocks_block_gallery",
				Columns:    []*schema.Column{BlockGalleriesColumns[10]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockHerosColumns holds the columns for the "block_heros" table.
	BlockHerosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "subtitle", Type: field.TypeJSON, Nullable: true},
		{Name: "cta_buttons", Type: field.TypeJSON, Nullable: true},
		{Name: "background_image_url", Type: field.TypeString, Nullable: true},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "text_align", Type: field.TypeEnum, Enums: []string{"LEFT", "CENTER", "RIGHT", "JUSTIFY"}, Default: "LEFT"},
		{Name: "color_scheme", Type: field.TypeEnum, Enums: []string{"DEFAULT", "PRIMARY", "SECONDARY", "ACCENT", "LIGHT", "DARK"}, Default: "DEFAULT"},
		{Name: "min_height", Type: field.TypeString, Nullable: true, Default: "500px"},
		{Name: "background_video_url", Type: field.TypeString, Nullable: true},
		{Name: "overlay_color", Type: field.TypeString, Nullable: true},
		{Name: "overlay_opacity", Type: field.TypeFloat64, Nullable: true, Default: 0.5},
		{Name: "content_block_block_hero", Type: field.TypeInt, Unique: true},
	}
	// BlockHerosTable holds the schema information for the "block_heros" table.
	BlockHerosTable = &schema.Table{
		Name:       "block_heros",
		Columns:    BlockHerosColumns,
		PrimaryKey: []*schema.Column{BlockHerosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_heros_content_blocks_block_hero",
				Columns:    []*schema.Column{BlockHerosColumns[14]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockMapsColumns holds the columns for the "block_maps" table.
	BlockMapsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "latitude", Type: field.TypeFloat64},
		{Name: "longitude", Type: field.TypeFloat64},
		{Name: "zoom", Type: field.TypeInt, Default: 12},
		{Name: "markers", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_map", Type: field.TypeInt, Unique: true},
	}
	// BlockMapsTable holds the schema information for the "block_maps" table.
	BlockMapsTable = &schema.Table{
		Name:       "block_maps",
		Columns:    BlockMapsColumns,
		PrimaryKey: []*schema.Column{BlockMapsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_maps_content_blocks_block_map",
				Columns:    []*schema.Column{BlockMapsColumns[8]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockNewsletterSignupsColumns holds the columns for the "block_newsletter_signups" table.
	BlockNewsletterSignupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "button_text", Type: field.TypeJSON},
		{Name: "show_name_field", Type: field.TypeBool, Default: false},
		{Name: "placeholder", Type: field.TypeJSON},
		{Name: "layout", Type: field.TypeString, Default: "horizontal"},
		{Name: "color_scheme", Type: field.TypeEnum, Enums: []string{"DEFAULT", "PRIMARY", "SECONDARY", "ACCENT", "LIGHT", "DARK"}, Default: "DEFAULT"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_newsletter_signup", Type: field.TypeInt, Unique: true},
	}
	// BlockNewsletterSignupsTable holds the schema information for the "block_newsletter_signups" table.
	BlockNewsletterSignupsTable = &schema.Table{
		Name:       "block_newsletter_signups",
		Columns:    BlockNewsletterSignupsColumns,
		PrimaryKey: []*schema.Column{BlockNewsletterSignupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_newsletter_signups_content_blocks_block_newsletter_signup",
				Columns:    []*schema.Column{BlockNewsletterSignupsColumns[11]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockPartnerLogosColumns holds the columns for the "block_partner_logos" table.
	BlockPartnerLogosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "grid"},
		{Name: "items_per_row", Type: field.TypeInt, Default: 5},
		{Name: "grayscale", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_partner_logos", Type: field.TypeInt, Unique: true},
	}
	// BlockPartnerLogosTable holds the schema information for the "block_partner_logos" table.
	BlockPartnerLogosTable = &schema.Table{
		Name:       "block_partner_logos",
		Columns:    BlockPartnerLogosColumns,
		PrimaryKey: []*schema.Column{BlockPartnerLogosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_partner_logos_content_blocks_block_partner_logos",
				Columns:    []*schema.Column{BlockPartnerLogosColumns[9]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockProgramCardsColumns holds the columns for the "block_program_cards" table.
	BlockProgramCardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "grid"},
		{Name: "items_per_row", Type: field.TypeInt, Default: 3},
		{Name: "show_all_programs", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_program_cards", Type: field.TypeInt, Unique: true},
	}
	// BlockProgramCardsTable holds the schema information for the "block_program_cards" table.
	BlockProgramCardsTable = &schema.Table{
		Name:       "block_program_cards",
		Columns:    BlockProgramCardsColumns,
		PrimaryKey: []*schema.Column{BlockProgramCardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_program_cards_content_blocks_block_program_cards",
				Columns:    []*schema.Column{BlockProgramCardsColumns[10]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockStatsColumns holds the columns for the "block_stats" table.
	BlockStatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "row"},
		{Name: "items_per_row", Type: field.TypeInt, Default: 4},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_stats", Type: field.TypeInt, Unique: true},
	}
	// BlockStatsTable holds the schema information for the "block_stats" table.
	BlockStatsTable = &schema.Table{
		Name:       "block_stats",
		Columns:    BlockStatsColumns,
		PrimaryKey: []*schema.Column{BlockStatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_stats_content_blocks_block_stats",
				Columns:    []*schema.Column{BlockStatsColumns[9]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockSuccessStoriesColumns holds the columns for the "block_success_stories" table.
	BlockSuccessStoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "carousel"},
		{Name: "max_items", Type: field.TypeInt, Default: 6},
		{Name: "autoplay", Type: field.TypeBool, Default: true},
		{Name: "program_filter", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_success_stories", Type: field.TypeInt, Unique: true},
	}
	// BlockSuccessStoriesTable holds the schema information for the "block_success_stories" table.
	BlockSuccessStoriesTable = &schema.Table{
		Name:       "block_success_stories",
		Columns:    BlockSuccessStoriesColumns,
		PrimaryKey: []*schema.Column{BlockSuccessStoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_success_stories_content_blocks_block_success_stories",
				Columns:    []*schema.Column{BlockSuccessStoriesColumns[11]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockTabsColumns holds the columns for the "block_tabs" table.
	BlockTabsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_tabs", Type: field.TypeInt, Unique: true},
	}
	// BlockTabsTable holds the schema information for the "block_tabs" table.
	BlockTabsTable = &schema.Table{
		Name:       "block_tabs",
		Columns:    BlockTabsColumns,
		PrimaryKey: []*schema.Column{BlockTabsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_tabs_content_blocks_block_tabs",
				Columns:    []*schema.Column{BlockTabsColumns[4]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockTeamGridsColumns holds the columns for the "block_team_grids" table.
	BlockTeamGridsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "items_per_row", Type: field.TypeInt, Default: 3},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_team_grid", Type: field.TypeInt, Unique: true},
	}
	// BlockTeamGridsTable holds the schema information for the "block_team_grids" table.
	BlockTeamGridsTable = &schema.Table{
		Name:       "block_team_grids",
		Columns:    BlockTeamGridsColumns,
		PrimaryKey: []*schema.Column{BlockTeamGridsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_team_grids_content_blocks_block_team_grid",
				Columns:    []*schema.Column{BlockTeamGridsColumns[8]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockTestimonialsColumns holds the columns for the "block_testimonials" table.
	BlockTestimonialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "carousel"},
		{Name: "items_per_row", Type: field.TypeInt, Default: 3},
		{Name: "autoplay", Type: field.TypeBool, Default: true},
		{Name: "autoplay_speed", Type: field.TypeInt, Default: 5000},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_testimonials", Type: field.TypeInt, Unique: true},
	}
	// BlockTestimonialsTable holds the schema information for the "block_testimonials" table.
	BlockTestimonialsTable = &schema.Table{
		Name:       "block_testimonials",
		Columns:    BlockTestimonialsColumns,
		PrimaryKey: []*schema.Column{BlockTestimonialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_testimonials_content_blocks_block_testimonials",
				Columns:    []*schema.Column{BlockTestimonialsColumns[11]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockTextContentsColumns holds the columns for the "block_text_contents" table.
	BlockTextContentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "content", Type: field.TypeJSON},
		{Name: "text_align", Type: field.TypeEnum, Enums: []string{"LEFT", "CENTER", "RIGHT", "JUSTIFY"}, Default: "LEFT"},
		{Name: "color_scheme", Type: field.TypeEnum, Enums: []string{"DEFAULT", "PRIMARY", "SECONDARY", "ACCENT", "LIGHT", "DARK"}, Default: "DEFAULT"},
		{Name: "max_width", Type: field.TypeString, Nullable: true, Default: "prose"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_text_content", Type: field.TypeInt, Unique: true},
	}
	// BlockTextContentsTable holds the schema information for the "block_text_contents" table.
	BlockTextContentsTable = &schema.Table{
		Name:       "block_text_contents",
		Columns:    BlockTextContentsColumns,
		PrimaryKey: []*schema.Column{BlockTextContentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_text_contents_content_blocks_block_text_content",
				Columns:    []*schema.Column{BlockTextContentsColumns[8]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockTimelinesColumns holds the columns for the "block_timelines" table.
	BlockTimelinesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "vertical"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_timeline", Type: field.TypeInt, Unique: true},
	}
	// BlockTimelinesTable holds the schema information for the "block_timelines" table.
	BlockTimelinesTable = &schema.Table{
		Name:       "block_timelines",
		Columns:    BlockTimelinesColumns,
		PrimaryKey: []*schema.Column{BlockTimelinesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_timelines_content_blocks_block_timeline",
				Columns:    []*schema.Column{BlockTimelinesColumns[8]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockVideoEmbedsColumns holds the columns for the "block_video_embeds" table.
	BlockVideoEmbedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "badge", Type: field.TypeJSON, Nullable: true},
		{Name: "title", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "video_url", Type: field.TypeString},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "aspect_ratio", Type: field.TypeString, Default: "16/9"},
		{Name: "autoplay", Type: field.TypeBool, Default: false},
		{Name: "show_controls", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_video_embed", Type: field.TypeInt, Unique: true},
	}
	// BlockVideoEmbedsTable holds the schema information for the "block_video_embeds" table.
	BlockVideoEmbedsTable = &schema.Table{
		Name:       "block_video_embeds",
		Columns:    BlockVideoEmbedsColumns,
		PrimaryKey: []*schema.Column{BlockVideoEmbedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_video_embeds_content_blocks_block_video_embed",
				Columns:    []*schema.Column{BlockVideoEmbedsColumns[12]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BlockVolunteerSignupsColumns holds the columns for the "block_volunteer_signups" table.
	BlockVolunteerSignupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "internal_name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "show_skills_input", Type: field.TypeBool, Default: true},
		{Name: "show_availability", Type: field.TypeBool, Default: true},
		{Name: "require_background", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_block_block_volunteer_signup", Type: field.TypeInt, Unique: true},
	}
	// BlockVolunteerSignupsTable holds the schema information for the "block_volunteer_signups" table.
	BlockVolunteerSignupsTable = &schema.Table{
		Name:       "block_volunteer_signups",
		Columns:    BlockVolunteerSignupsColumns,
		PrimaryKey: []*schema.Column{BlockVolunteerSignupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "block_volunteer_signups_content_blocks_block_volunteer_signup",
				Columns:    []*schema.Column{BlockVolunteerSignupsColumns[9]},
				RefColumns: []*schema.Column{ContentBlocksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BrandBenefitsColumns holds the columns for the "brand_benefits" table.
	BrandBenefitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "url", Type: field.TypeString, Nullable: true},
		{Name: "date", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "partnership_brand_benefits", Type: field.TypeInt},
	}
	// BrandBenefitsTable holds the schema information for the "brand_benefits" table.
	BrandBenefitsTable = &schema.Table{
		Name:       "brand_benefits",
		Columns:    BrandBenefitsColumns,
		PrimaryKey: []*schema.Column{BrandBenefitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "brand_benefits_partnerships_brand_benefits",
				Columns:    []*schema.Column{BrandBenefitsColumns[6]},
				RefColumns: []*schema.Column{PartnershipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BrandConfigsColumns holds the columns for the "brand_configs" table.
	BrandConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "singleton", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Default: "AWE e.V."},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "colors", Type: field.TypeJSON},
		{Name: "contact", Type: field.TypeJSON},
		{Name: "social", Type: field.TypeJSON},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// BrandConfigsTable holds the schema information for the "brand_configs" table.
	BrandConfigsTable = &schema.Table{
		Name:       "brand_configs",
		Columns:    BrandConfigsColumns,
		PrimaryKey: []*schema.Column{BrandConfigsColumns[0]},
	}
	// ContentBlocksColumns holds the columns for the "content_blocks" table.
	ContentBlocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "block_type", Type: field.TypeEnum, Enums: []string{"HERO", "FAQ", "CTA", "TESTIMONIALS", "STATS", "GALLERY", "TEXT_CONTENT", "PROGRAM_CARDS", "SUCCESS_STORIES", "DONATION_FORM", "VOLUNTEER_SIGNUP", "NEWSLETTER_SIGNUP", "PARTNER_LOGOS", "TEAM_GRID", "TIMELINE", "CONTACT_FORM", "VIDEO_EMBED", "MAP", "ACCORDION", "TABS", "DIVIDER"}},
		{Name: "config", Type: field.TypeJSON, Nullable: true},
		{Name: "is_visible", Type: field.TypeBool, Default: true},
		{Name: "hide_on_mobile", Type: field.TypeBool, Default: false},
		{Name: "hide_on_tablet", Type: field.TypeBool, Default: false},
		{Name: "hide_on_desktop", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "page_blocks", Type: field.TypeInt},
	}
	// ContentBlocksTable holds the schema information for the "content_blocks" table.
	ContentBlocksTable = &schema.Table{
		Name:       "content_blocks",
		Columns:    ContentBlocksColumns,
		PrimaryKey: []*schema.Column{ContentBlocksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "content_blocks_pages_blocks",
				Columns:    []*schema.Column{ContentBlocksColumns[10]},
				RefColumns: []*schema.Column{PagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "contentblock_order_page_blocks",
				Unique:  false,
				Columns: []*schema.Column{ContentBlocksColumns[1], ContentBlocksColumns[10]},
			},
		},
	}
	// ConversationsColumns holds the columns for the "conversations" table.
	ConversationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ConversationsTable holds the schema information for the "conversations" table.
	ConversationsTable = &schema.Table{
		Name:       "conversations",
		Columns:    ConversationsColumns,
		PrimaryKey: []*schema.Column{ConversationsColumns[0]},
	}
	// ConversationParticipantsColumns holds the columns for the "conversation_participants" table.
	ConversationParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "last_read_at", Type: field.TypeTime, Nullable: true},
		{Name: "conversation_participants", Type: field.TypeInt},
		{Name: "user_conversation_links", Type: field.TypeInt},
	}
	// ConversationParticipantsTable holds the schema information for the "conversation_participants" table.
	ConversationParticipantsTable = &schema.Table{
		Name:       "conversation_participants",
		Columns:    ConversationParticipantsColumns,
		PrimaryKey: []*schema.Column{ConversationParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "conversation_participants_conversations_participants",
				Columns:    []*schema.Column{ConversationParticipantsColumns[2]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "conversation_participants_users_conversation_links",
				Columns:    []*schema.Column{ConversationParticipantsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "conversationparticipant_conversation_participants_user_conversation_links",
				Unique:  true,
				Columns: []*schema.Column{ConversationParticipantsColumns[2], ConversationParticipantsColumns[3]},
			},
		},
	}
	// DashboardWidgetsColumns holds the columns for the "dashboard_widgets" table.
	DashboardWidgetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON},
		{Name: "data_source", Type: field.TypeString},
		{Name: "query", Type: field.TypeJSON, Nullable: true},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "position", Type: field.TypeJSON},
		{Name: "is_visible", Type: field.TypeBool, Default: true},
		{Name: "refresh_rate", Type: field.TypeInt, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "analytics_dashboard_widgets", Type: field.TypeInt},
	}
	// DashboardWidgetsTable holds the schema information for the "dashboard_widgets" table.
	DashboardWidgetsTable = &schema.Table{
		Name:       "dashboard_widgets",
		Columns:    DashboardWidgetsColumns,
		PrimaryKey: []*schema.Column{DashboardWidgetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dashboard_widgets_analytics_dashboards_widgets",
				Columns:    []*schema.Column{DashboardWidgetsColumns[12]},
				RefColumns: []*schema.Column{AnalyticsDashboardsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "dashboardwidget_order_analytics_dashboard_widgets",
				Unique:  false,
				Columns: []*schema.Column{DashboardWidgetsColumns[6], DashboardWidgetsColumns[12]},
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"FINANCIAL_REPORT", "ANNUAL_REPORT", "BOARD_MINUTES", "POLICY_DOCUMENT", "GRANT_PROPOSAL", "IMPACT_ASSESSMENT", "TRAINING_MATERIAL", "MARKETING_ASSET", "LEGAL_DOCUMENT"}},
		{Name: "file_url", Type: field.TypeString},
		{Name: "file_name", Type: field.TypeString},
		{Name: "mime_type", Type: field.TypeString, Nullable: true},
		{Name: "size", Type: field.TypeInt, Nullable: true},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "version", Type: field.TypeString, Default: "1.0"},
		{Name: "language", Type: field.TypeString, Default: "en"},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "allowed_roles", Type: field.TypeJSON},
		{Name: "access_password", Type: field.TypeString, Nullable: true},
		{Name: "requires_approval", Type: field.TypeBool, Default: false},
		{Name: "is_approved", Type: field.TypeBool, Default: true},
		{Name: "approved_by", Type: field.TypeString, Nullable: true},
		{Name: "approved_at", Type: field.TypeTime, Nullable: true},
		{Name: "download_count", Type: field.TypeInt, Default: 0},
		{Name: "last_accessed", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "document_category_documents", Type: field.TypeInt, Nullable: true},
		{Name: "user_document_uploads", Type: field.TypeInt},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "documents_document_categories_documents",
				Columns:    []*schema.Column{DocumentsColumns[22]},
				RefColumns: []*schema.Column{DocumentCategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "documents_users_document_uploads",
				Columns:    []*schema.Column{DocumentsColumns[23]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DocumentCategoriesColumns holds the columns for the "document_categories" table.
	DocumentCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "display_order", Type: field.TypeInt, Default: 0},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "document_category_parent", Type: field.TypeInt, Nullable: true},
	}
	// DocumentCategoriesTable holds the schema information for the "document_categories" table.
	DocumentCategoriesTable = &schema.Table{
		Name:       "document_categories",
		Columns:    DocumentCategoriesColumns,
		PrimaryKey: []*schema.Column{DocumentCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "document_categories_document_categories_parent",
				Columns:    []*schema.Column{DocumentCategoriesColumns[8]},
				RefColumns: []*schema.Column{DocumentCategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DonationsColumns holds the columns for the "donations" table.
	DonationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "currency", Type: field.TypeString, Default: "EUR"},
		{Name: "is_recurring", Type: field.TypeBool, Default: false},
		{Name: "frequency", Type: field.TypeString, Default: "ONE_TIME"},
		{Name: "payment_method", Type: field.TypeString, Nullable: true},
		{Name: "payment_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "status", Type: field.TypeString},
		{Name: "processed_at", Type: field.TypeTime, Nullable: true},
		{Name: "anonymous", Type: field.TypeBool, Default: false},
		{Name: "payment_gateway_ref", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "donor_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "tax_receipt_sent", Type: field.TypeBool, Default: false},
		{Name: "tax_receipt_sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "recurring_interval", Type: field.TypeString, Nullable: true},
		{Name: "next_payment_date", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "fundraising_campaign_donations", Type: field.TypeInt, Nullable: true},
		{Name: "program_donations", Type: field.TypeInt, Nullable: true},
		{Name: "user_donations", Type: field.TypeInt},
	}
	// DonationsTable holds the schema information for the "donations" table.
	DonationsTable = &schema.Table{
		Name:       "donations",
		Columns:    DonationsColumns,
		PrimaryKey: []*schema.Column{DonationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "donations_fundraising_campaigns_donations",
				Columns:    []*schema.Column{DonationsColumns[19]},
				RefColumns: []*schema.Column{FundraisingCampaignsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "donations_programs_donations",
				Columns:    []*schema.Column{DonationsColumns[20]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "donations_users_donations",
				Columns:    []*schema.Column{DonationsColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON},
		{Name: "event_type", Type: field.TypeString},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "capacity", Type: field.TypeInt, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "PUBLISHED", "CANCELLED", "ARCHIVED"}, Default: "DRAFT"},
		{Name: "is_virtual", Type: field.TypeBool, Default: false},
		{Name: "meeting_url", Type: field.TypeString, Nullable: true},
		{Name: "registration_required", Type: field.TypeBool, Default: true},
		{Name: "registration_deadline", Type: field.TypeTime, Nullable: true},
		{Name: "requires_approval", Type: field.TypeBool, Default: false},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "corporate_volunteer_friendly", Type: field.TypeBool, Default: false},
		{Name: "alumni_only", Type: field.TypeBool, Default: false},
		{Name: "major_donor_only", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "address_events", Type: field.TypeInt, Nullable: true},
		{Name: "event_location", Type: field.TypeInt, Nullable: true},
		{Name: "program_events", Type: field.TypeInt, Nullable: true},
		{Name: "user_created_events", Type: field.TypeInt},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_addresses_events",
				Columns:    []*schema.Column{EventsColumns[20]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_addresses_location",
				Columns:    []*schema.Column{EventsColumns[21]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_programs_events",
				Columns:    []*schema.Column{EventsColumns[22]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_users_created_events",
				Columns:    []*schema.Column{EventsColumns[23]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "event_start_date",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[4]},
			},
			{
				Name:    "event_event_type",
				Unique:  false,
				Columns: []*schema.Column{EventsColumns[3]},
			},
		},
	}
	// EventRegistrationsColumns holds the columns for the "event_registrations" table.
	EventRegistrationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"CONFIRMED", "WAITLISTED", "CANCELLED"}, Default: "CONFIRMED"},
		{Name: "attendance_status", Type: field.TypeEnum, Enums: []string{"REGISTERED", "ATTENDED", "NO_SHOW"}, Default: "REGISTERED"},
		{Name: "registration_data", Type: field.TypeJSON, Nullable: true},
		{Name: "feedback", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "event_registrations", Type: field.TypeInt},
		{Name: "user_event_registrations", Type: field.TypeInt},
	}
	// EventRegistrationsTable holds the schema information for the "event_registrations" table.
	EventRegistrationsTable = &schema.Table{
		Name:       "event_registrations",
		Columns:    EventRegistrationsColumns,
		PrimaryKey: []*schema.Column{EventRegistrationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_registrations_events_registrations",
				Columns:    []*schema.Column{EventRegistrationsColumns[7]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_registrations_users_event_registrations",
				Columns:    []*schema.Column{EventRegistrationsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "eventregistration_event_registrations_user_event_registrations",
				Unique:  true,
				Columns: []*schema.Column{EventRegistrationsColumns[7], EventRegistrationsColumns[8]},
			},
			{
				Name:    "eventregistration_status",
				Unique:  false,
				Columns: []*schema.Column{EventRegistrationsColumns[1]},
			},
		},
	}
	// FaqItemsColumns holds the columns for the "faq_items" table.
	FaqItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "question", Type: field.TypeJSON},
		{Name: "answer", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "block_faq_items", Type: field.TypeInt},
	}
	// FaqItemsTable holds the schema information for the "faq_items" table.
	FaqItemsTable = &schema.Table{
		Name:       "faq_items",
		Columns:    FaqItemsColumns,
		PrimaryKey: []*schema.Column{FaqItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "faq_items_block_faqs_items",
				Columns:    []*schema.Column{FaqItemsColumns[6]},
				RefColumns: []*schema.Column{BlockFaqsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "faqitem_order_block_faq_items",
				Unique:  false,
				Columns: []*schema.Column{FaqItemsColumns[1], FaqItemsColumns[6]},
			},
		},
	}
	// FeatureFlagsColumns holds the columns for the "feature_flags" table.
	FeatureFlagsColumns = []*schema.Column{
		{Name: "key", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: false},
		{Name: "rollout_percentage", Type: field.TypeInt, Default: 0},
		{Name: "allowed_user_ids", Type: field.TypeJSON},
		{Name: "allowed_roles", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// FeatureFlagsTable holds the schema information for the "feature_flags" table.
	FeatureFlagsTable = &schema.Table{
		Name:       "feature_flags",
		Columns:    FeatureFlagsColumns,
		PrimaryKey: []*schema.Column{FeatureFlagsColumns[0]},
	}
	// FundraisingCampaignsColumns holds the columns for the "fundraising_campaigns" table.
	FundraisingCampaignsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON},
		{Name: "story", Type: field.TypeJSON, Nullable: true},
		{Name: "type", Type: field.TypeString, Default: "general"},
		{Name: "category", Type: field.TypeString, Nullable: true},
		{Name: "target_amount", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal(12,2)"}},
		{Name: "current_amount", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"postgres": "decimal(12,2)"}},
		{Name: "currency", Type: field.TypeString, Default: "EUR"},
		{Name: "minimum_donation", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "hero_image_url", Type: field.TypeString, Nullable: true},
		{Name: "video_url", Type: field.TypeString, Nullable: true},
		{Name: "gallery_images", Type: field.TypeJSON},
		{Name: "manager_id", Type: field.TypeString, Nullable: true},
		{Name: "is_public", Type: field.TypeBool, Default: true},
		{Name: "allow_recurring", Type: field.TypeBool, Default: true},
		{Name: "donor_count", Type: field.TypeInt, Default: 0},
		{Name: "share_count", Type: field.TypeInt, Default: 0},
		{Name: "view_count", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "fundraising_campaign_parent_campaign", Type: field.TypeInt, Nullable: true},
		{Name: "program_fundraising_campaigns", Type: field.TypeInt, Nullable: true},
	}
	// FundraisingCampaignsTable holds the schema information for the "fundraising_campaigns" table.
	FundraisingCampaignsTable = &schema.Table{
		Name:       "fundraising_campaigns",
		Columns:    FundraisingCampaignsColumns,
		PrimaryKey: []*schema.Column{FundraisingCampaignsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "fundraising_campaigns_fundraising_campaigns_parent_campaign",
				Columns:    []*schema.Column{FundraisingCampaignsColumns[25]},
				RefColumns: []*schema.Column{FundraisingCampaignsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "fundraising_campaigns_programs_fundraising_campaigns",
				Columns:    []*schema.Column{FundraisingCampaignsColumns[26]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "fundraisingcampaign_is_active_start_date_end_date",
				Unique:  false,
				Columns: []*schema.Column{FundraisingCampaignsColumns[13], FundraisingCampaignsColumns[11], FundraisingCampaignsColumns[12]},
			},
			{
				Name:    "fundraisingcampaign_program_fundraising_campaigns",
				Unique:  false,
				Columns: []*schema.Column{FundraisingCampaignsColumns[26]},
			},
			{
				Name:    "fundraisingcampaign_fundraising_campaign_parent_campaign",
				Unique:  false,
				Columns: []*schema.Column{FundraisingCampaignsColumns[25]},
			},
		},
	}
	// GalleryImagesColumns holds the columns for the "gallery_images" table.
	GalleryImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "image_url", Type: field.TypeString},
		{Name: "image_width", Type: field.TypeInt, Nullable: true},
		{Name: "image_height", Type: field.TypeInt, Nullable: true},
		{Name: "alt_text", Type: field.TypeJSON},
		{Name: "caption", Type: field.TypeJSON, Nullable: true},
		{Name: "block_gallery_images", Type: field.TypeInt},
	}
	// GalleryImagesTable holds the schema information for the "gallery_images" table.
	GalleryImagesTable = &schema.Table{
		Name:       "gallery_images",
		Columns:    GalleryImagesColumns,
		PrimaryKey: []*schema.Column{GalleryImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gallery_images_block_galleries_images",
				Columns:    []*schema.Column{GalleryImagesColumns[7]},
				RefColumns: []*schema.Column{BlockGalleriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "galleryimage_order_block_gallery_images",
				Unique:  false,
				Columns: []*schema.Column{GalleryImagesColumns[1], GalleryImagesColumns[7]},
			},
		},
	}
	// GeneratedReportsColumns holds the columns for the "generated_reports" table.
	GeneratedReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString},
		{Name: "format", Type: field.TypeEnum, Enums: []string{"PDF", "CSV", "XLSX", "JSON"}},
		{Name: "file_url", Type: field.TypeString, Nullable: true},
		{Name: "file_size", Type: field.TypeInt, Nullable: true},
		{Name: "parameters", Type: field.TypeJSON, Nullable: true},
		{Name: "delivery_method", Type: field.TypeEnum, Enums: []string{"EMAIL", "IN_APP", "DOWNLOAD", "WEBHOOK"}},
		{Name: "recipient_email", Type: field.TypeString, Nullable: true},
		{Name: "generated_at", Type: field.TypeTime},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "job_reports", Type: field.TypeInt, Nullable: true},
		{Name: "report_definition_generated_reports", Type: field.TypeInt},
		{Name: "user_generated_reports", Type: field.TypeInt},
	}
	// GeneratedReportsTable holds the schema information for the "generated_reports" table.
	GeneratedReportsTable = &schema.Table{
		Name:       "generated_reports",
		Columns:    GeneratedReportsColumns,
		PrimaryKey: []*schema.Column{GeneratedReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "generated_reports_jobs_reports",
				Columns:    []*schema.Column{GeneratedReportsColumns[11]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "generated_reports_report_definitions_generated_reports",
				Columns:    []*schema.Column{GeneratedReportsColumns[12]},
				RefColumns: []*schema.Column{ReportDefinitionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "generated_reports_users_generated_reports",
				Columns:    []*schema.Column{GeneratedReportsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "generatedreport_status_report_definition_generated_reports",
				Unique:  false,
				Columns: []*schema.Column{GeneratedReportsColumns[1], GeneratedReportsColumns[12]},
			},
			{
				Name:    "generatedreport_user_generated_reports",
				Unique:  false,
				Columns: []*schema.Column{GeneratedReportsColumns[13]},
			},
			{
				Name:    "generatedreport_generated_at",
				Unique:  false,
				Columns: []*schema.Column{GeneratedReportsColumns[8]},
			},
		},
	}
	// GrantsColumns holds the columns for the "grants" table.
	GrantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "grant_amount", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal(14,2)"}},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "ACTIVE", "COMPLETED", "CLOSED"}, Default: "ACTIVE"},
		{Name: "goals", Type: field.TypeJSON},
		{Name: "grant_reference", Type: field.TypeString, Nullable: true},
		{Name: "contact_person", Type: field.TypeString, Nullable: true},
		{Name: "contact_email", Type: field.TypeString, Nullable: true},
		{Name: "renewal_eligible", Type: field.TypeBool, Default: false},
		{Name: "next_review_date", Type: field.TypeTime, Nullable: true},
		{Name: "requires_matching", Type: field.TypeBool, Default: false},
		{Name: "matching_amount", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(14,2)"}},
		{Name: "restrictions", Type: field.TypeJSON, Nullable: true},
		{Name: "reporting_schedule", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_grants", Type: field.TypeInt},
		{Name: "program_grants", Type: field.TypeInt},
	}
	// GrantsTable holds the schema information for the "grants" table.
	GrantsTable = &schema.Table{
		Name:       "grants",
		Columns:    GrantsColumns,
		PrimaryKey: []*schema.Column{GrantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "grants_organizations_grants",
				Columns:    []*schema.Column{GrantsColumns[18]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "grants_programs_grants",
				Columns:    []*schema.Column{GrantsColumns[19]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GrantReportsColumns holds the columns for the "grant_reports" table.
	GrantReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "due_date", Type: field.TypeTime},
		{Name: "submitted_date", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "SUBMITTED", "REVIEWING", "APPROVED"}, Default: "PENDING"},
		{Name: "document_url", Type: field.TypeString, Nullable: true},
		{Name: "report_type", Type: field.TypeString, Default: "progress"},
		{Name: "reviewed_by", Type: field.TypeString, Nullable: true},
		{Name: "reviewed_at", Type: field.TypeTime, Nullable: true},
		{Name: "feedback", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "is_approved", Type: field.TypeBool, Default: false},
		{Name: "next_due_date", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "grant_reports", Type: field.TypeInt},
	}
	// GrantReportsTable holds the schema information for the "grant_reports" table.
	GrantReportsTable = &schema.Table{
		Name:       "grant_reports",
		Columns:    GrantReportsColumns,
		PrimaryKey: []*schema.Column{GrantReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "grant_reports_grants_reports",
				Columns:    []*schema.Column{GrantReportsColumns[14]},
				RefColumns: []*schema.Column{GrantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ImpactDataPointsColumns holds the columns for the "impact_data_points" table.
	ImpactDataPointsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal(14,2)"}},
		{Name: "recorded_at", Type: field.TypeTime},
		{Name: "recorded_by", Type: field.TypeString, Nullable: true},
		{Name: "period", Type: field.TypeString, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "source", Type: field.TypeString, Nullable: true},
		{Name: "is_verified", Type: field.TypeBool, Default: false},
		{Name: "verified_by", Type: field.TypeString, Nullable: true},
		{Name: "verified_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "impact_metric_data_points", Type: field.TypeInt},
	}
	// ImpactDataPointsTable holds the schema information for the "impact_data_points" table.
	ImpactDataPointsTable = &schema.Table{
		Name:       "impact_data_points",
		Columns:    ImpactDataPointsColumns,
		PrimaryKey: []*schema.Column{ImpactDataPointsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "impact_data_points_impact_metrics_data_points",
				Columns:    []*schema.Column{ImpactDataPointsColumns[12]},
				RefColumns: []*schema.Column{ImpactMetricsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ImpactMetricsColumns holds the columns for the "impact_metrics" table.
	ImpactMetricsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"PARTICIPANTS_SERVED", "JOBS_CREATED", "BUSINESSES_STARTED", "GRADUATION_RATE", "VOLUNTEER_HOURS", "FUNDS_RAISED", "PARTNERSHIPS_FORMED"}},
		{Name: "unit", Type: field.TypeString},
		{Name: "target_value", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(14,2)"}},
		{Name: "current_value", Type: field.TypeFloat64, Default: 0, SchemaType: map[string]string{"postgres": "decimal(14,2)"}},
		{Name: "target_date", Type: field.TypeTime, Nullable: true},
		{Name: "calculation_method", Type: field.TypeString, Nullable: true},
		{Name: "is_auto_calculated", Type: field.TypeBool, Default: false},
		{Name: "last_calculated", Type: field.TypeTime, Nullable: true},
		{Name: "display_order", Type: field.TypeInt, Default: 0},
		{Name: "is_public", Type: field.TypeBool, Default: true},
		{Name: "show_on_dashboard", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_impact_metrics", Type: field.TypeInt},
	}
	// ImpactMetricsTable holds the schema information for the "impact_metrics" table.
	ImpactMetricsTable = &schema.Table{
		Name:       "impact_metrics",
		Columns:    ImpactMetricsColumns,
		PrimaryKey: []*schema.Column{ImpactMetricsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "impact_metrics_programs_impact_metrics",
				Columns:    []*schema.Column{ImpactMetricsColumns[15]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "WAITING", "PROCESSING", "COMPLETED", "FAILED", "CANCELLED"}, Default: "PENDING"},
		{Name: "payload", Type: field.TypeJSON, Nullable: true},
		{Name: "result", Type: field.TypeJSON, Nullable: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "inngest_run_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "scheduled_for", Type: field.TypeTime, Nullable: true},
		{Name: "priority", Type: field.TypeInt, Default: 0},
		{Name: "max_retries", Type: field.TypeInt, Default: 3},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "job_user", Type: field.TypeInt, Nullable: true},
		{Name: "job_depends_on", Type: field.TypeInt, Nullable: true},
		{Name: "user_jobs", Type: field.TypeInt, Nullable: true},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "jobs_users_user",
				Columns:    []*schema.Column{JobsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_jobs_depends_on",
				Columns:    []*schema.Column{JobsColumns[16]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "jobs_users_jobs",
				Columns:    []*schema.Column{JobsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "job_type_status",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[1], JobsColumns[2]},
			},
			{
				Name:    "job_status_scheduled_for",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[2], JobsColumns[7]},
			},
			{
				Name:    "job_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[10]},
			},
			{
				Name:    "job_priority_created_at",
				Unique:  false,
				Columns: []*schema.Column{JobsColumns[8], JobsColumns[10]},
			},
		},
	}
	// JobLogsColumns holds the columns for the "job_logs" table.
	JobLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "WAITING", "PROCESSING", "COMPLETED", "FAILED", "CANCELLED"}},
		{Name: "message", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "job_logs", Type: field.TypeInt},
	}
	// JobLogsTable holds the schema information for the "job_logs" table.
	JobLogsTable = &schema.Table{
		Name:       "job_logs",
		Columns:    JobLogsColumns,
		PrimaryKey: []*schema.Column{JobLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_logs_jobs_logs",
				Columns:    []*schema.Column{JobLogsColumns[5]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "joblog_created_at_job_logs",
				Unique:  false,
				Columns: []*schema.Column{JobLogsColumns[4], JobLogsColumns[5]},
			},
		},
	}
	// MentorshipRequestsColumns holds the columns for the "mentorship_requests" table.
	MentorshipRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"REQUESTED", "MATCHED", "ACTIVE", "COMPLETED", "PAUSED", "CANCELLED"}, Default: "REQUESTED"},
		{Name: "goals", Type: field.TypeJSON},
		{Name: "preferences", Type: field.TypeJSON},
		{Name: "duration", Type: field.TypeString},
		{Name: "matched_at", Type: field.TypeTime, Nullable: true},
		{Name: "matched_by", Type: field.TypeString, Nullable: true},
		{Name: "match_reason", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "sessions_completed", Type: field.TypeInt, Default: 0},
		{Name: "last_session_date", Type: field.TypeTime, Nullable: true},
		{Name: "next_session_date", Type: field.TypeTime, Nullable: true},
		{Name: "completion_notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_mentorship_requests", Type: field.TypeInt},
		{Name: "user_mentorships_mentoring", Type: field.TypeInt, Nullable: true},
	}
	// MentorshipRequestsTable holds the schema information for the "mentorship_requests" table.
	MentorshipRequestsTable = &schema.Table{
		Name:       "mentorship_requests",
		Columns:    MentorshipRequestsColumns,
		PrimaryKey: []*schema.Column{MentorshipRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mentorship_requests_users_mentorship_requests",
				Columns:    []*schema.Column{MentorshipRequestsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "mentorship_requests_users_mentorships_mentoring",
				Columns:    []*schema.Column{MentorshipRequestsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mentorshiprequest_user_mentorship_requests",
				Unique:  false,
				Columns: []*schema.Column{MentorshipRequestsColumns[14]},
			},
			{
				Name:    "mentorshiprequest_user_mentorships_mentoring",
				Unique:  false,
				Columns: []*schema.Column{MentorshipRequestsColumns[15]},
			},
			{
				Name:    "mentorshiprequest_status",
				Unique:  false,
				Columns: []*schema.Column{MentorshipRequestsColumns[1]},
			},
		},
	}
	// MentorshipSessionsColumns holds the columns for the "mentorship_sessions" table.
	MentorshipSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "scheduled_at", Type: field.TypeTime},
		{Name: "duration", Type: field.TypeInt, Default: 60},
		{Name: "format", Type: field.TypeString, Default: "virtual"},
		{Name: "status", Type: field.TypeString, Default: "scheduled"},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "action_items", Type: field.TypeJSON, Nullable: true},
		{Name: "mentor_rating", Type: field.TypeInt, Nullable: true},
		{Name: "mentee_rating", Type: field.TypeInt, Nullable: true},
		{Name: "mentor_feedback", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "mentee_feedback", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "mentorship_request_sessions", Type: field.TypeInt},
	}
	// MentorshipSessionsTable holds the schema information for the "mentorship_sessions" table.
	MentorshipSessionsTable = &schema.Table{
		Name:       "mentorship_sessions",
		Columns:    MentorshipSessionsColumns,
		PrimaryKey: []*schema.Column{MentorshipSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mentorship_sessions_mentorship_requests_sessions",
				Columns:    []*schema.Column{MentorshipSessionsColumns[13]},
				RefColumns: []*schema.Column{MentorshipRequestsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mentorshipsession_mentorship_request_sessions",
				Unique:  false,
				Columns: []*schema.Column{MentorshipSessionsColumns[13]},
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "conversation_messages", Type: field.TypeInt},
		{Name: "user_messages_sent", Type: field.TypeInt},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_conversations_messages",
				Columns:    []*schema.Column{MessagesColumns[3]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_users_messages_sent",
				Columns:    []*schema.Column{MessagesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NewsArticlesColumns holds the columns for the "news_articles" table.
	NewsArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "content", Type: field.TypeJSON},
		{Name: "excerpt", Type: field.TypeJSON, Nullable: true},
		{Name: "featured_image_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"}, Default: "DRAFT"},
		{Name: "published_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_news_articles", Type: field.TypeInt},
	}
	// NewsArticlesTable holds the schema information for the "news_articles" table.
	NewsArticlesTable = &schema.Table{
		Name:       "news_articles",
		Columns:    NewsArticlesColumns,
		PrimaryKey: []*schema.Column{NewsArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "news_articles_users_news_articles",
				Columns:    []*schema.Column{NewsArticlesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "logo_url", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "industry", Type: field.TypeString, Nullable: true},
		{Name: "size", Type: field.TypeString, Nullable: true},
		{Name: "contact_email", Type: field.TypeString, Nullable: true},
		{Name: "contact_phone", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_organization", Type: field.TypeInt, Nullable: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_users_organization",
				Columns:    []*schema.Column{OrganizationsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PagesColumns holds the columns for the "pages" table.
	PagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"}, Default: "DRAFT"},
		{Name: "published_at", Type: field.TypeTime, Nullable: true},
		{Name: "layout", Type: field.TypeString, Default: "default"},
		{Name: "is_homepage", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "page_parent_page", Type: field.TypeInt, Nullable: true},
	}
	// PagesTable holds the schema information for the "pages" table.
	PagesTable = &schema.Table{
		Name:       "pages",
		Columns:    PagesColumns,
		PrimaryKey: []*schema.Column{PagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pages_pages_parent_page",
				Columns:    []*schema.Column{PagesColumns[9]},
				RefColumns: []*schema.Column{PagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "page_slug",
				Unique:  false,
				Columns: []*schema.Column{PagesColumns[1]},
			},
			{
				Name:    "page_status_published_at",
				Unique:  false,
				Columns: []*schema.Column{PagesColumns[3], PagesColumns[4]},
			},
		},
	}
	// PartnerLogoItemsColumns holds the columns for the "partner_logo_items" table.
	PartnerLogoItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString},
		{Name: "logo_url", Type: field.TypeString},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "block_partner_logos_partners", Type: field.TypeInt},
	}
	// PartnerLogoItemsTable holds the schema information for the "partner_logo_items" table.
	PartnerLogoItemsTable = &schema.Table{
		Name:       "partner_logo_items",
		Columns:    PartnerLogoItemsColumns,
		PrimaryKey: []*schema.Column{PartnerLogoItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partner_logo_items_block_partner_logos_partners",
				Columns:    []*schema.Column{PartnerLogoItemsColumns[5]},
				RefColumns: []*schema.Column{BlockPartnerLogosColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnerlogoitem_order_block_partner_logos_partners",
				Unique:  false,
				Columns: []*schema.Column{PartnerLogoItemsColumns[1], PartnerLogoItemsColumns[5]},
			},
		},
	}
	// PartnershipsColumns holds the columns for the "partnerships" table.
	PartnershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"CORPORATE", "INSTITUTIONAL", "COMMUNITY", "GOVERNMENT", "NONPROFIT"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PROSPECT", "ACTIVE", "RENEWED", "PAUSED", "ENDED"}, Default: "PROSPECT"},
		{Name: "description", Type: field.TypeJSON},
		{Name: "value", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(12,2)"}},
		{Name: "currency", Type: field.TypeString, Default: "EUR"},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "renewal_date", Type: field.TypeTime, Nullable: true},
		{Name: "benefits", Type: field.TypeJSON},
		{Name: "deliverables", Type: field.TypeJSON},
		{Name: "requirements", Type: field.TypeJSON},
		{Name: "last_contact", Type: field.TypeTime, Nullable: true},
		{Name: "next_follow_up", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_partnerships", Type: field.TypeInt},
		{Name: "user_managed_partnerships", Type: field.TypeInt, Nullable: true},
	}
	// PartnershipsTable holds the schema information for the "partnerships" table.
	PartnershipsTable = &schema.Table{
		Name:       "partnerships",
		Columns:    PartnershipsColumns,
		PrimaryKey: []*schema.Column{PartnershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partnerships_organizations_partnerships",
				Columns:    []*schema.Column{PartnershipsColumns[18]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "partnerships_users_managed_partnerships",
				Columns:    []*schema.Column{PartnershipsColumns[19]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnership_status",
				Unique:  false,
				Columns: []*schema.Column{PartnershipsColumns[4]},
			},
			{
				Name:    "partnership_type",
				Unique:  false,
				Columns: []*schema.Column{PartnershipsColumns[3]},
			},
			{
				Name:    "partnership_renewal_date",
				Unique:  false,
				Columns: []*schema.Column{PartnershipsColumns[10]},
			},
		},
	}
	// PartnershipInteractionsColumns holds the columns for the "partnership_interactions" table.
	PartnershipInteractionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "interaction_type", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "summary", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "interacted_at", Type: field.TypeTime},
		{Name: "attendees", Type: field.TypeJSON},
		{Name: "follow_up_required", Type: field.TypeBool, Default: false},
		{Name: "follow_up_date", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "partnership_interactions", Type: field.TypeInt},
	}
	// PartnershipInteractionsTable holds the schema information for the "partnership_interactions" table.
	PartnershipInteractionsTable = &schema.Table{
		Name:       "partnership_interactions",
		Columns:    PartnershipInteractionsColumns,
		PrimaryKey: []*schema.Column{PartnershipInteractionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partnership_interactions_partnerships_interactions",
				Columns:    []*schema.Column{PartnershipInteractionsColumns[10]},
				RefColumns: []*schema.Column{PartnershipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnershipinteraction_partnership_interactions",
				Unique:  false,
				Columns: []*schema.Column{PartnershipInteractionsColumns[10]},
			},
			{
				Name:    "partnershipinteraction_follow_up_required_follow_up_date",
				Unique:  false,
				Columns: []*schema.Column{PartnershipInteractionsColumns[6], PartnershipInteractionsColumns[7]},
			},
		},
	}
	// PartnershipRenewalsColumns holds the columns for the "partnership_renewals" table.
	PartnershipRenewalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "previous_end_date", Type: field.TypeTime},
		{Name: "new_end_date", Type: field.TypeTime},
		{Name: "renewal_value", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(12,2)"}},
		{Name: "renewal_terms", Type: field.TypeJSON, Nullable: true},
		{Name: "negotiated_by", Type: field.TypeString, Nullable: true},
		{Name: "approved_by", Type: field.TypeString, Nullable: true},
		{Name: "approved_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "partnership_renewals", Type: field.TypeInt},
	}
	// PartnershipRenewalsTable holds the schema information for the "partnership_renewals" table.
	PartnershipRenewalsTable = &schema.Table{
		Name:       "partnership_renewals",
		Columns:    PartnershipRenewalsColumns,
		PrimaryKey: []*schema.Column{PartnershipRenewalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partnership_renewals_partnerships_renewals",
				Columns:    []*schema.Column{PartnershipRenewalsColumns[10]},
				RefColumns: []*schema.Column{PartnershipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnershiprenewal_partnership_renewals",
				Unique:  false,
				Columns: []*schema.Column{PartnershipRenewalsColumns[10]},
			},
		},
	}
	// PartnershipReportsColumns holds the columns for the "partnership_reports" table.
	PartnershipReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "report_period", Type: field.TypeString},
		{Name: "generated_at", Type: field.TypeTime},
		{Name: "generated_by", Type: field.TypeString, Nullable: true},
		{Name: "impact_metrics", Type: field.TypeJSON},
		{Name: "outcomes", Type: field.TypeJSON},
		{Name: "feedback", Type: field.TypeJSON},
		{Name: "report_url", Type: field.TypeString, Nullable: true},
		{Name: "presentation_url", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "partnership_reports", Type: field.TypeInt},
	}
	// PartnershipReportsTable holds the schema information for the "partnership_reports" table.
	PartnershipReportsTable = &schema.Table{
		Name:       "partnership_reports",
		Columns:    PartnershipReportsColumns,
		PrimaryKey: []*schema.Column{PartnershipReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "partnership_reports_partnerships_reports",
				Columns:    []*schema.Column{PartnershipReportsColumns[11]},
				RefColumns: []*schema.Column{PartnershipsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "partnershipreport_partnership_reports",
				Unique:  false,
				Columns: []*schema.Column{PartnershipReportsColumns[11]},
			},
		},
	}
	// PasswordHistoriesColumns holds the columns for the "password_histories" table.
	PasswordHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hashed_password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_password_history", Type: field.TypeInt},
	}
	// PasswordHistoriesTable holds the schema information for the "password_histories" table.
	PasswordHistoriesTable = &schema.Table{
		Name:       "password_histories",
		Columns:    PasswordHistoriesColumns,
		PrimaryKey: []*schema.Column{PasswordHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "password_histories_users_password_history",
				Columns:    []*schema.Column{PasswordHistoriesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "passwordhistory_created_at_user_password_history",
				Unique:  false,
				Columns: []*schema.Column{PasswordHistoriesColumns[2], PasswordHistoriesColumns[3]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "resource", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "permission_resource_action",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[1], PermissionsColumns[2]},
			},
		},
	}
	// ProgramsColumns holds the columns for the "programs" table.
	ProgramsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON},
		{Name: "tagline", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "OPEN", "FULL", "CLOSED", "ARCHIVED"}, Default: "DRAFT"},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "hero_image_url", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "video_thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "media_gallery", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "metrics", Type: field.TypeJSON},
		{Name: "curriculum", Type: field.TypeJSON},
		{Name: "eligibility_criteria", Type: field.TypeJSON},
		{Name: "application_steps", Type: field.TypeJSON},
		{Name: "duration", Type: field.TypeString, Nullable: true},
		{Name: "capacity", Type: field.TypeInt, Nullable: true},
		{Name: "application_deadline", Type: field.TypeTime, Nullable: true},
		{Name: "requirements", Type: field.TypeJSON},
		{Name: "min_age", Type: field.TypeInt, Nullable: true},
		{Name: "max_age", Type: field.TypeInt, Nullable: true},
		{Name: "required_docs", Type: field.TypeJSON},
		{Name: "cost", Type: field.TypeFloat64, Nullable: true},
		{Name: "currency", Type: field.TypeString, Default: "EUR"},
		{Name: "rules", Type: field.TypeJSON},
		{Name: "steps", Type: field.TypeJSON},
		{Name: "required_skills", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_category_programs", Type: field.TypeInt},
		{Name: "user_created_programs", Type: field.TypeInt, Nullable: true},
		{Name: "user_updated_programs", Type: field.TypeInt, Nullable: true},
	}
	// ProgramsTable holds the schema information for the "programs" table.
	ProgramsTable = &schema.Table{
		Name:       "programs",
		Columns:    ProgramsColumns,
		PrimaryKey: []*schema.Column{ProgramsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "programs_program_categories_programs",
				Columns:    []*schema.Column{ProgramsColumns[31]},
				RefColumns: []*schema.Column{ProgramCategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "programs_users_created_programs",
				Columns:    []*schema.Column{ProgramsColumns[32]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "programs_users_updated_programs",
				Columns:    []*schema.Column{ProgramsColumns[33]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProgramCardItemsColumns holds the columns for the "program_card_items" table.
	ProgramCardItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "block_program_cards_selected_programs", Type: field.TypeInt},
		{Name: "program_program_card_items", Type: field.TypeInt, Nullable: true},
		{Name: "program_card_item_program", Type: field.TypeInt},
	}
	// ProgramCardItemsTable holds the schema information for the "program_card_items" table.
	ProgramCardItemsTable = &schema.Table{
		Name:       "program_card_items",
		Columns:    ProgramCardItemsColumns,
		PrimaryKey: []*schema.Column{ProgramCardItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_card_items_block_program_cards_selected_programs",
				Columns:    []*schema.Column{ProgramCardItemsColumns[2]},
				RefColumns: []*schema.Column{BlockProgramCardsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "program_card_items_programs_program_card_items",
				Columns:    []*schema.Column{ProgramCardItemsColumns[3]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "program_card_items_programs_program",
				Columns:    []*schema.Column{ProgramCardItemsColumns[4]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "programcarditem_order_block_program_cards_selected_programs",
				Unique:  false,
				Columns: []*schema.Column{ProgramCardItemsColumns[1], ProgramCardItemsColumns[2]},
			},
		},
	}
	// ProgramCategoriesColumns holds the columns for the "program_categories" table.
	ProgramCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "icon_name", Type: field.TypeString, Nullable: true},
		{Name: "display_order", Type: field.TypeInt, Default: 0},
		{Name: "color", Type: field.TypeString},
		{Name: "hero_image_url", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ProgramCategoriesTable holds the schema information for the "program_categories" table.
	ProgramCategoriesTable = &schema.Table{
		Name:       "program_categories",
		Columns:    ProgramCategoriesColumns,
		PrimaryKey: []*schema.Column{ProgramCategoriesColumns[0]},
	}
	// ProgramEnrolmentsColumns holds the columns for the "program_enrolments" table.
	ProgramEnrolmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "ELIGIBLE", "INELIGIBLE", "SUBMITTED", "ACCEPTED", "REJECTED", "WAITLISTED"}, Default: "DRAFT"},
		{Name: "answers", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_enrolments", Type: field.TypeInt},
		{Name: "user_program_enrolments", Type: field.TypeInt},
	}
	// ProgramEnrolmentsTable holds the schema information for the "program_enrolments" table.
	ProgramEnrolmentsTable = &schema.Table{
		Name:       "program_enrolments",
		Columns:    ProgramEnrolmentsColumns,
		PrimaryKey: []*schema.Column{ProgramEnrolmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_enrolments_programs_enrolments",
				Columns:    []*schema.Column{ProgramEnrolmentsColumns[5]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "program_enrolments_users_program_enrolments",
				Columns:    []*schema.Column{ProgramEnrolmentsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "programenrolment_program_enrolments_user_program_enrolments",
				Unique:  true,
				Columns: []*schema.Column{ProgramEnrolmentsColumns[5], ProgramEnrolmentsColumns[6]},
			},
		},
	}
	// ProgramParticipantsColumns holds the columns for the "program_participants" table.
	ProgramParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString},
		{Name: "enrollment_date", Type: field.TypeTime},
		{Name: "completion_date", Type: field.TypeTime, Nullable: true},
		{Name: "outcomes", Type: field.TypeJSON, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_participants", Type: field.TypeInt},
		{Name: "user_participant_in", Type: field.TypeInt},
	}
	// ProgramParticipantsTable holds the schema information for the "program_participants" table.
	ProgramParticipantsTable = &schema.Table{
		Name:       "program_participants",
		Columns:    ProgramParticipantsColumns,
		PrimaryKey: []*schema.Column{ProgramParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "program_participants_programs_participants",
				Columns:    []*schema.Column{ProgramParticipantsColumns[8]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "program_participants_users_participant_in",
				Columns:    []*schema.Column{ProgramParticipantsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "programparticipant_program_participants_user_participant_in",
				Unique:  true,
				Columns: []*schema.Column{ProgramParticipantsColumns[8], ProgramParticipantsColumns[9]},
			},
		},
	}
	// ReportDefinitionsColumns holds the columns for the "report_definitions" table.
	ReportDefinitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"DONATION_SUMMARY", "PROGRAM_IMPACT", "FINANCIAL_OVERVIEW", "ENGAGEMENT_METRICS", "VOLUNTEER_HOURS", "PARTNERSHIP_ROI", "CUSTOM"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "query", Type: field.TypeJSON, Nullable: true},
		{Name: "parameters", Type: field.TypeJSON, Nullable: true},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_created_reports", Type: field.TypeInt},
	}
	// ReportDefinitionsTable holds the schema information for the "report_definitions" table.
	ReportDefinitionsTable = &schema.Table{
		Name:       "report_definitions",
		Columns:    ReportDefinitionsColumns,
		PrimaryKey: []*schema.Column{ReportDefinitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "report_definitions_users_created_reports",
				Columns:    []*schema.Column{ReportDefinitionsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "reportdefinition_type",
				Unique:  false,
				Columns: []*schema.Column{ReportDefinitionsColumns[3]},
			},
			{
				Name:    "reportdefinition_slug",
				Unique:  false,
				Columns: []*schema.Column{ReportDefinitionsColumns[2]},
			},
		},
	}
	// ReportPermissionsColumns holds the columns for the "report_permissions" table.
	ReportPermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role_id", Type: field.TypeString, Nullable: true},
		{Name: "can_view", Type: field.TypeBool, Default: false},
		{Name: "can_edit", Type: field.TypeBool, Default: false},
		{Name: "can_delete", Type: field.TypeBool, Default: false},
		{Name: "can_schedule", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "report_definition_permissions", Type: field.TypeInt},
		{Name: "user_report_permissions", Type: field.TypeInt, Nullable: true},
	}
	// ReportPermissionsTable holds the schema information for the "report_permissions" table.
	ReportPermissionsTable = &schema.Table{
		Name:       "report_permissions",
		Columns:    ReportPermissionsColumns,
		PrimaryKey: []*schema.Column{ReportPermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "report_permissions_report_definitions_permissions",
				Columns:    []*schema.Column{ReportPermissionsColumns[7]},
				RefColumns: []*schema.Column{ReportDefinitionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "report_permissions_users_report_permissions",
				Columns:    []*schema.Column{ReportPermissionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "reportpermission_report_definition_permissions_user_report_permissions",
				Unique:  true,
				Columns: []*schema.Column{ReportPermissionsColumns[7], ReportPermissionsColumns[8]},
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"SUPER_ADMIN", "EXECUTIVE_DIRECTOR", "PROGRAM_MANAGER", "CONTENT_MANAGER", "FINANCE_MANAGER", "VOLUNTEER_COORDINATOR", "DATA_ANALYST", "BOARD_MEMBER", "ACTIVE_VOLUNTEER", "PROGRAM_ALUMNI", "CORPORATE_PARTNER", "INDIVIDUAL_MAJOR_DONOR", "INSTITUTIONAL_PARTNER", "PROGRAM_MENTOR"}},
		{Name: "permission_roles", Type: field.TypeInt},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_permissions_roles",
				Columns:    []*schema.Column{RolePermissionsColumns[2]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "rolepermission_role_permission_roles",
				Unique:  true,
				Columns: []*schema.Column{RolePermissionsColumns[1], RolePermissionsColumns[2]},
			},
		},
	}
	// ScheduledReportsColumns holds the columns for the "scheduled_reports" table.
	ScheduledReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "frequency", Type: field.TypeString},
		{Name: "day_of_week", Type: field.TypeInt, Nullable: true},
		{Name: "day_of_month", Type: field.TypeInt, Nullable: true},
		{Name: "time", Type: field.TypeString, Nullable: true},
		{Name: "timezone", Type: field.TypeString, Default: "UTC"},
		{Name: "recipients", Type: field.TypeJSON},
		{Name: "format", Type: field.TypeEnum, Enums: []string{"PDF", "CSV", "XLSX", "JSON"}},
		{Name: "parameters", Type: field.TypeJSON, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "last_run_at", Type: field.TypeTime, Nullable: true},
		{Name: "next_run_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "report_definition_schedules", Type: field.TypeInt},
		{Name: "user_scheduled_reports", Type: field.TypeInt},
	}
	// ScheduledReportsTable holds the schema information for the "scheduled_reports" table.
	ScheduledReportsTable = &schema.Table{
		Name:       "scheduled_reports",
		Columns:    ScheduledReportsColumns,
		PrimaryKey: []*schema.Column{ScheduledReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scheduled_reports_report_definitions_schedules",
				Columns:    []*schema.Column{ScheduledReportsColumns[14]},
				RefColumns: []*schema.Column{ReportDefinitionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "scheduled_reports_users_scheduled_reports",
				Columns:    []*schema.Column{ScheduledReportsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "scheduledreport_is_active_next_run_at",
				Unique:  false,
				Columns: []*schema.Column{ScheduledReportsColumns[9], ScheduledReportsColumns[11]},
			},
			{
				Name:    "scheduledreport_report_definition_schedules",
				Unique:  false,
				Columns: []*schema.Column{ScheduledReportsColumns[14]},
			},
		},
	}
	// SeoConfigsColumns holds the columns for the "seo_configs" table.
	SeoConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "meta_title", Type: field.TypeJSON},
		{Name: "meta_description", Type: field.TypeJSON, Nullable: true},
		{Name: "keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "og_title", Type: field.TypeJSON, Nullable: true},
		{Name: "og_description", Type: field.TypeJSON, Nullable: true},
		{Name: "og_image_url", Type: field.TypeString, Nullable: true},
		{Name: "og_type", Type: field.TypeString, Default: "website"},
		{Name: "twitter_card", Type: field.TypeString, Default: "summary_large_image"},
		{Name: "twitter_title", Type: field.TypeJSON, Nullable: true},
		{Name: "twitter_description", Type: field.TypeJSON, Nullable: true},
		{Name: "twitter_image_url", Type: field.TypeString, Nullable: true},
		{Name: "canonical_url", Type: field.TypeString, Nullable: true},
		{Name: "noindex", Type: field.TypeBool, Default: false},
		{Name: "nofollow", Type: field.TypeBool, Default: false},
		{Name: "structured_data", Type: field.TypeJSON, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "page_seo", Type: field.TypeInt, Unique: true},
	}
	// SeoConfigsTable holds the schema information for the "seo_configs" table.
	SeoConfigsTable = &schema.Table{
		Name:       "seo_configs",
		Columns:    SeoConfigsColumns,
		PrimaryKey: []*schema.Column{SeoConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "seo_configs_pages_seo",
				Columns:    []*schema.Column{SeoConfigsColumns[17]},
				RefColumns: []*schema.Column{PagesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SiteVisitsColumns holds the columns for the "site_visits" table.
	SiteVisitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "requested_date", Type: field.TypeTime},
		{Name: "scheduled_date", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "requested"},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "program_site_visits", Type: field.TypeInt},
		{Name: "user_site_visits", Type: field.TypeInt},
	}
	// SiteVisitsTable holds the schema information for the "site_visits" table.
	SiteVisitsTable = &schema.Table{
		Name:       "site_visits",
		Columns:    SiteVisitsColumns,
		PrimaryKey: []*schema.Column{SiteVisitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "site_visits_programs_site_visits",
				Columns:    []*schema.Column{SiteVisitsColumns[5]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "site_visits_users_site_visits",
				Columns:    []*schema.Column{SiteVisitsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SkillsColumns holds the columns for the "skills" table.
	SkillsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"TECHNICAL", "SOFT_SKILLS", "LANGUAGES", "CREATIVE", "MANAGEMENT"}},
	}
	// SkillsTable holds the schema information for the "skills" table.
	SkillsTable = &schema.Table{
		Name:       "skills",
		Columns:    SkillsColumns,
		PrimaryKey: []*schema.Column{SkillsColumns[0]},
	}
	// StatItemsColumns holds the columns for the "stat_items" table.
	StatItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "value", Type: field.TypeString},
		{Name: "label", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "icon_name", Type: field.TypeString, Nullable: true},
		{Name: "color", Type: field.TypeString, Nullable: true},
		{Name: "block_stats_stats", Type: field.TypeInt},
	}
	// StatItemsTable holds the schema information for the "stat_items" table.
	StatItemsTable = &schema.Table{
		Name:       "stat_items",
		Columns:    StatItemsColumns,
		PrimaryKey: []*schema.Column{StatItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "stat_items_block_stats_stats",
				Columns:    []*schema.Column{StatItemsColumns[7]},
				RefColumns: []*schema.Column{BlockStatsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "statitem_order_block_stats_stats",
				Unique:  false,
				Columns: []*schema.Column{StatItemsColumns[1], StatItemsColumns[7]},
			},
		},
	}
	// SuccessStoriesColumns holds the columns for the "success_stories" table.
	SuccessStoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "excerpt", Type: field.TypeJSON},
		{Name: "content", Type: field.TypeJSON},
		{Name: "quote", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"DRAFT", "REVIEW", "PUBLISHED", "ARCHIVED"}, Default: "DRAFT"},
		{Name: "published_at", Type: field.TypeTime, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_success_stories", Type: field.TypeInt},
		{Name: "user_success_stories", Type: field.TypeInt, Nullable: true},
	}
	// SuccessStoriesTable holds the schema information for the "success_stories" table.
	SuccessStoriesTable = &schema.Table{
		Name:       "success_stories",
		Columns:    SuccessStoriesColumns,
		PrimaryKey: []*schema.Column{SuccessStoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "success_stories_programs_success_stories",
				Columns:    []*schema.Column{SuccessStoriesColumns[11]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "success_stories_users_success_stories",
				Columns:    []*schema.Column{SuccessStoriesColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SystemErrorsColumns holds the columns for the "system_errors" table.
	SystemErrorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "name", Type: field.TypeString},
		{Name: "stack", Type: field.TypeString, Size: 2147483647},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
		{Name: "context", Type: field.TypeString, Nullable: true},
		{Name: "is_resolved", Type: field.TypeBool, Default: false},
		{Name: "resolved_at", Type: field.TypeTime, Nullable: true},
		{Name: "resolved_by", Type: field.TypeString, Nullable: true},
	}
	// SystemErrorsTable holds the schema information for the "system_errors" table.
	SystemErrorsTable = &schema.Table{
		Name:       "system_errors",
		Columns:    SystemErrorsColumns,
		PrimaryKey: []*schema.Column{SystemErrorsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "systemerror_is_resolved_timestamp",
				Unique:  false,
				Columns: []*schema.Column{SystemErrorsColumns[8], SystemErrorsColumns[1]},
			},
			{
				Name:    "systemerror_name",
				Unique:  false,
				Columns: []*schema.Column{SystemErrorsColumns[3]},
			},
			{
				Name:    "systemerror_user_id",
				Unique:  false,
				Columns: []*schema.Column{SystemErrorsColumns[6]},
			},
		},
	}
	// SystemLogsColumns holds the columns for the "system_logs" table.
	SystemLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "level", Type: field.TypeEnum, Enums: []string{"DEBUG", "INFO", "WARN", "ERROR", "FATAL"}},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeString, Nullable: true},
		{Name: "context", Type: field.TypeString, Nullable: true},
	}
	// SystemLogsTable holds the schema information for the "system_logs" table.
	SystemLogsTable = &schema.Table{
		Name:       "system_logs",
		Columns:    SystemLogsColumns,
		PrimaryKey: []*schema.Column{SystemLogsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "systemlog_level_timestamp",
				Unique:  false,
				Columns: []*schema.Column{SystemLogsColumns[2], SystemLogsColumns[1]},
			},
			{
				Name:    "systemlog_user_id",
				Unique:  false,
				Columns: []*schema.Column{SystemLogsColumns[5]},
			},
			{
				Name:    "systemlog_context",
				Unique:  false,
				Columns: []*schema.Column{SystemLogsColumns[6]},
			},
		},
	}
	// TabItemsColumns holds the columns for the "tab_items" table.
	TabItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "title", Type: field.TypeJSON},
		{Name: "content", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "block_tabs_items", Type: field.TypeInt},
	}
	// TabItemsTable holds the schema information for the "tab_items" table.
	TabItemsTable = &schema.Table{
		Name:       "tab_items",
		Columns:    TabItemsColumns,
		PrimaryKey: []*schema.Column{TabItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tab_items_block_tabs_items",
				Columns:    []*schema.Column{TabItemsColumns[6]},
				RefColumns: []*schema.Column{BlockTabsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tabitem_order_block_tabs_items",
				Unique:  false,
				Columns: []*schema.Column{TabItemsColumns[1], TabItemsColumns[6]},
			},
		},
	}
	// TeamMembersColumns holds the columns for the "team_members" table.
	TeamMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "bio", Type: field.TypeJSON, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "linkedin_url", Type: field.TypeString, Nullable: true},
		{Name: "twitter_url", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"LEADERSHIP", "BOARD_MEMBER", "KEY_STAFF", "ADVISOR"}},
		{Name: "display_order", Type: field.TypeInt, Default: 0},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "team_member_user", Type: field.TypeInt, Nullable: true},
	}
	// TeamMembersTable holds the schema information for the "team_members" table.
	TeamMembersTable = &schema.Table{
		Name:       "team_members",
		Columns:    TeamMembersColumns,
		PrimaryKey: []*schema.Column{TeamMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_members_users_user",
				Columns:    []*schema.Column{TeamMembersColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "teammember_type_is_active_display_order",
				Unique:  false,
				Columns: []*schema.Column{TeamMembersColumns[8], TeamMembersColumns[10], TeamMembersColumns[9]},
			},
		},
	}
	// TeamMemberItemsColumns holds the columns for the "team_member_items" table.
	TeamMemberItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString},
		{Name: "role", Type: field.TypeJSON},
		{Name: "bio", Type: field.TypeJSON, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "linkedin_url", Type: field.TypeString, Nullable: true},
		{Name: "twitter_url", Type: field.TypeString, Nullable: true},
		{Name: "email_url", Type: field.TypeString, Nullable: true},
		{Name: "block_team_grid_members", Type: field.TypeInt},
	}
	// TeamMemberItemsTable holds the schema information for the "team_member_items" table.
	TeamMemberItemsTable = &schema.Table{
		Name:       "team_member_items",
		Columns:    TeamMemberItemsColumns,
		PrimaryKey: []*schema.Column{TeamMemberItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_member_items_block_team_grids_members",
				Columns:    []*schema.Column{TeamMemberItemsColumns[9]},
				RefColumns: []*schema.Column{BlockTeamGridsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "teammemberitem_order_block_team_grid_members",
				Unique:  false,
				Columns: []*schema.Column{TeamMemberItemsColumns[1], TeamMemberItemsColumns[9]},
			},
		},
	}
	// TestimonialItemsColumns holds the columns for the "testimonial_items" table.
	TestimonialItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "quote", Type: field.TypeJSON},
		{Name: "author_name", Type: field.TypeString},
		{Name: "author_role", Type: field.TypeJSON},
		{Name: "author_image_url", Type: field.TypeString, Nullable: true},
		{Name: "block_testimonials_testimonials", Type: field.TypeInt},
		{Name: "success_story_testimonials", Type: field.TypeInt, Nullable: true},
		{Name: "testimonial_item_success_story", Type: field.TypeInt, Nullable: true},
	}
	// TestimonialItemsTable holds the schema information for the "testimonial_items" table.
	TestimonialItemsTable = &schema.Table{
		Name:       "testimonial_items",
		Columns:    TestimonialItemsColumns,
		PrimaryKey: []*schema.Column{TestimonialItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "testimonial_items_block_testimonials_testimonials",
				Columns:    []*schema.Column{TestimonialItemsColumns[6]},
				RefColumns: []*schema.Column{BlockTestimonialsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "testimonial_items_success_stories_testimonials",
				Columns:    []*schema.Column{TestimonialItemsColumns[7]},
				RefColumns: []*schema.Column{SuccessStoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "testimonial_items_success_stories_success_story",
				Columns:    []*schema.Column{TestimonialItemsColumns[8]},
				RefColumns: []*schema.Column{SuccessStoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "testimonialitem_order_block_testimonials_testimonials",
				Unique:  false,
				Columns: []*schema.Column{TestimonialItemsColumns[1], TestimonialItemsColumns[6]},
			},
		},
	}
	// TimelineEventsColumns holds the columns for the "timeline_events" table.
	TimelineEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "date", Type: field.TypeString},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "block_timeline_events", Type: field.TypeInt},
	}
	// TimelineEventsTable holds the schema information for the "timeline_events" table.
	TimelineEventsTable = &schema.Table{
		Name:       "timeline_events",
		Columns:    TimelineEventsColumns,
		PrimaryKey: []*schema.Column{TimelineEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "timeline_events_block_timelines_events",
				Columns:    []*schema.Column{TimelineEventsColumns[6]},
				RefColumns: []*schema.Column{BlockTimelinesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "timelineevent_order_block_timeline_events",
				Unique:  false,
				Columns: []*schema.Column{TimelineEventsColumns[1], TimelineEventsColumns[6]},
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"RESET_PASSWORD", "VERIFY_EMAIL", "IMPERSONATE", "TWO_FACTOR_AUTH", "ACCESS_TOKEN", "REFRESH_TOKEN", "MFA_TOKEN"}},
		{Name: "token_hash", Type: field.TypeString, Unique: true},
		{Name: "jti", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "used", Type: field.TypeBool, Default: false},
		{Name: "mfa_verified", Type: field.TypeBool, Default: false},
		{Name: "mfa_method", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_tokens", Type: field.TypeInt},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "token_type",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[1]},
			},
			{
				Name:    "token_expires_at",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[4]},
			},
			{
				Name:    "token_used",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[5]},
			},
			{
				Name:    "token_jti",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[3]},
			},
		},
	}
	// TrustedDevicesColumns holds the columns for the "trusted_devices" table.
	TrustedDevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "fingerprint", Type: field.TypeString},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "last_ip", Type: field.TypeString, Nullable: true},
		{Name: "last_used_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "verified_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_trusted_devices", Type: field.TypeInt},
	}
	// TrustedDevicesTable holds the schema information for the "trusted_devices" table.
	TrustedDevicesTable = &schema.Table{
		Name:       "trusted_devices",
		Columns:    TrustedDevicesColumns,
		PrimaryKey: []*schema.Column{TrustedDevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "trusted_devices_users_trusted_devices",
				Columns:    []*schema.Column{TrustedDevicesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "trusteddevice_fingerprint_user_trusted_devices",
				Unique:  true,
				Columns: []*schema.Column{TrustedDevicesColumns[1], TrustedDevicesColumns[7]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "hashed_password", Type: field.TypeString, Nullable: true},
		{Name: "is_verified", Type: field.TypeBool, Default: false},
		{Name: "email_verified", Type: field.TypeTime, Nullable: true},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true},
		{Name: "locked_until", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "impersonating_user_id", Type: field.TypeString, Nullable: true},
		{Name: "security_timestamp", Type: field.TypeTime},
		{Name: "password_reset_required", Type: field.TypeBool, Default: false},
		{Name: "roles", Type: field.TypeJSON},
		{Name: "mfa_secret", Type: field.TypeString, Nullable: true},
		{Name: "mfa_enabled", Type: field.TypeBool, Default: false},
		{Name: "onboarding_started_at", Type: field.TypeTime, Nullable: true},
		{Name: "onboarding_completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "onboarding_skipped", Type: field.TypeBool, Default: false},
		{Name: "onboarding_version", Type: field.TypeString, Nullable: true},
		{Name: "onboarding_completed", Type: field.TypeBool, Default: false},
		{Name: "position", Type: field.TypeString, Nullable: true},
		{Name: "analytics_properties", Type: field.TypeJSON, Nullable: true},
		{Name: "user_team_member", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_team_members_team_member",
				Columns:    []*schema.Column{UsersColumns[25]},
				RefColumns: []*schema.Column{TeamMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_is_active",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[7]},
			},
			{
				Name:    "user_locked_until",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[9]},
			},
		},
	}
	// UserAchievementsColumns holds the columns for the "user_achievements" table.
	UserAchievementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "awarded_at", Type: field.TypeTime},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "badge_user_achievements", Type: field.TypeInt},
		{Name: "user_achievements", Type: field.TypeInt},
	}
	// UserAchievementsTable holds the schema information for the "user_achievements" table.
	UserAchievementsTable = &schema.Table{
		Name:       "user_achievements",
		Columns:    UserAchievementsColumns,
		PrimaryKey: []*schema.Column{UserAchievementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_achievements_badges_user_achievements",
				Columns:    []*schema.Column{UserAchievementsColumns[3]},
				RefColumns: []*schema.Column{BadgesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_achievements_users_achievements",
				Columns:    []*schema.Column{UserAchievementsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userachievement_user_achievements_badge_user_achievements",
				Unique:  true,
				Columns: []*schema.Column{UserAchievementsColumns[4], UserAchievementsColumns[3]},
			},
		},
	}
	// UserConsentsColumns holds the columns for the "user_consents" table.
	UserConsentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "preferences", Type: field.TypeJSON},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_consents", Type: field.TypeInt, Unique: true},
	}
	// UserConsentsTable holds the schema information for the "user_consents" table.
	UserConsentsTable = &schema.Table{
		Name:       "user_consents",
		Columns:    UserConsentsColumns,
		PrimaryKey: []*schema.Column{UserConsentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_consents_users_consents",
				Columns:    []*schema.Column{UserConsentsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserOnboardingsColumns holds the columns for the "user_onboardings" table.
	UserOnboardingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_completed", Type: field.TypeBool, Default: false},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "steps", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_onboarding", Type: field.TypeInt, Unique: true},
	}
	// UserOnboardingsTable holds the schema information for the "user_onboardings" table.
	UserOnboardingsTable = &schema.Table{
		Name:       "user_onboardings",
		Columns:    UserOnboardingsColumns,
		PrimaryKey: []*schema.Column{UserOnboardingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_onboardings_users_onboarding",
				Columns:    []*schema.Column{UserOnboardingsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserProfilesColumns holds the columns for the "user_profiles" table.
	UserProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
		{Name: "bio", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "job_title", Type: field.TypeString, Nullable: true},
		{Name: "company", Type: field.TypeString, Nullable: true},
		{Name: "linkedin", Type: field.TypeString, Nullable: true},
		{Name: "twitter", Type: field.TypeString, Nullable: true},
		{Name: "interests", Type: field.TypeJSON},
		{Name: "completed_pct", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "address_user_profiles", Type: field.TypeInt, Nullable: true},
		{Name: "user_profile", Type: field.TypeInt, Unique: true},
		{Name: "user_profile_address", Type: field.TypeInt},
	}
	// UserProfilesTable holds the schema information for the "user_profiles" table.
	UserProfilesTable = &schema.Table{
		Name:       "user_profiles",
		Columns:    UserProfilesColumns,
		PrimaryKey: []*schema.Column{UserProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_profiles_addresses_user_profiles",
				Columns:    []*schema.Column{UserProfilesColumns[14]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_profiles_users_profile",
				Columns:    []*schema.Column{UserProfilesColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_profiles_addresses_address",
				Columns:    []*schema.Column{UserProfilesColumns[16]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserSessionsColumns holds the columns for the "user_sessions" table.
	UserSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "session_token", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "last_accessed", Type: field.TypeTime},
		{Name: "device_fingerprint", Type: field.TypeString, Nullable: true},
		{Name: "user_sessions", Type: field.TypeInt},
	}
	// UserSessionsTable holds the schema information for the "user_sessions" table.
	UserSessionsTable = &schema.Table{
		Name:       "user_sessions",
		Columns:    UserSessionsColumns,
		PrimaryKey: []*schema.Column{UserSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sessions_users_sessions",
				Columns:    []*schema.Column{UserSessionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usersession_expires_at",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[2]},
			},
			{
				Name:    "usersession_session_token",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[1]},
			},
			{
				Name:    "usersession_device_fingerprint",
				Unique:  false,
				Columns: []*schema.Column{UserSessionsColumns[7]},
			},
		},
	}
	// UserSkillsColumns holds the columns for the "user_skills" table.
	UserSkillsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "level", Type: field.TypeEnum, Enums: []string{"BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT"}, Default: "INTERMEDIATE"},
		{Name: "skill_users", Type: field.TypeInt},
		{Name: "user_profile_skills", Type: field.TypeInt},
	}
	// UserSkillsTable holds the schema information for the "user_skills" table.
	UserSkillsTable = &schema.Table{
		Name:       "user_skills",
		Columns:    UserSkillsColumns,
		PrimaryKey: []*schema.Column{UserSkillsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_skills_skills_users",
				Columns:    []*schema.Column{UserSkillsColumns[2]},
				RefColumns: []*schema.Column{SkillsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_skills_user_profiles_skills",
				Columns:    []*schema.Column{UserSkillsColumns[3]},
				RefColumns: []*schema.Column{UserProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userskill_user_profile_skills_skill_users",
				Unique:  true,
				Columns: []*schema.Column{UserSkillsColumns[3], UserSkillsColumns[2]},
			},
			{
				Name:    "userskill_user_profile_skills",
				Unique:  false,
				Columns: []*schema.Column{UserSkillsColumns[3]},
			},
			{
				Name:    "userskill_skill_users",
				Unique:  false,
				Columns: []*schema.Column{UserSkillsColumns[2]},
			},
			{
				Name:    "userskill_level",
				Unique:  false,
				Columns: []*schema.Column{UserSkillsColumns[1]},
			},
		},
	}
	// VolunteerApplicationsColumns holds the columns for the "volunteer_applications" table.
	VolunteerApplicationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"SUBMITTED", "UNDER_REVIEW", "INTERVIEW_SCHEDULED", "BACKGROUND_CHECK", "APPROVED", "REJECTED", "WAITLISTED"}, Default: "SUBMITTED"},
		{Name: "motivation", Type: field.TypeString, Size: 2147483647},
		{Name: "availability", Type: field.TypeJSON},
		{Name: "background_check", Type: field.TypeBool, Default: false},
		{Name: "background_check_date", Type: field.TypeTime, Nullable: true},
		{Name: "references", Type: field.TypeJSON, Nullable: true},
		{Name: "emergency_contact", Type: field.TypeJSON, Nullable: true},
		{Name: "reviewed_by", Type: field.TypeString, Nullable: true},
		{Name: "reviewed_at", Type: field.TypeTime, Nullable: true},
		{Name: "review_notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "interview_date", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_volunteer_applications", Type: field.TypeInt},
	}
	// VolunteerApplicationsTable holds the schema information for the "volunteer_applications" table.
	VolunteerApplicationsTable = &schema.Table{
		Name:       "volunteer_applications",
		Columns:    VolunteerApplicationsColumns,
		PrimaryKey: []*schema.Column{VolunteerApplicationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "volunteer_applications_users_volunteer_applications",
				Columns:    []*schema.Column{VolunteerApplicationsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "volunteerapplication_user_volunteer_applications",
				Unique:  false,
				Columns: []*schema.Column{VolunteerApplicationsColumns[14]},
			},
			{
				Name:    "volunteerapplication_status",
				Unique:  false,
				Columns: []*schema.Column{VolunteerApplicationsColumns[1]},
			},
		},
	}
	// VolunteerAssignmentsColumns holds the columns for the "volunteer_assignments" table.
	VolunteerAssignmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString, Default: "active"},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "hours_completed", Type: field.TypeInt, Default: 0},
		{Name: "hours_committed", Type: field.TypeInt, Default: 0},
		{Name: "feedback", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "rating", Type: field.TypeInt, Nullable: true},
		{Name: "completion_notes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_profile_assignments", Type: field.TypeInt},
		{Name: "volunteer_opportunity_assignments", Type: field.TypeInt},
	}
	// VolunteerAssignmentsTable holds the schema information for the "volunteer_assignments" table.
	VolunteerAssignmentsTable = &schema.Table{
		Name:       "volunteer_assignments",
		Columns:    VolunteerAssignmentsColumns,
		PrimaryKey: []*schema.Column{VolunteerAssignmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "volunteer_assignments_user_profiles_assignments",
				Columns:    []*schema.Column{VolunteerAssignmentsColumns[11]},
				RefColumns: []*schema.Column{UserProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "volunteer_assignments_volunteer_opportunities_assignments",
				Columns:    []*schema.Column{VolunteerAssignmentsColumns[12]},
				RefColumns: []*schema.Column{VolunteerOpportunitiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "volunteerassignment_volunteer_opportunity_assignments_user_profile_assignments",
				Unique:  true,
				Columns: []*schema.Column{VolunteerAssignmentsColumns[12], VolunteerAssignmentsColumns[11]},
			},
			{
				Name:    "volunteerassignment_user_profile_assignments",
				Unique:  false,
				Columns: []*schema.Column{VolunteerAssignmentsColumns[11]},
			},
		},
	}
	// VolunteerOpportunitiesColumns holds the columns for the "volunteer_opportunities" table.
	VolunteerOpportunitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeJSON},
		{Name: "description", Type: field.TypeJSON},
		{Name: "time_commitment", Type: field.TypeString},
		{Name: "location", Type: field.TypeJSON},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "max_volunteers", Type: field.TypeInt, Nullable: true},
		{Name: "current_volunteers", Type: field.TypeInt, Default: 0},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "application_deadline", Type: field.TypeTime, Nullable: true},
		{Name: "required_skills", Type: field.TypeJSON},
		{Name: "preferred_skills", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "is_urgent", Type: field.TypeBool, Default: false},
		{Name: "is_recurring", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "program_volunteer_opportunities", Type: field.TypeInt},
	}
	// VolunteerOpportunitiesTable holds the schema information for the "volunteer_opportunities" table.
	VolunteerOpportunitiesTable = &schema.Table{
		Name:       "volunteer_opportunities",
		Columns:    VolunteerOpportunitiesColumns,
		PrimaryKey: []*schema.Column{VolunteerOpportunitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "volunteer_opportunities_programs_volunteer_opportunities",
				Columns:    []*schema.Column{VolunteerOpportunitiesColumns[18]},
				RefColumns: []*schema.Column{ProgramsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "volunteeropportunity_is_active_program_volunteer_opportunities",
				Unique:  false,
				Columns: []*schema.Column{VolunteerOpportunitiesColumns[5], VolunteerOpportunitiesColumns[18]},
			},
		},
	}
	// VotesColumns holds the columns for the "votes" table.
	VotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "question", Type: field.TypeString},
		{Name: "options", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeString, Default: "open"},
		{Name: "result", Type: field.TypeString, Nullable: true},
		{Name: "agenda_item_vote", Type: field.TypeInt, Unique: true},
	}
	// VotesTable holds the schema information for the "votes" table.
	VotesTable = &schema.Table{
		Name:       "votes",
		Columns:    VotesColumns,
		PrimaryKey: []*schema.Column{VotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "votes_agenda_items_vote",
				Columns:    []*schema.Column{VotesColumns[5]},
				RefColumns: []*schema.Column{AgendaItemsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserPartnershipContactsColumns holds the columns for the "user_partnership_contacts" table.
	UserPartnershipContactsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "partnership_id", Type: field.TypeInt},
	}
	// UserPartnershipContactsTable holds the schema information for the "user_partnership_contacts" table.
	UserPartnershipContactsTable = &schema.Table{
		Name:       "user_partnership_contacts",
		Columns:    UserPartnershipContactsColumns,
		PrimaryKey: []*schema.Column{UserPartnershipContactsColumns[0], UserPartnershipContactsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_partnership_contacts_user_id",
				Columns:    []*schema.Column{UserPartnershipContactsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_partnership_contacts_partnership_id",
				Columns:    []*schema.Column{UserPartnershipContactsColumns[1]},
				RefColumns: []*schema.Column{PartnershipsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// VolunteerOpportunityInterestedVolunteersColumns holds the columns for the "volunteer_opportunity_interested_volunteers" table.
	VolunteerOpportunityInterestedVolunteersColumns = []*schema.Column{
		{Name: "volunteer_opportunity_id", Type: field.TypeInt},
		{Name: "volunteer_application_id", Type: field.TypeInt},
	}
	// VolunteerOpportunityInterestedVolunteersTable holds the schema information for the "volunteer_opportunity_interested_volunteers" table.
	VolunteerOpportunityInterestedVolunteersTable = &schema.Table{
		Name:       "volunteer_opportunity_interested_volunteers",
		Columns:    VolunteerOpportunityInterestedVolunteersColumns,
		PrimaryKey: []*schema.Column{VolunteerOpportunityInterestedVolunteersColumns[0], VolunteerOpportunityInterestedVolunteersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "volunteer_opportunity_interested_volunteers_volunteer_opportunity_id",
				Columns:    []*schema.Column{VolunteerOpportunityInterestedVolunteersColumns[0]},
				RefColumns: []*schema.Column{VolunteerOpportunitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "volunteer_opportunity_interested_volunteers_volunteer_application_id",
				Columns:    []*schema.Column{VolunteerOpportunityInterestedVolunteersColumns[1]},
				RefColumns: []*schema.Column{VolunteerApplicationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccordionItemsTable,
		ActionItemsTable,
		ActivityLogsTable,
		AddressesTable,
		AgendasTable,
		AgendaItemsTable,
		AnalyticsDashboardsTable,
		AnalyticsEventsTable,
		AppSettingsTable,
		AuditLogsTable,
		BadgesTable,
		BallotsTable,
		BlockAccordionsTable,
		BlockContactFormsTable,
		BlockCtaTable,
		BlockDividersTable,
		BlockDonationFormsTable,
		BlockFaqsTable,
		BlockGalleriesTable,
		BlockHerosTable,
		BlockMapsTable,
		BlockNewsletterSignupsTable,
		BlockPartnerLogosTable,
		BlockProgramCardsTable,
		BlockStatsTable,
		BlockSuccessStoriesTable,
		BlockTabsTable,
		BlockTeamGridsTable,
		BlockTestimonialsTable,
		BlockTextContentsTable,
		BlockTimelinesTable,
		BlockVideoEmbedsTable,
		BlockVolunteerSignupsTable,
		BrandBenefitsTable,
		BrandConfigsTable,
		ContentBlocksTable,
		ConversationsTable,
		ConversationParticipantsTable,
		DashboardWidgetsTable,
		DocumentsTable,
		DocumentCategoriesTable,
		DonationsTable,
		EventsTable,
		EventRegistrationsTable,
		FaqItemsTable,
		FeatureFlagsTable,
		FundraisingCampaignsTable,
		GalleryImagesTable,
		GeneratedReportsTable,
		GrantsTable,
		GrantReportsTable,
		ImpactDataPointsTable,
		ImpactMetricsTable,
		JobsTable,
		JobLogsTable,
		MentorshipRequestsTable,
		MentorshipSessionsTable,
		MessagesTable,
		NewsArticlesTable,
		OrganizationsTable,
		PagesTable,
		PartnerLogoItemsTable,
		PartnershipsTable,
		PartnershipInteractionsTable,
		PartnershipRenewalsTable,
		PartnershipReportsTable,
		PasswordHistoriesTable,
		PermissionsTable,
		ProgramsTable,
		ProgramCardItemsTable,
		ProgramCategoriesTable,
		ProgramEnrolmentsTable,
		ProgramParticipantsTable,
		ReportDefinitionsTable,
		ReportPermissionsTable,
		RolePermissionsTable,
		ScheduledReportsTable,
		SeoConfigsTable,
		SiteVisitsTable,
		SkillsTable,
		StatItemsTable,
		SuccessStoriesTable,
		SystemErrorsTable,
		SystemLogsTable,
		TabItemsTable,
		TeamMembersTable,
		TeamMemberItemsTable,
		TestimonialItemsTable,
		TimelineEventsTable,
		TokensTable,
		TrustedDevicesTable,
		UsersTable,
		UserAchievementsTable,
		UserConsentsTable,
		UserOnboardingsTable,
		UserProfilesTable,
		UserSessionsTable,
		UserSkillsTable,
		VolunteerApplicationsTable,
		VolunteerAssignmentsTable,
		VolunteerOpportunitiesTable,
		VotesTable,
		UserPartnershipContactsTable,
		VolunteerOpportunityInterestedVolunteersTable,
	}
)

func init() {
	AccordionItemsTable.ForeignKeys[0].RefTable = BlockAccordionsTable
	ActionItemsTable.ForeignKeys[0].RefTable = AgendaItemsTable
	ActivityLogsTable.ForeignKeys[0].RefTable = UsersTable
	AgendasTable.ForeignKeys[0].RefTable = EventsTable
	AgendasTable.ForeignKeys[1].RefTable = MentorshipSessionsTable
	AgendaItemsTable.ForeignKeys[0].RefTable = AgendasTable
	AnalyticsDashboardsTable.ForeignKeys[0].RefTable = UsersTable
	AnalyticsEventsTable.ForeignKeys[0].RefTable = UsersTable
	AuditLogsTable.ForeignKeys[0].RefTable = UsersTable
	AuditLogsTable.ForeignKeys[1].RefTable = UsersTable
	BallotsTable.ForeignKeys[0].RefTable = VotesTable
	BlockAccordionsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockContactFormsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockCtaTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockDividersTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockDonationFormsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockFaqsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockGalleriesTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockHerosTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockMapsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockNewsletterSignupsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockPartnerLogosTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockProgramCardsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockStatsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockSuccessStoriesTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockTabsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockTeamGridsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockTestimonialsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockTextContentsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockTimelinesTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockVideoEmbedsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BlockVolunteerSignupsTable.ForeignKeys[0].RefTable = ContentBlocksTable
	BrandBenefitsTable.ForeignKeys[0].RefTable = PartnershipsTable
	ContentBlocksTable.ForeignKeys[0].RefTable = PagesTable
	ConversationParticipantsTable.ForeignKeys[0].RefTable = ConversationsTable
	ConversationParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	DashboardWidgetsTable.ForeignKeys[0].RefTable = AnalyticsDashboardsTable
	DocumentsTable.ForeignKeys[0].RefTable = DocumentCategoriesTable
	DocumentsTable.ForeignKeys[1].RefTable = UsersTable
	DocumentCategoriesTable.ForeignKeys[0].RefTable = DocumentCategoriesTable
	DonationsTable.ForeignKeys[0].RefTable = FundraisingCampaignsTable
	DonationsTable.ForeignKeys[1].RefTable = ProgramsTable
	DonationsTable.ForeignKeys[2].RefTable = UsersTable
	EventsTable.ForeignKeys[0].RefTable = AddressesTable
	EventsTable.ForeignKeys[1].RefTable = AddressesTable
	EventsTable.ForeignKeys[2].RefTable = ProgramsTable
	EventsTable.ForeignKeys[3].RefTable = UsersTable
	EventRegistrationsTable.ForeignKeys[0].RefTable = EventsTable
	EventRegistrationsTable.ForeignKeys[1].RefTable = UsersTable
	FaqItemsTable.ForeignKeys[0].RefTable = BlockFaqsTable
	FundraisingCampaignsTable.ForeignKeys[0].RefTable = FundraisingCampaignsTable
	FundraisingCampaignsTable.ForeignKeys[1].RefTable = ProgramsTable
	GalleryImagesTable.ForeignKeys[0].RefTable = BlockGalleriesTable
	GeneratedReportsTable.ForeignKeys[0].RefTable = JobsTable
	GeneratedReportsTable.ForeignKeys[1].RefTable = ReportDefinitionsTable
	GeneratedReportsTable.ForeignKeys[2].RefTable = UsersTable
	GrantsTable.ForeignKeys[0].RefTable = OrganizationsTable
	GrantsTable.ForeignKeys[1].RefTable = ProgramsTable
	GrantReportsTable.ForeignKeys[0].RefTable = GrantsTable
	ImpactDataPointsTable.ForeignKeys[0].RefTable = ImpactMetricsTable
	ImpactMetricsTable.ForeignKeys[0].RefTable = ProgramsTable
	JobsTable.ForeignKeys[0].RefTable = UsersTable
	JobsTable.ForeignKeys[1].RefTable = JobsTable
	JobsTable.ForeignKeys[2].RefTable = UsersTable
	JobLogsTable.ForeignKeys[0].RefTable = JobsTable
	MentorshipRequestsTable.ForeignKeys[0].RefTable = UsersTable
	MentorshipRequestsTable.ForeignKeys[1].RefTable = UsersTable
	MentorshipSessionsTable.ForeignKeys[0].RefTable = MentorshipRequestsTable
	MessagesTable.ForeignKeys[0].RefTable = ConversationsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	NewsArticlesTable.ForeignKeys[0].RefTable = UsersTable
	OrganizationsTable.ForeignKeys[0].RefTable = UsersTable
	PagesTable.ForeignKeys[0].RefTable = PagesTable
	PartnerLogoItemsTable.ForeignKeys[0].RefTable = BlockPartnerLogosTable
	PartnershipsTable.ForeignKeys[0].RefTable = OrganizationsTable
	PartnershipsTable.ForeignKeys[1].RefTable = UsersTable
	PartnershipInteractionsTable.ForeignKeys[0].RefTable = PartnershipsTable
	PartnershipRenewalsTable.ForeignKeys[0].RefTable = PartnershipsTable
	PartnershipReportsTable.ForeignKeys[0].RefTable = PartnershipsTable
	PasswordHistoriesTable.ForeignKeys[0].RefTable = UsersTable
	ProgramsTable.ForeignKeys[0].RefTable = ProgramCategoriesTable
	ProgramsTable.ForeignKeys[1].RefTable = UsersTable
	ProgramsTable.ForeignKeys[2].RefTable = UsersTable
	ProgramCardItemsTable.ForeignKeys[0].RefTable = BlockProgramCardsTable
	ProgramCardItemsTable.ForeignKeys[1].RefTable = ProgramsTable
	ProgramCardItemsTable.ForeignKeys[2].RefTable = ProgramsTable
	ProgramEnrolmentsTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramEnrolmentsTable.ForeignKeys[1].RefTable = UsersTable
	ProgramParticipantsTable.ForeignKeys[0].RefTable = ProgramsTable
	ProgramParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	ReportDefinitionsTable.ForeignKeys[0].RefTable = UsersTable
	ReportPermissionsTable.ForeignKeys[0].RefTable = ReportDefinitionsTable
	ReportPermissionsTable.ForeignKeys[1].RefTable = UsersTable
	RolePermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	ScheduledReportsTable.ForeignKeys[0].RefTable = ReportDefinitionsTable
	ScheduledReportsTable.ForeignKeys[1].RefTable = UsersTable
	SeoConfigsTable.ForeignKeys[0].RefTable = PagesTable
	SiteVisitsTable.ForeignKeys[0].RefTable = ProgramsTable
	SiteVisitsTable.ForeignKeys[1].RefTable = UsersTable
	StatItemsTable.ForeignKeys[0].RefTable = BlockStatsTable
	SuccessStoriesTable.ForeignKeys[0].RefTable = ProgramsTable
	SuccessStoriesTable.ForeignKeys[1].RefTable = UsersTable
	TabItemsTable.ForeignKeys[0].RefTable = BlockTabsTable
	TeamMembersTable.ForeignKeys[0].RefTable = UsersTable
	TeamMemberItemsTable.ForeignKeys[0].RefTable = BlockTeamGridsTable
	TestimonialItemsTable.ForeignKeys[0].RefTable = BlockTestimonialsTable
	TestimonialItemsTable.ForeignKeys[1].RefTable = SuccessStoriesTable
	TestimonialItemsTable.ForeignKeys[2].RefTable = SuccessStoriesTable
	TimelineEventsTable.ForeignKeys[0].RefTable = BlockTimelinesTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
	TrustedDevicesTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = TeamMembersTable
	UserAchievementsTable.ForeignKeys[0].RefTable = BadgesTable
	UserAchievementsTable.ForeignKeys[1].RefTable = UsersTable
	UserConsentsTable.ForeignKeys[0].RefTable = UsersTable
	UserOnboardingsTable.ForeignKeys[0].RefTable = UsersTable
	UserProfilesTable.ForeignKeys[0].RefTable = AddressesTable
	UserProfilesTable.ForeignKeys[1].RefTable = UsersTable
	UserProfilesTable.ForeignKeys[2].RefTable = AddressesTable
	UserSessionsTable.ForeignKeys[0].RefTable = UsersTable
	UserSkillsTable.ForeignKeys[0].RefTable = SkillsTable
	UserSkillsTable.ForeignKeys[1].RefTable = UserProfilesTable
	VolunteerApplicationsTable.ForeignKeys[0].RefTable = UsersTable
	VolunteerAssignmentsTable.ForeignKeys[0].RefTable = UserProfilesTable
	VolunteerAssignmentsTable.ForeignKeys[1].RefTable = VolunteerOpportunitiesTable
	VolunteerOpportunitiesTable.ForeignKeys[0].RefTable = ProgramsTable
	VotesTable.ForeignKeys[0].RefTable = AgendaItemsTable
	UserPartnershipContactsTable.ForeignKeys[0].RefTable = UsersTable
	UserPartnershipContactsTable.ForeignKeys[1].RefTable = PartnershipsTable
	VolunteerOpportunityInterestedVolunteersTable.ForeignKeys[0].RefTable = VolunteerOpportunitiesTable
	VolunteerOpportunityInterestedVolunteersTable.ForeignKeys[1].RefTable = VolunteerApplicationsTable
}
