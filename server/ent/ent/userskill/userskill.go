// Code generated by ent, DO NOT EDIT.

package userskill

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userskill type in the database.
	Label = "user_skill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeSkill holds the string denoting the skill edge name in mutations.
	EdgeSkill = "skill"
	// Table holds the table name of the userskill in the database.
	Table = "user_skills"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "user_skills"
	// ProfileInverseTable is the table name for the UserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userprofile" package.
	ProfileInverseTable = "user_profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "user_profile_skills"
	// SkillTable is the table that holds the skill relation/edge.
	SkillTable = "user_skills"
	// SkillInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillInverseTable = "skills"
	// SkillColumn is the table column denoting the skill relation/edge.
	SkillColumn = "skill_users"
)

// Columns holds all SQL columns for userskill fields.
var Columns = []string{
	FieldID,
	FieldLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_skills"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"skill_users",
	"user_profile_skills",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Level defines the type for the "level" enum field.
type Level string

// LevelINTERMEDIATE is the default value of the Level enum.
const DefaultLevel = LevelINTERMEDIATE

// Level values.
const (
	LevelBEGINNER     Level = "BEGINNER"
	LevelINTERMEDIATE Level = "INTERMEDIATE"
	LevelADVANCED     Level = "ADVANCED"
	LevelEXPERT       Level = "EXPERT"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelBEGINNER, LevelINTERMEDIATE, LevelADVANCED, LevelEXPERT:
		return nil
	default:
		return fmt.Errorf("userskill: invalid enum value for level field: %q", l)
	}
}

// OrderOption defines the ordering options for the UserSkill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// BySkillField orders the results by skill field.
func BySkillField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillStep(), sql.OrderByField(field, opts...))
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
func newSkillStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SkillTable, SkillColumn),
	)
}
