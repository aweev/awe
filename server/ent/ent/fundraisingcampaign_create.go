// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FundraisingCampaignCreate is the builder for creating a FundraisingCampaign entity.
type FundraisingCampaignCreate struct {
	config
	mutation *FundraisingCampaignMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *FundraisingCampaignCreate) SetSlug(v string) *FundraisingCampaignCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *FundraisingCampaignCreate) SetTitle(v map[string]string) *FundraisingCampaignCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *FundraisingCampaignCreate) SetDescription(v map[string]interface{}) *FundraisingCampaignCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetStory sets the "story" field.
func (_c *FundraisingCampaignCreate) SetStory(v map[string]interface{}) *FundraisingCampaignCreate {
	_c.mutation.SetStory(v)
	return _c
}

// SetType sets the "type" field.
func (_c *FundraisingCampaignCreate) SetType(v string) *FundraisingCampaignCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableType(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *FundraisingCampaignCreate) SetCategory(v string) *FundraisingCampaignCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableCategory(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetTargetAmount sets the "target_amount" field.
func (_c *FundraisingCampaignCreate) SetTargetAmount(v float64) *FundraisingCampaignCreate {
	_c.mutation.SetTargetAmount(v)
	return _c
}

// SetCurrentAmount sets the "current_amount" field.
func (_c *FundraisingCampaignCreate) SetCurrentAmount(v float64) *FundraisingCampaignCreate {
	_c.mutation.SetCurrentAmount(v)
	return _c
}

// SetNillableCurrentAmount sets the "current_amount" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableCurrentAmount(v *float64) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetCurrentAmount(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *FundraisingCampaignCreate) SetCurrency(v string) *FundraisingCampaignCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableCurrency(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetMinimumDonation sets the "minimum_donation" field.
func (_c *FundraisingCampaignCreate) SetMinimumDonation(v float64) *FundraisingCampaignCreate {
	_c.mutation.SetMinimumDonation(v)
	return _c
}

// SetNillableMinimumDonation sets the "minimum_donation" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableMinimumDonation(v *float64) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetMinimumDonation(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *FundraisingCampaignCreate) SetStartDate(v time.Time) *FundraisingCampaignCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *FundraisingCampaignCreate) SetEndDate(v time.Time) *FundraisingCampaignCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableEndDate(v *time.Time) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *FundraisingCampaignCreate) SetIsActive(v bool) *FundraisingCampaignCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableIsActive(v *bool) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_c *FundraisingCampaignCreate) SetHeroImageURL(v string) *FundraisingCampaignCreate {
	_c.mutation.SetHeroImageURL(v)
	return _c
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableHeroImageURL(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetHeroImageURL(*v)
	}
	return _c
}

// SetVideoURL sets the "video_url" field.
func (_c *FundraisingCampaignCreate) SetVideoURL(v string) *FundraisingCampaignCreate {
	_c.mutation.SetVideoURL(v)
	return _c
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableVideoURL(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetVideoURL(*v)
	}
	return _c
}

// SetGalleryImages sets the "gallery_images" field.
func (_c *FundraisingCampaignCreate) SetGalleryImages(v []string) *FundraisingCampaignCreate {
	_c.mutation.SetGalleryImages(v)
	return _c
}

// SetManagerID sets the "manager_id" field.
func (_c *FundraisingCampaignCreate) SetManagerID(v string) *FundraisingCampaignCreate {
	_c.mutation.SetManagerID(v)
	return _c
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableManagerID(v *string) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetManagerID(*v)
	}
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *FundraisingCampaignCreate) SetIsPublic(v bool) *FundraisingCampaignCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableIsPublic(v *bool) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetAllowRecurring sets the "allow_recurring" field.
func (_c *FundraisingCampaignCreate) SetAllowRecurring(v bool) *FundraisingCampaignCreate {
	_c.mutation.SetAllowRecurring(v)
	return _c
}

// SetNillableAllowRecurring sets the "allow_recurring" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableAllowRecurring(v *bool) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetAllowRecurring(*v)
	}
	return _c
}

// SetDonorCount sets the "donor_count" field.
func (_c *FundraisingCampaignCreate) SetDonorCount(v int) *FundraisingCampaignCreate {
	_c.mutation.SetDonorCount(v)
	return _c
}

// SetNillableDonorCount sets the "donor_count" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableDonorCount(v *int) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetDonorCount(*v)
	}
	return _c
}

// SetShareCount sets the "share_count" field.
func (_c *FundraisingCampaignCreate) SetShareCount(v int) *FundraisingCampaignCreate {
	_c.mutation.SetShareCount(v)
	return _c
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableShareCount(v *int) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetShareCount(*v)
	}
	return _c
}

// SetViewCount sets the "view_count" field.
func (_c *FundraisingCampaignCreate) SetViewCount(v int) *FundraisingCampaignCreate {
	_c.mutation.SetViewCount(v)
	return _c
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableViewCount(v *int) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetViewCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *FundraisingCampaignCreate) SetCreatedAt(v time.Time) *FundraisingCampaignCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableCreatedAt(v *time.Time) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FundraisingCampaignCreate) SetUpdatedAt(v time.Time) *FundraisingCampaignCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableUpdatedAt(v *time.Time) *FundraisingCampaignCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *FundraisingCampaignCreate) SetProgramID(id int) *FundraisingCampaignCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableProgramID(id *int) *FundraisingCampaignCreate {
	if id != nil {
		_c = _c.SetProgramID(*id)
	}
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *FundraisingCampaignCreate) SetProgram(v *Program) *FundraisingCampaignCreate {
	return _c.SetProgramID(v.ID)
}

// AddChildCampaignIDs adds the "child_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_c *FundraisingCampaignCreate) AddChildCampaignIDs(ids ...int) *FundraisingCampaignCreate {
	_c.mutation.AddChildCampaignIDs(ids...)
	return _c
}

// AddChildCampaigns adds the "child_campaigns" edges to the FundraisingCampaign entity.
func (_c *FundraisingCampaignCreate) AddChildCampaigns(v ...*FundraisingCampaign) *FundraisingCampaignCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildCampaignIDs(ids...)
}

// SetParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID.
func (_c *FundraisingCampaignCreate) SetParentCampaignID(id int) *FundraisingCampaignCreate {
	_c.mutation.SetParentCampaignID(id)
	return _c
}

// SetNillableParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_c *FundraisingCampaignCreate) SetNillableParentCampaignID(id *int) *FundraisingCampaignCreate {
	if id != nil {
		_c = _c.SetParentCampaignID(*id)
	}
	return _c
}

// SetParentCampaign sets the "parent_campaign" edge to the FundraisingCampaign entity.
func (_c *FundraisingCampaignCreate) SetParentCampaign(v *FundraisingCampaign) *FundraisingCampaignCreate {
	return _c.SetParentCampaignID(v.ID)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_c *FundraisingCampaignCreate) AddDonationIDs(ids ...int) *FundraisingCampaignCreate {
	_c.mutation.AddDonationIDs(ids...)
	return _c
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_c *FundraisingCampaignCreate) AddDonations(v ...*Donation) *FundraisingCampaignCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDonationIDs(ids...)
}

// Mutation returns the FundraisingCampaignMutation object of the builder.
func (_c *FundraisingCampaignCreate) Mutation() *FundraisingCampaignMutation {
	return _c.mutation
}

// Save creates the FundraisingCampaign in the database.
func (_c *FundraisingCampaignCreate) Save(ctx context.Context) (*FundraisingCampaign, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FundraisingCampaignCreate) SaveX(ctx context.Context) *FundraisingCampaign {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FundraisingCampaignCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FundraisingCampaignCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FundraisingCampaignCreate) defaults() {
	if _, ok := _c.mutation.GetType(); !ok {
		v := fundraisingcampaign.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.CurrentAmount(); !ok {
		v := fundraisingcampaign.DefaultCurrentAmount
		_c.mutation.SetCurrentAmount(v)
	}
	if _, ok := _c.mutation.Currency(); !ok {
		v := fundraisingcampaign.DefaultCurrency
		_c.mutation.SetCurrency(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := fundraisingcampaign.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := fundraisingcampaign.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.AllowRecurring(); !ok {
		v := fundraisingcampaign.DefaultAllowRecurring
		_c.mutation.SetAllowRecurring(v)
	}
	if _, ok := _c.mutation.DonorCount(); !ok {
		v := fundraisingcampaign.DefaultDonorCount
		_c.mutation.SetDonorCount(v)
	}
	if _, ok := _c.mutation.ShareCount(); !ok {
		v := fundraisingcampaign.DefaultShareCount
		_c.mutation.SetShareCount(v)
	}
	if _, ok := _c.mutation.ViewCount(); !ok {
		v := fundraisingcampaign.DefaultViewCount
		_c.mutation.SetViewCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := fundraisingcampaign.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := fundraisingcampaign.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FundraisingCampaignCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "FundraisingCampaign.slug"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "FundraisingCampaign.title"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "FundraisingCampaign.description"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FundraisingCampaign.type"`)}
	}
	if _, ok := _c.mutation.TargetAmount(); !ok {
		return &ValidationError{Name: "target_amount", err: errors.New(`ent: missing required field "FundraisingCampaign.target_amount"`)}
	}
	if _, ok := _c.mutation.CurrentAmount(); !ok {
		return &ValidationError{Name: "current_amount", err: errors.New(`ent: missing required field "FundraisingCampaign.current_amount"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "FundraisingCampaign.currency"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "FundraisingCampaign.start_date"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "FundraisingCampaign.is_active"`)}
	}
	if _, ok := _c.mutation.GalleryImages(); !ok {
		return &ValidationError{Name: "gallery_images", err: errors.New(`ent: missing required field "FundraisingCampaign.gallery_images"`)}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "FundraisingCampaign.is_public"`)}
	}
	if _, ok := _c.mutation.AllowRecurring(); !ok {
		return &ValidationError{Name: "allow_recurring", err: errors.New(`ent: missing required field "FundraisingCampaign.allow_recurring"`)}
	}
	if _, ok := _c.mutation.DonorCount(); !ok {
		return &ValidationError{Name: "donor_count", err: errors.New(`ent: missing required field "FundraisingCampaign.donor_count"`)}
	}
	if _, ok := _c.mutation.ShareCount(); !ok {
		return &ValidationError{Name: "share_count", err: errors.New(`ent: missing required field "FundraisingCampaign.share_count"`)}
	}
	if _, ok := _c.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "FundraisingCampaign.view_count"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FundraisingCampaign.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FundraisingCampaign.updated_at"`)}
	}
	return nil
}

func (_c *FundraisingCampaignCreate) sqlSave(ctx context.Context) (*FundraisingCampaign, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FundraisingCampaignCreate) createSpec() (*FundraisingCampaign, *sqlgraph.CreateSpec) {
	var (
		_node = &FundraisingCampaign{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(fundraisingcampaign.Table, sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(fundraisingcampaign.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(fundraisingcampaign.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(fundraisingcampaign.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Story(); ok {
		_spec.SetField(fundraisingcampaign.FieldStory, field.TypeJSON, value)
		_node.Story = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(fundraisingcampaign.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(fundraisingcampaign.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.TargetAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldTargetAmount, field.TypeFloat64, value)
		_node.TargetAmount = value
	}
	if value, ok := _c.mutation.CurrentAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrentAmount, field.TypeFloat64, value)
		_node.CurrentAmount = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.MinimumDonation(); ok {
		_spec.SetField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64, value)
		_node.MinimumDonation = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.HeroImageURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldHeroImageURL, field.TypeString, value)
		_node.HeroImageURL = value
	}
	if value, ok := _c.mutation.VideoURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := _c.mutation.GalleryImages(); ok {
		_spec.SetField(fundraisingcampaign.FieldGalleryImages, field.TypeJSON, value)
		_node.GalleryImages = value
	}
	if value, ok := _c.mutation.ManagerID(); ok {
		_spec.SetField(fundraisingcampaign.FieldManagerID, field.TypeString, value)
		_node.ManagerID = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.AllowRecurring(); ok {
		_spec.SetField(fundraisingcampaign.FieldAllowRecurring, field.TypeBool, value)
		_node.AllowRecurring = value
	}
	if value, ok := _c.mutation.DonorCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldDonorCount, field.TypeInt, value)
		_node.DonorCount = value
	}
	if value, ok := _c.mutation.ShareCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldShareCount, field.TypeInt, value)
		_node.ShareCount = value
	}
	if value, ok := _c.mutation.ViewCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(fundraisingcampaign.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(fundraisingcampaign.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_fundraising_campaigns = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fundraising_campaign_parent_campaign = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FundraisingCampaign.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FundraisingCampaignUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *FundraisingCampaignCreate) OnConflict(opts ...sql.ConflictOption) *FundraisingCampaignUpsertOne {
	_c.conflict = opts
	return &FundraisingCampaignUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FundraisingCampaignCreate) OnConflictColumns(columns ...string) *FundraisingCampaignUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FundraisingCampaignUpsertOne{
		create: _c,
	}
}

type (
	// FundraisingCampaignUpsertOne is the builder for "upsert"-ing
	//  one FundraisingCampaign node.
	FundraisingCampaignUpsertOne struct {
		create *FundraisingCampaignCreate
	}

	// FundraisingCampaignUpsert is the "OnConflict" setter.
	FundraisingCampaignUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *FundraisingCampaignUpsert) SetSlug(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateSlug() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *FundraisingCampaignUpsert) SetTitle(v map[string]string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateTitle() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *FundraisingCampaignUpsert) SetDescription(v map[string]interface{}) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateDescription() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldDescription)
	return u
}

// SetStory sets the "story" field.
func (u *FundraisingCampaignUpsert) SetStory(v map[string]interface{}) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldStory, v)
	return u
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateStory() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldStory)
	return u
}

// ClearStory clears the value of the "story" field.
func (u *FundraisingCampaignUpsert) ClearStory() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldStory)
	return u
}

// SetType sets the "type" field.
func (u *FundraisingCampaignUpsert) SetType(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateType() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldType)
	return u
}

// SetCategory sets the "category" field.
func (u *FundraisingCampaignUpsert) SetCategory(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateCategory() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *FundraisingCampaignUpsert) ClearCategory() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldCategory)
	return u
}

// SetTargetAmount sets the "target_amount" field.
func (u *FundraisingCampaignUpsert) SetTargetAmount(v float64) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldTargetAmount, v)
	return u
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateTargetAmount() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldTargetAmount)
	return u
}

// AddTargetAmount adds v to the "target_amount" field.
func (u *FundraisingCampaignUpsert) AddTargetAmount(v float64) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldTargetAmount, v)
	return u
}

// SetCurrentAmount sets the "current_amount" field.
func (u *FundraisingCampaignUpsert) SetCurrentAmount(v float64) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldCurrentAmount, v)
	return u
}

// UpdateCurrentAmount sets the "current_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateCurrentAmount() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldCurrentAmount)
	return u
}

// AddCurrentAmount adds v to the "current_amount" field.
func (u *FundraisingCampaignUpsert) AddCurrentAmount(v float64) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldCurrentAmount, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *FundraisingCampaignUpsert) SetCurrency(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateCurrency() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldCurrency)
	return u
}

// SetMinimumDonation sets the "minimum_donation" field.
func (u *FundraisingCampaignUpsert) SetMinimumDonation(v float64) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldMinimumDonation, v)
	return u
}

// UpdateMinimumDonation sets the "minimum_donation" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateMinimumDonation() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldMinimumDonation)
	return u
}

// AddMinimumDonation adds v to the "minimum_donation" field.
func (u *FundraisingCampaignUpsert) AddMinimumDonation(v float64) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldMinimumDonation, v)
	return u
}

// ClearMinimumDonation clears the value of the "minimum_donation" field.
func (u *FundraisingCampaignUpsert) ClearMinimumDonation() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldMinimumDonation)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *FundraisingCampaignUpsert) SetStartDate(v time.Time) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateStartDate() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *FundraisingCampaignUpsert) SetEndDate(v time.Time) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateEndDate() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *FundraisingCampaignUpsert) ClearEndDate() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldEndDate)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *FundraisingCampaignUpsert) SetIsActive(v bool) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateIsActive() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldIsActive)
	return u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *FundraisingCampaignUpsert) SetHeroImageURL(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldHeroImageURL, v)
	return u
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateHeroImageURL() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldHeroImageURL)
	return u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *FundraisingCampaignUpsert) ClearHeroImageURL() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldHeroImageURL)
	return u
}

// SetVideoURL sets the "video_url" field.
func (u *FundraisingCampaignUpsert) SetVideoURL(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldVideoURL, v)
	return u
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateVideoURL() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldVideoURL)
	return u
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *FundraisingCampaignUpsert) ClearVideoURL() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldVideoURL)
	return u
}

// SetGalleryImages sets the "gallery_images" field.
func (u *FundraisingCampaignUpsert) SetGalleryImages(v []string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldGalleryImages, v)
	return u
}

// UpdateGalleryImages sets the "gallery_images" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateGalleryImages() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldGalleryImages)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *FundraisingCampaignUpsert) SetManagerID(v string) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateManagerID() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldManagerID)
	return u
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FundraisingCampaignUpsert) ClearManagerID() *FundraisingCampaignUpsert {
	u.SetNull(fundraisingcampaign.FieldManagerID)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *FundraisingCampaignUpsert) SetIsPublic(v bool) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateIsPublic() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldIsPublic)
	return u
}

// SetAllowRecurring sets the "allow_recurring" field.
func (u *FundraisingCampaignUpsert) SetAllowRecurring(v bool) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldAllowRecurring, v)
	return u
}

// UpdateAllowRecurring sets the "allow_recurring" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateAllowRecurring() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldAllowRecurring)
	return u
}

// SetDonorCount sets the "donor_count" field.
func (u *FundraisingCampaignUpsert) SetDonorCount(v int) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldDonorCount, v)
	return u
}

// UpdateDonorCount sets the "donor_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateDonorCount() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldDonorCount)
	return u
}

// AddDonorCount adds v to the "donor_count" field.
func (u *FundraisingCampaignUpsert) AddDonorCount(v int) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldDonorCount, v)
	return u
}

// SetShareCount sets the "share_count" field.
func (u *FundraisingCampaignUpsert) SetShareCount(v int) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldShareCount, v)
	return u
}

// UpdateShareCount sets the "share_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateShareCount() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldShareCount)
	return u
}

// AddShareCount adds v to the "share_count" field.
func (u *FundraisingCampaignUpsert) AddShareCount(v int) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldShareCount, v)
	return u
}

// SetViewCount sets the "view_count" field.
func (u *FundraisingCampaignUpsert) SetViewCount(v int) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldViewCount, v)
	return u
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateViewCount() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldViewCount)
	return u
}

// AddViewCount adds v to the "view_count" field.
func (u *FundraisingCampaignUpsert) AddViewCount(v int) *FundraisingCampaignUpsert {
	u.Add(fundraisingcampaign.FieldViewCount, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FundraisingCampaignUpsert) SetUpdatedAt(v time.Time) *FundraisingCampaignUpsert {
	u.Set(fundraisingcampaign.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FundraisingCampaignUpsert) UpdateUpdatedAt() *FundraisingCampaignUpsert {
	u.SetExcluded(fundraisingcampaign.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FundraisingCampaignUpsertOne) UpdateNewValues() *FundraisingCampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(fundraisingcampaign.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FundraisingCampaignUpsertOne) Ignore() *FundraisingCampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FundraisingCampaignUpsertOne) DoNothing() *FundraisingCampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FundraisingCampaignCreate.OnConflict
// documentation for more info.
func (u *FundraisingCampaignUpsertOne) Update(set func(*FundraisingCampaignUpsert)) *FundraisingCampaignUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FundraisingCampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *FundraisingCampaignUpsertOne) SetSlug(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateSlug() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *FundraisingCampaignUpsertOne) SetTitle(v map[string]string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateTitle() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FundraisingCampaignUpsertOne) SetDescription(v map[string]interface{}) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateDescription() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateDescription()
	})
}

// SetStory sets the "story" field.
func (u *FundraisingCampaignUpsertOne) SetStory(v map[string]interface{}) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetStory(v)
	})
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateStory() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateStory()
	})
}

// ClearStory clears the value of the "story" field.
func (u *FundraisingCampaignUpsertOne) ClearStory() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearStory()
	})
}

// SetType sets the "type" field.
func (u *FundraisingCampaignUpsertOne) SetType(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateType() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateType()
	})
}

// SetCategory sets the "category" field.
func (u *FundraisingCampaignUpsertOne) SetCategory(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateCategory() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *FundraisingCampaignUpsertOne) ClearCategory() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearCategory()
	})
}

// SetTargetAmount sets the "target_amount" field.
func (u *FundraisingCampaignUpsertOne) SetTargetAmount(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetTargetAmount(v)
	})
}

// AddTargetAmount adds v to the "target_amount" field.
func (u *FundraisingCampaignUpsertOne) AddTargetAmount(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddTargetAmount(v)
	})
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateTargetAmount() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateTargetAmount()
	})
}

// SetCurrentAmount sets the "current_amount" field.
func (u *FundraisingCampaignUpsertOne) SetCurrentAmount(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCurrentAmount(v)
	})
}

// AddCurrentAmount adds v to the "current_amount" field.
func (u *FundraisingCampaignUpsertOne) AddCurrentAmount(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddCurrentAmount(v)
	})
}

// UpdateCurrentAmount sets the "current_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateCurrentAmount() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCurrentAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *FundraisingCampaignUpsertOne) SetCurrency(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateCurrency() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCurrency()
	})
}

// SetMinimumDonation sets the "minimum_donation" field.
func (u *FundraisingCampaignUpsertOne) SetMinimumDonation(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetMinimumDonation(v)
	})
}

// AddMinimumDonation adds v to the "minimum_donation" field.
func (u *FundraisingCampaignUpsertOne) AddMinimumDonation(v float64) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddMinimumDonation(v)
	})
}

// UpdateMinimumDonation sets the "minimum_donation" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateMinimumDonation() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateMinimumDonation()
	})
}

// ClearMinimumDonation clears the value of the "minimum_donation" field.
func (u *FundraisingCampaignUpsertOne) ClearMinimumDonation() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearMinimumDonation()
	})
}

// SetStartDate sets the "start_date" field.
func (u *FundraisingCampaignUpsertOne) SetStartDate(v time.Time) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateStartDate() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *FundraisingCampaignUpsertOne) SetEndDate(v time.Time) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateEndDate() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *FundraisingCampaignUpsertOne) ClearEndDate() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearEndDate()
	})
}

// SetIsActive sets the "is_active" field.
func (u *FundraisingCampaignUpsertOne) SetIsActive(v bool) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateIsActive() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateIsActive()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *FundraisingCampaignUpsertOne) SetHeroImageURL(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateHeroImageURL() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *FundraisingCampaignUpsertOne) ClearHeroImageURL() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *FundraisingCampaignUpsertOne) SetVideoURL(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateVideoURL() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateVideoURL()
	})
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *FundraisingCampaignUpsertOne) ClearVideoURL() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearVideoURL()
	})
}

// SetGalleryImages sets the "gallery_images" field.
func (u *FundraisingCampaignUpsertOne) SetGalleryImages(v []string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetGalleryImages(v)
	})
}

// UpdateGalleryImages sets the "gallery_images" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateGalleryImages() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateGalleryImages()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *FundraisingCampaignUpsertOne) SetManagerID(v string) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateManagerID() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FundraisingCampaignUpsertOne) ClearManagerID() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearManagerID()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *FundraisingCampaignUpsertOne) SetIsPublic(v bool) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateIsPublic() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAllowRecurring sets the "allow_recurring" field.
func (u *FundraisingCampaignUpsertOne) SetAllowRecurring(v bool) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetAllowRecurring(v)
	})
}

// UpdateAllowRecurring sets the "allow_recurring" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateAllowRecurring() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateAllowRecurring()
	})
}

// SetDonorCount sets the "donor_count" field.
func (u *FundraisingCampaignUpsertOne) SetDonorCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetDonorCount(v)
	})
}

// AddDonorCount adds v to the "donor_count" field.
func (u *FundraisingCampaignUpsertOne) AddDonorCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddDonorCount(v)
	})
}

// UpdateDonorCount sets the "donor_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateDonorCount() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateDonorCount()
	})
}

// SetShareCount sets the "share_count" field.
func (u *FundraisingCampaignUpsertOne) SetShareCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetShareCount(v)
	})
}

// AddShareCount adds v to the "share_count" field.
func (u *FundraisingCampaignUpsertOne) AddShareCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddShareCount(v)
	})
}

// UpdateShareCount sets the "share_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateShareCount() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateShareCount()
	})
}

// SetViewCount sets the "view_count" field.
func (u *FundraisingCampaignUpsertOne) SetViewCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetViewCount(v)
	})
}

// AddViewCount adds v to the "view_count" field.
func (u *FundraisingCampaignUpsertOne) AddViewCount(v int) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddViewCount(v)
	})
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateViewCount() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateViewCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FundraisingCampaignUpsertOne) SetUpdatedAt(v time.Time) *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertOne) UpdateUpdatedAt() *FundraisingCampaignUpsertOne {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FundraisingCampaignUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FundraisingCampaignCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FundraisingCampaignUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FundraisingCampaignUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FundraisingCampaignUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FundraisingCampaignCreateBulk is the builder for creating many FundraisingCampaign entities in bulk.
type FundraisingCampaignCreateBulk struct {
	config
	err      error
	builders []*FundraisingCampaignCreate
	conflict []sql.ConflictOption
}

// Save creates the FundraisingCampaign entities in the database.
func (_c *FundraisingCampaignCreateBulk) Save(ctx context.Context) ([]*FundraisingCampaign, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*FundraisingCampaign, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FundraisingCampaignMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FundraisingCampaignCreateBulk) SaveX(ctx context.Context) []*FundraisingCampaign {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FundraisingCampaignCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FundraisingCampaignCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FundraisingCampaign.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FundraisingCampaignUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *FundraisingCampaignCreateBulk) OnConflict(opts ...sql.ConflictOption) *FundraisingCampaignUpsertBulk {
	_c.conflict = opts
	return &FundraisingCampaignUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FundraisingCampaignCreateBulk) OnConflictColumns(columns ...string) *FundraisingCampaignUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FundraisingCampaignUpsertBulk{
		create: _c,
	}
}

// FundraisingCampaignUpsertBulk is the builder for "upsert"-ing
// a bulk of FundraisingCampaign nodes.
type FundraisingCampaignUpsertBulk struct {
	create *FundraisingCampaignCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FundraisingCampaignUpsertBulk) UpdateNewValues() *FundraisingCampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(fundraisingcampaign.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FundraisingCampaign.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FundraisingCampaignUpsertBulk) Ignore() *FundraisingCampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FundraisingCampaignUpsertBulk) DoNothing() *FundraisingCampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FundraisingCampaignCreateBulk.OnConflict
// documentation for more info.
func (u *FundraisingCampaignUpsertBulk) Update(set func(*FundraisingCampaignUpsert)) *FundraisingCampaignUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FundraisingCampaignUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *FundraisingCampaignUpsertBulk) SetSlug(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateSlug() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *FundraisingCampaignUpsertBulk) SetTitle(v map[string]string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateTitle() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FundraisingCampaignUpsertBulk) SetDescription(v map[string]interface{}) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateDescription() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateDescription()
	})
}

// SetStory sets the "story" field.
func (u *FundraisingCampaignUpsertBulk) SetStory(v map[string]interface{}) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetStory(v)
	})
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateStory() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateStory()
	})
}

// ClearStory clears the value of the "story" field.
func (u *FundraisingCampaignUpsertBulk) ClearStory() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearStory()
	})
}

// SetType sets the "type" field.
func (u *FundraisingCampaignUpsertBulk) SetType(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateType() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateType()
	})
}

// SetCategory sets the "category" field.
func (u *FundraisingCampaignUpsertBulk) SetCategory(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateCategory() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *FundraisingCampaignUpsertBulk) ClearCategory() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearCategory()
	})
}

// SetTargetAmount sets the "target_amount" field.
func (u *FundraisingCampaignUpsertBulk) SetTargetAmount(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetTargetAmount(v)
	})
}

// AddTargetAmount adds v to the "target_amount" field.
func (u *FundraisingCampaignUpsertBulk) AddTargetAmount(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddTargetAmount(v)
	})
}

// UpdateTargetAmount sets the "target_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateTargetAmount() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateTargetAmount()
	})
}

// SetCurrentAmount sets the "current_amount" field.
func (u *FundraisingCampaignUpsertBulk) SetCurrentAmount(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCurrentAmount(v)
	})
}

// AddCurrentAmount adds v to the "current_amount" field.
func (u *FundraisingCampaignUpsertBulk) AddCurrentAmount(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddCurrentAmount(v)
	})
}

// UpdateCurrentAmount sets the "current_amount" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateCurrentAmount() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCurrentAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *FundraisingCampaignUpsertBulk) SetCurrency(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateCurrency() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateCurrency()
	})
}

// SetMinimumDonation sets the "minimum_donation" field.
func (u *FundraisingCampaignUpsertBulk) SetMinimumDonation(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetMinimumDonation(v)
	})
}

// AddMinimumDonation adds v to the "minimum_donation" field.
func (u *FundraisingCampaignUpsertBulk) AddMinimumDonation(v float64) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddMinimumDonation(v)
	})
}

// UpdateMinimumDonation sets the "minimum_donation" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateMinimumDonation() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateMinimumDonation()
	})
}

// ClearMinimumDonation clears the value of the "minimum_donation" field.
func (u *FundraisingCampaignUpsertBulk) ClearMinimumDonation() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearMinimumDonation()
	})
}

// SetStartDate sets the "start_date" field.
func (u *FundraisingCampaignUpsertBulk) SetStartDate(v time.Time) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateStartDate() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *FundraisingCampaignUpsertBulk) SetEndDate(v time.Time) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateEndDate() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *FundraisingCampaignUpsertBulk) ClearEndDate() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearEndDate()
	})
}

// SetIsActive sets the "is_active" field.
func (u *FundraisingCampaignUpsertBulk) SetIsActive(v bool) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateIsActive() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateIsActive()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *FundraisingCampaignUpsertBulk) SetHeroImageURL(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateHeroImageURL() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *FundraisingCampaignUpsertBulk) ClearHeroImageURL() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *FundraisingCampaignUpsertBulk) SetVideoURL(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateVideoURL() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateVideoURL()
	})
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *FundraisingCampaignUpsertBulk) ClearVideoURL() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearVideoURL()
	})
}

// SetGalleryImages sets the "gallery_images" field.
func (u *FundraisingCampaignUpsertBulk) SetGalleryImages(v []string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetGalleryImages(v)
	})
}

// UpdateGalleryImages sets the "gallery_images" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateGalleryImages() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateGalleryImages()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *FundraisingCampaignUpsertBulk) SetManagerID(v string) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateManagerID() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FundraisingCampaignUpsertBulk) ClearManagerID() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.ClearManagerID()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *FundraisingCampaignUpsertBulk) SetIsPublic(v bool) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateIsPublic() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAllowRecurring sets the "allow_recurring" field.
func (u *FundraisingCampaignUpsertBulk) SetAllowRecurring(v bool) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetAllowRecurring(v)
	})
}

// UpdateAllowRecurring sets the "allow_recurring" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateAllowRecurring() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateAllowRecurring()
	})
}

// SetDonorCount sets the "donor_count" field.
func (u *FundraisingCampaignUpsertBulk) SetDonorCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetDonorCount(v)
	})
}

// AddDonorCount adds v to the "donor_count" field.
func (u *FundraisingCampaignUpsertBulk) AddDonorCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddDonorCount(v)
	})
}

// UpdateDonorCount sets the "donor_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateDonorCount() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateDonorCount()
	})
}

// SetShareCount sets the "share_count" field.
func (u *FundraisingCampaignUpsertBulk) SetShareCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetShareCount(v)
	})
}

// AddShareCount adds v to the "share_count" field.
func (u *FundraisingCampaignUpsertBulk) AddShareCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddShareCount(v)
	})
}

// UpdateShareCount sets the "share_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateShareCount() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateShareCount()
	})
}

// SetViewCount sets the "view_count" field.
func (u *FundraisingCampaignUpsertBulk) SetViewCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetViewCount(v)
	})
}

// AddViewCount adds v to the "view_count" field.
func (u *FundraisingCampaignUpsertBulk) AddViewCount(v int) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.AddViewCount(v)
	})
}

// UpdateViewCount sets the "view_count" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateViewCount() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateViewCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FundraisingCampaignUpsertBulk) SetUpdatedAt(v time.Time) *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FundraisingCampaignUpsertBulk) UpdateUpdatedAt() *FundraisingCampaignUpsertBulk {
	return u.Update(func(s *FundraisingCampaignUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FundraisingCampaignUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FundraisingCampaignCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FundraisingCampaignCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FundraisingCampaignUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
