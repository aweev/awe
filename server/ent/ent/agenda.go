// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/event"
	"awe/ent/ent/mentorshipsession"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Agenda is the model entity for the Agenda schema.
type Agenda struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgendaQuery when eager-loading is set.
	Edges                     AgendaEdges `json:"edges"`
	event_agenda              *int
	mentorship_session_agenda *int
	selectValues              sql.SelectValues
}

// AgendaEdges holds the relations/edges for other nodes in the graph.
type AgendaEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Items holds the value of the items edge.
	Items []*AgendaItem `json:"items,omitempty"`
	// MentorshipSession holds the value of the mentorship_session edge.
	MentorshipSession *MentorshipSession `json:"mentorship_session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgendaEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e AgendaEdges) ItemsOrErr() ([]*AgendaItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// MentorshipSessionOrErr returns the MentorshipSession value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgendaEdges) MentorshipSessionOrErr() (*MentorshipSession, error) {
	if e.MentorshipSession != nil {
		return e.MentorshipSession, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: mentorshipsession.Label}
	}
	return nil, &NotLoadedError{edge: "mentorship_session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agenda) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agenda.FieldID:
			values[i] = new(sql.NullInt64)
		case agenda.FieldStatus:
			values[i] = new(sql.NullString)
		case agenda.ForeignKeys[0]: // event_agenda
			values[i] = new(sql.NullInt64)
		case agenda.ForeignKeys[1]: // mentorship_session_agenda
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agenda fields.
func (_m *Agenda) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agenda.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case agenda.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case agenda.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_agenda", value)
			} else if value.Valid {
				_m.event_agenda = new(int)
				*_m.event_agenda = int(value.Int64)
			}
		case agenda.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mentorship_session_agenda", value)
			} else if value.Valid {
				_m.mentorship_session_agenda = new(int)
				*_m.mentorship_session_agenda = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Agenda.
// This includes values selected through modifiers, order, etc.
func (_m *Agenda) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Agenda entity.
func (_m *Agenda) QueryEvent() *EventQuery {
	return NewAgendaClient(_m.config).QueryEvent(_m)
}

// QueryItems queries the "items" edge of the Agenda entity.
func (_m *Agenda) QueryItems() *AgendaItemQuery {
	return NewAgendaClient(_m.config).QueryItems(_m)
}

// QueryMentorshipSession queries the "mentorship_session" edge of the Agenda entity.
func (_m *Agenda) QueryMentorshipSession() *MentorshipSessionQuery {
	return NewAgendaClient(_m.config).QueryMentorshipSession(_m)
}

// Update returns a builder for updating this Agenda.
// Note that you need to call Agenda.Unwrap() before calling this method if this Agenda
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Agenda) Update() *AgendaUpdateOne {
	return NewAgendaClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Agenda entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Agenda) Unwrap() *Agenda {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agenda is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Agenda) String() string {
	var builder strings.Builder
	builder.WriteString("Agenda(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Agendas is a parsable slice of Agenda.
type Agendas []*Agenda
