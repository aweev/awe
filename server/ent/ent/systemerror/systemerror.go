// Code generated by ent, DO NOT EDIT.

package systemerror

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the systemerror type in the database.
	Label = "system_error"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStack holds the string denoting the stack field in the database.
	FieldStack = "stack"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldIsResolved holds the string denoting the is_resolved field in the database.
	FieldIsResolved = "is_resolved"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// FieldResolvedBy holds the string denoting the resolved_by field in the database.
	FieldResolvedBy = "resolved_by"
	// Table holds the table name of the systemerror in the database.
	Table = "system_errors"
)

// Columns holds all SQL columns for systemerror fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldMessage,
	FieldName,
	FieldStack,
	FieldMetadata,
	FieldUserID,
	FieldContext,
	FieldIsResolved,
	FieldResolvedAt,
	FieldResolvedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// DefaultIsResolved holds the default value on creation for the "is_resolved" field.
	DefaultIsResolved bool
)

// OrderOption defines the ordering options for the SystemError queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStack orders the results by the stack field.
func ByStack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStack, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByIsResolved orders the results by the is_resolved field.
func ByIsResolved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsResolved, opts...).ToFunc()
}

// ByResolvedAt orders the results by the resolved_at field.
func ByResolvedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedAt, opts...).ToFunc()
}

// ByResolvedBy orders the results by the resolved_by field.
func ByResolvedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedBy, opts...).ToFunc()
}
