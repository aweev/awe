// Code generated by ent, DO NOT EDIT.

package systemerror

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldID, id))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldTimestamp, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldMessage, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldName, v))
}

// Stack applies equality check predicate on the "stack" field. It's identical to StackEQ.
func Stack(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldStack, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldUserID, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldContext, v))
}

// IsResolved applies equality check predicate on the "is_resolved" field. It's identical to IsResolvedEQ.
func IsResolved(v bool) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldIsResolved, v))
}

// ResolvedAt applies equality check predicate on the "resolved_at" field. It's identical to ResolvedAtEQ.
func ResolvedAt(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldResolvedAt, v))
}

// ResolvedBy applies equality check predicate on the "resolved_by" field. It's identical to ResolvedByEQ.
func ResolvedBy(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldResolvedBy, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldTimestamp, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldMessage, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldName, v))
}

// StackEQ applies the EQ predicate on the "stack" field.
func StackEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldStack, v))
}

// StackNEQ applies the NEQ predicate on the "stack" field.
func StackNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldStack, v))
}

// StackIn applies the In predicate on the "stack" field.
func StackIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldStack, vs...))
}

// StackNotIn applies the NotIn predicate on the "stack" field.
func StackNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldStack, vs...))
}

// StackGT applies the GT predicate on the "stack" field.
func StackGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldStack, v))
}

// StackGTE applies the GTE predicate on the "stack" field.
func StackGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldStack, v))
}

// StackLT applies the LT predicate on the "stack" field.
func StackLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldStack, v))
}

// StackLTE applies the LTE predicate on the "stack" field.
func StackLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldStack, v))
}

// StackContains applies the Contains predicate on the "stack" field.
func StackContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldStack, v))
}

// StackHasPrefix applies the HasPrefix predicate on the "stack" field.
func StackHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldStack, v))
}

// StackHasSuffix applies the HasSuffix predicate on the "stack" field.
func StackHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldStack, v))
}

// StackEqualFold applies the EqualFold predicate on the "stack" field.
func StackEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldStack, v))
}

// StackContainsFold applies the ContainsFold predicate on the "stack" field.
func StackContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldStack, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldNotNull(FieldMetadata))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldUserID, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldContext, v))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldNotNull(FieldContext))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldContext, v))
}

// IsResolvedEQ applies the EQ predicate on the "is_resolved" field.
func IsResolvedEQ(v bool) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldIsResolved, v))
}

// IsResolvedNEQ applies the NEQ predicate on the "is_resolved" field.
func IsResolvedNEQ(v bool) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldIsResolved, v))
}

// ResolvedAtEQ applies the EQ predicate on the "resolved_at" field.
func ResolvedAtEQ(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldResolvedAt, v))
}

// ResolvedAtNEQ applies the NEQ predicate on the "resolved_at" field.
func ResolvedAtNEQ(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldResolvedAt, v))
}

// ResolvedAtIn applies the In predicate on the "resolved_at" field.
func ResolvedAtIn(vs ...time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldResolvedAt, vs...))
}

// ResolvedAtNotIn applies the NotIn predicate on the "resolved_at" field.
func ResolvedAtNotIn(vs ...time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldResolvedAt, vs...))
}

// ResolvedAtGT applies the GT predicate on the "resolved_at" field.
func ResolvedAtGT(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldResolvedAt, v))
}

// ResolvedAtGTE applies the GTE predicate on the "resolved_at" field.
func ResolvedAtGTE(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldResolvedAt, v))
}

// ResolvedAtLT applies the LT predicate on the "resolved_at" field.
func ResolvedAtLT(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldResolvedAt, v))
}

// ResolvedAtLTE applies the LTE predicate on the "resolved_at" field.
func ResolvedAtLTE(v time.Time) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldResolvedAt, v))
}

// ResolvedAtIsNil applies the IsNil predicate on the "resolved_at" field.
func ResolvedAtIsNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldIsNull(FieldResolvedAt))
}

// ResolvedAtNotNil applies the NotNil predicate on the "resolved_at" field.
func ResolvedAtNotNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldNotNull(FieldResolvedAt))
}

// ResolvedByEQ applies the EQ predicate on the "resolved_by" field.
func ResolvedByEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEQ(FieldResolvedBy, v))
}

// ResolvedByNEQ applies the NEQ predicate on the "resolved_by" field.
func ResolvedByNEQ(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNEQ(FieldResolvedBy, v))
}

// ResolvedByIn applies the In predicate on the "resolved_by" field.
func ResolvedByIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldIn(FieldResolvedBy, vs...))
}

// ResolvedByNotIn applies the NotIn predicate on the "resolved_by" field.
func ResolvedByNotIn(vs ...string) predicate.SystemError {
	return predicate.SystemError(sql.FieldNotIn(FieldResolvedBy, vs...))
}

// ResolvedByGT applies the GT predicate on the "resolved_by" field.
func ResolvedByGT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGT(FieldResolvedBy, v))
}

// ResolvedByGTE applies the GTE predicate on the "resolved_by" field.
func ResolvedByGTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldGTE(FieldResolvedBy, v))
}

// ResolvedByLT applies the LT predicate on the "resolved_by" field.
func ResolvedByLT(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLT(FieldResolvedBy, v))
}

// ResolvedByLTE applies the LTE predicate on the "resolved_by" field.
func ResolvedByLTE(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldLTE(FieldResolvedBy, v))
}

// ResolvedByContains applies the Contains predicate on the "resolved_by" field.
func ResolvedByContains(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContains(FieldResolvedBy, v))
}

// ResolvedByHasPrefix applies the HasPrefix predicate on the "resolved_by" field.
func ResolvedByHasPrefix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasPrefix(FieldResolvedBy, v))
}

// ResolvedByHasSuffix applies the HasSuffix predicate on the "resolved_by" field.
func ResolvedByHasSuffix(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldHasSuffix(FieldResolvedBy, v))
}

// ResolvedByIsNil applies the IsNil predicate on the "resolved_by" field.
func ResolvedByIsNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldIsNull(FieldResolvedBy))
}

// ResolvedByNotNil applies the NotNil predicate on the "resolved_by" field.
func ResolvedByNotNil() predicate.SystemError {
	return predicate.SystemError(sql.FieldNotNull(FieldResolvedBy))
}

// ResolvedByEqualFold applies the EqualFold predicate on the "resolved_by" field.
func ResolvedByEqualFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldEqualFold(FieldResolvedBy, v))
}

// ResolvedByContainsFold applies the ContainsFold predicate on the "resolved_by" field.
func ResolvedByContainsFold(v string) predicate.SystemError {
	return predicate.SystemError(sql.FieldContainsFold(FieldResolvedBy, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SystemError) predicate.SystemError {
	return predicate.SystemError(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SystemError) predicate.SystemError {
	return predicate.SystemError(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemError) predicate.SystemError {
	return predicate.SystemError(sql.NotPredicates(p))
}
