// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/joblog"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (_c *JobCreate) SetType(v string) *JobCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *JobCreate) SetStatus(v job.Status) *JobCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *JobCreate) SetNillableStatus(v *job.Status) *JobCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPayload sets the "payload" field.
func (_c *JobCreate) SetPayload(v map[string]interface{}) *JobCreate {
	_c.mutation.SetPayload(v)
	return _c
}

// SetResult sets the "result" field.
func (_c *JobCreate) SetResult(v map[string]interface{}) *JobCreate {
	_c.mutation.SetResult(v)
	return _c
}

// SetError sets the "error" field.
func (_c *JobCreate) SetError(v string) *JobCreate {
	_c.mutation.SetError(v)
	return _c
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_c *JobCreate) SetNillableError(v *string) *JobCreate {
	if v != nil {
		_c.SetError(*v)
	}
	return _c
}

// SetInngestRunID sets the "inngest_run_id" field.
func (_c *JobCreate) SetInngestRunID(v string) *JobCreate {
	_c.mutation.SetInngestRunID(v)
	return _c
}

// SetNillableInngestRunID sets the "inngest_run_id" field if the given value is not nil.
func (_c *JobCreate) SetNillableInngestRunID(v *string) *JobCreate {
	if v != nil {
		_c.SetInngestRunID(*v)
	}
	return _c
}

// SetScheduledFor sets the "scheduled_for" field.
func (_c *JobCreate) SetScheduledFor(v time.Time) *JobCreate {
	_c.mutation.SetScheduledFor(v)
	return _c
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (_c *JobCreate) SetNillableScheduledFor(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetScheduledFor(*v)
	}
	return _c
}

// SetPriority sets the "priority" field.
func (_c *JobCreate) SetPriority(v int) *JobCreate {
	_c.mutation.SetPriority(v)
	return _c
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_c *JobCreate) SetNillablePriority(v *int) *JobCreate {
	if v != nil {
		_c.SetPriority(*v)
	}
	return _c
}

// SetMaxRetries sets the "max_retries" field.
func (_c *JobCreate) SetMaxRetries(v int) *JobCreate {
	_c.mutation.SetMaxRetries(v)
	return _c
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (_c *JobCreate) SetNillableMaxRetries(v *int) *JobCreate {
	if v != nil {
		_c.SetMaxRetries(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobCreate) SetCreatedAt(v time.Time) *JobCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobCreate) SetNillableCreatedAt(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *JobCreate) SetUpdatedAt(v time.Time) *JobCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *JobCreate) SetNillableUpdatedAt(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *JobCreate) SetStartedAt(v time.Time) *JobCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *JobCreate) SetNillableStartedAt(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *JobCreate) SetCompletedAt(v time.Time) *JobCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *JobCreate) SetNillableCompletedAt(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *JobCreate) SetMetadata(v map[string]interface{}) *JobCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *JobCreate) SetUserID(id int) *JobCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *JobCreate) SetNillableUserID(id *int) *JobCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *JobCreate) SetUser(v *User) *JobCreate {
	return _c.SetUserID(v.ID)
}

// AddLogIDs adds the "logs" edge to the JobLog entity by IDs.
func (_c *JobCreate) AddLogIDs(ids ...int) *JobCreate {
	_c.mutation.AddLogIDs(ids...)
	return _c
}

// AddLogs adds the "logs" edges to the JobLog entity.
func (_c *JobCreate) AddLogs(v ...*JobLog) *JobCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLogIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Job entity by IDs.
func (_c *JobCreate) AddDependentIDs(ids ...int) *JobCreate {
	_c.mutation.AddDependentIDs(ids...)
	return _c
}

// AddDependents adds the "dependents" edges to the Job entity.
func (_c *JobCreate) AddDependents(v ...*Job) *JobCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDependentIDs(ids...)
}

// SetDependsOnID sets the "depends_on" edge to the Job entity by ID.
func (_c *JobCreate) SetDependsOnID(id int) *JobCreate {
	_c.mutation.SetDependsOnID(id)
	return _c
}

// SetNillableDependsOnID sets the "depends_on" edge to the Job entity by ID if the given value is not nil.
func (_c *JobCreate) SetNillableDependsOnID(id *int) *JobCreate {
	if id != nil {
		_c = _c.SetDependsOnID(*id)
	}
	return _c
}

// SetDependsOn sets the "depends_on" edge to the Job entity.
func (_c *JobCreate) SetDependsOn(v *Job) *JobCreate {
	return _c.SetDependsOnID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GeneratedReport entity by IDs.
func (_c *JobCreate) AddReportIDs(ids ...int) *JobCreate {
	_c.mutation.AddReportIDs(ids...)
	return _c
}

// AddReports adds the "reports" edges to the GeneratedReport entity.
func (_c *JobCreate) AddReports(v ...*GeneratedReport) *JobCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReportIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_c *JobCreate) Mutation() *JobMutation {
	return _c.mutation
}

// Save creates the Job in the database.
func (_c *JobCreate) Save(ctx context.Context) (*Job, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := job.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Priority(); !ok {
		v := job.DefaultPriority
		_c.mutation.SetPriority(v)
	}
	if _, ok := _c.mutation.MaxRetries(); !ok {
		v := job.DefaultMaxRetries
		_c.mutation.SetMaxRetries(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := job.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Job.type"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Job.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Job.priority"`)}
	}
	if _, ok := _c.mutation.MaxRetries(); !ok {
		return &ValidationError{Name: "max_retries", err: errors.New(`ent: missing required field "Job.max_retries"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Job.updated_at"`)}
	}
	return nil
}

func (_c *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Payload(); ok {
		_spec.SetField(job.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := _c.mutation.Result(); ok {
		_spec.SetField(job.FieldResult, field.TypeJSON, value)
		_node.Result = value
	}
	if value, ok := _c.mutation.Error(); ok {
		_spec.SetField(job.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := _c.mutation.InngestRunID(); ok {
		_spec.SetField(job.FieldInngestRunID, field.TypeString, value)
		_node.InngestRunID = value
	}
	if value, ok := _c.mutation.ScheduledFor(); ok {
		_spec.SetField(job.FieldScheduledFor, field.TypeTime, value)
		_node.ScheduledFor = value
	}
	if value, ok := _c.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := _c.mutation.MaxRetries(); ok {
		_spec.SetField(job.FieldMaxRetries, field.TypeInt, value)
		_node.MaxRetries = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(job.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(job.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(job.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DependsOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_depends_on = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Job.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *JobCreate) OnConflict(opts ...sql.ConflictOption) *JobUpsertOne {
	_c.conflict = opts
	return &JobUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *JobCreate) OnConflictColumns(columns ...string) *JobUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &JobUpsertOne{
		create: _c,
	}
}

type (
	// JobUpsertOne is the builder for "upsert"-ing
	//  one Job node.
	JobUpsertOne struct {
		create *JobCreate
	}

	// JobUpsert is the "OnConflict" setter.
	JobUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *JobUpsert) SetType(v string) *JobUpsert {
	u.Set(job.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobUpsert) UpdateType() *JobUpsert {
	u.SetExcluded(job.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *JobUpsert) SetStatus(v job.Status) *JobUpsert {
	u.Set(job.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobUpsert) UpdateStatus() *JobUpsert {
	u.SetExcluded(job.FieldStatus)
	return u
}

// SetPayload sets the "payload" field.
func (u *JobUpsert) SetPayload(v map[string]interface{}) *JobUpsert {
	u.Set(job.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *JobUpsert) UpdatePayload() *JobUpsert {
	u.SetExcluded(job.FieldPayload)
	return u
}

// ClearPayload clears the value of the "payload" field.
func (u *JobUpsert) ClearPayload() *JobUpsert {
	u.SetNull(job.FieldPayload)
	return u
}

// SetResult sets the "result" field.
func (u *JobUpsert) SetResult(v map[string]interface{}) *JobUpsert {
	u.Set(job.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *JobUpsert) UpdateResult() *JobUpsert {
	u.SetExcluded(job.FieldResult)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *JobUpsert) ClearResult() *JobUpsert {
	u.SetNull(job.FieldResult)
	return u
}

// SetError sets the "error" field.
func (u *JobUpsert) SetError(v string) *JobUpsert {
	u.Set(job.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *JobUpsert) UpdateError() *JobUpsert {
	u.SetExcluded(job.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *JobUpsert) ClearError() *JobUpsert {
	u.SetNull(job.FieldError)
	return u
}

// SetInngestRunID sets the "inngest_run_id" field.
func (u *JobUpsert) SetInngestRunID(v string) *JobUpsert {
	u.Set(job.FieldInngestRunID, v)
	return u
}

// UpdateInngestRunID sets the "inngest_run_id" field to the value that was provided on create.
func (u *JobUpsert) UpdateInngestRunID() *JobUpsert {
	u.SetExcluded(job.FieldInngestRunID)
	return u
}

// ClearInngestRunID clears the value of the "inngest_run_id" field.
func (u *JobUpsert) ClearInngestRunID() *JobUpsert {
	u.SetNull(job.FieldInngestRunID)
	return u
}

// SetScheduledFor sets the "scheduled_for" field.
func (u *JobUpsert) SetScheduledFor(v time.Time) *JobUpsert {
	u.Set(job.FieldScheduledFor, v)
	return u
}

// UpdateScheduledFor sets the "scheduled_for" field to the value that was provided on create.
func (u *JobUpsert) UpdateScheduledFor() *JobUpsert {
	u.SetExcluded(job.FieldScheduledFor)
	return u
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (u *JobUpsert) ClearScheduledFor() *JobUpsert {
	u.SetNull(job.FieldScheduledFor)
	return u
}

// SetPriority sets the "priority" field.
func (u *JobUpsert) SetPriority(v int) *JobUpsert {
	u.Set(job.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *JobUpsert) UpdatePriority() *JobUpsert {
	u.SetExcluded(job.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *JobUpsert) AddPriority(v int) *JobUpsert {
	u.Add(job.FieldPriority, v)
	return u
}

// SetMaxRetries sets the "max_retries" field.
func (u *JobUpsert) SetMaxRetries(v int) *JobUpsert {
	u.Set(job.FieldMaxRetries, v)
	return u
}

// UpdateMaxRetries sets the "max_retries" field to the value that was provided on create.
func (u *JobUpsert) UpdateMaxRetries() *JobUpsert {
	u.SetExcluded(job.FieldMaxRetries)
	return u
}

// AddMaxRetries adds v to the "max_retries" field.
func (u *JobUpsert) AddMaxRetries(v int) *JobUpsert {
	u.Add(job.FieldMaxRetries, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsert) SetUpdatedAt(v time.Time) *JobUpsert {
	u.Set(job.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateUpdatedAt() *JobUpsert {
	u.SetExcluded(job.FieldUpdatedAt)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *JobUpsert) SetStartedAt(v time.Time) *JobUpsert {
	u.Set(job.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateStartedAt() *JobUpsert {
	u.SetExcluded(job.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *JobUpsert) ClearStartedAt() *JobUpsert {
	u.SetNull(job.FieldStartedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *JobUpsert) SetCompletedAt(v time.Time) *JobUpsert {
	u.Set(job.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *JobUpsert) UpdateCompletedAt() *JobUpsert {
	u.SetExcluded(job.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *JobUpsert) ClearCompletedAt() *JobUpsert {
	u.SetNull(job.FieldCompletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *JobUpsert) SetMetadata(v map[string]interface{}) *JobUpsert {
	u.Set(job.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobUpsert) UpdateMetadata() *JobUpsert {
	u.SetExcluded(job.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobUpsert) ClearMetadata() *JobUpsert {
	u.SetNull(job.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JobUpsertOne) UpdateNewValues() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(job.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *JobUpsertOne) Ignore() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobUpsertOne) DoNothing() *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobCreate.OnConflict
// documentation for more info.
func (u *JobUpsertOne) Update(set func(*JobUpsert)) *JobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *JobUpsertOne) SetType(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateType() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *JobUpsertOne) SetStatus(v job.Status) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateStatus() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateStatus()
	})
}

// SetPayload sets the "payload" field.
func (u *JobUpsertOne) SetPayload(v map[string]interface{}) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *JobUpsertOne) UpdatePayload() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *JobUpsertOne) ClearPayload() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearPayload()
	})
}

// SetResult sets the "result" field.
func (u *JobUpsertOne) SetResult(v map[string]interface{}) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateResult() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *JobUpsertOne) ClearResult() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearResult()
	})
}

// SetError sets the "error" field.
func (u *JobUpsertOne) SetError(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateError() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *JobUpsertOne) ClearError() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearError()
	})
}

// SetInngestRunID sets the "inngest_run_id" field.
func (u *JobUpsertOne) SetInngestRunID(v string) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetInngestRunID(v)
	})
}

// UpdateInngestRunID sets the "inngest_run_id" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateInngestRunID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInngestRunID()
	})
}

// ClearInngestRunID clears the value of the "inngest_run_id" field.
func (u *JobUpsertOne) ClearInngestRunID() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearInngestRunID()
	})
}

// SetScheduledFor sets the "scheduled_for" field.
func (u *JobUpsertOne) SetScheduledFor(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetScheduledFor(v)
	})
}

// UpdateScheduledFor sets the "scheduled_for" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateScheduledFor() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateScheduledFor()
	})
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (u *JobUpsertOne) ClearScheduledFor() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearScheduledFor()
	})
}

// SetPriority sets the "priority" field.
func (u *JobUpsertOne) SetPriority(v int) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *JobUpsertOne) AddPriority(v int) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *JobUpsertOne) UpdatePriority() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePriority()
	})
}

// SetMaxRetries sets the "max_retries" field.
func (u *JobUpsertOne) SetMaxRetries(v int) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetMaxRetries(v)
	})
}

// AddMaxRetries adds v to the "max_retries" field.
func (u *JobUpsertOne) AddMaxRetries(v int) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.AddMaxRetries(v)
	})
}

// UpdateMaxRetries sets the "max_retries" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateMaxRetries() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMaxRetries()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsertOne) SetUpdatedAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateUpdatedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *JobUpsertOne) SetStartedAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateStartedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *JobUpsertOne) ClearStartedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *JobUpsertOne) SetCompletedAt(v time.Time) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateCompletedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *JobUpsertOne) ClearCompletedAt() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *JobUpsertOne) SetMetadata(v map[string]interface{}) *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobUpsertOne) UpdateMetadata() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobUpsertOne) ClearMetadata() *JobUpsertOne {
	return u.Update(func(s *JobUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *JobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *JobUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *JobUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
	conflict []sql.ConflictOption
}

// Save creates the Job entities in the database.
func (_c *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Job, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Job.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.JobUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *JobCreateBulk) OnConflict(opts ...sql.ConflictOption) *JobUpsertBulk {
	_c.conflict = opts
	return &JobUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *JobCreateBulk) OnConflictColumns(columns ...string) *JobUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &JobUpsertBulk{
		create: _c,
	}
}

// JobUpsertBulk is the builder for "upsert"-ing
// a bulk of Job nodes.
type JobUpsertBulk struct {
	create *JobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *JobUpsertBulk) UpdateNewValues() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(job.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Job.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *JobUpsertBulk) Ignore() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *JobUpsertBulk) DoNothing() *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the JobCreateBulk.OnConflict
// documentation for more info.
func (u *JobUpsertBulk) Update(set func(*JobUpsert)) *JobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&JobUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *JobUpsertBulk) SetType(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateType() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *JobUpsertBulk) SetStatus(v job.Status) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateStatus() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateStatus()
	})
}

// SetPayload sets the "payload" field.
func (u *JobUpsertBulk) SetPayload(v map[string]interface{}) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdatePayload() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *JobUpsertBulk) ClearPayload() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearPayload()
	})
}

// SetResult sets the "result" field.
func (u *JobUpsertBulk) SetResult(v map[string]interface{}) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateResult() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *JobUpsertBulk) ClearResult() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearResult()
	})
}

// SetError sets the "error" field.
func (u *JobUpsertBulk) SetError(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateError() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *JobUpsertBulk) ClearError() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearError()
	})
}

// SetInngestRunID sets the "inngest_run_id" field.
func (u *JobUpsertBulk) SetInngestRunID(v string) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetInngestRunID(v)
	})
}

// UpdateInngestRunID sets the "inngest_run_id" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateInngestRunID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateInngestRunID()
	})
}

// ClearInngestRunID clears the value of the "inngest_run_id" field.
func (u *JobUpsertBulk) ClearInngestRunID() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearInngestRunID()
	})
}

// SetScheduledFor sets the "scheduled_for" field.
func (u *JobUpsertBulk) SetScheduledFor(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetScheduledFor(v)
	})
}

// UpdateScheduledFor sets the "scheduled_for" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateScheduledFor() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateScheduledFor()
	})
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (u *JobUpsertBulk) ClearScheduledFor() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearScheduledFor()
	})
}

// SetPriority sets the "priority" field.
func (u *JobUpsertBulk) SetPriority(v int) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *JobUpsertBulk) AddPriority(v int) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdatePriority() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdatePriority()
	})
}

// SetMaxRetries sets the "max_retries" field.
func (u *JobUpsertBulk) SetMaxRetries(v int) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetMaxRetries(v)
	})
}

// AddMaxRetries adds v to the "max_retries" field.
func (u *JobUpsertBulk) AddMaxRetries(v int) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.AddMaxRetries(v)
	})
}

// UpdateMaxRetries sets the "max_retries" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateMaxRetries() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMaxRetries()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *JobUpsertBulk) SetUpdatedAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateUpdatedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *JobUpsertBulk) SetStartedAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateStartedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *JobUpsertBulk) ClearStartedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearStartedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *JobUpsertBulk) SetCompletedAt(v time.Time) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateCompletedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *JobUpsertBulk) ClearCompletedAt() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearCompletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *JobUpsertBulk) SetMetadata(v map[string]interface{}) *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *JobUpsertBulk) UpdateMetadata() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *JobUpsertBulk) ClearMetadata() *JobUpsertBulk {
	return u.Update(func(s *JobUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *JobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the JobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for JobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *JobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
