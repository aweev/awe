// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/featureflag"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FeatureFlag is the model entity for the FeatureFlag schema.
type FeatureFlag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// RolloutPercentage holds the value of the "rollout_percentage" field.
	RolloutPercentage int `json:"rollout_percentage,omitempty"`
	// AllowedUserIds holds the value of the "allowed_user_ids" field.
	AllowedUserIds []string `json:"allowed_user_ids,omitempty"`
	// AllowedRoles holds the value of the "allowed_roles" field.
	AllowedRoles []string `json:"allowed_roles,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeatureFlag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case featureflag.FieldAllowedUserIds, featureflag.FieldAllowedRoles:
			values[i] = new([]byte)
		case featureflag.FieldIsActive:
			values[i] = new(sql.NullBool)
		case featureflag.FieldRolloutPercentage:
			values[i] = new(sql.NullInt64)
		case featureflag.FieldID, featureflag.FieldDescription:
			values[i] = new(sql.NullString)
		case featureflag.FieldCreatedAt, featureflag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeatureFlag fields.
func (_m *FeatureFlag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case featureflag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case featureflag.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case featureflag.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case featureflag.FieldRolloutPercentage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rollout_percentage", values[i])
			} else if value.Valid {
				_m.RolloutPercentage = int(value.Int64)
			}
		case featureflag.FieldAllowedUserIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_user_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AllowedUserIds); err != nil {
					return fmt.Errorf("unmarshal field allowed_user_ids: %w", err)
				}
			}
		case featureflag.FieldAllowedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AllowedRoles); err != nil {
					return fmt.Errorf("unmarshal field allowed_roles: %w", err)
				}
			}
		case featureflag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case featureflag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FeatureFlag.
// This includes values selected through modifiers, order, etc.
func (_m *FeatureFlag) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this FeatureFlag.
// Note that you need to call FeatureFlag.Unwrap() before calling this method if this FeatureFlag
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FeatureFlag) Update() *FeatureFlagUpdateOne {
	return NewFeatureFlagClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FeatureFlag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FeatureFlag) Unwrap() *FeatureFlag {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeatureFlag is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FeatureFlag) String() string {
	var builder strings.Builder
	builder.WriteString("FeatureFlag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("rollout_percentage=")
	builder.WriteString(fmt.Sprintf("%v", _m.RolloutPercentage))
	builder.WriteString(", ")
	builder.WriteString("allowed_user_ids=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowedUserIds))
	builder.WriteString(", ")
	builder.WriteString("allowed_roles=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowedRoles))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeatureFlags is a parsable slice of FeatureFlag.
type FeatureFlags []*FeatureFlag
