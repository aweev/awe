// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/teammemberitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamMemberItemCreate is the builder for creating a TeamMemberItem entity.
type TeamMemberItemCreate struct {
	config
	mutation *TeamMemberItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *TeamMemberItemCreate) SetOrder(v int) *TeamMemberItemCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetName sets the "name" field.
func (_c *TeamMemberItemCreate) SetName(v string) *TeamMemberItemCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetRole sets the "role" field.
func (_c *TeamMemberItemCreate) SetRole(v map[string]string) *TeamMemberItemCreate {
	_c.mutation.SetRole(v)
	return _c
}

// SetBio sets the "bio" field.
func (_c *TeamMemberItemCreate) SetBio(v map[string]string) *TeamMemberItemCreate {
	_c.mutation.SetBio(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *TeamMemberItemCreate) SetImageURL(v string) *TeamMemberItemCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *TeamMemberItemCreate) SetNillableImageURL(v *string) *TeamMemberItemCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_c *TeamMemberItemCreate) SetLinkedinURL(v string) *TeamMemberItemCreate {
	_c.mutation.SetLinkedinURL(v)
	return _c
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_c *TeamMemberItemCreate) SetNillableLinkedinURL(v *string) *TeamMemberItemCreate {
	if v != nil {
		_c.SetLinkedinURL(*v)
	}
	return _c
}

// SetTwitterURL sets the "twitter_url" field.
func (_c *TeamMemberItemCreate) SetTwitterURL(v string) *TeamMemberItemCreate {
	_c.mutation.SetTwitterURL(v)
	return _c
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_c *TeamMemberItemCreate) SetNillableTwitterURL(v *string) *TeamMemberItemCreate {
	if v != nil {
		_c.SetTwitterURL(*v)
	}
	return _c
}

// SetEmailURL sets the "email_url" field.
func (_c *TeamMemberItemCreate) SetEmailURL(v string) *TeamMemberItemCreate {
	_c.mutation.SetEmailURL(v)
	return _c
}

// SetNillableEmailURL sets the "email_url" field if the given value is not nil.
func (_c *TeamMemberItemCreate) SetNillableEmailURL(v *string) *TeamMemberItemCreate {
	if v != nil {
		_c.SetEmailURL(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the BlockTeamGrid entity by ID.
func (_c *TeamMemberItemCreate) SetBlockID(id int) *TeamMemberItemCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockTeamGrid entity.
func (_c *TeamMemberItemCreate) SetBlock(v *BlockTeamGrid) *TeamMemberItemCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the TeamMemberItemMutation object of the builder.
func (_c *TeamMemberItemCreate) Mutation() *TeamMemberItemMutation {
	return _c.mutation
}

// Save creates the TeamMemberItem in the database.
func (_c *TeamMemberItemCreate) Save(ctx context.Context) (*TeamMemberItem, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TeamMemberItemCreate) SaveX(ctx context.Context) *TeamMemberItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TeamMemberItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TeamMemberItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TeamMemberItemCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TeamMemberItem.order"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TeamMemberItem.name"`)}
	}
	if _, ok := _c.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "TeamMemberItem.role"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "TeamMemberItem.block"`)}
	}
	return nil
}

func (_c *TeamMemberItemCreate) sqlSave(ctx context.Context) (*TeamMemberItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TeamMemberItemCreate) createSpec() (*TeamMemberItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamMemberItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(teammemberitem.Table, sqlgraph.NewFieldSpec(teammemberitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(teammemberitem.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(teammemberitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Role(); ok {
		_spec.SetField(teammemberitem.FieldRole, field.TypeJSON, value)
		_node.Role = value
	}
	if value, ok := _c.mutation.Bio(); ok {
		_spec.SetField(teammemberitem.FieldBio, field.TypeJSON, value)
		_node.Bio = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(teammemberitem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.LinkedinURL(); ok {
		_spec.SetField(teammemberitem.FieldLinkedinURL, field.TypeString, value)
		_node.LinkedinURL = value
	}
	if value, ok := _c.mutation.TwitterURL(); ok {
		_spec.SetField(teammemberitem.FieldTwitterURL, field.TypeString, value)
		_node.TwitterURL = value
	}
	if value, ok := _c.mutation.EmailURL(); ok {
		_spec.SetField(teammemberitem.FieldEmailURL, field.TypeString, value)
		_node.EmailURL = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_team_grid_members = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamMemberItem.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamMemberItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TeamMemberItemCreate) OnConflict(opts ...sql.ConflictOption) *TeamMemberItemUpsertOne {
	_c.conflict = opts
	return &TeamMemberItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TeamMemberItemCreate) OnConflictColumns(columns ...string) *TeamMemberItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TeamMemberItemUpsertOne{
		create: _c,
	}
}

type (
	// TeamMemberItemUpsertOne is the builder for "upsert"-ing
	//  one TeamMemberItem node.
	TeamMemberItemUpsertOne struct {
		create *TeamMemberItemCreate
	}

	// TeamMemberItemUpsert is the "OnConflict" setter.
	TeamMemberItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *TeamMemberItemUpsert) SetOrder(v int) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateOrder() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *TeamMemberItemUpsert) AddOrder(v int) *TeamMemberItemUpsert {
	u.Add(teammemberitem.FieldOrder, v)
	return u
}

// SetName sets the "name" field.
func (u *TeamMemberItemUpsert) SetName(v string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateName() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldName)
	return u
}

// SetRole sets the "role" field.
func (u *TeamMemberItemUpsert) SetRole(v map[string]string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateRole() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldRole)
	return u
}

// SetBio sets the "bio" field.
func (u *TeamMemberItemUpsert) SetBio(v map[string]string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateBio() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberItemUpsert) ClearBio() *TeamMemberItemUpsert {
	u.SetNull(teammemberitem.FieldBio)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberItemUpsert) SetImageURL(v string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateImageURL() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberItemUpsert) ClearImageURL() *TeamMemberItemUpsert {
	u.SetNull(teammemberitem.FieldImageURL)
	return u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberItemUpsert) SetLinkedinURL(v string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldLinkedinURL, v)
	return u
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateLinkedinURL() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldLinkedinURL)
	return u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberItemUpsert) ClearLinkedinURL() *TeamMemberItemUpsert {
	u.SetNull(teammemberitem.FieldLinkedinURL)
	return u
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberItemUpsert) SetTwitterURL(v string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldTwitterURL, v)
	return u
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateTwitterURL() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldTwitterURL)
	return u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberItemUpsert) ClearTwitterURL() *TeamMemberItemUpsert {
	u.SetNull(teammemberitem.FieldTwitterURL)
	return u
}

// SetEmailURL sets the "email_url" field.
func (u *TeamMemberItemUpsert) SetEmailURL(v string) *TeamMemberItemUpsert {
	u.Set(teammemberitem.FieldEmailURL, v)
	return u
}

// UpdateEmailURL sets the "email_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsert) UpdateEmailURL() *TeamMemberItemUpsert {
	u.SetExcluded(teammemberitem.FieldEmailURL)
	return u
}

// ClearEmailURL clears the value of the "email_url" field.
func (u *TeamMemberItemUpsert) ClearEmailURL() *TeamMemberItemUpsert {
	u.SetNull(teammemberitem.FieldEmailURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamMemberItemUpsertOne) UpdateNewValues() *TeamMemberItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamMemberItemUpsertOne) Ignore() *TeamMemberItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamMemberItemUpsertOne) DoNothing() *TeamMemberItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamMemberItemCreate.OnConflict
// documentation for more info.
func (u *TeamMemberItemUpsertOne) Update(set func(*TeamMemberItemUpsert)) *TeamMemberItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamMemberItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TeamMemberItemUpsertOne) SetOrder(v int) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TeamMemberItemUpsertOne) AddOrder(v int) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateOrder() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateOrder()
	})
}

// SetName sets the "name" field.
func (u *TeamMemberItemUpsertOne) SetName(v string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateName() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateName()
	})
}

// SetRole sets the "role" field.
func (u *TeamMemberItemUpsertOne) SetRole(v map[string]string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateRole() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateRole()
	})
}

// SetBio sets the "bio" field.
func (u *TeamMemberItemUpsertOne) SetBio(v map[string]string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateBio() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberItemUpsertOne) ClearBio() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearBio()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberItemUpsertOne) SetImageURL(v string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateImageURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberItemUpsertOne) ClearImageURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearImageURL()
	})
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberItemUpsertOne) SetLinkedinURL(v string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetLinkedinURL(v)
	})
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateLinkedinURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateLinkedinURL()
	})
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberItemUpsertOne) ClearLinkedinURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearLinkedinURL()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberItemUpsertOne) SetTwitterURL(v string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateTwitterURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateTwitterURL()
	})
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberItemUpsertOne) ClearTwitterURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearTwitterURL()
	})
}

// SetEmailURL sets the "email_url" field.
func (u *TeamMemberItemUpsertOne) SetEmailURL(v string) *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetEmailURL(v)
	})
}

// UpdateEmailURL sets the "email_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertOne) UpdateEmailURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateEmailURL()
	})
}

// ClearEmailURL clears the value of the "email_url" field.
func (u *TeamMemberItemUpsertOne) ClearEmailURL() *TeamMemberItemUpsertOne {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearEmailURL()
	})
}

// Exec executes the query.
func (u *TeamMemberItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamMemberItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamMemberItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamMemberItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamMemberItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamMemberItemCreateBulk is the builder for creating many TeamMemberItem entities in bulk.
type TeamMemberItemCreateBulk struct {
	config
	err      error
	builders []*TeamMemberItemCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamMemberItem entities in the database.
func (_c *TeamMemberItemCreateBulk) Save(ctx context.Context) ([]*TeamMemberItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TeamMemberItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamMemberItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TeamMemberItemCreateBulk) SaveX(ctx context.Context) []*TeamMemberItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TeamMemberItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TeamMemberItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamMemberItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamMemberItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *TeamMemberItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamMemberItemUpsertBulk {
	_c.conflict = opts
	return &TeamMemberItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TeamMemberItemCreateBulk) OnConflictColumns(columns ...string) *TeamMemberItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TeamMemberItemUpsertBulk{
		create: _c,
	}
}

// TeamMemberItemUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamMemberItem nodes.
type TeamMemberItemUpsertBulk struct {
	create *TeamMemberItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamMemberItemUpsertBulk) UpdateNewValues() *TeamMemberItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamMemberItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamMemberItemUpsertBulk) Ignore() *TeamMemberItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamMemberItemUpsertBulk) DoNothing() *TeamMemberItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamMemberItemCreateBulk.OnConflict
// documentation for more info.
func (u *TeamMemberItemUpsertBulk) Update(set func(*TeamMemberItemUpsert)) *TeamMemberItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamMemberItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *TeamMemberItemUpsertBulk) SetOrder(v int) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *TeamMemberItemUpsertBulk) AddOrder(v int) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateOrder() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateOrder()
	})
}

// SetName sets the "name" field.
func (u *TeamMemberItemUpsertBulk) SetName(v string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateName() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateName()
	})
}

// SetRole sets the "role" field.
func (u *TeamMemberItemUpsertBulk) SetRole(v map[string]string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateRole() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateRole()
	})
}

// SetBio sets the "bio" field.
func (u *TeamMemberItemUpsertBulk) SetBio(v map[string]string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateBio() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberItemUpsertBulk) ClearBio() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearBio()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberItemUpsertBulk) SetImageURL(v string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateImageURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberItemUpsertBulk) ClearImageURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearImageURL()
	})
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberItemUpsertBulk) SetLinkedinURL(v string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetLinkedinURL(v)
	})
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateLinkedinURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateLinkedinURL()
	})
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberItemUpsertBulk) ClearLinkedinURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearLinkedinURL()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberItemUpsertBulk) SetTwitterURL(v string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateTwitterURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateTwitterURL()
	})
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberItemUpsertBulk) ClearTwitterURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearTwitterURL()
	})
}

// SetEmailURL sets the "email_url" field.
func (u *TeamMemberItemUpsertBulk) SetEmailURL(v string) *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.SetEmailURL(v)
	})
}

// UpdateEmailURL sets the "email_url" field to the value that was provided on create.
func (u *TeamMemberItemUpsertBulk) UpdateEmailURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.UpdateEmailURL()
	})
}

// ClearEmailURL clears the value of the "email_url" field.
func (u *TeamMemberItemUpsertBulk) ClearEmailURL() *TeamMemberItemUpsertBulk {
	return u.Update(func(s *TeamMemberItemUpsert) {
		s.ClearEmailURL()
	})
}

// Exec executes the query.
func (u *TeamMemberItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeamMemberItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamMemberItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamMemberItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
