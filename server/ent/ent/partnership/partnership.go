// Code generated by ent, DO NOT EDIT.

package partnership

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the partnership type in the database.
	Label = "partnership"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldRenewalDate holds the string denoting the renewal_date field in the database.
	FieldRenewalDate = "renewal_date"
	// FieldBenefits holds the string denoting the benefits field in the database.
	FieldBenefits = "benefits"
	// FieldDeliverables holds the string denoting the deliverables field in the database.
	FieldDeliverables = "deliverables"
	// FieldRequirements holds the string denoting the requirements field in the database.
	FieldRequirements = "requirements"
	// FieldLastContact holds the string denoting the last_contact field in the database.
	FieldLastContact = "last_contact"
	// FieldNextFollowUp holds the string denoting the next_follow_up field in the database.
	FieldNextFollowUp = "next_follow_up"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeManager holds the string denoting the manager edge name in mutations.
	EdgeManager = "manager"
	// EdgePrimaryContacts holds the string denoting the primary_contacts edge name in mutations.
	EdgePrimaryContacts = "primary_contacts"
	// EdgeReports holds the string denoting the reports edge name in mutations.
	EdgeReports = "reports"
	// EdgeInteractions holds the string denoting the interactions edge name in mutations.
	EdgeInteractions = "interactions"
	// EdgeRenewals holds the string denoting the renewals edge name in mutations.
	EdgeRenewals = "renewals"
	// EdgeBrandBenefits holds the string denoting the brand_benefits edge name in mutations.
	EdgeBrandBenefits = "brand_benefits"
	// Table holds the table name of the partnership in the database.
	Table = "partnerships"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "partnerships"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_partnerships"
	// ManagerTable is the table that holds the manager relation/edge.
	ManagerTable = "partnerships"
	// ManagerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ManagerInverseTable = "users"
	// ManagerColumn is the table column denoting the manager relation/edge.
	ManagerColumn = "user_managed_partnerships"
	// PrimaryContactsTable is the table that holds the primary_contacts relation/edge. The primary key declared below.
	PrimaryContactsTable = "user_partnership_contacts"
	// PrimaryContactsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PrimaryContactsInverseTable = "users"
	// ReportsTable is the table that holds the reports relation/edge.
	ReportsTable = "partnership_reports"
	// ReportsInverseTable is the table name for the PartnershipReport entity.
	// It exists in this package in order to avoid circular dependency with the "partnershipreport" package.
	ReportsInverseTable = "partnership_reports"
	// ReportsColumn is the table column denoting the reports relation/edge.
	ReportsColumn = "partnership_reports"
	// InteractionsTable is the table that holds the interactions relation/edge.
	InteractionsTable = "partnership_interactions"
	// InteractionsInverseTable is the table name for the PartnershipInteraction entity.
	// It exists in this package in order to avoid circular dependency with the "partnershipinteraction" package.
	InteractionsInverseTable = "partnership_interactions"
	// InteractionsColumn is the table column denoting the interactions relation/edge.
	InteractionsColumn = "partnership_interactions"
	// RenewalsTable is the table that holds the renewals relation/edge.
	RenewalsTable = "partnership_renewals"
	// RenewalsInverseTable is the table name for the PartnershipRenewal entity.
	// It exists in this package in order to avoid circular dependency with the "partnershiprenewal" package.
	RenewalsInverseTable = "partnership_renewals"
	// RenewalsColumn is the table column denoting the renewals relation/edge.
	RenewalsColumn = "partnership_renewals"
	// BrandBenefitsTable is the table that holds the brand_benefits relation/edge.
	BrandBenefitsTable = "brand_benefits"
	// BrandBenefitsInverseTable is the table name for the BrandBenefit entity.
	// It exists in this package in order to avoid circular dependency with the "brandbenefit" package.
	BrandBenefitsInverseTable = "brand_benefits"
	// BrandBenefitsColumn is the table column denoting the brand_benefits relation/edge.
	BrandBenefitsColumn = "partnership_brand_benefits"
)

// Columns holds all SQL columns for partnership fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldType,
	FieldStatus,
	FieldDescription,
	FieldValue,
	FieldCurrency,
	FieldStartDate,
	FieldEndDate,
	FieldRenewalDate,
	FieldBenefits,
	FieldDeliverables,
	FieldRequirements,
	FieldLastContact,
	FieldNextFollowUp,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "partnerships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_partnerships",
	"user_managed_partnerships",
}

var (
	// PrimaryContactsPrimaryKey and PrimaryContactsColumn2 are the table columns denoting the
	// primary key for the primary_contacts relation (M2M).
	PrimaryContactsPrimaryKey = []string{"user_id", "partnership_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCORPORATE     Type = "CORPORATE"
	TypeINSTITUTIONAL Type = "INSTITUTIONAL"
	TypeCOMMUNITY     Type = "COMMUNITY"
	TypeGOVERNMENT    Type = "GOVERNMENT"
	TypeNONPROFIT     Type = "NONPROFIT"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCORPORATE, TypeINSTITUTIONAL, TypeCOMMUNITY, TypeGOVERNMENT, TypeNONPROFIT:
		return nil
	default:
		return fmt.Errorf("partnership: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPROSPECT is the default value of the Status enum.
const DefaultStatus = StatusPROSPECT

// Status values.
const (
	StatusPROSPECT Status = "PROSPECT"
	StatusACTIVE   Status = "ACTIVE"
	StatusRENEWED  Status = "RENEWED"
	StatusPAUSED   Status = "PAUSED"
	StatusENDED    Status = "ENDED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPROSPECT, StatusACTIVE, StatusRENEWED, StatusPAUSED, StatusENDED:
		return nil
	default:
		return fmt.Errorf("partnership: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Partnership queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByRenewalDate orders the results by the renewal_date field.
func ByRenewalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewalDate, opts...).ToFunc()
}

// ByLastContact orders the results by the last_contact field.
func ByLastContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastContact, opts...).ToFunc()
}

// ByNextFollowUp orders the results by the next_follow_up field.
func ByNextFollowUp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextFollowUp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByManagerField orders the results by manager field.
func ByManagerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrimaryContactsCount orders the results by primary_contacts count.
func ByPrimaryContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrimaryContactsStep(), opts...)
	}
}

// ByPrimaryContacts orders the results by primary_contacts terms.
func ByPrimaryContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReportsCount orders the results by reports count.
func ByReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportsStep(), opts...)
	}
}

// ByReports orders the results by reports terms.
func ByReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInteractionsCount orders the results by interactions count.
func ByInteractionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInteractionsStep(), opts...)
	}
}

// ByInteractions orders the results by interactions terms.
func ByInteractions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInteractionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRenewalsCount orders the results by renewals count.
func ByRenewalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRenewalsStep(), opts...)
	}
}

// ByRenewals orders the results by renewals terms.
func ByRenewals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRenewalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBrandBenefitsCount orders the results by brand_benefits count.
func ByBrandBenefitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBrandBenefitsStep(), opts...)
	}
}

// ByBrandBenefits orders the results by brand_benefits terms.
func ByBrandBenefits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandBenefitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newManagerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ManagerTable, ManagerColumn),
	)
}
func newPrimaryContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrimaryContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PrimaryContactsTable, PrimaryContactsPrimaryKey...),
	)
}
func newReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
	)
}
func newInteractionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InteractionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InteractionsTable, InteractionsColumn),
	)
}
func newRenewalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RenewalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RenewalsTable, RenewalsColumn),
	)
}
func newBrandBenefitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandBenefitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BrandBenefitsTable, BrandBenefitsColumn),
	)
}
