// Code generated by ent, DO NOT EDIT.

package partnership

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldSlug, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldValue, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldCurrency, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldEndDate, v))
}

// RenewalDate applies equality check predicate on the "renewal_date" field. It's identical to RenewalDateEQ.
func RenewalDate(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldRenewalDate, v))
}

// LastContact applies equality check predicate on the "last_contact" field. It's identical to LastContactEQ.
func LastContact(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldLastContact, v))
}

// NextFollowUp applies equality check predicate on the "next_follow_up" field. It's identical to NextFollowUpEQ.
func NextFollowUp(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldNextFollowUp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldUpdatedAt, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldContainsFold(FieldSlug, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldStatus, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldValue))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Partnership {
	return predicate.Partnership(sql.FieldContainsFold(FieldCurrency, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldEndDate))
}

// RenewalDateEQ applies the EQ predicate on the "renewal_date" field.
func RenewalDateEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldRenewalDate, v))
}

// RenewalDateNEQ applies the NEQ predicate on the "renewal_date" field.
func RenewalDateNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldRenewalDate, v))
}

// RenewalDateIn applies the In predicate on the "renewal_date" field.
func RenewalDateIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldRenewalDate, vs...))
}

// RenewalDateNotIn applies the NotIn predicate on the "renewal_date" field.
func RenewalDateNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldRenewalDate, vs...))
}

// RenewalDateGT applies the GT predicate on the "renewal_date" field.
func RenewalDateGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldRenewalDate, v))
}

// RenewalDateGTE applies the GTE predicate on the "renewal_date" field.
func RenewalDateGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldRenewalDate, v))
}

// RenewalDateLT applies the LT predicate on the "renewal_date" field.
func RenewalDateLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldRenewalDate, v))
}

// RenewalDateLTE applies the LTE predicate on the "renewal_date" field.
func RenewalDateLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldRenewalDate, v))
}

// RenewalDateIsNil applies the IsNil predicate on the "renewal_date" field.
func RenewalDateIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldRenewalDate))
}

// RenewalDateNotNil applies the NotNil predicate on the "renewal_date" field.
func RenewalDateNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldRenewalDate))
}

// LastContactEQ applies the EQ predicate on the "last_contact" field.
func LastContactEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldLastContact, v))
}

// LastContactNEQ applies the NEQ predicate on the "last_contact" field.
func LastContactNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldLastContact, v))
}

// LastContactIn applies the In predicate on the "last_contact" field.
func LastContactIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldLastContact, vs...))
}

// LastContactNotIn applies the NotIn predicate on the "last_contact" field.
func LastContactNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldLastContact, vs...))
}

// LastContactGT applies the GT predicate on the "last_contact" field.
func LastContactGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldLastContact, v))
}

// LastContactGTE applies the GTE predicate on the "last_contact" field.
func LastContactGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldLastContact, v))
}

// LastContactLT applies the LT predicate on the "last_contact" field.
func LastContactLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldLastContact, v))
}

// LastContactLTE applies the LTE predicate on the "last_contact" field.
func LastContactLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldLastContact, v))
}

// LastContactIsNil applies the IsNil predicate on the "last_contact" field.
func LastContactIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldLastContact))
}

// LastContactNotNil applies the NotNil predicate on the "last_contact" field.
func LastContactNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldLastContact))
}

// NextFollowUpEQ applies the EQ predicate on the "next_follow_up" field.
func NextFollowUpEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldNextFollowUp, v))
}

// NextFollowUpNEQ applies the NEQ predicate on the "next_follow_up" field.
func NextFollowUpNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldNextFollowUp, v))
}

// NextFollowUpIn applies the In predicate on the "next_follow_up" field.
func NextFollowUpIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldNextFollowUp, vs...))
}

// NextFollowUpNotIn applies the NotIn predicate on the "next_follow_up" field.
func NextFollowUpNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldNextFollowUp, vs...))
}

// NextFollowUpGT applies the GT predicate on the "next_follow_up" field.
func NextFollowUpGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldNextFollowUp, v))
}

// NextFollowUpGTE applies the GTE predicate on the "next_follow_up" field.
func NextFollowUpGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldNextFollowUp, v))
}

// NextFollowUpLT applies the LT predicate on the "next_follow_up" field.
func NextFollowUpLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldNextFollowUp, v))
}

// NextFollowUpLTE applies the LTE predicate on the "next_follow_up" field.
func NextFollowUpLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldNextFollowUp, v))
}

// NextFollowUpIsNil applies the IsNil predicate on the "next_follow_up" field.
func NextFollowUpIsNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldIsNull(FieldNextFollowUp))
}

// NextFollowUpNotNil applies the NotNil predicate on the "next_follow_up" field.
func NextFollowUpNotNil() predicate.Partnership {
	return predicate.Partnership(sql.FieldNotNull(FieldNextFollowUp))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Partnership {
	return predicate.Partnership(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.User) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrimaryContacts applies the HasEdge predicate on the "primary_contacts" edge.
func HasPrimaryContacts() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PrimaryContactsTable, PrimaryContactsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrimaryContactsWith applies the HasEdge predicate on the "primary_contacts" edge with a given conditions (other predicates).
func HasPrimaryContactsWith(preds ...predicate.User) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newPrimaryContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReports applies the HasEdge predicate on the "reports" edge.
func HasReports() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.PartnershipReport) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInteractions applies the HasEdge predicate on the "interactions" edge.
func HasInteractions() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InteractionsTable, InteractionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInteractionsWith applies the HasEdge predicate on the "interactions" edge with a given conditions (other predicates).
func HasInteractionsWith(preds ...predicate.PartnershipInteraction) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newInteractionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRenewals applies the HasEdge predicate on the "renewals" edge.
func HasRenewals() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RenewalsTable, RenewalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRenewalsWith applies the HasEdge predicate on the "renewals" edge with a given conditions (other predicates).
func HasRenewalsWith(preds ...predicate.PartnershipRenewal) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newRenewalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrandBenefits applies the HasEdge predicate on the "brand_benefits" edge.
func HasBrandBenefits() predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BrandBenefitsTable, BrandBenefitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandBenefitsWith applies the HasEdge predicate on the "brand_benefits" edge with a given conditions (other predicates).
func HasBrandBenefitsWith(preds ...predicate.BrandBenefit) predicate.Partnership {
	return predicate.Partnership(func(s *sql.Selector) {
		step := newBrandBenefitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Partnership) predicate.Partnership {
	return predicate.Partnership(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Partnership) predicate.Partnership {
	return predicate.Partnership(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Partnership) predicate.Partnership {
	return predicate.Partnership(sql.NotPredicates(p))
}
