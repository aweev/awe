// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockaccordion"
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/blockcta"
	"awe/ent/ent/blockdivider"
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/blockhero"
	"awe/ent/ent/blockmap"
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/blockstats"
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/blocktabs"
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/blockvolunteersignup"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/page"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContentBlockUpdate is the builder for updating ContentBlock entities.
type ContentBlockUpdate struct {
	config
	hooks    []Hook
	mutation *ContentBlockMutation
}

// Where appends a list predicates to the ContentBlockUpdate builder.
func (_u *ContentBlockUpdate) Where(ps ...predicate.ContentBlock) *ContentBlockUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *ContentBlockUpdate) SetOrder(v int) *ContentBlockUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableOrder(v *int) *ContentBlockUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *ContentBlockUpdate) AddOrder(v int) *ContentBlockUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetBlockType sets the "block_type" field.
func (_u *ContentBlockUpdate) SetBlockType(v contentblock.BlockType) *ContentBlockUpdate {
	_u.mutation.SetBlockType(v)
	return _u
}

// SetNillableBlockType sets the "block_type" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockType(v *contentblock.BlockType) *ContentBlockUpdate {
	if v != nil {
		_u.SetBlockType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *ContentBlockUpdate) SetConfig(v map[string]interface{}) *ContentBlockUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *ContentBlockUpdate) ClearConfig() *ContentBlockUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// SetIsVisible sets the "is_visible" field.
func (_u *ContentBlockUpdate) SetIsVisible(v bool) *ContentBlockUpdate {
	_u.mutation.SetIsVisible(v)
	return _u
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableIsVisible(v *bool) *ContentBlockUpdate {
	if v != nil {
		_u.SetIsVisible(*v)
	}
	return _u
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (_u *ContentBlockUpdate) SetHideOnMobile(v bool) *ContentBlockUpdate {
	_u.mutation.SetHideOnMobile(v)
	return _u
}

// SetNillableHideOnMobile sets the "hide_on_mobile" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableHideOnMobile(v *bool) *ContentBlockUpdate {
	if v != nil {
		_u.SetHideOnMobile(*v)
	}
	return _u
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (_u *ContentBlockUpdate) SetHideOnTablet(v bool) *ContentBlockUpdate {
	_u.mutation.SetHideOnTablet(v)
	return _u
}

// SetNillableHideOnTablet sets the "hide_on_tablet" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableHideOnTablet(v *bool) *ContentBlockUpdate {
	if v != nil {
		_u.SetHideOnTablet(*v)
	}
	return _u
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (_u *ContentBlockUpdate) SetHideOnDesktop(v bool) *ContentBlockUpdate {
	_u.mutation.SetHideOnDesktop(v)
	return _u
}

// SetNillableHideOnDesktop sets the "hide_on_desktop" field if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableHideOnDesktop(v *bool) *ContentBlockUpdate {
	if v != nil {
		_u.SetHideOnDesktop(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ContentBlockUpdate) SetUpdatedAt(v time.Time) *ContentBlockUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_u *ContentBlockUpdate) SetPageID(id int) *ContentBlockUpdate {
	_u.mutation.SetPageID(id)
	return _u
}

// SetPage sets the "page" edge to the Page entity.
func (_u *ContentBlockUpdate) SetPage(v *Page) *ContentBlockUpdate {
	return _u.SetPageID(v.ID)
}

// SetBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID.
func (_u *ContentBlockUpdate) SetBlockHeroID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockHeroID(id)
	return _u
}

// SetNillableBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockHeroID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockHeroID(*id)
	}
	return _u
}

// SetBlockHero sets the "block_hero" edge to the BlockHero entity.
func (_u *ContentBlockUpdate) SetBlockHero(v *BlockHero) *ContentBlockUpdate {
	return _u.SetBlockHeroID(v.ID)
}

// SetBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID.
func (_u *ContentBlockUpdate) SetBlockTextContentID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockTextContentID(id)
	return _u
}

// SetNillableBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockTextContentID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockTextContentID(*id)
	}
	return _u
}

// SetBlockTextContent sets the "block_text_content" edge to the BlockTextContent entity.
func (_u *ContentBlockUpdate) SetBlockTextContent(v *BlockTextContent) *ContentBlockUpdate {
	return _u.SetBlockTextContentID(v.ID)
}

// SetBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID.
func (_u *ContentBlockUpdate) SetBlockFaqID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockFaqID(id)
	return _u
}

// SetNillableBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockFaqID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockFaqID(*id)
	}
	return _u
}

// SetBlockFaq sets the "block_faq" edge to the BlockFaq entity.
func (_u *ContentBlockUpdate) SetBlockFaq(v *BlockFaq) *ContentBlockUpdate {
	return _u.SetBlockFaqID(v.ID)
}

// SetBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID.
func (_u *ContentBlockUpdate) SetBlockCtaID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockCtaID(id)
	return _u
}

// SetNillableBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockCtaID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockCtaID(*id)
	}
	return _u
}

// SetBlockCta sets the "block_cta" edge to the BlockCta entity.
func (_u *ContentBlockUpdate) SetBlockCta(v *BlockCta) *ContentBlockUpdate {
	return _u.SetBlockCtaID(v.ID)
}

// SetBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID.
func (_u *ContentBlockUpdate) SetBlockTestimonialsID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockTestimonialsID(id)
	return _u
}

// SetNillableBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockTestimonialsID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockTestimonialsID(*id)
	}
	return _u
}

// SetBlockTestimonials sets the "block_testimonials" edge to the BlockTestimonials entity.
func (_u *ContentBlockUpdate) SetBlockTestimonials(v *BlockTestimonials) *ContentBlockUpdate {
	return _u.SetBlockTestimonialsID(v.ID)
}

// SetBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID.
func (_u *ContentBlockUpdate) SetBlockStatsID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockStatsID(id)
	return _u
}

// SetNillableBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockStatsID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockStatsID(*id)
	}
	return _u
}

// SetBlockStats sets the "block_stats" edge to the BlockStats entity.
func (_u *ContentBlockUpdate) SetBlockStats(v *BlockStats) *ContentBlockUpdate {
	return _u.SetBlockStatsID(v.ID)
}

// SetBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID.
func (_u *ContentBlockUpdate) SetBlockGalleryID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockGalleryID(id)
	return _u
}

// SetNillableBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockGalleryID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockGalleryID(*id)
	}
	return _u
}

// SetBlockGallery sets the "block_gallery" edge to the BlockGallery entity.
func (_u *ContentBlockUpdate) SetBlockGallery(v *BlockGallery) *ContentBlockUpdate {
	return _u.SetBlockGalleryID(v.ID)
}

// SetBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID.
func (_u *ContentBlockUpdate) SetBlockProgramCardsID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockProgramCardsID(id)
	return _u
}

// SetNillableBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockProgramCardsID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockProgramCardsID(*id)
	}
	return _u
}

// SetBlockProgramCards sets the "block_program_cards" edge to the BlockProgramCards entity.
func (_u *ContentBlockUpdate) SetBlockProgramCards(v *BlockProgramCards) *ContentBlockUpdate {
	return _u.SetBlockProgramCardsID(v.ID)
}

// SetBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID.
func (_u *ContentBlockUpdate) SetBlockSuccessStoriesID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockSuccessStoriesID(id)
	return _u
}

// SetNillableBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockSuccessStoriesID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockSuccessStoriesID(*id)
	}
	return _u
}

// SetBlockSuccessStories sets the "block_success_stories" edge to the BlockSuccessStories entity.
func (_u *ContentBlockUpdate) SetBlockSuccessStories(v *BlockSuccessStories) *ContentBlockUpdate {
	return _u.SetBlockSuccessStoriesID(v.ID)
}

// SetBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID.
func (_u *ContentBlockUpdate) SetBlockDonationFormID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockDonationFormID(id)
	return _u
}

// SetNillableBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockDonationFormID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockDonationFormID(*id)
	}
	return _u
}

// SetBlockDonationForm sets the "block_donation_form" edge to the BlockDonationForm entity.
func (_u *ContentBlockUpdate) SetBlockDonationForm(v *BlockDonationForm) *ContentBlockUpdate {
	return _u.SetBlockDonationFormID(v.ID)
}

// SetBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID.
func (_u *ContentBlockUpdate) SetBlockVolunteerSignupID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockVolunteerSignupID(id)
	return _u
}

// SetNillableBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockVolunteerSignupID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockVolunteerSignupID(*id)
	}
	return _u
}

// SetBlockVolunteerSignup sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity.
func (_u *ContentBlockUpdate) SetBlockVolunteerSignup(v *BlockVolunteerSignup) *ContentBlockUpdate {
	return _u.SetBlockVolunteerSignupID(v.ID)
}

// SetBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID.
func (_u *ContentBlockUpdate) SetBlockNewsletterSignupID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockNewsletterSignupID(id)
	return _u
}

// SetNillableBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockNewsletterSignupID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockNewsletterSignupID(*id)
	}
	return _u
}

// SetBlockNewsletterSignup sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity.
func (_u *ContentBlockUpdate) SetBlockNewsletterSignup(v *BlockNewsletterSignup) *ContentBlockUpdate {
	return _u.SetBlockNewsletterSignupID(v.ID)
}

// SetBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID.
func (_u *ContentBlockUpdate) SetBlockPartnerLogosID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockPartnerLogosID(id)
	return _u
}

// SetNillableBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockPartnerLogosID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockPartnerLogosID(*id)
	}
	return _u
}

// SetBlockPartnerLogos sets the "block_partner_logos" edge to the BlockPartnerLogos entity.
func (_u *ContentBlockUpdate) SetBlockPartnerLogos(v *BlockPartnerLogos) *ContentBlockUpdate {
	return _u.SetBlockPartnerLogosID(v.ID)
}

// SetBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID.
func (_u *ContentBlockUpdate) SetBlockTeamGridID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockTeamGridID(id)
	return _u
}

// SetNillableBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockTeamGridID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockTeamGridID(*id)
	}
	return _u
}

// SetBlockTeamGrid sets the "block_team_grid" edge to the BlockTeamGrid entity.
func (_u *ContentBlockUpdate) SetBlockTeamGrid(v *BlockTeamGrid) *ContentBlockUpdate {
	return _u.SetBlockTeamGridID(v.ID)
}

// SetBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID.
func (_u *ContentBlockUpdate) SetBlockTimelineID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockTimelineID(id)
	return _u
}

// SetNillableBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockTimelineID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockTimelineID(*id)
	}
	return _u
}

// SetBlockTimeline sets the "block_timeline" edge to the BlockTimeline entity.
func (_u *ContentBlockUpdate) SetBlockTimeline(v *BlockTimeline) *ContentBlockUpdate {
	return _u.SetBlockTimelineID(v.ID)
}

// SetBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID.
func (_u *ContentBlockUpdate) SetBlockContactFormID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockContactFormID(id)
	return _u
}

// SetNillableBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockContactFormID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockContactFormID(*id)
	}
	return _u
}

// SetBlockContactForm sets the "block_contact_form" edge to the BlockContactForm entity.
func (_u *ContentBlockUpdate) SetBlockContactForm(v *BlockContactForm) *ContentBlockUpdate {
	return _u.SetBlockContactFormID(v.ID)
}

// SetBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID.
func (_u *ContentBlockUpdate) SetBlockVideoEmbedID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockVideoEmbedID(id)
	return _u
}

// SetNillableBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockVideoEmbedID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockVideoEmbedID(*id)
	}
	return _u
}

// SetBlockVideoEmbed sets the "block_video_embed" edge to the BlockVideoEmbed entity.
func (_u *ContentBlockUpdate) SetBlockVideoEmbed(v *BlockVideoEmbed) *ContentBlockUpdate {
	return _u.SetBlockVideoEmbedID(v.ID)
}

// SetBlockMapID sets the "block_map" edge to the BlockMap entity by ID.
func (_u *ContentBlockUpdate) SetBlockMapID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockMapID(id)
	return _u
}

// SetNillableBlockMapID sets the "block_map" edge to the BlockMap entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockMapID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockMapID(*id)
	}
	return _u
}

// SetBlockMap sets the "block_map" edge to the BlockMap entity.
func (_u *ContentBlockUpdate) SetBlockMap(v *BlockMap) *ContentBlockUpdate {
	return _u.SetBlockMapID(v.ID)
}

// SetBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID.
func (_u *ContentBlockUpdate) SetBlockAccordionID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockAccordionID(id)
	return _u
}

// SetNillableBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockAccordionID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockAccordionID(*id)
	}
	return _u
}

// SetBlockAccordion sets the "block_accordion" edge to the BlockAccordion entity.
func (_u *ContentBlockUpdate) SetBlockAccordion(v *BlockAccordion) *ContentBlockUpdate {
	return _u.SetBlockAccordionID(v.ID)
}

// SetBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID.
func (_u *ContentBlockUpdate) SetBlockTabsID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockTabsID(id)
	return _u
}

// SetNillableBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockTabsID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockTabsID(*id)
	}
	return _u
}

// SetBlockTabs sets the "block_tabs" edge to the BlockTabs entity.
func (_u *ContentBlockUpdate) SetBlockTabs(v *BlockTabs) *ContentBlockUpdate {
	return _u.SetBlockTabsID(v.ID)
}

// SetBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID.
func (_u *ContentBlockUpdate) SetBlockDividerID(id int) *ContentBlockUpdate {
	_u.mutation.SetBlockDividerID(id)
	return _u
}

// SetNillableBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID if the given value is not nil.
func (_u *ContentBlockUpdate) SetNillableBlockDividerID(id *int) *ContentBlockUpdate {
	if id != nil {
		_u = _u.SetBlockDividerID(*id)
	}
	return _u
}

// SetBlockDivider sets the "block_divider" edge to the BlockDivider entity.
func (_u *ContentBlockUpdate) SetBlockDivider(v *BlockDivider) *ContentBlockUpdate {
	return _u.SetBlockDividerID(v.ID)
}

// Mutation returns the ContentBlockMutation object of the builder.
func (_u *ContentBlockUpdate) Mutation() *ContentBlockMutation {
	return _u.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (_u *ContentBlockUpdate) ClearPage() *ContentBlockUpdate {
	_u.mutation.ClearPage()
	return _u
}

// ClearBlockHero clears the "block_hero" edge to the BlockHero entity.
func (_u *ContentBlockUpdate) ClearBlockHero() *ContentBlockUpdate {
	_u.mutation.ClearBlockHero()
	return _u
}

// ClearBlockTextContent clears the "block_text_content" edge to the BlockTextContent entity.
func (_u *ContentBlockUpdate) ClearBlockTextContent() *ContentBlockUpdate {
	_u.mutation.ClearBlockTextContent()
	return _u
}

// ClearBlockFaq clears the "block_faq" edge to the BlockFaq entity.
func (_u *ContentBlockUpdate) ClearBlockFaq() *ContentBlockUpdate {
	_u.mutation.ClearBlockFaq()
	return _u
}

// ClearBlockCta clears the "block_cta" edge to the BlockCta entity.
func (_u *ContentBlockUpdate) ClearBlockCta() *ContentBlockUpdate {
	_u.mutation.ClearBlockCta()
	return _u
}

// ClearBlockTestimonials clears the "block_testimonials" edge to the BlockTestimonials entity.
func (_u *ContentBlockUpdate) ClearBlockTestimonials() *ContentBlockUpdate {
	_u.mutation.ClearBlockTestimonials()
	return _u
}

// ClearBlockStats clears the "block_stats" edge to the BlockStats entity.
func (_u *ContentBlockUpdate) ClearBlockStats() *ContentBlockUpdate {
	_u.mutation.ClearBlockStats()
	return _u
}

// ClearBlockGallery clears the "block_gallery" edge to the BlockGallery entity.
func (_u *ContentBlockUpdate) ClearBlockGallery() *ContentBlockUpdate {
	_u.mutation.ClearBlockGallery()
	return _u
}

// ClearBlockProgramCards clears the "block_program_cards" edge to the BlockProgramCards entity.
func (_u *ContentBlockUpdate) ClearBlockProgramCards() *ContentBlockUpdate {
	_u.mutation.ClearBlockProgramCards()
	return _u
}

// ClearBlockSuccessStories clears the "block_success_stories" edge to the BlockSuccessStories entity.
func (_u *ContentBlockUpdate) ClearBlockSuccessStories() *ContentBlockUpdate {
	_u.mutation.ClearBlockSuccessStories()
	return _u
}

// ClearBlockDonationForm clears the "block_donation_form" edge to the BlockDonationForm entity.
func (_u *ContentBlockUpdate) ClearBlockDonationForm() *ContentBlockUpdate {
	_u.mutation.ClearBlockDonationForm()
	return _u
}

// ClearBlockVolunteerSignup clears the "block_volunteer_signup" edge to the BlockVolunteerSignup entity.
func (_u *ContentBlockUpdate) ClearBlockVolunteerSignup() *ContentBlockUpdate {
	_u.mutation.ClearBlockVolunteerSignup()
	return _u
}

// ClearBlockNewsletterSignup clears the "block_newsletter_signup" edge to the BlockNewsletterSignup entity.
func (_u *ContentBlockUpdate) ClearBlockNewsletterSignup() *ContentBlockUpdate {
	_u.mutation.ClearBlockNewsletterSignup()
	return _u
}

// ClearBlockPartnerLogos clears the "block_partner_logos" edge to the BlockPartnerLogos entity.
func (_u *ContentBlockUpdate) ClearBlockPartnerLogos() *ContentBlockUpdate {
	_u.mutation.ClearBlockPartnerLogos()
	return _u
}

// ClearBlockTeamGrid clears the "block_team_grid" edge to the BlockTeamGrid entity.
func (_u *ContentBlockUpdate) ClearBlockTeamGrid() *ContentBlockUpdate {
	_u.mutation.ClearBlockTeamGrid()
	return _u
}

// ClearBlockTimeline clears the "block_timeline" edge to the BlockTimeline entity.
func (_u *ContentBlockUpdate) ClearBlockTimeline() *ContentBlockUpdate {
	_u.mutation.ClearBlockTimeline()
	return _u
}

// ClearBlockContactForm clears the "block_contact_form" edge to the BlockContactForm entity.
func (_u *ContentBlockUpdate) ClearBlockContactForm() *ContentBlockUpdate {
	_u.mutation.ClearBlockContactForm()
	return _u
}

// ClearBlockVideoEmbed clears the "block_video_embed" edge to the BlockVideoEmbed entity.
func (_u *ContentBlockUpdate) ClearBlockVideoEmbed() *ContentBlockUpdate {
	_u.mutation.ClearBlockVideoEmbed()
	return _u
}

// ClearBlockMap clears the "block_map" edge to the BlockMap entity.
func (_u *ContentBlockUpdate) ClearBlockMap() *ContentBlockUpdate {
	_u.mutation.ClearBlockMap()
	return _u
}

// ClearBlockAccordion clears the "block_accordion" edge to the BlockAccordion entity.
func (_u *ContentBlockUpdate) ClearBlockAccordion() *ContentBlockUpdate {
	_u.mutation.ClearBlockAccordion()
	return _u
}

// ClearBlockTabs clears the "block_tabs" edge to the BlockTabs entity.
func (_u *ContentBlockUpdate) ClearBlockTabs() *ContentBlockUpdate {
	_u.mutation.ClearBlockTabs()
	return _u
}

// ClearBlockDivider clears the "block_divider" edge to the BlockDivider entity.
func (_u *ContentBlockUpdate) ClearBlockDivider() *ContentBlockUpdate {
	_u.mutation.ClearBlockDivider()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ContentBlockUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ContentBlockUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ContentBlockUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ContentBlockUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ContentBlockUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := contentblock.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ContentBlockUpdate) check() error {
	if v, ok := _u.mutation.BlockType(); ok {
		if err := contentblock.BlockTypeValidator(v); err != nil {
			return &ValidationError{Name: "block_type", err: fmt.Errorf(`ent: validator failed for field "ContentBlock.block_type": %w`, err)}
		}
	}
	if _u.mutation.PageCleared() && len(_u.mutation.PageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContentBlock.page"`)
	}
	return nil
}

func (_u *ContentBlockUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentblock.Table, contentblock.Columns, sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(contentblock.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(contentblock.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BlockType(); ok {
		_spec.SetField(contentblock.FieldBlockType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(contentblock.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(contentblock.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsVisible(); ok {
		_spec.SetField(contentblock.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnMobile(); ok {
		_spec.SetField(contentblock.FieldHideOnMobile, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnTablet(); ok {
		_spec.SetField(contentblock.FieldHideOnTablet, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnDesktop(); ok {
		_spec.SetField(contentblock.FieldHideOnDesktop, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(contentblock.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockHeroCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockHeroIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTextContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTextContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockFaqCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockFaqIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockCtaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockCtaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockGalleryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockGalleryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockProgramCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockProgramCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockSuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockSuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockDonationFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockDonationFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockVolunteerSignupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockVolunteerSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockNewsletterSignupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockNewsletterSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockPartnerLogosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockPartnerLogosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTeamGridCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTeamGridIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockContactFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockContactFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockVideoEmbedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockVideoEmbedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockMapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockMapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockAccordionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockaccordion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockAccordionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockaccordion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockDividerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockDividerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ContentBlockUpdateOne is the builder for updating a single ContentBlock entity.
type ContentBlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentBlockMutation
}

// SetOrder sets the "order" field.
func (_u *ContentBlockUpdateOne) SetOrder(v int) *ContentBlockUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableOrder(v *int) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *ContentBlockUpdateOne) AddOrder(v int) *ContentBlockUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetBlockType sets the "block_type" field.
func (_u *ContentBlockUpdateOne) SetBlockType(v contentblock.BlockType) *ContentBlockUpdateOne {
	_u.mutation.SetBlockType(v)
	return _u
}

// SetNillableBlockType sets the "block_type" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockType(v *contentblock.BlockType) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetBlockType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *ContentBlockUpdateOne) SetConfig(v map[string]interface{}) *ContentBlockUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *ContentBlockUpdateOne) ClearConfig() *ContentBlockUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// SetIsVisible sets the "is_visible" field.
func (_u *ContentBlockUpdateOne) SetIsVisible(v bool) *ContentBlockUpdateOne {
	_u.mutation.SetIsVisible(v)
	return _u
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableIsVisible(v *bool) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetIsVisible(*v)
	}
	return _u
}

// SetHideOnMobile sets the "hide_on_mobile" field.
func (_u *ContentBlockUpdateOne) SetHideOnMobile(v bool) *ContentBlockUpdateOne {
	_u.mutation.SetHideOnMobile(v)
	return _u
}

// SetNillableHideOnMobile sets the "hide_on_mobile" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableHideOnMobile(v *bool) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetHideOnMobile(*v)
	}
	return _u
}

// SetHideOnTablet sets the "hide_on_tablet" field.
func (_u *ContentBlockUpdateOne) SetHideOnTablet(v bool) *ContentBlockUpdateOne {
	_u.mutation.SetHideOnTablet(v)
	return _u
}

// SetNillableHideOnTablet sets the "hide_on_tablet" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableHideOnTablet(v *bool) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetHideOnTablet(*v)
	}
	return _u
}

// SetHideOnDesktop sets the "hide_on_desktop" field.
func (_u *ContentBlockUpdateOne) SetHideOnDesktop(v bool) *ContentBlockUpdateOne {
	_u.mutation.SetHideOnDesktop(v)
	return _u
}

// SetNillableHideOnDesktop sets the "hide_on_desktop" field if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableHideOnDesktop(v *bool) *ContentBlockUpdateOne {
	if v != nil {
		_u.SetHideOnDesktop(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ContentBlockUpdateOne) SetUpdatedAt(v time.Time) *ContentBlockUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_u *ContentBlockUpdateOne) SetPageID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetPageID(id)
	return _u
}

// SetPage sets the "page" edge to the Page entity.
func (_u *ContentBlockUpdateOne) SetPage(v *Page) *ContentBlockUpdateOne {
	return _u.SetPageID(v.ID)
}

// SetBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockHeroID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockHeroID(id)
	return _u
}

// SetNillableBlockHeroID sets the "block_hero" edge to the BlockHero entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockHeroID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockHeroID(*id)
	}
	return _u
}

// SetBlockHero sets the "block_hero" edge to the BlockHero entity.
func (_u *ContentBlockUpdateOne) SetBlockHero(v *BlockHero) *ContentBlockUpdateOne {
	return _u.SetBlockHeroID(v.ID)
}

// SetBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockTextContentID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockTextContentID(id)
	return _u
}

// SetNillableBlockTextContentID sets the "block_text_content" edge to the BlockTextContent entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockTextContentID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockTextContentID(*id)
	}
	return _u
}

// SetBlockTextContent sets the "block_text_content" edge to the BlockTextContent entity.
func (_u *ContentBlockUpdateOne) SetBlockTextContent(v *BlockTextContent) *ContentBlockUpdateOne {
	return _u.SetBlockTextContentID(v.ID)
}

// SetBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockFaqID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockFaqID(id)
	return _u
}

// SetNillableBlockFaqID sets the "block_faq" edge to the BlockFaq entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockFaqID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockFaqID(*id)
	}
	return _u
}

// SetBlockFaq sets the "block_faq" edge to the BlockFaq entity.
func (_u *ContentBlockUpdateOne) SetBlockFaq(v *BlockFaq) *ContentBlockUpdateOne {
	return _u.SetBlockFaqID(v.ID)
}

// SetBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockCtaID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockCtaID(id)
	return _u
}

// SetNillableBlockCtaID sets the "block_cta" edge to the BlockCta entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockCtaID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockCtaID(*id)
	}
	return _u
}

// SetBlockCta sets the "block_cta" edge to the BlockCta entity.
func (_u *ContentBlockUpdateOne) SetBlockCta(v *BlockCta) *ContentBlockUpdateOne {
	return _u.SetBlockCtaID(v.ID)
}

// SetBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockTestimonialsID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockTestimonialsID(id)
	return _u
}

// SetNillableBlockTestimonialsID sets the "block_testimonials" edge to the BlockTestimonials entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockTestimonialsID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockTestimonialsID(*id)
	}
	return _u
}

// SetBlockTestimonials sets the "block_testimonials" edge to the BlockTestimonials entity.
func (_u *ContentBlockUpdateOne) SetBlockTestimonials(v *BlockTestimonials) *ContentBlockUpdateOne {
	return _u.SetBlockTestimonialsID(v.ID)
}

// SetBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockStatsID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockStatsID(id)
	return _u
}

// SetNillableBlockStatsID sets the "block_stats" edge to the BlockStats entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockStatsID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockStatsID(*id)
	}
	return _u
}

// SetBlockStats sets the "block_stats" edge to the BlockStats entity.
func (_u *ContentBlockUpdateOne) SetBlockStats(v *BlockStats) *ContentBlockUpdateOne {
	return _u.SetBlockStatsID(v.ID)
}

// SetBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockGalleryID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockGalleryID(id)
	return _u
}

// SetNillableBlockGalleryID sets the "block_gallery" edge to the BlockGallery entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockGalleryID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockGalleryID(*id)
	}
	return _u
}

// SetBlockGallery sets the "block_gallery" edge to the BlockGallery entity.
func (_u *ContentBlockUpdateOne) SetBlockGallery(v *BlockGallery) *ContentBlockUpdateOne {
	return _u.SetBlockGalleryID(v.ID)
}

// SetBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockProgramCardsID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockProgramCardsID(id)
	return _u
}

// SetNillableBlockProgramCardsID sets the "block_program_cards" edge to the BlockProgramCards entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockProgramCardsID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockProgramCardsID(*id)
	}
	return _u
}

// SetBlockProgramCards sets the "block_program_cards" edge to the BlockProgramCards entity.
func (_u *ContentBlockUpdateOne) SetBlockProgramCards(v *BlockProgramCards) *ContentBlockUpdateOne {
	return _u.SetBlockProgramCardsID(v.ID)
}

// SetBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockSuccessStoriesID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockSuccessStoriesID(id)
	return _u
}

// SetNillableBlockSuccessStoriesID sets the "block_success_stories" edge to the BlockSuccessStories entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockSuccessStoriesID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockSuccessStoriesID(*id)
	}
	return _u
}

// SetBlockSuccessStories sets the "block_success_stories" edge to the BlockSuccessStories entity.
func (_u *ContentBlockUpdateOne) SetBlockSuccessStories(v *BlockSuccessStories) *ContentBlockUpdateOne {
	return _u.SetBlockSuccessStoriesID(v.ID)
}

// SetBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockDonationFormID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockDonationFormID(id)
	return _u
}

// SetNillableBlockDonationFormID sets the "block_donation_form" edge to the BlockDonationForm entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockDonationFormID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockDonationFormID(*id)
	}
	return _u
}

// SetBlockDonationForm sets the "block_donation_form" edge to the BlockDonationForm entity.
func (_u *ContentBlockUpdateOne) SetBlockDonationForm(v *BlockDonationForm) *ContentBlockUpdateOne {
	return _u.SetBlockDonationFormID(v.ID)
}

// SetBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockVolunteerSignupID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockVolunteerSignupID(id)
	return _u
}

// SetNillableBlockVolunteerSignupID sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockVolunteerSignupID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockVolunteerSignupID(*id)
	}
	return _u
}

// SetBlockVolunteerSignup sets the "block_volunteer_signup" edge to the BlockVolunteerSignup entity.
func (_u *ContentBlockUpdateOne) SetBlockVolunteerSignup(v *BlockVolunteerSignup) *ContentBlockUpdateOne {
	return _u.SetBlockVolunteerSignupID(v.ID)
}

// SetBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockNewsletterSignupID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockNewsletterSignupID(id)
	return _u
}

// SetNillableBlockNewsletterSignupID sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockNewsletterSignupID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockNewsletterSignupID(*id)
	}
	return _u
}

// SetBlockNewsletterSignup sets the "block_newsletter_signup" edge to the BlockNewsletterSignup entity.
func (_u *ContentBlockUpdateOne) SetBlockNewsletterSignup(v *BlockNewsletterSignup) *ContentBlockUpdateOne {
	return _u.SetBlockNewsletterSignupID(v.ID)
}

// SetBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockPartnerLogosID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockPartnerLogosID(id)
	return _u
}

// SetNillableBlockPartnerLogosID sets the "block_partner_logos" edge to the BlockPartnerLogos entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockPartnerLogosID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockPartnerLogosID(*id)
	}
	return _u
}

// SetBlockPartnerLogos sets the "block_partner_logos" edge to the BlockPartnerLogos entity.
func (_u *ContentBlockUpdateOne) SetBlockPartnerLogos(v *BlockPartnerLogos) *ContentBlockUpdateOne {
	return _u.SetBlockPartnerLogosID(v.ID)
}

// SetBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockTeamGridID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockTeamGridID(id)
	return _u
}

// SetNillableBlockTeamGridID sets the "block_team_grid" edge to the BlockTeamGrid entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockTeamGridID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockTeamGridID(*id)
	}
	return _u
}

// SetBlockTeamGrid sets the "block_team_grid" edge to the BlockTeamGrid entity.
func (_u *ContentBlockUpdateOne) SetBlockTeamGrid(v *BlockTeamGrid) *ContentBlockUpdateOne {
	return _u.SetBlockTeamGridID(v.ID)
}

// SetBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockTimelineID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockTimelineID(id)
	return _u
}

// SetNillableBlockTimelineID sets the "block_timeline" edge to the BlockTimeline entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockTimelineID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockTimelineID(*id)
	}
	return _u
}

// SetBlockTimeline sets the "block_timeline" edge to the BlockTimeline entity.
func (_u *ContentBlockUpdateOne) SetBlockTimeline(v *BlockTimeline) *ContentBlockUpdateOne {
	return _u.SetBlockTimelineID(v.ID)
}

// SetBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockContactFormID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockContactFormID(id)
	return _u
}

// SetNillableBlockContactFormID sets the "block_contact_form" edge to the BlockContactForm entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockContactFormID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockContactFormID(*id)
	}
	return _u
}

// SetBlockContactForm sets the "block_contact_form" edge to the BlockContactForm entity.
func (_u *ContentBlockUpdateOne) SetBlockContactForm(v *BlockContactForm) *ContentBlockUpdateOne {
	return _u.SetBlockContactFormID(v.ID)
}

// SetBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockVideoEmbedID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockVideoEmbedID(id)
	return _u
}

// SetNillableBlockVideoEmbedID sets the "block_video_embed" edge to the BlockVideoEmbed entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockVideoEmbedID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockVideoEmbedID(*id)
	}
	return _u
}

// SetBlockVideoEmbed sets the "block_video_embed" edge to the BlockVideoEmbed entity.
func (_u *ContentBlockUpdateOne) SetBlockVideoEmbed(v *BlockVideoEmbed) *ContentBlockUpdateOne {
	return _u.SetBlockVideoEmbedID(v.ID)
}

// SetBlockMapID sets the "block_map" edge to the BlockMap entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockMapID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockMapID(id)
	return _u
}

// SetNillableBlockMapID sets the "block_map" edge to the BlockMap entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockMapID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockMapID(*id)
	}
	return _u
}

// SetBlockMap sets the "block_map" edge to the BlockMap entity.
func (_u *ContentBlockUpdateOne) SetBlockMap(v *BlockMap) *ContentBlockUpdateOne {
	return _u.SetBlockMapID(v.ID)
}

// SetBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockAccordionID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockAccordionID(id)
	return _u
}

// SetNillableBlockAccordionID sets the "block_accordion" edge to the BlockAccordion entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockAccordionID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockAccordionID(*id)
	}
	return _u
}

// SetBlockAccordion sets the "block_accordion" edge to the BlockAccordion entity.
func (_u *ContentBlockUpdateOne) SetBlockAccordion(v *BlockAccordion) *ContentBlockUpdateOne {
	return _u.SetBlockAccordionID(v.ID)
}

// SetBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockTabsID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockTabsID(id)
	return _u
}

// SetNillableBlockTabsID sets the "block_tabs" edge to the BlockTabs entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockTabsID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockTabsID(*id)
	}
	return _u
}

// SetBlockTabs sets the "block_tabs" edge to the BlockTabs entity.
func (_u *ContentBlockUpdateOne) SetBlockTabs(v *BlockTabs) *ContentBlockUpdateOne {
	return _u.SetBlockTabsID(v.ID)
}

// SetBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID.
func (_u *ContentBlockUpdateOne) SetBlockDividerID(id int) *ContentBlockUpdateOne {
	_u.mutation.SetBlockDividerID(id)
	return _u
}

// SetNillableBlockDividerID sets the "block_divider" edge to the BlockDivider entity by ID if the given value is not nil.
func (_u *ContentBlockUpdateOne) SetNillableBlockDividerID(id *int) *ContentBlockUpdateOne {
	if id != nil {
		_u = _u.SetBlockDividerID(*id)
	}
	return _u
}

// SetBlockDivider sets the "block_divider" edge to the BlockDivider entity.
func (_u *ContentBlockUpdateOne) SetBlockDivider(v *BlockDivider) *ContentBlockUpdateOne {
	return _u.SetBlockDividerID(v.ID)
}

// Mutation returns the ContentBlockMutation object of the builder.
func (_u *ContentBlockUpdateOne) Mutation() *ContentBlockMutation {
	return _u.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (_u *ContentBlockUpdateOne) ClearPage() *ContentBlockUpdateOne {
	_u.mutation.ClearPage()
	return _u
}

// ClearBlockHero clears the "block_hero" edge to the BlockHero entity.
func (_u *ContentBlockUpdateOne) ClearBlockHero() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockHero()
	return _u
}

// ClearBlockTextContent clears the "block_text_content" edge to the BlockTextContent entity.
func (_u *ContentBlockUpdateOne) ClearBlockTextContent() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockTextContent()
	return _u
}

// ClearBlockFaq clears the "block_faq" edge to the BlockFaq entity.
func (_u *ContentBlockUpdateOne) ClearBlockFaq() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockFaq()
	return _u
}

// ClearBlockCta clears the "block_cta" edge to the BlockCta entity.
func (_u *ContentBlockUpdateOne) ClearBlockCta() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockCta()
	return _u
}

// ClearBlockTestimonials clears the "block_testimonials" edge to the BlockTestimonials entity.
func (_u *ContentBlockUpdateOne) ClearBlockTestimonials() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockTestimonials()
	return _u
}

// ClearBlockStats clears the "block_stats" edge to the BlockStats entity.
func (_u *ContentBlockUpdateOne) ClearBlockStats() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockStats()
	return _u
}

// ClearBlockGallery clears the "block_gallery" edge to the BlockGallery entity.
func (_u *ContentBlockUpdateOne) ClearBlockGallery() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockGallery()
	return _u
}

// ClearBlockProgramCards clears the "block_program_cards" edge to the BlockProgramCards entity.
func (_u *ContentBlockUpdateOne) ClearBlockProgramCards() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockProgramCards()
	return _u
}

// ClearBlockSuccessStories clears the "block_success_stories" edge to the BlockSuccessStories entity.
func (_u *ContentBlockUpdateOne) ClearBlockSuccessStories() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockSuccessStories()
	return _u
}

// ClearBlockDonationForm clears the "block_donation_form" edge to the BlockDonationForm entity.
func (_u *ContentBlockUpdateOne) ClearBlockDonationForm() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockDonationForm()
	return _u
}

// ClearBlockVolunteerSignup clears the "block_volunteer_signup" edge to the BlockVolunteerSignup entity.
func (_u *ContentBlockUpdateOne) ClearBlockVolunteerSignup() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockVolunteerSignup()
	return _u
}

// ClearBlockNewsletterSignup clears the "block_newsletter_signup" edge to the BlockNewsletterSignup entity.
func (_u *ContentBlockUpdateOne) ClearBlockNewsletterSignup() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockNewsletterSignup()
	return _u
}

// ClearBlockPartnerLogos clears the "block_partner_logos" edge to the BlockPartnerLogos entity.
func (_u *ContentBlockUpdateOne) ClearBlockPartnerLogos() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockPartnerLogos()
	return _u
}

// ClearBlockTeamGrid clears the "block_team_grid" edge to the BlockTeamGrid entity.
func (_u *ContentBlockUpdateOne) ClearBlockTeamGrid() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockTeamGrid()
	return _u
}

// ClearBlockTimeline clears the "block_timeline" edge to the BlockTimeline entity.
func (_u *ContentBlockUpdateOne) ClearBlockTimeline() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockTimeline()
	return _u
}

// ClearBlockContactForm clears the "block_contact_form" edge to the BlockContactForm entity.
func (_u *ContentBlockUpdateOne) ClearBlockContactForm() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockContactForm()
	return _u
}

// ClearBlockVideoEmbed clears the "block_video_embed" edge to the BlockVideoEmbed entity.
func (_u *ContentBlockUpdateOne) ClearBlockVideoEmbed() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockVideoEmbed()
	return _u
}

// ClearBlockMap clears the "block_map" edge to the BlockMap entity.
func (_u *ContentBlockUpdateOne) ClearBlockMap() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockMap()
	return _u
}

// ClearBlockAccordion clears the "block_accordion" edge to the BlockAccordion entity.
func (_u *ContentBlockUpdateOne) ClearBlockAccordion() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockAccordion()
	return _u
}

// ClearBlockTabs clears the "block_tabs" edge to the BlockTabs entity.
func (_u *ContentBlockUpdateOne) ClearBlockTabs() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockTabs()
	return _u
}

// ClearBlockDivider clears the "block_divider" edge to the BlockDivider entity.
func (_u *ContentBlockUpdateOne) ClearBlockDivider() *ContentBlockUpdateOne {
	_u.mutation.ClearBlockDivider()
	return _u
}

// Where appends a list predicates to the ContentBlockUpdate builder.
func (_u *ContentBlockUpdateOne) Where(ps ...predicate.ContentBlock) *ContentBlockUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ContentBlockUpdateOne) Select(field string, fields ...string) *ContentBlockUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ContentBlock entity.
func (_u *ContentBlockUpdateOne) Save(ctx context.Context) (*ContentBlock, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ContentBlockUpdateOne) SaveX(ctx context.Context) *ContentBlock {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ContentBlockUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ContentBlockUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ContentBlockUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := contentblock.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ContentBlockUpdateOne) check() error {
	if v, ok := _u.mutation.BlockType(); ok {
		if err := contentblock.BlockTypeValidator(v); err != nil {
			return &ValidationError{Name: "block_type", err: fmt.Errorf(`ent: validator failed for field "ContentBlock.block_type": %w`, err)}
		}
	}
	if _u.mutation.PageCleared() && len(_u.mutation.PageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContentBlock.page"`)
	}
	return nil
}

func (_u *ContentBlockUpdateOne) sqlSave(ctx context.Context) (_node *ContentBlock, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentblock.Table, contentblock.Columns, sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContentBlock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contentblock.FieldID)
		for _, f := range fields {
			if !contentblock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contentblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(contentblock.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(contentblock.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BlockType(); ok {
		_spec.SetField(contentblock.FieldBlockType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(contentblock.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(contentblock.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsVisible(); ok {
		_spec.SetField(contentblock.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnMobile(); ok {
		_spec.SetField(contentblock.FieldHideOnMobile, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnTablet(); ok {
		_spec.SetField(contentblock.FieldHideOnTablet, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideOnDesktop(); ok {
		_spec.SetField(contentblock.FieldHideOnDesktop, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(contentblock.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockHeroCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockHeroIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTextContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTextContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktextcontent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockFaqCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockFaqIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockCtaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockCtaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktestimonials.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockGalleryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockGalleryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockProgramCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockProgramCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockSuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockSuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockDonationFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockDonationFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockVolunteerSignupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockVolunteerSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvolunteersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockNewsletterSignupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockNewsletterSignupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockPartnerLogosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockPartnerLogosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTeamGridCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTeamGridIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockContactFormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockContactFormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockVideoEmbedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockVideoEmbedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockMapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockMapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockAccordionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockaccordion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockAccordionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockaccordion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockTabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockTabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockDividerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockDividerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContentBlock{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
