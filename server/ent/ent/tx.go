// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// AccordionItem is the client for interacting with the AccordionItem builders.
	AccordionItem *AccordionItemClient
	// ActionItem is the client for interacting with the ActionItem builders.
	ActionItem *ActionItemClient
	// ActivityLog is the client for interacting with the ActivityLog builders.
	ActivityLog *ActivityLogClient
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// Agenda is the client for interacting with the Agenda builders.
	Agenda *AgendaClient
	// AgendaItem is the client for interacting with the AgendaItem builders.
	AgendaItem *AgendaItemClient
	// AnalyticsDashboard is the client for interacting with the AnalyticsDashboard builders.
	AnalyticsDashboard *AnalyticsDashboardClient
	// AnalyticsEvent is the client for interacting with the AnalyticsEvent builders.
	AnalyticsEvent *AnalyticsEventClient
	// AppSetting is the client for interacting with the AppSetting builders.
	AppSetting *AppSettingClient
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Badge is the client for interacting with the Badge builders.
	Badge *BadgeClient
	// Ballot is the client for interacting with the Ballot builders.
	Ballot *BallotClient
	// BlockAccordion is the client for interacting with the BlockAccordion builders.
	BlockAccordion *BlockAccordionClient
	// BlockContactForm is the client for interacting with the BlockContactForm builders.
	BlockContactForm *BlockContactFormClient
	// BlockCta is the client for interacting with the BlockCta builders.
	BlockCta *BlockCtaClient
	// BlockDivider is the client for interacting with the BlockDivider builders.
	BlockDivider *BlockDividerClient
	// BlockDonationForm is the client for interacting with the BlockDonationForm builders.
	BlockDonationForm *BlockDonationFormClient
	// BlockFaq is the client for interacting with the BlockFaq builders.
	BlockFaq *BlockFaqClient
	// BlockGallery is the client for interacting with the BlockGallery builders.
	BlockGallery *BlockGalleryClient
	// BlockHero is the client for interacting with the BlockHero builders.
	BlockHero *BlockHeroClient
	// BlockMap is the client for interacting with the BlockMap builders.
	BlockMap *BlockMapClient
	// BlockNewsletterSignup is the client for interacting with the BlockNewsletterSignup builders.
	BlockNewsletterSignup *BlockNewsletterSignupClient
	// BlockPartnerLogos is the client for interacting with the BlockPartnerLogos builders.
	BlockPartnerLogos *BlockPartnerLogosClient
	// BlockProgramCards is the client for interacting with the BlockProgramCards builders.
	BlockProgramCards *BlockProgramCardsClient
	// BlockStats is the client for interacting with the BlockStats builders.
	BlockStats *BlockStatsClient
	// BlockSuccessStories is the client for interacting with the BlockSuccessStories builders.
	BlockSuccessStories *BlockSuccessStoriesClient
	// BlockTabs is the client for interacting with the BlockTabs builders.
	BlockTabs *BlockTabsClient
	// BlockTeamGrid is the client for interacting with the BlockTeamGrid builders.
	BlockTeamGrid *BlockTeamGridClient
	// BlockTestimonials is the client for interacting with the BlockTestimonials builders.
	BlockTestimonials *BlockTestimonialsClient
	// BlockTextContent is the client for interacting with the BlockTextContent builders.
	BlockTextContent *BlockTextContentClient
	// BlockTimeline is the client for interacting with the BlockTimeline builders.
	BlockTimeline *BlockTimelineClient
	// BlockVideoEmbed is the client for interacting with the BlockVideoEmbed builders.
	BlockVideoEmbed *BlockVideoEmbedClient
	// BlockVolunteerSignup is the client for interacting with the BlockVolunteerSignup builders.
	BlockVolunteerSignup *BlockVolunteerSignupClient
	// BrandBenefit is the client for interacting with the BrandBenefit builders.
	BrandBenefit *BrandBenefitClient
	// BrandConfig is the client for interacting with the BrandConfig builders.
	BrandConfig *BrandConfigClient
	// ContentBlock is the client for interacting with the ContentBlock builders.
	ContentBlock *ContentBlockClient
	// Conversation is the client for interacting with the Conversation builders.
	Conversation *ConversationClient
	// ConversationParticipant is the client for interacting with the ConversationParticipant builders.
	ConversationParticipant *ConversationParticipantClient
	// DashboardWidget is the client for interacting with the DashboardWidget builders.
	DashboardWidget *DashboardWidgetClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// DocumentCategory is the client for interacting with the DocumentCategory builders.
	DocumentCategory *DocumentCategoryClient
	// Donation is the client for interacting with the Donation builders.
	Donation *DonationClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventRegistration is the client for interacting with the EventRegistration builders.
	EventRegistration *EventRegistrationClient
	// FaqItem is the client for interacting with the FaqItem builders.
	FaqItem *FaqItemClient
	// FeatureFlag is the client for interacting with the FeatureFlag builders.
	FeatureFlag *FeatureFlagClient
	// FundraisingCampaign is the client for interacting with the FundraisingCampaign builders.
	FundraisingCampaign *FundraisingCampaignClient
	// GalleryImage is the client for interacting with the GalleryImage builders.
	GalleryImage *GalleryImageClient
	// GeneratedReport is the client for interacting with the GeneratedReport builders.
	GeneratedReport *GeneratedReportClient
	// Grant is the client for interacting with the Grant builders.
	Grant *GrantClient
	// GrantReport is the client for interacting with the GrantReport builders.
	GrantReport *GrantReportClient
	// ImpactDataPoint is the client for interacting with the ImpactDataPoint builders.
	ImpactDataPoint *ImpactDataPointClient
	// ImpactMetric is the client for interacting with the ImpactMetric builders.
	ImpactMetric *ImpactMetricClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobLog is the client for interacting with the JobLog builders.
	JobLog *JobLogClient
	// MentorshipRequest is the client for interacting with the MentorshipRequest builders.
	MentorshipRequest *MentorshipRequestClient
	// MentorshipSession is the client for interacting with the MentorshipSession builders.
	MentorshipSession *MentorshipSessionClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// NewsArticle is the client for interacting with the NewsArticle builders.
	NewsArticle *NewsArticleClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// Page is the client for interacting with the Page builders.
	Page *PageClient
	// PartnerLogoItem is the client for interacting with the PartnerLogoItem builders.
	PartnerLogoItem *PartnerLogoItemClient
	// Partnership is the client for interacting with the Partnership builders.
	Partnership *PartnershipClient
	// PartnershipInteraction is the client for interacting with the PartnershipInteraction builders.
	PartnershipInteraction *PartnershipInteractionClient
	// PartnershipRenewal is the client for interacting with the PartnershipRenewal builders.
	PartnershipRenewal *PartnershipRenewalClient
	// PartnershipReport is the client for interacting with the PartnershipReport builders.
	PartnershipReport *PartnershipReportClient
	// PasswordHistory is the client for interacting with the PasswordHistory builders.
	PasswordHistory *PasswordHistoryClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Program is the client for interacting with the Program builders.
	Program *ProgramClient
	// ProgramCardItem is the client for interacting with the ProgramCardItem builders.
	ProgramCardItem *ProgramCardItemClient
	// ProgramCategory is the client for interacting with the ProgramCategory builders.
	ProgramCategory *ProgramCategoryClient
	// ProgramEnrolment is the client for interacting with the ProgramEnrolment builders.
	ProgramEnrolment *ProgramEnrolmentClient
	// ProgramParticipant is the client for interacting with the ProgramParticipant builders.
	ProgramParticipant *ProgramParticipantClient
	// ReportDefinition is the client for interacting with the ReportDefinition builders.
	ReportDefinition *ReportDefinitionClient
	// ReportPermission is the client for interacting with the ReportPermission builders.
	ReportPermission *ReportPermissionClient
	// RolePermission is the client for interacting with the RolePermission builders.
	RolePermission *RolePermissionClient
	// ScheduledReport is the client for interacting with the ScheduledReport builders.
	ScheduledReport *ScheduledReportClient
	// SeoConfig is the client for interacting with the SeoConfig builders.
	SeoConfig *SeoConfigClient
	// SiteVisit is the client for interacting with the SiteVisit builders.
	SiteVisit *SiteVisitClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// StatItem is the client for interacting with the StatItem builders.
	StatItem *StatItemClient
	// SuccessStory is the client for interacting with the SuccessStory builders.
	SuccessStory *SuccessStoryClient
	// SystemError is the client for interacting with the SystemError builders.
	SystemError *SystemErrorClient
	// SystemLog is the client for interacting with the SystemLog builders.
	SystemLog *SystemLogClient
	// TabItem is the client for interacting with the TabItem builders.
	TabItem *TabItemClient
	// TeamMember is the client for interacting with the TeamMember builders.
	TeamMember *TeamMemberClient
	// TeamMemberItem is the client for interacting with the TeamMemberItem builders.
	TeamMemberItem *TeamMemberItemClient
	// TestimonialItem is the client for interacting with the TestimonialItem builders.
	TestimonialItem *TestimonialItemClient
	// TimelineEvent is the client for interacting with the TimelineEvent builders.
	TimelineEvent *TimelineEventClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// TrustedDevice is the client for interacting with the TrustedDevice builders.
	TrustedDevice *TrustedDeviceClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAchievement is the client for interacting with the UserAchievement builders.
	UserAchievement *UserAchievementClient
	// UserConsent is the client for interacting with the UserConsent builders.
	UserConsent *UserConsentClient
	// UserOnboarding is the client for interacting with the UserOnboarding builders.
	UserOnboarding *UserOnboardingClient
	// UserProfile is the client for interacting with the UserProfile builders.
	UserProfile *UserProfileClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
	// UserSkill is the client for interacting with the UserSkill builders.
	UserSkill *UserSkillClient
	// VolunteerApplication is the client for interacting with the VolunteerApplication builders.
	VolunteerApplication *VolunteerApplicationClient
	// VolunteerAssignment is the client for interacting with the VolunteerAssignment builders.
	VolunteerAssignment *VolunteerAssignmentClient
	// VolunteerOpportunity is the client for interacting with the VolunteerOpportunity builders.
	VolunteerOpportunity *VolunteerOpportunityClient
	// Vote is the client for interacting with the Vote builders.
	Vote *VoteClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.AccordionItem = NewAccordionItemClient(tx.config)
	tx.ActionItem = NewActionItemClient(tx.config)
	tx.ActivityLog = NewActivityLogClient(tx.config)
	tx.Address = NewAddressClient(tx.config)
	tx.Agenda = NewAgendaClient(tx.config)
	tx.AgendaItem = NewAgendaItemClient(tx.config)
	tx.AnalyticsDashboard = NewAnalyticsDashboardClient(tx.config)
	tx.AnalyticsEvent = NewAnalyticsEventClient(tx.config)
	tx.AppSetting = NewAppSettingClient(tx.config)
	tx.AuditLog = NewAuditLogClient(tx.config)
	tx.Badge = NewBadgeClient(tx.config)
	tx.Ballot = NewBallotClient(tx.config)
	tx.BlockAccordion = NewBlockAccordionClient(tx.config)
	tx.BlockContactForm = NewBlockContactFormClient(tx.config)
	tx.BlockCta = NewBlockCtaClient(tx.config)
	tx.BlockDivider = NewBlockDividerClient(tx.config)
	tx.BlockDonationForm = NewBlockDonationFormClient(tx.config)
	tx.BlockFaq = NewBlockFaqClient(tx.config)
	tx.BlockGallery = NewBlockGalleryClient(tx.config)
	tx.BlockHero = NewBlockHeroClient(tx.config)
	tx.BlockMap = NewBlockMapClient(tx.config)
	tx.BlockNewsletterSignup = NewBlockNewsletterSignupClient(tx.config)
	tx.BlockPartnerLogos = NewBlockPartnerLogosClient(tx.config)
	tx.BlockProgramCards = NewBlockProgramCardsClient(tx.config)
	tx.BlockStats = NewBlockStatsClient(tx.config)
	tx.BlockSuccessStories = NewBlockSuccessStoriesClient(tx.config)
	tx.BlockTabs = NewBlockTabsClient(tx.config)
	tx.BlockTeamGrid = NewBlockTeamGridClient(tx.config)
	tx.BlockTestimonials = NewBlockTestimonialsClient(tx.config)
	tx.BlockTextContent = NewBlockTextContentClient(tx.config)
	tx.BlockTimeline = NewBlockTimelineClient(tx.config)
	tx.BlockVideoEmbed = NewBlockVideoEmbedClient(tx.config)
	tx.BlockVolunteerSignup = NewBlockVolunteerSignupClient(tx.config)
	tx.BrandBenefit = NewBrandBenefitClient(tx.config)
	tx.BrandConfig = NewBrandConfigClient(tx.config)
	tx.ContentBlock = NewContentBlockClient(tx.config)
	tx.Conversation = NewConversationClient(tx.config)
	tx.ConversationParticipant = NewConversationParticipantClient(tx.config)
	tx.DashboardWidget = NewDashboardWidgetClient(tx.config)
	tx.Document = NewDocumentClient(tx.config)
	tx.DocumentCategory = NewDocumentCategoryClient(tx.config)
	tx.Donation = NewDonationClient(tx.config)
	tx.Event = NewEventClient(tx.config)
	tx.EventRegistration = NewEventRegistrationClient(tx.config)
	tx.FaqItem = NewFaqItemClient(tx.config)
	tx.FeatureFlag = NewFeatureFlagClient(tx.config)
	tx.FundraisingCampaign = NewFundraisingCampaignClient(tx.config)
	tx.GalleryImage = NewGalleryImageClient(tx.config)
	tx.GeneratedReport = NewGeneratedReportClient(tx.config)
	tx.Grant = NewGrantClient(tx.config)
	tx.GrantReport = NewGrantReportClient(tx.config)
	tx.ImpactDataPoint = NewImpactDataPointClient(tx.config)
	tx.ImpactMetric = NewImpactMetricClient(tx.config)
	tx.Job = NewJobClient(tx.config)
	tx.JobLog = NewJobLogClient(tx.config)
	tx.MentorshipRequest = NewMentorshipRequestClient(tx.config)
	tx.MentorshipSession = NewMentorshipSessionClient(tx.config)
	tx.Message = NewMessageClient(tx.config)
	tx.NewsArticle = NewNewsArticleClient(tx.config)
	tx.Organization = NewOrganizationClient(tx.config)
	tx.Page = NewPageClient(tx.config)
	tx.PartnerLogoItem = NewPartnerLogoItemClient(tx.config)
	tx.Partnership = NewPartnershipClient(tx.config)
	tx.PartnershipInteraction = NewPartnershipInteractionClient(tx.config)
	tx.PartnershipRenewal = NewPartnershipRenewalClient(tx.config)
	tx.PartnershipReport = NewPartnershipReportClient(tx.config)
	tx.PasswordHistory = NewPasswordHistoryClient(tx.config)
	tx.Permission = NewPermissionClient(tx.config)
	tx.Program = NewProgramClient(tx.config)
	tx.ProgramCardItem = NewProgramCardItemClient(tx.config)
	tx.ProgramCategory = NewProgramCategoryClient(tx.config)
	tx.ProgramEnrolment = NewProgramEnrolmentClient(tx.config)
	tx.ProgramParticipant = NewProgramParticipantClient(tx.config)
	tx.ReportDefinition = NewReportDefinitionClient(tx.config)
	tx.ReportPermission = NewReportPermissionClient(tx.config)
	tx.RolePermission = NewRolePermissionClient(tx.config)
	tx.ScheduledReport = NewScheduledReportClient(tx.config)
	tx.SeoConfig = NewSeoConfigClient(tx.config)
	tx.SiteVisit = NewSiteVisitClient(tx.config)
	tx.Skill = NewSkillClient(tx.config)
	tx.StatItem = NewStatItemClient(tx.config)
	tx.SuccessStory = NewSuccessStoryClient(tx.config)
	tx.SystemError = NewSystemErrorClient(tx.config)
	tx.SystemLog = NewSystemLogClient(tx.config)
	tx.TabItem = NewTabItemClient(tx.config)
	tx.TeamMember = NewTeamMemberClient(tx.config)
	tx.TeamMemberItem = NewTeamMemberItemClient(tx.config)
	tx.TestimonialItem = NewTestimonialItemClient(tx.config)
	tx.TimelineEvent = NewTimelineEventClient(tx.config)
	tx.Token = NewTokenClient(tx.config)
	tx.TrustedDevice = NewTrustedDeviceClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserAchievement = NewUserAchievementClient(tx.config)
	tx.UserConsent = NewUserConsentClient(tx.config)
	tx.UserOnboarding = NewUserOnboardingClient(tx.config)
	tx.UserProfile = NewUserProfileClient(tx.config)
	tx.UserSession = NewUserSessionClient(tx.config)
	tx.UserSkill = NewUserSkillClient(tx.config)
	tx.VolunteerApplication = NewVolunteerApplicationClient(tx.config)
	tx.VolunteerAssignment = NewVolunteerAssignmentClient(tx.config)
	tx.VolunteerOpportunity = NewVolunteerOpportunityClient(tx.config)
	tx.Vote = NewVoteClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: AccordionItem.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
