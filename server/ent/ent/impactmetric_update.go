// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImpactMetricUpdate is the builder for updating ImpactMetric entities.
type ImpactMetricUpdate struct {
	config
	hooks    []Hook
	mutation *ImpactMetricMutation
}

// Where appends a list predicates to the ImpactMetricUpdate builder.
func (_u *ImpactMetricUpdate) Where(ps ...predicate.ImpactMetric) *ImpactMetricUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ImpactMetricUpdate) SetName(v map[string]string) *ImpactMetricUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ImpactMetricUpdate) SetType(v impactmetric.Type) *ImpactMetricUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableType(v *impactmetric.Type) *ImpactMetricUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetUnit sets the "unit" field.
func (_u *ImpactMetricUpdate) SetUnit(v string) *ImpactMetricUpdate {
	_u.mutation.SetUnit(v)
	return _u
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableUnit(v *string) *ImpactMetricUpdate {
	if v != nil {
		_u.SetUnit(*v)
	}
	return _u
}

// SetTargetValue sets the "target_value" field.
func (_u *ImpactMetricUpdate) SetTargetValue(v float64) *ImpactMetricUpdate {
	_u.mutation.ResetTargetValue()
	_u.mutation.SetTargetValue(v)
	return _u
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableTargetValue(v *float64) *ImpactMetricUpdate {
	if v != nil {
		_u.SetTargetValue(*v)
	}
	return _u
}

// AddTargetValue adds value to the "target_value" field.
func (_u *ImpactMetricUpdate) AddTargetValue(v float64) *ImpactMetricUpdate {
	_u.mutation.AddTargetValue(v)
	return _u
}

// ClearTargetValue clears the value of the "target_value" field.
func (_u *ImpactMetricUpdate) ClearTargetValue() *ImpactMetricUpdate {
	_u.mutation.ClearTargetValue()
	return _u
}

// SetCurrentValue sets the "current_value" field.
func (_u *ImpactMetricUpdate) SetCurrentValue(v float64) *ImpactMetricUpdate {
	_u.mutation.ResetCurrentValue()
	_u.mutation.SetCurrentValue(v)
	return _u
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableCurrentValue(v *float64) *ImpactMetricUpdate {
	if v != nil {
		_u.SetCurrentValue(*v)
	}
	return _u
}

// AddCurrentValue adds value to the "current_value" field.
func (_u *ImpactMetricUpdate) AddCurrentValue(v float64) *ImpactMetricUpdate {
	_u.mutation.AddCurrentValue(v)
	return _u
}

// SetTargetDate sets the "target_date" field.
func (_u *ImpactMetricUpdate) SetTargetDate(v time.Time) *ImpactMetricUpdate {
	_u.mutation.SetTargetDate(v)
	return _u
}

// SetNillableTargetDate sets the "target_date" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableTargetDate(v *time.Time) *ImpactMetricUpdate {
	if v != nil {
		_u.SetTargetDate(*v)
	}
	return _u
}

// ClearTargetDate clears the value of the "target_date" field.
func (_u *ImpactMetricUpdate) ClearTargetDate() *ImpactMetricUpdate {
	_u.mutation.ClearTargetDate()
	return _u
}

// SetCalculationMethod sets the "calculation_method" field.
func (_u *ImpactMetricUpdate) SetCalculationMethod(v string) *ImpactMetricUpdate {
	_u.mutation.SetCalculationMethod(v)
	return _u
}

// SetNillableCalculationMethod sets the "calculation_method" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableCalculationMethod(v *string) *ImpactMetricUpdate {
	if v != nil {
		_u.SetCalculationMethod(*v)
	}
	return _u
}

// ClearCalculationMethod clears the value of the "calculation_method" field.
func (_u *ImpactMetricUpdate) ClearCalculationMethod() *ImpactMetricUpdate {
	_u.mutation.ClearCalculationMethod()
	return _u
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (_u *ImpactMetricUpdate) SetIsAutoCalculated(v bool) *ImpactMetricUpdate {
	_u.mutation.SetIsAutoCalculated(v)
	return _u
}

// SetNillableIsAutoCalculated sets the "is_auto_calculated" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableIsAutoCalculated(v *bool) *ImpactMetricUpdate {
	if v != nil {
		_u.SetIsAutoCalculated(*v)
	}
	return _u
}

// SetLastCalculated sets the "last_calculated" field.
func (_u *ImpactMetricUpdate) SetLastCalculated(v time.Time) *ImpactMetricUpdate {
	_u.mutation.SetLastCalculated(v)
	return _u
}

// SetNillableLastCalculated sets the "last_calculated" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableLastCalculated(v *time.Time) *ImpactMetricUpdate {
	if v != nil {
		_u.SetLastCalculated(*v)
	}
	return _u
}

// ClearLastCalculated clears the value of the "last_calculated" field.
func (_u *ImpactMetricUpdate) ClearLastCalculated() *ImpactMetricUpdate {
	_u.mutation.ClearLastCalculated()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *ImpactMetricUpdate) SetDisplayOrder(v int) *ImpactMetricUpdate {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableDisplayOrder(v *int) *ImpactMetricUpdate {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *ImpactMetricUpdate) AddDisplayOrder(v int) *ImpactMetricUpdate {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *ImpactMetricUpdate) SetIsPublic(v bool) *ImpactMetricUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableIsPublic(v *bool) *ImpactMetricUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (_u *ImpactMetricUpdate) SetShowOnDashboard(v bool) *ImpactMetricUpdate {
	_u.mutation.SetShowOnDashboard(v)
	return _u
}

// SetNillableShowOnDashboard sets the "show_on_dashboard" field if the given value is not nil.
func (_u *ImpactMetricUpdate) SetNillableShowOnDashboard(v *bool) *ImpactMetricUpdate {
	if v != nil {
		_u.SetShowOnDashboard(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpactMetricUpdate) SetUpdatedAt(v time.Time) *ImpactMetricUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *ImpactMetricUpdate) SetProgramID(id int) *ImpactMetricUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *ImpactMetricUpdate) SetProgram(v *Program) *ImpactMetricUpdate {
	return _u.SetProgramID(v.ID)
}

// AddDataPointIDs adds the "data_points" edge to the ImpactDataPoint entity by IDs.
func (_u *ImpactMetricUpdate) AddDataPointIDs(ids ...int) *ImpactMetricUpdate {
	_u.mutation.AddDataPointIDs(ids...)
	return _u
}

// AddDataPoints adds the "data_points" edges to the ImpactDataPoint entity.
func (_u *ImpactMetricUpdate) AddDataPoints(v ...*ImpactDataPoint) *ImpactMetricUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDataPointIDs(ids...)
}

// Mutation returns the ImpactMetricMutation object of the builder.
func (_u *ImpactMetricUpdate) Mutation() *ImpactMetricMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *ImpactMetricUpdate) ClearProgram() *ImpactMetricUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearDataPoints clears all "data_points" edges to the ImpactDataPoint entity.
func (_u *ImpactMetricUpdate) ClearDataPoints() *ImpactMetricUpdate {
	_u.mutation.ClearDataPoints()
	return _u
}

// RemoveDataPointIDs removes the "data_points" edge to ImpactDataPoint entities by IDs.
func (_u *ImpactMetricUpdate) RemoveDataPointIDs(ids ...int) *ImpactMetricUpdate {
	_u.mutation.RemoveDataPointIDs(ids...)
	return _u
}

// RemoveDataPoints removes "data_points" edges to ImpactDataPoint entities.
func (_u *ImpactMetricUpdate) RemoveDataPoints(v ...*ImpactDataPoint) *ImpactMetricUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDataPointIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImpactMetricUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpactMetricUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImpactMetricUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpactMetricUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpactMetricUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := impactmetric.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpactMetricUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := impactmetric.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImpactMetric.type": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImpactMetric.program"`)
	}
	return nil
}

func (_u *ImpactMetricUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impactmetric.Table, impactmetric.Columns, sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(impactmetric.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(impactmetric.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Unit(); ok {
		_spec.SetField(impactmetric.FieldUnit, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetValue(); ok {
		_spec.SetField(impactmetric.FieldTargetValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTargetValue(); ok {
		_spec.AddField(impactmetric.FieldTargetValue, field.TypeFloat64, value)
	}
	if _u.mutation.TargetValueCleared() {
		_spec.ClearField(impactmetric.FieldTargetValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.CurrentValue(); ok {
		_spec.SetField(impactmetric.FieldCurrentValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCurrentValue(); ok {
		_spec.AddField(impactmetric.FieldCurrentValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.TargetDate(); ok {
		_spec.SetField(impactmetric.FieldTargetDate, field.TypeTime, value)
	}
	if _u.mutation.TargetDateCleared() {
		_spec.ClearField(impactmetric.FieldTargetDate, field.TypeTime)
	}
	if value, ok := _u.mutation.CalculationMethod(); ok {
		_spec.SetField(impactmetric.FieldCalculationMethod, field.TypeString, value)
	}
	if _u.mutation.CalculationMethodCleared() {
		_spec.ClearField(impactmetric.FieldCalculationMethod, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutoCalculated(); ok {
		_spec.SetField(impactmetric.FieldIsAutoCalculated, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastCalculated(); ok {
		_spec.SetField(impactmetric.FieldLastCalculated, field.TypeTime, value)
	}
	if _u.mutation.LastCalculatedCleared() {
		_spec.ClearField(impactmetric.FieldLastCalculated, field.TypeTime)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(impactmetric.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(impactmetric.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(impactmetric.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowOnDashboard(); ok {
		_spec.SetField(impactmetric.FieldShowOnDashboard, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impactmetric.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DataPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDataPointsIDs(); len(nodes) > 0 && !_u.mutation.DataPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DataPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impactmetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImpactMetricUpdateOne is the builder for updating a single ImpactMetric entity.
type ImpactMetricUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImpactMetricMutation
}

// SetName sets the "name" field.
func (_u *ImpactMetricUpdateOne) SetName(v map[string]string) *ImpactMetricUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetType sets the "type" field.
func (_u *ImpactMetricUpdateOne) SetType(v impactmetric.Type) *ImpactMetricUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableType(v *impactmetric.Type) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetUnit sets the "unit" field.
func (_u *ImpactMetricUpdateOne) SetUnit(v string) *ImpactMetricUpdateOne {
	_u.mutation.SetUnit(v)
	return _u
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableUnit(v *string) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetUnit(*v)
	}
	return _u
}

// SetTargetValue sets the "target_value" field.
func (_u *ImpactMetricUpdateOne) SetTargetValue(v float64) *ImpactMetricUpdateOne {
	_u.mutation.ResetTargetValue()
	_u.mutation.SetTargetValue(v)
	return _u
}

// SetNillableTargetValue sets the "target_value" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableTargetValue(v *float64) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetTargetValue(*v)
	}
	return _u
}

// AddTargetValue adds value to the "target_value" field.
func (_u *ImpactMetricUpdateOne) AddTargetValue(v float64) *ImpactMetricUpdateOne {
	_u.mutation.AddTargetValue(v)
	return _u
}

// ClearTargetValue clears the value of the "target_value" field.
func (_u *ImpactMetricUpdateOne) ClearTargetValue() *ImpactMetricUpdateOne {
	_u.mutation.ClearTargetValue()
	return _u
}

// SetCurrentValue sets the "current_value" field.
func (_u *ImpactMetricUpdateOne) SetCurrentValue(v float64) *ImpactMetricUpdateOne {
	_u.mutation.ResetCurrentValue()
	_u.mutation.SetCurrentValue(v)
	return _u
}

// SetNillableCurrentValue sets the "current_value" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableCurrentValue(v *float64) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetCurrentValue(*v)
	}
	return _u
}

// AddCurrentValue adds value to the "current_value" field.
func (_u *ImpactMetricUpdateOne) AddCurrentValue(v float64) *ImpactMetricUpdateOne {
	_u.mutation.AddCurrentValue(v)
	return _u
}

// SetTargetDate sets the "target_date" field.
func (_u *ImpactMetricUpdateOne) SetTargetDate(v time.Time) *ImpactMetricUpdateOne {
	_u.mutation.SetTargetDate(v)
	return _u
}

// SetNillableTargetDate sets the "target_date" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableTargetDate(v *time.Time) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetTargetDate(*v)
	}
	return _u
}

// ClearTargetDate clears the value of the "target_date" field.
func (_u *ImpactMetricUpdateOne) ClearTargetDate() *ImpactMetricUpdateOne {
	_u.mutation.ClearTargetDate()
	return _u
}

// SetCalculationMethod sets the "calculation_method" field.
func (_u *ImpactMetricUpdateOne) SetCalculationMethod(v string) *ImpactMetricUpdateOne {
	_u.mutation.SetCalculationMethod(v)
	return _u
}

// SetNillableCalculationMethod sets the "calculation_method" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableCalculationMethod(v *string) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetCalculationMethod(*v)
	}
	return _u
}

// ClearCalculationMethod clears the value of the "calculation_method" field.
func (_u *ImpactMetricUpdateOne) ClearCalculationMethod() *ImpactMetricUpdateOne {
	_u.mutation.ClearCalculationMethod()
	return _u
}

// SetIsAutoCalculated sets the "is_auto_calculated" field.
func (_u *ImpactMetricUpdateOne) SetIsAutoCalculated(v bool) *ImpactMetricUpdateOne {
	_u.mutation.SetIsAutoCalculated(v)
	return _u
}

// SetNillableIsAutoCalculated sets the "is_auto_calculated" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableIsAutoCalculated(v *bool) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetIsAutoCalculated(*v)
	}
	return _u
}

// SetLastCalculated sets the "last_calculated" field.
func (_u *ImpactMetricUpdateOne) SetLastCalculated(v time.Time) *ImpactMetricUpdateOne {
	_u.mutation.SetLastCalculated(v)
	return _u
}

// SetNillableLastCalculated sets the "last_calculated" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableLastCalculated(v *time.Time) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetLastCalculated(*v)
	}
	return _u
}

// ClearLastCalculated clears the value of the "last_calculated" field.
func (_u *ImpactMetricUpdateOne) ClearLastCalculated() *ImpactMetricUpdateOne {
	_u.mutation.ClearLastCalculated()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *ImpactMetricUpdateOne) SetDisplayOrder(v int) *ImpactMetricUpdateOne {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableDisplayOrder(v *int) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *ImpactMetricUpdateOne) AddDisplayOrder(v int) *ImpactMetricUpdateOne {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *ImpactMetricUpdateOne) SetIsPublic(v bool) *ImpactMetricUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableIsPublic(v *bool) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetShowOnDashboard sets the "show_on_dashboard" field.
func (_u *ImpactMetricUpdateOne) SetShowOnDashboard(v bool) *ImpactMetricUpdateOne {
	_u.mutation.SetShowOnDashboard(v)
	return _u
}

// SetNillableShowOnDashboard sets the "show_on_dashboard" field if the given value is not nil.
func (_u *ImpactMetricUpdateOne) SetNillableShowOnDashboard(v *bool) *ImpactMetricUpdateOne {
	if v != nil {
		_u.SetShowOnDashboard(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpactMetricUpdateOne) SetUpdatedAt(v time.Time) *ImpactMetricUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *ImpactMetricUpdateOne) SetProgramID(id int) *ImpactMetricUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *ImpactMetricUpdateOne) SetProgram(v *Program) *ImpactMetricUpdateOne {
	return _u.SetProgramID(v.ID)
}

// AddDataPointIDs adds the "data_points" edge to the ImpactDataPoint entity by IDs.
func (_u *ImpactMetricUpdateOne) AddDataPointIDs(ids ...int) *ImpactMetricUpdateOne {
	_u.mutation.AddDataPointIDs(ids...)
	return _u
}

// AddDataPoints adds the "data_points" edges to the ImpactDataPoint entity.
func (_u *ImpactMetricUpdateOne) AddDataPoints(v ...*ImpactDataPoint) *ImpactMetricUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDataPointIDs(ids...)
}

// Mutation returns the ImpactMetricMutation object of the builder.
func (_u *ImpactMetricUpdateOne) Mutation() *ImpactMetricMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *ImpactMetricUpdateOne) ClearProgram() *ImpactMetricUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearDataPoints clears all "data_points" edges to the ImpactDataPoint entity.
func (_u *ImpactMetricUpdateOne) ClearDataPoints() *ImpactMetricUpdateOne {
	_u.mutation.ClearDataPoints()
	return _u
}

// RemoveDataPointIDs removes the "data_points" edge to ImpactDataPoint entities by IDs.
func (_u *ImpactMetricUpdateOne) RemoveDataPointIDs(ids ...int) *ImpactMetricUpdateOne {
	_u.mutation.RemoveDataPointIDs(ids...)
	return _u
}

// RemoveDataPoints removes "data_points" edges to ImpactDataPoint entities.
func (_u *ImpactMetricUpdateOne) RemoveDataPoints(v ...*ImpactDataPoint) *ImpactMetricUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDataPointIDs(ids...)
}

// Where appends a list predicates to the ImpactMetricUpdate builder.
func (_u *ImpactMetricUpdateOne) Where(ps ...predicate.ImpactMetric) *ImpactMetricUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImpactMetricUpdateOne) Select(field string, fields ...string) *ImpactMetricUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImpactMetric entity.
func (_u *ImpactMetricUpdateOne) Save(ctx context.Context) (*ImpactMetric, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpactMetricUpdateOne) SaveX(ctx context.Context) *ImpactMetric {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImpactMetricUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpactMetricUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpactMetricUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := impactmetric.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpactMetricUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := impactmetric.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImpactMetric.type": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImpactMetric.program"`)
	}
	return nil
}

func (_u *ImpactMetricUpdateOne) sqlSave(ctx context.Context) (_node *ImpactMetric, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impactmetric.Table, impactmetric.Columns, sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImpactMetric.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, impactmetric.FieldID)
		for _, f := range fields {
			if !impactmetric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != impactmetric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(impactmetric.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(impactmetric.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Unit(); ok {
		_spec.SetField(impactmetric.FieldUnit, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetValue(); ok {
		_spec.SetField(impactmetric.FieldTargetValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTargetValue(); ok {
		_spec.AddField(impactmetric.FieldTargetValue, field.TypeFloat64, value)
	}
	if _u.mutation.TargetValueCleared() {
		_spec.ClearField(impactmetric.FieldTargetValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.CurrentValue(); ok {
		_spec.SetField(impactmetric.FieldCurrentValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCurrentValue(); ok {
		_spec.AddField(impactmetric.FieldCurrentValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.TargetDate(); ok {
		_spec.SetField(impactmetric.FieldTargetDate, field.TypeTime, value)
	}
	if _u.mutation.TargetDateCleared() {
		_spec.ClearField(impactmetric.FieldTargetDate, field.TypeTime)
	}
	if value, ok := _u.mutation.CalculationMethod(); ok {
		_spec.SetField(impactmetric.FieldCalculationMethod, field.TypeString, value)
	}
	if _u.mutation.CalculationMethodCleared() {
		_spec.ClearField(impactmetric.FieldCalculationMethod, field.TypeString)
	}
	if value, ok := _u.mutation.IsAutoCalculated(); ok {
		_spec.SetField(impactmetric.FieldIsAutoCalculated, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LastCalculated(); ok {
		_spec.SetField(impactmetric.FieldLastCalculated, field.TypeTime, value)
	}
	if _u.mutation.LastCalculatedCleared() {
		_spec.ClearField(impactmetric.FieldLastCalculated, field.TypeTime)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(impactmetric.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(impactmetric.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(impactmetric.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowOnDashboard(); ok {
		_spec.SetField(impactmetric.FieldShowOnDashboard, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impactmetric.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DataPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDataPointsIDs(); len(nodes) > 0 && !_u.mutation.DataPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DataPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImpactMetric{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impactmetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
