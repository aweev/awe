// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/programcarditem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockProgramCardsCreate is the builder for creating a BlockProgramCards entity.
type BlockProgramCardsCreate struct {
	config
	mutation *BlockProgramCardsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockProgramCardsCreate) SetInternalName(v string) *BlockProgramCardsCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockProgramCardsCreate) SetBadge(v map[string]string) *BlockProgramCardsCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockProgramCardsCreate) SetTitle(v map[string]string) *BlockProgramCardsCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockProgramCardsCreate) SetDescription(v map[string]string) *BlockProgramCardsCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *BlockProgramCardsCreate) SetLayout(v string) *BlockProgramCardsCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *BlockProgramCardsCreate) SetNillableLayout(v *string) *BlockProgramCardsCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetItemsPerRow sets the "items_per_row" field.
func (_c *BlockProgramCardsCreate) SetItemsPerRow(v int) *BlockProgramCardsCreate {
	_c.mutation.SetItemsPerRow(v)
	return _c
}

// SetNillableItemsPerRow sets the "items_per_row" field if the given value is not nil.
func (_c *BlockProgramCardsCreate) SetNillableItemsPerRow(v *int) *BlockProgramCardsCreate {
	if v != nil {
		_c.SetItemsPerRow(*v)
	}
	return _c
}

// SetShowAllPrograms sets the "show_all_programs" field.
func (_c *BlockProgramCardsCreate) SetShowAllPrograms(v bool) *BlockProgramCardsCreate {
	_c.mutation.SetShowAllPrograms(v)
	return _c
}

// SetNillableShowAllPrograms sets the "show_all_programs" field if the given value is not nil.
func (_c *BlockProgramCardsCreate) SetNillableShowAllPrograms(v *bool) *BlockProgramCardsCreate {
	if v != nil {
		_c.SetShowAllPrograms(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockProgramCardsCreate) SetCreatedAt(v time.Time) *BlockProgramCardsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockProgramCardsCreate) SetNillableCreatedAt(v *time.Time) *BlockProgramCardsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockProgramCardsCreate) SetUpdatedAt(v time.Time) *BlockProgramCardsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockProgramCardsCreate) SetNillableUpdatedAt(v *time.Time) *BlockProgramCardsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockProgramCardsCreate) SetContentBlockID(id int) *BlockProgramCardsCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockProgramCardsCreate) SetContentBlock(v *ContentBlock) *BlockProgramCardsCreate {
	return _c.SetContentBlockID(v.ID)
}

// AddSelectedProgramIDs adds the "selected_programs" edge to the ProgramCardItem entity by IDs.
func (_c *BlockProgramCardsCreate) AddSelectedProgramIDs(ids ...int) *BlockProgramCardsCreate {
	_c.mutation.AddSelectedProgramIDs(ids...)
	return _c
}

// AddSelectedPrograms adds the "selected_programs" edges to the ProgramCardItem entity.
func (_c *BlockProgramCardsCreate) AddSelectedPrograms(v ...*ProgramCardItem) *BlockProgramCardsCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSelectedProgramIDs(ids...)
}

// Mutation returns the BlockProgramCardsMutation object of the builder.
func (_c *BlockProgramCardsCreate) Mutation() *BlockProgramCardsMutation {
	return _c.mutation
}

// Save creates the BlockProgramCards in the database.
func (_c *BlockProgramCardsCreate) Save(ctx context.Context) (*BlockProgramCards, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockProgramCardsCreate) SaveX(ctx context.Context) *BlockProgramCards {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockProgramCardsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockProgramCardsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockProgramCardsCreate) defaults() {
	if _, ok := _c.mutation.Layout(); !ok {
		v := blockprogramcards.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.ItemsPerRow(); !ok {
		v := blockprogramcards.DefaultItemsPerRow
		_c.mutation.SetItemsPerRow(v)
	}
	if _, ok := _c.mutation.ShowAllPrograms(); !ok {
		v := blockprogramcards.DefaultShowAllPrograms
		_c.mutation.SetShowAllPrograms(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockprogramcards.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockprogramcards.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockProgramCardsCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockProgramCards.internal_name"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "BlockProgramCards.layout"`)}
	}
	if _, ok := _c.mutation.ItemsPerRow(); !ok {
		return &ValidationError{Name: "items_per_row", err: errors.New(`ent: missing required field "BlockProgramCards.items_per_row"`)}
	}
	if _, ok := _c.mutation.ShowAllPrograms(); !ok {
		return &ValidationError{Name: "show_all_programs", err: errors.New(`ent: missing required field "BlockProgramCards.show_all_programs"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockProgramCards.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockProgramCards.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockProgramCards.content_block"`)}
	}
	return nil
}

func (_c *BlockProgramCardsCreate) sqlSave(ctx context.Context) (*BlockProgramCards, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockProgramCardsCreate) createSpec() (*BlockProgramCards, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockProgramCards{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockprogramcards.Table, sqlgraph.NewFieldSpec(blockprogramcards.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockprogramcards.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blockprogramcards.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockprogramcards.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockprogramcards.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(blockprogramcards.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.ItemsPerRow(); ok {
		_spec.SetField(blockprogramcards.FieldItemsPerRow, field.TypeInt, value)
		_node.ItemsPerRow = value
	}
	if value, ok := _c.mutation.ShowAllPrograms(); ok {
		_spec.SetField(blockprogramcards.FieldShowAllPrograms, field.TypeBool, value)
		_node.ShowAllPrograms = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockprogramcards.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockprogramcards.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockprogramcards.ContentBlockTable,
			Columns: []string{blockprogramcards.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_program_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SelectedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockprogramcards.SelectedProgramsTable,
			Columns: []string{blockprogramcards.SelectedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockProgramCards.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockProgramCardsUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockProgramCardsCreate) OnConflict(opts ...sql.ConflictOption) *BlockProgramCardsUpsertOne {
	_c.conflict = opts
	return &BlockProgramCardsUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockProgramCardsCreate) OnConflictColumns(columns ...string) *BlockProgramCardsUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockProgramCardsUpsertOne{
		create: _c,
	}
}

type (
	// BlockProgramCardsUpsertOne is the builder for "upsert"-ing
	//  one BlockProgramCards node.
	BlockProgramCardsUpsertOne struct {
		create *BlockProgramCardsCreate
	}

	// BlockProgramCardsUpsert is the "OnConflict" setter.
	BlockProgramCardsUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockProgramCardsUpsert) SetInternalName(v string) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateInternalName() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockProgramCardsUpsert) SetBadge(v map[string]string) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateBadge() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockProgramCardsUpsert) ClearBadge() *BlockProgramCardsUpsert {
	u.SetNull(blockprogramcards.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockProgramCardsUpsert) SetTitle(v map[string]string) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateTitle() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *BlockProgramCardsUpsert) ClearTitle() *BlockProgramCardsUpsert {
	u.SetNull(blockprogramcards.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockProgramCardsUpsert) SetDescription(v map[string]string) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateDescription() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockProgramCardsUpsert) ClearDescription() *BlockProgramCardsUpsert {
	u.SetNull(blockprogramcards.FieldDescription)
	return u
}

// SetLayout sets the "layout" field.
func (u *BlockProgramCardsUpsert) SetLayout(v string) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateLayout() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldLayout)
	return u
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockProgramCardsUpsert) SetItemsPerRow(v int) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldItemsPerRow, v)
	return u
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateItemsPerRow() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldItemsPerRow)
	return u
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockProgramCardsUpsert) AddItemsPerRow(v int) *BlockProgramCardsUpsert {
	u.Add(blockprogramcards.FieldItemsPerRow, v)
	return u
}

// SetShowAllPrograms sets the "show_all_programs" field.
func (u *BlockProgramCardsUpsert) SetShowAllPrograms(v bool) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldShowAllPrograms, v)
	return u
}

// UpdateShowAllPrograms sets the "show_all_programs" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateShowAllPrograms() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldShowAllPrograms)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockProgramCardsUpsert) SetUpdatedAt(v time.Time) *BlockProgramCardsUpsert {
	u.Set(blockprogramcards.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockProgramCardsUpsert) UpdateUpdatedAt() *BlockProgramCardsUpsert {
	u.SetExcluded(blockprogramcards.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockProgramCardsUpsertOne) UpdateNewValues() *BlockProgramCardsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockprogramcards.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockProgramCardsUpsertOne) Ignore() *BlockProgramCardsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockProgramCardsUpsertOne) DoNothing() *BlockProgramCardsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockProgramCardsCreate.OnConflict
// documentation for more info.
func (u *BlockProgramCardsUpsertOne) Update(set func(*BlockProgramCardsUpsert)) *BlockProgramCardsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockProgramCardsUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockProgramCardsUpsertOne) SetInternalName(v string) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateInternalName() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockProgramCardsUpsertOne) SetBadge(v map[string]string) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateBadge() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockProgramCardsUpsertOne) ClearBadge() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockProgramCardsUpsertOne) SetTitle(v map[string]string) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateTitle() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockProgramCardsUpsertOne) ClearTitle() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockProgramCardsUpsertOne) SetDescription(v map[string]string) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateDescription() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockProgramCardsUpsertOne) ClearDescription() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockProgramCardsUpsertOne) SetLayout(v string) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateLayout() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateLayout()
	})
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockProgramCardsUpsertOne) SetItemsPerRow(v int) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetItemsPerRow(v)
	})
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockProgramCardsUpsertOne) AddItemsPerRow(v int) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.AddItemsPerRow(v)
	})
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateItemsPerRow() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateItemsPerRow()
	})
}

// SetShowAllPrograms sets the "show_all_programs" field.
func (u *BlockProgramCardsUpsertOne) SetShowAllPrograms(v bool) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetShowAllPrograms(v)
	})
}

// UpdateShowAllPrograms sets the "show_all_programs" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateShowAllPrograms() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateShowAllPrograms()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockProgramCardsUpsertOne) SetUpdatedAt(v time.Time) *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertOne) UpdateUpdatedAt() *BlockProgramCardsUpsertOne {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockProgramCardsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockProgramCardsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockProgramCardsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockProgramCardsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockProgramCardsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockProgramCardsCreateBulk is the builder for creating many BlockProgramCards entities in bulk.
type BlockProgramCardsCreateBulk struct {
	config
	err      error
	builders []*BlockProgramCardsCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockProgramCards entities in the database.
func (_c *BlockProgramCardsCreateBulk) Save(ctx context.Context) ([]*BlockProgramCards, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockProgramCards, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockProgramCardsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockProgramCardsCreateBulk) SaveX(ctx context.Context) []*BlockProgramCards {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockProgramCardsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockProgramCardsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockProgramCards.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockProgramCardsUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockProgramCardsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockProgramCardsUpsertBulk {
	_c.conflict = opts
	return &BlockProgramCardsUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockProgramCardsCreateBulk) OnConflictColumns(columns ...string) *BlockProgramCardsUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockProgramCardsUpsertBulk{
		create: _c,
	}
}

// BlockProgramCardsUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockProgramCards nodes.
type BlockProgramCardsUpsertBulk struct {
	create *BlockProgramCardsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockProgramCardsUpsertBulk) UpdateNewValues() *BlockProgramCardsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockprogramcards.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockProgramCards.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockProgramCardsUpsertBulk) Ignore() *BlockProgramCardsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockProgramCardsUpsertBulk) DoNothing() *BlockProgramCardsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockProgramCardsCreateBulk.OnConflict
// documentation for more info.
func (u *BlockProgramCardsUpsertBulk) Update(set func(*BlockProgramCardsUpsert)) *BlockProgramCardsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockProgramCardsUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockProgramCardsUpsertBulk) SetInternalName(v string) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateInternalName() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockProgramCardsUpsertBulk) SetBadge(v map[string]string) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateBadge() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockProgramCardsUpsertBulk) ClearBadge() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockProgramCardsUpsertBulk) SetTitle(v map[string]string) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateTitle() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockProgramCardsUpsertBulk) ClearTitle() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockProgramCardsUpsertBulk) SetDescription(v map[string]string) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateDescription() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockProgramCardsUpsertBulk) ClearDescription() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.ClearDescription()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockProgramCardsUpsertBulk) SetLayout(v string) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateLayout() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateLayout()
	})
}

// SetItemsPerRow sets the "items_per_row" field.
func (u *BlockProgramCardsUpsertBulk) SetItemsPerRow(v int) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetItemsPerRow(v)
	})
}

// AddItemsPerRow adds v to the "items_per_row" field.
func (u *BlockProgramCardsUpsertBulk) AddItemsPerRow(v int) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.AddItemsPerRow(v)
	})
}

// UpdateItemsPerRow sets the "items_per_row" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateItemsPerRow() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateItemsPerRow()
	})
}

// SetShowAllPrograms sets the "show_all_programs" field.
func (u *BlockProgramCardsUpsertBulk) SetShowAllPrograms(v bool) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetShowAllPrograms(v)
	})
}

// UpdateShowAllPrograms sets the "show_all_programs" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateShowAllPrograms() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateShowAllPrograms()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockProgramCardsUpsertBulk) SetUpdatedAt(v time.Time) *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockProgramCardsUpsertBulk) UpdateUpdatedAt() *BlockProgramCardsUpsertBulk {
	return u.Update(func(s *BlockProgramCardsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockProgramCardsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockProgramCardsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockProgramCardsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockProgramCardsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
