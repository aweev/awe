// Code generated by ent, DO NOT EDIT.

package agendaitem

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldOrder, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldTitle, v))
}

// Presenter applies equality check predicate on the "presenter" field. It's identical to PresenterEQ.
func Presenter(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldPresenter, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldNotes, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldDuration, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldOrder, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContainsFold(FieldTitle, v))
}

// PresenterEQ applies the EQ predicate on the "presenter" field.
func PresenterEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldPresenter, v))
}

// PresenterNEQ applies the NEQ predicate on the "presenter" field.
func PresenterNEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldPresenter, v))
}

// PresenterIn applies the In predicate on the "presenter" field.
func PresenterIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldPresenter, vs...))
}

// PresenterNotIn applies the NotIn predicate on the "presenter" field.
func PresenterNotIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldPresenter, vs...))
}

// PresenterGT applies the GT predicate on the "presenter" field.
func PresenterGT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldPresenter, v))
}

// PresenterGTE applies the GTE predicate on the "presenter" field.
func PresenterGTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldPresenter, v))
}

// PresenterLT applies the LT predicate on the "presenter" field.
func PresenterLT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldPresenter, v))
}

// PresenterLTE applies the LTE predicate on the "presenter" field.
func PresenterLTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldPresenter, v))
}

// PresenterContains applies the Contains predicate on the "presenter" field.
func PresenterContains(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContains(FieldPresenter, v))
}

// PresenterHasPrefix applies the HasPrefix predicate on the "presenter" field.
func PresenterHasPrefix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasPrefix(FieldPresenter, v))
}

// PresenterHasSuffix applies the HasSuffix predicate on the "presenter" field.
func PresenterHasSuffix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasSuffix(FieldPresenter, v))
}

// PresenterIsNil applies the IsNil predicate on the "presenter" field.
func PresenterIsNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIsNull(FieldPresenter))
}

// PresenterNotNil applies the NotNil predicate on the "presenter" field.
func PresenterNotNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotNull(FieldPresenter))
}

// PresenterEqualFold applies the EqualFold predicate on the "presenter" field.
func PresenterEqualFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEqualFold(FieldPresenter, v))
}

// PresenterContainsFold applies the ContainsFold predicate on the "presenter" field.
func PresenterContainsFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContainsFold(FieldPresenter, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldContainsFold(FieldNotes, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.AgendaItem {
	return predicate.AgendaItem(sql.FieldNotNull(FieldDuration))
}

// HasAgenda applies the HasEdge predicate on the "agenda" edge.
func HasAgenda() predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgendaTable, AgendaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgendaWith applies the HasEdge predicate on the "agenda" edge with a given conditions (other predicates).
func HasAgendaWith(preds ...predicate.Agenda) predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := newAgendaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVote applies the HasEdge predicate on the "vote" edge.
func HasVote() predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, VoteTable, VoteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoteWith applies the HasEdge predicate on the "vote" edge with a given conditions (other predicates).
func HasVoteWith(preds ...predicate.Vote) predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := newVoteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActionItems applies the HasEdge predicate on the "action_items" edge.
func HasActionItems() predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionItemsTable, ActionItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionItemsWith applies the HasEdge predicate on the "action_items" edge with a given conditions (other predicates).
func HasActionItemsWith(preds ...predicate.ActionItem) predicate.AgendaItem {
	return predicate.AgendaItem(func(s *sql.Selector) {
		step := newActionItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgendaItem) predicate.AgendaItem {
	return predicate.AgendaItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgendaItem) predicate.AgendaItem {
	return predicate.AgendaItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgendaItem) predicate.AgendaItem {
	return predicate.AgendaItem(sql.NotPredicates(p))
}
