// Code generated by ent, DO NOT EDIT.

package agendaitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the agendaitem type in the database.
	Label = "agenda_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPresenter holds the string denoting the presenter field in the database.
	FieldPresenter = "presenter"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// EdgeAgenda holds the string denoting the agenda edge name in mutations.
	EdgeAgenda = "agenda"
	// EdgeVote holds the string denoting the vote edge name in mutations.
	EdgeVote = "vote"
	// EdgeActionItems holds the string denoting the action_items edge name in mutations.
	EdgeActionItems = "action_items"
	// Table holds the table name of the agendaitem in the database.
	Table = "agenda_items"
	// AgendaTable is the table that holds the agenda relation/edge.
	AgendaTable = "agenda_items"
	// AgendaInverseTable is the table name for the Agenda entity.
	// It exists in this package in order to avoid circular dependency with the "agenda" package.
	AgendaInverseTable = "agendas"
	// AgendaColumn is the table column denoting the agenda relation/edge.
	AgendaColumn = "agenda_items"
	// VoteTable is the table that holds the vote relation/edge.
	VoteTable = "votes"
	// VoteInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VoteInverseTable = "votes"
	// VoteColumn is the table column denoting the vote relation/edge.
	VoteColumn = "agenda_item_vote"
	// ActionItemsTable is the table that holds the action_items relation/edge.
	ActionItemsTable = "action_items"
	// ActionItemsInverseTable is the table name for the ActionItem entity.
	// It exists in this package in order to avoid circular dependency with the "actionitem" package.
	ActionItemsInverseTable = "action_items"
	// ActionItemsColumn is the table column denoting the action_items relation/edge.
	ActionItemsColumn = "agenda_item_action_items"
)

// Columns holds all SQL columns for agendaitem fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldTitle,
	FieldPresenter,
	FieldNotes,
	FieldDuration,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "agenda_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agenda_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AgendaItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPresenter orders the results by the presenter field.
func ByPresenter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresenter, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByAgendaField orders the results by agenda field.
func ByAgendaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgendaStep(), sql.OrderByField(field, opts...))
	}
}

// ByVoteField orders the results by vote field.
func ByVoteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoteStep(), sql.OrderByField(field, opts...))
	}
}

// ByActionItemsCount orders the results by action_items count.
func ByActionItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionItemsStep(), opts...)
	}
}

// ByActionItems orders the results by action_items terms.
func ByActionItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAgendaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgendaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgendaTable, AgendaColumn),
	)
}
func newVoteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VoteTable, VoteColumn),
	)
}
func newActionItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActionItemsTable, ActionItemsColumn),
	)
}
