// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/ballot"
	"awe/ent/ent/predicate"
	"awe/ent/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetQuestion sets the "question" field.
func (_u *VoteUpdate) SetQuestion(v string) *VoteUpdate {
	_u.mutation.SetQuestion(v)
	return _u
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableQuestion(v *string) *VoteUpdate {
	if v != nil {
		_u.SetQuestion(*v)
	}
	return _u
}

// SetOptions sets the "options" field.
func (_u *VoteUpdate) SetOptions(v []string) *VoteUpdate {
	_u.mutation.SetOptions(v)
	return _u
}

// AppendOptions appends value to the "options" field.
func (_u *VoteUpdate) AppendOptions(v []string) *VoteUpdate {
	_u.mutation.AppendOptions(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *VoteUpdate) SetStatus(v string) *VoteUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableStatus(v *string) *VoteUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetResult sets the "result" field.
func (_u *VoteUpdate) SetResult(v string) *VoteUpdate {
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableResult(v *string) *VoteUpdate {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *VoteUpdate) ClearResult() *VoteUpdate {
	_u.mutation.ClearResult()
	return _u
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_u *VoteUpdate) SetAgendaItemID(id int) *VoteUpdate {
	_u.mutation.SetAgendaItemID(id)
	return _u
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_u *VoteUpdate) SetAgendaItem(v *AgendaItem) *VoteUpdate {
	return _u.SetAgendaItemID(v.ID)
}

// AddBallotIDs adds the "ballots" edge to the Ballot entity by IDs.
func (_u *VoteUpdate) AddBallotIDs(ids ...int) *VoteUpdate {
	_u.mutation.AddBallotIDs(ids...)
	return _u
}

// AddBallots adds the "ballots" edges to the Ballot entity.
func (_u *VoteUpdate) AddBallots(v ...*Ballot) *VoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBallotIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdate) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearAgendaItem clears the "agenda_item" edge to the AgendaItem entity.
func (_u *VoteUpdate) ClearAgendaItem() *VoteUpdate {
	_u.mutation.ClearAgendaItem()
	return _u
}

// ClearBallots clears all "ballots" edges to the Ballot entity.
func (_u *VoteUpdate) ClearBallots() *VoteUpdate {
	_u.mutation.ClearBallots()
	return _u
}

// RemoveBallotIDs removes the "ballots" edge to Ballot entities by IDs.
func (_u *VoteUpdate) RemoveBallotIDs(ids ...int) *VoteUpdate {
	_u.mutation.RemoveBallotIDs(ids...)
	return _u
}

// RemoveBallots removes "ballots" edges to Ballot entities.
func (_u *VoteUpdate) RemoveBallots(v ...*Ballot) *VoteUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBallotIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdate) check() error {
	if _u.mutation.AgendaItemCleared() && len(_u.mutation.AgendaItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.agenda_item"`)
	}
	return nil
}

func (_u *VoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Question(); ok {
		_spec.SetField(vote.FieldQuestion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(vote.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vote.FieldOptions, value)
		})
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(vote.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(vote.FieldResult, field.TypeString, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(vote.FieldResult, field.TypeString)
	}
	if _u.mutation.AgendaItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BallotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBallotsIDs(); len(nodes) > 0 && !_u.mutation.BallotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BallotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetQuestion sets the "question" field.
func (_u *VoteUpdateOne) SetQuestion(v string) *VoteUpdateOne {
	_u.mutation.SetQuestion(v)
	return _u
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableQuestion(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetQuestion(*v)
	}
	return _u
}

// SetOptions sets the "options" field.
func (_u *VoteUpdateOne) SetOptions(v []string) *VoteUpdateOne {
	_u.mutation.SetOptions(v)
	return _u
}

// AppendOptions appends value to the "options" field.
func (_u *VoteUpdateOne) AppendOptions(v []string) *VoteUpdateOne {
	_u.mutation.AppendOptions(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *VoteUpdateOne) SetStatus(v string) *VoteUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableStatus(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetResult sets the "result" field.
func (_u *VoteUpdateOne) SetResult(v string) *VoteUpdateOne {
	_u.mutation.SetResult(v)
	return _u
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableResult(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetResult(*v)
	}
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *VoteUpdateOne) ClearResult() *VoteUpdateOne {
	_u.mutation.ClearResult()
	return _u
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_u *VoteUpdateOne) SetAgendaItemID(id int) *VoteUpdateOne {
	_u.mutation.SetAgendaItemID(id)
	return _u
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_u *VoteUpdateOne) SetAgendaItem(v *AgendaItem) *VoteUpdateOne {
	return _u.SetAgendaItemID(v.ID)
}

// AddBallotIDs adds the "ballots" edge to the Ballot entity by IDs.
func (_u *VoteUpdateOne) AddBallotIDs(ids ...int) *VoteUpdateOne {
	_u.mutation.AddBallotIDs(ids...)
	return _u
}

// AddBallots adds the "ballots" edges to the Ballot entity.
func (_u *VoteUpdateOne) AddBallots(v ...*Ballot) *VoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBallotIDs(ids...)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdateOne) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearAgendaItem clears the "agenda_item" edge to the AgendaItem entity.
func (_u *VoteUpdateOne) ClearAgendaItem() *VoteUpdateOne {
	_u.mutation.ClearAgendaItem()
	return _u
}

// ClearBallots clears all "ballots" edges to the Ballot entity.
func (_u *VoteUpdateOne) ClearBallots() *VoteUpdateOne {
	_u.mutation.ClearBallots()
	return _u
}

// RemoveBallotIDs removes the "ballots" edge to Ballot entities by IDs.
func (_u *VoteUpdateOne) RemoveBallotIDs(ids ...int) *VoteUpdateOne {
	_u.mutation.RemoveBallotIDs(ids...)
	return _u
}

// RemoveBallots removes "ballots" edges to Ballot entities.
func (_u *VoteUpdateOne) RemoveBallots(v ...*Ballot) *VoteUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBallotIDs(ids...)
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdateOne) Where(ps ...predicate.Vote) *VoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Vote entity.
func (_u *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdateOne) check() error {
	if _u.mutation.AgendaItemCleared() && len(_u.mutation.AgendaItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.agenda_item"`)
	}
	return nil
}

func (_u *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Question(); ok {
		_spec.SetField(vote.FieldQuestion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(vote.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vote.FieldOptions, value)
		})
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(vote.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(vote.FieldResult, field.TypeString, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(vote.FieldResult, field.TypeString)
	}
	if _u.mutation.AgendaItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BallotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBallotsIDs(); len(nodes) > 0 && !_u.mutation.BallotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BallotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
