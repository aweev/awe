// Code generated by ent, DO NOT EDIT.

package program

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the program type in the database.
	Label = "program"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTagline holds the string denoting the tagline field in the database.
	FieldTagline = "tagline"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldHeroImageURL holds the string denoting the hero_image_url field in the database.
	FieldHeroImageURL = "hero_image_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldVideoThumbnailURL holds the string denoting the video_thumbnail_url field in the database.
	FieldVideoThumbnailURL = "video_thumbnail_url"
	// FieldMediaGallery holds the string denoting the media_gallery field in the database.
	FieldMediaGallery = "media_gallery"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldMetrics holds the string denoting the metrics field in the database.
	FieldMetrics = "metrics"
	// FieldCurriculum holds the string denoting the curriculum field in the database.
	FieldCurriculum = "curriculum"
	// FieldEligibilityCriteria holds the string denoting the eligibility_criteria field in the database.
	FieldEligibilityCriteria = "eligibility_criteria"
	// FieldApplicationSteps holds the string denoting the application_steps field in the database.
	FieldApplicationSteps = "application_steps"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldApplicationDeadline holds the string denoting the application_deadline field in the database.
	FieldApplicationDeadline = "application_deadline"
	// FieldRequirements holds the string denoting the requirements field in the database.
	FieldRequirements = "requirements"
	// FieldMinAge holds the string denoting the min_age field in the database.
	FieldMinAge = "min_age"
	// FieldMaxAge holds the string denoting the max_age field in the database.
	FieldMaxAge = "max_age"
	// FieldRequiredDocs holds the string denoting the required_docs field in the database.
	FieldRequiredDocs = "required_docs"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldRules holds the string denoting the rules field in the database.
	FieldRules = "rules"
	// FieldSteps holds the string denoting the steps field in the database.
	FieldSteps = "steps"
	// FieldRequiredSkills holds the string denoting the required_skills field in the database.
	FieldRequiredSkills = "required_skills"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeEnrolments holds the string denoting the enrolments edge name in mutations.
	EdgeEnrolments = "enrolments"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// EdgeProgramCardItems holds the string denoting the program_card_items edge name in mutations.
	EdgeProgramCardItems = "program_card_items"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeSuccessStories holds the string denoting the success_stories edge name in mutations.
	EdgeSuccessStories = "success_stories"
	// EdgeVolunteerOpportunities holds the string denoting the volunteer_opportunities edge name in mutations.
	EdgeVolunteerOpportunities = "volunteer_opportunities"
	// EdgeFundraisingCampaigns holds the string denoting the fundraising_campaigns edge name in mutations.
	EdgeFundraisingCampaigns = "fundraising_campaigns"
	// EdgeDonations holds the string denoting the donations edge name in mutations.
	EdgeDonations = "donations"
	// EdgeGrants holds the string denoting the grants edge name in mutations.
	EdgeGrants = "grants"
	// EdgeSiteVisits holds the string denoting the site_visits edge name in mutations.
	EdgeSiteVisits = "site_visits"
	// EdgeImpactMetrics holds the string denoting the impact_metrics edge name in mutations.
	EdgeImpactMetrics = "impact_metrics"
	// Table holds the table name of the program in the database.
	Table = "programs"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "programs"
	// CategoryInverseTable is the table name for the ProgramCategory entity.
	// It exists in this package in order to avoid circular dependency with the "programcategory" package.
	CategoryInverseTable = "program_categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "program_category_programs"
	// EnrolmentsTable is the table that holds the enrolments relation/edge.
	EnrolmentsTable = "program_enrolments"
	// EnrolmentsInverseTable is the table name for the ProgramEnrolment entity.
	// It exists in this package in order to avoid circular dependency with the "programenrolment" package.
	EnrolmentsInverseTable = "program_enrolments"
	// EnrolmentsColumn is the table column denoting the enrolments relation/edge.
	EnrolmentsColumn = "program_enrolments"
	// ParticipantsTable is the table that holds the participants relation/edge.
	ParticipantsTable = "program_participants"
	// ParticipantsInverseTable is the table name for the ProgramParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "programparticipant" package.
	ParticipantsInverseTable = "program_participants"
	// ParticipantsColumn is the table column denoting the participants relation/edge.
	ParticipantsColumn = "program_participants"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "programs"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "user_created_programs"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "programs"
	// UpdatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByInverseTable = "users"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "user_updated_programs"
	// ProgramCardItemsTable is the table that holds the program_card_items relation/edge.
	ProgramCardItemsTable = "program_card_items"
	// ProgramCardItemsInverseTable is the table name for the ProgramCardItem entity.
	// It exists in this package in order to avoid circular dependency with the "programcarditem" package.
	ProgramCardItemsInverseTable = "program_card_items"
	// ProgramCardItemsColumn is the table column denoting the program_card_items relation/edge.
	ProgramCardItemsColumn = "program_program_card_items"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "program_events"
	// SuccessStoriesTable is the table that holds the success_stories relation/edge.
	SuccessStoriesTable = "success_stories"
	// SuccessStoriesInverseTable is the table name for the SuccessStory entity.
	// It exists in this package in order to avoid circular dependency with the "successstory" package.
	SuccessStoriesInverseTable = "success_stories"
	// SuccessStoriesColumn is the table column denoting the success_stories relation/edge.
	SuccessStoriesColumn = "program_success_stories"
	// VolunteerOpportunitiesTable is the table that holds the volunteer_opportunities relation/edge.
	VolunteerOpportunitiesTable = "volunteer_opportunities"
	// VolunteerOpportunitiesInverseTable is the table name for the VolunteerOpportunity entity.
	// It exists in this package in order to avoid circular dependency with the "volunteeropportunity" package.
	VolunteerOpportunitiesInverseTable = "volunteer_opportunities"
	// VolunteerOpportunitiesColumn is the table column denoting the volunteer_opportunities relation/edge.
	VolunteerOpportunitiesColumn = "program_volunteer_opportunities"
	// FundraisingCampaignsTable is the table that holds the fundraising_campaigns relation/edge.
	FundraisingCampaignsTable = "fundraising_campaigns"
	// FundraisingCampaignsInverseTable is the table name for the FundraisingCampaign entity.
	// It exists in this package in order to avoid circular dependency with the "fundraisingcampaign" package.
	FundraisingCampaignsInverseTable = "fundraising_campaigns"
	// FundraisingCampaignsColumn is the table column denoting the fundraising_campaigns relation/edge.
	FundraisingCampaignsColumn = "program_fundraising_campaigns"
	// DonationsTable is the table that holds the donations relation/edge.
	DonationsTable = "donations"
	// DonationsInverseTable is the table name for the Donation entity.
	// It exists in this package in order to avoid circular dependency with the "donation" package.
	DonationsInverseTable = "donations"
	// DonationsColumn is the table column denoting the donations relation/edge.
	DonationsColumn = "program_donations"
	// GrantsTable is the table that holds the grants relation/edge.
	GrantsTable = "grants"
	// GrantsInverseTable is the table name for the Grant entity.
	// It exists in this package in order to avoid circular dependency with the "grant" package.
	GrantsInverseTable = "grants"
	// GrantsColumn is the table column denoting the grants relation/edge.
	GrantsColumn = "program_grants"
	// SiteVisitsTable is the table that holds the site_visits relation/edge.
	SiteVisitsTable = "site_visits"
	// SiteVisitsInverseTable is the table name for the SiteVisit entity.
	// It exists in this package in order to avoid circular dependency with the "sitevisit" package.
	SiteVisitsInverseTable = "site_visits"
	// SiteVisitsColumn is the table column denoting the site_visits relation/edge.
	SiteVisitsColumn = "program_site_visits"
	// ImpactMetricsTable is the table that holds the impact_metrics relation/edge.
	ImpactMetricsTable = "impact_metrics"
	// ImpactMetricsInverseTable is the table name for the ImpactMetric entity.
	// It exists in this package in order to avoid circular dependency with the "impactmetric" package.
	ImpactMetricsInverseTable = "impact_metrics"
	// ImpactMetricsColumn is the table column denoting the impact_metrics relation/edge.
	ImpactMetricsColumn = "program_impact_metrics"
)

// Columns holds all SQL columns for program fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldDescription,
	FieldTagline,
	FieldStatus,
	FieldStartDate,
	FieldEndDate,
	FieldHeroImageURL,
	FieldThumbnailURL,
	FieldVideoThumbnailURL,
	FieldMediaGallery,
	FieldTags,
	FieldMetrics,
	FieldCurriculum,
	FieldEligibilityCriteria,
	FieldApplicationSteps,
	FieldDuration,
	FieldCapacity,
	FieldApplicationDeadline,
	FieldRequirements,
	FieldMinAge,
	FieldMaxAge,
	FieldRequiredDocs,
	FieldCost,
	FieldCurrency,
	FieldRules,
	FieldSteps,
	FieldRequiredSkills,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "programs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_category_programs",
	"user_created_programs",
	"user_updated_programs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDRAFT is the default value of the Status enum.
const DefaultStatus = StatusDRAFT

// Status values.
const (
	StatusDRAFT    Status = "DRAFT"
	StatusOPEN     Status = "OPEN"
	StatusFULL     Status = "FULL"
	StatusCLOSED   Status = "CLOSED"
	StatusARCHIVED Status = "ARCHIVED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusOPEN, StatusFULL, StatusCLOSED, StatusARCHIVED:
		return nil
	default:
		return fmt.Errorf("program: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Program queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByHeroImageURL orders the results by the hero_image_url field.
func ByHeroImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeroImageURL, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByVideoThumbnailURL orders the results by the video_thumbnail_url field.
func ByVideoThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoThumbnailURL, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByCapacity orders the results by the capacity field.
func ByCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacity, opts...).ToFunc()
}

// ByApplicationDeadline orders the results by the application_deadline field.
func ByApplicationDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationDeadline, opts...).ToFunc()
}

// ByMinAge orders the results by the min_age field.
func ByMinAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinAge, opts...).ToFunc()
}

// ByMaxAge orders the results by the max_age field.
func ByMaxAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxAge, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnrolmentsCount orders the results by enrolments count.
func ByEnrolmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnrolmentsStep(), opts...)
	}
}

// ByEnrolments orders the results by enrolments terms.
func ByEnrolments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrolmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipantsCount orders the results by participants count.
func ByParticipantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantsStep(), opts...)
	}
}

// ByParticipants orders the results by participants terms.
func ByParticipants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByField orders the results by updated_by field.
func ByUpdatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramCardItemsCount orders the results by program_card_items count.
func ByProgramCardItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramCardItemsStep(), opts...)
	}
}

// ByProgramCardItems orders the results by program_card_items terms.
func ByProgramCardItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramCardItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySuccessStoriesCount orders the results by success_stories count.
func BySuccessStoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuccessStoriesStep(), opts...)
	}
}

// BySuccessStories orders the results by success_stories terms.
func BySuccessStories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuccessStoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVolunteerOpportunitiesCount orders the results by volunteer_opportunities count.
func ByVolunteerOpportunitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVolunteerOpportunitiesStep(), opts...)
	}
}

// ByVolunteerOpportunities orders the results by volunteer_opportunities terms.
func ByVolunteerOpportunities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerOpportunitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFundraisingCampaignsCount orders the results by fundraising_campaigns count.
func ByFundraisingCampaignsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFundraisingCampaignsStep(), opts...)
	}
}

// ByFundraisingCampaigns orders the results by fundraising_campaigns terms.
func ByFundraisingCampaigns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFundraisingCampaignsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDonationsCount orders the results by donations count.
func ByDonationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDonationsStep(), opts...)
	}
}

// ByDonations orders the results by donations terms.
func ByDonations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDonationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGrantsCount orders the results by grants count.
func ByGrantsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGrantsStep(), opts...)
	}
}

// ByGrants orders the results by grants terms.
func ByGrants(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySiteVisitsCount orders the results by site_visits count.
func BySiteVisitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSiteVisitsStep(), opts...)
	}
}

// BySiteVisits orders the results by site_visits terms.
func BySiteVisits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteVisitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImpactMetricsCount orders the results by impact_metrics count.
func ByImpactMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImpactMetricsStep(), opts...)
	}
}

// ByImpactMetrics orders the results by impact_metrics terms.
func ByImpactMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImpactMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newEnrolmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrolmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EnrolmentsTable, EnrolmentsColumn),
	)
}
func newParticipantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParticipantsTable, ParticipantsColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
	)
}
func newUpdatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UpdatedByTable, UpdatedByColumn),
	)
}
func newProgramCardItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramCardItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgramCardItemsTable, ProgramCardItemsColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
func newSuccessStoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuccessStoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuccessStoriesTable, SuccessStoriesColumn),
	)
}
func newVolunteerOpportunitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerOpportunitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VolunteerOpportunitiesTable, VolunteerOpportunitiesColumn),
	)
}
func newFundraisingCampaignsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FundraisingCampaignsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FundraisingCampaignsTable, FundraisingCampaignsColumn),
	)
}
func newDonationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DonationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
	)
}
func newGrantsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GrantsTable, GrantsColumn),
	)
}
func newSiteVisitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteVisitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SiteVisitsTable, SiteVisitsColumn),
	)
}
func newImpactMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImpactMetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImpactMetricsTable, ImpactMetricsColumn),
	)
}
