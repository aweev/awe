// Code generated by ent, DO NOT EDIT.

package program

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldSlug, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldEndDate, v))
}

// HeroImageURL applies equality check predicate on the "hero_image_url" field. It's identical to HeroImageURLEQ.
func HeroImageURL(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldHeroImageURL, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldThumbnailURL, v))
}

// VideoThumbnailURL applies equality check predicate on the "video_thumbnail_url" field. It's identical to VideoThumbnailURLEQ.
func VideoThumbnailURL(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldVideoThumbnailURL, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldDuration, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCapacity, v))
}

// ApplicationDeadline applies equality check predicate on the "application_deadline" field. It's identical to ApplicationDeadlineEQ.
func ApplicationDeadline(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldApplicationDeadline, v))
}

// MinAge applies equality check predicate on the "min_age" field. It's identical to MinAgeEQ.
func MinAge(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldMinAge, v))
}

// MaxAge applies equality check predicate on the "max_age" field. It's identical to MaxAgeEQ.
func MaxAge(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldMaxAge, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCost, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCurrency, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldUpdatedAt, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldSlug, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldStatus, vs...))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldEndDate))
}

// HeroImageURLEQ applies the EQ predicate on the "hero_image_url" field.
func HeroImageURLEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldHeroImageURL, v))
}

// HeroImageURLNEQ applies the NEQ predicate on the "hero_image_url" field.
func HeroImageURLNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldHeroImageURL, v))
}

// HeroImageURLIn applies the In predicate on the "hero_image_url" field.
func HeroImageURLIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldHeroImageURL, vs...))
}

// HeroImageURLNotIn applies the NotIn predicate on the "hero_image_url" field.
func HeroImageURLNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldHeroImageURL, vs...))
}

// HeroImageURLGT applies the GT predicate on the "hero_image_url" field.
func HeroImageURLGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldHeroImageURL, v))
}

// HeroImageURLGTE applies the GTE predicate on the "hero_image_url" field.
func HeroImageURLGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldHeroImageURL, v))
}

// HeroImageURLLT applies the LT predicate on the "hero_image_url" field.
func HeroImageURLLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldHeroImageURL, v))
}

// HeroImageURLLTE applies the LTE predicate on the "hero_image_url" field.
func HeroImageURLLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldHeroImageURL, v))
}

// HeroImageURLContains applies the Contains predicate on the "hero_image_url" field.
func HeroImageURLContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldHeroImageURL, v))
}

// HeroImageURLHasPrefix applies the HasPrefix predicate on the "hero_image_url" field.
func HeroImageURLHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldHeroImageURL, v))
}

// HeroImageURLHasSuffix applies the HasSuffix predicate on the "hero_image_url" field.
func HeroImageURLHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldHeroImageURL, v))
}

// HeroImageURLIsNil applies the IsNil predicate on the "hero_image_url" field.
func HeroImageURLIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldHeroImageURL))
}

// HeroImageURLNotNil applies the NotNil predicate on the "hero_image_url" field.
func HeroImageURLNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldHeroImageURL))
}

// HeroImageURLEqualFold applies the EqualFold predicate on the "hero_image_url" field.
func HeroImageURLEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldHeroImageURL, v))
}

// HeroImageURLContainsFold applies the ContainsFold predicate on the "hero_image_url" field.
func HeroImageURLContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldHeroImageURL, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLIsNil applies the IsNil predicate on the "thumbnail_url" field.
func ThumbnailURLIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldThumbnailURL))
}

// ThumbnailURLNotNil applies the NotNil predicate on the "thumbnail_url" field.
func ThumbnailURLNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldThumbnailURL))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// VideoThumbnailURLEQ applies the EQ predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLNEQ applies the NEQ predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLIn applies the In predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldVideoThumbnailURL, vs...))
}

// VideoThumbnailURLNotIn applies the NotIn predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldVideoThumbnailURL, vs...))
}

// VideoThumbnailURLGT applies the GT predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLGTE applies the GTE predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLLT applies the LT predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLLTE applies the LTE predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLContains applies the Contains predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLHasPrefix applies the HasPrefix predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLHasSuffix applies the HasSuffix predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLIsNil applies the IsNil predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldVideoThumbnailURL))
}

// VideoThumbnailURLNotNil applies the NotNil predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldVideoThumbnailURL))
}

// VideoThumbnailURLEqualFold applies the EqualFold predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldVideoThumbnailURL, v))
}

// VideoThumbnailURLContainsFold applies the ContainsFold predicate on the "video_thumbnail_url" field.
func VideoThumbnailURLContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldVideoThumbnailURL, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldDuration))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldDuration, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldCapacity, v))
}

// CapacityIsNil applies the IsNil predicate on the "capacity" field.
func CapacityIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldCapacity))
}

// CapacityNotNil applies the NotNil predicate on the "capacity" field.
func CapacityNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldCapacity))
}

// ApplicationDeadlineEQ applies the EQ predicate on the "application_deadline" field.
func ApplicationDeadlineEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldApplicationDeadline, v))
}

// ApplicationDeadlineNEQ applies the NEQ predicate on the "application_deadline" field.
func ApplicationDeadlineNEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldApplicationDeadline, v))
}

// ApplicationDeadlineIn applies the In predicate on the "application_deadline" field.
func ApplicationDeadlineIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldApplicationDeadline, vs...))
}

// ApplicationDeadlineNotIn applies the NotIn predicate on the "application_deadline" field.
func ApplicationDeadlineNotIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldApplicationDeadline, vs...))
}

// ApplicationDeadlineGT applies the GT predicate on the "application_deadline" field.
func ApplicationDeadlineGT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldApplicationDeadline, v))
}

// ApplicationDeadlineGTE applies the GTE predicate on the "application_deadline" field.
func ApplicationDeadlineGTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldApplicationDeadline, v))
}

// ApplicationDeadlineLT applies the LT predicate on the "application_deadline" field.
func ApplicationDeadlineLT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldApplicationDeadline, v))
}

// ApplicationDeadlineLTE applies the LTE predicate on the "application_deadline" field.
func ApplicationDeadlineLTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldApplicationDeadline, v))
}

// ApplicationDeadlineIsNil applies the IsNil predicate on the "application_deadline" field.
func ApplicationDeadlineIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldApplicationDeadline))
}

// ApplicationDeadlineNotNil applies the NotNil predicate on the "application_deadline" field.
func ApplicationDeadlineNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldApplicationDeadline))
}

// MinAgeEQ applies the EQ predicate on the "min_age" field.
func MinAgeEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldMinAge, v))
}

// MinAgeNEQ applies the NEQ predicate on the "min_age" field.
func MinAgeNEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldMinAge, v))
}

// MinAgeIn applies the In predicate on the "min_age" field.
func MinAgeIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldMinAge, vs...))
}

// MinAgeNotIn applies the NotIn predicate on the "min_age" field.
func MinAgeNotIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldMinAge, vs...))
}

// MinAgeGT applies the GT predicate on the "min_age" field.
func MinAgeGT(v int) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldMinAge, v))
}

// MinAgeGTE applies the GTE predicate on the "min_age" field.
func MinAgeGTE(v int) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldMinAge, v))
}

// MinAgeLT applies the LT predicate on the "min_age" field.
func MinAgeLT(v int) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldMinAge, v))
}

// MinAgeLTE applies the LTE predicate on the "min_age" field.
func MinAgeLTE(v int) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldMinAge, v))
}

// MinAgeIsNil applies the IsNil predicate on the "min_age" field.
func MinAgeIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldMinAge))
}

// MinAgeNotNil applies the NotNil predicate on the "min_age" field.
func MinAgeNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldMinAge))
}

// MaxAgeEQ applies the EQ predicate on the "max_age" field.
func MaxAgeEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldMaxAge, v))
}

// MaxAgeNEQ applies the NEQ predicate on the "max_age" field.
func MaxAgeNEQ(v int) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldMaxAge, v))
}

// MaxAgeIn applies the In predicate on the "max_age" field.
func MaxAgeIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldMaxAge, vs...))
}

// MaxAgeNotIn applies the NotIn predicate on the "max_age" field.
func MaxAgeNotIn(vs ...int) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldMaxAge, vs...))
}

// MaxAgeGT applies the GT predicate on the "max_age" field.
func MaxAgeGT(v int) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldMaxAge, v))
}

// MaxAgeGTE applies the GTE predicate on the "max_age" field.
func MaxAgeGTE(v int) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldMaxAge, v))
}

// MaxAgeLT applies the LT predicate on the "max_age" field.
func MaxAgeLT(v int) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldMaxAge, v))
}

// MaxAgeLTE applies the LTE predicate on the "max_age" field.
func MaxAgeLTE(v int) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldMaxAge, v))
}

// MaxAgeIsNil applies the IsNil predicate on the "max_age" field.
func MaxAgeIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldMaxAge))
}

// MaxAgeNotNil applies the NotNil predicate on the "max_age" field.
func MaxAgeNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldMaxAge))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldCost, v))
}

// CostIsNil applies the IsNil predicate on the "cost" field.
func CostIsNil() predicate.Program {
	return predicate.Program(sql.FieldIsNull(FieldCost))
}

// CostNotNil applies the NotNil predicate on the "cost" field.
func CostNotNil() predicate.Program {
	return predicate.Program(sql.FieldNotNull(FieldCost))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Program {
	return predicate.Program(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Program {
	return predicate.Program(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Program {
	return predicate.Program(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Program {
	return predicate.Program(sql.FieldContainsFold(FieldCurrency, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Program {
	return predicate.Program(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Program {
	return predicate.Program(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.ProgramCategory) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnrolments applies the HasEdge predicate on the "enrolments" edge.
func HasEnrolments() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnrolmentsTable, EnrolmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnrolmentsWith applies the HasEdge predicate on the "enrolments" edge with a given conditions (other predicates).
func HasEnrolmentsWith(preds ...predicate.ProgramEnrolment) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newEnrolmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipants applies the HasEdge predicate on the "participants" edge.
func HasParticipants() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantsTable, ParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantsWith applies the HasEdge predicate on the "participants" edge with a given conditions (other predicates).
func HasParticipantsWith(preds ...predicate.ProgramParticipant) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UpdatedByTable, UpdatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.User) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newUpdatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramCardItems applies the HasEdge predicate on the "program_card_items" edge.
func HasProgramCardItems() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgramCardItemsTable, ProgramCardItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramCardItemsWith applies the HasEdge predicate on the "program_card_items" edge with a given conditions (other predicates).
func HasProgramCardItemsWith(preds ...predicate.ProgramCardItem) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newProgramCardItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuccessStories applies the HasEdge predicate on the "success_stories" edge.
func HasSuccessStories() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuccessStoriesTable, SuccessStoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuccessStoriesWith applies the HasEdge predicate on the "success_stories" edge with a given conditions (other predicates).
func HasSuccessStoriesWith(preds ...predicate.SuccessStory) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newSuccessStoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVolunteerOpportunities applies the HasEdge predicate on the "volunteer_opportunities" edge.
func HasVolunteerOpportunities() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VolunteerOpportunitiesTable, VolunteerOpportunitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolunteerOpportunitiesWith applies the HasEdge predicate on the "volunteer_opportunities" edge with a given conditions (other predicates).
func HasVolunteerOpportunitiesWith(preds ...predicate.VolunteerOpportunity) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newVolunteerOpportunitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFundraisingCampaigns applies the HasEdge predicate on the "fundraising_campaigns" edge.
func HasFundraisingCampaigns() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FundraisingCampaignsTable, FundraisingCampaignsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFundraisingCampaignsWith applies the HasEdge predicate on the "fundraising_campaigns" edge with a given conditions (other predicates).
func HasFundraisingCampaignsWith(preds ...predicate.FundraisingCampaign) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newFundraisingCampaignsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDonations applies the HasEdge predicate on the "donations" edge.
func HasDonations() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonationsWith applies the HasEdge predicate on the "donations" edge with a given conditions (other predicates).
func HasDonationsWith(preds ...predicate.Donation) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newDonationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGrants applies the HasEdge predicate on the "grants" edge.
func HasGrants() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GrantsTable, GrantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantsWith applies the HasEdge predicate on the "grants" edge with a given conditions (other predicates).
func HasGrantsWith(preds ...predicate.Grant) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newGrantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSiteVisits applies the HasEdge predicate on the "site_visits" edge.
func HasSiteVisits() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SiteVisitsTable, SiteVisitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteVisitsWith applies the HasEdge predicate on the "site_visits" edge with a given conditions (other predicates).
func HasSiteVisitsWith(preds ...predicate.SiteVisit) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newSiteVisitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImpactMetrics applies the HasEdge predicate on the "impact_metrics" edge.
func HasImpactMetrics() predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImpactMetricsTable, ImpactMetricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImpactMetricsWith applies the HasEdge predicate on the "impact_metrics" edge with a given conditions (other predicates).
func HasImpactMetricsWith(preds ...predicate.ImpactMetric) predicate.Program {
	return predicate.Program(func(s *sql.Selector) {
		step := newImpactMetricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Program) predicate.Program {
	return predicate.Program(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Program) predicate.Program {
	return predicate.Program(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Program) predicate.Program {
	return predicate.Program(sql.NotPredicates(p))
}
