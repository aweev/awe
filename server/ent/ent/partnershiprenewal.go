// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershiprenewal"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PartnershipRenewal is the model entity for the PartnershipRenewal schema.
type PartnershipRenewal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PreviousEndDate holds the value of the "previous_end_date" field.
	PreviousEndDate time.Time `json:"previous_end_date,omitempty"`
	// NewEndDate holds the value of the "new_end_date" field.
	NewEndDate time.Time `json:"new_end_date,omitempty"`
	// RenewalValue holds the value of the "renewal_value" field.
	RenewalValue float64 `json:"renewal_value,omitempty"`
	// RenewalTerms holds the value of the "renewal_terms" field.
	RenewalTerms map[string]interface{} `json:"renewal_terms,omitempty"`
	// NegotiatedBy holds the value of the "negotiated_by" field.
	NegotiatedBy string `json:"negotiated_by,omitempty"`
	// ApprovedBy holds the value of the "approved_by" field.
	ApprovedBy string `json:"approved_by,omitempty"`
	// ApprovedAt holds the value of the "approved_at" field.
	ApprovedAt time.Time `json:"approved_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnershipRenewalQuery when eager-loading is set.
	Edges                PartnershipRenewalEdges `json:"edges"`
	partnership_renewals *int
	selectValues         sql.SelectValues
}

// PartnershipRenewalEdges holds the relations/edges for other nodes in the graph.
type PartnershipRenewalEdges struct {
	// Partnership holds the value of the partnership edge.
	Partnership *Partnership `json:"partnership,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartnershipOrErr returns the Partnership value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnershipRenewalEdges) PartnershipOrErr() (*Partnership, error) {
	if e.Partnership != nil {
		return e.Partnership, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: partnership.Label}
	}
	return nil, &NotLoadedError{edge: "partnership"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartnershipRenewal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partnershiprenewal.FieldRenewalTerms:
			values[i] = new([]byte)
		case partnershiprenewal.FieldRenewalValue:
			values[i] = new(sql.NullFloat64)
		case partnershiprenewal.FieldID:
			values[i] = new(sql.NullInt64)
		case partnershiprenewal.FieldNegotiatedBy, partnershiprenewal.FieldApprovedBy:
			values[i] = new(sql.NullString)
		case partnershiprenewal.FieldPreviousEndDate, partnershiprenewal.FieldNewEndDate, partnershiprenewal.FieldApprovedAt, partnershiprenewal.FieldCreatedAt, partnershiprenewal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case partnershiprenewal.ForeignKeys[0]: // partnership_renewals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartnershipRenewal fields.
func (_m *PartnershipRenewal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partnershiprenewal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case partnershiprenewal.FieldPreviousEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field previous_end_date", values[i])
			} else if value.Valid {
				_m.PreviousEndDate = value.Time
			}
		case partnershiprenewal.FieldNewEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field new_end_date", values[i])
			} else if value.Valid {
				_m.NewEndDate = value.Time
			}
		case partnershiprenewal.FieldRenewalValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_value", values[i])
			} else if value.Valid {
				_m.RenewalValue = value.Float64
			}
		case partnershiprenewal.FieldRenewalTerms:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_terms", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RenewalTerms); err != nil {
					return fmt.Errorf("unmarshal field renewal_terms: %w", err)
				}
			}
		case partnershiprenewal.FieldNegotiatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field negotiated_by", values[i])
			} else if value.Valid {
				_m.NegotiatedBy = value.String
			}
		case partnershiprenewal.FieldApprovedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by", values[i])
			} else if value.Valid {
				_m.ApprovedBy = value.String
			}
		case partnershiprenewal.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_at", values[i])
			} else if value.Valid {
				_m.ApprovedAt = value.Time
			}
		case partnershiprenewal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case partnershiprenewal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case partnershiprenewal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field partnership_renewals", value)
			} else if value.Valid {
				_m.partnership_renewals = new(int)
				*_m.partnership_renewals = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PartnershipRenewal.
// This includes values selected through modifiers, order, etc.
func (_m *PartnershipRenewal) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPartnership queries the "partnership" edge of the PartnershipRenewal entity.
func (_m *PartnershipRenewal) QueryPartnership() *PartnershipQuery {
	return NewPartnershipRenewalClient(_m.config).QueryPartnership(_m)
}

// Update returns a builder for updating this PartnershipRenewal.
// Note that you need to call PartnershipRenewal.Unwrap() before calling this method if this PartnershipRenewal
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PartnershipRenewal) Update() *PartnershipRenewalUpdateOne {
	return NewPartnershipRenewalClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PartnershipRenewal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PartnershipRenewal) Unwrap() *PartnershipRenewal {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartnershipRenewal is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PartnershipRenewal) String() string {
	var builder strings.Builder
	builder.WriteString("PartnershipRenewal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("previous_end_date=")
	builder.WriteString(_m.PreviousEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("new_end_date=")
	builder.WriteString(_m.NewEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("renewal_value=")
	builder.WriteString(fmt.Sprintf("%v", _m.RenewalValue))
	builder.WriteString(", ")
	builder.WriteString("renewal_terms=")
	builder.WriteString(fmt.Sprintf("%v", _m.RenewalTerms))
	builder.WriteString(", ")
	builder.WriteString("negotiated_by=")
	builder.WriteString(_m.NegotiatedBy)
	builder.WriteString(", ")
	builder.WriteString("approved_by=")
	builder.WriteString(_m.ApprovedBy)
	builder.WriteString(", ")
	builder.WriteString("approved_at=")
	builder.WriteString(_m.ApprovedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PartnershipRenewals is a parsable slice of PartnershipRenewal.
type PartnershipRenewals []*PartnershipRenewal
