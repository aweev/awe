// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/user"
	"awe/ent/ent/usersession"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSessionCreate is the builder for creating a UserSession entity.
type UserSessionCreate struct {
	config
	mutation *UserSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSessionToken sets the "session_token" field.
func (_c *UserSessionCreate) SetSessionToken(v string) *UserSessionCreate {
	_c.mutation.SetSessionToken(v)
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *UserSessionCreate) SetExpiresAt(v time.Time) *UserSessionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *UserSessionCreate) SetIPAddress(v string) *UserSessionCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *UserSessionCreate) SetNillableIPAddress(v *string) *UserSessionCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *UserSessionCreate) SetUserAgent(v string) *UserSessionCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *UserSessionCreate) SetNillableUserAgent(v *string) *UserSessionCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserSessionCreate) SetCreatedAt(v time.Time) *UserSessionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserSessionCreate) SetNillableCreatedAt(v *time.Time) *UserSessionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetLastAccessed sets the "last_accessed" field.
func (_c *UserSessionCreate) SetLastAccessed(v time.Time) *UserSessionCreate {
	_c.mutation.SetLastAccessed(v)
	return _c
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (_c *UserSessionCreate) SetNillableLastAccessed(v *time.Time) *UserSessionCreate {
	if v != nil {
		_c.SetLastAccessed(*v)
	}
	return _c
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (_c *UserSessionCreate) SetDeviceFingerprint(v string) *UserSessionCreate {
	_c.mutation.SetDeviceFingerprint(v)
	return _c
}

// SetNillableDeviceFingerprint sets the "device_fingerprint" field if the given value is not nil.
func (_c *UserSessionCreate) SetNillableDeviceFingerprint(v *string) *UserSessionCreate {
	if v != nil {
		_c.SetDeviceFingerprint(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserSessionCreate) SetUserID(id int) *UserSessionCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserSessionCreate) SetUser(v *User) *UserSessionCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the UserSessionMutation object of the builder.
func (_c *UserSessionCreate) Mutation() *UserSessionMutation {
	return _c.mutation
}

// Save creates the UserSession in the database.
func (_c *UserSessionCreate) Save(ctx context.Context) (*UserSession, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserSessionCreate) SaveX(ctx context.Context) *UserSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserSessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserSessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserSessionCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := usersession.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.LastAccessed(); !ok {
		v := usersession.DefaultLastAccessed()
		_c.mutation.SetLastAccessed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserSessionCreate) check() error {
	if _, ok := _c.mutation.SessionToken(); !ok {
		return &ValidationError{Name: "session_token", err: errors.New(`ent: missing required field "UserSession.session_token"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "UserSession.expires_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserSession.created_at"`)}
	}
	if _, ok := _c.mutation.LastAccessed(); !ok {
		return &ValidationError{Name: "last_accessed", err: errors.New(`ent: missing required field "UserSession.last_accessed"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserSession.user"`)}
	}
	return nil
}

func (_c *UserSessionCreate) sqlSave(ctx context.Context) (*UserSession, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserSessionCreate) createSpec() (*UserSession, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSession{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(usersession.Table, sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.SessionToken(); ok {
		_spec.SetField(usersession.FieldSessionToken, field.TypeString, value)
		_node.SessionToken = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(usersession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(usersession.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(usersession.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(usersession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.LastAccessed(); ok {
		_spec.SetField(usersession.FieldLastAccessed, field.TypeTime, value)
		_node.LastAccessed = value
	}
	if value, ok := _c.mutation.DeviceFingerprint(); ok {
		_spec.SetField(usersession.FieldDeviceFingerprint, field.TypeString, value)
		_node.DeviceFingerprint = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSession.Create().
//		SetSessionToken(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionUpsert) {
//			SetSessionToken(v+v).
//		}).
//		Exec(ctx)
func (_c *UserSessionCreate) OnConflict(opts ...sql.ConflictOption) *UserSessionUpsertOne {
	_c.conflict = opts
	return &UserSessionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserSessionCreate) OnConflictColumns(columns ...string) *UserSessionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserSessionUpsertOne{
		create: _c,
	}
}

type (
	// UserSessionUpsertOne is the builder for "upsert"-ing
	//  one UserSession node.
	UserSessionUpsertOne struct {
		create *UserSessionCreate
	}

	// UserSessionUpsert is the "OnConflict" setter.
	UserSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetSessionToken sets the "session_token" field.
func (u *UserSessionUpsert) SetSessionToken(v string) *UserSessionUpsert {
	u.Set(usersession.FieldSessionToken, v)
	return u
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateSessionToken() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldSessionToken)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserSessionUpsert) SetExpiresAt(v time.Time) *UserSessionUpsert {
	u.Set(usersession.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateExpiresAt() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldExpiresAt)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *UserSessionUpsert) SetIPAddress(v string) *UserSessionUpsert {
	u.Set(usersession.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateIPAddress() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *UserSessionUpsert) ClearIPAddress() *UserSessionUpsert {
	u.SetNull(usersession.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *UserSessionUpsert) SetUserAgent(v string) *UserSessionUpsert {
	u.Set(usersession.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateUserAgent() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *UserSessionUpsert) ClearUserAgent() *UserSessionUpsert {
	u.SetNull(usersession.FieldUserAgent)
	return u
}

// SetLastAccessed sets the "last_accessed" field.
func (u *UserSessionUpsert) SetLastAccessed(v time.Time) *UserSessionUpsert {
	u.Set(usersession.FieldLastAccessed, v)
	return u
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateLastAccessed() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldLastAccessed)
	return u
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (u *UserSessionUpsert) SetDeviceFingerprint(v string) *UserSessionUpsert {
	u.Set(usersession.FieldDeviceFingerprint, v)
	return u
}

// UpdateDeviceFingerprint sets the "device_fingerprint" field to the value that was provided on create.
func (u *UserSessionUpsert) UpdateDeviceFingerprint() *UserSessionUpsert {
	u.SetExcluded(usersession.FieldDeviceFingerprint)
	return u
}

// ClearDeviceFingerprint clears the value of the "device_fingerprint" field.
func (u *UserSessionUpsert) ClearDeviceFingerprint() *UserSessionUpsert {
	u.SetNull(usersession.FieldDeviceFingerprint)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserSessionUpsertOne) UpdateNewValues() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usersession.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserSessionUpsertOne) Ignore() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionUpsertOne) DoNothing() *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionCreate.OnConflict
// documentation for more info.
func (u *UserSessionUpsertOne) Update(set func(*UserSessionUpsert)) *UserSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetSessionToken sets the "session_token" field.
func (u *UserSessionUpsertOne) SetSessionToken(v string) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetSessionToken(v)
	})
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateSessionToken() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateSessionToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserSessionUpsertOne) SetExpiresAt(v time.Time) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateExpiresAt() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *UserSessionUpsertOne) SetIPAddress(v string) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateIPAddress() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *UserSessionUpsertOne) ClearIPAddress() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *UserSessionUpsertOne) SetUserAgent(v string) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateUserAgent() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *UserSessionUpsertOne) ClearUserAgent() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearUserAgent()
	})
}

// SetLastAccessed sets the "last_accessed" field.
func (u *UserSessionUpsertOne) SetLastAccessed(v time.Time) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetLastAccessed(v)
	})
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateLastAccessed() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateLastAccessed()
	})
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (u *UserSessionUpsertOne) SetDeviceFingerprint(v string) *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetDeviceFingerprint(v)
	})
}

// UpdateDeviceFingerprint sets the "device_fingerprint" field to the value that was provided on create.
func (u *UserSessionUpsertOne) UpdateDeviceFingerprint() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateDeviceFingerprint()
	})
}

// ClearDeviceFingerprint clears the value of the "device_fingerprint" field.
func (u *UserSessionUpsertOne) ClearDeviceFingerprint() *UserSessionUpsertOne {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearDeviceFingerprint()
	})
}

// Exec executes the query.
func (u *UserSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserSessionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserSessionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserSessionCreateBulk is the builder for creating many UserSession entities in bulk.
type UserSessionCreateBulk struct {
	config
	err      error
	builders []*UserSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the UserSession entities in the database.
func (_c *UserSessionCreateBulk) Save(ctx context.Context) ([]*UserSession, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserSession, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserSessionCreateBulk) SaveX(ctx context.Context) []*UserSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserSessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserSessionUpsert) {
//			SetSessionToken(v+v).
//		}).
//		Exec(ctx)
func (_c *UserSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserSessionUpsertBulk {
	_c.conflict = opts
	return &UserSessionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserSessionCreateBulk) OnConflictColumns(columns ...string) *UserSessionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserSessionUpsertBulk{
		create: _c,
	}
}

// UserSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of UserSession nodes.
type UserSessionUpsertBulk struct {
	create *UserSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserSessionUpsertBulk) UpdateNewValues() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usersession.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserSessionUpsertBulk) Ignore() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserSessionUpsertBulk) DoNothing() *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserSessionCreateBulk.OnConflict
// documentation for more info.
func (u *UserSessionUpsertBulk) Update(set func(*UserSessionUpsert)) *UserSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetSessionToken sets the "session_token" field.
func (u *UserSessionUpsertBulk) SetSessionToken(v string) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetSessionToken(v)
	})
}

// UpdateSessionToken sets the "session_token" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateSessionToken() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateSessionToken()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *UserSessionUpsertBulk) SetExpiresAt(v time.Time) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateExpiresAt() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *UserSessionUpsertBulk) SetIPAddress(v string) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateIPAddress() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *UserSessionUpsertBulk) ClearIPAddress() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *UserSessionUpsertBulk) SetUserAgent(v string) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateUserAgent() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *UserSessionUpsertBulk) ClearUserAgent() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearUserAgent()
	})
}

// SetLastAccessed sets the "last_accessed" field.
func (u *UserSessionUpsertBulk) SetLastAccessed(v time.Time) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetLastAccessed(v)
	})
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateLastAccessed() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateLastAccessed()
	})
}

// SetDeviceFingerprint sets the "device_fingerprint" field.
func (u *UserSessionUpsertBulk) SetDeviceFingerprint(v string) *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.SetDeviceFingerprint(v)
	})
}

// UpdateDeviceFingerprint sets the "device_fingerprint" field to the value that was provided on create.
func (u *UserSessionUpsertBulk) UpdateDeviceFingerprint() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.UpdateDeviceFingerprint()
	})
}

// ClearDeviceFingerprint clears the value of the "device_fingerprint" field.
func (u *UserSessionUpsertBulk) ClearDeviceFingerprint() *UserSessionUpsertBulk {
	return u.Update(func(s *UserSessionUpsert) {
		s.ClearDeviceFingerprint()
	})
}

// Exec executes the query.
func (u *UserSessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
