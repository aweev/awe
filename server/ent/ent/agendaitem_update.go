// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/actionitem"
	"awe/ent/ent/agenda"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/predicate"
	"awe/ent/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgendaItemUpdate is the builder for updating AgendaItem entities.
type AgendaItemUpdate struct {
	config
	hooks    []Hook
	mutation *AgendaItemMutation
}

// Where appends a list predicates to the AgendaItemUpdate builder.
func (_u *AgendaItemUpdate) Where(ps ...predicate.AgendaItem) *AgendaItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *AgendaItemUpdate) SetOrder(v int) *AgendaItemUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillableOrder(v *int) *AgendaItemUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *AgendaItemUpdate) AddOrder(v int) *AgendaItemUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *AgendaItemUpdate) SetTitle(v string) *AgendaItemUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillableTitle(v *string) *AgendaItemUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetPresenter sets the "presenter" field.
func (_u *AgendaItemUpdate) SetPresenter(v string) *AgendaItemUpdate {
	_u.mutation.SetPresenter(v)
	return _u
}

// SetNillablePresenter sets the "presenter" field if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillablePresenter(v *string) *AgendaItemUpdate {
	if v != nil {
		_u.SetPresenter(*v)
	}
	return _u
}

// ClearPresenter clears the value of the "presenter" field.
func (_u *AgendaItemUpdate) ClearPresenter() *AgendaItemUpdate {
	_u.mutation.ClearPresenter()
	return _u
}

// SetNotes sets the "notes" field.
func (_u *AgendaItemUpdate) SetNotes(v string) *AgendaItemUpdate {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillableNotes(v *string) *AgendaItemUpdate {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *AgendaItemUpdate) ClearNotes() *AgendaItemUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *AgendaItemUpdate) SetDuration(v int) *AgendaItemUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillableDuration(v *int) *AgendaItemUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *AgendaItemUpdate) AddDuration(v int) *AgendaItemUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *AgendaItemUpdate) ClearDuration() *AgendaItemUpdate {
	_u.mutation.ClearDuration()
	return _u
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *AgendaItemUpdate) SetAgendaID(id int) *AgendaItemUpdate {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *AgendaItemUpdate) SetAgenda(v *Agenda) *AgendaItemUpdate {
	return _u.SetAgendaID(v.ID)
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *AgendaItemUpdate) SetVoteID(id int) *AgendaItemUpdate {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetNillableVoteID sets the "vote" edge to the Vote entity by ID if the given value is not nil.
func (_u *AgendaItemUpdate) SetNillableVoteID(id *int) *AgendaItemUpdate {
	if id != nil {
		_u = _u.SetVoteID(*id)
	}
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *AgendaItemUpdate) SetVote(v *Vote) *AgendaItemUpdate {
	return _u.SetVoteID(v.ID)
}

// AddActionItemIDs adds the "action_items" edge to the ActionItem entity by IDs.
func (_u *AgendaItemUpdate) AddActionItemIDs(ids ...int) *AgendaItemUpdate {
	_u.mutation.AddActionItemIDs(ids...)
	return _u
}

// AddActionItems adds the "action_items" edges to the ActionItem entity.
func (_u *AgendaItemUpdate) AddActionItems(v ...*ActionItem) *AgendaItemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionItemIDs(ids...)
}

// Mutation returns the AgendaItemMutation object of the builder.
func (_u *AgendaItemUpdate) Mutation() *AgendaItemMutation {
	return _u.mutation
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *AgendaItemUpdate) ClearAgenda() *AgendaItemUpdate {
	_u.mutation.ClearAgenda()
	return _u
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *AgendaItemUpdate) ClearVote() *AgendaItemUpdate {
	_u.mutation.ClearVote()
	return _u
}

// ClearActionItems clears all "action_items" edges to the ActionItem entity.
func (_u *AgendaItemUpdate) ClearActionItems() *AgendaItemUpdate {
	_u.mutation.ClearActionItems()
	return _u
}

// RemoveActionItemIDs removes the "action_items" edge to ActionItem entities by IDs.
func (_u *AgendaItemUpdate) RemoveActionItemIDs(ids ...int) *AgendaItemUpdate {
	_u.mutation.RemoveActionItemIDs(ids...)
	return _u
}

// RemoveActionItems removes "action_items" edges to ActionItem entities.
func (_u *AgendaItemUpdate) RemoveActionItems(v ...*ActionItem) *AgendaItemUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AgendaItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AgendaItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AgendaItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AgendaItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AgendaItemUpdate) check() error {
	if _u.mutation.AgendaCleared() && len(_u.mutation.AgendaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgendaItem.agenda"`)
	}
	return nil
}

func (_u *AgendaItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agendaitem.Table, agendaitem.Columns, sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(agendaitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(agendaitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(agendaitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Presenter(); ok {
		_spec.SetField(agendaitem.FieldPresenter, field.TypeString, value)
	}
	if _u.mutation.PresenterCleared() {
		_spec.ClearField(agendaitem.FieldPresenter, field.TypeString)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(agendaitem.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(agendaitem.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(agendaitem.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(agendaitem.FieldDuration, field.TypeInt, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(agendaitem.FieldDuration, field.TypeInt)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionItemsIDs(); len(nodes) > 0 && !_u.mutation.ActionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agendaitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AgendaItemUpdateOne is the builder for updating a single AgendaItem entity.
type AgendaItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgendaItemMutation
}

// SetOrder sets the "order" field.
func (_u *AgendaItemUpdateOne) SetOrder(v int) *AgendaItemUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillableOrder(v *int) *AgendaItemUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *AgendaItemUpdateOne) AddOrder(v int) *AgendaItemUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *AgendaItemUpdateOne) SetTitle(v string) *AgendaItemUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillableTitle(v *string) *AgendaItemUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetPresenter sets the "presenter" field.
func (_u *AgendaItemUpdateOne) SetPresenter(v string) *AgendaItemUpdateOne {
	_u.mutation.SetPresenter(v)
	return _u
}

// SetNillablePresenter sets the "presenter" field if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillablePresenter(v *string) *AgendaItemUpdateOne {
	if v != nil {
		_u.SetPresenter(*v)
	}
	return _u
}

// ClearPresenter clears the value of the "presenter" field.
func (_u *AgendaItemUpdateOne) ClearPresenter() *AgendaItemUpdateOne {
	_u.mutation.ClearPresenter()
	return _u
}

// SetNotes sets the "notes" field.
func (_u *AgendaItemUpdateOne) SetNotes(v string) *AgendaItemUpdateOne {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillableNotes(v *string) *AgendaItemUpdateOne {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *AgendaItemUpdateOne) ClearNotes() *AgendaItemUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *AgendaItemUpdateOne) SetDuration(v int) *AgendaItemUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillableDuration(v *int) *AgendaItemUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *AgendaItemUpdateOne) AddDuration(v int) *AgendaItemUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *AgendaItemUpdateOne) ClearDuration() *AgendaItemUpdateOne {
	_u.mutation.ClearDuration()
	return _u
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_u *AgendaItemUpdateOne) SetAgendaID(id int) *AgendaItemUpdateOne {
	_u.mutation.SetAgendaID(id)
	return _u
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_u *AgendaItemUpdateOne) SetAgenda(v *Agenda) *AgendaItemUpdateOne {
	return _u.SetAgendaID(v.ID)
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *AgendaItemUpdateOne) SetVoteID(id int) *AgendaItemUpdateOne {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetNillableVoteID sets the "vote" edge to the Vote entity by ID if the given value is not nil.
func (_u *AgendaItemUpdateOne) SetNillableVoteID(id *int) *AgendaItemUpdateOne {
	if id != nil {
		_u = _u.SetVoteID(*id)
	}
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *AgendaItemUpdateOne) SetVote(v *Vote) *AgendaItemUpdateOne {
	return _u.SetVoteID(v.ID)
}

// AddActionItemIDs adds the "action_items" edge to the ActionItem entity by IDs.
func (_u *AgendaItemUpdateOne) AddActionItemIDs(ids ...int) *AgendaItemUpdateOne {
	_u.mutation.AddActionItemIDs(ids...)
	return _u
}

// AddActionItems adds the "action_items" edges to the ActionItem entity.
func (_u *AgendaItemUpdateOne) AddActionItems(v ...*ActionItem) *AgendaItemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionItemIDs(ids...)
}

// Mutation returns the AgendaItemMutation object of the builder.
func (_u *AgendaItemUpdateOne) Mutation() *AgendaItemMutation {
	return _u.mutation
}

// ClearAgenda clears the "agenda" edge to the Agenda entity.
func (_u *AgendaItemUpdateOne) ClearAgenda() *AgendaItemUpdateOne {
	_u.mutation.ClearAgenda()
	return _u
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *AgendaItemUpdateOne) ClearVote() *AgendaItemUpdateOne {
	_u.mutation.ClearVote()
	return _u
}

// ClearActionItems clears all "action_items" edges to the ActionItem entity.
func (_u *AgendaItemUpdateOne) ClearActionItems() *AgendaItemUpdateOne {
	_u.mutation.ClearActionItems()
	return _u
}

// RemoveActionItemIDs removes the "action_items" edge to ActionItem entities by IDs.
func (_u *AgendaItemUpdateOne) RemoveActionItemIDs(ids ...int) *AgendaItemUpdateOne {
	_u.mutation.RemoveActionItemIDs(ids...)
	return _u
}

// RemoveActionItems removes "action_items" edges to ActionItem entities.
func (_u *AgendaItemUpdateOne) RemoveActionItems(v ...*ActionItem) *AgendaItemUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionItemIDs(ids...)
}

// Where appends a list predicates to the AgendaItemUpdate builder.
func (_u *AgendaItemUpdateOne) Where(ps ...predicate.AgendaItem) *AgendaItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AgendaItemUpdateOne) Select(field string, fields ...string) *AgendaItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AgendaItem entity.
func (_u *AgendaItemUpdateOne) Save(ctx context.Context) (*AgendaItem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AgendaItemUpdateOne) SaveX(ctx context.Context) *AgendaItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AgendaItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AgendaItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AgendaItemUpdateOne) check() error {
	if _u.mutation.AgendaCleared() && len(_u.mutation.AgendaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgendaItem.agenda"`)
	}
	return nil
}

func (_u *AgendaItemUpdateOne) sqlSave(ctx context.Context) (_node *AgendaItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agendaitem.Table, agendaitem.Columns, sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgendaItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agendaitem.FieldID)
		for _, f := range fields {
			if !agendaitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agendaitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(agendaitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(agendaitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(agendaitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Presenter(); ok {
		_spec.SetField(agendaitem.FieldPresenter, field.TypeString, value)
	}
	if _u.mutation.PresenterCleared() {
		_spec.ClearField(agendaitem.FieldPresenter, field.TypeString)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(agendaitem.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(agendaitem.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(agendaitem.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(agendaitem.FieldDuration, field.TypeInt, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(agendaitem.FieldDuration, field.TypeInt)
	}
	if _u.mutation.AgendaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionItemsIDs(); len(nodes) > 0 && !_u.mutation.ActionItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgendaItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agendaitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
