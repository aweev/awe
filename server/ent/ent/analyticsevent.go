// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsevent"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AnalyticsEvent is the model entity for the AnalyticsEvent schema.
type AnalyticsEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventName holds the value of the "event_name" field.
	EventName string `json:"event_name,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnalyticsEventQuery when eager-loading is set.
	Edges                 AnalyticsEventEdges `json:"edges"`
	user_analytics_events *int
	selectValues          sql.SelectValues
}

// AnalyticsEventEdges holds the relations/edges for other nodes in the graph.
type AnalyticsEventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnalyticsEventEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnalyticsEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case analyticsevent.FieldProperties:
			values[i] = new([]byte)
		case analyticsevent.FieldID:
			values[i] = new(sql.NullInt64)
		case analyticsevent.FieldEventName:
			values[i] = new(sql.NullString)
		case analyticsevent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case analyticsevent.ForeignKeys[0]: // user_analytics_events
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnalyticsEvent fields.
func (_m *AnalyticsEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case analyticsevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case analyticsevent.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				_m.EventName = value.String
			}
		case analyticsevent.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		case analyticsevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case analyticsevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_analytics_events", value)
			} else if value.Valid {
				_m.user_analytics_events = new(int)
				*_m.user_analytics_events = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AnalyticsEvent.
// This includes values selected through modifiers, order, etc.
func (_m *AnalyticsEvent) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AnalyticsEvent entity.
func (_m *AnalyticsEvent) QueryUser() *UserQuery {
	return NewAnalyticsEventClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this AnalyticsEvent.
// Note that you need to call AnalyticsEvent.Unwrap() before calling this method if this AnalyticsEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AnalyticsEvent) Update() *AnalyticsEventUpdateOne {
	return NewAnalyticsEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AnalyticsEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AnalyticsEvent) Unwrap() *AnalyticsEvent {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnalyticsEvent is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AnalyticsEvent) String() string {
	var builder strings.Builder
	builder.WriteString("AnalyticsEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("event_name=")
	builder.WriteString(_m.EventName)
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", _m.Properties))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AnalyticsEvents is a parsable slice of AnalyticsEvent.
type AnalyticsEvents []*AnalyticsEvent
