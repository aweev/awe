// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandConfigCreate is the builder for creating a BrandConfig entity.
type BrandConfigCreate struct {
	config
	mutation *BrandConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSingleton sets the "singleton" field.
func (_c *BrandConfigCreate) SetSingleton(v string) *BrandConfigCreate {
	_c.mutation.SetSingleton(v)
	return _c
}

// SetName sets the "name" field.
func (_c *BrandConfigCreate) SetName(v string) *BrandConfigCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *BrandConfigCreate) SetNillableName(v *string) *BrandConfigCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetLogoURL sets the "logo_url" field.
func (_c *BrandConfigCreate) SetLogoURL(v string) *BrandConfigCreate {
	_c.mutation.SetLogoURL(v)
	return _c
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_c *BrandConfigCreate) SetNillableLogoURL(v *string) *BrandConfigCreate {
	if v != nil {
		_c.SetLogoURL(*v)
	}
	return _c
}

// SetColors sets the "colors" field.
func (_c *BrandConfigCreate) SetColors(v map[string]string) *BrandConfigCreate {
	_c.mutation.SetColors(v)
	return _c
}

// SetContact sets the "contact" field.
func (_c *BrandConfigCreate) SetContact(v map[string]string) *BrandConfigCreate {
	_c.mutation.SetContact(v)
	return _c
}

// SetSocial sets the "social" field.
func (_c *BrandConfigCreate) SetSocial(v map[string]string) *BrandConfigCreate {
	_c.mutation.SetSocial(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BrandConfigCreate) SetUpdatedAt(v time.Time) *BrandConfigCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BrandConfigCreate) SetNillableUpdatedAt(v *time.Time) *BrandConfigCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// Mutation returns the BrandConfigMutation object of the builder.
func (_c *BrandConfigCreate) Mutation() *BrandConfigMutation {
	return _c.mutation
}

// Save creates the BrandConfig in the database.
func (_c *BrandConfigCreate) Save(ctx context.Context) (*BrandConfig, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BrandConfigCreate) SaveX(ctx context.Context) *BrandConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BrandConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BrandConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BrandConfigCreate) defaults() {
	if _, ok := _c.mutation.Name(); !ok {
		v := brandconfig.DefaultName
		_c.mutation.SetName(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := brandconfig.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BrandConfigCreate) check() error {
	if _, ok := _c.mutation.Singleton(); !ok {
		return &ValidationError{Name: "singleton", err: errors.New(`ent: missing required field "BrandConfig.singleton"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BrandConfig.name"`)}
	}
	if _, ok := _c.mutation.Colors(); !ok {
		return &ValidationError{Name: "colors", err: errors.New(`ent: missing required field "BrandConfig.colors"`)}
	}
	if _, ok := _c.mutation.Contact(); !ok {
		return &ValidationError{Name: "contact", err: errors.New(`ent: missing required field "BrandConfig.contact"`)}
	}
	if _, ok := _c.mutation.Social(); !ok {
		return &ValidationError{Name: "social", err: errors.New(`ent: missing required field "BrandConfig.social"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BrandConfig.updated_at"`)}
	}
	return nil
}

func (_c *BrandConfigCreate) sqlSave(ctx context.Context) (*BrandConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BrandConfigCreate) createSpec() (*BrandConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &BrandConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(brandconfig.Table, sqlgraph.NewFieldSpec(brandconfig.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Singleton(); ok {
		_spec.SetField(brandconfig.FieldSingleton, field.TypeString, value)
		_node.Singleton = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(brandconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.LogoURL(); ok {
		_spec.SetField(brandconfig.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := _c.mutation.Colors(); ok {
		_spec.SetField(brandconfig.FieldColors, field.TypeJSON, value)
		_node.Colors = value
	}
	if value, ok := _c.mutation.Contact(); ok {
		_spec.SetField(brandconfig.FieldContact, field.TypeJSON, value)
		_node.Contact = value
	}
	if value, ok := _c.mutation.Social(); ok {
		_spec.SetField(brandconfig.FieldSocial, field.TypeJSON, value)
		_node.Social = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(brandconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BrandConfig.Create().
//		SetSingleton(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BrandConfigUpsert) {
//			SetSingleton(v+v).
//		}).
//		Exec(ctx)
func (_c *BrandConfigCreate) OnConflict(opts ...sql.ConflictOption) *BrandConfigUpsertOne {
	_c.conflict = opts
	return &BrandConfigUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BrandConfigCreate) OnConflictColumns(columns ...string) *BrandConfigUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BrandConfigUpsertOne{
		create: _c,
	}
}

type (
	// BrandConfigUpsertOne is the builder for "upsert"-ing
	//  one BrandConfig node.
	BrandConfigUpsertOne struct {
		create *BrandConfigCreate
	}

	// BrandConfigUpsert is the "OnConflict" setter.
	BrandConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *BrandConfigUpsert) SetName(v string) *BrandConfigUpsert {
	u.Set(brandconfig.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateName() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldName)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *BrandConfigUpsert) SetLogoURL(v string) *BrandConfigUpsert {
	u.Set(brandconfig.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateLogoURL() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *BrandConfigUpsert) ClearLogoURL() *BrandConfigUpsert {
	u.SetNull(brandconfig.FieldLogoURL)
	return u
}

// SetColors sets the "colors" field.
func (u *BrandConfigUpsert) SetColors(v map[string]string) *BrandConfigUpsert {
	u.Set(brandconfig.FieldColors, v)
	return u
}

// UpdateColors sets the "colors" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateColors() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldColors)
	return u
}

// SetContact sets the "contact" field.
func (u *BrandConfigUpsert) SetContact(v map[string]string) *BrandConfigUpsert {
	u.Set(brandconfig.FieldContact, v)
	return u
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateContact() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldContact)
	return u
}

// SetSocial sets the "social" field.
func (u *BrandConfigUpsert) SetSocial(v map[string]string) *BrandConfigUpsert {
	u.Set(brandconfig.FieldSocial, v)
	return u
}

// UpdateSocial sets the "social" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateSocial() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldSocial)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BrandConfigUpsert) SetUpdatedAt(v time.Time) *BrandConfigUpsert {
	u.Set(brandconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BrandConfigUpsert) UpdateUpdatedAt() *BrandConfigUpsert {
	u.SetExcluded(brandconfig.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BrandConfigUpsertOne) UpdateNewValues() *BrandConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Singleton(); exists {
			s.SetIgnore(brandconfig.FieldSingleton)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BrandConfigUpsertOne) Ignore() *BrandConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BrandConfigUpsertOne) DoNothing() *BrandConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BrandConfigCreate.OnConflict
// documentation for more info.
func (u *BrandConfigUpsertOne) Update(set func(*BrandConfigUpsert)) *BrandConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BrandConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BrandConfigUpsertOne) SetName(v string) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateName() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateName()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *BrandConfigUpsertOne) SetLogoURL(v string) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateLogoURL() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *BrandConfigUpsertOne) ClearLogoURL() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.ClearLogoURL()
	})
}

// SetColors sets the "colors" field.
func (u *BrandConfigUpsertOne) SetColors(v map[string]string) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetColors(v)
	})
}

// UpdateColors sets the "colors" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateColors() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateColors()
	})
}

// SetContact sets the "contact" field.
func (u *BrandConfigUpsertOne) SetContact(v map[string]string) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateContact() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateContact()
	})
}

// SetSocial sets the "social" field.
func (u *BrandConfigUpsertOne) SetSocial(v map[string]string) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetSocial(v)
	})
}

// UpdateSocial sets the "social" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateSocial() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateSocial()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BrandConfigUpsertOne) SetUpdatedAt(v time.Time) *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BrandConfigUpsertOne) UpdateUpdatedAt() *BrandConfigUpsertOne {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BrandConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BrandConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BrandConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BrandConfigUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BrandConfigUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BrandConfigCreateBulk is the builder for creating many BrandConfig entities in bulk.
type BrandConfigCreateBulk struct {
	config
	err      error
	builders []*BrandConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the BrandConfig entities in the database.
func (_c *BrandConfigCreateBulk) Save(ctx context.Context) ([]*BrandConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BrandConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BrandConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BrandConfigCreateBulk) SaveX(ctx context.Context) []*BrandConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BrandConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BrandConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BrandConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BrandConfigUpsert) {
//			SetSingleton(v+v).
//		}).
//		Exec(ctx)
func (_c *BrandConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *BrandConfigUpsertBulk {
	_c.conflict = opts
	return &BrandConfigUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BrandConfigCreateBulk) OnConflictColumns(columns ...string) *BrandConfigUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BrandConfigUpsertBulk{
		create: _c,
	}
}

// BrandConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of BrandConfig nodes.
type BrandConfigUpsertBulk struct {
	create *BrandConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BrandConfigUpsertBulk) UpdateNewValues() *BrandConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Singleton(); exists {
				s.SetIgnore(brandconfig.FieldSingleton)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BrandConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BrandConfigUpsertBulk) Ignore() *BrandConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BrandConfigUpsertBulk) DoNothing() *BrandConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BrandConfigCreateBulk.OnConflict
// documentation for more info.
func (u *BrandConfigUpsertBulk) Update(set func(*BrandConfigUpsert)) *BrandConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BrandConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BrandConfigUpsertBulk) SetName(v string) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateName() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateName()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *BrandConfigUpsertBulk) SetLogoURL(v string) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateLogoURL() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *BrandConfigUpsertBulk) ClearLogoURL() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.ClearLogoURL()
	})
}

// SetColors sets the "colors" field.
func (u *BrandConfigUpsertBulk) SetColors(v map[string]string) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetColors(v)
	})
}

// UpdateColors sets the "colors" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateColors() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateColors()
	})
}

// SetContact sets the "contact" field.
func (u *BrandConfigUpsertBulk) SetContact(v map[string]string) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateContact() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateContact()
	})
}

// SetSocial sets the "social" field.
func (u *BrandConfigUpsertBulk) SetSocial(v map[string]string) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetSocial(v)
	})
}

// UpdateSocial sets the "social" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateSocial() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateSocial()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BrandConfigUpsertBulk) SetUpdatedAt(v time.Time) *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BrandConfigUpsertBulk) UpdateUpdatedAt() *BrandConfigUpsertBulk {
	return u.Update(func(s *BrandConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BrandConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BrandConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BrandConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BrandConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
