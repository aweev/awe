// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershiprenewal"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnershipRenewalCreate is the builder for creating a PartnershipRenewal entity.
type PartnershipRenewalCreate struct {
	config
	mutation *PartnershipRenewalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPreviousEndDate sets the "previous_end_date" field.
func (_c *PartnershipRenewalCreate) SetPreviousEndDate(v time.Time) *PartnershipRenewalCreate {
	_c.mutation.SetPreviousEndDate(v)
	return _c
}

// SetNewEndDate sets the "new_end_date" field.
func (_c *PartnershipRenewalCreate) SetNewEndDate(v time.Time) *PartnershipRenewalCreate {
	_c.mutation.SetNewEndDate(v)
	return _c
}

// SetRenewalValue sets the "renewal_value" field.
func (_c *PartnershipRenewalCreate) SetRenewalValue(v float64) *PartnershipRenewalCreate {
	_c.mutation.SetRenewalValue(v)
	return _c
}

// SetNillableRenewalValue sets the "renewal_value" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableRenewalValue(v *float64) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetRenewalValue(*v)
	}
	return _c
}

// SetRenewalTerms sets the "renewal_terms" field.
func (_c *PartnershipRenewalCreate) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalCreate {
	_c.mutation.SetRenewalTerms(v)
	return _c
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (_c *PartnershipRenewalCreate) SetNegotiatedBy(v string) *PartnershipRenewalCreate {
	_c.mutation.SetNegotiatedBy(v)
	return _c
}

// SetNillableNegotiatedBy sets the "negotiated_by" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableNegotiatedBy(v *string) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetNegotiatedBy(*v)
	}
	return _c
}

// SetApprovedBy sets the "approved_by" field.
func (_c *PartnershipRenewalCreate) SetApprovedBy(v string) *PartnershipRenewalCreate {
	_c.mutation.SetApprovedBy(v)
	return _c
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableApprovedBy(v *string) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetApprovedBy(*v)
	}
	return _c
}

// SetApprovedAt sets the "approved_at" field.
func (_c *PartnershipRenewalCreate) SetApprovedAt(v time.Time) *PartnershipRenewalCreate {
	_c.mutation.SetApprovedAt(v)
	return _c
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableApprovedAt(v *time.Time) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetApprovedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PartnershipRenewalCreate) SetCreatedAt(v time.Time) *PartnershipRenewalCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableCreatedAt(v *time.Time) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PartnershipRenewalCreate) SetUpdatedAt(v time.Time) *PartnershipRenewalCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PartnershipRenewalCreate) SetNillableUpdatedAt(v *time.Time) *PartnershipRenewalCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_c *PartnershipRenewalCreate) SetPartnershipID(id int) *PartnershipRenewalCreate {
	_c.mutation.SetPartnershipID(id)
	return _c
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_c *PartnershipRenewalCreate) SetPartnership(v *Partnership) *PartnershipRenewalCreate {
	return _c.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipRenewalMutation object of the builder.
func (_c *PartnershipRenewalCreate) Mutation() *PartnershipRenewalMutation {
	return _c.mutation
}

// Save creates the PartnershipRenewal in the database.
func (_c *PartnershipRenewalCreate) Save(ctx context.Context) (*PartnershipRenewal, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnershipRenewalCreate) SaveX(ctx context.Context) *PartnershipRenewal {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipRenewalCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipRenewalCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PartnershipRenewalCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := partnershiprenewal.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := partnershiprenewal.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnershipRenewalCreate) check() error {
	if _, ok := _c.mutation.PreviousEndDate(); !ok {
		return &ValidationError{Name: "previous_end_date", err: errors.New(`ent: missing required field "PartnershipRenewal.previous_end_date"`)}
	}
	if _, ok := _c.mutation.NewEndDate(); !ok {
		return &ValidationError{Name: "new_end_date", err: errors.New(`ent: missing required field "PartnershipRenewal.new_end_date"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnershipRenewal.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnershipRenewal.updated_at"`)}
	}
	if len(_c.mutation.PartnershipIDs()) == 0 {
		return &ValidationError{Name: "partnership", err: errors.New(`ent: missing required edge "PartnershipRenewal.partnership"`)}
	}
	return nil
}

func (_c *PartnershipRenewalCreate) sqlSave(ctx context.Context) (*PartnershipRenewal, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnershipRenewalCreate) createSpec() (*PartnershipRenewal, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnershipRenewal{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partnershiprenewal.Table, sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.PreviousEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldPreviousEndDate, field.TypeTime, value)
		_node.PreviousEndDate = value
	}
	if value, ok := _c.mutation.NewEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldNewEndDate, field.TypeTime, value)
		_node.NewEndDate = value
	}
	if value, ok := _c.mutation.RenewalValue(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64, value)
		_node.RenewalValue = value
	}
	if value, ok := _c.mutation.RenewalTerms(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalTerms, field.TypeJSON, value)
		_node.RenewalTerms = value
	}
	if value, ok := _c.mutation.NegotiatedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldNegotiatedBy, field.TypeString, value)
		_node.NegotiatedBy = value
	}
	if value, ok := _c.mutation.ApprovedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedBy, field.TypeString, value)
		_node.ApprovedBy = value
	}
	if value, ok := _c.mutation.ApprovedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partnership_renewals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipRenewal.Create().
//		SetPreviousEndDate(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipRenewalUpsert) {
//			SetPreviousEndDate(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipRenewalCreate) OnConflict(opts ...sql.ConflictOption) *PartnershipRenewalUpsertOne {
	_c.conflict = opts
	return &PartnershipRenewalUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipRenewalCreate) OnConflictColumns(columns ...string) *PartnershipRenewalUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipRenewalUpsertOne{
		create: _c,
	}
}

type (
	// PartnershipRenewalUpsertOne is the builder for "upsert"-ing
	//  one PartnershipRenewal node.
	PartnershipRenewalUpsertOne struct {
		create *PartnershipRenewalCreate
	}

	// PartnershipRenewalUpsert is the "OnConflict" setter.
	PartnershipRenewalUpsert struct {
		*sql.UpdateSet
	}
)

// SetPreviousEndDate sets the "previous_end_date" field.
func (u *PartnershipRenewalUpsert) SetPreviousEndDate(v time.Time) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldPreviousEndDate, v)
	return u
}

// UpdatePreviousEndDate sets the "previous_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdatePreviousEndDate() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldPreviousEndDate)
	return u
}

// SetNewEndDate sets the "new_end_date" field.
func (u *PartnershipRenewalUpsert) SetNewEndDate(v time.Time) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldNewEndDate, v)
	return u
}

// UpdateNewEndDate sets the "new_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateNewEndDate() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldNewEndDate)
	return u
}

// SetRenewalValue sets the "renewal_value" field.
func (u *PartnershipRenewalUpsert) SetRenewalValue(v float64) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldRenewalValue, v)
	return u
}

// UpdateRenewalValue sets the "renewal_value" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateRenewalValue() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldRenewalValue)
	return u
}

// AddRenewalValue adds v to the "renewal_value" field.
func (u *PartnershipRenewalUpsert) AddRenewalValue(v float64) *PartnershipRenewalUpsert {
	u.Add(partnershiprenewal.FieldRenewalValue, v)
	return u
}

// ClearRenewalValue clears the value of the "renewal_value" field.
func (u *PartnershipRenewalUpsert) ClearRenewalValue() *PartnershipRenewalUpsert {
	u.SetNull(partnershiprenewal.FieldRenewalValue)
	return u
}

// SetRenewalTerms sets the "renewal_terms" field.
func (u *PartnershipRenewalUpsert) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldRenewalTerms, v)
	return u
}

// UpdateRenewalTerms sets the "renewal_terms" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateRenewalTerms() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldRenewalTerms)
	return u
}

// ClearRenewalTerms clears the value of the "renewal_terms" field.
func (u *PartnershipRenewalUpsert) ClearRenewalTerms() *PartnershipRenewalUpsert {
	u.SetNull(partnershiprenewal.FieldRenewalTerms)
	return u
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (u *PartnershipRenewalUpsert) SetNegotiatedBy(v string) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldNegotiatedBy, v)
	return u
}

// UpdateNegotiatedBy sets the "negotiated_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateNegotiatedBy() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldNegotiatedBy)
	return u
}

// ClearNegotiatedBy clears the value of the "negotiated_by" field.
func (u *PartnershipRenewalUpsert) ClearNegotiatedBy() *PartnershipRenewalUpsert {
	u.SetNull(partnershiprenewal.FieldNegotiatedBy)
	return u
}

// SetApprovedBy sets the "approved_by" field.
func (u *PartnershipRenewalUpsert) SetApprovedBy(v string) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldApprovedBy, v)
	return u
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateApprovedBy() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldApprovedBy)
	return u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PartnershipRenewalUpsert) ClearApprovedBy() *PartnershipRenewalUpsert {
	u.SetNull(partnershiprenewal.FieldApprovedBy)
	return u
}

// SetApprovedAt sets the "approved_at" field.
func (u *PartnershipRenewalUpsert) SetApprovedAt(v time.Time) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldApprovedAt, v)
	return u
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateApprovedAt() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldApprovedAt)
	return u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PartnershipRenewalUpsert) ClearApprovedAt() *PartnershipRenewalUpsert {
	u.SetNull(partnershiprenewal.FieldApprovedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipRenewalUpsert) SetUpdatedAt(v time.Time) *PartnershipRenewalUpsert {
	u.Set(partnershiprenewal.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsert) UpdateUpdatedAt() *PartnershipRenewalUpsert {
	u.SetExcluded(partnershiprenewal.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipRenewalUpsertOne) UpdateNewValues() *PartnershipRenewalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnershiprenewal.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnershipRenewalUpsertOne) Ignore() *PartnershipRenewalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipRenewalUpsertOne) DoNothing() *PartnershipRenewalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipRenewalCreate.OnConflict
// documentation for more info.
func (u *PartnershipRenewalUpsertOne) Update(set func(*PartnershipRenewalUpsert)) *PartnershipRenewalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipRenewalUpsert{UpdateSet: update})
	}))
	return u
}

// SetPreviousEndDate sets the "previous_end_date" field.
func (u *PartnershipRenewalUpsertOne) SetPreviousEndDate(v time.Time) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetPreviousEndDate(v)
	})
}

// UpdatePreviousEndDate sets the "previous_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdatePreviousEndDate() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdatePreviousEndDate()
	})
}

// SetNewEndDate sets the "new_end_date" field.
func (u *PartnershipRenewalUpsertOne) SetNewEndDate(v time.Time) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetNewEndDate(v)
	})
}

// UpdateNewEndDate sets the "new_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateNewEndDate() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateNewEndDate()
	})
}

// SetRenewalValue sets the "renewal_value" field.
func (u *PartnershipRenewalUpsertOne) SetRenewalValue(v float64) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetRenewalValue(v)
	})
}

// AddRenewalValue adds v to the "renewal_value" field.
func (u *PartnershipRenewalUpsertOne) AddRenewalValue(v float64) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.AddRenewalValue(v)
	})
}

// UpdateRenewalValue sets the "renewal_value" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateRenewalValue() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateRenewalValue()
	})
}

// ClearRenewalValue clears the value of the "renewal_value" field.
func (u *PartnershipRenewalUpsertOne) ClearRenewalValue() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearRenewalValue()
	})
}

// SetRenewalTerms sets the "renewal_terms" field.
func (u *PartnershipRenewalUpsertOne) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetRenewalTerms(v)
	})
}

// UpdateRenewalTerms sets the "renewal_terms" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateRenewalTerms() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateRenewalTerms()
	})
}

// ClearRenewalTerms clears the value of the "renewal_terms" field.
func (u *PartnershipRenewalUpsertOne) ClearRenewalTerms() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearRenewalTerms()
	})
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (u *PartnershipRenewalUpsertOne) SetNegotiatedBy(v string) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetNegotiatedBy(v)
	})
}

// UpdateNegotiatedBy sets the "negotiated_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateNegotiatedBy() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateNegotiatedBy()
	})
}

// ClearNegotiatedBy clears the value of the "negotiated_by" field.
func (u *PartnershipRenewalUpsertOne) ClearNegotiatedBy() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearNegotiatedBy()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *PartnershipRenewalUpsertOne) SetApprovedBy(v string) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateApprovedBy() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PartnershipRenewalUpsertOne) ClearApprovedBy() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *PartnershipRenewalUpsertOne) SetApprovedAt(v time.Time) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateApprovedAt() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PartnershipRenewalUpsertOne) ClearApprovedAt() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearApprovedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipRenewalUpsertOne) SetUpdatedAt(v time.Time) *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertOne) UpdateUpdatedAt() *PartnershipRenewalUpsertOne {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipRenewalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipRenewalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipRenewalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnershipRenewalUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnershipRenewalUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnershipRenewalCreateBulk is the builder for creating many PartnershipRenewal entities in bulk.
type PartnershipRenewalCreateBulk struct {
	config
	err      error
	builders []*PartnershipRenewalCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnershipRenewal entities in the database.
func (_c *PartnershipRenewalCreateBulk) Save(ctx context.Context) ([]*PartnershipRenewal, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PartnershipRenewal, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnershipRenewalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnershipRenewalCreateBulk) SaveX(ctx context.Context) []*PartnershipRenewal {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipRenewalCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipRenewalCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipRenewal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipRenewalUpsert) {
//			SetPreviousEndDate(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipRenewalCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnershipRenewalUpsertBulk {
	_c.conflict = opts
	return &PartnershipRenewalUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipRenewalCreateBulk) OnConflictColumns(columns ...string) *PartnershipRenewalUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipRenewalUpsertBulk{
		create: _c,
	}
}

// PartnershipRenewalUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnershipRenewal nodes.
type PartnershipRenewalUpsertBulk struct {
	create *PartnershipRenewalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipRenewalUpsertBulk) UpdateNewValues() *PartnershipRenewalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnershiprenewal.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipRenewal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnershipRenewalUpsertBulk) Ignore() *PartnershipRenewalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipRenewalUpsertBulk) DoNothing() *PartnershipRenewalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipRenewalCreateBulk.OnConflict
// documentation for more info.
func (u *PartnershipRenewalUpsertBulk) Update(set func(*PartnershipRenewalUpsert)) *PartnershipRenewalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipRenewalUpsert{UpdateSet: update})
	}))
	return u
}

// SetPreviousEndDate sets the "previous_end_date" field.
func (u *PartnershipRenewalUpsertBulk) SetPreviousEndDate(v time.Time) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetPreviousEndDate(v)
	})
}

// UpdatePreviousEndDate sets the "previous_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdatePreviousEndDate() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdatePreviousEndDate()
	})
}

// SetNewEndDate sets the "new_end_date" field.
func (u *PartnershipRenewalUpsertBulk) SetNewEndDate(v time.Time) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetNewEndDate(v)
	})
}

// UpdateNewEndDate sets the "new_end_date" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateNewEndDate() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateNewEndDate()
	})
}

// SetRenewalValue sets the "renewal_value" field.
func (u *PartnershipRenewalUpsertBulk) SetRenewalValue(v float64) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetRenewalValue(v)
	})
}

// AddRenewalValue adds v to the "renewal_value" field.
func (u *PartnershipRenewalUpsertBulk) AddRenewalValue(v float64) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.AddRenewalValue(v)
	})
}

// UpdateRenewalValue sets the "renewal_value" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateRenewalValue() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateRenewalValue()
	})
}

// ClearRenewalValue clears the value of the "renewal_value" field.
func (u *PartnershipRenewalUpsertBulk) ClearRenewalValue() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearRenewalValue()
	})
}

// SetRenewalTerms sets the "renewal_terms" field.
func (u *PartnershipRenewalUpsertBulk) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetRenewalTerms(v)
	})
}

// UpdateRenewalTerms sets the "renewal_terms" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateRenewalTerms() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateRenewalTerms()
	})
}

// ClearRenewalTerms clears the value of the "renewal_terms" field.
func (u *PartnershipRenewalUpsertBulk) ClearRenewalTerms() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearRenewalTerms()
	})
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (u *PartnershipRenewalUpsertBulk) SetNegotiatedBy(v string) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetNegotiatedBy(v)
	})
}

// UpdateNegotiatedBy sets the "negotiated_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateNegotiatedBy() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateNegotiatedBy()
	})
}

// ClearNegotiatedBy clears the value of the "negotiated_by" field.
func (u *PartnershipRenewalUpsertBulk) ClearNegotiatedBy() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearNegotiatedBy()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *PartnershipRenewalUpsertBulk) SetApprovedBy(v string) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateApprovedBy() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PartnershipRenewalUpsertBulk) ClearApprovedBy() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *PartnershipRenewalUpsertBulk) SetApprovedAt(v time.Time) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateApprovedAt() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PartnershipRenewalUpsertBulk) ClearApprovedAt() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.ClearApprovedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipRenewalUpsertBulk) SetUpdatedAt(v time.Time) *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipRenewalUpsertBulk) UpdateUpdatedAt() *PartnershipRenewalUpsertBulk {
	return u.Update(func(s *PartnershipRenewalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipRenewalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnershipRenewalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipRenewalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipRenewalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
