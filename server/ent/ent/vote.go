// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/vote"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vote is the model entity for the Vote schema.
type Vote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Question holds the value of the "question" field.
	Question string `json:"question,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoteQuery when eager-loading is set.
	Edges            VoteEdges `json:"edges"`
	agenda_item_vote *int
	selectValues     sql.SelectValues
}

// VoteEdges holds the relations/edges for other nodes in the graph.
type VoteEdges struct {
	// AgendaItem holds the value of the agenda_item edge.
	AgendaItem *AgendaItem `json:"agenda_item,omitempty"`
	// Ballots holds the value of the ballots edge.
	Ballots []*Ballot `json:"ballots,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AgendaItemOrErr returns the AgendaItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) AgendaItemOrErr() (*AgendaItem, error) {
	if e.AgendaItem != nil {
		return e.AgendaItem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agendaitem.Label}
	}
	return nil, &NotLoadedError{edge: "agenda_item"}
}

// BallotsOrErr returns the Ballots value or an error if the edge
// was not loaded in eager-loading.
func (e VoteEdges) BallotsOrErr() ([]*Ballot, error) {
	if e.loadedTypes[1] {
		return e.Ballots, nil
	}
	return nil, &NotLoadedError{edge: "ballots"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vote.FieldOptions:
			values[i] = new([]byte)
		case vote.FieldID:
			values[i] = new(sql.NullInt64)
		case vote.FieldQuestion, vote.FieldStatus, vote.FieldResult:
			values[i] = new(sql.NullString)
		case vote.ForeignKeys[0]: // agenda_item_vote
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vote fields.
func (_m *Vote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case vote.FieldQuestion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question", values[i])
			} else if value.Valid {
				_m.Question = value.String
			}
		case vote.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case vote.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case vote.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				_m.Result = value.String
			}
		case vote.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agenda_item_vote", value)
			} else if value.Valid {
				_m.agenda_item_vote = new(int)
				*_m.agenda_item_vote = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vote.
// This includes values selected through modifiers, order, etc.
func (_m *Vote) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAgendaItem queries the "agenda_item" edge of the Vote entity.
func (_m *Vote) QueryAgendaItem() *AgendaItemQuery {
	return NewVoteClient(_m.config).QueryAgendaItem(_m)
}

// QueryBallots queries the "ballots" edge of the Vote entity.
func (_m *Vote) QueryBallots() *BallotQuery {
	return NewVoteClient(_m.config).QueryBallots(_m)
}

// Update returns a builder for updating this Vote.
// Note that you need to call Vote.Unwrap() before calling this method if this Vote
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Vote) Update() *VoteUpdateOne {
	return NewVoteClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Vote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Vote) Unwrap() *Vote {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vote is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Vote) String() string {
	var builder strings.Builder
	builder.WriteString("Vote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("question=")
	builder.WriteString(_m.Question)
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", _m.Options))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(_m.Result)
	builder.WriteByte(')')
	return builder.String()
}

// Votes is a parsable slice of Vote.
type Votes []*Vote
