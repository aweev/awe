// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/program"
	"awe/ent/ent/programcarditem"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramCardItem is the model entity for the ProgramCardItem schema.
type ProgramCardItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramCardItemQuery when eager-loading is set.
	Edges                                 ProgramCardItemEdges `json:"edges"`
	block_program_cards_selected_programs *int
	program_program_card_items            *int
	program_card_item_program             *int
	selectValues                          sql.SelectValues
}

// ProgramCardItemEdges holds the relations/edges for other nodes in the graph.
type ProgramCardItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockProgramCards `json:"block,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramCardItemEdges) BlockOrErr() (*BlockProgramCards, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockprogramcards.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramCardItemEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramCardItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programcarditem.FieldID, programcarditem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case programcarditem.ForeignKeys[0]: // block_program_cards_selected_programs
			values[i] = new(sql.NullInt64)
		case programcarditem.ForeignKeys[1]: // program_program_card_items
			values[i] = new(sql.NullInt64)
		case programcarditem.ForeignKeys[2]: // program_card_item_program
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramCardItem fields.
func (_m *ProgramCardItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programcarditem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case programcarditem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case programcarditem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_program_cards_selected_programs", value)
			} else if value.Valid {
				_m.block_program_cards_selected_programs = new(int)
				*_m.block_program_cards_selected_programs = int(value.Int64)
			}
		case programcarditem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_program_card_items", value)
			} else if value.Valid {
				_m.program_program_card_items = new(int)
				*_m.program_program_card_items = int(value.Int64)
			}
		case programcarditem.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_card_item_program", value)
			} else if value.Valid {
				_m.program_card_item_program = new(int)
				*_m.program_card_item_program = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramCardItem.
// This includes values selected through modifiers, order, etc.
func (_m *ProgramCardItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the ProgramCardItem entity.
func (_m *ProgramCardItem) QueryBlock() *BlockProgramCardsQuery {
	return NewProgramCardItemClient(_m.config).QueryBlock(_m)
}

// QueryProgram queries the "program" edge of the ProgramCardItem entity.
func (_m *ProgramCardItem) QueryProgram() *ProgramQuery {
	return NewProgramCardItemClient(_m.config).QueryProgram(_m)
}

// Update returns a builder for updating this ProgramCardItem.
// Note that you need to call ProgramCardItem.Unwrap() before calling this method if this ProgramCardItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProgramCardItem) Update() *ProgramCardItemUpdateOne {
	return NewProgramCardItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProgramCardItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProgramCardItem) Unwrap() *ProgramCardItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramCardItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProgramCardItem) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramCardItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteByte(')')
	return builder.String()
}

// ProgramCardItems is a parsable slice of ProgramCardItem.
type ProgramCardItems []*ProgramCardItem
