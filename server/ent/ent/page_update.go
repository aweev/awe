// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/contentblock"
	"awe/ent/ent/page"
	"awe/ent/ent/predicate"
	"awe/ent/ent/seoconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (_u *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *PageUpdate) SetSlug(v string) *PageUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *PageUpdate) SetNillableSlug(v *string) *PageUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *PageUpdate) SetTitle(v map[string]string) *PageUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *PageUpdate) SetStatus(v page.Status) *PageUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PageUpdate) SetNillableStatus(v *page.Status) *PageUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *PageUpdate) SetPublishedAt(v time.Time) *PageUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *PageUpdate) SetNillablePublishedAt(v *time.Time) *PageUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *PageUpdate) ClearPublishedAt() *PageUpdate {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *PageUpdate) SetLayout(v string) *PageUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *PageUpdate) SetNillableLayout(v *string) *PageUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetIsHomepage sets the "is_homepage" field.
func (_u *PageUpdate) SetIsHomepage(v bool) *PageUpdate {
	_u.mutation.SetIsHomepage(v)
	return _u
}

// SetNillableIsHomepage sets the "is_homepage" field if the given value is not nil.
func (_u *PageUpdate) SetNillableIsHomepage(v *bool) *PageUpdate {
	if v != nil {
		_u.SetIsHomepage(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PageUpdate) SetUpdatedAt(v time.Time) *PageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddChildPageIDs adds the "child_pages" edge to the Page entity by IDs.
func (_u *PageUpdate) AddChildPageIDs(ids ...int) *PageUpdate {
	_u.mutation.AddChildPageIDs(ids...)
	return _u
}

// AddChildPages adds the "child_pages" edges to the Page entity.
func (_u *PageUpdate) AddChildPages(v ...*Page) *PageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildPageIDs(ids...)
}

// SetParentPageID sets the "parent_page" edge to the Page entity by ID.
func (_u *PageUpdate) SetParentPageID(id int) *PageUpdate {
	_u.mutation.SetParentPageID(id)
	return _u
}

// SetNillableParentPageID sets the "parent_page" edge to the Page entity by ID if the given value is not nil.
func (_u *PageUpdate) SetNillableParentPageID(id *int) *PageUpdate {
	if id != nil {
		_u = _u.SetParentPageID(*id)
	}
	return _u
}

// SetParentPage sets the "parent_page" edge to the Page entity.
func (_u *PageUpdate) SetParentPage(v *Page) *PageUpdate {
	return _u.SetParentPageID(v.ID)
}

// AddBlockIDs adds the "blocks" edge to the ContentBlock entity by IDs.
func (_u *PageUpdate) AddBlockIDs(ids ...int) *PageUpdate {
	_u.mutation.AddBlockIDs(ids...)
	return _u
}

// AddBlocks adds the "blocks" edges to the ContentBlock entity.
func (_u *PageUpdate) AddBlocks(v ...*ContentBlock) *PageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockIDs(ids...)
}

// SetSeoID sets the "seo" edge to the SeoConfig entity by ID.
func (_u *PageUpdate) SetSeoID(id int) *PageUpdate {
	_u.mutation.SetSeoID(id)
	return _u
}

// SetNillableSeoID sets the "seo" edge to the SeoConfig entity by ID if the given value is not nil.
func (_u *PageUpdate) SetNillableSeoID(id *int) *PageUpdate {
	if id != nil {
		_u = _u.SetSeoID(*id)
	}
	return _u
}

// SetSeo sets the "seo" edge to the SeoConfig entity.
func (_u *PageUpdate) SetSeo(v *SeoConfig) *PageUpdate {
	return _u.SetSeoID(v.ID)
}

// Mutation returns the PageMutation object of the builder.
func (_u *PageUpdate) Mutation() *PageMutation {
	return _u.mutation
}

// ClearChildPages clears all "child_pages" edges to the Page entity.
func (_u *PageUpdate) ClearChildPages() *PageUpdate {
	_u.mutation.ClearChildPages()
	return _u
}

// RemoveChildPageIDs removes the "child_pages" edge to Page entities by IDs.
func (_u *PageUpdate) RemoveChildPageIDs(ids ...int) *PageUpdate {
	_u.mutation.RemoveChildPageIDs(ids...)
	return _u
}

// RemoveChildPages removes "child_pages" edges to Page entities.
func (_u *PageUpdate) RemoveChildPages(v ...*Page) *PageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildPageIDs(ids...)
}

// ClearParentPage clears the "parent_page" edge to the Page entity.
func (_u *PageUpdate) ClearParentPage() *PageUpdate {
	_u.mutation.ClearParentPage()
	return _u
}

// ClearBlocks clears all "blocks" edges to the ContentBlock entity.
func (_u *PageUpdate) ClearBlocks() *PageUpdate {
	_u.mutation.ClearBlocks()
	return _u
}

// RemoveBlockIDs removes the "blocks" edge to ContentBlock entities by IDs.
func (_u *PageUpdate) RemoveBlockIDs(ids ...int) *PageUpdate {
	_u.mutation.RemoveBlockIDs(ids...)
	return _u
}

// RemoveBlocks removes "blocks" edges to ContentBlock entities.
func (_u *PageUpdate) RemoveBlocks(v ...*ContentBlock) *PageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockIDs(ids...)
}

// ClearSeo clears the "seo" edge to the SeoConfig entity.
func (_u *PageUpdate) ClearSeo() *PageUpdate {
	_u.mutation.ClearSeo()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PageUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PageUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PageUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	return nil
}

func (_u *PageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(page.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(page.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(page.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(page.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsHomepage(); ok {
		_spec.SetField(page.FieldIsHomepage, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildPagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildPagesIDs(); len(nodes) > 0 && !_u.mutation.ChildPagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildPagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentPageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentPageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !_u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SeoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SeoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetSlug sets the "slug" field.
func (_u *PageUpdateOne) SetSlug(v string) *PageUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *PageUpdateOne) SetNillableSlug(v *string) *PageUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *PageUpdateOne) SetTitle(v map[string]string) *PageUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *PageUpdateOne) SetStatus(v page.Status) *PageUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PageUpdateOne) SetNillableStatus(v *page.Status) *PageUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *PageUpdateOne) SetPublishedAt(v time.Time) *PageUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *PageUpdateOne) SetNillablePublishedAt(v *time.Time) *PageUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *PageUpdateOne) ClearPublishedAt() *PageUpdateOne {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *PageUpdateOne) SetLayout(v string) *PageUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *PageUpdateOne) SetNillableLayout(v *string) *PageUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetIsHomepage sets the "is_homepage" field.
func (_u *PageUpdateOne) SetIsHomepage(v bool) *PageUpdateOne {
	_u.mutation.SetIsHomepage(v)
	return _u
}

// SetNillableIsHomepage sets the "is_homepage" field if the given value is not nil.
func (_u *PageUpdateOne) SetNillableIsHomepage(v *bool) *PageUpdateOne {
	if v != nil {
		_u.SetIsHomepage(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PageUpdateOne) SetUpdatedAt(v time.Time) *PageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddChildPageIDs adds the "child_pages" edge to the Page entity by IDs.
func (_u *PageUpdateOne) AddChildPageIDs(ids ...int) *PageUpdateOne {
	_u.mutation.AddChildPageIDs(ids...)
	return _u
}

// AddChildPages adds the "child_pages" edges to the Page entity.
func (_u *PageUpdateOne) AddChildPages(v ...*Page) *PageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildPageIDs(ids...)
}

// SetParentPageID sets the "parent_page" edge to the Page entity by ID.
func (_u *PageUpdateOne) SetParentPageID(id int) *PageUpdateOne {
	_u.mutation.SetParentPageID(id)
	return _u
}

// SetNillableParentPageID sets the "parent_page" edge to the Page entity by ID if the given value is not nil.
func (_u *PageUpdateOne) SetNillableParentPageID(id *int) *PageUpdateOne {
	if id != nil {
		_u = _u.SetParentPageID(*id)
	}
	return _u
}

// SetParentPage sets the "parent_page" edge to the Page entity.
func (_u *PageUpdateOne) SetParentPage(v *Page) *PageUpdateOne {
	return _u.SetParentPageID(v.ID)
}

// AddBlockIDs adds the "blocks" edge to the ContentBlock entity by IDs.
func (_u *PageUpdateOne) AddBlockIDs(ids ...int) *PageUpdateOne {
	_u.mutation.AddBlockIDs(ids...)
	return _u
}

// AddBlocks adds the "blocks" edges to the ContentBlock entity.
func (_u *PageUpdateOne) AddBlocks(v ...*ContentBlock) *PageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockIDs(ids...)
}

// SetSeoID sets the "seo" edge to the SeoConfig entity by ID.
func (_u *PageUpdateOne) SetSeoID(id int) *PageUpdateOne {
	_u.mutation.SetSeoID(id)
	return _u
}

// SetNillableSeoID sets the "seo" edge to the SeoConfig entity by ID if the given value is not nil.
func (_u *PageUpdateOne) SetNillableSeoID(id *int) *PageUpdateOne {
	if id != nil {
		_u = _u.SetSeoID(*id)
	}
	return _u
}

// SetSeo sets the "seo" edge to the SeoConfig entity.
func (_u *PageUpdateOne) SetSeo(v *SeoConfig) *PageUpdateOne {
	return _u.SetSeoID(v.ID)
}

// Mutation returns the PageMutation object of the builder.
func (_u *PageUpdateOne) Mutation() *PageMutation {
	return _u.mutation
}

// ClearChildPages clears all "child_pages" edges to the Page entity.
func (_u *PageUpdateOne) ClearChildPages() *PageUpdateOne {
	_u.mutation.ClearChildPages()
	return _u
}

// RemoveChildPageIDs removes the "child_pages" edge to Page entities by IDs.
func (_u *PageUpdateOne) RemoveChildPageIDs(ids ...int) *PageUpdateOne {
	_u.mutation.RemoveChildPageIDs(ids...)
	return _u
}

// RemoveChildPages removes "child_pages" edges to Page entities.
func (_u *PageUpdateOne) RemoveChildPages(v ...*Page) *PageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildPageIDs(ids...)
}

// ClearParentPage clears the "parent_page" edge to the Page entity.
func (_u *PageUpdateOne) ClearParentPage() *PageUpdateOne {
	_u.mutation.ClearParentPage()
	return _u
}

// ClearBlocks clears all "blocks" edges to the ContentBlock entity.
func (_u *PageUpdateOne) ClearBlocks() *PageUpdateOne {
	_u.mutation.ClearBlocks()
	return _u
}

// RemoveBlockIDs removes the "blocks" edge to ContentBlock entities by IDs.
func (_u *PageUpdateOne) RemoveBlockIDs(ids ...int) *PageUpdateOne {
	_u.mutation.RemoveBlockIDs(ids...)
	return _u
}

// RemoveBlocks removes "blocks" edges to ContentBlock entities.
func (_u *PageUpdateOne) RemoveBlocks(v ...*ContentBlock) *PageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockIDs(ids...)
}

// ClearSeo clears the "seo" edge to the SeoConfig entity.
func (_u *PageUpdateOne) ClearSeo() *PageUpdateOne {
	_u.mutation.ClearSeo()
	return _u
}

// Where appends a list predicates to the PageUpdate builder.
func (_u *PageUpdateOne) Where(ps ...predicate.Page) *PageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Page entity.
func (_u *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PageUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PageUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := page.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Page.status": %w`, err)}
		}
	}
	return nil
}

func (_u *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(page.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(page.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(page.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(page.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsHomepage(); ok {
		_spec.SetField(page.FieldIsHomepage, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildPagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildPagesIDs(); len(nodes) > 0 && !_u.mutation.ChildPagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildPagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentPageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentPageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !_u.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SeoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SeoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Page{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
