// Code generated by ent, DO NOT EDIT.

package volunteerapplication

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldID, id))
}

// Motivation applies equality check predicate on the "motivation" field. It's identical to MotivationEQ.
func Motivation(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldMotivation, v))
}

// BackgroundCheck applies equality check predicate on the "background_check" field. It's identical to BackgroundCheckEQ.
func BackgroundCheck(v bool) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldBackgroundCheck, v))
}

// BackgroundCheckDate applies equality check predicate on the "background_check_date" field. It's identical to BackgroundCheckDateEQ.
func BackgroundCheckDate(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldBackgroundCheckDate, v))
}

// ReviewedBy applies equality check predicate on the "reviewed_by" field. It's identical to ReviewedByEQ.
func ReviewedBy(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewedBy, v))
}

// ReviewedAt applies equality check predicate on the "reviewed_at" field. It's identical to ReviewedAtEQ.
func ReviewedAt(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewedAt, v))
}

// ReviewNotes applies equality check predicate on the "review_notes" field. It's identical to ReviewNotesEQ.
func ReviewNotes(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewNotes, v))
}

// InterviewDate applies equality check predicate on the "interview_date" field. It's identical to InterviewDateEQ.
func InterviewDate(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldInterviewDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldStatus, vs...))
}

// MotivationEQ applies the EQ predicate on the "motivation" field.
func MotivationEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldMotivation, v))
}

// MotivationNEQ applies the NEQ predicate on the "motivation" field.
func MotivationNEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldMotivation, v))
}

// MotivationIn applies the In predicate on the "motivation" field.
func MotivationIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldMotivation, vs...))
}

// MotivationNotIn applies the NotIn predicate on the "motivation" field.
func MotivationNotIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldMotivation, vs...))
}

// MotivationGT applies the GT predicate on the "motivation" field.
func MotivationGT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldMotivation, v))
}

// MotivationGTE applies the GTE predicate on the "motivation" field.
func MotivationGTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldMotivation, v))
}

// MotivationLT applies the LT predicate on the "motivation" field.
func MotivationLT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldMotivation, v))
}

// MotivationLTE applies the LTE predicate on the "motivation" field.
func MotivationLTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldMotivation, v))
}

// MotivationContains applies the Contains predicate on the "motivation" field.
func MotivationContains(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContains(FieldMotivation, v))
}

// MotivationHasPrefix applies the HasPrefix predicate on the "motivation" field.
func MotivationHasPrefix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasPrefix(FieldMotivation, v))
}

// MotivationHasSuffix applies the HasSuffix predicate on the "motivation" field.
func MotivationHasSuffix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasSuffix(FieldMotivation, v))
}

// MotivationEqualFold applies the EqualFold predicate on the "motivation" field.
func MotivationEqualFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEqualFold(FieldMotivation, v))
}

// MotivationContainsFold applies the ContainsFold predicate on the "motivation" field.
func MotivationContainsFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContainsFold(FieldMotivation, v))
}

// BackgroundCheckEQ applies the EQ predicate on the "background_check" field.
func BackgroundCheckEQ(v bool) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldBackgroundCheck, v))
}

// BackgroundCheckNEQ applies the NEQ predicate on the "background_check" field.
func BackgroundCheckNEQ(v bool) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldBackgroundCheck, v))
}

// BackgroundCheckDateEQ applies the EQ predicate on the "background_check_date" field.
func BackgroundCheckDateEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateNEQ applies the NEQ predicate on the "background_check_date" field.
func BackgroundCheckDateNEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateIn applies the In predicate on the "background_check_date" field.
func BackgroundCheckDateIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldBackgroundCheckDate, vs...))
}

// BackgroundCheckDateNotIn applies the NotIn predicate on the "background_check_date" field.
func BackgroundCheckDateNotIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldBackgroundCheckDate, vs...))
}

// BackgroundCheckDateGT applies the GT predicate on the "background_check_date" field.
func BackgroundCheckDateGT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateGTE applies the GTE predicate on the "background_check_date" field.
func BackgroundCheckDateGTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateLT applies the LT predicate on the "background_check_date" field.
func BackgroundCheckDateLT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateLTE applies the LTE predicate on the "background_check_date" field.
func BackgroundCheckDateLTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldBackgroundCheckDate, v))
}

// BackgroundCheckDateIsNil applies the IsNil predicate on the "background_check_date" field.
func BackgroundCheckDateIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldBackgroundCheckDate))
}

// BackgroundCheckDateNotNil applies the NotNil predicate on the "background_check_date" field.
func BackgroundCheckDateNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldBackgroundCheckDate))
}

// ReferencesIsNil applies the IsNil predicate on the "references" field.
func ReferencesIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldReferences))
}

// ReferencesNotNil applies the NotNil predicate on the "references" field.
func ReferencesNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldReferences))
}

// EmergencyContactIsNil applies the IsNil predicate on the "emergency_contact" field.
func EmergencyContactIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldEmergencyContact))
}

// EmergencyContactNotNil applies the NotNil predicate on the "emergency_contact" field.
func EmergencyContactNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldEmergencyContact))
}

// ReviewedByEQ applies the EQ predicate on the "reviewed_by" field.
func ReviewedByEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewedBy, v))
}

// ReviewedByNEQ applies the NEQ predicate on the "reviewed_by" field.
func ReviewedByNEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldReviewedBy, v))
}

// ReviewedByIn applies the In predicate on the "reviewed_by" field.
func ReviewedByIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldReviewedBy, vs...))
}

// ReviewedByNotIn applies the NotIn predicate on the "reviewed_by" field.
func ReviewedByNotIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldReviewedBy, vs...))
}

// ReviewedByGT applies the GT predicate on the "reviewed_by" field.
func ReviewedByGT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldReviewedBy, v))
}

// ReviewedByGTE applies the GTE predicate on the "reviewed_by" field.
func ReviewedByGTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldReviewedBy, v))
}

// ReviewedByLT applies the LT predicate on the "reviewed_by" field.
func ReviewedByLT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldReviewedBy, v))
}

// ReviewedByLTE applies the LTE predicate on the "reviewed_by" field.
func ReviewedByLTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldReviewedBy, v))
}

// ReviewedByContains applies the Contains predicate on the "reviewed_by" field.
func ReviewedByContains(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContains(FieldReviewedBy, v))
}

// ReviewedByHasPrefix applies the HasPrefix predicate on the "reviewed_by" field.
func ReviewedByHasPrefix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasPrefix(FieldReviewedBy, v))
}

// ReviewedByHasSuffix applies the HasSuffix predicate on the "reviewed_by" field.
func ReviewedByHasSuffix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasSuffix(FieldReviewedBy, v))
}

// ReviewedByIsNil applies the IsNil predicate on the "reviewed_by" field.
func ReviewedByIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldReviewedBy))
}

// ReviewedByNotNil applies the NotNil predicate on the "reviewed_by" field.
func ReviewedByNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldReviewedBy))
}

// ReviewedByEqualFold applies the EqualFold predicate on the "reviewed_by" field.
func ReviewedByEqualFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEqualFold(FieldReviewedBy, v))
}

// ReviewedByContainsFold applies the ContainsFold predicate on the "reviewed_by" field.
func ReviewedByContainsFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContainsFold(FieldReviewedBy, v))
}

// ReviewedAtEQ applies the EQ predicate on the "reviewed_at" field.
func ReviewedAtEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewedAt, v))
}

// ReviewedAtNEQ applies the NEQ predicate on the "reviewed_at" field.
func ReviewedAtNEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldReviewedAt, v))
}

// ReviewedAtIn applies the In predicate on the "reviewed_at" field.
func ReviewedAtIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldReviewedAt, vs...))
}

// ReviewedAtNotIn applies the NotIn predicate on the "reviewed_at" field.
func ReviewedAtNotIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldReviewedAt, vs...))
}

// ReviewedAtGT applies the GT predicate on the "reviewed_at" field.
func ReviewedAtGT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldReviewedAt, v))
}

// ReviewedAtGTE applies the GTE predicate on the "reviewed_at" field.
func ReviewedAtGTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldReviewedAt, v))
}

// ReviewedAtLT applies the LT predicate on the "reviewed_at" field.
func ReviewedAtLT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldReviewedAt, v))
}

// ReviewedAtLTE applies the LTE predicate on the "reviewed_at" field.
func ReviewedAtLTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldReviewedAt, v))
}

// ReviewedAtIsNil applies the IsNil predicate on the "reviewed_at" field.
func ReviewedAtIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldReviewedAt))
}

// ReviewedAtNotNil applies the NotNil predicate on the "reviewed_at" field.
func ReviewedAtNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldReviewedAt))
}

// ReviewNotesEQ applies the EQ predicate on the "review_notes" field.
func ReviewNotesEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldReviewNotes, v))
}

// ReviewNotesNEQ applies the NEQ predicate on the "review_notes" field.
func ReviewNotesNEQ(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldReviewNotes, v))
}

// ReviewNotesIn applies the In predicate on the "review_notes" field.
func ReviewNotesIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldReviewNotes, vs...))
}

// ReviewNotesNotIn applies the NotIn predicate on the "review_notes" field.
func ReviewNotesNotIn(vs ...string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldReviewNotes, vs...))
}

// ReviewNotesGT applies the GT predicate on the "review_notes" field.
func ReviewNotesGT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldReviewNotes, v))
}

// ReviewNotesGTE applies the GTE predicate on the "review_notes" field.
func ReviewNotesGTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldReviewNotes, v))
}

// ReviewNotesLT applies the LT predicate on the "review_notes" field.
func ReviewNotesLT(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldReviewNotes, v))
}

// ReviewNotesLTE applies the LTE predicate on the "review_notes" field.
func ReviewNotesLTE(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldReviewNotes, v))
}

// ReviewNotesContains applies the Contains predicate on the "review_notes" field.
func ReviewNotesContains(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContains(FieldReviewNotes, v))
}

// ReviewNotesHasPrefix applies the HasPrefix predicate on the "review_notes" field.
func ReviewNotesHasPrefix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasPrefix(FieldReviewNotes, v))
}

// ReviewNotesHasSuffix applies the HasSuffix predicate on the "review_notes" field.
func ReviewNotesHasSuffix(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldHasSuffix(FieldReviewNotes, v))
}

// ReviewNotesIsNil applies the IsNil predicate on the "review_notes" field.
func ReviewNotesIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldReviewNotes))
}

// ReviewNotesNotNil applies the NotNil predicate on the "review_notes" field.
func ReviewNotesNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldReviewNotes))
}

// ReviewNotesEqualFold applies the EqualFold predicate on the "review_notes" field.
func ReviewNotesEqualFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEqualFold(FieldReviewNotes, v))
}

// ReviewNotesContainsFold applies the ContainsFold predicate on the "review_notes" field.
func ReviewNotesContainsFold(v string) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldContainsFold(FieldReviewNotes, v))
}

// InterviewDateEQ applies the EQ predicate on the "interview_date" field.
func InterviewDateEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldInterviewDate, v))
}

// InterviewDateNEQ applies the NEQ predicate on the "interview_date" field.
func InterviewDateNEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldInterviewDate, v))
}

// InterviewDateIn applies the In predicate on the "interview_date" field.
func InterviewDateIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldInterviewDate, vs...))
}

// InterviewDateNotIn applies the NotIn predicate on the "interview_date" field.
func InterviewDateNotIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldInterviewDate, vs...))
}

// InterviewDateGT applies the GT predicate on the "interview_date" field.
func InterviewDateGT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldInterviewDate, v))
}

// InterviewDateGTE applies the GTE predicate on the "interview_date" field.
func InterviewDateGTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldInterviewDate, v))
}

// InterviewDateLT applies the LT predicate on the "interview_date" field.
func InterviewDateLT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldInterviewDate, v))
}

// InterviewDateLTE applies the LTE predicate on the "interview_date" field.
func InterviewDateLTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldInterviewDate, v))
}

// InterviewDateIsNil applies the IsNil predicate on the "interview_date" field.
func InterviewDateIsNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIsNull(FieldInterviewDate))
}

// InterviewDateNotNil applies the NotNil predicate on the "interview_date" field.
func InterviewDateNotNil() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotNull(FieldInterviewDate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInterestedOpportunities applies the HasEdge predicate on the "interested_opportunities" edge.
func HasInterestedOpportunities() predicate.VolunteerApplication {
	return predicate.VolunteerApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, InterestedOpportunitiesTable, InterestedOpportunitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterestedOpportunitiesWith applies the HasEdge predicate on the "interested_opportunities" edge with a given conditions (other predicates).
func HasInterestedOpportunitiesWith(preds ...predicate.VolunteerOpportunity) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(func(s *sql.Selector) {
		step := newInterestedOpportunitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VolunteerApplication) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VolunteerApplication) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VolunteerApplication) predicate.VolunteerApplication {
	return predicate.VolunteerApplication(sql.NotPredicates(p))
}
