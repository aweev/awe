// Code generated by ent, DO NOT EDIT.

package volunteerapplication

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the volunteerapplication type in the database.
	Label = "volunteer_application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMotivation holds the string denoting the motivation field in the database.
	FieldMotivation = "motivation"
	// FieldAvailability holds the string denoting the availability field in the database.
	FieldAvailability = "availability"
	// FieldBackgroundCheck holds the string denoting the background_check field in the database.
	FieldBackgroundCheck = "background_check"
	// FieldBackgroundCheckDate holds the string denoting the background_check_date field in the database.
	FieldBackgroundCheckDate = "background_check_date"
	// FieldReferences holds the string denoting the references field in the database.
	FieldReferences = "references"
	// FieldEmergencyContact holds the string denoting the emergency_contact field in the database.
	FieldEmergencyContact = "emergency_contact"
	// FieldReviewedBy holds the string denoting the reviewed_by field in the database.
	FieldReviewedBy = "reviewed_by"
	// FieldReviewedAt holds the string denoting the reviewed_at field in the database.
	FieldReviewedAt = "reviewed_at"
	// FieldReviewNotes holds the string denoting the review_notes field in the database.
	FieldReviewNotes = "review_notes"
	// FieldInterviewDate holds the string denoting the interview_date field in the database.
	FieldInterviewDate = "interview_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeInterestedOpportunities holds the string denoting the interested_opportunities edge name in mutations.
	EdgeInterestedOpportunities = "interested_opportunities"
	// Table holds the table name of the volunteerapplication in the database.
	Table = "volunteer_applications"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "volunteer_applications"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_volunteer_applications"
	// InterestedOpportunitiesTable is the table that holds the interested_opportunities relation/edge. The primary key declared below.
	InterestedOpportunitiesTable = "volunteer_opportunity_interested_volunteers"
	// InterestedOpportunitiesInverseTable is the table name for the VolunteerOpportunity entity.
	// It exists in this package in order to avoid circular dependency with the "volunteeropportunity" package.
	InterestedOpportunitiesInverseTable = "volunteer_opportunities"
)

// Columns holds all SQL columns for volunteerapplication fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldMotivation,
	FieldAvailability,
	FieldBackgroundCheck,
	FieldBackgroundCheckDate,
	FieldReferences,
	FieldEmergencyContact,
	FieldReviewedBy,
	FieldReviewedAt,
	FieldReviewNotes,
	FieldInterviewDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "volunteer_applications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_volunteer_applications",
}

var (
	// InterestedOpportunitiesPrimaryKey and InterestedOpportunitiesColumn2 are the table columns denoting the
	// primary key for the interested_opportunities relation (M2M).
	InterestedOpportunitiesPrimaryKey = []string{"volunteer_opportunity_id", "volunteer_application_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBackgroundCheck holds the default value on creation for the "background_check" field.
	DefaultBackgroundCheck bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusSUBMITTED is the default value of the Status enum.
const DefaultStatus = StatusSUBMITTED

// Status values.
const (
	StatusSUBMITTED           Status = "SUBMITTED"
	StatusUNDER_REVIEW        Status = "UNDER_REVIEW"
	StatusINTERVIEW_SCHEDULED Status = "INTERVIEW_SCHEDULED"
	StatusBACKGROUND_CHECK    Status = "BACKGROUND_CHECK"
	StatusAPPROVED            Status = "APPROVED"
	StatusREJECTED            Status = "REJECTED"
	StatusWAITLISTED          Status = "WAITLISTED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSUBMITTED, StatusUNDER_REVIEW, StatusINTERVIEW_SCHEDULED, StatusBACKGROUND_CHECK, StatusAPPROVED, StatusREJECTED, StatusWAITLISTED:
		return nil
	default:
		return fmt.Errorf("volunteerapplication: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the VolunteerApplication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMotivation orders the results by the motivation field.
func ByMotivation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMotivation, opts...).ToFunc()
}

// ByBackgroundCheck orders the results by the background_check field.
func ByBackgroundCheck(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundCheck, opts...).ToFunc()
}

// ByBackgroundCheckDate orders the results by the background_check_date field.
func ByBackgroundCheckDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundCheckDate, opts...).ToFunc()
}

// ByReviewedBy orders the results by the reviewed_by field.
func ByReviewedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedBy, opts...).ToFunc()
}

// ByReviewedAt orders the results by the reviewed_at field.
func ByReviewedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedAt, opts...).ToFunc()
}

// ByReviewNotes orders the results by the review_notes field.
func ByReviewNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewNotes, opts...).ToFunc()
}

// ByInterviewDate orders the results by the interview_date field.
func ByInterviewDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterviewDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByInterestedOpportunitiesCount orders the results by interested_opportunities count.
func ByInterestedOpportunitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInterestedOpportunitiesStep(), opts...)
	}
}

// ByInterestedOpportunities orders the results by interested_opportunities terms.
func ByInterestedOpportunities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInterestedOpportunitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newInterestedOpportunitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InterestedOpportunitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InterestedOpportunitiesTable, InterestedOpportunitiesPrimaryKey...),
	)
}
