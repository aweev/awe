// Code generated by ent, DO NOT EDIT.

package partnerlogoitem

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldOrder, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldName, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldLogoURL, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldWebsite, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLTE(FieldOrder, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContainsFold(FieldName, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContainsFold(FieldLogoURL, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.FieldContainsFold(FieldWebsite, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.BlockPartnerLogos) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnerLogoItem) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnerLogoItem) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnerLogoItem) predicate.PartnerLogoItem {
	return predicate.PartnerLogoItem(sql.NotPredicates(p))
}
