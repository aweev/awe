// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/galleryimage"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GalleryImageCreate is the builder for creating a GalleryImage entity.
type GalleryImageCreate struct {
	config
	mutation *GalleryImageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *GalleryImageCreate) SetOrder(v int) *GalleryImageCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *GalleryImageCreate) SetImageURL(v string) *GalleryImageCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetImageWidth sets the "image_width" field.
func (_c *GalleryImageCreate) SetImageWidth(v int) *GalleryImageCreate {
	_c.mutation.SetImageWidth(v)
	return _c
}

// SetNillableImageWidth sets the "image_width" field if the given value is not nil.
func (_c *GalleryImageCreate) SetNillableImageWidth(v *int) *GalleryImageCreate {
	if v != nil {
		_c.SetImageWidth(*v)
	}
	return _c
}

// SetImageHeight sets the "image_height" field.
func (_c *GalleryImageCreate) SetImageHeight(v int) *GalleryImageCreate {
	_c.mutation.SetImageHeight(v)
	return _c
}

// SetNillableImageHeight sets the "image_height" field if the given value is not nil.
func (_c *GalleryImageCreate) SetNillableImageHeight(v *int) *GalleryImageCreate {
	if v != nil {
		_c.SetImageHeight(*v)
	}
	return _c
}

// SetAltText sets the "alt_text" field.
func (_c *GalleryImageCreate) SetAltText(v map[string]string) *GalleryImageCreate {
	_c.mutation.SetAltText(v)
	return _c
}

// SetCaption sets the "caption" field.
func (_c *GalleryImageCreate) SetCaption(v map[string]string) *GalleryImageCreate {
	_c.mutation.SetCaption(v)
	return _c
}

// SetBlockID sets the "block" edge to the BlockGallery entity by ID.
func (_c *GalleryImageCreate) SetBlockID(id int) *GalleryImageCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockGallery entity.
func (_c *GalleryImageCreate) SetBlock(v *BlockGallery) *GalleryImageCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the GalleryImageMutation object of the builder.
func (_c *GalleryImageCreate) Mutation() *GalleryImageMutation {
	return _c.mutation
}

// Save creates the GalleryImage in the database.
func (_c *GalleryImageCreate) Save(ctx context.Context) (*GalleryImage, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GalleryImageCreate) SaveX(ctx context.Context) *GalleryImage {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GalleryImageCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GalleryImageCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GalleryImageCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "GalleryImage.order"`)}
	}
	if _, ok := _c.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "GalleryImage.image_url"`)}
	}
	if _, ok := _c.mutation.AltText(); !ok {
		return &ValidationError{Name: "alt_text", err: errors.New(`ent: missing required field "GalleryImage.alt_text"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "GalleryImage.block"`)}
	}
	return nil
}

func (_c *GalleryImageCreate) sqlSave(ctx context.Context) (*GalleryImage, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GalleryImageCreate) createSpec() (*GalleryImage, *sqlgraph.CreateSpec) {
	var (
		_node = &GalleryImage{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(galleryimage.Table, sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(galleryimage.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(galleryimage.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.ImageWidth(); ok {
		_spec.SetField(galleryimage.FieldImageWidth, field.TypeInt, value)
		_node.ImageWidth = value
	}
	if value, ok := _c.mutation.ImageHeight(); ok {
		_spec.SetField(galleryimage.FieldImageHeight, field.TypeInt, value)
		_node.ImageHeight = value
	}
	if value, ok := _c.mutation.AltText(); ok {
		_spec.SetField(galleryimage.FieldAltText, field.TypeJSON, value)
		_node.AltText = value
	}
	if value, ok := _c.mutation.Caption(); ok {
		_spec.SetField(galleryimage.FieldCaption, field.TypeJSON, value)
		_node.Caption = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_gallery_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GalleryImage.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GalleryImageUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *GalleryImageCreate) OnConflict(opts ...sql.ConflictOption) *GalleryImageUpsertOne {
	_c.conflict = opts
	return &GalleryImageUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GalleryImageCreate) OnConflictColumns(columns ...string) *GalleryImageUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GalleryImageUpsertOne{
		create: _c,
	}
}

type (
	// GalleryImageUpsertOne is the builder for "upsert"-ing
	//  one GalleryImage node.
	GalleryImageUpsertOne struct {
		create *GalleryImageCreate
	}

	// GalleryImageUpsert is the "OnConflict" setter.
	GalleryImageUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *GalleryImageUpsert) SetOrder(v int) *GalleryImageUpsert {
	u.Set(galleryimage.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateOrder() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *GalleryImageUpsert) AddOrder(v int) *GalleryImageUpsert {
	u.Add(galleryimage.FieldOrder, v)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *GalleryImageUpsert) SetImageURL(v string) *GalleryImageUpsert {
	u.Set(galleryimage.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateImageURL() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldImageURL)
	return u
}

// SetImageWidth sets the "image_width" field.
func (u *GalleryImageUpsert) SetImageWidth(v int) *GalleryImageUpsert {
	u.Set(galleryimage.FieldImageWidth, v)
	return u
}

// UpdateImageWidth sets the "image_width" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateImageWidth() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldImageWidth)
	return u
}

// AddImageWidth adds v to the "image_width" field.
func (u *GalleryImageUpsert) AddImageWidth(v int) *GalleryImageUpsert {
	u.Add(galleryimage.FieldImageWidth, v)
	return u
}

// ClearImageWidth clears the value of the "image_width" field.
func (u *GalleryImageUpsert) ClearImageWidth() *GalleryImageUpsert {
	u.SetNull(galleryimage.FieldImageWidth)
	return u
}

// SetImageHeight sets the "image_height" field.
func (u *GalleryImageUpsert) SetImageHeight(v int) *GalleryImageUpsert {
	u.Set(galleryimage.FieldImageHeight, v)
	return u
}

// UpdateImageHeight sets the "image_height" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateImageHeight() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldImageHeight)
	return u
}

// AddImageHeight adds v to the "image_height" field.
func (u *GalleryImageUpsert) AddImageHeight(v int) *GalleryImageUpsert {
	u.Add(galleryimage.FieldImageHeight, v)
	return u
}

// ClearImageHeight clears the value of the "image_height" field.
func (u *GalleryImageUpsert) ClearImageHeight() *GalleryImageUpsert {
	u.SetNull(galleryimage.FieldImageHeight)
	return u
}

// SetAltText sets the "alt_text" field.
func (u *GalleryImageUpsert) SetAltText(v map[string]string) *GalleryImageUpsert {
	u.Set(galleryimage.FieldAltText, v)
	return u
}

// UpdateAltText sets the "alt_text" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateAltText() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldAltText)
	return u
}

// SetCaption sets the "caption" field.
func (u *GalleryImageUpsert) SetCaption(v map[string]string) *GalleryImageUpsert {
	u.Set(galleryimage.FieldCaption, v)
	return u
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *GalleryImageUpsert) UpdateCaption() *GalleryImageUpsert {
	u.SetExcluded(galleryimage.FieldCaption)
	return u
}

// ClearCaption clears the value of the "caption" field.
func (u *GalleryImageUpsert) ClearCaption() *GalleryImageUpsert {
	u.SetNull(galleryimage.FieldCaption)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GalleryImageUpsertOne) UpdateNewValues() *GalleryImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GalleryImageUpsertOne) Ignore() *GalleryImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GalleryImageUpsertOne) DoNothing() *GalleryImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GalleryImageCreate.OnConflict
// documentation for more info.
func (u *GalleryImageUpsertOne) Update(set func(*GalleryImageUpsert)) *GalleryImageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GalleryImageUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *GalleryImageUpsertOne) SetOrder(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *GalleryImageUpsertOne) AddOrder(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateOrder() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateOrder()
	})
}

// SetImageURL sets the "image_url" field.
func (u *GalleryImageUpsertOne) SetImageURL(v string) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateImageURL() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageURL()
	})
}

// SetImageWidth sets the "image_width" field.
func (u *GalleryImageUpsertOne) SetImageWidth(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageWidth(v)
	})
}

// AddImageWidth adds v to the "image_width" field.
func (u *GalleryImageUpsertOne) AddImageWidth(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddImageWidth(v)
	})
}

// UpdateImageWidth sets the "image_width" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateImageWidth() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageWidth()
	})
}

// ClearImageWidth clears the value of the "image_width" field.
func (u *GalleryImageUpsertOne) ClearImageWidth() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearImageWidth()
	})
}

// SetImageHeight sets the "image_height" field.
func (u *GalleryImageUpsertOne) SetImageHeight(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageHeight(v)
	})
}

// AddImageHeight adds v to the "image_height" field.
func (u *GalleryImageUpsertOne) AddImageHeight(v int) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddImageHeight(v)
	})
}

// UpdateImageHeight sets the "image_height" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateImageHeight() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageHeight()
	})
}

// ClearImageHeight clears the value of the "image_height" field.
func (u *GalleryImageUpsertOne) ClearImageHeight() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearImageHeight()
	})
}

// SetAltText sets the "alt_text" field.
func (u *GalleryImageUpsertOne) SetAltText(v map[string]string) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetAltText(v)
	})
}

// UpdateAltText sets the "alt_text" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateAltText() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateAltText()
	})
}

// SetCaption sets the "caption" field.
func (u *GalleryImageUpsertOne) SetCaption(v map[string]string) *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetCaption(v)
	})
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *GalleryImageUpsertOne) UpdateCaption() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateCaption()
	})
}

// ClearCaption clears the value of the "caption" field.
func (u *GalleryImageUpsertOne) ClearCaption() *GalleryImageUpsertOne {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearCaption()
	})
}

// Exec executes the query.
func (u *GalleryImageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GalleryImageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GalleryImageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GalleryImageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GalleryImageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GalleryImageCreateBulk is the builder for creating many GalleryImage entities in bulk.
type GalleryImageCreateBulk struct {
	config
	err      error
	builders []*GalleryImageCreate
	conflict []sql.ConflictOption
}

// Save creates the GalleryImage entities in the database.
func (_c *GalleryImageCreateBulk) Save(ctx context.Context) ([]*GalleryImage, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*GalleryImage, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GalleryImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GalleryImageCreateBulk) SaveX(ctx context.Context) []*GalleryImage {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GalleryImageCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GalleryImageCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GalleryImage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GalleryImageUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *GalleryImageCreateBulk) OnConflict(opts ...sql.ConflictOption) *GalleryImageUpsertBulk {
	_c.conflict = opts
	return &GalleryImageUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GalleryImageCreateBulk) OnConflictColumns(columns ...string) *GalleryImageUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GalleryImageUpsertBulk{
		create: _c,
	}
}

// GalleryImageUpsertBulk is the builder for "upsert"-ing
// a bulk of GalleryImage nodes.
type GalleryImageUpsertBulk struct {
	create *GalleryImageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GalleryImageUpsertBulk) UpdateNewValues() *GalleryImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GalleryImage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GalleryImageUpsertBulk) Ignore() *GalleryImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GalleryImageUpsertBulk) DoNothing() *GalleryImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GalleryImageCreateBulk.OnConflict
// documentation for more info.
func (u *GalleryImageUpsertBulk) Update(set func(*GalleryImageUpsert)) *GalleryImageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GalleryImageUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *GalleryImageUpsertBulk) SetOrder(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *GalleryImageUpsertBulk) AddOrder(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateOrder() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateOrder()
	})
}

// SetImageURL sets the "image_url" field.
func (u *GalleryImageUpsertBulk) SetImageURL(v string) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateImageURL() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageURL()
	})
}

// SetImageWidth sets the "image_width" field.
func (u *GalleryImageUpsertBulk) SetImageWidth(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageWidth(v)
	})
}

// AddImageWidth adds v to the "image_width" field.
func (u *GalleryImageUpsertBulk) AddImageWidth(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddImageWidth(v)
	})
}

// UpdateImageWidth sets the "image_width" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateImageWidth() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageWidth()
	})
}

// ClearImageWidth clears the value of the "image_width" field.
func (u *GalleryImageUpsertBulk) ClearImageWidth() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearImageWidth()
	})
}

// SetImageHeight sets the "image_height" field.
func (u *GalleryImageUpsertBulk) SetImageHeight(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetImageHeight(v)
	})
}

// AddImageHeight adds v to the "image_height" field.
func (u *GalleryImageUpsertBulk) AddImageHeight(v int) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.AddImageHeight(v)
	})
}

// UpdateImageHeight sets the "image_height" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateImageHeight() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateImageHeight()
	})
}

// ClearImageHeight clears the value of the "image_height" field.
func (u *GalleryImageUpsertBulk) ClearImageHeight() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearImageHeight()
	})
}

// SetAltText sets the "alt_text" field.
func (u *GalleryImageUpsertBulk) SetAltText(v map[string]string) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetAltText(v)
	})
}

// UpdateAltText sets the "alt_text" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateAltText() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateAltText()
	})
}

// SetCaption sets the "caption" field.
func (u *GalleryImageUpsertBulk) SetCaption(v map[string]string) *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.SetCaption(v)
	})
}

// UpdateCaption sets the "caption" field to the value that was provided on create.
func (u *GalleryImageUpsertBulk) UpdateCaption() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.UpdateCaption()
	})
}

// ClearCaption clears the value of the "caption" field.
func (u *GalleryImageUpsertBulk) ClearCaption() *GalleryImageUpsertBulk {
	return u.Update(func(s *GalleryImageUpsert) {
		s.ClearCaption()
	})
}

// Exec executes the query.
func (u *GalleryImageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GalleryImageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GalleryImageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GalleryImageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
