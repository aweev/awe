// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReportPermission is the model entity for the ReportPermission schema.
type ReportPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID string `json:"role_id,omitempty"`
	// CanView holds the value of the "can_view" field.
	CanView bool `json:"can_view,omitempty"`
	// CanEdit holds the value of the "can_edit" field.
	CanEdit bool `json:"can_edit,omitempty"`
	// CanDelete holds the value of the "can_delete" field.
	CanDelete bool `json:"can_delete,omitempty"`
	// CanSchedule holds the value of the "can_schedule" field.
	CanSchedule bool `json:"can_schedule,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportPermissionQuery when eager-loading is set.
	Edges                         ReportPermissionEdges `json:"edges"`
	report_definition_permissions *int
	user_report_permissions       *int
	selectValues                  sql.SelectValues
}

// ReportPermissionEdges holds the relations/edges for other nodes in the graph.
type ReportPermissionEdges struct {
	// ReportDefinition holds the value of the report_definition edge.
	ReportDefinition *ReportDefinition `json:"report_definition,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReportDefinitionOrErr returns the ReportDefinition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportPermissionEdges) ReportDefinitionOrErr() (*ReportDefinition, error) {
	if e.ReportDefinition != nil {
		return e.ReportDefinition, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportdefinition.Label}
	}
	return nil, &NotLoadedError{edge: "report_definition"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportPermissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportpermission.FieldCanView, reportpermission.FieldCanEdit, reportpermission.FieldCanDelete, reportpermission.FieldCanSchedule:
			values[i] = new(sql.NullBool)
		case reportpermission.FieldID:
			values[i] = new(sql.NullInt64)
		case reportpermission.FieldRoleID:
			values[i] = new(sql.NullString)
		case reportpermission.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case reportpermission.ForeignKeys[0]: // report_definition_permissions
			values[i] = new(sql.NullInt64)
		case reportpermission.ForeignKeys[1]: // user_report_permissions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportPermission fields.
func (_m *ReportPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportpermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case reportpermission.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				_m.RoleID = value.String
			}
		case reportpermission.FieldCanView:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_view", values[i])
			} else if value.Valid {
				_m.CanView = value.Bool
			}
		case reportpermission.FieldCanEdit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_edit", values[i])
			} else if value.Valid {
				_m.CanEdit = value.Bool
			}
		case reportpermission.FieldCanDelete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_delete", values[i])
			} else if value.Valid {
				_m.CanDelete = value.Bool
			}
		case reportpermission.FieldCanSchedule:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_schedule", values[i])
			} else if value.Valid {
				_m.CanSchedule = value.Bool
			}
		case reportpermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case reportpermission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_definition_permissions", value)
			} else if value.Valid {
				_m.report_definition_permissions = new(int)
				*_m.report_definition_permissions = int(value.Int64)
			}
		case reportpermission.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_report_permissions", value)
			} else if value.Valid {
				_m.user_report_permissions = new(int)
				*_m.user_report_permissions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportPermission.
// This includes values selected through modifiers, order, etc.
func (_m *ReportPermission) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryReportDefinition queries the "report_definition" edge of the ReportPermission entity.
func (_m *ReportPermission) QueryReportDefinition() *ReportDefinitionQuery {
	return NewReportPermissionClient(_m.config).QueryReportDefinition(_m)
}

// QueryUser queries the "user" edge of the ReportPermission entity.
func (_m *ReportPermission) QueryUser() *UserQuery {
	return NewReportPermissionClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this ReportPermission.
// Note that you need to call ReportPermission.Unwrap() before calling this method if this ReportPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ReportPermission) Update() *ReportPermissionUpdateOne {
	return NewReportPermissionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ReportPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ReportPermission) Unwrap() *ReportPermission {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportPermission is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ReportPermission) String() string {
	var builder strings.Builder
	builder.WriteString("ReportPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("role_id=")
	builder.WriteString(_m.RoleID)
	builder.WriteString(", ")
	builder.WriteString("can_view=")
	builder.WriteString(fmt.Sprintf("%v", _m.CanView))
	builder.WriteString(", ")
	builder.WriteString("can_edit=")
	builder.WriteString(fmt.Sprintf("%v", _m.CanEdit))
	builder.WriteString(", ")
	builder.WriteString("can_delete=")
	builder.WriteString(fmt.Sprintf("%v", _m.CanDelete))
	builder.WriteString(", ")
	builder.WriteString("can_schedule=")
	builder.WriteString(fmt.Sprintf("%v", _m.CanSchedule))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportPermissions is a parsable slice of ReportPermission.
type ReportPermissions []*ReportPermission
