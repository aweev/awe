// Code generated by ent, DO NOT EDIT.

package volunteeropportunity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the volunteeropportunity type in the database.
	Label = "volunteer_opportunity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTimeCommitment holds the string denoting the time_commitment field in the database.
	FieldTimeCommitment = "time_commitment"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldMaxVolunteers holds the string denoting the max_volunteers field in the database.
	FieldMaxVolunteers = "max_volunteers"
	// FieldCurrentVolunteers holds the string denoting the current_volunteers field in the database.
	FieldCurrentVolunteers = "current_volunteers"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldApplicationDeadline holds the string denoting the application_deadline field in the database.
	FieldApplicationDeadline = "application_deadline"
	// FieldRequiredSkills holds the string denoting the required_skills field in the database.
	FieldRequiredSkills = "required_skills"
	// FieldPreferredSkills holds the string denoting the preferred_skills field in the database.
	FieldPreferredSkills = "preferred_skills"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldIsUrgent holds the string denoting the is_urgent field in the database.
	FieldIsUrgent = "is_urgent"
	// FieldIsRecurring holds the string denoting the is_recurring field in the database.
	FieldIsRecurring = "is_recurring"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeInterestedVolunteers holds the string denoting the interested_volunteers edge name in mutations.
	EdgeInterestedVolunteers = "interested_volunteers"
	// EdgeAssignments holds the string denoting the assignments edge name in mutations.
	EdgeAssignments = "assignments"
	// Table holds the table name of the volunteeropportunity in the database.
	Table = "volunteer_opportunities"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "volunteer_opportunities"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_volunteer_opportunities"
	// InterestedVolunteersTable is the table that holds the interested_volunteers relation/edge. The primary key declared below.
	InterestedVolunteersTable = "volunteer_opportunity_interested_volunteers"
	// InterestedVolunteersInverseTable is the table name for the VolunteerApplication entity.
	// It exists in this package in order to avoid circular dependency with the "volunteerapplication" package.
	InterestedVolunteersInverseTable = "volunteer_applications"
	// AssignmentsTable is the table that holds the assignments relation/edge.
	AssignmentsTable = "volunteer_assignments"
	// AssignmentsInverseTable is the table name for the VolunteerAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "volunteerassignment" package.
	AssignmentsInverseTable = "volunteer_assignments"
	// AssignmentsColumn is the table column denoting the assignments relation/edge.
	AssignmentsColumn = "volunteer_opportunity_assignments"
)

// Columns holds all SQL columns for volunteeropportunity fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldTimeCommitment,
	FieldLocation,
	FieldIsActive,
	FieldMaxVolunteers,
	FieldCurrentVolunteers,
	FieldStartDate,
	FieldEndDate,
	FieldApplicationDeadline,
	FieldRequiredSkills,
	FieldPreferredSkills,
	FieldTags,
	FieldIsUrgent,
	FieldIsRecurring,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "volunteer_opportunities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_volunteer_opportunities",
}

var (
	// InterestedVolunteersPrimaryKey and InterestedVolunteersColumn2 are the table columns denoting the
	// primary key for the interested_volunteers relation (M2M).
	InterestedVolunteersPrimaryKey = []string{"volunteer_opportunity_id", "volunteer_application_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCurrentVolunteers holds the default value on creation for the "current_volunteers" field.
	DefaultCurrentVolunteers int
	// DefaultIsUrgent holds the default value on creation for the "is_urgent" field.
	DefaultIsUrgent bool
	// DefaultIsRecurring holds the default value on creation for the "is_recurring" field.
	DefaultIsRecurring bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the VolunteerOpportunity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimeCommitment orders the results by the time_commitment field.
func ByTimeCommitment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeCommitment, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByMaxVolunteers orders the results by the max_volunteers field.
func ByMaxVolunteers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxVolunteers, opts...).ToFunc()
}

// ByCurrentVolunteers orders the results by the current_volunteers field.
func ByCurrentVolunteers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentVolunteers, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByApplicationDeadline orders the results by the application_deadline field.
func ByApplicationDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationDeadline, opts...).ToFunc()
}

// ByIsUrgent orders the results by the is_urgent field.
func ByIsUrgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUrgent, opts...).ToFunc()
}

// ByIsRecurring orders the results by the is_recurring field.
func ByIsRecurring(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRecurring, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByInterestedVolunteersCount orders the results by interested_volunteers count.
func ByInterestedVolunteersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInterestedVolunteersStep(), opts...)
	}
}

// ByInterestedVolunteers orders the results by interested_volunteers terms.
func ByInterestedVolunteers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInterestedVolunteersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignmentsCount orders the results by assignments count.
func ByAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignmentsStep(), opts...)
	}
}

// ByAssignments orders the results by assignments terms.
func ByAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newInterestedVolunteersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InterestedVolunteersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, InterestedVolunteersTable, InterestedVolunteersPrimaryKey...),
	)
}
func newAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignmentsTable, AssignmentsColumn),
	)
}
