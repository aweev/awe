// Code generated by ent, DO NOT EDIT.

package volunteeropportunity

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldID, id))
}

// TimeCommitment applies equality check predicate on the "time_commitment" field. It's identical to TimeCommitmentEQ.
func TimeCommitment(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldTimeCommitment, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsActive, v))
}

// MaxVolunteers applies equality check predicate on the "max_volunteers" field. It's identical to MaxVolunteersEQ.
func MaxVolunteers(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldMaxVolunteers, v))
}

// CurrentVolunteers applies equality check predicate on the "current_volunteers" field. It's identical to CurrentVolunteersEQ.
func CurrentVolunteers(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldCurrentVolunteers, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldEndDate, v))
}

// ApplicationDeadline applies equality check predicate on the "application_deadline" field. It's identical to ApplicationDeadlineEQ.
func ApplicationDeadline(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldApplicationDeadline, v))
}

// IsUrgent applies equality check predicate on the "is_urgent" field. It's identical to IsUrgentEQ.
func IsUrgent(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsUrgent, v))
}

// IsRecurring applies equality check predicate on the "is_recurring" field. It's identical to IsRecurringEQ.
func IsRecurring(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsRecurring, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldUpdatedAt, v))
}

// TimeCommitmentEQ applies the EQ predicate on the "time_commitment" field.
func TimeCommitmentEQ(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldTimeCommitment, v))
}

// TimeCommitmentNEQ applies the NEQ predicate on the "time_commitment" field.
func TimeCommitmentNEQ(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldTimeCommitment, v))
}

// TimeCommitmentIn applies the In predicate on the "time_commitment" field.
func TimeCommitmentIn(vs ...string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldTimeCommitment, vs...))
}

// TimeCommitmentNotIn applies the NotIn predicate on the "time_commitment" field.
func TimeCommitmentNotIn(vs ...string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldTimeCommitment, vs...))
}

// TimeCommitmentGT applies the GT predicate on the "time_commitment" field.
func TimeCommitmentGT(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldTimeCommitment, v))
}

// TimeCommitmentGTE applies the GTE predicate on the "time_commitment" field.
func TimeCommitmentGTE(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldTimeCommitment, v))
}

// TimeCommitmentLT applies the LT predicate on the "time_commitment" field.
func TimeCommitmentLT(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldTimeCommitment, v))
}

// TimeCommitmentLTE applies the LTE predicate on the "time_commitment" field.
func TimeCommitmentLTE(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldTimeCommitment, v))
}

// TimeCommitmentContains applies the Contains predicate on the "time_commitment" field.
func TimeCommitmentContains(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldContains(FieldTimeCommitment, v))
}

// TimeCommitmentHasPrefix applies the HasPrefix predicate on the "time_commitment" field.
func TimeCommitmentHasPrefix(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldHasPrefix(FieldTimeCommitment, v))
}

// TimeCommitmentHasSuffix applies the HasSuffix predicate on the "time_commitment" field.
func TimeCommitmentHasSuffix(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldHasSuffix(FieldTimeCommitment, v))
}

// TimeCommitmentEqualFold applies the EqualFold predicate on the "time_commitment" field.
func TimeCommitmentEqualFold(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEqualFold(FieldTimeCommitment, v))
}

// TimeCommitmentContainsFold applies the ContainsFold predicate on the "time_commitment" field.
func TimeCommitmentContainsFold(v string) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldContainsFold(FieldTimeCommitment, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldIsActive, v))
}

// MaxVolunteersEQ applies the EQ predicate on the "max_volunteers" field.
func MaxVolunteersEQ(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldMaxVolunteers, v))
}

// MaxVolunteersNEQ applies the NEQ predicate on the "max_volunteers" field.
func MaxVolunteersNEQ(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldMaxVolunteers, v))
}

// MaxVolunteersIn applies the In predicate on the "max_volunteers" field.
func MaxVolunteersIn(vs ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldMaxVolunteers, vs...))
}

// MaxVolunteersNotIn applies the NotIn predicate on the "max_volunteers" field.
func MaxVolunteersNotIn(vs ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldMaxVolunteers, vs...))
}

// MaxVolunteersGT applies the GT predicate on the "max_volunteers" field.
func MaxVolunteersGT(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldMaxVolunteers, v))
}

// MaxVolunteersGTE applies the GTE predicate on the "max_volunteers" field.
func MaxVolunteersGTE(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldMaxVolunteers, v))
}

// MaxVolunteersLT applies the LT predicate on the "max_volunteers" field.
func MaxVolunteersLT(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldMaxVolunteers, v))
}

// MaxVolunteersLTE applies the LTE predicate on the "max_volunteers" field.
func MaxVolunteersLTE(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldMaxVolunteers, v))
}

// MaxVolunteersIsNil applies the IsNil predicate on the "max_volunteers" field.
func MaxVolunteersIsNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIsNull(FieldMaxVolunteers))
}

// MaxVolunteersNotNil applies the NotNil predicate on the "max_volunteers" field.
func MaxVolunteersNotNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotNull(FieldMaxVolunteers))
}

// CurrentVolunteersEQ applies the EQ predicate on the "current_volunteers" field.
func CurrentVolunteersEQ(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldCurrentVolunteers, v))
}

// CurrentVolunteersNEQ applies the NEQ predicate on the "current_volunteers" field.
func CurrentVolunteersNEQ(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldCurrentVolunteers, v))
}

// CurrentVolunteersIn applies the In predicate on the "current_volunteers" field.
func CurrentVolunteersIn(vs ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldCurrentVolunteers, vs...))
}

// CurrentVolunteersNotIn applies the NotIn predicate on the "current_volunteers" field.
func CurrentVolunteersNotIn(vs ...int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldCurrentVolunteers, vs...))
}

// CurrentVolunteersGT applies the GT predicate on the "current_volunteers" field.
func CurrentVolunteersGT(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldCurrentVolunteers, v))
}

// CurrentVolunteersGTE applies the GTE predicate on the "current_volunteers" field.
func CurrentVolunteersGTE(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldCurrentVolunteers, v))
}

// CurrentVolunteersLT applies the LT predicate on the "current_volunteers" field.
func CurrentVolunteersLT(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldCurrentVolunteers, v))
}

// CurrentVolunteersLTE applies the LTE predicate on the "current_volunteers" field.
func CurrentVolunteersLTE(v int) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldCurrentVolunteers, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotNull(FieldEndDate))
}

// ApplicationDeadlineEQ applies the EQ predicate on the "application_deadline" field.
func ApplicationDeadlineEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldApplicationDeadline, v))
}

// ApplicationDeadlineNEQ applies the NEQ predicate on the "application_deadline" field.
func ApplicationDeadlineNEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldApplicationDeadline, v))
}

// ApplicationDeadlineIn applies the In predicate on the "application_deadline" field.
func ApplicationDeadlineIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldApplicationDeadline, vs...))
}

// ApplicationDeadlineNotIn applies the NotIn predicate on the "application_deadline" field.
func ApplicationDeadlineNotIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldApplicationDeadline, vs...))
}

// ApplicationDeadlineGT applies the GT predicate on the "application_deadline" field.
func ApplicationDeadlineGT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldApplicationDeadline, v))
}

// ApplicationDeadlineGTE applies the GTE predicate on the "application_deadline" field.
func ApplicationDeadlineGTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldApplicationDeadline, v))
}

// ApplicationDeadlineLT applies the LT predicate on the "application_deadline" field.
func ApplicationDeadlineLT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldApplicationDeadline, v))
}

// ApplicationDeadlineLTE applies the LTE predicate on the "application_deadline" field.
func ApplicationDeadlineLTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldApplicationDeadline, v))
}

// ApplicationDeadlineIsNil applies the IsNil predicate on the "application_deadline" field.
func ApplicationDeadlineIsNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIsNull(FieldApplicationDeadline))
}

// ApplicationDeadlineNotNil applies the NotNil predicate on the "application_deadline" field.
func ApplicationDeadlineNotNil() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotNull(FieldApplicationDeadline))
}

// IsUrgentEQ applies the EQ predicate on the "is_urgent" field.
func IsUrgentEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsUrgent, v))
}

// IsUrgentNEQ applies the NEQ predicate on the "is_urgent" field.
func IsUrgentNEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldIsUrgent, v))
}

// IsRecurringEQ applies the EQ predicate on the "is_recurring" field.
func IsRecurringEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldIsRecurring, v))
}

// IsRecurringNEQ applies the NEQ predicate on the "is_recurring" field.
func IsRecurringNEQ(v bool) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldIsRecurring, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInterestedVolunteers applies the HasEdge predicate on the "interested_volunteers" edge.
func HasInterestedVolunteers() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, InterestedVolunteersTable, InterestedVolunteersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterestedVolunteersWith applies the HasEdge predicate on the "interested_volunteers" edge with a given conditions (other predicates).
func HasInterestedVolunteersWith(preds ...predicate.VolunteerApplication) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := newInterestedVolunteersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignments applies the HasEdge predicate on the "assignments" edge.
func HasAssignments() predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentsTable, AssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentsWith applies the HasEdge predicate on the "assignments" edge with a given conditions (other predicates).
func HasAssignmentsWith(preds ...predicate.VolunteerAssignment) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(func(s *sql.Selector) {
		step := newAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VolunteerOpportunity) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VolunteerOpportunity) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VolunteerOpportunity) predicate.VolunteerOpportunity {
	return predicate.VolunteerOpportunity(sql.NotPredicates(p))
}
