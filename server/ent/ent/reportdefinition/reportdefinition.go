// Code generated by ent, DO NOT EDIT.

package reportdefinition

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportdefinition type in the database.
	Label = "report_definition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldParameters holds the string denoting the parameters field in the database.
	FieldParameters = "parameters"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// EdgeGeneratedReports holds the string denoting the generated_reports edge name in mutations.
	EdgeGeneratedReports = "generated_reports"
	// EdgeSchedules holds the string denoting the schedules edge name in mutations.
	EdgeSchedules = "schedules"
	// Table holds the table name of the reportdefinition in the database.
	Table = "report_definitions"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "report_definitions"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_created_reports"
	// PermissionsTable is the table that holds the permissions relation/edge.
	PermissionsTable = "report_permissions"
	// PermissionsInverseTable is the table name for the ReportPermission entity.
	// It exists in this package in order to avoid circular dependency with the "reportpermission" package.
	PermissionsInverseTable = "report_permissions"
	// PermissionsColumn is the table column denoting the permissions relation/edge.
	PermissionsColumn = "report_definition_permissions"
	// GeneratedReportsTable is the table that holds the generated_reports relation/edge.
	GeneratedReportsTable = "generated_reports"
	// GeneratedReportsInverseTable is the table name for the GeneratedReport entity.
	// It exists in this package in order to avoid circular dependency with the "generatedreport" package.
	GeneratedReportsInverseTable = "generated_reports"
	// GeneratedReportsColumn is the table column denoting the generated_reports relation/edge.
	GeneratedReportsColumn = "report_definition_generated_reports"
	// SchedulesTable is the table that holds the schedules relation/edge.
	SchedulesTable = "scheduled_reports"
	// SchedulesInverseTable is the table name for the ScheduledReport entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledreport" package.
	SchedulesInverseTable = "scheduled_reports"
	// SchedulesColumn is the table column denoting the schedules relation/edge.
	SchedulesColumn = "report_definition_schedules"
)

// Columns holds all SQL columns for reportdefinition fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldType,
	FieldDescription,
	FieldQuery,
	FieldParameters,
	FieldIsPublic,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_definitions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_created_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDONATION_SUMMARY   Type = "DONATION_SUMMARY"
	TypePROGRAM_IMPACT     Type = "PROGRAM_IMPACT"
	TypeFINANCIAL_OVERVIEW Type = "FINANCIAL_OVERVIEW"
	TypeENGAGEMENT_METRICS Type = "ENGAGEMENT_METRICS"
	TypeVOLUNTEER_HOURS    Type = "VOLUNTEER_HOURS"
	TypePARTNERSHIP_ROI    Type = "PARTNERSHIP_ROI"
	TypeCUSTOM             Type = "CUSTOM"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDONATION_SUMMARY, TypePROGRAM_IMPACT, TypeFINANCIAL_OVERVIEW, TypeENGAGEMENT_METRICS, TypeVOLUNTEER_HOURS, TypePARTNERSHIP_ROI, TypeCUSTOM:
		return nil
	default:
		return fmt.Errorf("reportdefinition: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ReportDefinition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByPermissionsCount orders the results by permissions count.
func ByPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionsStep(), opts...)
	}
}

// ByPermissions orders the results by permissions terms.
func ByPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGeneratedReportsCount orders the results by generated_reports count.
func ByGeneratedReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGeneratedReportsStep(), opts...)
	}
}

// ByGeneratedReports orders the results by generated_reports terms.
func ByGeneratedReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneratedReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySchedulesCount orders the results by schedules count.
func BySchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSchedulesStep(), opts...)
	}
}

// BySchedules orders the results by schedules terms.
func BySchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
func newPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PermissionsTable, PermissionsColumn),
	)
}
func newGeneratedReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneratedReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GeneratedReportsTable, GeneratedReportsColumn),
	)
}
func newSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SchedulesTable, SchedulesColumn),
	)
}
