// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/conversation"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationParticipantUpdate is the builder for updating ConversationParticipant entities.
type ConversationParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationParticipantMutation
}

// Where appends a list predicates to the ConversationParticipantUpdate builder.
func (_u *ConversationParticipantUpdate) Where(ps ...predicate.ConversationParticipant) *ConversationParticipantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLastReadAt sets the "last_read_at" field.
func (_u *ConversationParticipantUpdate) SetLastReadAt(v time.Time) *ConversationParticipantUpdate {
	_u.mutation.SetLastReadAt(v)
	return _u
}

// SetNillableLastReadAt sets the "last_read_at" field if the given value is not nil.
func (_u *ConversationParticipantUpdate) SetNillableLastReadAt(v *time.Time) *ConversationParticipantUpdate {
	if v != nil {
		_u.SetLastReadAt(*v)
	}
	return _u
}

// ClearLastReadAt clears the value of the "last_read_at" field.
func (_u *ConversationParticipantUpdate) ClearLastReadAt() *ConversationParticipantUpdate {
	_u.mutation.ClearLastReadAt()
	return _u
}

// SetConversationID sets the "conversation" edge to the Conversation entity by ID.
func (_u *ConversationParticipantUpdate) SetConversationID(id int) *ConversationParticipantUpdate {
	_u.mutation.SetConversationID(id)
	return _u
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (_u *ConversationParticipantUpdate) SetConversation(v *Conversation) *ConversationParticipantUpdate {
	return _u.SetConversationID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ConversationParticipantUpdate) SetUserID(id int) *ConversationParticipantUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ConversationParticipantUpdate) SetUser(v *User) *ConversationParticipantUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ConversationParticipantMutation object of the builder.
func (_u *ConversationParticipantUpdate) Mutation() *ConversationParticipantMutation {
	return _u.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (_u *ConversationParticipantUpdate) ClearConversation() *ConversationParticipantUpdate {
	_u.mutation.ClearConversation()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ConversationParticipantUpdate) ClearUser() *ConversationParticipantUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConversationParticipantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConversationParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConversationParticipantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConversationParticipantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConversationParticipantUpdate) check() error {
	if _u.mutation.ConversationCleared() && len(_u.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.conversation"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.user"`)
	}
	return nil
}

func (_u *ConversationParticipantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversationparticipant.Table, conversationparticipant.Columns, sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LastReadAt(); ok {
		_spec.SetField(conversationparticipant.FieldLastReadAt, field.TypeTime, value)
	}
	if _u.mutation.LastReadAtCleared() {
		_spec.ClearField(conversationparticipant.FieldLastReadAt, field.TypeTime)
	}
	if _u.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConversationParticipantUpdateOne is the builder for updating a single ConversationParticipant entity.
type ConversationParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationParticipantMutation
}

// SetLastReadAt sets the "last_read_at" field.
func (_u *ConversationParticipantUpdateOne) SetLastReadAt(v time.Time) *ConversationParticipantUpdateOne {
	_u.mutation.SetLastReadAt(v)
	return _u
}

// SetNillableLastReadAt sets the "last_read_at" field if the given value is not nil.
func (_u *ConversationParticipantUpdateOne) SetNillableLastReadAt(v *time.Time) *ConversationParticipantUpdateOne {
	if v != nil {
		_u.SetLastReadAt(*v)
	}
	return _u
}

// ClearLastReadAt clears the value of the "last_read_at" field.
func (_u *ConversationParticipantUpdateOne) ClearLastReadAt() *ConversationParticipantUpdateOne {
	_u.mutation.ClearLastReadAt()
	return _u
}

// SetConversationID sets the "conversation" edge to the Conversation entity by ID.
func (_u *ConversationParticipantUpdateOne) SetConversationID(id int) *ConversationParticipantUpdateOne {
	_u.mutation.SetConversationID(id)
	return _u
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (_u *ConversationParticipantUpdateOne) SetConversation(v *Conversation) *ConversationParticipantUpdateOne {
	return _u.SetConversationID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ConversationParticipantUpdateOne) SetUserID(id int) *ConversationParticipantUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ConversationParticipantUpdateOne) SetUser(v *User) *ConversationParticipantUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ConversationParticipantMutation object of the builder.
func (_u *ConversationParticipantUpdateOne) Mutation() *ConversationParticipantMutation {
	return _u.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (_u *ConversationParticipantUpdateOne) ClearConversation() *ConversationParticipantUpdateOne {
	_u.mutation.ClearConversation()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ConversationParticipantUpdateOne) ClearUser() *ConversationParticipantUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ConversationParticipantUpdate builder.
func (_u *ConversationParticipantUpdateOne) Where(ps ...predicate.ConversationParticipant) *ConversationParticipantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConversationParticipantUpdateOne) Select(field string, fields ...string) *ConversationParticipantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ConversationParticipant entity.
func (_u *ConversationParticipantUpdateOne) Save(ctx context.Context) (*ConversationParticipant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConversationParticipantUpdateOne) SaveX(ctx context.Context) *ConversationParticipant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConversationParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConversationParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ConversationParticipantUpdateOne) check() error {
	if _u.mutation.ConversationCleared() && len(_u.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.conversation"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.user"`)
	}
	return nil
}

func (_u *ConversationParticipantUpdateOne) sqlSave(ctx context.Context) (_node *ConversationParticipant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversationparticipant.Table, conversationparticipant.Columns, sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConversationParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversationparticipant.FieldID)
		for _, f := range fields {
			if !conversationparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversationparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LastReadAt(); ok {
		_spec.SetField(conversationparticipant.FieldLastReadAt, field.TypeTime, value)
	}
	if _u.mutation.LastReadAtCleared() {
		_spec.ClearField(conversationparticipant.FieldLastReadAt, field.TypeTime)
	}
	if _u.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConversationParticipant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
