// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FundraisingCampaignUpdate is the builder for updating FundraisingCampaign entities.
type FundraisingCampaignUpdate struct {
	config
	hooks    []Hook
	mutation *FundraisingCampaignMutation
}

// Where appends a list predicates to the FundraisingCampaignUpdate builder.
func (_u *FundraisingCampaignUpdate) Where(ps ...predicate.FundraisingCampaign) *FundraisingCampaignUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *FundraisingCampaignUpdate) SetSlug(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableSlug(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *FundraisingCampaignUpdate) SetTitle(v map[string]string) *FundraisingCampaignUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *FundraisingCampaignUpdate) SetDescription(v map[string]interface{}) *FundraisingCampaignUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetStory sets the "story" field.
func (_u *FundraisingCampaignUpdate) SetStory(v map[string]interface{}) *FundraisingCampaignUpdate {
	_u.mutation.SetStory(v)
	return _u
}

// ClearStory clears the value of the "story" field.
func (_u *FundraisingCampaignUpdate) ClearStory() *FundraisingCampaignUpdate {
	_u.mutation.ClearStory()
	return _u
}

// SetType sets the "type" field.
func (_u *FundraisingCampaignUpdate) SetType(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableType(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *FundraisingCampaignUpdate) SetCategory(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableCategory(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *FundraisingCampaignUpdate) ClearCategory() *FundraisingCampaignUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetTargetAmount sets the "target_amount" field.
func (_u *FundraisingCampaignUpdate) SetTargetAmount(v float64) *FundraisingCampaignUpdate {
	_u.mutation.ResetTargetAmount()
	_u.mutation.SetTargetAmount(v)
	return _u
}

// SetNillableTargetAmount sets the "target_amount" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableTargetAmount(v *float64) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetTargetAmount(*v)
	}
	return _u
}

// AddTargetAmount adds value to the "target_amount" field.
func (_u *FundraisingCampaignUpdate) AddTargetAmount(v float64) *FundraisingCampaignUpdate {
	_u.mutation.AddTargetAmount(v)
	return _u
}

// SetCurrentAmount sets the "current_amount" field.
func (_u *FundraisingCampaignUpdate) SetCurrentAmount(v float64) *FundraisingCampaignUpdate {
	_u.mutation.ResetCurrentAmount()
	_u.mutation.SetCurrentAmount(v)
	return _u
}

// SetNillableCurrentAmount sets the "current_amount" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableCurrentAmount(v *float64) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetCurrentAmount(*v)
	}
	return _u
}

// AddCurrentAmount adds value to the "current_amount" field.
func (_u *FundraisingCampaignUpdate) AddCurrentAmount(v float64) *FundraisingCampaignUpdate {
	_u.mutation.AddCurrentAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *FundraisingCampaignUpdate) SetCurrency(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableCurrency(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetMinimumDonation sets the "minimum_donation" field.
func (_u *FundraisingCampaignUpdate) SetMinimumDonation(v float64) *FundraisingCampaignUpdate {
	_u.mutation.ResetMinimumDonation()
	_u.mutation.SetMinimumDonation(v)
	return _u
}

// SetNillableMinimumDonation sets the "minimum_donation" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableMinimumDonation(v *float64) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetMinimumDonation(*v)
	}
	return _u
}

// AddMinimumDonation adds value to the "minimum_donation" field.
func (_u *FundraisingCampaignUpdate) AddMinimumDonation(v float64) *FundraisingCampaignUpdate {
	_u.mutation.AddMinimumDonation(v)
	return _u
}

// ClearMinimumDonation clears the value of the "minimum_donation" field.
func (_u *FundraisingCampaignUpdate) ClearMinimumDonation() *FundraisingCampaignUpdate {
	_u.mutation.ClearMinimumDonation()
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *FundraisingCampaignUpdate) SetStartDate(v time.Time) *FundraisingCampaignUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableStartDate(v *time.Time) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *FundraisingCampaignUpdate) SetEndDate(v time.Time) *FundraisingCampaignUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableEndDate(v *time.Time) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *FundraisingCampaignUpdate) ClearEndDate() *FundraisingCampaignUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *FundraisingCampaignUpdate) SetIsActive(v bool) *FundraisingCampaignUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableIsActive(v *bool) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *FundraisingCampaignUpdate) SetHeroImageURL(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableHeroImageURL(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *FundraisingCampaignUpdate) ClearHeroImageURL() *FundraisingCampaignUpdate {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *FundraisingCampaignUpdate) SetVideoURL(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableVideoURL(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// ClearVideoURL clears the value of the "video_url" field.
func (_u *FundraisingCampaignUpdate) ClearVideoURL() *FundraisingCampaignUpdate {
	_u.mutation.ClearVideoURL()
	return _u
}

// SetGalleryImages sets the "gallery_images" field.
func (_u *FundraisingCampaignUpdate) SetGalleryImages(v []string) *FundraisingCampaignUpdate {
	_u.mutation.SetGalleryImages(v)
	return _u
}

// AppendGalleryImages appends value to the "gallery_images" field.
func (_u *FundraisingCampaignUpdate) AppendGalleryImages(v []string) *FundraisingCampaignUpdate {
	_u.mutation.AppendGalleryImages(v)
	return _u
}

// SetManagerID sets the "manager_id" field.
func (_u *FundraisingCampaignUpdate) SetManagerID(v string) *FundraisingCampaignUpdate {
	_u.mutation.SetManagerID(v)
	return _u
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableManagerID(v *string) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetManagerID(*v)
	}
	return _u
}

// ClearManagerID clears the value of the "manager_id" field.
func (_u *FundraisingCampaignUpdate) ClearManagerID() *FundraisingCampaignUpdate {
	_u.mutation.ClearManagerID()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *FundraisingCampaignUpdate) SetIsPublic(v bool) *FundraisingCampaignUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableIsPublic(v *bool) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetAllowRecurring sets the "allow_recurring" field.
func (_u *FundraisingCampaignUpdate) SetAllowRecurring(v bool) *FundraisingCampaignUpdate {
	_u.mutation.SetAllowRecurring(v)
	return _u
}

// SetNillableAllowRecurring sets the "allow_recurring" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableAllowRecurring(v *bool) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetAllowRecurring(*v)
	}
	return _u
}

// SetDonorCount sets the "donor_count" field.
func (_u *FundraisingCampaignUpdate) SetDonorCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.ResetDonorCount()
	_u.mutation.SetDonorCount(v)
	return _u
}

// SetNillableDonorCount sets the "donor_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableDonorCount(v *int) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetDonorCount(*v)
	}
	return _u
}

// AddDonorCount adds value to the "donor_count" field.
func (_u *FundraisingCampaignUpdate) AddDonorCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.AddDonorCount(v)
	return _u
}

// SetShareCount sets the "share_count" field.
func (_u *FundraisingCampaignUpdate) SetShareCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.ResetShareCount()
	_u.mutation.SetShareCount(v)
	return _u
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableShareCount(v *int) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetShareCount(*v)
	}
	return _u
}

// AddShareCount adds value to the "share_count" field.
func (_u *FundraisingCampaignUpdate) AddShareCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.AddShareCount(v)
	return _u
}

// SetViewCount sets the "view_count" field.
func (_u *FundraisingCampaignUpdate) SetViewCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.ResetViewCount()
	_u.mutation.SetViewCount(v)
	return _u
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableViewCount(v *int) *FundraisingCampaignUpdate {
	if v != nil {
		_u.SetViewCount(*v)
	}
	return _u
}

// AddViewCount adds value to the "view_count" field.
func (_u *FundraisingCampaignUpdate) AddViewCount(v int) *FundraisingCampaignUpdate {
	_u.mutation.AddViewCount(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FundraisingCampaignUpdate) SetUpdatedAt(v time.Time) *FundraisingCampaignUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *FundraisingCampaignUpdate) SetProgramID(id int) *FundraisingCampaignUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableProgramID(id *int) *FundraisingCampaignUpdate {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *FundraisingCampaignUpdate) SetProgram(v *Program) *FundraisingCampaignUpdate {
	return _u.SetProgramID(v.ID)
}

// AddChildCampaignIDs adds the "child_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_u *FundraisingCampaignUpdate) AddChildCampaignIDs(ids ...int) *FundraisingCampaignUpdate {
	_u.mutation.AddChildCampaignIDs(ids...)
	return _u
}

// AddChildCampaigns adds the "child_campaigns" edges to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdate) AddChildCampaigns(v ...*FundraisingCampaign) *FundraisingCampaignUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildCampaignIDs(ids...)
}

// SetParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID.
func (_u *FundraisingCampaignUpdate) SetParentCampaignID(id int) *FundraisingCampaignUpdate {
	_u.mutation.SetParentCampaignID(id)
	return _u
}

// SetNillableParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_u *FundraisingCampaignUpdate) SetNillableParentCampaignID(id *int) *FundraisingCampaignUpdate {
	if id != nil {
		_u = _u.SetParentCampaignID(*id)
	}
	return _u
}

// SetParentCampaign sets the "parent_campaign" edge to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdate) SetParentCampaign(v *FundraisingCampaign) *FundraisingCampaignUpdate {
	return _u.SetParentCampaignID(v.ID)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *FundraisingCampaignUpdate) AddDonationIDs(ids ...int) *FundraisingCampaignUpdate {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *FundraisingCampaignUpdate) AddDonations(v ...*Donation) *FundraisingCampaignUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// Mutation returns the FundraisingCampaignMutation object of the builder.
func (_u *FundraisingCampaignUpdate) Mutation() *FundraisingCampaignMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *FundraisingCampaignUpdate) ClearProgram() *FundraisingCampaignUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearChildCampaigns clears all "child_campaigns" edges to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdate) ClearChildCampaigns() *FundraisingCampaignUpdate {
	_u.mutation.ClearChildCampaigns()
	return _u
}

// RemoveChildCampaignIDs removes the "child_campaigns" edge to FundraisingCampaign entities by IDs.
func (_u *FundraisingCampaignUpdate) RemoveChildCampaignIDs(ids ...int) *FundraisingCampaignUpdate {
	_u.mutation.RemoveChildCampaignIDs(ids...)
	return _u
}

// RemoveChildCampaigns removes "child_campaigns" edges to FundraisingCampaign entities.
func (_u *FundraisingCampaignUpdate) RemoveChildCampaigns(v ...*FundraisingCampaign) *FundraisingCampaignUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildCampaignIDs(ids...)
}

// ClearParentCampaign clears the "parent_campaign" edge to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdate) ClearParentCampaign() *FundraisingCampaignUpdate {
	_u.mutation.ClearParentCampaign()
	return _u
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *FundraisingCampaignUpdate) ClearDonations() *FundraisingCampaignUpdate {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *FundraisingCampaignUpdate) RemoveDonationIDs(ids ...int) *FundraisingCampaignUpdate {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *FundraisingCampaignUpdate) RemoveDonations(v ...*Donation) *FundraisingCampaignUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FundraisingCampaignUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FundraisingCampaignUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FundraisingCampaignUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FundraisingCampaignUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FundraisingCampaignUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := fundraisingcampaign.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *FundraisingCampaignUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fundraisingcampaign.Table, fundraisingcampaign.Columns, sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(fundraisingcampaign.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(fundraisingcampaign.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(fundraisingcampaign.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Story(); ok {
		_spec.SetField(fundraisingcampaign.FieldStory, field.TypeJSON, value)
	}
	if _u.mutation.StoryCleared() {
		_spec.ClearField(fundraisingcampaign.FieldStory, field.TypeJSON)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(fundraisingcampaign.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(fundraisingcampaign.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(fundraisingcampaign.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.TargetAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldTargetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTargetAmount(); ok {
		_spec.AddField(fundraisingcampaign.FieldTargetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CurrentAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrentAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCurrentAmount(); ok {
		_spec.AddField(fundraisingcampaign.FieldCurrentAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.MinimumDonation(); ok {
		_spec.SetField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMinimumDonation(); ok {
		_spec.AddField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64, value)
	}
	if _u.mutation.MinimumDonationCleared() {
		_spec.ClearField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(fundraisingcampaign.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(fundraisingcampaign.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldVideoURL, field.TypeString, value)
	}
	if _u.mutation.VideoURLCleared() {
		_spec.ClearField(fundraisingcampaign.FieldVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GalleryImages(); ok {
		_spec.SetField(fundraisingcampaign.FieldGalleryImages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGalleryImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fundraisingcampaign.FieldGalleryImages, value)
		})
	}
	if value, ok := _u.mutation.ManagerID(); ok {
		_spec.SetField(fundraisingcampaign.FieldManagerID, field.TypeString, value)
	}
	if _u.mutation.ManagerIDCleared() {
		_spec.ClearField(fundraisingcampaign.FieldManagerID, field.TypeString)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowRecurring(); ok {
		_spec.SetField(fundraisingcampaign.FieldAllowRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DonorCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldDonorCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDonorCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldDonorCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ShareCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedShareCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ViewCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedViewCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(fundraisingcampaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildCampaignsIDs(); len(nodes) > 0 && !_u.mutation.ChildCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fundraisingcampaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FundraisingCampaignUpdateOne is the builder for updating a single FundraisingCampaign entity.
type FundraisingCampaignUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FundraisingCampaignMutation
}

// SetSlug sets the "slug" field.
func (_u *FundraisingCampaignUpdateOne) SetSlug(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableSlug(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *FundraisingCampaignUpdateOne) SetTitle(v map[string]string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *FundraisingCampaignUpdateOne) SetDescription(v map[string]interface{}) *FundraisingCampaignUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetStory sets the "story" field.
func (_u *FundraisingCampaignUpdateOne) SetStory(v map[string]interface{}) *FundraisingCampaignUpdateOne {
	_u.mutation.SetStory(v)
	return _u
}

// ClearStory clears the value of the "story" field.
func (_u *FundraisingCampaignUpdateOne) ClearStory() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearStory()
	return _u
}

// SetType sets the "type" field.
func (_u *FundraisingCampaignUpdateOne) SetType(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableType(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *FundraisingCampaignUpdateOne) SetCategory(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableCategory(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *FundraisingCampaignUpdateOne) ClearCategory() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetTargetAmount sets the "target_amount" field.
func (_u *FundraisingCampaignUpdateOne) SetTargetAmount(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetTargetAmount()
	_u.mutation.SetTargetAmount(v)
	return _u
}

// SetNillableTargetAmount sets the "target_amount" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableTargetAmount(v *float64) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetTargetAmount(*v)
	}
	return _u
}

// AddTargetAmount adds value to the "target_amount" field.
func (_u *FundraisingCampaignUpdateOne) AddTargetAmount(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.AddTargetAmount(v)
	return _u
}

// SetCurrentAmount sets the "current_amount" field.
func (_u *FundraisingCampaignUpdateOne) SetCurrentAmount(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetCurrentAmount()
	_u.mutation.SetCurrentAmount(v)
	return _u
}

// SetNillableCurrentAmount sets the "current_amount" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableCurrentAmount(v *float64) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetCurrentAmount(*v)
	}
	return _u
}

// AddCurrentAmount adds value to the "current_amount" field.
func (_u *FundraisingCampaignUpdateOne) AddCurrentAmount(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.AddCurrentAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *FundraisingCampaignUpdateOne) SetCurrency(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableCurrency(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetMinimumDonation sets the "minimum_donation" field.
func (_u *FundraisingCampaignUpdateOne) SetMinimumDonation(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetMinimumDonation()
	_u.mutation.SetMinimumDonation(v)
	return _u
}

// SetNillableMinimumDonation sets the "minimum_donation" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableMinimumDonation(v *float64) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetMinimumDonation(*v)
	}
	return _u
}

// AddMinimumDonation adds value to the "minimum_donation" field.
func (_u *FundraisingCampaignUpdateOne) AddMinimumDonation(v float64) *FundraisingCampaignUpdateOne {
	_u.mutation.AddMinimumDonation(v)
	return _u
}

// ClearMinimumDonation clears the value of the "minimum_donation" field.
func (_u *FundraisingCampaignUpdateOne) ClearMinimumDonation() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearMinimumDonation()
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *FundraisingCampaignUpdateOne) SetStartDate(v time.Time) *FundraisingCampaignUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableStartDate(v *time.Time) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *FundraisingCampaignUpdateOne) SetEndDate(v time.Time) *FundraisingCampaignUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableEndDate(v *time.Time) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *FundraisingCampaignUpdateOne) ClearEndDate() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *FundraisingCampaignUpdateOne) SetIsActive(v bool) *FundraisingCampaignUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableIsActive(v *bool) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *FundraisingCampaignUpdateOne) SetHeroImageURL(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableHeroImageURL(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *FundraisingCampaignUpdateOne) ClearHeroImageURL() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *FundraisingCampaignUpdateOne) SetVideoURL(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableVideoURL(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// ClearVideoURL clears the value of the "video_url" field.
func (_u *FundraisingCampaignUpdateOne) ClearVideoURL() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearVideoURL()
	return _u
}

// SetGalleryImages sets the "gallery_images" field.
func (_u *FundraisingCampaignUpdateOne) SetGalleryImages(v []string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetGalleryImages(v)
	return _u
}

// AppendGalleryImages appends value to the "gallery_images" field.
func (_u *FundraisingCampaignUpdateOne) AppendGalleryImages(v []string) *FundraisingCampaignUpdateOne {
	_u.mutation.AppendGalleryImages(v)
	return _u
}

// SetManagerID sets the "manager_id" field.
func (_u *FundraisingCampaignUpdateOne) SetManagerID(v string) *FundraisingCampaignUpdateOne {
	_u.mutation.SetManagerID(v)
	return _u
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableManagerID(v *string) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetManagerID(*v)
	}
	return _u
}

// ClearManagerID clears the value of the "manager_id" field.
func (_u *FundraisingCampaignUpdateOne) ClearManagerID() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearManagerID()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *FundraisingCampaignUpdateOne) SetIsPublic(v bool) *FundraisingCampaignUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableIsPublic(v *bool) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetAllowRecurring sets the "allow_recurring" field.
func (_u *FundraisingCampaignUpdateOne) SetAllowRecurring(v bool) *FundraisingCampaignUpdateOne {
	_u.mutation.SetAllowRecurring(v)
	return _u
}

// SetNillableAllowRecurring sets the "allow_recurring" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableAllowRecurring(v *bool) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetAllowRecurring(*v)
	}
	return _u
}

// SetDonorCount sets the "donor_count" field.
func (_u *FundraisingCampaignUpdateOne) SetDonorCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetDonorCount()
	_u.mutation.SetDonorCount(v)
	return _u
}

// SetNillableDonorCount sets the "donor_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableDonorCount(v *int) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetDonorCount(*v)
	}
	return _u
}

// AddDonorCount adds value to the "donor_count" field.
func (_u *FundraisingCampaignUpdateOne) AddDonorCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.AddDonorCount(v)
	return _u
}

// SetShareCount sets the "share_count" field.
func (_u *FundraisingCampaignUpdateOne) SetShareCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetShareCount()
	_u.mutation.SetShareCount(v)
	return _u
}

// SetNillableShareCount sets the "share_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableShareCount(v *int) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetShareCount(*v)
	}
	return _u
}

// AddShareCount adds value to the "share_count" field.
func (_u *FundraisingCampaignUpdateOne) AddShareCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.AddShareCount(v)
	return _u
}

// SetViewCount sets the "view_count" field.
func (_u *FundraisingCampaignUpdateOne) SetViewCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.ResetViewCount()
	_u.mutation.SetViewCount(v)
	return _u
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableViewCount(v *int) *FundraisingCampaignUpdateOne {
	if v != nil {
		_u.SetViewCount(*v)
	}
	return _u
}

// AddViewCount adds value to the "view_count" field.
func (_u *FundraisingCampaignUpdateOne) AddViewCount(v int) *FundraisingCampaignUpdateOne {
	_u.mutation.AddViewCount(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FundraisingCampaignUpdateOne) SetUpdatedAt(v time.Time) *FundraisingCampaignUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *FundraisingCampaignUpdateOne) SetProgramID(id int) *FundraisingCampaignUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableProgramID(id *int) *FundraisingCampaignUpdateOne {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *FundraisingCampaignUpdateOne) SetProgram(v *Program) *FundraisingCampaignUpdateOne {
	return _u.SetProgramID(v.ID)
}

// AddChildCampaignIDs adds the "child_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_u *FundraisingCampaignUpdateOne) AddChildCampaignIDs(ids ...int) *FundraisingCampaignUpdateOne {
	_u.mutation.AddChildCampaignIDs(ids...)
	return _u
}

// AddChildCampaigns adds the "child_campaigns" edges to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdateOne) AddChildCampaigns(v ...*FundraisingCampaign) *FundraisingCampaignUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildCampaignIDs(ids...)
}

// SetParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID.
func (_u *FundraisingCampaignUpdateOne) SetParentCampaignID(id int) *FundraisingCampaignUpdateOne {
	_u.mutation.SetParentCampaignID(id)
	return _u
}

// SetNillableParentCampaignID sets the "parent_campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_u *FundraisingCampaignUpdateOne) SetNillableParentCampaignID(id *int) *FundraisingCampaignUpdateOne {
	if id != nil {
		_u = _u.SetParentCampaignID(*id)
	}
	return _u
}

// SetParentCampaign sets the "parent_campaign" edge to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdateOne) SetParentCampaign(v *FundraisingCampaign) *FundraisingCampaignUpdateOne {
	return _u.SetParentCampaignID(v.ID)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *FundraisingCampaignUpdateOne) AddDonationIDs(ids ...int) *FundraisingCampaignUpdateOne {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *FundraisingCampaignUpdateOne) AddDonations(v ...*Donation) *FundraisingCampaignUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// Mutation returns the FundraisingCampaignMutation object of the builder.
func (_u *FundraisingCampaignUpdateOne) Mutation() *FundraisingCampaignMutation {
	return _u.mutation
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *FundraisingCampaignUpdateOne) ClearProgram() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearChildCampaigns clears all "child_campaigns" edges to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdateOne) ClearChildCampaigns() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearChildCampaigns()
	return _u
}

// RemoveChildCampaignIDs removes the "child_campaigns" edge to FundraisingCampaign entities by IDs.
func (_u *FundraisingCampaignUpdateOne) RemoveChildCampaignIDs(ids ...int) *FundraisingCampaignUpdateOne {
	_u.mutation.RemoveChildCampaignIDs(ids...)
	return _u
}

// RemoveChildCampaigns removes "child_campaigns" edges to FundraisingCampaign entities.
func (_u *FundraisingCampaignUpdateOne) RemoveChildCampaigns(v ...*FundraisingCampaign) *FundraisingCampaignUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildCampaignIDs(ids...)
}

// ClearParentCampaign clears the "parent_campaign" edge to the FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdateOne) ClearParentCampaign() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearParentCampaign()
	return _u
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *FundraisingCampaignUpdateOne) ClearDonations() *FundraisingCampaignUpdateOne {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *FundraisingCampaignUpdateOne) RemoveDonationIDs(ids ...int) *FundraisingCampaignUpdateOne {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *FundraisingCampaignUpdateOne) RemoveDonations(v ...*Donation) *FundraisingCampaignUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// Where appends a list predicates to the FundraisingCampaignUpdate builder.
func (_u *FundraisingCampaignUpdateOne) Where(ps ...predicate.FundraisingCampaign) *FundraisingCampaignUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FundraisingCampaignUpdateOne) Select(field string, fields ...string) *FundraisingCampaignUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FundraisingCampaign entity.
func (_u *FundraisingCampaignUpdateOne) Save(ctx context.Context) (*FundraisingCampaign, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FundraisingCampaignUpdateOne) SaveX(ctx context.Context) *FundraisingCampaign {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FundraisingCampaignUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FundraisingCampaignUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FundraisingCampaignUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := fundraisingcampaign.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *FundraisingCampaignUpdateOne) sqlSave(ctx context.Context) (_node *FundraisingCampaign, err error) {
	_spec := sqlgraph.NewUpdateSpec(fundraisingcampaign.Table, fundraisingcampaign.Columns, sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FundraisingCampaign.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fundraisingcampaign.FieldID)
		for _, f := range fields {
			if !fundraisingcampaign.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fundraisingcampaign.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(fundraisingcampaign.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(fundraisingcampaign.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(fundraisingcampaign.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Story(); ok {
		_spec.SetField(fundraisingcampaign.FieldStory, field.TypeJSON, value)
	}
	if _u.mutation.StoryCleared() {
		_spec.ClearField(fundraisingcampaign.FieldStory, field.TypeJSON)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(fundraisingcampaign.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(fundraisingcampaign.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(fundraisingcampaign.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.TargetAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldTargetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedTargetAmount(); ok {
		_spec.AddField(fundraisingcampaign.FieldTargetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CurrentAmount(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrentAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCurrentAmount(); ok {
		_spec.AddField(fundraisingcampaign.FieldCurrentAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(fundraisingcampaign.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.MinimumDonation(); ok {
		_spec.SetField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMinimumDonation(); ok {
		_spec.AddField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64, value)
	}
	if _u.mutation.MinimumDonationCleared() {
		_spec.ClearField(fundraisingcampaign.FieldMinimumDonation, field.TypeFloat64)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(fundraisingcampaign.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(fundraisingcampaign.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(fundraisingcampaign.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(fundraisingcampaign.FieldVideoURL, field.TypeString, value)
	}
	if _u.mutation.VideoURLCleared() {
		_spec.ClearField(fundraisingcampaign.FieldVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GalleryImages(); ok {
		_spec.SetField(fundraisingcampaign.FieldGalleryImages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGalleryImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fundraisingcampaign.FieldGalleryImages, value)
		})
	}
	if value, ok := _u.mutation.ManagerID(); ok {
		_spec.SetField(fundraisingcampaign.FieldManagerID, field.TypeString, value)
	}
	if _u.mutation.ManagerIDCleared() {
		_spec.ClearField(fundraisingcampaign.FieldManagerID, field.TypeString)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(fundraisingcampaign.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowRecurring(); ok {
		_spec.SetField(fundraisingcampaign.FieldAllowRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DonorCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldDonorCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDonorCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldDonorCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ShareCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedShareCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ViewCount(); ok {
		_spec.SetField(fundraisingcampaign.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedViewCount(); ok {
		_spec.AddField(fundraisingcampaign.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(fundraisingcampaign.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildCampaignsIDs(); len(nodes) > 0 && !_u.mutation.ChildCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentCampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FundraisingCampaign{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fundraisingcampaign.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
