// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/actionitem"
	"awe/ent/ent/agenda"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/vote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgendaItemCreate is the builder for creating a AgendaItem entity.
type AgendaItemCreate struct {
	config
	mutation *AgendaItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *AgendaItemCreate) SetOrder(v int) *AgendaItemCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *AgendaItemCreate) SetTitle(v string) *AgendaItemCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetPresenter sets the "presenter" field.
func (_c *AgendaItemCreate) SetPresenter(v string) *AgendaItemCreate {
	_c.mutation.SetPresenter(v)
	return _c
}

// SetNillablePresenter sets the "presenter" field if the given value is not nil.
func (_c *AgendaItemCreate) SetNillablePresenter(v *string) *AgendaItemCreate {
	if v != nil {
		_c.SetPresenter(*v)
	}
	return _c
}

// SetNotes sets the "notes" field.
func (_c *AgendaItemCreate) SetNotes(v string) *AgendaItemCreate {
	_c.mutation.SetNotes(v)
	return _c
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_c *AgendaItemCreate) SetNillableNotes(v *string) *AgendaItemCreate {
	if v != nil {
		_c.SetNotes(*v)
	}
	return _c
}

// SetDuration sets the "duration" field.
func (_c *AgendaItemCreate) SetDuration(v int) *AgendaItemCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *AgendaItemCreate) SetNillableDuration(v *int) *AgendaItemCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_c *AgendaItemCreate) SetAgendaID(id int) *AgendaItemCreate {
	_c.mutation.SetAgendaID(id)
	return _c
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_c *AgendaItemCreate) SetAgenda(v *Agenda) *AgendaItemCreate {
	return _c.SetAgendaID(v.ID)
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_c *AgendaItemCreate) SetVoteID(id int) *AgendaItemCreate {
	_c.mutation.SetVoteID(id)
	return _c
}

// SetNillableVoteID sets the "vote" edge to the Vote entity by ID if the given value is not nil.
func (_c *AgendaItemCreate) SetNillableVoteID(id *int) *AgendaItemCreate {
	if id != nil {
		_c = _c.SetVoteID(*id)
	}
	return _c
}

// SetVote sets the "vote" edge to the Vote entity.
func (_c *AgendaItemCreate) SetVote(v *Vote) *AgendaItemCreate {
	return _c.SetVoteID(v.ID)
}

// AddActionItemIDs adds the "action_items" edge to the ActionItem entity by IDs.
func (_c *AgendaItemCreate) AddActionItemIDs(ids ...int) *AgendaItemCreate {
	_c.mutation.AddActionItemIDs(ids...)
	return _c
}

// AddActionItems adds the "action_items" edges to the ActionItem entity.
func (_c *AgendaItemCreate) AddActionItems(v ...*ActionItem) *AgendaItemCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionItemIDs(ids...)
}

// Mutation returns the AgendaItemMutation object of the builder.
func (_c *AgendaItemCreate) Mutation() *AgendaItemMutation {
	return _c.mutation
}

// Save creates the AgendaItem in the database.
func (_c *AgendaItemCreate) Save(ctx context.Context) (*AgendaItem, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AgendaItemCreate) SaveX(ctx context.Context) *AgendaItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AgendaItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AgendaItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AgendaItemCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "AgendaItem.order"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AgendaItem.title"`)}
	}
	if len(_c.mutation.AgendaIDs()) == 0 {
		return &ValidationError{Name: "agenda", err: errors.New(`ent: missing required edge "AgendaItem.agenda"`)}
	}
	return nil
}

func (_c *AgendaItemCreate) sqlSave(ctx context.Context) (*AgendaItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AgendaItemCreate) createSpec() (*AgendaItem, *sqlgraph.CreateSpec) {
	var (
		_node = &AgendaItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(agendaitem.Table, sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(agendaitem.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(agendaitem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Presenter(); ok {
		_spec.SetField(agendaitem.FieldPresenter, field.TypeString, value)
		_node.Presenter = value
	}
	if value, ok := _c.mutation.Notes(); ok {
		_spec.SetField(agendaitem.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(agendaitem.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if nodes := _c.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agenda_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AgendaItem.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgendaItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *AgendaItemCreate) OnConflict(opts ...sql.ConflictOption) *AgendaItemUpsertOne {
	_c.conflict = opts
	return &AgendaItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AgendaItemCreate) OnConflictColumns(columns ...string) *AgendaItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AgendaItemUpsertOne{
		create: _c,
	}
}

type (
	// AgendaItemUpsertOne is the builder for "upsert"-ing
	//  one AgendaItem node.
	AgendaItemUpsertOne struct {
		create *AgendaItemCreate
	}

	// AgendaItemUpsert is the "OnConflict" setter.
	AgendaItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *AgendaItemUpsert) SetOrder(v int) *AgendaItemUpsert {
	u.Set(agendaitem.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *AgendaItemUpsert) UpdateOrder() *AgendaItemUpsert {
	u.SetExcluded(agendaitem.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *AgendaItemUpsert) AddOrder(v int) *AgendaItemUpsert {
	u.Add(agendaitem.FieldOrder, v)
	return u
}

// SetTitle sets the "title" field.
func (u *AgendaItemUpsert) SetTitle(v string) *AgendaItemUpsert {
	u.Set(agendaitem.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AgendaItemUpsert) UpdateTitle() *AgendaItemUpsert {
	u.SetExcluded(agendaitem.FieldTitle)
	return u
}

// SetPresenter sets the "presenter" field.
func (u *AgendaItemUpsert) SetPresenter(v string) *AgendaItemUpsert {
	u.Set(agendaitem.FieldPresenter, v)
	return u
}

// UpdatePresenter sets the "presenter" field to the value that was provided on create.
func (u *AgendaItemUpsert) UpdatePresenter() *AgendaItemUpsert {
	u.SetExcluded(agendaitem.FieldPresenter)
	return u
}

// ClearPresenter clears the value of the "presenter" field.
func (u *AgendaItemUpsert) ClearPresenter() *AgendaItemUpsert {
	u.SetNull(agendaitem.FieldPresenter)
	return u
}

// SetNotes sets the "notes" field.
func (u *AgendaItemUpsert) SetNotes(v string) *AgendaItemUpsert {
	u.Set(agendaitem.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *AgendaItemUpsert) UpdateNotes() *AgendaItemUpsert {
	u.SetExcluded(agendaitem.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *AgendaItemUpsert) ClearNotes() *AgendaItemUpsert {
	u.SetNull(agendaitem.FieldNotes)
	return u
}

// SetDuration sets the "duration" field.
func (u *AgendaItemUpsert) SetDuration(v int) *AgendaItemUpsert {
	u.Set(agendaitem.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AgendaItemUpsert) UpdateDuration() *AgendaItemUpsert {
	u.SetExcluded(agendaitem.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *AgendaItemUpsert) AddDuration(v int) *AgendaItemUpsert {
	u.Add(agendaitem.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *AgendaItemUpsert) ClearDuration() *AgendaItemUpsert {
	u.SetNull(agendaitem.FieldDuration)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgendaItemUpsertOne) UpdateNewValues() *AgendaItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AgendaItemUpsertOne) Ignore() *AgendaItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgendaItemUpsertOne) DoNothing() *AgendaItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgendaItemCreate.OnConflict
// documentation for more info.
func (u *AgendaItemUpsertOne) Update(set func(*AgendaItemUpsert)) *AgendaItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgendaItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *AgendaItemUpsertOne) SetOrder(v int) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *AgendaItemUpsertOne) AddOrder(v int) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *AgendaItemUpsertOne) UpdateOrder() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateOrder()
	})
}

// SetTitle sets the "title" field.
func (u *AgendaItemUpsertOne) SetTitle(v string) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AgendaItemUpsertOne) UpdateTitle() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateTitle()
	})
}

// SetPresenter sets the "presenter" field.
func (u *AgendaItemUpsertOne) SetPresenter(v string) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetPresenter(v)
	})
}

// UpdatePresenter sets the "presenter" field to the value that was provided on create.
func (u *AgendaItemUpsertOne) UpdatePresenter() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdatePresenter()
	})
}

// ClearPresenter clears the value of the "presenter" field.
func (u *AgendaItemUpsertOne) ClearPresenter() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearPresenter()
	})
}

// SetNotes sets the "notes" field.
func (u *AgendaItemUpsertOne) SetNotes(v string) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *AgendaItemUpsertOne) UpdateNotes() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *AgendaItemUpsertOne) ClearNotes() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearNotes()
	})
}

// SetDuration sets the "duration" field.
func (u *AgendaItemUpsertOne) SetDuration(v int) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AgendaItemUpsertOne) AddDuration(v int) *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AgendaItemUpsertOne) UpdateDuration() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AgendaItemUpsertOne) ClearDuration() *AgendaItemUpsertOne {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *AgendaItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgendaItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgendaItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AgendaItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AgendaItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AgendaItemCreateBulk is the builder for creating many AgendaItem entities in bulk.
type AgendaItemCreateBulk struct {
	config
	err      error
	builders []*AgendaItemCreate
	conflict []sql.ConflictOption
}

// Save creates the AgendaItem entities in the database.
func (_c *AgendaItemCreateBulk) Save(ctx context.Context) ([]*AgendaItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AgendaItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgendaItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AgendaItemCreateBulk) SaveX(ctx context.Context) []*AgendaItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AgendaItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AgendaItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AgendaItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgendaItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *AgendaItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *AgendaItemUpsertBulk {
	_c.conflict = opts
	return &AgendaItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AgendaItemCreateBulk) OnConflictColumns(columns ...string) *AgendaItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AgendaItemUpsertBulk{
		create: _c,
	}
}

// AgendaItemUpsertBulk is the builder for "upsert"-ing
// a bulk of AgendaItem nodes.
type AgendaItemUpsertBulk struct {
	create *AgendaItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgendaItemUpsertBulk) UpdateNewValues() *AgendaItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AgendaItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AgendaItemUpsertBulk) Ignore() *AgendaItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgendaItemUpsertBulk) DoNothing() *AgendaItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgendaItemCreateBulk.OnConflict
// documentation for more info.
func (u *AgendaItemUpsertBulk) Update(set func(*AgendaItemUpsert)) *AgendaItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgendaItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *AgendaItemUpsertBulk) SetOrder(v int) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *AgendaItemUpsertBulk) AddOrder(v int) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *AgendaItemUpsertBulk) UpdateOrder() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateOrder()
	})
}

// SetTitle sets the "title" field.
func (u *AgendaItemUpsertBulk) SetTitle(v string) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AgendaItemUpsertBulk) UpdateTitle() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateTitle()
	})
}

// SetPresenter sets the "presenter" field.
func (u *AgendaItemUpsertBulk) SetPresenter(v string) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetPresenter(v)
	})
}

// UpdatePresenter sets the "presenter" field to the value that was provided on create.
func (u *AgendaItemUpsertBulk) UpdatePresenter() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdatePresenter()
	})
}

// ClearPresenter clears the value of the "presenter" field.
func (u *AgendaItemUpsertBulk) ClearPresenter() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearPresenter()
	})
}

// SetNotes sets the "notes" field.
func (u *AgendaItemUpsertBulk) SetNotes(v string) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *AgendaItemUpsertBulk) UpdateNotes() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *AgendaItemUpsertBulk) ClearNotes() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearNotes()
	})
}

// SetDuration sets the "duration" field.
func (u *AgendaItemUpsertBulk) SetDuration(v int) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AgendaItemUpsertBulk) AddDuration(v int) *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AgendaItemUpsertBulk) UpdateDuration() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AgendaItemUpsertBulk) ClearDuration() *AgendaItemUpsertBulk {
	return u.Update(func(s *AgendaItemUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *AgendaItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AgendaItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgendaItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgendaItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
