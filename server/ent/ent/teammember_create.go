// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/teammember"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamMemberCreate is the builder for creating a TeamMember entity.
type TeamMemberCreate struct {
	config
	mutation *TeamMemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *TeamMemberCreate) SetName(v string) *TeamMemberCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *TeamMemberCreate) SetTitle(v map[string]string) *TeamMemberCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetBio sets the "bio" field.
func (_c *TeamMemberCreate) SetBio(v map[string]string) *TeamMemberCreate {
	_c.mutation.SetBio(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *TeamMemberCreate) SetImageURL(v string) *TeamMemberCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableImageURL(v *string) *TeamMemberCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_c *TeamMemberCreate) SetLinkedinURL(v string) *TeamMemberCreate {
	_c.mutation.SetLinkedinURL(v)
	return _c
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableLinkedinURL(v *string) *TeamMemberCreate {
	if v != nil {
		_c.SetLinkedinURL(*v)
	}
	return _c
}

// SetTwitterURL sets the "twitter_url" field.
func (_c *TeamMemberCreate) SetTwitterURL(v string) *TeamMemberCreate {
	_c.mutation.SetTwitterURL(v)
	return _c
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableTwitterURL(v *string) *TeamMemberCreate {
	if v != nil {
		_c.SetTwitterURL(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *TeamMemberCreate) SetEmail(v string) *TeamMemberCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableEmail(v *string) *TeamMemberCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *TeamMemberCreate) SetType(v teammember.Type) *TeamMemberCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetDisplayOrder sets the "display_order" field.
func (_c *TeamMemberCreate) SetDisplayOrder(v int) *TeamMemberCreate {
	_c.mutation.SetDisplayOrder(v)
	return _c
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableDisplayOrder(v *int) *TeamMemberCreate {
	if v != nil {
		_c.SetDisplayOrder(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *TeamMemberCreate) SetIsActive(v bool) *TeamMemberCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableIsActive(v *bool) *TeamMemberCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TeamMemberCreate) SetCreatedAt(v time.Time) *TeamMemberCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableCreatedAt(v *time.Time) *TeamMemberCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TeamMemberCreate) SetUpdatedAt(v time.Time) *TeamMemberCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableUpdatedAt(v *time.Time) *TeamMemberCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *TeamMemberCreate) SetUserID(id int) *TeamMemberCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *TeamMemberCreate) SetNillableUserID(id *int) *TeamMemberCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *TeamMemberCreate) SetUser(v *User) *TeamMemberCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the TeamMemberMutation object of the builder.
func (_c *TeamMemberCreate) Mutation() *TeamMemberMutation {
	return _c.mutation
}

// Save creates the TeamMember in the database.
func (_c *TeamMemberCreate) Save(ctx context.Context) (*TeamMember, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TeamMemberCreate) SaveX(ctx context.Context) *TeamMember {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TeamMemberCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TeamMemberCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TeamMemberCreate) defaults() {
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		v := teammember.DefaultDisplayOrder
		_c.mutation.SetDisplayOrder(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := teammember.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := teammember.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := teammember.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TeamMemberCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TeamMember.name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TeamMember.title"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TeamMember.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := teammember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TeamMember.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "TeamMember.display_order"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "TeamMember.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TeamMember.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TeamMember.updated_at"`)}
	}
	return nil
}

func (_c *TeamMemberCreate) sqlSave(ctx context.Context) (*TeamMember, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TeamMemberCreate) createSpec() (*TeamMember, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamMember{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(teammember.Table, sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(teammember.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(teammember.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Bio(); ok {
		_spec.SetField(teammember.FieldBio, field.TypeJSON, value)
		_node.Bio = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(teammember.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.LinkedinURL(); ok {
		_spec.SetField(teammember.FieldLinkedinURL, field.TypeString, value)
		_node.LinkedinURL = value
	}
	if value, ok := _c.mutation.TwitterURL(); ok {
		_spec.SetField(teammember.FieldTwitterURL, field.TypeString, value)
		_node.TwitterURL = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(teammember.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(teammember.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.DisplayOrder(); ok {
		_spec.SetField(teammember.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(teammember.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(teammember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(teammember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_member_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamMember.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamMemberUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *TeamMemberCreate) OnConflict(opts ...sql.ConflictOption) *TeamMemberUpsertOne {
	_c.conflict = opts
	return &TeamMemberUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TeamMemberCreate) OnConflictColumns(columns ...string) *TeamMemberUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TeamMemberUpsertOne{
		create: _c,
	}
}

type (
	// TeamMemberUpsertOne is the builder for "upsert"-ing
	//  one TeamMember node.
	TeamMemberUpsertOne struct {
		create *TeamMemberCreate
	}

	// TeamMemberUpsert is the "OnConflict" setter.
	TeamMemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TeamMemberUpsert) SetName(v string) *TeamMemberUpsert {
	u.Set(teammember.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateName() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldName)
	return u
}

// SetTitle sets the "title" field.
func (u *TeamMemberUpsert) SetTitle(v map[string]string) *TeamMemberUpsert {
	u.Set(teammember.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateTitle() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldTitle)
	return u
}

// SetBio sets the "bio" field.
func (u *TeamMemberUpsert) SetBio(v map[string]string) *TeamMemberUpsert {
	u.Set(teammember.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateBio() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberUpsert) ClearBio() *TeamMemberUpsert {
	u.SetNull(teammember.FieldBio)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberUpsert) SetImageURL(v string) *TeamMemberUpsert {
	u.Set(teammember.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateImageURL() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberUpsert) ClearImageURL() *TeamMemberUpsert {
	u.SetNull(teammember.FieldImageURL)
	return u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberUpsert) SetLinkedinURL(v string) *TeamMemberUpsert {
	u.Set(teammember.FieldLinkedinURL, v)
	return u
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateLinkedinURL() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldLinkedinURL)
	return u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberUpsert) ClearLinkedinURL() *TeamMemberUpsert {
	u.SetNull(teammember.FieldLinkedinURL)
	return u
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberUpsert) SetTwitterURL(v string) *TeamMemberUpsert {
	u.Set(teammember.FieldTwitterURL, v)
	return u
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateTwitterURL() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldTwitterURL)
	return u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberUpsert) ClearTwitterURL() *TeamMemberUpsert {
	u.SetNull(teammember.FieldTwitterURL)
	return u
}

// SetEmail sets the "email" field.
func (u *TeamMemberUpsert) SetEmail(v string) *TeamMemberUpsert {
	u.Set(teammember.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateEmail() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *TeamMemberUpsert) ClearEmail() *TeamMemberUpsert {
	u.SetNull(teammember.FieldEmail)
	return u
}

// SetType sets the "type" field.
func (u *TeamMemberUpsert) SetType(v teammember.Type) *TeamMemberUpsert {
	u.Set(teammember.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateType() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldType)
	return u
}

// SetDisplayOrder sets the "display_order" field.
func (u *TeamMemberUpsert) SetDisplayOrder(v int) *TeamMemberUpsert {
	u.Set(teammember.FieldDisplayOrder, v)
	return u
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateDisplayOrder() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldDisplayOrder)
	return u
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *TeamMemberUpsert) AddDisplayOrder(v int) *TeamMemberUpsert {
	u.Add(teammember.FieldDisplayOrder, v)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *TeamMemberUpsert) SetIsActive(v bool) *TeamMemberUpsert {
	u.Set(teammember.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateIsActive() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldIsActive)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamMemberUpsert) SetUpdatedAt(v time.Time) *TeamMemberUpsert {
	u.Set(teammember.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamMemberUpsert) UpdateUpdatedAt() *TeamMemberUpsert {
	u.SetExcluded(teammember.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamMemberUpsertOne) UpdateNewValues() *TeamMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teammember.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamMemberUpsertOne) Ignore() *TeamMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamMemberUpsertOne) DoNothing() *TeamMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamMemberCreate.OnConflict
// documentation for more info.
func (u *TeamMemberUpsertOne) Update(set func(*TeamMemberUpsert)) *TeamMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeamMemberUpsertOne) SetName(v string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateName() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *TeamMemberUpsertOne) SetTitle(v map[string]string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateTitle() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateTitle()
	})
}

// SetBio sets the "bio" field.
func (u *TeamMemberUpsertOne) SetBio(v map[string]string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateBio() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberUpsertOne) ClearBio() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearBio()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberUpsertOne) SetImageURL(v string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateImageURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberUpsertOne) ClearImageURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearImageURL()
	})
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberUpsertOne) SetLinkedinURL(v string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetLinkedinURL(v)
	})
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateLinkedinURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateLinkedinURL()
	})
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberUpsertOne) ClearLinkedinURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearLinkedinURL()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberUpsertOne) SetTwitterURL(v string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateTwitterURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateTwitterURL()
	})
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberUpsertOne) ClearTwitterURL() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearTwitterURL()
	})
}

// SetEmail sets the "email" field.
func (u *TeamMemberUpsertOne) SetEmail(v string) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateEmail() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *TeamMemberUpsertOne) ClearEmail() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearEmail()
	})
}

// SetType sets the "type" field.
func (u *TeamMemberUpsertOne) SetType(v teammember.Type) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateType() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateType()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *TeamMemberUpsertOne) SetDisplayOrder(v int) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *TeamMemberUpsertOne) AddDisplayOrder(v int) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateDisplayOrder() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TeamMemberUpsertOne) SetIsActive(v bool) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateIsActive() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamMemberUpsertOne) SetUpdatedAt(v time.Time) *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamMemberUpsertOne) UpdateUpdatedAt() *TeamMemberUpsertOne {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeamMemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamMemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamMemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamMemberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamMemberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamMemberCreateBulk is the builder for creating many TeamMember entities in bulk.
type TeamMemberCreateBulk struct {
	config
	err      error
	builders []*TeamMemberCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamMember entities in the database.
func (_c *TeamMemberCreateBulk) Save(ctx context.Context) ([]*TeamMember, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TeamMember, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TeamMemberCreateBulk) SaveX(ctx context.Context) []*TeamMember {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TeamMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TeamMemberCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamMember.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamMemberUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *TeamMemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamMemberUpsertBulk {
	_c.conflict = opts
	return &TeamMemberUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TeamMemberCreateBulk) OnConflictColumns(columns ...string) *TeamMemberUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TeamMemberUpsertBulk{
		create: _c,
	}
}

// TeamMemberUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamMember nodes.
type TeamMemberUpsertBulk struct {
	create *TeamMemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamMemberUpsertBulk) UpdateNewValues() *TeamMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teammember.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamMember.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamMemberUpsertBulk) Ignore() *TeamMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamMemberUpsertBulk) DoNothing() *TeamMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamMemberCreateBulk.OnConflict
// documentation for more info.
func (u *TeamMemberUpsertBulk) Update(set func(*TeamMemberUpsert)) *TeamMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeamMemberUpsertBulk) SetName(v string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateName() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *TeamMemberUpsertBulk) SetTitle(v map[string]string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateTitle() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateTitle()
	})
}

// SetBio sets the "bio" field.
func (u *TeamMemberUpsertBulk) SetBio(v map[string]string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateBio() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *TeamMemberUpsertBulk) ClearBio() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearBio()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TeamMemberUpsertBulk) SetImageURL(v string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateImageURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TeamMemberUpsertBulk) ClearImageURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearImageURL()
	})
}

// SetLinkedinURL sets the "linkedin_url" field.
func (u *TeamMemberUpsertBulk) SetLinkedinURL(v string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetLinkedinURL(v)
	})
}

// UpdateLinkedinURL sets the "linkedin_url" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateLinkedinURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateLinkedinURL()
	})
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (u *TeamMemberUpsertBulk) ClearLinkedinURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearLinkedinURL()
	})
}

// SetTwitterURL sets the "twitter_url" field.
func (u *TeamMemberUpsertBulk) SetTwitterURL(v string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetTwitterURL(v)
	})
}

// UpdateTwitterURL sets the "twitter_url" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateTwitterURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateTwitterURL()
	})
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (u *TeamMemberUpsertBulk) ClearTwitterURL() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearTwitterURL()
	})
}

// SetEmail sets the "email" field.
func (u *TeamMemberUpsertBulk) SetEmail(v string) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateEmail() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *TeamMemberUpsertBulk) ClearEmail() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.ClearEmail()
	})
}

// SetType sets the "type" field.
func (u *TeamMemberUpsertBulk) SetType(v teammember.Type) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateType() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateType()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *TeamMemberUpsertBulk) SetDisplayOrder(v int) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *TeamMemberUpsertBulk) AddDisplayOrder(v int) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateDisplayOrder() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TeamMemberUpsertBulk) SetIsActive(v bool) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateIsActive() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamMemberUpsertBulk) SetUpdatedAt(v time.Time) *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamMemberUpsertBulk) UpdateUpdatedAt() *TeamMemberUpsertBulk {
	return u.Update(func(s *TeamMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeamMemberUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeamMemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamMemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamMemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
