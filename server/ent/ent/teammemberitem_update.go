// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/predicate"
	"awe/ent/ent/teammemberitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamMemberItemUpdate is the builder for updating TeamMemberItem entities.
type TeamMemberItemUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMemberItemMutation
}

// Where appends a list predicates to the TeamMemberItemUpdate builder.
func (_u *TeamMemberItemUpdate) Where(ps ...predicate.TeamMemberItem) *TeamMemberItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *TeamMemberItemUpdate) SetOrder(v int) *TeamMemberItemUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableOrder(v *int) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TeamMemberItemUpdate) AddOrder(v int) *TeamMemberItemUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetName sets the "name" field.
func (_u *TeamMemberItemUpdate) SetName(v string) *TeamMemberItemUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableName(v *string) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRole sets the "role" field.
func (_u *TeamMemberItemUpdate) SetRole(v map[string]string) *TeamMemberItemUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetBio sets the "bio" field.
func (_u *TeamMemberItemUpdate) SetBio(v map[string]string) *TeamMemberItemUpdate {
	_u.mutation.SetBio(v)
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *TeamMemberItemUpdate) ClearBio() *TeamMemberItemUpdate {
	_u.mutation.ClearBio()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TeamMemberItemUpdate) SetImageURL(v string) *TeamMemberItemUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableImageURL(v *string) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TeamMemberItemUpdate) ClearImageURL() *TeamMemberItemUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_u *TeamMemberItemUpdate) SetLinkedinURL(v string) *TeamMemberItemUpdate {
	_u.mutation.SetLinkedinURL(v)
	return _u
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableLinkedinURL(v *string) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetLinkedinURL(*v)
	}
	return _u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (_u *TeamMemberItemUpdate) ClearLinkedinURL() *TeamMemberItemUpdate {
	_u.mutation.ClearLinkedinURL()
	return _u
}

// SetTwitterURL sets the "twitter_url" field.
func (_u *TeamMemberItemUpdate) SetTwitterURL(v string) *TeamMemberItemUpdate {
	_u.mutation.SetTwitterURL(v)
	return _u
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableTwitterURL(v *string) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetTwitterURL(*v)
	}
	return _u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (_u *TeamMemberItemUpdate) ClearTwitterURL() *TeamMemberItemUpdate {
	_u.mutation.ClearTwitterURL()
	return _u
}

// SetEmailURL sets the "email_url" field.
func (_u *TeamMemberItemUpdate) SetEmailURL(v string) *TeamMemberItemUpdate {
	_u.mutation.SetEmailURL(v)
	return _u
}

// SetNillableEmailURL sets the "email_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdate) SetNillableEmailURL(v *string) *TeamMemberItemUpdate {
	if v != nil {
		_u.SetEmailURL(*v)
	}
	return _u
}

// ClearEmailURL clears the value of the "email_url" field.
func (_u *TeamMemberItemUpdate) ClearEmailURL() *TeamMemberItemUpdate {
	_u.mutation.ClearEmailURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTeamGrid entity by ID.
func (_u *TeamMemberItemUpdate) SetBlockID(id int) *TeamMemberItemUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTeamGrid entity.
func (_u *TeamMemberItemUpdate) SetBlock(v *BlockTeamGrid) *TeamMemberItemUpdate {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TeamMemberItemMutation object of the builder.
func (_u *TeamMemberItemUpdate) Mutation() *TeamMemberItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTeamGrid entity.
func (_u *TeamMemberItemUpdate) ClearBlock() *TeamMemberItemUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TeamMemberItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeamMemberItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TeamMemberItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeamMemberItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeamMemberItemUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TeamMemberItem.block"`)
	}
	return nil
}

func (_u *TeamMemberItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teammemberitem.Table, teammemberitem.Columns, sqlgraph.NewFieldSpec(teammemberitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(teammemberitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(teammemberitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teammemberitem.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(teammemberitem.FieldRole, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(teammemberitem.FieldBio, field.TypeJSON, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(teammemberitem.FieldBio, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(teammemberitem.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(teammemberitem.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.LinkedinURL(); ok {
		_spec.SetField(teammemberitem.FieldLinkedinURL, field.TypeString, value)
	}
	if _u.mutation.LinkedinURLCleared() {
		_spec.ClearField(teammemberitem.FieldLinkedinURL, field.TypeString)
	}
	if value, ok := _u.mutation.TwitterURL(); ok {
		_spec.SetField(teammemberitem.FieldTwitterURL, field.TypeString, value)
	}
	if _u.mutation.TwitterURLCleared() {
		_spec.ClearField(teammemberitem.FieldTwitterURL, field.TypeString)
	}
	if value, ok := _u.mutation.EmailURL(); ok {
		_spec.SetField(teammemberitem.FieldEmailURL, field.TypeString, value)
	}
	if _u.mutation.EmailURLCleared() {
		_spec.ClearField(teammemberitem.FieldEmailURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammemberitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TeamMemberItemUpdateOne is the builder for updating a single TeamMemberItem entity.
type TeamMemberItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMemberItemMutation
}

// SetOrder sets the "order" field.
func (_u *TeamMemberItemUpdateOne) SetOrder(v int) *TeamMemberItemUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableOrder(v *int) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TeamMemberItemUpdateOne) AddOrder(v int) *TeamMemberItemUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetName sets the "name" field.
func (_u *TeamMemberItemUpdateOne) SetName(v string) *TeamMemberItemUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableName(v *string) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRole sets the "role" field.
func (_u *TeamMemberItemUpdateOne) SetRole(v map[string]string) *TeamMemberItemUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetBio sets the "bio" field.
func (_u *TeamMemberItemUpdateOne) SetBio(v map[string]string) *TeamMemberItemUpdateOne {
	_u.mutation.SetBio(v)
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *TeamMemberItemUpdateOne) ClearBio() *TeamMemberItemUpdateOne {
	_u.mutation.ClearBio()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TeamMemberItemUpdateOne) SetImageURL(v string) *TeamMemberItemUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableImageURL(v *string) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TeamMemberItemUpdateOne) ClearImageURL() *TeamMemberItemUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_u *TeamMemberItemUpdateOne) SetLinkedinURL(v string) *TeamMemberItemUpdateOne {
	_u.mutation.SetLinkedinURL(v)
	return _u
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableLinkedinURL(v *string) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetLinkedinURL(*v)
	}
	return _u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (_u *TeamMemberItemUpdateOne) ClearLinkedinURL() *TeamMemberItemUpdateOne {
	_u.mutation.ClearLinkedinURL()
	return _u
}

// SetTwitterURL sets the "twitter_url" field.
func (_u *TeamMemberItemUpdateOne) SetTwitterURL(v string) *TeamMemberItemUpdateOne {
	_u.mutation.SetTwitterURL(v)
	return _u
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableTwitterURL(v *string) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetTwitterURL(*v)
	}
	return _u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (_u *TeamMemberItemUpdateOne) ClearTwitterURL() *TeamMemberItemUpdateOne {
	_u.mutation.ClearTwitterURL()
	return _u
}

// SetEmailURL sets the "email_url" field.
func (_u *TeamMemberItemUpdateOne) SetEmailURL(v string) *TeamMemberItemUpdateOne {
	_u.mutation.SetEmailURL(v)
	return _u
}

// SetNillableEmailURL sets the "email_url" field if the given value is not nil.
func (_u *TeamMemberItemUpdateOne) SetNillableEmailURL(v *string) *TeamMemberItemUpdateOne {
	if v != nil {
		_u.SetEmailURL(*v)
	}
	return _u
}

// ClearEmailURL clears the value of the "email_url" field.
func (_u *TeamMemberItemUpdateOne) ClearEmailURL() *TeamMemberItemUpdateOne {
	_u.mutation.ClearEmailURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTeamGrid entity by ID.
func (_u *TeamMemberItemUpdateOne) SetBlockID(id int) *TeamMemberItemUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTeamGrid entity.
func (_u *TeamMemberItemUpdateOne) SetBlock(v *BlockTeamGrid) *TeamMemberItemUpdateOne {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TeamMemberItemMutation object of the builder.
func (_u *TeamMemberItemUpdateOne) Mutation() *TeamMemberItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTeamGrid entity.
func (_u *TeamMemberItemUpdateOne) ClearBlock() *TeamMemberItemUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// Where appends a list predicates to the TeamMemberItemUpdate builder.
func (_u *TeamMemberItemUpdateOne) Where(ps ...predicate.TeamMemberItem) *TeamMemberItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TeamMemberItemUpdateOne) Select(field string, fields ...string) *TeamMemberItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TeamMemberItem entity.
func (_u *TeamMemberItemUpdateOne) Save(ctx context.Context) (*TeamMemberItem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeamMemberItemUpdateOne) SaveX(ctx context.Context) *TeamMemberItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TeamMemberItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeamMemberItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeamMemberItemUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TeamMemberItem.block"`)
	}
	return nil
}

func (_u *TeamMemberItemUpdateOne) sqlSave(ctx context.Context) (_node *TeamMemberItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teammemberitem.Table, teammemberitem.Columns, sqlgraph.NewFieldSpec(teammemberitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamMemberItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammemberitem.FieldID)
		for _, f := range fields {
			if !teammemberitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammemberitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(teammemberitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(teammemberitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teammemberitem.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(teammemberitem.FieldRole, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(teammemberitem.FieldBio, field.TypeJSON, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(teammemberitem.FieldBio, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(teammemberitem.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(teammemberitem.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.LinkedinURL(); ok {
		_spec.SetField(teammemberitem.FieldLinkedinURL, field.TypeString, value)
	}
	if _u.mutation.LinkedinURLCleared() {
		_spec.ClearField(teammemberitem.FieldLinkedinURL, field.TypeString)
	}
	if value, ok := _u.mutation.TwitterURL(); ok {
		_spec.SetField(teammemberitem.FieldTwitterURL, field.TypeString, value)
	}
	if _u.mutation.TwitterURLCleared() {
		_spec.ClearField(teammemberitem.FieldTwitterURL, field.TypeString)
	}
	if value, ok := _u.mutation.EmailURL(); ok {
		_spec.SetField(teammemberitem.FieldEmailURL, field.TypeString, value)
	}
	if _u.mutation.EmailURLCleared() {
		_spec.ClearField(teammemberitem.FieldEmailURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockteamgrid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamMemberItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammemberitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
