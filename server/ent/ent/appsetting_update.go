// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/appsetting"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppSettingUpdate is the builder for updating AppSetting entities.
type AppSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppSettingMutation
}

// Where appends a list predicates to the AppSettingUpdate builder.
func (_u *AppSettingUpdate) Where(ps ...predicate.AppSetting) *AppSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetValue sets the "value" field.
func (_u *AppSettingUpdate) SetValue(v map[string]interface{}) *AppSettingUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetGroup sets the "group" field.
func (_u *AppSettingUpdate) SetGroup(v string) *AppSettingUpdate {
	_u.mutation.SetGroup(v)
	return _u
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (_u *AppSettingUpdate) SetNillableGroup(v *string) *AppSettingUpdate {
	if v != nil {
		_u.SetGroup(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AppSettingUpdate) SetDescription(v string) *AppSettingUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AppSettingUpdate) SetNillableDescription(v *string) *AppSettingUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AppSettingUpdate) ClearDescription() *AppSettingUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppSettingUpdate) SetUpdatedAt(v time.Time) *AppSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the AppSettingMutation object of the builder.
func (_u *AppSettingUpdate) Mutation() *AppSettingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AppSettingUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AppSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppSettingUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := appsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *AppSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsetting.Table, appsetting.Columns, sqlgraph.NewFieldSpec(appsetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(appsetting.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Group(); ok {
		_spec.SetField(appsetting.FieldGroup, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(appsetting.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(appsetting.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AppSettingUpdateOne is the builder for updating a single AppSetting entity.
type AppSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppSettingMutation
}

// SetValue sets the "value" field.
func (_u *AppSettingUpdateOne) SetValue(v map[string]interface{}) *AppSettingUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetGroup sets the "group" field.
func (_u *AppSettingUpdateOne) SetGroup(v string) *AppSettingUpdateOne {
	_u.mutation.SetGroup(v)
	return _u
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (_u *AppSettingUpdateOne) SetNillableGroup(v *string) *AppSettingUpdateOne {
	if v != nil {
		_u.SetGroup(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AppSettingUpdateOne) SetDescription(v string) *AppSettingUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AppSettingUpdateOne) SetNillableDescription(v *string) *AppSettingUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AppSettingUpdateOne) ClearDescription() *AppSettingUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppSettingUpdateOne) SetUpdatedAt(v time.Time) *AppSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the AppSettingMutation object of the builder.
func (_u *AppSettingUpdateOne) Mutation() *AppSettingMutation {
	return _u.mutation
}

// Where appends a list predicates to the AppSettingUpdate builder.
func (_u *AppSettingUpdateOne) Where(ps ...predicate.AppSetting) *AppSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AppSettingUpdateOne) Select(field string, fields ...string) *AppSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AppSetting entity.
func (_u *AppSettingUpdateOne) Save(ctx context.Context) (*AppSetting, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppSettingUpdateOne) SaveX(ctx context.Context) *AppSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AppSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppSettingUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := appsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *AppSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsetting.Table, appsetting.Columns, sqlgraph.NewFieldSpec(appsetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsetting.FieldID)
		for _, f := range fields {
			if !appsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(appsetting.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Group(); ok {
		_spec.SetField(appsetting.FieldGroup, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(appsetting.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(appsetting.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AppSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
