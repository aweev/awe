// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportDefinitionCreate is the builder for creating a ReportDefinition entity.
type ReportDefinitionCreate struct {
	config
	mutation *ReportDefinitionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *ReportDefinitionCreate) SetName(v string) *ReportDefinitionCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetSlug sets the "slug" field.
func (_c *ReportDefinitionCreate) SetSlug(v string) *ReportDefinitionCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetType sets the "type" field.
func (_c *ReportDefinitionCreate) SetType(v reportdefinition.Type) *ReportDefinitionCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ReportDefinitionCreate) SetDescription(v string) *ReportDefinitionCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ReportDefinitionCreate) SetNillableDescription(v *string) *ReportDefinitionCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetQuery sets the "query" field.
func (_c *ReportDefinitionCreate) SetQuery(v map[string]interface{}) *ReportDefinitionCreate {
	_c.mutation.SetQuery(v)
	return _c
}

// SetParameters sets the "parameters" field.
func (_c *ReportDefinitionCreate) SetParameters(v []map[string]interface{}) *ReportDefinitionCreate {
	_c.mutation.SetParameters(v)
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *ReportDefinitionCreate) SetIsPublic(v bool) *ReportDefinitionCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *ReportDefinitionCreate) SetNillableIsPublic(v *bool) *ReportDefinitionCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ReportDefinitionCreate) SetCreatedAt(v time.Time) *ReportDefinitionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ReportDefinitionCreate) SetNillableCreatedAt(v *time.Time) *ReportDefinitionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ReportDefinitionCreate) SetUpdatedAt(v time.Time) *ReportDefinitionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ReportDefinitionCreate) SetNillableUpdatedAt(v *time.Time) *ReportDefinitionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_c *ReportDefinitionCreate) SetCreatorID(id int) *ReportDefinitionCreate {
	_c.mutation.SetCreatorID(id)
	return _c
}

// SetCreator sets the "creator" edge to the User entity.
func (_c *ReportDefinitionCreate) SetCreator(v *User) *ReportDefinitionCreate {
	return _c.SetCreatorID(v.ID)
}

// AddPermissionIDs adds the "permissions" edge to the ReportPermission entity by IDs.
func (_c *ReportDefinitionCreate) AddPermissionIDs(ids ...int) *ReportDefinitionCreate {
	_c.mutation.AddPermissionIDs(ids...)
	return _c
}

// AddPermissions adds the "permissions" edges to the ReportPermission entity.
func (_c *ReportDefinitionCreate) AddPermissions(v ...*ReportPermission) *ReportDefinitionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPermissionIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_c *ReportDefinitionCreate) AddGeneratedReportIDs(ids ...int) *ReportDefinitionCreate {
	_c.mutation.AddGeneratedReportIDs(ids...)
	return _c
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_c *ReportDefinitionCreate) AddGeneratedReports(v ...*GeneratedReport) *ReportDefinitionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGeneratedReportIDs(ids...)
}

// AddScheduleIDs adds the "schedules" edge to the ScheduledReport entity by IDs.
func (_c *ReportDefinitionCreate) AddScheduleIDs(ids ...int) *ReportDefinitionCreate {
	_c.mutation.AddScheduleIDs(ids...)
	return _c
}

// AddSchedules adds the "schedules" edges to the ScheduledReport entity.
func (_c *ReportDefinitionCreate) AddSchedules(v ...*ScheduledReport) *ReportDefinitionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduleIDs(ids...)
}

// Mutation returns the ReportDefinitionMutation object of the builder.
func (_c *ReportDefinitionCreate) Mutation() *ReportDefinitionMutation {
	return _c.mutation
}

// Save creates the ReportDefinition in the database.
func (_c *ReportDefinitionCreate) Save(ctx context.Context) (*ReportDefinition, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ReportDefinitionCreate) SaveX(ctx context.Context) *ReportDefinition {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportDefinitionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportDefinitionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ReportDefinitionCreate) defaults() {
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := reportdefinition.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := reportdefinition.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := reportdefinition.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ReportDefinitionCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ReportDefinition.name"`)}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "ReportDefinition.slug"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ReportDefinition.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := reportdefinition.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReportDefinition.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "ReportDefinition.is_public"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReportDefinition.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ReportDefinition.updated_at"`)}
	}
	if len(_c.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "ReportDefinition.creator"`)}
	}
	return nil
}

func (_c *ReportDefinitionCreate) sqlSave(ctx context.Context) (*ReportDefinition, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ReportDefinitionCreate) createSpec() (*ReportDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportDefinition{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(reportdefinition.Table, sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(reportdefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(reportdefinition.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(reportdefinition.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(reportdefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Query(); ok {
		_spec.SetField(reportdefinition.FieldQuery, field.TypeJSON, value)
		_node.Query = value
	}
	if value, ok := _c.mutation.Parameters(); ok {
		_spec.SetField(reportdefinition.FieldParameters, field.TypeJSON, value)
		_node.Parameters = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(reportdefinition.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(reportdefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(reportdefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReportDefinition.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReportDefinitionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *ReportDefinitionCreate) OnConflict(opts ...sql.ConflictOption) *ReportDefinitionUpsertOne {
	_c.conflict = opts
	return &ReportDefinitionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ReportDefinitionCreate) OnConflictColumns(columns ...string) *ReportDefinitionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ReportDefinitionUpsertOne{
		create: _c,
	}
}

type (
	// ReportDefinitionUpsertOne is the builder for "upsert"-ing
	//  one ReportDefinition node.
	ReportDefinitionUpsertOne struct {
		create *ReportDefinitionCreate
	}

	// ReportDefinitionUpsert is the "OnConflict" setter.
	ReportDefinitionUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ReportDefinitionUpsert) SetName(v string) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateName() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *ReportDefinitionUpsert) SetSlug(v string) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateSlug() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldSlug)
	return u
}

// SetType sets the "type" field.
func (u *ReportDefinitionUpsert) SetType(v reportdefinition.Type) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateType() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldType)
	return u
}

// SetDescription sets the "description" field.
func (u *ReportDefinitionUpsert) SetDescription(v string) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateDescription() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ReportDefinitionUpsert) ClearDescription() *ReportDefinitionUpsert {
	u.SetNull(reportdefinition.FieldDescription)
	return u
}

// SetQuery sets the "query" field.
func (u *ReportDefinitionUpsert) SetQuery(v map[string]interface{}) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateQuery() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldQuery)
	return u
}

// ClearQuery clears the value of the "query" field.
func (u *ReportDefinitionUpsert) ClearQuery() *ReportDefinitionUpsert {
	u.SetNull(reportdefinition.FieldQuery)
	return u
}

// SetParameters sets the "parameters" field.
func (u *ReportDefinitionUpsert) SetParameters(v []map[string]interface{}) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldParameters, v)
	return u
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateParameters() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldParameters)
	return u
}

// ClearParameters clears the value of the "parameters" field.
func (u *ReportDefinitionUpsert) ClearParameters() *ReportDefinitionUpsert {
	u.SetNull(reportdefinition.FieldParameters)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *ReportDefinitionUpsert) SetIsPublic(v bool) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateIsPublic() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldIsPublic)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReportDefinitionUpsert) SetUpdatedAt(v time.Time) *ReportDefinitionUpsert {
	u.Set(reportdefinition.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReportDefinitionUpsert) UpdateUpdatedAt() *ReportDefinitionUpsert {
	u.SetExcluded(reportdefinition.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReportDefinitionUpsertOne) UpdateNewValues() *ReportDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(reportdefinition.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReportDefinitionUpsertOne) Ignore() *ReportDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReportDefinitionUpsertOne) DoNothing() *ReportDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReportDefinitionCreate.OnConflict
// documentation for more info.
func (u *ReportDefinitionUpsertOne) Update(set func(*ReportDefinitionUpsert)) *ReportDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReportDefinitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ReportDefinitionUpsertOne) SetName(v string) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateName() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *ReportDefinitionUpsertOne) SetSlug(v string) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateSlug() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateSlug()
	})
}

// SetType sets the "type" field.
func (u *ReportDefinitionUpsertOne) SetType(v reportdefinition.Type) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateType() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *ReportDefinitionUpsertOne) SetDescription(v string) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateDescription() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ReportDefinitionUpsertOne) ClearDescription() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearDescription()
	})
}

// SetQuery sets the "query" field.
func (u *ReportDefinitionUpsertOne) SetQuery(v map[string]interface{}) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateQuery() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *ReportDefinitionUpsertOne) ClearQuery() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearQuery()
	})
}

// SetParameters sets the "parameters" field.
func (u *ReportDefinitionUpsertOne) SetParameters(v []map[string]interface{}) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateParameters() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *ReportDefinitionUpsertOne) ClearParameters() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearParameters()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ReportDefinitionUpsertOne) SetIsPublic(v bool) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateIsPublic() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateIsPublic()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReportDefinitionUpsertOne) SetUpdatedAt(v time.Time) *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReportDefinitionUpsertOne) UpdateUpdatedAt() *ReportDefinitionUpsertOne {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ReportDefinitionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReportDefinitionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReportDefinitionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReportDefinitionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReportDefinitionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReportDefinitionCreateBulk is the builder for creating many ReportDefinition entities in bulk.
type ReportDefinitionCreateBulk struct {
	config
	err      error
	builders []*ReportDefinitionCreate
	conflict []sql.ConflictOption
}

// Save creates the ReportDefinition entities in the database.
func (_c *ReportDefinitionCreateBulk) Save(ctx context.Context) ([]*ReportDefinition, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ReportDefinition, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ReportDefinitionCreateBulk) SaveX(ctx context.Context) []*ReportDefinition {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReportDefinition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReportDefinitionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *ReportDefinitionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReportDefinitionUpsertBulk {
	_c.conflict = opts
	return &ReportDefinitionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ReportDefinitionCreateBulk) OnConflictColumns(columns ...string) *ReportDefinitionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ReportDefinitionUpsertBulk{
		create: _c,
	}
}

// ReportDefinitionUpsertBulk is the builder for "upsert"-ing
// a bulk of ReportDefinition nodes.
type ReportDefinitionUpsertBulk struct {
	create *ReportDefinitionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReportDefinitionUpsertBulk) UpdateNewValues() *ReportDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(reportdefinition.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReportDefinition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReportDefinitionUpsertBulk) Ignore() *ReportDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReportDefinitionUpsertBulk) DoNothing() *ReportDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReportDefinitionCreateBulk.OnConflict
// documentation for more info.
func (u *ReportDefinitionUpsertBulk) Update(set func(*ReportDefinitionUpsert)) *ReportDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReportDefinitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ReportDefinitionUpsertBulk) SetName(v string) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateName() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *ReportDefinitionUpsertBulk) SetSlug(v string) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateSlug() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateSlug()
	})
}

// SetType sets the "type" field.
func (u *ReportDefinitionUpsertBulk) SetType(v reportdefinition.Type) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateType() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateType()
	})
}

// SetDescription sets the "description" field.
func (u *ReportDefinitionUpsertBulk) SetDescription(v string) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateDescription() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ReportDefinitionUpsertBulk) ClearDescription() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearDescription()
	})
}

// SetQuery sets the "query" field.
func (u *ReportDefinitionUpsertBulk) SetQuery(v map[string]interface{}) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateQuery() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *ReportDefinitionUpsertBulk) ClearQuery() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearQuery()
	})
}

// SetParameters sets the "parameters" field.
func (u *ReportDefinitionUpsertBulk) SetParameters(v []map[string]interface{}) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateParameters() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *ReportDefinitionUpsertBulk) ClearParameters() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.ClearParameters()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *ReportDefinitionUpsertBulk) SetIsPublic(v bool) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateIsPublic() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateIsPublic()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReportDefinitionUpsertBulk) SetUpdatedAt(v time.Time) *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReportDefinitionUpsertBulk) UpdateUpdatedAt() *ReportDefinitionUpsertBulk {
	return u.Update(func(s *ReportDefinitionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ReportDefinitionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReportDefinitionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReportDefinitionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReportDefinitionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
