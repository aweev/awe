// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrantReportUpdate is the builder for updating GrantReport entities.
type GrantReportUpdate struct {
	config
	hooks    []Hook
	mutation *GrantReportMutation
}

// Where appends a list predicates to the GrantReportUpdate builder.
func (_u *GrantReportUpdate) Where(ps ...predicate.GrantReport) *GrantReportUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *GrantReportUpdate) SetTitle(v string) *GrantReportUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableTitle(v *string) *GrantReportUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *GrantReportUpdate) SetDueDate(v time.Time) *GrantReportUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableDueDate(v *time.Time) *GrantReportUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// SetSubmittedDate sets the "submitted_date" field.
func (_u *GrantReportUpdate) SetSubmittedDate(v time.Time) *GrantReportUpdate {
	_u.mutation.SetSubmittedDate(v)
	return _u
}

// SetNillableSubmittedDate sets the "submitted_date" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableSubmittedDate(v *time.Time) *GrantReportUpdate {
	if v != nil {
		_u.SetSubmittedDate(*v)
	}
	return _u
}

// ClearSubmittedDate clears the value of the "submitted_date" field.
func (_u *GrantReportUpdate) ClearSubmittedDate() *GrantReportUpdate {
	_u.mutation.ClearSubmittedDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *GrantReportUpdate) SetStatus(v grantreport.Status) *GrantReportUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableStatus(v *grantreport.Status) *GrantReportUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDocumentURL sets the "document_url" field.
func (_u *GrantReportUpdate) SetDocumentURL(v string) *GrantReportUpdate {
	_u.mutation.SetDocumentURL(v)
	return _u
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableDocumentURL(v *string) *GrantReportUpdate {
	if v != nil {
		_u.SetDocumentURL(*v)
	}
	return _u
}

// ClearDocumentURL clears the value of the "document_url" field.
func (_u *GrantReportUpdate) ClearDocumentURL() *GrantReportUpdate {
	_u.mutation.ClearDocumentURL()
	return _u
}

// SetReportType sets the "report_type" field.
func (_u *GrantReportUpdate) SetReportType(v string) *GrantReportUpdate {
	_u.mutation.SetReportType(v)
	return _u
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableReportType(v *string) *GrantReportUpdate {
	if v != nil {
		_u.SetReportType(*v)
	}
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *GrantReportUpdate) SetReviewedBy(v string) *GrantReportUpdate {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableReviewedBy(v *string) *GrantReportUpdate {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (_u *GrantReportUpdate) ClearReviewedBy() *GrantReportUpdate {
	_u.mutation.ClearReviewedBy()
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *GrantReportUpdate) SetReviewedAt(v time.Time) *GrantReportUpdate {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableReviewedAt(v *time.Time) *GrantReportUpdate {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (_u *GrantReportUpdate) ClearReviewedAt() *GrantReportUpdate {
	_u.mutation.ClearReviewedAt()
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *GrantReportUpdate) SetFeedback(v string) *GrantReportUpdate {
	_u.mutation.SetFeedback(v)
	return _u
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableFeedback(v *string) *GrantReportUpdate {
	if v != nil {
		_u.SetFeedback(*v)
	}
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *GrantReportUpdate) ClearFeedback() *GrantReportUpdate {
	_u.mutation.ClearFeedback()
	return _u
}

// SetIsApproved sets the "is_approved" field.
func (_u *GrantReportUpdate) SetIsApproved(v bool) *GrantReportUpdate {
	_u.mutation.SetIsApproved(v)
	return _u
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableIsApproved(v *bool) *GrantReportUpdate {
	if v != nil {
		_u.SetIsApproved(*v)
	}
	return _u
}

// SetNextDueDate sets the "next_due_date" field.
func (_u *GrantReportUpdate) SetNextDueDate(v time.Time) *GrantReportUpdate {
	_u.mutation.SetNextDueDate(v)
	return _u
}

// SetNillableNextDueDate sets the "next_due_date" field if the given value is not nil.
func (_u *GrantReportUpdate) SetNillableNextDueDate(v *time.Time) *GrantReportUpdate {
	if v != nil {
		_u.SetNextDueDate(*v)
	}
	return _u
}

// ClearNextDueDate clears the value of the "next_due_date" field.
func (_u *GrantReportUpdate) ClearNextDueDate() *GrantReportUpdate {
	_u.mutation.ClearNextDueDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantReportUpdate) SetUpdatedAt(v time.Time) *GrantReportUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetGrantID sets the "grant" edge to the Grant entity by ID.
func (_u *GrantReportUpdate) SetGrantID(id int) *GrantReportUpdate {
	_u.mutation.SetGrantID(id)
	return _u
}

// SetGrant sets the "grant" edge to the Grant entity.
func (_u *GrantReportUpdate) SetGrant(v *Grant) *GrantReportUpdate {
	return _u.SetGrantID(v.ID)
}

// Mutation returns the GrantReportMutation object of the builder.
func (_u *GrantReportUpdate) Mutation() *GrantReportMutation {
	return _u.mutation
}

// ClearGrant clears the "grant" edge to the Grant entity.
func (_u *GrantReportUpdate) ClearGrant() *GrantReportUpdate {
	_u.mutation.ClearGrant()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GrantReportUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantReportUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GrantReportUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantReportUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantReportUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := grantreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantReportUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := grantreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantReport.status": %w`, err)}
		}
	}
	if _u.mutation.GrantCleared() && len(_u.mutation.GrantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GrantReport.grant"`)
	}
	return nil
}

func (_u *GrantReportUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantreport.Table, grantreport.Columns, sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(grantreport.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(grantreport.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SubmittedDate(); ok {
		_spec.SetField(grantreport.FieldSubmittedDate, field.TypeTime, value)
	}
	if _u.mutation.SubmittedDateCleared() {
		_spec.ClearField(grantreport.FieldSubmittedDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grantreport.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DocumentURL(); ok {
		_spec.SetField(grantreport.FieldDocumentURL, field.TypeString, value)
	}
	if _u.mutation.DocumentURLCleared() {
		_spec.ClearField(grantreport.FieldDocumentURL, field.TypeString)
	}
	if value, ok := _u.mutation.ReportType(); ok {
		_spec.SetField(grantreport.FieldReportType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(grantreport.FieldReviewedBy, field.TypeString, value)
	}
	if _u.mutation.ReviewedByCleared() {
		_spec.ClearField(grantreport.FieldReviewedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(grantreport.FieldReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.ReviewedAtCleared() {
		_spec.ClearField(grantreport.FieldReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(grantreport.FieldFeedback, field.TypeString, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(grantreport.FieldFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.IsApproved(); ok {
		_spec.SetField(grantreport.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NextDueDate(); ok {
		_spec.SetField(grantreport.FieldNextDueDate, field.TypeTime, value)
	}
	if _u.mutation.NextDueDateCleared() {
		_spec.ClearField(grantreport.FieldNextDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(grantreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GrantReportUpdateOne is the builder for updating a single GrantReport entity.
type GrantReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantReportMutation
}

// SetTitle sets the "title" field.
func (_u *GrantReportUpdateOne) SetTitle(v string) *GrantReportUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableTitle(v *string) *GrantReportUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *GrantReportUpdateOne) SetDueDate(v time.Time) *GrantReportUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableDueDate(v *time.Time) *GrantReportUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// SetSubmittedDate sets the "submitted_date" field.
func (_u *GrantReportUpdateOne) SetSubmittedDate(v time.Time) *GrantReportUpdateOne {
	_u.mutation.SetSubmittedDate(v)
	return _u
}

// SetNillableSubmittedDate sets the "submitted_date" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableSubmittedDate(v *time.Time) *GrantReportUpdateOne {
	if v != nil {
		_u.SetSubmittedDate(*v)
	}
	return _u
}

// ClearSubmittedDate clears the value of the "submitted_date" field.
func (_u *GrantReportUpdateOne) ClearSubmittedDate() *GrantReportUpdateOne {
	_u.mutation.ClearSubmittedDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *GrantReportUpdateOne) SetStatus(v grantreport.Status) *GrantReportUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableStatus(v *grantreport.Status) *GrantReportUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDocumentURL sets the "document_url" field.
func (_u *GrantReportUpdateOne) SetDocumentURL(v string) *GrantReportUpdateOne {
	_u.mutation.SetDocumentURL(v)
	return _u
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableDocumentURL(v *string) *GrantReportUpdateOne {
	if v != nil {
		_u.SetDocumentURL(*v)
	}
	return _u
}

// ClearDocumentURL clears the value of the "document_url" field.
func (_u *GrantReportUpdateOne) ClearDocumentURL() *GrantReportUpdateOne {
	_u.mutation.ClearDocumentURL()
	return _u
}

// SetReportType sets the "report_type" field.
func (_u *GrantReportUpdateOne) SetReportType(v string) *GrantReportUpdateOne {
	_u.mutation.SetReportType(v)
	return _u
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableReportType(v *string) *GrantReportUpdateOne {
	if v != nil {
		_u.SetReportType(*v)
	}
	return _u
}

// SetReviewedBy sets the "reviewed_by" field.
func (_u *GrantReportUpdateOne) SetReviewedBy(v string) *GrantReportUpdateOne {
	_u.mutation.SetReviewedBy(v)
	return _u
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableReviewedBy(v *string) *GrantReportUpdateOne {
	if v != nil {
		_u.SetReviewedBy(*v)
	}
	return _u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (_u *GrantReportUpdateOne) ClearReviewedBy() *GrantReportUpdateOne {
	_u.mutation.ClearReviewedBy()
	return _u
}

// SetReviewedAt sets the "reviewed_at" field.
func (_u *GrantReportUpdateOne) SetReviewedAt(v time.Time) *GrantReportUpdateOne {
	_u.mutation.SetReviewedAt(v)
	return _u
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableReviewedAt(v *time.Time) *GrantReportUpdateOne {
	if v != nil {
		_u.SetReviewedAt(*v)
	}
	return _u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (_u *GrantReportUpdateOne) ClearReviewedAt() *GrantReportUpdateOne {
	_u.mutation.ClearReviewedAt()
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *GrantReportUpdateOne) SetFeedback(v string) *GrantReportUpdateOne {
	_u.mutation.SetFeedback(v)
	return _u
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableFeedback(v *string) *GrantReportUpdateOne {
	if v != nil {
		_u.SetFeedback(*v)
	}
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *GrantReportUpdateOne) ClearFeedback() *GrantReportUpdateOne {
	_u.mutation.ClearFeedback()
	return _u
}

// SetIsApproved sets the "is_approved" field.
func (_u *GrantReportUpdateOne) SetIsApproved(v bool) *GrantReportUpdateOne {
	_u.mutation.SetIsApproved(v)
	return _u
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableIsApproved(v *bool) *GrantReportUpdateOne {
	if v != nil {
		_u.SetIsApproved(*v)
	}
	return _u
}

// SetNextDueDate sets the "next_due_date" field.
func (_u *GrantReportUpdateOne) SetNextDueDate(v time.Time) *GrantReportUpdateOne {
	_u.mutation.SetNextDueDate(v)
	return _u
}

// SetNillableNextDueDate sets the "next_due_date" field if the given value is not nil.
func (_u *GrantReportUpdateOne) SetNillableNextDueDate(v *time.Time) *GrantReportUpdateOne {
	if v != nil {
		_u.SetNextDueDate(*v)
	}
	return _u
}

// ClearNextDueDate clears the value of the "next_due_date" field.
func (_u *GrantReportUpdateOne) ClearNextDueDate() *GrantReportUpdateOne {
	_u.mutation.ClearNextDueDate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GrantReportUpdateOne) SetUpdatedAt(v time.Time) *GrantReportUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetGrantID sets the "grant" edge to the Grant entity by ID.
func (_u *GrantReportUpdateOne) SetGrantID(id int) *GrantReportUpdateOne {
	_u.mutation.SetGrantID(id)
	return _u
}

// SetGrant sets the "grant" edge to the Grant entity.
func (_u *GrantReportUpdateOne) SetGrant(v *Grant) *GrantReportUpdateOne {
	return _u.SetGrantID(v.ID)
}

// Mutation returns the GrantReportMutation object of the builder.
func (_u *GrantReportUpdateOne) Mutation() *GrantReportMutation {
	return _u.mutation
}

// ClearGrant clears the "grant" edge to the Grant entity.
func (_u *GrantReportUpdateOne) ClearGrant() *GrantReportUpdateOne {
	_u.mutation.ClearGrant()
	return _u
}

// Where appends a list predicates to the GrantReportUpdate builder.
func (_u *GrantReportUpdateOne) Where(ps ...predicate.GrantReport) *GrantReportUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GrantReportUpdateOne) Select(field string, fields ...string) *GrantReportUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GrantReport entity.
func (_u *GrantReportUpdateOne) Save(ctx context.Context) (*GrantReport, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantReportUpdateOne) SaveX(ctx context.Context) *GrantReport {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GrantReportUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantReportUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GrantReportUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := grantreport.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GrantReportUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := grantreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantReport.status": %w`, err)}
		}
	}
	if _u.mutation.GrantCleared() && len(_u.mutation.GrantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GrantReport.grant"`)
	}
	return nil
}

func (_u *GrantReportUpdateOne) sqlSave(ctx context.Context) (_node *GrantReport, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantreport.Table, grantreport.Columns, sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GrantReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grantreport.FieldID)
		for _, f := range fields {
			if !grantreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grantreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(grantreport.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(grantreport.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SubmittedDate(); ok {
		_spec.SetField(grantreport.FieldSubmittedDate, field.TypeTime, value)
	}
	if _u.mutation.SubmittedDateCleared() {
		_spec.ClearField(grantreport.FieldSubmittedDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grantreport.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DocumentURL(); ok {
		_spec.SetField(grantreport.FieldDocumentURL, field.TypeString, value)
	}
	if _u.mutation.DocumentURLCleared() {
		_spec.ClearField(grantreport.FieldDocumentURL, field.TypeString)
	}
	if value, ok := _u.mutation.ReportType(); ok {
		_spec.SetField(grantreport.FieldReportType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReviewedBy(); ok {
		_spec.SetField(grantreport.FieldReviewedBy, field.TypeString, value)
	}
	if _u.mutation.ReviewedByCleared() {
		_spec.ClearField(grantreport.FieldReviewedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ReviewedAt(); ok {
		_spec.SetField(grantreport.FieldReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.ReviewedAtCleared() {
		_spec.ClearField(grantreport.FieldReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(grantreport.FieldFeedback, field.TypeString, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(grantreport.FieldFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.IsApproved(); ok {
		_spec.SetField(grantreport.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NextDueDate(); ok {
		_spec.SetField(grantreport.FieldNextDueDate, field.TypeTime, value)
	}
	if _u.mutation.NextDueDateCleared() {
		_spec.ClearField(grantreport.FieldNextDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(grantreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.GrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GrantReport{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
