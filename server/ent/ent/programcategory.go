// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/programcategory"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProgramCategory is the model entity for the ProgramCategory schema.
type ProgramCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// IconName holds the value of the "icon_name" field.
	IconName string `json:"icon_name,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// HeroImageURL holds the value of the "hero_image_url" field.
	HeroImageURL string `json:"hero_image_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramCategoryQuery when eager-loading is set.
	Edges        ProgramCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgramCategoryEdges holds the relations/edges for other nodes in the graph.
type ProgramCategoryEdges struct {
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramCategoryEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[0] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProgramCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case programcategory.FieldName, programcategory.FieldDescription:
			values[i] = new([]byte)
		case programcategory.FieldID, programcategory.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case programcategory.FieldSlug, programcategory.FieldIconName, programcategory.FieldColor, programcategory.FieldHeroImageURL:
			values[i] = new(sql.NullString)
		case programcategory.FieldCreatedAt, programcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProgramCategory fields.
func (_m *ProgramCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case programcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case programcategory.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case programcategory.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case programcategory.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case programcategory.FieldIconName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_name", values[i])
			} else if value.Valid {
				_m.IconName = value.String
			}
		case programcategory.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				_m.DisplayOrder = int(value.Int64)
			}
		case programcategory.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case programcategory.FieldHeroImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hero_image_url", values[i])
			} else if value.Valid {
				_m.HeroImageURL = value.String
			}
		case programcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case programcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProgramCategory.
// This includes values selected through modifiers, order, etc.
func (_m *ProgramCategory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPrograms queries the "programs" edge of the ProgramCategory entity.
func (_m *ProgramCategory) QueryPrograms() *ProgramQuery {
	return NewProgramCategoryClient(_m.config).QueryPrograms(_m)
}

// Update returns a builder for updating this ProgramCategory.
// Note that you need to call ProgramCategory.Unwrap() before calling this method if this ProgramCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProgramCategory) Update() *ProgramCategoryUpdateOne {
	return NewProgramCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProgramCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProgramCategory) Unwrap() *ProgramCategory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProgramCategory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProgramCategory) String() string {
	var builder strings.Builder
	builder.WriteString("ProgramCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("icon_name=")
	builder.WriteString(_m.IconName)
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", _m.DisplayOrder))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteString(", ")
	builder.WriteString("hero_image_url=")
	builder.WriteString(_m.HeroImageURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProgramCategories is a parsable slice of ProgramCategory.
type ProgramCategories []*ProgramCategory
