// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/user"
	"awe/ent/ent/userprofile"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserProfile is the model entity for the UserProfile schema.
type UserProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// JobTitle holds the value of the "job_title" field.
	JobTitle string `json:"job_title,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Linkedin holds the value of the "linkedin" field.
	Linkedin string `json:"linkedin,omitempty"`
	// Twitter holds the value of the "twitter" field.
	Twitter string `json:"twitter,omitempty"`
	// Interests holds the value of the "interests" field.
	Interests []string `json:"interests,omitempty"`
	// CompletedPct holds the value of the "completed_pct" field.
	CompletedPct int `json:"completed_pct,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserProfileQuery when eager-loading is set.
	Edges                 UserProfileEdges `json:"edges"`
	address_user_profiles *int
	user_profile          *int
	user_profile_address  *int
	selectValues          sql.SelectValues
}

// UserProfileEdges holds the relations/edges for other nodes in the graph.
type UserProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Assignments holds the value of the assignments edge.
	Assignments []*VolunteerAssignment `json:"assignments,omitempty"`
	// Skills holds the value of the skills edge.
	Skills []*UserSkill `json:"skills,omitempty"`
	// Address holds the value of the address edge.
	Address *Address `json:"address,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AssignmentsOrErr returns the Assignments value or an error if the edge
// was not loaded in eager-loading.
func (e UserProfileEdges) AssignmentsOrErr() ([]*VolunteerAssignment, error) {
	if e.loadedTypes[1] {
		return e.Assignments, nil
	}
	return nil, &NotLoadedError{edge: "assignments"}
}

// SkillsOrErr returns the Skills value or an error if the edge
// was not loaded in eager-loading.
func (e UserProfileEdges) SkillsOrErr() ([]*UserSkill, error) {
	if e.loadedTypes[2] {
		return e.Skills, nil
	}
	return nil, &NotLoadedError{edge: "skills"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserProfileEdges) AddressOrErr() (*Address, error) {
	if e.Address != nil {
		return e.Address, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userprofile.FieldInterests:
			values[i] = new([]byte)
		case userprofile.FieldID, userprofile.FieldCompletedPct:
			values[i] = new(sql.NullInt64)
		case userprofile.FieldFirstName, userprofile.FieldLastName, userprofile.FieldAvatarURL, userprofile.FieldBio, userprofile.FieldPhone, userprofile.FieldJobTitle, userprofile.FieldCompany, userprofile.FieldLinkedin, userprofile.FieldTwitter:
			values[i] = new(sql.NullString)
		case userprofile.FieldCreatedAt, userprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userprofile.ForeignKeys[0]: // address_user_profiles
			values[i] = new(sql.NullInt64)
		case userprofile.ForeignKeys[1]: // user_profile
			values[i] = new(sql.NullInt64)
		case userprofile.ForeignKeys[2]: // user_profile_address
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserProfile fields.
func (_m *UserProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userprofile.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case userprofile.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case userprofile.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				_m.AvatarURL = value.String
			}
		case userprofile.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				_m.Bio = value.String
			}
		case userprofile.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				_m.Phone = value.String
			}
		case userprofile.FieldJobTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_title", values[i])
			} else if value.Valid {
				_m.JobTitle = value.String
			}
		case userprofile.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				_m.Company = value.String
			}
		case userprofile.FieldLinkedin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field linkedin", values[i])
			} else if value.Valid {
				_m.Linkedin = value.String
			}
		case userprofile.FieldTwitter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter", values[i])
			} else if value.Valid {
				_m.Twitter = value.String
			}
		case userprofile.FieldInterests:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field interests", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Interests); err != nil {
					return fmt.Errorf("unmarshal field interests: %w", err)
				}
			}
		case userprofile.FieldCompletedPct:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completed_pct", values[i])
			} else if value.Valid {
				_m.CompletedPct = int(value.Int64)
			}
		case userprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case userprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field address_user_profiles", value)
			} else if value.Valid {
				_m.address_user_profiles = new(int)
				*_m.address_user_profiles = int(value.Int64)
			}
		case userprofile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_profile", value)
			} else if value.Valid {
				_m.user_profile = new(int)
				*_m.user_profile = int(value.Int64)
			}
		case userprofile.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_profile_address", value)
			} else if value.Valid {
				_m.user_profile_address = new(int)
				*_m.user_profile_address = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserProfile.
// This includes values selected through modifiers, order, etc.
func (_m *UserProfile) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserProfile entity.
func (_m *UserProfile) QueryUser() *UserQuery {
	return NewUserProfileClient(_m.config).QueryUser(_m)
}

// QueryAssignments queries the "assignments" edge of the UserProfile entity.
func (_m *UserProfile) QueryAssignments() *VolunteerAssignmentQuery {
	return NewUserProfileClient(_m.config).QueryAssignments(_m)
}

// QuerySkills queries the "skills" edge of the UserProfile entity.
func (_m *UserProfile) QuerySkills() *UserSkillQuery {
	return NewUserProfileClient(_m.config).QuerySkills(_m)
}

// QueryAddress queries the "address" edge of the UserProfile entity.
func (_m *UserProfile) QueryAddress() *AddressQuery {
	return NewUserProfileClient(_m.config).QueryAddress(_m)
}

// Update returns a builder for updating this UserProfile.
// Note that you need to call UserProfile.Unwrap() before calling this method if this UserProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserProfile) Update() *UserProfileUpdateOne {
	return NewUserProfileClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserProfile) Unwrap() *UserProfile {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserProfile is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserProfile) String() string {
	var builder strings.Builder
	builder.WriteString("UserProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(_m.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(_m.Bio)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(_m.Phone)
	builder.WriteString(", ")
	builder.WriteString("job_title=")
	builder.WriteString(_m.JobTitle)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(_m.Company)
	builder.WriteString(", ")
	builder.WriteString("linkedin=")
	builder.WriteString(_m.Linkedin)
	builder.WriteString(", ")
	builder.WriteString("twitter=")
	builder.WriteString(_m.Twitter)
	builder.WriteString(", ")
	builder.WriteString("interests=")
	builder.WriteString(fmt.Sprintf("%v", _m.Interests))
	builder.WriteString(", ")
	builder.WriteString("completed_pct=")
	builder.WriteString(fmt.Sprintf("%v", _m.CompletedPct))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserProfiles is a parsable slice of UserProfile.
type UserProfiles []*UserProfile
