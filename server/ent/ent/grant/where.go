// Code generated by ent, DO NOT EDIT.

package grant

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldName, v))
}

// GrantAmount applies equality check predicate on the "grant_amount" field. It's identical to GrantAmountEQ.
func GrantAmount(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldGrantAmount, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldEndDate, v))
}

// GrantReference applies equality check predicate on the "grant_reference" field. It's identical to GrantReferenceEQ.
func GrantReference(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldGrantReference, v))
}

// ContactPerson applies equality check predicate on the "contact_person" field. It's identical to ContactPersonEQ.
func ContactPerson(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldContactPerson, v))
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldContactEmail, v))
}

// RenewalEligible applies equality check predicate on the "renewal_eligible" field. It's identical to RenewalEligibleEQ.
func RenewalEligible(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldRenewalEligible, v))
}

// NextReviewDate applies equality check predicate on the "next_review_date" field. It's identical to NextReviewDateEQ.
func NextReviewDate(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldNextReviewDate, v))
}

// RequiresMatching applies equality check predicate on the "requires_matching" field. It's identical to RequiresMatchingEQ.
func RequiresMatching(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldRequiresMatching, v))
}

// MatchingAmount applies equality check predicate on the "matching_amount" field. It's identical to MatchingAmountEQ.
func MatchingAmount(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldMatchingAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContainsFold(FieldName, v))
}

// GrantAmountEQ applies the EQ predicate on the "grant_amount" field.
func GrantAmountEQ(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldGrantAmount, v))
}

// GrantAmountNEQ applies the NEQ predicate on the "grant_amount" field.
func GrantAmountNEQ(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldGrantAmount, v))
}

// GrantAmountIn applies the In predicate on the "grant_amount" field.
func GrantAmountIn(vs ...float64) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldGrantAmount, vs...))
}

// GrantAmountNotIn applies the NotIn predicate on the "grant_amount" field.
func GrantAmountNotIn(vs ...float64) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldGrantAmount, vs...))
}

// GrantAmountGT applies the GT predicate on the "grant_amount" field.
func GrantAmountGT(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldGrantAmount, v))
}

// GrantAmountGTE applies the GTE predicate on the "grant_amount" field.
func GrantAmountGTE(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldGrantAmount, v))
}

// GrantAmountLT applies the LT predicate on the "grant_amount" field.
func GrantAmountLT(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldGrantAmount, v))
}

// GrantAmountLTE applies the LTE predicate on the "grant_amount" field.
func GrantAmountLTE(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldGrantAmount, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldEndDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldStatus, vs...))
}

// GrantReferenceEQ applies the EQ predicate on the "grant_reference" field.
func GrantReferenceEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldGrantReference, v))
}

// GrantReferenceNEQ applies the NEQ predicate on the "grant_reference" field.
func GrantReferenceNEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldGrantReference, v))
}

// GrantReferenceIn applies the In predicate on the "grant_reference" field.
func GrantReferenceIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldGrantReference, vs...))
}

// GrantReferenceNotIn applies the NotIn predicate on the "grant_reference" field.
func GrantReferenceNotIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldGrantReference, vs...))
}

// GrantReferenceGT applies the GT predicate on the "grant_reference" field.
func GrantReferenceGT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldGrantReference, v))
}

// GrantReferenceGTE applies the GTE predicate on the "grant_reference" field.
func GrantReferenceGTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldGrantReference, v))
}

// GrantReferenceLT applies the LT predicate on the "grant_reference" field.
func GrantReferenceLT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldGrantReference, v))
}

// GrantReferenceLTE applies the LTE predicate on the "grant_reference" field.
func GrantReferenceLTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldGrantReference, v))
}

// GrantReferenceContains applies the Contains predicate on the "grant_reference" field.
func GrantReferenceContains(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContains(FieldGrantReference, v))
}

// GrantReferenceHasPrefix applies the HasPrefix predicate on the "grant_reference" field.
func GrantReferenceHasPrefix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasPrefix(FieldGrantReference, v))
}

// GrantReferenceHasSuffix applies the HasSuffix predicate on the "grant_reference" field.
func GrantReferenceHasSuffix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasSuffix(FieldGrantReference, v))
}

// GrantReferenceIsNil applies the IsNil predicate on the "grant_reference" field.
func GrantReferenceIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldGrantReference))
}

// GrantReferenceNotNil applies the NotNil predicate on the "grant_reference" field.
func GrantReferenceNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldGrantReference))
}

// GrantReferenceEqualFold applies the EqualFold predicate on the "grant_reference" field.
func GrantReferenceEqualFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEqualFold(FieldGrantReference, v))
}

// GrantReferenceContainsFold applies the ContainsFold predicate on the "grant_reference" field.
func GrantReferenceContainsFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContainsFold(FieldGrantReference, v))
}

// ContactPersonEQ applies the EQ predicate on the "contact_person" field.
func ContactPersonEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPersonNEQ applies the NEQ predicate on the "contact_person" field.
func ContactPersonNEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldContactPerson, v))
}

// ContactPersonIn applies the In predicate on the "contact_person" field.
func ContactPersonIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldContactPerson, vs...))
}

// ContactPersonNotIn applies the NotIn predicate on the "contact_person" field.
func ContactPersonNotIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldContactPerson, vs...))
}

// ContactPersonGT applies the GT predicate on the "contact_person" field.
func ContactPersonGT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldContactPerson, v))
}

// ContactPersonGTE applies the GTE predicate on the "contact_person" field.
func ContactPersonGTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldContactPerson, v))
}

// ContactPersonLT applies the LT predicate on the "contact_person" field.
func ContactPersonLT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldContactPerson, v))
}

// ContactPersonLTE applies the LTE predicate on the "contact_person" field.
func ContactPersonLTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldContactPerson, v))
}

// ContactPersonContains applies the Contains predicate on the "contact_person" field.
func ContactPersonContains(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContains(FieldContactPerson, v))
}

// ContactPersonHasPrefix applies the HasPrefix predicate on the "contact_person" field.
func ContactPersonHasPrefix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasPrefix(FieldContactPerson, v))
}

// ContactPersonHasSuffix applies the HasSuffix predicate on the "contact_person" field.
func ContactPersonHasSuffix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasSuffix(FieldContactPerson, v))
}

// ContactPersonIsNil applies the IsNil predicate on the "contact_person" field.
func ContactPersonIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldContactPerson))
}

// ContactPersonNotNil applies the NotNil predicate on the "contact_person" field.
func ContactPersonNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldContactPerson))
}

// ContactPersonEqualFold applies the EqualFold predicate on the "contact_person" field.
func ContactPersonEqualFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEqualFold(FieldContactPerson, v))
}

// ContactPersonContainsFold applies the ContainsFold predicate on the "contact_person" field.
func ContactPersonContainsFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContainsFold(FieldContactPerson, v))
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldContactEmail, v))
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldContactEmail, v))
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldContactEmail, vs...))
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldContactEmail, vs...))
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldContactEmail, v))
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldContactEmail, v))
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldContactEmail, v))
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldContactEmail, v))
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContains(FieldContactEmail, v))
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasPrefix(FieldContactEmail, v))
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.Grant {
	return predicate.Grant(sql.FieldHasSuffix(FieldContactEmail, v))
}

// ContactEmailIsNil applies the IsNil predicate on the "contact_email" field.
func ContactEmailIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldContactEmail))
}

// ContactEmailNotNil applies the NotNil predicate on the "contact_email" field.
func ContactEmailNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldContactEmail))
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldEqualFold(FieldContactEmail, v))
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.Grant {
	return predicate.Grant(sql.FieldContainsFold(FieldContactEmail, v))
}

// RenewalEligibleEQ applies the EQ predicate on the "renewal_eligible" field.
func RenewalEligibleEQ(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldRenewalEligible, v))
}

// RenewalEligibleNEQ applies the NEQ predicate on the "renewal_eligible" field.
func RenewalEligibleNEQ(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldRenewalEligible, v))
}

// NextReviewDateEQ applies the EQ predicate on the "next_review_date" field.
func NextReviewDateEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldNextReviewDate, v))
}

// NextReviewDateNEQ applies the NEQ predicate on the "next_review_date" field.
func NextReviewDateNEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldNextReviewDate, v))
}

// NextReviewDateIn applies the In predicate on the "next_review_date" field.
func NextReviewDateIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldNextReviewDate, vs...))
}

// NextReviewDateNotIn applies the NotIn predicate on the "next_review_date" field.
func NextReviewDateNotIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldNextReviewDate, vs...))
}

// NextReviewDateGT applies the GT predicate on the "next_review_date" field.
func NextReviewDateGT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldNextReviewDate, v))
}

// NextReviewDateGTE applies the GTE predicate on the "next_review_date" field.
func NextReviewDateGTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldNextReviewDate, v))
}

// NextReviewDateLT applies the LT predicate on the "next_review_date" field.
func NextReviewDateLT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldNextReviewDate, v))
}

// NextReviewDateLTE applies the LTE predicate on the "next_review_date" field.
func NextReviewDateLTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldNextReviewDate, v))
}

// NextReviewDateIsNil applies the IsNil predicate on the "next_review_date" field.
func NextReviewDateIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldNextReviewDate))
}

// NextReviewDateNotNil applies the NotNil predicate on the "next_review_date" field.
func NextReviewDateNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldNextReviewDate))
}

// RequiresMatchingEQ applies the EQ predicate on the "requires_matching" field.
func RequiresMatchingEQ(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldRequiresMatching, v))
}

// RequiresMatchingNEQ applies the NEQ predicate on the "requires_matching" field.
func RequiresMatchingNEQ(v bool) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldRequiresMatching, v))
}

// MatchingAmountEQ applies the EQ predicate on the "matching_amount" field.
func MatchingAmountEQ(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldMatchingAmount, v))
}

// MatchingAmountNEQ applies the NEQ predicate on the "matching_amount" field.
func MatchingAmountNEQ(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldMatchingAmount, v))
}

// MatchingAmountIn applies the In predicate on the "matching_amount" field.
func MatchingAmountIn(vs ...float64) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldMatchingAmount, vs...))
}

// MatchingAmountNotIn applies the NotIn predicate on the "matching_amount" field.
func MatchingAmountNotIn(vs ...float64) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldMatchingAmount, vs...))
}

// MatchingAmountGT applies the GT predicate on the "matching_amount" field.
func MatchingAmountGT(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldMatchingAmount, v))
}

// MatchingAmountGTE applies the GTE predicate on the "matching_amount" field.
func MatchingAmountGTE(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldMatchingAmount, v))
}

// MatchingAmountLT applies the LT predicate on the "matching_amount" field.
func MatchingAmountLT(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldMatchingAmount, v))
}

// MatchingAmountLTE applies the LTE predicate on the "matching_amount" field.
func MatchingAmountLTE(v float64) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldMatchingAmount, v))
}

// MatchingAmountIsNil applies the IsNil predicate on the "matching_amount" field.
func MatchingAmountIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldMatchingAmount))
}

// MatchingAmountNotNil applies the NotNil predicate on the "matching_amount" field.
func MatchingAmountNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldMatchingAmount))
}

// RestrictionsIsNil applies the IsNil predicate on the "restrictions" field.
func RestrictionsIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldRestrictions))
}

// RestrictionsNotNil applies the NotNil predicate on the "restrictions" field.
func RestrictionsNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldRestrictions))
}

// ReportingScheduleIsNil applies the IsNil predicate on the "reporting_schedule" field.
func ReportingScheduleIsNil() predicate.Grant {
	return predicate.Grant(sql.FieldIsNull(FieldReportingSchedule))
}

// ReportingScheduleNotNil applies the NotNil predicate on the "reporting_schedule" field.
func ReportingScheduleNotNil() predicate.Grant {
	return predicate.Grant(sql.FieldNotNull(FieldReportingSchedule))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Grant {
	return predicate.Grant(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReports applies the HasEdge predicate on the "reports" edge.
func HasReports() predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.GrantReport) predicate.Grant {
	return predicate.Grant(func(s *sql.Selector) {
		step := newReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Grant) predicate.Grant {
	return predicate.Grant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Grant) predicate.Grant {
	return predicate.Grant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Grant) predicate.Grant {
	return predicate.Grant(sql.NotPredicates(p))
}
