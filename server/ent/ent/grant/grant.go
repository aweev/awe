// Code generated by ent, DO NOT EDIT.

package grant

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grant type in the database.
	Label = "grant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGrantAmount holds the string denoting the grant_amount field in the database.
	FieldGrantAmount = "grant_amount"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldGrantReference holds the string denoting the grant_reference field in the database.
	FieldGrantReference = "grant_reference"
	// FieldContactPerson holds the string denoting the contact_person field in the database.
	FieldContactPerson = "contact_person"
	// FieldContactEmail holds the string denoting the contact_email field in the database.
	FieldContactEmail = "contact_email"
	// FieldRenewalEligible holds the string denoting the renewal_eligible field in the database.
	FieldRenewalEligible = "renewal_eligible"
	// FieldNextReviewDate holds the string denoting the next_review_date field in the database.
	FieldNextReviewDate = "next_review_date"
	// FieldRequiresMatching holds the string denoting the requires_matching field in the database.
	FieldRequiresMatching = "requires_matching"
	// FieldMatchingAmount holds the string denoting the matching_amount field in the database.
	FieldMatchingAmount = "matching_amount"
	// FieldRestrictions holds the string denoting the restrictions field in the database.
	FieldRestrictions = "restrictions"
	// FieldReportingSchedule holds the string denoting the reporting_schedule field in the database.
	FieldReportingSchedule = "reporting_schedule"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeReports holds the string denoting the reports edge name in mutations.
	EdgeReports = "reports"
	// Table holds the table name of the grant in the database.
	Table = "grants"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "grants"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_grants"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "grants"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_grants"
	// ReportsTable is the table that holds the reports relation/edge.
	ReportsTable = "grant_reports"
	// ReportsInverseTable is the table name for the GrantReport entity.
	// It exists in this package in order to avoid circular dependency with the "grantreport" package.
	ReportsInverseTable = "grant_reports"
	// ReportsColumn is the table column denoting the reports relation/edge.
	ReportsColumn = "grant_reports"
)

// Columns holds all SQL columns for grant fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldGrantAmount,
	FieldStartDate,
	FieldEndDate,
	FieldStatus,
	FieldGoals,
	FieldGrantReference,
	FieldContactPerson,
	FieldContactEmail,
	FieldRenewalEligible,
	FieldNextReviewDate,
	FieldRequiresMatching,
	FieldMatchingAmount,
	FieldRestrictions,
	FieldReportingSchedule,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "grants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_grants",
	"program_grants",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRenewalEligible holds the default value on creation for the "renewal_eligible" field.
	DefaultRenewalEligible bool
	// DefaultRequiresMatching holds the default value on creation for the "requires_matching" field.
	DefaultRequiresMatching bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusACTIVE is the default value of the Status enum.
const DefaultStatus = StatusACTIVE

// Status values.
const (
	StatusDRAFT     Status = "DRAFT"
	StatusACTIVE    Status = "ACTIVE"
	StatusCOMPLETED Status = "COMPLETED"
	StatusCLOSED    Status = "CLOSED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusACTIVE, StatusCOMPLETED, StatusCLOSED:
		return nil
	default:
		return fmt.Errorf("grant: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Grant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGrantAmount orders the results by the grant_amount field.
func ByGrantAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrantAmount, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByGrantReference orders the results by the grant_reference field.
func ByGrantReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrantReference, opts...).ToFunc()
}

// ByContactPerson orders the results by the contact_person field.
func ByContactPerson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPerson, opts...).ToFunc()
}

// ByContactEmail orders the results by the contact_email field.
func ByContactEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactEmail, opts...).ToFunc()
}

// ByRenewalEligible orders the results by the renewal_eligible field.
func ByRenewalEligible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewalEligible, opts...).ToFunc()
}

// ByNextReviewDate orders the results by the next_review_date field.
func ByNextReviewDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextReviewDate, opts...).ToFunc()
}

// ByRequiresMatching orders the results by the requires_matching field.
func ByRequiresMatching(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiresMatching, opts...).ToFunc()
}

// ByMatchingAmount orders the results by the matching_amount field.
func ByMatchingAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchingAmount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByReportsCount orders the results by reports count.
func ByReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportsStep(), opts...)
	}
}

// ByReports orders the results by reports terms.
func ByReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReportsTable, ReportsColumn),
	)
}
