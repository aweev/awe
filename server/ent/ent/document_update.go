// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (_u *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *DocumentUpdate) SetTitle(v map[string]string) *DocumentUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetType sets the "type" field.
func (_u *DocumentUpdate) SetType(v document.Type) *DocumentUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableType(v *document.Type) *DocumentUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetFileURL sets the "file_url" field.
func (_u *DocumentUpdate) SetFileURL(v string) *DocumentUpdate {
	_u.mutation.SetFileURL(v)
	return _u
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableFileURL(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetFileURL(*v)
	}
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *DocumentUpdate) SetFileName(v string) *DocumentUpdate {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableFileName(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *DocumentUpdate) SetMimeType(v string) *DocumentUpdate {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableMimeType(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// ClearMimeType clears the value of the "mime_type" field.
func (_u *DocumentUpdate) ClearMimeType() *DocumentUpdate {
	_u.mutation.ClearMimeType()
	return _u
}

// SetSize sets the "size" field.
func (_u *DocumentUpdate) SetSize(v int) *DocumentUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableSize(v *int) *DocumentUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *DocumentUpdate) AddSize(v int) *DocumentUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *DocumentUpdate) ClearSize() *DocumentUpdate {
	_u.mutation.ClearSize()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DocumentUpdate) SetDescription(v map[string]string) *DocumentUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DocumentUpdate) ClearDescription() *DocumentUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTags sets the "tags" field.
func (_u *DocumentUpdate) SetTags(v []string) *DocumentUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *DocumentUpdate) AppendTags(v []string) *DocumentUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *DocumentUpdate) SetVersion(v string) *DocumentUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableVersion(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetLanguage sets the "language" field.
func (_u *DocumentUpdate) SetLanguage(v string) *DocumentUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableLanguage(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *DocumentUpdate) SetIsPublic(v bool) *DocumentUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableIsPublic(v *bool) *DocumentUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *DocumentUpdate) SetAllowedRoles(v []string) *DocumentUpdate {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *DocumentUpdate) AppendAllowedRoles(v []string) *DocumentUpdate {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetAccessPassword sets the "access_password" field.
func (_u *DocumentUpdate) SetAccessPassword(v string) *DocumentUpdate {
	_u.mutation.SetAccessPassword(v)
	return _u
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableAccessPassword(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetAccessPassword(*v)
	}
	return _u
}

// ClearAccessPassword clears the value of the "access_password" field.
func (_u *DocumentUpdate) ClearAccessPassword() *DocumentUpdate {
	_u.mutation.ClearAccessPassword()
	return _u
}

// SetRequiresApproval sets the "requires_approval" field.
func (_u *DocumentUpdate) SetRequiresApproval(v bool) *DocumentUpdate {
	_u.mutation.SetRequiresApproval(v)
	return _u
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableRequiresApproval(v *bool) *DocumentUpdate {
	if v != nil {
		_u.SetRequiresApproval(*v)
	}
	return _u
}

// SetIsApproved sets the "is_approved" field.
func (_u *DocumentUpdate) SetIsApproved(v bool) *DocumentUpdate {
	_u.mutation.SetIsApproved(v)
	return _u
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableIsApproved(v *bool) *DocumentUpdate {
	if v != nil {
		_u.SetIsApproved(*v)
	}
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *DocumentUpdate) SetApprovedBy(v string) *DocumentUpdate {
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableApprovedBy(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *DocumentUpdate) ClearApprovedBy() *DocumentUpdate {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *DocumentUpdate) SetApprovedAt(v time.Time) *DocumentUpdate {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableApprovedAt(v *time.Time) *DocumentUpdate {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *DocumentUpdate) ClearApprovedAt() *DocumentUpdate {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetDownloadCount sets the "download_count" field.
func (_u *DocumentUpdate) SetDownloadCount(v int) *DocumentUpdate {
	_u.mutation.ResetDownloadCount()
	_u.mutation.SetDownloadCount(v)
	return _u
}

// SetNillableDownloadCount sets the "download_count" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableDownloadCount(v *int) *DocumentUpdate {
	if v != nil {
		_u.SetDownloadCount(*v)
	}
	return _u
}

// AddDownloadCount adds value to the "download_count" field.
func (_u *DocumentUpdate) AddDownloadCount(v int) *DocumentUpdate {
	_u.mutation.AddDownloadCount(v)
	return _u
}

// SetLastAccessed sets the "last_accessed" field.
func (_u *DocumentUpdate) SetLastAccessed(v time.Time) *DocumentUpdate {
	_u.mutation.SetLastAccessed(v)
	return _u
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableLastAccessed(v *time.Time) *DocumentUpdate {
	if v != nil {
		_u.SetLastAccessed(*v)
	}
	return _u
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (_u *DocumentUpdate) ClearLastAccessed() *DocumentUpdate {
	_u.mutation.ClearLastAccessed()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DocumentUpdate) SetUpdatedAt(v time.Time) *DocumentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (_u *DocumentUpdate) SetUploaderID(id int) *DocumentUpdate {
	_u.mutation.SetUploaderID(id)
	return _u
}

// SetUploader sets the "uploader" edge to the User entity.
func (_u *DocumentUpdate) SetUploader(v *User) *DocumentUpdate {
	return _u.SetUploaderID(v.ID)
}

// SetCategoryID sets the "category" edge to the DocumentCategory entity by ID.
func (_u *DocumentUpdate) SetCategoryID(id int) *DocumentUpdate {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetNillableCategoryID sets the "category" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_u *DocumentUpdate) SetNillableCategoryID(id *int) *DocumentUpdate {
	if id != nil {
		_u = _u.SetCategoryID(*id)
	}
	return _u
}

// SetCategory sets the "category" edge to the DocumentCategory entity.
func (_u *DocumentUpdate) SetCategory(v *DocumentCategory) *DocumentUpdate {
	return _u.SetCategoryID(v.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (_u *DocumentUpdate) Mutation() *DocumentMutation {
	return _u.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (_u *DocumentUpdate) ClearUploader() *DocumentUpdate {
	_u.mutation.ClearUploader()
	return _u
}

// ClearCategory clears the "category" edge to the DocumentCategory entity.
func (_u *DocumentUpdate) ClearCategory() *DocumentUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DocumentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DocumentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := document.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DocumentUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Document.type": %w`, err)}
		}
	}
	if _u.mutation.UploaderCleared() && len(_u.mutation.UploaderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Document.uploader"`)
	}
	return nil
}

func (_u *DocumentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(document.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileURL(); ok {
		_spec.SetField(document.FieldFileURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(document.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(document.FieldMimeType, field.TypeString, value)
	}
	if _u.mutation.MimeTypeCleared() {
		_spec.ClearField(document.FieldMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(document.FieldSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(document.FieldSize, field.TypeInt, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(document.FieldSize, field.TypeInt)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(document.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(document.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(document.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(document.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(document.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(document.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.AccessPassword(); ok {
		_spec.SetField(document.FieldAccessPassword, field.TypeString, value)
	}
	if _u.mutation.AccessPasswordCleared() {
		_spec.ClearField(document.FieldAccessPassword, field.TypeString)
	}
	if value, ok := _u.mutation.RequiresApproval(); ok {
		_spec.SetField(document.FieldRequiresApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsApproved(); ok {
		_spec.SetField(document.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(document.FieldApprovedBy, field.TypeString, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(document.FieldApprovedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(document.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(document.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DownloadCount(); ok {
		_spec.SetField(document.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDownloadCount(); ok {
		_spec.AddField(document.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastAccessed(); ok {
		_spec.SetField(document.FieldLastAccessed, field.TypeTime, value)
	}
	if _u.mutation.LastAccessedCleared() {
		_spec.ClearField(document.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetTitle sets the "title" field.
func (_u *DocumentUpdateOne) SetTitle(v map[string]string) *DocumentUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetType sets the "type" field.
func (_u *DocumentUpdateOne) SetType(v document.Type) *DocumentUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableType(v *document.Type) *DocumentUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetFileURL sets the "file_url" field.
func (_u *DocumentUpdateOne) SetFileURL(v string) *DocumentUpdateOne {
	_u.mutation.SetFileURL(v)
	return _u
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableFileURL(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetFileURL(*v)
	}
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *DocumentUpdateOne) SetFileName(v string) *DocumentUpdateOne {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableFileName(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *DocumentUpdateOne) SetMimeType(v string) *DocumentUpdateOne {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableMimeType(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// ClearMimeType clears the value of the "mime_type" field.
func (_u *DocumentUpdateOne) ClearMimeType() *DocumentUpdateOne {
	_u.mutation.ClearMimeType()
	return _u
}

// SetSize sets the "size" field.
func (_u *DocumentUpdateOne) SetSize(v int) *DocumentUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableSize(v *int) *DocumentUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *DocumentUpdateOne) AddSize(v int) *DocumentUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *DocumentUpdateOne) ClearSize() *DocumentUpdateOne {
	_u.mutation.ClearSize()
	return _u
}

// SetDescription sets the "description" field.
func (_u *DocumentUpdateOne) SetDescription(v map[string]string) *DocumentUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DocumentUpdateOne) ClearDescription() *DocumentUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTags sets the "tags" field.
func (_u *DocumentUpdateOne) SetTags(v []string) *DocumentUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *DocumentUpdateOne) AppendTags(v []string) *DocumentUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// SetVersion sets the "version" field.
func (_u *DocumentUpdateOne) SetVersion(v string) *DocumentUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableVersion(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// SetLanguage sets the "language" field.
func (_u *DocumentUpdateOne) SetLanguage(v string) *DocumentUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableLanguage(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *DocumentUpdateOne) SetIsPublic(v bool) *DocumentUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableIsPublic(v *bool) *DocumentUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *DocumentUpdateOne) SetAllowedRoles(v []string) *DocumentUpdateOne {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *DocumentUpdateOne) AppendAllowedRoles(v []string) *DocumentUpdateOne {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetAccessPassword sets the "access_password" field.
func (_u *DocumentUpdateOne) SetAccessPassword(v string) *DocumentUpdateOne {
	_u.mutation.SetAccessPassword(v)
	return _u
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableAccessPassword(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetAccessPassword(*v)
	}
	return _u
}

// ClearAccessPassword clears the value of the "access_password" field.
func (_u *DocumentUpdateOne) ClearAccessPassword() *DocumentUpdateOne {
	_u.mutation.ClearAccessPassword()
	return _u
}

// SetRequiresApproval sets the "requires_approval" field.
func (_u *DocumentUpdateOne) SetRequiresApproval(v bool) *DocumentUpdateOne {
	_u.mutation.SetRequiresApproval(v)
	return _u
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableRequiresApproval(v *bool) *DocumentUpdateOne {
	if v != nil {
		_u.SetRequiresApproval(*v)
	}
	return _u
}

// SetIsApproved sets the "is_approved" field.
func (_u *DocumentUpdateOne) SetIsApproved(v bool) *DocumentUpdateOne {
	_u.mutation.SetIsApproved(v)
	return _u
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableIsApproved(v *bool) *DocumentUpdateOne {
	if v != nil {
		_u.SetIsApproved(*v)
	}
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *DocumentUpdateOne) SetApprovedBy(v string) *DocumentUpdateOne {
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableApprovedBy(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *DocumentUpdateOne) ClearApprovedBy() *DocumentUpdateOne {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *DocumentUpdateOne) SetApprovedAt(v time.Time) *DocumentUpdateOne {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableApprovedAt(v *time.Time) *DocumentUpdateOne {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *DocumentUpdateOne) ClearApprovedAt() *DocumentUpdateOne {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetDownloadCount sets the "download_count" field.
func (_u *DocumentUpdateOne) SetDownloadCount(v int) *DocumentUpdateOne {
	_u.mutation.ResetDownloadCount()
	_u.mutation.SetDownloadCount(v)
	return _u
}

// SetNillableDownloadCount sets the "download_count" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableDownloadCount(v *int) *DocumentUpdateOne {
	if v != nil {
		_u.SetDownloadCount(*v)
	}
	return _u
}

// AddDownloadCount adds value to the "download_count" field.
func (_u *DocumentUpdateOne) AddDownloadCount(v int) *DocumentUpdateOne {
	_u.mutation.AddDownloadCount(v)
	return _u
}

// SetLastAccessed sets the "last_accessed" field.
func (_u *DocumentUpdateOne) SetLastAccessed(v time.Time) *DocumentUpdateOne {
	_u.mutation.SetLastAccessed(v)
	return _u
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableLastAccessed(v *time.Time) *DocumentUpdateOne {
	if v != nil {
		_u.SetLastAccessed(*v)
	}
	return _u
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (_u *DocumentUpdateOne) ClearLastAccessed() *DocumentUpdateOne {
	_u.mutation.ClearLastAccessed()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DocumentUpdateOne) SetUpdatedAt(v time.Time) *DocumentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (_u *DocumentUpdateOne) SetUploaderID(id int) *DocumentUpdateOne {
	_u.mutation.SetUploaderID(id)
	return _u
}

// SetUploader sets the "uploader" edge to the User entity.
func (_u *DocumentUpdateOne) SetUploader(v *User) *DocumentUpdateOne {
	return _u.SetUploaderID(v.ID)
}

// SetCategoryID sets the "category" edge to the DocumentCategory entity by ID.
func (_u *DocumentUpdateOne) SetCategoryID(id int) *DocumentUpdateOne {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetNillableCategoryID sets the "category" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableCategoryID(id *int) *DocumentUpdateOne {
	if id != nil {
		_u = _u.SetCategoryID(*id)
	}
	return _u
}

// SetCategory sets the "category" edge to the DocumentCategory entity.
func (_u *DocumentUpdateOne) SetCategory(v *DocumentCategory) *DocumentUpdateOne {
	return _u.SetCategoryID(v.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (_u *DocumentUpdateOne) Mutation() *DocumentMutation {
	return _u.mutation
}

// ClearUploader clears the "uploader" edge to the User entity.
func (_u *DocumentUpdateOne) ClearUploader() *DocumentUpdateOne {
	_u.mutation.ClearUploader()
	return _u
}

// ClearCategory clears the "category" edge to the DocumentCategory entity.
func (_u *DocumentUpdateOne) ClearCategory() *DocumentUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// Where appends a list predicates to the DocumentUpdate builder.
func (_u *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Document entity.
func (_u *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DocumentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := document.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DocumentUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Document.type": %w`, err)}
		}
	}
	if _u.mutation.UploaderCleared() && len(_u.mutation.UploaderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Document.uploader"`)
	}
	return nil
}

func (_u *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(document.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileURL(); ok {
		_spec.SetField(document.FieldFileURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(document.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(document.FieldMimeType, field.TypeString, value)
	}
	if _u.mutation.MimeTypeCleared() {
		_spec.ClearField(document.FieldMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(document.FieldSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(document.FieldSize, field.TypeInt, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(document.FieldSize, field.TypeInt)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(document.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(document.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(document.FieldVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(document.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(document.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(document.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.AccessPassword(); ok {
		_spec.SetField(document.FieldAccessPassword, field.TypeString, value)
	}
	if _u.mutation.AccessPasswordCleared() {
		_spec.ClearField(document.FieldAccessPassword, field.TypeString)
	}
	if value, ok := _u.mutation.RequiresApproval(); ok {
		_spec.SetField(document.FieldRequiresApproval, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsApproved(); ok {
		_spec.SetField(document.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(document.FieldApprovedBy, field.TypeString, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(document.FieldApprovedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(document.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(document.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DownloadCount(); ok {
		_spec.SetField(document.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDownloadCount(); ok {
		_spec.AddField(document.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastAccessed(); ok {
		_spec.SetField(document.FieldLastAccessed, field.TypeTime, value)
	}
	if _u.mutation.LastAccessedCleared() {
		_spec.ClearField(document.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Document{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
