// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/userprofile"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VolunteerAssignment is the model entity for the VolunteerAssignment schema.
type VolunteerAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// HoursCompleted holds the value of the "hours_completed" field.
	HoursCompleted int `json:"hours_completed,omitempty"`
	// HoursCommitted holds the value of the "hours_committed" field.
	HoursCommitted int `json:"hours_committed,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback string `json:"feedback,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// CompletionNotes holds the value of the "completion_notes" field.
	CompletionNotes string `json:"completion_notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VolunteerAssignmentQuery when eager-loading is set.
	Edges                             VolunteerAssignmentEdges `json:"edges"`
	user_profile_assignments          *int
	volunteer_opportunity_assignments *int
	selectValues                      sql.SelectValues
}

// VolunteerAssignmentEdges holds the relations/edges for other nodes in the graph.
type VolunteerAssignmentEdges struct {
	// Opportunity holds the value of the opportunity edge.
	Opportunity *VolunteerOpportunity `json:"opportunity,omitempty"`
	// Volunteer holds the value of the volunteer edge.
	Volunteer *UserProfile `json:"volunteer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OpportunityOrErr returns the Opportunity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VolunteerAssignmentEdges) OpportunityOrErr() (*VolunteerOpportunity, error) {
	if e.Opportunity != nil {
		return e.Opportunity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: volunteeropportunity.Label}
	}
	return nil, &NotLoadedError{edge: "opportunity"}
}

// VolunteerOrErr returns the Volunteer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VolunteerAssignmentEdges) VolunteerOrErr() (*UserProfile, error) {
	if e.Volunteer != nil {
		return e.Volunteer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: userprofile.Label}
	}
	return nil, &NotLoadedError{edge: "volunteer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VolunteerAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case volunteerassignment.FieldID, volunteerassignment.FieldHoursCompleted, volunteerassignment.FieldHoursCommitted, volunteerassignment.FieldRating:
			values[i] = new(sql.NullInt64)
		case volunteerassignment.FieldStatus, volunteerassignment.FieldFeedback, volunteerassignment.FieldCompletionNotes:
			values[i] = new(sql.NullString)
		case volunteerassignment.FieldStartDate, volunteerassignment.FieldEndDate, volunteerassignment.FieldCreatedAt, volunteerassignment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case volunteerassignment.ForeignKeys[0]: // user_profile_assignments
			values[i] = new(sql.NullInt64)
		case volunteerassignment.ForeignKeys[1]: // volunteer_opportunity_assignments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VolunteerAssignment fields.
func (_m *VolunteerAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case volunteerassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case volunteerassignment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case volunteerassignment.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case volunteerassignment.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case volunteerassignment.FieldHoursCompleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hours_completed", values[i])
			} else if value.Valid {
				_m.HoursCompleted = int(value.Int64)
			}
		case volunteerassignment.FieldHoursCommitted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hours_committed", values[i])
			} else if value.Valid {
				_m.HoursCommitted = int(value.Int64)
			}
		case volunteerassignment.FieldFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value.Valid {
				_m.Feedback = value.String
			}
		case volunteerassignment.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				_m.Rating = int(value.Int64)
			}
		case volunteerassignment.FieldCompletionNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field completion_notes", values[i])
			} else if value.Valid {
				_m.CompletionNotes = value.String
			}
		case volunteerassignment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case volunteerassignment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case volunteerassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_profile_assignments", value)
			} else if value.Valid {
				_m.user_profile_assignments = new(int)
				*_m.user_profile_assignments = int(value.Int64)
			}
		case volunteerassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field volunteer_opportunity_assignments", value)
			} else if value.Valid {
				_m.volunteer_opportunity_assignments = new(int)
				*_m.volunteer_opportunity_assignments = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VolunteerAssignment.
// This includes values selected through modifiers, order, etc.
func (_m *VolunteerAssignment) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOpportunity queries the "opportunity" edge of the VolunteerAssignment entity.
func (_m *VolunteerAssignment) QueryOpportunity() *VolunteerOpportunityQuery {
	return NewVolunteerAssignmentClient(_m.config).QueryOpportunity(_m)
}

// QueryVolunteer queries the "volunteer" edge of the VolunteerAssignment entity.
func (_m *VolunteerAssignment) QueryVolunteer() *UserProfileQuery {
	return NewVolunteerAssignmentClient(_m.config).QueryVolunteer(_m)
}

// Update returns a builder for updating this VolunteerAssignment.
// Note that you need to call VolunteerAssignment.Unwrap() before calling this method if this VolunteerAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *VolunteerAssignment) Update() *VolunteerAssignmentUpdateOne {
	return NewVolunteerAssignmentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the VolunteerAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *VolunteerAssignment) Unwrap() *VolunteerAssignment {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: VolunteerAssignment is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *VolunteerAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("VolunteerAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hours_completed=")
	builder.WriteString(fmt.Sprintf("%v", _m.HoursCompleted))
	builder.WriteString(", ")
	builder.WriteString("hours_committed=")
	builder.WriteString(fmt.Sprintf("%v", _m.HoursCommitted))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(_m.Feedback)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rating))
	builder.WriteString(", ")
	builder.WriteString("completion_notes=")
	builder.WriteString(_m.CompletionNotes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VolunteerAssignments is a parsable slice of VolunteerAssignment.
type VolunteerAssignments []*VolunteerAssignment
