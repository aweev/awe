// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/successstory"
	"awe/ent/ent/testimonialitem"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuccessStoryUpdate is the builder for updating SuccessStory entities.
type SuccessStoryUpdate struct {
	config
	hooks    []Hook
	mutation *SuccessStoryMutation
}

// Where appends a list predicates to the SuccessStoryUpdate builder.
func (_u *SuccessStoryUpdate) Where(ps ...predicate.SuccessStory) *SuccessStoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *SuccessStoryUpdate) SetSlug(v string) *SuccessStoryUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillableSlug(v *string) *SuccessStoryUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *SuccessStoryUpdate) SetTitle(v map[string]string) *SuccessStoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetExcerpt sets the "excerpt" field.
func (_u *SuccessStoryUpdate) SetExcerpt(v map[string]string) *SuccessStoryUpdate {
	_u.mutation.SetExcerpt(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *SuccessStoryUpdate) SetContent(v map[string]interface{}) *SuccessStoryUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetQuote sets the "quote" field.
func (_u *SuccessStoryUpdate) SetQuote(v string) *SuccessStoryUpdate {
	_u.mutation.SetQuote(v)
	return _u
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillableQuote(v *string) *SuccessStoryUpdate {
	if v != nil {
		_u.SetQuote(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SuccessStoryUpdate) SetStatus(v successstory.Status) *SuccessStoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillableStatus(v *successstory.Status) *SuccessStoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *SuccessStoryUpdate) SetPublishedAt(v time.Time) *SuccessStoryUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillablePublishedAt(v *time.Time) *SuccessStoryUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *SuccessStoryUpdate) ClearPublishedAt() *SuccessStoryUpdate {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *SuccessStoryUpdate) SetImageURL(v string) *SuccessStoryUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillableImageURL(v *string) *SuccessStoryUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *SuccessStoryUpdate) ClearImageURL() *SuccessStoryUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SuccessStoryUpdate) SetUpdatedAt(v time.Time) *SuccessStoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_u *SuccessStoryUpdate) SetAuthorID(id int) *SuccessStoryUpdate {
	_u.mutation.SetAuthorID(id)
	return _u
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (_u *SuccessStoryUpdate) SetNillableAuthorID(id *int) *SuccessStoryUpdate {
	if id != nil {
		_u = _u.SetAuthorID(*id)
	}
	return _u
}

// SetAuthor sets the "author" edge to the User entity.
func (_u *SuccessStoryUpdate) SetAuthor(v *User) *SuccessStoryUpdate {
	return _u.SetAuthorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *SuccessStoryUpdate) SetProgramID(id int) *SuccessStoryUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *SuccessStoryUpdate) SetProgram(v *Program) *SuccessStoryUpdate {
	return _u.SetProgramID(v.ID)
}

// AddTestimonialIDs adds the "testimonials" edge to the TestimonialItem entity by IDs.
func (_u *SuccessStoryUpdate) AddTestimonialIDs(ids ...int) *SuccessStoryUpdate {
	_u.mutation.AddTestimonialIDs(ids...)
	return _u
}

// AddTestimonials adds the "testimonials" edges to the TestimonialItem entity.
func (_u *SuccessStoryUpdate) AddTestimonials(v ...*TestimonialItem) *SuccessStoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTestimonialIDs(ids...)
}

// Mutation returns the SuccessStoryMutation object of the builder.
func (_u *SuccessStoryUpdate) Mutation() *SuccessStoryMutation {
	return _u.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (_u *SuccessStoryUpdate) ClearAuthor() *SuccessStoryUpdate {
	_u.mutation.ClearAuthor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *SuccessStoryUpdate) ClearProgram() *SuccessStoryUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearTestimonials clears all "testimonials" edges to the TestimonialItem entity.
func (_u *SuccessStoryUpdate) ClearTestimonials() *SuccessStoryUpdate {
	_u.mutation.ClearTestimonials()
	return _u
}

// RemoveTestimonialIDs removes the "testimonials" edge to TestimonialItem entities by IDs.
func (_u *SuccessStoryUpdate) RemoveTestimonialIDs(ids ...int) *SuccessStoryUpdate {
	_u.mutation.RemoveTestimonialIDs(ids...)
	return _u
}

// RemoveTestimonials removes "testimonials" edges to TestimonialItem entities.
func (_u *SuccessStoryUpdate) RemoveTestimonials(v ...*TestimonialItem) *SuccessStoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTestimonialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SuccessStoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SuccessStoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SuccessStoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SuccessStoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SuccessStoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := successstory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SuccessStoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := successstory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SuccessStory.status": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SuccessStory.program"`)
	}
	return nil
}

func (_u *SuccessStoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(successstory.Table, successstory.Columns, sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(successstory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(successstory.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Excerpt(); ok {
		_spec.SetField(successstory.FieldExcerpt, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(successstory.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Quote(); ok {
		_spec.SetField(successstory.FieldQuote, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(successstory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(successstory.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(successstory.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(successstory.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(successstory.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(successstory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTestimonialsIDs(); len(nodes) > 0 && !_u.mutation.TestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{successstory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SuccessStoryUpdateOne is the builder for updating a single SuccessStory entity.
type SuccessStoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SuccessStoryMutation
}

// SetSlug sets the "slug" field.
func (_u *SuccessStoryUpdateOne) SetSlug(v string) *SuccessStoryUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillableSlug(v *string) *SuccessStoryUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *SuccessStoryUpdateOne) SetTitle(v map[string]string) *SuccessStoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetExcerpt sets the "excerpt" field.
func (_u *SuccessStoryUpdateOne) SetExcerpt(v map[string]string) *SuccessStoryUpdateOne {
	_u.mutation.SetExcerpt(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *SuccessStoryUpdateOne) SetContent(v map[string]interface{}) *SuccessStoryUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetQuote sets the "quote" field.
func (_u *SuccessStoryUpdateOne) SetQuote(v string) *SuccessStoryUpdateOne {
	_u.mutation.SetQuote(v)
	return _u
}

// SetNillableQuote sets the "quote" field if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillableQuote(v *string) *SuccessStoryUpdateOne {
	if v != nil {
		_u.SetQuote(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SuccessStoryUpdateOne) SetStatus(v successstory.Status) *SuccessStoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillableStatus(v *successstory.Status) *SuccessStoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *SuccessStoryUpdateOne) SetPublishedAt(v time.Time) *SuccessStoryUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillablePublishedAt(v *time.Time) *SuccessStoryUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *SuccessStoryUpdateOne) ClearPublishedAt() *SuccessStoryUpdateOne {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *SuccessStoryUpdateOne) SetImageURL(v string) *SuccessStoryUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillableImageURL(v *string) *SuccessStoryUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *SuccessStoryUpdateOne) ClearImageURL() *SuccessStoryUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SuccessStoryUpdateOne) SetUpdatedAt(v time.Time) *SuccessStoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_u *SuccessStoryUpdateOne) SetAuthorID(id int) *SuccessStoryUpdateOne {
	_u.mutation.SetAuthorID(id)
	return _u
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (_u *SuccessStoryUpdateOne) SetNillableAuthorID(id *int) *SuccessStoryUpdateOne {
	if id != nil {
		_u = _u.SetAuthorID(*id)
	}
	return _u
}

// SetAuthor sets the "author" edge to the User entity.
func (_u *SuccessStoryUpdateOne) SetAuthor(v *User) *SuccessStoryUpdateOne {
	return _u.SetAuthorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *SuccessStoryUpdateOne) SetProgramID(id int) *SuccessStoryUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *SuccessStoryUpdateOne) SetProgram(v *Program) *SuccessStoryUpdateOne {
	return _u.SetProgramID(v.ID)
}

// AddTestimonialIDs adds the "testimonials" edge to the TestimonialItem entity by IDs.
func (_u *SuccessStoryUpdateOne) AddTestimonialIDs(ids ...int) *SuccessStoryUpdateOne {
	_u.mutation.AddTestimonialIDs(ids...)
	return _u
}

// AddTestimonials adds the "testimonials" edges to the TestimonialItem entity.
func (_u *SuccessStoryUpdateOne) AddTestimonials(v ...*TestimonialItem) *SuccessStoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTestimonialIDs(ids...)
}

// Mutation returns the SuccessStoryMutation object of the builder.
func (_u *SuccessStoryUpdateOne) Mutation() *SuccessStoryMutation {
	return _u.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (_u *SuccessStoryUpdateOne) ClearAuthor() *SuccessStoryUpdateOne {
	_u.mutation.ClearAuthor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *SuccessStoryUpdateOne) ClearProgram() *SuccessStoryUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearTestimonials clears all "testimonials" edges to the TestimonialItem entity.
func (_u *SuccessStoryUpdateOne) ClearTestimonials() *SuccessStoryUpdateOne {
	_u.mutation.ClearTestimonials()
	return _u
}

// RemoveTestimonialIDs removes the "testimonials" edge to TestimonialItem entities by IDs.
func (_u *SuccessStoryUpdateOne) RemoveTestimonialIDs(ids ...int) *SuccessStoryUpdateOne {
	_u.mutation.RemoveTestimonialIDs(ids...)
	return _u
}

// RemoveTestimonials removes "testimonials" edges to TestimonialItem entities.
func (_u *SuccessStoryUpdateOne) RemoveTestimonials(v ...*TestimonialItem) *SuccessStoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTestimonialIDs(ids...)
}

// Where appends a list predicates to the SuccessStoryUpdate builder.
func (_u *SuccessStoryUpdateOne) Where(ps ...predicate.SuccessStory) *SuccessStoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SuccessStoryUpdateOne) Select(field string, fields ...string) *SuccessStoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SuccessStory entity.
func (_u *SuccessStoryUpdateOne) Save(ctx context.Context) (*SuccessStory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SuccessStoryUpdateOne) SaveX(ctx context.Context) *SuccessStory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SuccessStoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SuccessStoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SuccessStoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := successstory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SuccessStoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := successstory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SuccessStory.status": %w`, err)}
		}
	}
	if _u.mutation.ProgramCleared() && len(_u.mutation.ProgramIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SuccessStory.program"`)
	}
	return nil
}

func (_u *SuccessStoryUpdateOne) sqlSave(ctx context.Context) (_node *SuccessStory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(successstory.Table, successstory.Columns, sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SuccessStory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, successstory.FieldID)
		for _, f := range fields {
			if !successstory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != successstory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(successstory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(successstory.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Excerpt(); ok {
		_spec.SetField(successstory.FieldExcerpt, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(successstory.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Quote(); ok {
		_spec.SetField(successstory.FieldQuote, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(successstory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(successstory.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(successstory.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(successstory.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(successstory.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(successstory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTestimonialsIDs(); len(nodes) > 0 && !_u.mutation.TestimonialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SuccessStory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{successstory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
