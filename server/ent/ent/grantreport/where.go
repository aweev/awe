// Code generated by ent, DO NOT EDIT.

package grantreport

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldTitle, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldDueDate, v))
}

// SubmittedDate applies equality check predicate on the "submitted_date" field. It's identical to SubmittedDateEQ.
func SubmittedDate(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldSubmittedDate, v))
}

// DocumentURL applies equality check predicate on the "document_url" field. It's identical to DocumentURLEQ.
func DocumentURL(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldDocumentURL, v))
}

// ReportType applies equality check predicate on the "report_type" field. It's identical to ReportTypeEQ.
func ReportType(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReportType, v))
}

// ReviewedBy applies equality check predicate on the "reviewed_by" field. It's identical to ReviewedByEQ.
func ReviewedBy(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReviewedBy, v))
}

// ReviewedAt applies equality check predicate on the "reviewed_at" field. It's identical to ReviewedAtEQ.
func ReviewedAt(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReviewedAt, v))
}

// Feedback applies equality check predicate on the "feedback" field. It's identical to FeedbackEQ.
func Feedback(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldFeedback, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldIsApproved, v))
}

// NextDueDate applies equality check predicate on the "next_due_date" field. It's identical to NextDueDateEQ.
func NextDueDate(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldNextDueDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContainsFold(FieldTitle, v))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldDueDate, v))
}

// SubmittedDateEQ applies the EQ predicate on the "submitted_date" field.
func SubmittedDateEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldSubmittedDate, v))
}

// SubmittedDateNEQ applies the NEQ predicate on the "submitted_date" field.
func SubmittedDateNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldSubmittedDate, v))
}

// SubmittedDateIn applies the In predicate on the "submitted_date" field.
func SubmittedDateIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldSubmittedDate, vs...))
}

// SubmittedDateNotIn applies the NotIn predicate on the "submitted_date" field.
func SubmittedDateNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldSubmittedDate, vs...))
}

// SubmittedDateGT applies the GT predicate on the "submitted_date" field.
func SubmittedDateGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldSubmittedDate, v))
}

// SubmittedDateGTE applies the GTE predicate on the "submitted_date" field.
func SubmittedDateGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldSubmittedDate, v))
}

// SubmittedDateLT applies the LT predicate on the "submitted_date" field.
func SubmittedDateLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldSubmittedDate, v))
}

// SubmittedDateLTE applies the LTE predicate on the "submitted_date" field.
func SubmittedDateLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldSubmittedDate, v))
}

// SubmittedDateIsNil applies the IsNil predicate on the "submitted_date" field.
func SubmittedDateIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldSubmittedDate))
}

// SubmittedDateNotNil applies the NotNil predicate on the "submitted_date" field.
func SubmittedDateNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldSubmittedDate))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldStatus, vs...))
}

// DocumentURLEQ applies the EQ predicate on the "document_url" field.
func DocumentURLEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldDocumentURL, v))
}

// DocumentURLNEQ applies the NEQ predicate on the "document_url" field.
func DocumentURLNEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldDocumentURL, v))
}

// DocumentURLIn applies the In predicate on the "document_url" field.
func DocumentURLIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldDocumentURL, vs...))
}

// DocumentURLNotIn applies the NotIn predicate on the "document_url" field.
func DocumentURLNotIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldDocumentURL, vs...))
}

// DocumentURLGT applies the GT predicate on the "document_url" field.
func DocumentURLGT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldDocumentURL, v))
}

// DocumentURLGTE applies the GTE predicate on the "document_url" field.
func DocumentURLGTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldDocumentURL, v))
}

// DocumentURLLT applies the LT predicate on the "document_url" field.
func DocumentURLLT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldDocumentURL, v))
}

// DocumentURLLTE applies the LTE predicate on the "document_url" field.
func DocumentURLLTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldDocumentURL, v))
}

// DocumentURLContains applies the Contains predicate on the "document_url" field.
func DocumentURLContains(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContains(FieldDocumentURL, v))
}

// DocumentURLHasPrefix applies the HasPrefix predicate on the "document_url" field.
func DocumentURLHasPrefix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasPrefix(FieldDocumentURL, v))
}

// DocumentURLHasSuffix applies the HasSuffix predicate on the "document_url" field.
func DocumentURLHasSuffix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasSuffix(FieldDocumentURL, v))
}

// DocumentURLIsNil applies the IsNil predicate on the "document_url" field.
func DocumentURLIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldDocumentURL))
}

// DocumentURLNotNil applies the NotNil predicate on the "document_url" field.
func DocumentURLNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldDocumentURL))
}

// DocumentURLEqualFold applies the EqualFold predicate on the "document_url" field.
func DocumentURLEqualFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEqualFold(FieldDocumentURL, v))
}

// DocumentURLContainsFold applies the ContainsFold predicate on the "document_url" field.
func DocumentURLContainsFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContainsFold(FieldDocumentURL, v))
}

// ReportTypeEQ applies the EQ predicate on the "report_type" field.
func ReportTypeEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReportType, v))
}

// ReportTypeNEQ applies the NEQ predicate on the "report_type" field.
func ReportTypeNEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldReportType, v))
}

// ReportTypeIn applies the In predicate on the "report_type" field.
func ReportTypeIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldReportType, vs...))
}

// ReportTypeNotIn applies the NotIn predicate on the "report_type" field.
func ReportTypeNotIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldReportType, vs...))
}

// ReportTypeGT applies the GT predicate on the "report_type" field.
func ReportTypeGT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldReportType, v))
}

// ReportTypeGTE applies the GTE predicate on the "report_type" field.
func ReportTypeGTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldReportType, v))
}

// ReportTypeLT applies the LT predicate on the "report_type" field.
func ReportTypeLT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldReportType, v))
}

// ReportTypeLTE applies the LTE predicate on the "report_type" field.
func ReportTypeLTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldReportType, v))
}

// ReportTypeContains applies the Contains predicate on the "report_type" field.
func ReportTypeContains(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContains(FieldReportType, v))
}

// ReportTypeHasPrefix applies the HasPrefix predicate on the "report_type" field.
func ReportTypeHasPrefix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasPrefix(FieldReportType, v))
}

// ReportTypeHasSuffix applies the HasSuffix predicate on the "report_type" field.
func ReportTypeHasSuffix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasSuffix(FieldReportType, v))
}

// ReportTypeEqualFold applies the EqualFold predicate on the "report_type" field.
func ReportTypeEqualFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEqualFold(FieldReportType, v))
}

// ReportTypeContainsFold applies the ContainsFold predicate on the "report_type" field.
func ReportTypeContainsFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContainsFold(FieldReportType, v))
}

// ReviewedByEQ applies the EQ predicate on the "reviewed_by" field.
func ReviewedByEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReviewedBy, v))
}

// ReviewedByNEQ applies the NEQ predicate on the "reviewed_by" field.
func ReviewedByNEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldReviewedBy, v))
}

// ReviewedByIn applies the In predicate on the "reviewed_by" field.
func ReviewedByIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldReviewedBy, vs...))
}

// ReviewedByNotIn applies the NotIn predicate on the "reviewed_by" field.
func ReviewedByNotIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldReviewedBy, vs...))
}

// ReviewedByGT applies the GT predicate on the "reviewed_by" field.
func ReviewedByGT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldReviewedBy, v))
}

// ReviewedByGTE applies the GTE predicate on the "reviewed_by" field.
func ReviewedByGTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldReviewedBy, v))
}

// ReviewedByLT applies the LT predicate on the "reviewed_by" field.
func ReviewedByLT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldReviewedBy, v))
}

// ReviewedByLTE applies the LTE predicate on the "reviewed_by" field.
func ReviewedByLTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldReviewedBy, v))
}

// ReviewedByContains applies the Contains predicate on the "reviewed_by" field.
func ReviewedByContains(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContains(FieldReviewedBy, v))
}

// ReviewedByHasPrefix applies the HasPrefix predicate on the "reviewed_by" field.
func ReviewedByHasPrefix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasPrefix(FieldReviewedBy, v))
}

// ReviewedByHasSuffix applies the HasSuffix predicate on the "reviewed_by" field.
func ReviewedByHasSuffix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasSuffix(FieldReviewedBy, v))
}

// ReviewedByIsNil applies the IsNil predicate on the "reviewed_by" field.
func ReviewedByIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldReviewedBy))
}

// ReviewedByNotNil applies the NotNil predicate on the "reviewed_by" field.
func ReviewedByNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldReviewedBy))
}

// ReviewedByEqualFold applies the EqualFold predicate on the "reviewed_by" field.
func ReviewedByEqualFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEqualFold(FieldReviewedBy, v))
}

// ReviewedByContainsFold applies the ContainsFold predicate on the "reviewed_by" field.
func ReviewedByContainsFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContainsFold(FieldReviewedBy, v))
}

// ReviewedAtEQ applies the EQ predicate on the "reviewed_at" field.
func ReviewedAtEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldReviewedAt, v))
}

// ReviewedAtNEQ applies the NEQ predicate on the "reviewed_at" field.
func ReviewedAtNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldReviewedAt, v))
}

// ReviewedAtIn applies the In predicate on the "reviewed_at" field.
func ReviewedAtIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldReviewedAt, vs...))
}

// ReviewedAtNotIn applies the NotIn predicate on the "reviewed_at" field.
func ReviewedAtNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldReviewedAt, vs...))
}

// ReviewedAtGT applies the GT predicate on the "reviewed_at" field.
func ReviewedAtGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldReviewedAt, v))
}

// ReviewedAtGTE applies the GTE predicate on the "reviewed_at" field.
func ReviewedAtGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldReviewedAt, v))
}

// ReviewedAtLT applies the LT predicate on the "reviewed_at" field.
func ReviewedAtLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldReviewedAt, v))
}

// ReviewedAtLTE applies the LTE predicate on the "reviewed_at" field.
func ReviewedAtLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldReviewedAt, v))
}

// ReviewedAtIsNil applies the IsNil predicate on the "reviewed_at" field.
func ReviewedAtIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldReviewedAt))
}

// ReviewedAtNotNil applies the NotNil predicate on the "reviewed_at" field.
func ReviewedAtNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldReviewedAt))
}

// FeedbackEQ applies the EQ predicate on the "feedback" field.
func FeedbackEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldFeedback, v))
}

// FeedbackNEQ applies the NEQ predicate on the "feedback" field.
func FeedbackNEQ(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldFeedback, v))
}

// FeedbackIn applies the In predicate on the "feedback" field.
func FeedbackIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldFeedback, vs...))
}

// FeedbackNotIn applies the NotIn predicate on the "feedback" field.
func FeedbackNotIn(vs ...string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldFeedback, vs...))
}

// FeedbackGT applies the GT predicate on the "feedback" field.
func FeedbackGT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldFeedback, v))
}

// FeedbackGTE applies the GTE predicate on the "feedback" field.
func FeedbackGTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldFeedback, v))
}

// FeedbackLT applies the LT predicate on the "feedback" field.
func FeedbackLT(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldFeedback, v))
}

// FeedbackLTE applies the LTE predicate on the "feedback" field.
func FeedbackLTE(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldFeedback, v))
}

// FeedbackContains applies the Contains predicate on the "feedback" field.
func FeedbackContains(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContains(FieldFeedback, v))
}

// FeedbackHasPrefix applies the HasPrefix predicate on the "feedback" field.
func FeedbackHasPrefix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasPrefix(FieldFeedback, v))
}

// FeedbackHasSuffix applies the HasSuffix predicate on the "feedback" field.
func FeedbackHasSuffix(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldHasSuffix(FieldFeedback, v))
}

// FeedbackIsNil applies the IsNil predicate on the "feedback" field.
func FeedbackIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldFeedback))
}

// FeedbackNotNil applies the NotNil predicate on the "feedback" field.
func FeedbackNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldFeedback))
}

// FeedbackEqualFold applies the EqualFold predicate on the "feedback" field.
func FeedbackEqualFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEqualFold(FieldFeedback, v))
}

// FeedbackContainsFold applies the ContainsFold predicate on the "feedback" field.
func FeedbackContainsFold(v string) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldContainsFold(FieldFeedback, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldIsApproved, v))
}

// NextDueDateEQ applies the EQ predicate on the "next_due_date" field.
func NextDueDateEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldNextDueDate, v))
}

// NextDueDateNEQ applies the NEQ predicate on the "next_due_date" field.
func NextDueDateNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldNextDueDate, v))
}

// NextDueDateIn applies the In predicate on the "next_due_date" field.
func NextDueDateIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldNextDueDate, vs...))
}

// NextDueDateNotIn applies the NotIn predicate on the "next_due_date" field.
func NextDueDateNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldNextDueDate, vs...))
}

// NextDueDateGT applies the GT predicate on the "next_due_date" field.
func NextDueDateGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldNextDueDate, v))
}

// NextDueDateGTE applies the GTE predicate on the "next_due_date" field.
func NextDueDateGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldNextDueDate, v))
}

// NextDueDateLT applies the LT predicate on the "next_due_date" field.
func NextDueDateLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldNextDueDate, v))
}

// NextDueDateLTE applies the LTE predicate on the "next_due_date" field.
func NextDueDateLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldNextDueDate, v))
}

// NextDueDateIsNil applies the IsNil predicate on the "next_due_date" field.
func NextDueDateIsNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIsNull(FieldNextDueDate))
}

// NextDueDateNotNil applies the NotNil predicate on the "next_due_date" field.
func NextDueDateNotNil() predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotNull(FieldNextDueDate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GrantReport {
	return predicate.GrantReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasGrant applies the HasEdge predicate on the "grant" edge.
func HasGrant() predicate.GrantReport {
	return predicate.GrantReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GrantTable, GrantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantWith applies the HasEdge predicate on the "grant" edge with a given conditions (other predicates).
func HasGrantWith(preds ...predicate.Grant) predicate.GrantReport {
	return predicate.GrantReport(func(s *sql.Selector) {
		step := newGrantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GrantReport) predicate.GrantReport {
	return predicate.GrantReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GrantReport) predicate.GrantReport {
	return predicate.GrantReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GrantReport) predicate.GrantReport {
	return predicate.GrantReport(sql.NotPredicates(p))
}
