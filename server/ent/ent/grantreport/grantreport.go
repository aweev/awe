// Code generated by ent, DO NOT EDIT.

package grantreport

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grantreport type in the database.
	Label = "grant_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldSubmittedDate holds the string denoting the submitted_date field in the database.
	FieldSubmittedDate = "submitted_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDocumentURL holds the string denoting the document_url field in the database.
	FieldDocumentURL = "document_url"
	// FieldReportType holds the string denoting the report_type field in the database.
	FieldReportType = "report_type"
	// FieldReviewedBy holds the string denoting the reviewed_by field in the database.
	FieldReviewedBy = "reviewed_by"
	// FieldReviewedAt holds the string denoting the reviewed_at field in the database.
	FieldReviewedAt = "reviewed_at"
	// FieldFeedback holds the string denoting the feedback field in the database.
	FieldFeedback = "feedback"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldNextDueDate holds the string denoting the next_due_date field in the database.
	FieldNextDueDate = "next_due_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGrant holds the string denoting the grant edge name in mutations.
	EdgeGrant = "grant"
	// Table holds the table name of the grantreport in the database.
	Table = "grant_reports"
	// GrantTable is the table that holds the grant relation/edge.
	GrantTable = "grant_reports"
	// GrantInverseTable is the table name for the Grant entity.
	// It exists in this package in order to avoid circular dependency with the "grant" package.
	GrantInverseTable = "grants"
	// GrantColumn is the table column denoting the grant relation/edge.
	GrantColumn = "grant_reports"
)

// Columns holds all SQL columns for grantreport fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDueDate,
	FieldSubmittedDate,
	FieldStatus,
	FieldDocumentURL,
	FieldReportType,
	FieldReviewedBy,
	FieldReviewedAt,
	FieldFeedback,
	FieldIsApproved,
	FieldNextDueDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "grant_reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"grant_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReportType holds the default value on creation for the "report_type" field.
	DefaultReportType string
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusPENDING   Status = "PENDING"
	StatusSUBMITTED Status = "SUBMITTED"
	StatusREVIEWING Status = "REVIEWING"
	StatusAPPROVED  Status = "APPROVED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusSUBMITTED, StatusREVIEWING, StatusAPPROVED:
		return nil
	default:
		return fmt.Errorf("grantreport: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the GrantReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// BySubmittedDate orders the results by the submitted_date field.
func BySubmittedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmittedDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDocumentURL orders the results by the document_url field.
func ByDocumentURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentURL, opts...).ToFunc()
}

// ByReportType orders the results by the report_type field.
func ByReportType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportType, opts...).ToFunc()
}

// ByReviewedBy orders the results by the reviewed_by field.
func ByReviewedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedBy, opts...).ToFunc()
}

// ByReviewedAt orders the results by the reviewed_at field.
func ByReviewedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewedAt, opts...).ToFunc()
}

// ByFeedback orders the results by the feedback field.
func ByFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedback, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByNextDueDate orders the results by the next_due_date field.
func ByNextDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextDueDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGrantField orders the results by grant field.
func ByGrantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantStep(), sql.OrderByField(field, opts...))
	}
}
func newGrantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GrantTable, GrantColumn),
	)
}
