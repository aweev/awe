// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/event"
	"awe/ent/ent/predicate"
	"awe/ent/ent/userprofile"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (_u *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStreet1 sets the "street1" field.
func (_u *AddressUpdate) SetStreet1(v string) *AddressUpdate {
	_u.mutation.SetStreet1(v)
	return _u
}

// SetNillableStreet1 sets the "street1" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableStreet1(v *string) *AddressUpdate {
	if v != nil {
		_u.SetStreet1(*v)
	}
	return _u
}

// SetStreet2 sets the "street2" field.
func (_u *AddressUpdate) SetStreet2(v string) *AddressUpdate {
	_u.mutation.SetStreet2(v)
	return _u
}

// SetNillableStreet2 sets the "street2" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableStreet2(v *string) *AddressUpdate {
	if v != nil {
		_u.SetStreet2(*v)
	}
	return _u
}

// ClearStreet2 clears the value of the "street2" field.
func (_u *AddressUpdate) ClearStreet2() *AddressUpdate {
	_u.mutation.ClearStreet2()
	return _u
}

// SetCity sets the "city" field.
func (_u *AddressUpdate) SetCity(v string) *AddressUpdate {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableCity(v *string) *AddressUpdate {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *AddressUpdate) SetState(v string) *AddressUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableState(v *string) *AddressUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetPostalCode sets the "postal_code" field.
func (_u *AddressUpdate) SetPostalCode(v string) *AddressUpdate {
	_u.mutation.SetPostalCode(v)
	return _u
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (_u *AddressUpdate) SetNillablePostalCode(v *string) *AddressUpdate {
	if v != nil {
		_u.SetPostalCode(*v)
	}
	return _u
}

// SetCountry sets the "country" field.
func (_u *AddressUpdate) SetCountry(v string) *AddressUpdate {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *AddressUpdate) SetNillableCountry(v *string) *AddressUpdate {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// AddUserProfileIDs adds the "user_profiles" edge to the UserProfile entity by IDs.
func (_u *AddressUpdate) AddUserProfileIDs(ids ...int) *AddressUpdate {
	_u.mutation.AddUserProfileIDs(ids...)
	return _u
}

// AddUserProfiles adds the "user_profiles" edges to the UserProfile entity.
func (_u *AddressUpdate) AddUserProfiles(v ...*UserProfile) *AddressUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *AddressUpdate) AddEventIDs(ids ...int) *AddressUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *AddressUpdate) AddEvents(v ...*Event) *AddressUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (_u *AddressUpdate) Mutation() *AddressMutation {
	return _u.mutation
}

// ClearUserProfiles clears all "user_profiles" edges to the UserProfile entity.
func (_u *AddressUpdate) ClearUserProfiles() *AddressUpdate {
	_u.mutation.ClearUserProfiles()
	return _u
}

// RemoveUserProfileIDs removes the "user_profiles" edge to UserProfile entities by IDs.
func (_u *AddressUpdate) RemoveUserProfileIDs(ids ...int) *AddressUpdate {
	_u.mutation.RemoveUserProfileIDs(ids...)
	return _u
}

// RemoveUserProfiles removes "user_profiles" edges to UserProfile entities.
func (_u *AddressUpdate) RemoveUserProfiles(v ...*UserProfile) *AddressUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserProfileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *AddressUpdate) ClearEvents() *AddressUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *AddressUpdate) RemoveEventIDs(ids ...int) *AddressUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *AddressUpdate) RemoveEvents(v ...*Event) *AddressUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AddressUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AddressUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Street1(); ok {
		_spec.SetField(address.FieldStreet1, field.TypeString, value)
	}
	if value, ok := _u.mutation.Street2(); ok {
		_spec.SetField(address.FieldStreet2, field.TypeString, value)
	}
	if _u.mutation.Street2Cleared() {
		_spec.ClearField(address.FieldStreet2, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.UserProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserProfilesIDs(); len(nodes) > 0 && !_u.mutation.UserProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetStreet1 sets the "street1" field.
func (_u *AddressUpdateOne) SetStreet1(v string) *AddressUpdateOne {
	_u.mutation.SetStreet1(v)
	return _u
}

// SetNillableStreet1 sets the "street1" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableStreet1(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetStreet1(*v)
	}
	return _u
}

// SetStreet2 sets the "street2" field.
func (_u *AddressUpdateOne) SetStreet2(v string) *AddressUpdateOne {
	_u.mutation.SetStreet2(v)
	return _u
}

// SetNillableStreet2 sets the "street2" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableStreet2(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetStreet2(*v)
	}
	return _u
}

// ClearStreet2 clears the value of the "street2" field.
func (_u *AddressUpdateOne) ClearStreet2() *AddressUpdateOne {
	_u.mutation.ClearStreet2()
	return _u
}

// SetCity sets the "city" field.
func (_u *AddressUpdateOne) SetCity(v string) *AddressUpdateOne {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableCity(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *AddressUpdateOne) SetState(v string) *AddressUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableState(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetPostalCode sets the "postal_code" field.
func (_u *AddressUpdateOne) SetPostalCode(v string) *AddressUpdateOne {
	_u.mutation.SetPostalCode(v)
	return _u
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillablePostalCode(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetPostalCode(*v)
	}
	return _u
}

// SetCountry sets the "country" field.
func (_u *AddressUpdateOne) SetCountry(v string) *AddressUpdateOne {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *AddressUpdateOne) SetNillableCountry(v *string) *AddressUpdateOne {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// AddUserProfileIDs adds the "user_profiles" edge to the UserProfile entity by IDs.
func (_u *AddressUpdateOne) AddUserProfileIDs(ids ...int) *AddressUpdateOne {
	_u.mutation.AddUserProfileIDs(ids...)
	return _u
}

// AddUserProfiles adds the "user_profiles" edges to the UserProfile entity.
func (_u *AddressUpdateOne) AddUserProfiles(v ...*UserProfile) *AddressUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *AddressUpdateOne) AddEventIDs(ids ...int) *AddressUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *AddressUpdateOne) AddEvents(v ...*Event) *AddressUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (_u *AddressUpdateOne) Mutation() *AddressMutation {
	return _u.mutation
}

// ClearUserProfiles clears all "user_profiles" edges to the UserProfile entity.
func (_u *AddressUpdateOne) ClearUserProfiles() *AddressUpdateOne {
	_u.mutation.ClearUserProfiles()
	return _u
}

// RemoveUserProfileIDs removes the "user_profiles" edge to UserProfile entities by IDs.
func (_u *AddressUpdateOne) RemoveUserProfileIDs(ids ...int) *AddressUpdateOne {
	_u.mutation.RemoveUserProfileIDs(ids...)
	return _u
}

// RemoveUserProfiles removes "user_profiles" edges to UserProfile entities.
func (_u *AddressUpdateOne) RemoveUserProfiles(v ...*UserProfile) *AddressUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserProfileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *AddressUpdateOne) ClearEvents() *AddressUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *AddressUpdateOne) RemoveEventIDs(ids ...int) *AddressUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *AddressUpdateOne) RemoveEvents(v ...*Event) *AddressUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the AddressUpdate builder.
func (_u *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Address entity.
func (_u *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Street1(); ok {
		_spec.SetField(address.FieldStreet1, field.TypeString, value)
	}
	if value, ok := _u.mutation.Street2(); ok {
		_spec.SetField(address.FieldStreet2, field.TypeString, value)
	}
	if _u.mutation.Street2Cleared() {
		_spec.ClearField(address.FieldStreet2, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.UserProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserProfilesIDs(); len(nodes) > 0 && !_u.mutation.UserProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
