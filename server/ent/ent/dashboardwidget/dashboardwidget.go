// Code generated by ent, DO NOT EDIT.

package dashboardwidget

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dashboardwidget type in the database.
	Label = "dashboard_widget"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldDataSource holds the string denoting the data_source field in the database.
	FieldDataSource = "data_source"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldIsVisible holds the string denoting the is_visible field in the database.
	FieldIsVisible = "is_visible"
	// FieldRefreshRate holds the string denoting the refresh_rate field in the database.
	FieldRefreshRate = "refresh_rate"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDashboard holds the string denoting the dashboard edge name in mutations.
	EdgeDashboard = "dashboard"
	// Table holds the table name of the dashboardwidget in the database.
	Table = "dashboard_widgets"
	// DashboardTable is the table that holds the dashboard relation/edge.
	DashboardTable = "dashboard_widgets"
	// DashboardInverseTable is the table name for the AnalyticsDashboard entity.
	// It exists in this package in order to avoid circular dependency with the "analyticsdashboard" package.
	DashboardInverseTable = "analytics_dashboards"
	// DashboardColumn is the table column denoting the dashboard relation/edge.
	DashboardColumn = "analytics_dashboard_widgets"
)

// Columns holds all SQL columns for dashboardwidget fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldType,
	FieldConfig,
	FieldDataSource,
	FieldQuery,
	FieldOrder,
	FieldPosition,
	FieldIsVisible,
	FieldRefreshRate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dashboard_widgets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"analytics_dashboard_widgets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOrder holds the default value on creation for the "order" field.
	DefaultOrder int
	// DefaultIsVisible holds the default value on creation for the "is_visible" field.
	DefaultIsVisible bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the DashboardWidget queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDataSource orders the results by the data_source field.
func ByDataSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataSource, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByIsVisible orders the results by the is_visible field.
func ByIsVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVisible, opts...).ToFunc()
}

// ByRefreshRate orders the results by the refresh_rate field.
func ByRefreshRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshRate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDashboardField orders the results by dashboard field.
func ByDashboardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDashboardStep(), sql.OrderByField(field, opts...))
	}
}
func newDashboardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DashboardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DashboardTable, DashboardColumn),
	)
}
