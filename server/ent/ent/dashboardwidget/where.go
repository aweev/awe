// Code generated by ent, DO NOT EDIT.

package dashboardwidget

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldType, v))
}

// DataSource applies equality check predicate on the "data_source" field. It's identical to DataSourceEQ.
func DataSource(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldDataSource, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldOrder, v))
}

// IsVisible applies equality check predicate on the "is_visible" field. It's identical to IsVisibleEQ.
func IsVisible(v bool) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldIsVisible, v))
}

// RefreshRate applies equality check predicate on the "refresh_rate" field. It's identical to RefreshRateEQ.
func RefreshRate(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldRefreshRate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldContainsFold(FieldType, v))
}

// DataSourceEQ applies the EQ predicate on the "data_source" field.
func DataSourceEQ(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldDataSource, v))
}

// DataSourceNEQ applies the NEQ predicate on the "data_source" field.
func DataSourceNEQ(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldDataSource, v))
}

// DataSourceIn applies the In predicate on the "data_source" field.
func DataSourceIn(vs ...string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldDataSource, vs...))
}

// DataSourceNotIn applies the NotIn predicate on the "data_source" field.
func DataSourceNotIn(vs ...string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldDataSource, vs...))
}

// DataSourceGT applies the GT predicate on the "data_source" field.
func DataSourceGT(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldDataSource, v))
}

// DataSourceGTE applies the GTE predicate on the "data_source" field.
func DataSourceGTE(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldDataSource, v))
}

// DataSourceLT applies the LT predicate on the "data_source" field.
func DataSourceLT(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldDataSource, v))
}

// DataSourceLTE applies the LTE predicate on the "data_source" field.
func DataSourceLTE(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldDataSource, v))
}

// DataSourceContains applies the Contains predicate on the "data_source" field.
func DataSourceContains(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldContains(FieldDataSource, v))
}

// DataSourceHasPrefix applies the HasPrefix predicate on the "data_source" field.
func DataSourceHasPrefix(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldHasPrefix(FieldDataSource, v))
}

// DataSourceHasSuffix applies the HasSuffix predicate on the "data_source" field.
func DataSourceHasSuffix(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldHasSuffix(FieldDataSource, v))
}

// DataSourceEqualFold applies the EqualFold predicate on the "data_source" field.
func DataSourceEqualFold(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEqualFold(FieldDataSource, v))
}

// DataSourceContainsFold applies the ContainsFold predicate on the "data_source" field.
func DataSourceContainsFold(v string) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldContainsFold(FieldDataSource, v))
}

// QueryIsNil applies the IsNil predicate on the "query" field.
func QueryIsNil() predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIsNull(FieldQuery))
}

// QueryNotNil applies the NotNil predicate on the "query" field.
func QueryNotNil() predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotNull(FieldQuery))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldOrder, v))
}

// IsVisibleEQ applies the EQ predicate on the "is_visible" field.
func IsVisibleEQ(v bool) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldIsVisible, v))
}

// IsVisibleNEQ applies the NEQ predicate on the "is_visible" field.
func IsVisibleNEQ(v bool) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldIsVisible, v))
}

// RefreshRateEQ applies the EQ predicate on the "refresh_rate" field.
func RefreshRateEQ(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldRefreshRate, v))
}

// RefreshRateNEQ applies the NEQ predicate on the "refresh_rate" field.
func RefreshRateNEQ(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldRefreshRate, v))
}

// RefreshRateIn applies the In predicate on the "refresh_rate" field.
func RefreshRateIn(vs ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldRefreshRate, vs...))
}

// RefreshRateNotIn applies the NotIn predicate on the "refresh_rate" field.
func RefreshRateNotIn(vs ...int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldRefreshRate, vs...))
}

// RefreshRateGT applies the GT predicate on the "refresh_rate" field.
func RefreshRateGT(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldRefreshRate, v))
}

// RefreshRateGTE applies the GTE predicate on the "refresh_rate" field.
func RefreshRateGTE(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldRefreshRate, v))
}

// RefreshRateLT applies the LT predicate on the "refresh_rate" field.
func RefreshRateLT(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldRefreshRate, v))
}

// RefreshRateLTE applies the LTE predicate on the "refresh_rate" field.
func RefreshRateLTE(v int) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldRefreshRate, v))
}

// RefreshRateIsNil applies the IsNil predicate on the "refresh_rate" field.
func RefreshRateIsNil() predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIsNull(FieldRefreshRate))
}

// RefreshRateNotNil applies the NotNil predicate on the "refresh_rate" field.
func RefreshRateNotNil() predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotNull(FieldRefreshRate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDashboard applies the HasEdge predicate on the "dashboard" edge.
func HasDashboard() predicate.DashboardWidget {
	return predicate.DashboardWidget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DashboardTable, DashboardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDashboardWith applies the HasEdge predicate on the "dashboard" edge with a given conditions (other predicates).
func HasDashboardWith(preds ...predicate.AnalyticsDashboard) predicate.DashboardWidget {
	return predicate.DashboardWidget(func(s *sql.Selector) {
		step := newDashboardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DashboardWidget) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DashboardWidget) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DashboardWidget) predicate.DashboardWidget {
	return predicate.DashboardWidget(sql.NotPredicates(p))
}
