// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/vote"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AgendaItem is the model entity for the AgendaItem schema.
type AgendaItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Presenter holds the value of the "presenter" field.
	Presenter string `json:"presenter,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgendaItemQuery when eager-loading is set.
	Edges        AgendaItemEdges `json:"edges"`
	agenda_items *int
	selectValues sql.SelectValues
}

// AgendaItemEdges holds the relations/edges for other nodes in the graph.
type AgendaItemEdges struct {
	// Agenda holds the value of the agenda edge.
	Agenda *Agenda `json:"agenda,omitempty"`
	// Vote holds the value of the vote edge.
	Vote *Vote `json:"vote,omitempty"`
	// ActionItems holds the value of the action_items edge.
	ActionItems []*ActionItem `json:"action_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AgendaOrErr returns the Agenda value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgendaItemEdges) AgendaOrErr() (*Agenda, error) {
	if e.Agenda != nil {
		return e.Agenda, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agenda.Label}
	}
	return nil, &NotLoadedError{edge: "agenda"}
}

// VoteOrErr returns the Vote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgendaItemEdges) VoteOrErr() (*Vote, error) {
	if e.Vote != nil {
		return e.Vote, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vote.Label}
	}
	return nil, &NotLoadedError{edge: "vote"}
}

// ActionItemsOrErr returns the ActionItems value or an error if the edge
// was not loaded in eager-loading.
func (e AgendaItemEdges) ActionItemsOrErr() ([]*ActionItem, error) {
	if e.loadedTypes[2] {
		return e.ActionItems, nil
	}
	return nil, &NotLoadedError{edge: "action_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AgendaItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agendaitem.FieldID, agendaitem.FieldOrder, agendaitem.FieldDuration:
			values[i] = new(sql.NullInt64)
		case agendaitem.FieldTitle, agendaitem.FieldPresenter, agendaitem.FieldNotes:
			values[i] = new(sql.NullString)
		case agendaitem.ForeignKeys[0]: // agenda_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AgendaItem fields.
func (_m *AgendaItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agendaitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case agendaitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case agendaitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case agendaitem.FieldPresenter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field presenter", values[i])
			} else if value.Valid {
				_m.Presenter = value.String
			}
		case agendaitem.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				_m.Notes = value.String
			}
		case agendaitem.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = int(value.Int64)
			}
		case agendaitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agenda_items", value)
			} else if value.Valid {
				_m.agenda_items = new(int)
				*_m.agenda_items = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AgendaItem.
// This includes values selected through modifiers, order, etc.
func (_m *AgendaItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAgenda queries the "agenda" edge of the AgendaItem entity.
func (_m *AgendaItem) QueryAgenda() *AgendaQuery {
	return NewAgendaItemClient(_m.config).QueryAgenda(_m)
}

// QueryVote queries the "vote" edge of the AgendaItem entity.
func (_m *AgendaItem) QueryVote() *VoteQuery {
	return NewAgendaItemClient(_m.config).QueryVote(_m)
}

// QueryActionItems queries the "action_items" edge of the AgendaItem entity.
func (_m *AgendaItem) QueryActionItems() *ActionItemQuery {
	return NewAgendaItemClient(_m.config).QueryActionItems(_m)
}

// Update returns a builder for updating this AgendaItem.
// Note that you need to call AgendaItem.Unwrap() before calling this method if this AgendaItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AgendaItem) Update() *AgendaItemUpdateOne {
	return NewAgendaItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AgendaItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AgendaItem) Unwrap() *AgendaItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AgendaItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AgendaItem) String() string {
	var builder strings.Builder
	builder.WriteString("AgendaItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("presenter=")
	builder.WriteString(_m.Presenter)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(_m.Notes)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Duration))
	builder.WriteByte(')')
	return builder.String()
}

// AgendaItems is a parsable slice of AgendaItem.
type AgendaItems []*AgendaItem
