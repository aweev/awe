// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/systemlog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemLogUpdate is the builder for updating SystemLog entities.
type SystemLogUpdate struct {
	config
	hooks    []Hook
	mutation *SystemLogMutation
}

// Where appends a list predicates to the SystemLogUpdate builder.
func (_u *SystemLogUpdate) Where(ps ...predicate.SystemLog) *SystemLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *SystemLogUpdate) SetTimestamp(v time.Time) *SystemLogUpdate {
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *SystemLogUpdate) SetNillableTimestamp(v *time.Time) *SystemLogUpdate {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *SystemLogUpdate) SetLevel(v systemlog.Level) *SystemLogUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *SystemLogUpdate) SetNillableLevel(v *systemlog.Level) *SystemLogUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *SystemLogUpdate) SetMessage(v string) *SystemLogUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *SystemLogUpdate) SetNillableMessage(v *string) *SystemLogUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SystemLogUpdate) SetMetadata(v map[string]interface{}) *SystemLogUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SystemLogUpdate) ClearMetadata() *SystemLogUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *SystemLogUpdate) SetUserID(v string) *SystemLogUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *SystemLogUpdate) SetNillableUserID(v *string) *SystemLogUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *SystemLogUpdate) ClearUserID() *SystemLogUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetContext sets the "context" field.
func (_u *SystemLogUpdate) SetContext(v string) *SystemLogUpdate {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SystemLogUpdate) SetNillableContext(v *string) *SystemLogUpdate {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SystemLogUpdate) ClearContext() *SystemLogUpdate {
	_u.mutation.ClearContext()
	return _u
}

// Mutation returns the SystemLogMutation object of the builder.
func (_u *SystemLogUpdate) Mutation() *SystemLogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SystemLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SystemLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SystemLogUpdate) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := systemlog.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemLog.level": %w`, err)}
		}
	}
	return nil
}

func (_u *SystemLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemlog.Table, systemlog.Columns, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(systemlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(systemlog.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(systemlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(systemlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(systemlog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(systemlog.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(systemlog.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(systemlog.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(systemlog.FieldContext, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SystemLogUpdateOne is the builder for updating a single SystemLog entity.
type SystemLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemLogMutation
}

// SetTimestamp sets the "timestamp" field.
func (_u *SystemLogUpdateOne) SetTimestamp(v time.Time) *SystemLogUpdateOne {
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *SystemLogUpdateOne) SetNillableTimestamp(v *time.Time) *SystemLogUpdateOne {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *SystemLogUpdateOne) SetLevel(v systemlog.Level) *SystemLogUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *SystemLogUpdateOne) SetNillableLevel(v *systemlog.Level) *SystemLogUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *SystemLogUpdateOne) SetMessage(v string) *SystemLogUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *SystemLogUpdateOne) SetNillableMessage(v *string) *SystemLogUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SystemLogUpdateOne) SetMetadata(v map[string]interface{}) *SystemLogUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SystemLogUpdateOne) ClearMetadata() *SystemLogUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *SystemLogUpdateOne) SetUserID(v string) *SystemLogUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *SystemLogUpdateOne) SetNillableUserID(v *string) *SystemLogUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *SystemLogUpdateOne) ClearUserID() *SystemLogUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetContext sets the "context" field.
func (_u *SystemLogUpdateOne) SetContext(v string) *SystemLogUpdateOne {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SystemLogUpdateOne) SetNillableContext(v *string) *SystemLogUpdateOne {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SystemLogUpdateOne) ClearContext() *SystemLogUpdateOne {
	_u.mutation.ClearContext()
	return _u
}

// Mutation returns the SystemLogMutation object of the builder.
func (_u *SystemLogUpdateOne) Mutation() *SystemLogMutation {
	return _u.mutation
}

// Where appends a list predicates to the SystemLogUpdate builder.
func (_u *SystemLogUpdateOne) Where(ps ...predicate.SystemLog) *SystemLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SystemLogUpdateOne) Select(field string, fields ...string) *SystemLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SystemLog entity.
func (_u *SystemLogUpdateOne) Save(ctx context.Context) (*SystemLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemLogUpdateOne) SaveX(ctx context.Context) *SystemLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SystemLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SystemLogUpdateOne) check() error {
	if v, ok := _u.mutation.Level(); ok {
		if err := systemlog.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemLog.level": %w`, err)}
		}
	}
	return nil
}

func (_u *SystemLogUpdateOne) sqlSave(ctx context.Context) (_node *SystemLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemlog.Table, systemlog.Columns, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemlog.FieldID)
		for _, f := range fields {
			if !systemlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(systemlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(systemlog.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(systemlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(systemlog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(systemlog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(systemlog.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(systemlog.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(systemlog.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(systemlog.FieldContext, field.TypeString)
	}
	_node = &SystemLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
