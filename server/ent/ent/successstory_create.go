// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/successstory"
	"awe/ent/ent/testimonialitem"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuccessStoryCreate is the builder for creating a SuccessStory entity.
type SuccessStoryCreate struct {
	config
	mutation *SuccessStoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *SuccessStoryCreate) SetSlug(v string) *SuccessStoryCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *SuccessStoryCreate) SetTitle(v map[string]string) *SuccessStoryCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetExcerpt sets the "excerpt" field.
func (_c *SuccessStoryCreate) SetExcerpt(v map[string]string) *SuccessStoryCreate {
	_c.mutation.SetExcerpt(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *SuccessStoryCreate) SetContent(v map[string]interface{}) *SuccessStoryCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetQuote sets the "quote" field.
func (_c *SuccessStoryCreate) SetQuote(v string) *SuccessStoryCreate {
	_c.mutation.SetQuote(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *SuccessStoryCreate) SetStatus(v successstory.Status) *SuccessStoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillableStatus(v *successstory.Status) *SuccessStoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPublishedAt sets the "published_at" field.
func (_c *SuccessStoryCreate) SetPublishedAt(v time.Time) *SuccessStoryCreate {
	_c.mutation.SetPublishedAt(v)
	return _c
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillablePublishedAt(v *time.Time) *SuccessStoryCreate {
	if v != nil {
		_c.SetPublishedAt(*v)
	}
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *SuccessStoryCreate) SetImageURL(v string) *SuccessStoryCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillableImageURL(v *string) *SuccessStoryCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SuccessStoryCreate) SetCreatedAt(v time.Time) *SuccessStoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillableCreatedAt(v *time.Time) *SuccessStoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SuccessStoryCreate) SetUpdatedAt(v time.Time) *SuccessStoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillableUpdatedAt(v *time.Time) *SuccessStoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_c *SuccessStoryCreate) SetAuthorID(id int) *SuccessStoryCreate {
	_c.mutation.SetAuthorID(id)
	return _c
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (_c *SuccessStoryCreate) SetNillableAuthorID(id *int) *SuccessStoryCreate {
	if id != nil {
		_c = _c.SetAuthorID(*id)
	}
	return _c
}

// SetAuthor sets the "author" edge to the User entity.
func (_c *SuccessStoryCreate) SetAuthor(v *User) *SuccessStoryCreate {
	return _c.SetAuthorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *SuccessStoryCreate) SetProgramID(id int) *SuccessStoryCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *SuccessStoryCreate) SetProgram(v *Program) *SuccessStoryCreate {
	return _c.SetProgramID(v.ID)
}

// AddTestimonialIDs adds the "testimonials" edge to the TestimonialItem entity by IDs.
func (_c *SuccessStoryCreate) AddTestimonialIDs(ids ...int) *SuccessStoryCreate {
	_c.mutation.AddTestimonialIDs(ids...)
	return _c
}

// AddTestimonials adds the "testimonials" edges to the TestimonialItem entity.
func (_c *SuccessStoryCreate) AddTestimonials(v ...*TestimonialItem) *SuccessStoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTestimonialIDs(ids...)
}

// Mutation returns the SuccessStoryMutation object of the builder.
func (_c *SuccessStoryCreate) Mutation() *SuccessStoryMutation {
	return _c.mutation
}

// Save creates the SuccessStory in the database.
func (_c *SuccessStoryCreate) Save(ctx context.Context) (*SuccessStory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SuccessStoryCreate) SaveX(ctx context.Context) *SuccessStory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SuccessStoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SuccessStoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SuccessStoryCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := successstory.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := successstory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := successstory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SuccessStoryCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "SuccessStory.slug"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SuccessStory.title"`)}
	}
	if _, ok := _c.mutation.Excerpt(); !ok {
		return &ValidationError{Name: "excerpt", err: errors.New(`ent: missing required field "SuccessStory.excerpt"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "SuccessStory.content"`)}
	}
	if _, ok := _c.mutation.Quote(); !ok {
		return &ValidationError{Name: "quote", err: errors.New(`ent: missing required field "SuccessStory.quote"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SuccessStory.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := successstory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SuccessStory.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SuccessStory.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SuccessStory.updated_at"`)}
	}
	if len(_c.mutation.ProgramIDs()) == 0 {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "SuccessStory.program"`)}
	}
	return nil
}

func (_c *SuccessStoryCreate) sqlSave(ctx context.Context) (*SuccessStory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SuccessStoryCreate) createSpec() (*SuccessStory, *sqlgraph.CreateSpec) {
	var (
		_node = &SuccessStory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(successstory.Table, sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(successstory.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(successstory.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Excerpt(); ok {
		_spec.SetField(successstory.FieldExcerpt, field.TypeJSON, value)
		_node.Excerpt = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(successstory.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.Quote(); ok {
		_spec.SetField(successstory.FieldQuote, field.TypeString, value)
		_node.Quote = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(successstory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.PublishedAt(); ok {
		_spec.SetField(successstory.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(successstory.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(successstory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(successstory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_success_stories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_success_stories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TestimonialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonialitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SuccessStory.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SuccessStoryUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *SuccessStoryCreate) OnConflict(opts ...sql.ConflictOption) *SuccessStoryUpsertOne {
	_c.conflict = opts
	return &SuccessStoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SuccessStoryCreate) OnConflictColumns(columns ...string) *SuccessStoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SuccessStoryUpsertOne{
		create: _c,
	}
}

type (
	// SuccessStoryUpsertOne is the builder for "upsert"-ing
	//  one SuccessStory node.
	SuccessStoryUpsertOne struct {
		create *SuccessStoryCreate
	}

	// SuccessStoryUpsert is the "OnConflict" setter.
	SuccessStoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *SuccessStoryUpsert) SetSlug(v string) *SuccessStoryUpsert {
	u.Set(successstory.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateSlug() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *SuccessStoryUpsert) SetTitle(v map[string]string) *SuccessStoryUpsert {
	u.Set(successstory.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateTitle() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldTitle)
	return u
}

// SetExcerpt sets the "excerpt" field.
func (u *SuccessStoryUpsert) SetExcerpt(v map[string]string) *SuccessStoryUpsert {
	u.Set(successstory.FieldExcerpt, v)
	return u
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateExcerpt() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldExcerpt)
	return u
}

// SetContent sets the "content" field.
func (u *SuccessStoryUpsert) SetContent(v map[string]interface{}) *SuccessStoryUpsert {
	u.Set(successstory.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateContent() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldContent)
	return u
}

// SetQuote sets the "quote" field.
func (u *SuccessStoryUpsert) SetQuote(v string) *SuccessStoryUpsert {
	u.Set(successstory.FieldQuote, v)
	return u
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateQuote() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldQuote)
	return u
}

// SetStatus sets the "status" field.
func (u *SuccessStoryUpsert) SetStatus(v successstory.Status) *SuccessStoryUpsert {
	u.Set(successstory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateStatus() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldStatus)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *SuccessStoryUpsert) SetPublishedAt(v time.Time) *SuccessStoryUpsert {
	u.Set(successstory.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdatePublishedAt() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldPublishedAt)
	return u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *SuccessStoryUpsert) ClearPublishedAt() *SuccessStoryUpsert {
	u.SetNull(successstory.FieldPublishedAt)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *SuccessStoryUpsert) SetImageURL(v string) *SuccessStoryUpsert {
	u.Set(successstory.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateImageURL() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *SuccessStoryUpsert) ClearImageURL() *SuccessStoryUpsert {
	u.SetNull(successstory.FieldImageURL)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SuccessStoryUpsert) SetUpdatedAt(v time.Time) *SuccessStoryUpsert {
	u.Set(successstory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SuccessStoryUpsert) UpdateUpdatedAt() *SuccessStoryUpsert {
	u.SetExcluded(successstory.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SuccessStoryUpsertOne) UpdateNewValues() *SuccessStoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(successstory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SuccessStoryUpsertOne) Ignore() *SuccessStoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SuccessStoryUpsertOne) DoNothing() *SuccessStoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SuccessStoryCreate.OnConflict
// documentation for more info.
func (u *SuccessStoryUpsertOne) Update(set func(*SuccessStoryUpsert)) *SuccessStoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SuccessStoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *SuccessStoryUpsertOne) SetSlug(v string) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateSlug() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *SuccessStoryUpsertOne) SetTitle(v map[string]string) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateTitle() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateTitle()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *SuccessStoryUpsertOne) SetExcerpt(v map[string]string) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateExcerpt() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateExcerpt()
	})
}

// SetContent sets the "content" field.
func (u *SuccessStoryUpsertOne) SetContent(v map[string]interface{}) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateContent() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateContent()
	})
}

// SetQuote sets the "quote" field.
func (u *SuccessStoryUpsertOne) SetQuote(v string) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateQuote() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateQuote()
	})
}

// SetStatus sets the "status" field.
func (u *SuccessStoryUpsertOne) SetStatus(v successstory.Status) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateStatus() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *SuccessStoryUpsertOne) SetPublishedAt(v time.Time) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdatePublishedAt() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *SuccessStoryUpsertOne) ClearPublishedAt() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.ClearPublishedAt()
	})
}

// SetImageURL sets the "image_url" field.
func (u *SuccessStoryUpsertOne) SetImageURL(v string) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateImageURL() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *SuccessStoryUpsertOne) ClearImageURL() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.ClearImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SuccessStoryUpsertOne) SetUpdatedAt(v time.Time) *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SuccessStoryUpsertOne) UpdateUpdatedAt() *SuccessStoryUpsertOne {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SuccessStoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SuccessStoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SuccessStoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SuccessStoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SuccessStoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SuccessStoryCreateBulk is the builder for creating many SuccessStory entities in bulk.
type SuccessStoryCreateBulk struct {
	config
	err      error
	builders []*SuccessStoryCreate
	conflict []sql.ConflictOption
}

// Save creates the SuccessStory entities in the database.
func (_c *SuccessStoryCreateBulk) Save(ctx context.Context) ([]*SuccessStory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SuccessStory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SuccessStoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SuccessStoryCreateBulk) SaveX(ctx context.Context) []*SuccessStory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SuccessStoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SuccessStoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SuccessStory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SuccessStoryUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *SuccessStoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SuccessStoryUpsertBulk {
	_c.conflict = opts
	return &SuccessStoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SuccessStoryCreateBulk) OnConflictColumns(columns ...string) *SuccessStoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SuccessStoryUpsertBulk{
		create: _c,
	}
}

// SuccessStoryUpsertBulk is the builder for "upsert"-ing
// a bulk of SuccessStory nodes.
type SuccessStoryUpsertBulk struct {
	create *SuccessStoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SuccessStoryUpsertBulk) UpdateNewValues() *SuccessStoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(successstory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SuccessStory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SuccessStoryUpsertBulk) Ignore() *SuccessStoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SuccessStoryUpsertBulk) DoNothing() *SuccessStoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SuccessStoryCreateBulk.OnConflict
// documentation for more info.
func (u *SuccessStoryUpsertBulk) Update(set func(*SuccessStoryUpsert)) *SuccessStoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SuccessStoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *SuccessStoryUpsertBulk) SetSlug(v string) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateSlug() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *SuccessStoryUpsertBulk) SetTitle(v map[string]string) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateTitle() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateTitle()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *SuccessStoryUpsertBulk) SetExcerpt(v map[string]string) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateExcerpt() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateExcerpt()
	})
}

// SetContent sets the "content" field.
func (u *SuccessStoryUpsertBulk) SetContent(v map[string]interface{}) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateContent() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateContent()
	})
}

// SetQuote sets the "quote" field.
func (u *SuccessStoryUpsertBulk) SetQuote(v string) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetQuote(v)
	})
}

// UpdateQuote sets the "quote" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateQuote() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateQuote()
	})
}

// SetStatus sets the "status" field.
func (u *SuccessStoryUpsertBulk) SetStatus(v successstory.Status) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateStatus() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *SuccessStoryUpsertBulk) SetPublishedAt(v time.Time) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdatePublishedAt() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *SuccessStoryUpsertBulk) ClearPublishedAt() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.ClearPublishedAt()
	})
}

// SetImageURL sets the "image_url" field.
func (u *SuccessStoryUpsertBulk) SetImageURL(v string) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateImageURL() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *SuccessStoryUpsertBulk) ClearImageURL() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.ClearImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SuccessStoryUpsertBulk) SetUpdatedAt(v time.Time) *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SuccessStoryUpsertBulk) UpdateUpdatedAt() *SuccessStoryUpsertBulk {
	return u.Update(func(s *SuccessStoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SuccessStoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SuccessStoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SuccessStoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SuccessStoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
