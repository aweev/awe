// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImpactDataPointUpdate is the builder for updating ImpactDataPoint entities.
type ImpactDataPointUpdate struct {
	config
	hooks    []Hook
	mutation *ImpactDataPointMutation
}

// Where appends a list predicates to the ImpactDataPointUpdate builder.
func (_u *ImpactDataPointUpdate) Where(ps ...predicate.ImpactDataPoint) *ImpactDataPointUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetValue sets the "value" field.
func (_u *ImpactDataPointUpdate) SetValue(v float64) *ImpactDataPointUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableValue(v *float64) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *ImpactDataPointUpdate) AddValue(v float64) *ImpactDataPointUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// SetRecordedAt sets the "recorded_at" field.
func (_u *ImpactDataPointUpdate) SetRecordedAt(v time.Time) *ImpactDataPointUpdate {
	_u.mutation.SetRecordedAt(v)
	return _u
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableRecordedAt(v *time.Time) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetRecordedAt(*v)
	}
	return _u
}

// SetRecordedBy sets the "recorded_by" field.
func (_u *ImpactDataPointUpdate) SetRecordedBy(v string) *ImpactDataPointUpdate {
	_u.mutation.SetRecordedBy(v)
	return _u
}

// SetNillableRecordedBy sets the "recorded_by" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableRecordedBy(v *string) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetRecordedBy(*v)
	}
	return _u
}

// ClearRecordedBy clears the value of the "recorded_by" field.
func (_u *ImpactDataPointUpdate) ClearRecordedBy() *ImpactDataPointUpdate {
	_u.mutation.ClearRecordedBy()
	return _u
}

// SetPeriod sets the "period" field.
func (_u *ImpactDataPointUpdate) SetPeriod(v string) *ImpactDataPointUpdate {
	_u.mutation.SetPeriod(v)
	return _u
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillablePeriod(v *string) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetPeriod(*v)
	}
	return _u
}

// ClearPeriod clears the value of the "period" field.
func (_u *ImpactDataPointUpdate) ClearPeriod() *ImpactDataPointUpdate {
	_u.mutation.ClearPeriod()
	return _u
}

// SetNotes sets the "notes" field.
func (_u *ImpactDataPointUpdate) SetNotes(v string) *ImpactDataPointUpdate {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableNotes(v *string) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *ImpactDataPointUpdate) ClearNotes() *ImpactDataPointUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// SetSource sets the "source" field.
func (_u *ImpactDataPointUpdate) SetSource(v string) *ImpactDataPointUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableSource(v *string) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ImpactDataPointUpdate) ClearSource() *ImpactDataPointUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *ImpactDataPointUpdate) SetIsVerified(v bool) *ImpactDataPointUpdate {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableIsVerified(v *bool) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetVerifiedBy sets the "verified_by" field.
func (_u *ImpactDataPointUpdate) SetVerifiedBy(v string) *ImpactDataPointUpdate {
	_u.mutation.SetVerifiedBy(v)
	return _u
}

// SetNillableVerifiedBy sets the "verified_by" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableVerifiedBy(v *string) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetVerifiedBy(*v)
	}
	return _u
}

// ClearVerifiedBy clears the value of the "verified_by" field.
func (_u *ImpactDataPointUpdate) ClearVerifiedBy() *ImpactDataPointUpdate {
	_u.mutation.ClearVerifiedBy()
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *ImpactDataPointUpdate) SetVerifiedAt(v time.Time) *ImpactDataPointUpdate {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *ImpactDataPointUpdate) SetNillableVerifiedAt(v *time.Time) *ImpactDataPointUpdate {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *ImpactDataPointUpdate) ClearVerifiedAt() *ImpactDataPointUpdate {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpactDataPointUpdate) SetUpdatedAt(v time.Time) *ImpactDataPointUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMetricID sets the "metric" edge to the ImpactMetric entity by ID.
func (_u *ImpactDataPointUpdate) SetMetricID(id int) *ImpactDataPointUpdate {
	_u.mutation.SetMetricID(id)
	return _u
}

// SetMetric sets the "metric" edge to the ImpactMetric entity.
func (_u *ImpactDataPointUpdate) SetMetric(v *ImpactMetric) *ImpactDataPointUpdate {
	return _u.SetMetricID(v.ID)
}

// Mutation returns the ImpactDataPointMutation object of the builder.
func (_u *ImpactDataPointUpdate) Mutation() *ImpactDataPointMutation {
	return _u.mutation
}

// ClearMetric clears the "metric" edge to the ImpactMetric entity.
func (_u *ImpactDataPointUpdate) ClearMetric() *ImpactDataPointUpdate {
	_u.mutation.ClearMetric()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImpactDataPointUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpactDataPointUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImpactDataPointUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpactDataPointUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpactDataPointUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := impactdatapoint.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpactDataPointUpdate) check() error {
	if _u.mutation.MetricCleared() && len(_u.mutation.MetricIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImpactDataPoint.metric"`)
	}
	return nil
}

func (_u *ImpactDataPointUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impactdatapoint.Table, impactdatapoint.Columns, sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(impactdatapoint.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(impactdatapoint.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.RecordedAt(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RecordedBy(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedBy, field.TypeString, value)
	}
	if _u.mutation.RecordedByCleared() {
		_spec.ClearField(impactdatapoint.FieldRecordedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Period(); ok {
		_spec.SetField(impactdatapoint.FieldPeriod, field.TypeString, value)
	}
	if _u.mutation.PeriodCleared() {
		_spec.ClearField(impactdatapoint.FieldPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(impactdatapoint.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(impactdatapoint.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(impactdatapoint.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(impactdatapoint.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(impactdatapoint.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedBy(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedBy, field.TypeString, value)
	}
	if _u.mutation.VerifiedByCleared() {
		_spec.ClearField(impactdatapoint.FieldVerifiedBy, field.TypeString)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(impactdatapoint.FieldVerifiedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impactdatapoint.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impactdatapoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImpactDataPointUpdateOne is the builder for updating a single ImpactDataPoint entity.
type ImpactDataPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImpactDataPointMutation
}

// SetValue sets the "value" field.
func (_u *ImpactDataPointUpdateOne) SetValue(v float64) *ImpactDataPointUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableValue(v *float64) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *ImpactDataPointUpdateOne) AddValue(v float64) *ImpactDataPointUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// SetRecordedAt sets the "recorded_at" field.
func (_u *ImpactDataPointUpdateOne) SetRecordedAt(v time.Time) *ImpactDataPointUpdateOne {
	_u.mutation.SetRecordedAt(v)
	return _u
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableRecordedAt(v *time.Time) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetRecordedAt(*v)
	}
	return _u
}

// SetRecordedBy sets the "recorded_by" field.
func (_u *ImpactDataPointUpdateOne) SetRecordedBy(v string) *ImpactDataPointUpdateOne {
	_u.mutation.SetRecordedBy(v)
	return _u
}

// SetNillableRecordedBy sets the "recorded_by" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableRecordedBy(v *string) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetRecordedBy(*v)
	}
	return _u
}

// ClearRecordedBy clears the value of the "recorded_by" field.
func (_u *ImpactDataPointUpdateOne) ClearRecordedBy() *ImpactDataPointUpdateOne {
	_u.mutation.ClearRecordedBy()
	return _u
}

// SetPeriod sets the "period" field.
func (_u *ImpactDataPointUpdateOne) SetPeriod(v string) *ImpactDataPointUpdateOne {
	_u.mutation.SetPeriod(v)
	return _u
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillablePeriod(v *string) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetPeriod(*v)
	}
	return _u
}

// ClearPeriod clears the value of the "period" field.
func (_u *ImpactDataPointUpdateOne) ClearPeriod() *ImpactDataPointUpdateOne {
	_u.mutation.ClearPeriod()
	return _u
}

// SetNotes sets the "notes" field.
func (_u *ImpactDataPointUpdateOne) SetNotes(v string) *ImpactDataPointUpdateOne {
	_u.mutation.SetNotes(v)
	return _u
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableNotes(v *string) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetNotes(*v)
	}
	return _u
}

// ClearNotes clears the value of the "notes" field.
func (_u *ImpactDataPointUpdateOne) ClearNotes() *ImpactDataPointUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// SetSource sets the "source" field.
func (_u *ImpactDataPointUpdateOne) SetSource(v string) *ImpactDataPointUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableSource(v *string) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ImpactDataPointUpdateOne) ClearSource() *ImpactDataPointUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *ImpactDataPointUpdateOne) SetIsVerified(v bool) *ImpactDataPointUpdateOne {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableIsVerified(v *bool) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetVerifiedBy sets the "verified_by" field.
func (_u *ImpactDataPointUpdateOne) SetVerifiedBy(v string) *ImpactDataPointUpdateOne {
	_u.mutation.SetVerifiedBy(v)
	return _u
}

// SetNillableVerifiedBy sets the "verified_by" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableVerifiedBy(v *string) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetVerifiedBy(*v)
	}
	return _u
}

// ClearVerifiedBy clears the value of the "verified_by" field.
func (_u *ImpactDataPointUpdateOne) ClearVerifiedBy() *ImpactDataPointUpdateOne {
	_u.mutation.ClearVerifiedBy()
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *ImpactDataPointUpdateOne) SetVerifiedAt(v time.Time) *ImpactDataPointUpdateOne {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *ImpactDataPointUpdateOne) SetNillableVerifiedAt(v *time.Time) *ImpactDataPointUpdateOne {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *ImpactDataPointUpdateOne) ClearVerifiedAt() *ImpactDataPointUpdateOne {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ImpactDataPointUpdateOne) SetUpdatedAt(v time.Time) *ImpactDataPointUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetMetricID sets the "metric" edge to the ImpactMetric entity by ID.
func (_u *ImpactDataPointUpdateOne) SetMetricID(id int) *ImpactDataPointUpdateOne {
	_u.mutation.SetMetricID(id)
	return _u
}

// SetMetric sets the "metric" edge to the ImpactMetric entity.
func (_u *ImpactDataPointUpdateOne) SetMetric(v *ImpactMetric) *ImpactDataPointUpdateOne {
	return _u.SetMetricID(v.ID)
}

// Mutation returns the ImpactDataPointMutation object of the builder.
func (_u *ImpactDataPointUpdateOne) Mutation() *ImpactDataPointMutation {
	return _u.mutation
}

// ClearMetric clears the "metric" edge to the ImpactMetric entity.
func (_u *ImpactDataPointUpdateOne) ClearMetric() *ImpactDataPointUpdateOne {
	_u.mutation.ClearMetric()
	return _u
}

// Where appends a list predicates to the ImpactDataPointUpdate builder.
func (_u *ImpactDataPointUpdateOne) Where(ps ...predicate.ImpactDataPoint) *ImpactDataPointUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImpactDataPointUpdateOne) Select(field string, fields ...string) *ImpactDataPointUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImpactDataPoint entity.
func (_u *ImpactDataPointUpdateOne) Save(ctx context.Context) (*ImpactDataPoint, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImpactDataPointUpdateOne) SaveX(ctx context.Context) *ImpactDataPoint {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImpactDataPointUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImpactDataPointUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ImpactDataPointUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := impactdatapoint.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImpactDataPointUpdateOne) check() error {
	if _u.mutation.MetricCleared() && len(_u.mutation.MetricIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImpactDataPoint.metric"`)
	}
	return nil
}

func (_u *ImpactDataPointUpdateOne) sqlSave(ctx context.Context) (_node *ImpactDataPoint, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(impactdatapoint.Table, impactdatapoint.Columns, sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImpactDataPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, impactdatapoint.FieldID)
		for _, f := range fields {
			if !impactdatapoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != impactdatapoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(impactdatapoint.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(impactdatapoint.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.RecordedAt(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RecordedBy(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedBy, field.TypeString, value)
	}
	if _u.mutation.RecordedByCleared() {
		_spec.ClearField(impactdatapoint.FieldRecordedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Period(); ok {
		_spec.SetField(impactdatapoint.FieldPeriod, field.TypeString, value)
	}
	if _u.mutation.PeriodCleared() {
		_spec.ClearField(impactdatapoint.FieldPeriod, field.TypeString)
	}
	if value, ok := _u.mutation.Notes(); ok {
		_spec.SetField(impactdatapoint.FieldNotes, field.TypeString, value)
	}
	if _u.mutation.NotesCleared() {
		_spec.ClearField(impactdatapoint.FieldNotes, field.TypeString)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(impactdatapoint.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(impactdatapoint.FieldSource, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(impactdatapoint.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedBy(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedBy, field.TypeString, value)
	}
	if _u.mutation.VerifiedByCleared() {
		_spec.ClearField(impactdatapoint.FieldVerifiedBy, field.TypeString)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(impactdatapoint.FieldVerifiedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(impactdatapoint.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImpactDataPoint{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{impactdatapoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
