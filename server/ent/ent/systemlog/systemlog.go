// Code generated by ent, DO NOT EDIT.

package systemlog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the systemlog type in the database.
	Label = "system_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// Table holds the table name of the systemlog in the database.
	Table = "system_logs"
)

// Columns holds all SQL columns for systemlog fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldLevel,
	FieldMessage,
	FieldMetadata,
	FieldUserID,
	FieldContext,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// Level defines the type for the "level" enum field.
type Level string

// Level values.
const (
	LevelDEBUG Level = "DEBUG"
	LevelINFO  Level = "INFO"
	LevelWARN  Level = "WARN"
	LevelERROR Level = "ERROR"
	LevelFATAL Level = "FATAL"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelDEBUG, LevelINFO, LevelWARN, LevelERROR, LevelFATAL:
		return nil
	default:
		return fmt.Errorf("systemlog: invalid enum value for level field: %q", l)
	}
}

// OrderOption defines the ordering options for the SystemLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}
