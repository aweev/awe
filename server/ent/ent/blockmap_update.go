// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockmap"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlockMapUpdate is the builder for updating BlockMap entities.
type BlockMapUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMapMutation
}

// Where appends a list predicates to the BlockMapUpdate builder.
func (_u *BlockMapUpdate) Where(ps ...predicate.BlockMap) *BlockMapUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockMapUpdate) SetInternalName(v string) *BlockMapUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockMapUpdate) SetNillableInternalName(v *string) *BlockMapUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *BlockMapUpdate) SetLatitude(v float64) *BlockMapUpdate {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *BlockMapUpdate) SetNillableLatitude(v *float64) *BlockMapUpdate {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *BlockMapUpdate) AddLatitude(v float64) *BlockMapUpdate {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *BlockMapUpdate) SetLongitude(v float64) *BlockMapUpdate {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *BlockMapUpdate) SetNillableLongitude(v *float64) *BlockMapUpdate {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *BlockMapUpdate) AddLongitude(v float64) *BlockMapUpdate {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetZoom sets the "zoom" field.
func (_u *BlockMapUpdate) SetZoom(v int) *BlockMapUpdate {
	_u.mutation.ResetZoom()
	_u.mutation.SetZoom(v)
	return _u
}

// SetNillableZoom sets the "zoom" field if the given value is not nil.
func (_u *BlockMapUpdate) SetNillableZoom(v *int) *BlockMapUpdate {
	if v != nil {
		_u.SetZoom(*v)
	}
	return _u
}

// AddZoom adds value to the "zoom" field.
func (_u *BlockMapUpdate) AddZoom(v int) *BlockMapUpdate {
	_u.mutation.AddZoom(v)
	return _u
}

// SetMarkers sets the "markers" field.
func (_u *BlockMapUpdate) SetMarkers(v []map[string]interface{}) *BlockMapUpdate {
	_u.mutation.SetMarkers(v)
	return _u
}

// AppendMarkers appends value to the "markers" field.
func (_u *BlockMapUpdate) AppendMarkers(v []map[string]interface{}) *BlockMapUpdate {
	_u.mutation.AppendMarkers(v)
	return _u
}

// ClearMarkers clears the value of the "markers" field.
func (_u *BlockMapUpdate) ClearMarkers() *BlockMapUpdate {
	_u.mutation.ClearMarkers()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockMapUpdate) SetUpdatedAt(v time.Time) *BlockMapUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockMapUpdate) SetContentBlockID(id int) *BlockMapUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockMapUpdate) SetContentBlock(v *ContentBlock) *BlockMapUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockMapMutation object of the builder.
func (_u *BlockMapUpdate) Mutation() *BlockMapMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockMapUpdate) ClearContentBlock() *BlockMapUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockMapUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockMapUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockMapUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockMapUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockMapUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockmap.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockMapUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockMap.content_block"`)
	}
	return nil
}

func (_u *BlockMapUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockmap.Table, blockmap.Columns, sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockmap.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(blockmap.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(blockmap.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(blockmap.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(blockmap.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Zoom(); ok {
		_spec.SetField(blockmap.FieldZoom, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedZoom(); ok {
		_spec.AddField(blockmap.FieldZoom, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Markers(); ok {
		_spec.SetField(blockmap.FieldMarkers, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMarkers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockmap.FieldMarkers, value)
		})
	}
	if _u.mutation.MarkersCleared() {
		_spec.ClearField(blockmap.FieldMarkers, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockmap.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockMapUpdateOne is the builder for updating a single BlockMap entity.
type BlockMapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockMapMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockMapUpdateOne) SetInternalName(v string) *BlockMapUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockMapUpdateOne) SetNillableInternalName(v *string) *BlockMapUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetLatitude sets the "latitude" field.
func (_u *BlockMapUpdateOne) SetLatitude(v float64) *BlockMapUpdateOne {
	_u.mutation.ResetLatitude()
	_u.mutation.SetLatitude(v)
	return _u
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (_u *BlockMapUpdateOne) SetNillableLatitude(v *float64) *BlockMapUpdateOne {
	if v != nil {
		_u.SetLatitude(*v)
	}
	return _u
}

// AddLatitude adds value to the "latitude" field.
func (_u *BlockMapUpdateOne) AddLatitude(v float64) *BlockMapUpdateOne {
	_u.mutation.AddLatitude(v)
	return _u
}

// SetLongitude sets the "longitude" field.
func (_u *BlockMapUpdateOne) SetLongitude(v float64) *BlockMapUpdateOne {
	_u.mutation.ResetLongitude()
	_u.mutation.SetLongitude(v)
	return _u
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (_u *BlockMapUpdateOne) SetNillableLongitude(v *float64) *BlockMapUpdateOne {
	if v != nil {
		_u.SetLongitude(*v)
	}
	return _u
}

// AddLongitude adds value to the "longitude" field.
func (_u *BlockMapUpdateOne) AddLongitude(v float64) *BlockMapUpdateOne {
	_u.mutation.AddLongitude(v)
	return _u
}

// SetZoom sets the "zoom" field.
func (_u *BlockMapUpdateOne) SetZoom(v int) *BlockMapUpdateOne {
	_u.mutation.ResetZoom()
	_u.mutation.SetZoom(v)
	return _u
}

// SetNillableZoom sets the "zoom" field if the given value is not nil.
func (_u *BlockMapUpdateOne) SetNillableZoom(v *int) *BlockMapUpdateOne {
	if v != nil {
		_u.SetZoom(*v)
	}
	return _u
}

// AddZoom adds value to the "zoom" field.
func (_u *BlockMapUpdateOne) AddZoom(v int) *BlockMapUpdateOne {
	_u.mutation.AddZoom(v)
	return _u
}

// SetMarkers sets the "markers" field.
func (_u *BlockMapUpdateOne) SetMarkers(v []map[string]interface{}) *BlockMapUpdateOne {
	_u.mutation.SetMarkers(v)
	return _u
}

// AppendMarkers appends value to the "markers" field.
func (_u *BlockMapUpdateOne) AppendMarkers(v []map[string]interface{}) *BlockMapUpdateOne {
	_u.mutation.AppendMarkers(v)
	return _u
}

// ClearMarkers clears the value of the "markers" field.
func (_u *BlockMapUpdateOne) ClearMarkers() *BlockMapUpdateOne {
	_u.mutation.ClearMarkers()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockMapUpdateOne) SetUpdatedAt(v time.Time) *BlockMapUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockMapUpdateOne) SetContentBlockID(id int) *BlockMapUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockMapUpdateOne) SetContentBlock(v *ContentBlock) *BlockMapUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockMapMutation object of the builder.
func (_u *BlockMapUpdateOne) Mutation() *BlockMapMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockMapUpdateOne) ClearContentBlock() *BlockMapUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockMapUpdate builder.
func (_u *BlockMapUpdateOne) Where(ps ...predicate.BlockMap) *BlockMapUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockMapUpdateOne) Select(field string, fields ...string) *BlockMapUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockMap entity.
func (_u *BlockMapUpdateOne) Save(ctx context.Context) (*BlockMap, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockMapUpdateOne) SaveX(ctx context.Context) *BlockMap {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockMapUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockMapUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockMapUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockmap.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockMapUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockMap.content_block"`)
	}
	return nil
}

func (_u *BlockMapUpdateOne) sqlSave(ctx context.Context) (_node *BlockMap, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockmap.Table, blockmap.Columns, sqlgraph.NewFieldSpec(blockmap.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockMap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockmap.FieldID)
		for _, f := range fields {
			if !blockmap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockmap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockmap.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Latitude(); ok {
		_spec.SetField(blockmap.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLatitude(); ok {
		_spec.AddField(blockmap.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Longitude(); ok {
		_spec.SetField(blockmap.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedLongitude(); ok {
		_spec.AddField(blockmap.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Zoom(); ok {
		_spec.SetField(blockmap.FieldZoom, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedZoom(); ok {
		_spec.AddField(blockmap.FieldZoom, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Markers(); ok {
		_spec.SetField(blockmap.FieldMarkers, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMarkers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockmap.FieldMarkers, value)
		})
	}
	if _u.mutation.MarkersCleared() {
		_spec.ClearField(blockmap.FieldMarkers, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockmap.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockMap{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
