// Code generated by ent, DO NOT EDIT.

package activitylog

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldDescription, v))
}

// LinkHref applies equality check predicate on the "link_href" field. It's identical to LinkHrefEQ.
func LinkHref(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldLinkHref, v))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldEntityType, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldEntityID, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldType, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldDescription, v))
}

// LinkHrefEQ applies the EQ predicate on the "link_href" field.
func LinkHrefEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldLinkHref, v))
}

// LinkHrefNEQ applies the NEQ predicate on the "link_href" field.
func LinkHrefNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldLinkHref, v))
}

// LinkHrefIn applies the In predicate on the "link_href" field.
func LinkHrefIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldLinkHref, vs...))
}

// LinkHrefNotIn applies the NotIn predicate on the "link_href" field.
func LinkHrefNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldLinkHref, vs...))
}

// LinkHrefGT applies the GT predicate on the "link_href" field.
func LinkHrefGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldLinkHref, v))
}

// LinkHrefGTE applies the GTE predicate on the "link_href" field.
func LinkHrefGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldLinkHref, v))
}

// LinkHrefLT applies the LT predicate on the "link_href" field.
func LinkHrefLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldLinkHref, v))
}

// LinkHrefLTE applies the LTE predicate on the "link_href" field.
func LinkHrefLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldLinkHref, v))
}

// LinkHrefContains applies the Contains predicate on the "link_href" field.
func LinkHrefContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldLinkHref, v))
}

// LinkHrefHasPrefix applies the HasPrefix predicate on the "link_href" field.
func LinkHrefHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldLinkHref, v))
}

// LinkHrefHasSuffix applies the HasSuffix predicate on the "link_href" field.
func LinkHrefHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldLinkHref, v))
}

// LinkHrefIsNil applies the IsNil predicate on the "link_href" field.
func LinkHrefIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldLinkHref))
}

// LinkHrefNotNil applies the NotNil predicate on the "link_href" field.
func LinkHrefNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldLinkHref))
}

// LinkHrefEqualFold applies the EqualFold predicate on the "link_href" field.
func LinkHrefEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldLinkHref, v))
}

// LinkHrefContainsFold applies the ContainsFold predicate on the "link_href" field.
func LinkHrefContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldLinkHref, v))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldEntityType, v))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldEntityType, v))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldEntityType, vs...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldEntityType, vs...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldEntityType, v))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldEntityType, v))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldEntityType, v))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldEntityType, v))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldEntityType, v))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldEntityType, v))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldEntityType, v))
}

// EntityTypeIsNil applies the IsNil predicate on the "entity_type" field.
func EntityTypeIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldEntityType))
}

// EntityTypeNotNil applies the NotNil predicate on the "entity_type" field.
func EntityTypeNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldEntityType))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldEntityType, v))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldEntityType, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldEntityID, v))
}

// EntityIDContains applies the Contains predicate on the "entity_id" field.
func EntityIDContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldEntityID, v))
}

// EntityIDHasPrefix applies the HasPrefix predicate on the "entity_id" field.
func EntityIDHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldEntityID, v))
}

// EntityIDHasSuffix applies the HasSuffix predicate on the "entity_id" field.
func EntityIDHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldEntityID, v))
}

// EntityIDIsNil applies the IsNil predicate on the "entity_id" field.
func EntityIDIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldEntityID))
}

// EntityIDNotNil applies the NotNil predicate on the "entity_id" field.
func EntityIDNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldEntityID))
}

// EntityIDEqualFold applies the EqualFold predicate on the "entity_id" field.
func EntityIDEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldEntityID, v))
}

// EntityIDContainsFold applies the ContainsFold predicate on the "entity_id" field.
func EntityIDContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldEntityID, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldMetadata))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ActivityLog {
	return predicate.ActivityLog(sql.FieldLTE(FieldCreatedAt, v))
}

// HasActor applies the HasEdge predicate on the "actor" edge.
func HasActor() predicate.ActivityLog {
	return predicate.ActivityLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActorTable, ActorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActorWith applies the HasEdge predicate on the "actor" edge with a given conditions (other predicates).
func HasActorWith(preds ...predicate.User) predicate.ActivityLog {
	return predicate.ActivityLog(func(s *sql.Selector) {
		step := newActorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActivityLog) predicate.ActivityLog {
	return predicate.ActivityLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActivityLog) predicate.ActivityLog {
	return predicate.ActivityLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActivityLog) predicate.ActivityLog {
	return predicate.ActivityLog(sql.NotPredicates(p))
}
