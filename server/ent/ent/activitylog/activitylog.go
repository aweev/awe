// Code generated by ent, DO NOT EDIT.

package activitylog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the activitylog type in the database.
	Label = "activity_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLinkHref holds the string denoting the link_href field in the database.
	FieldLinkHref = "link_href"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeActor holds the string denoting the actor edge name in mutations.
	EdgeActor = "actor"
	// Table holds the table name of the activitylog in the database.
	Table = "activity_logs"
	// ActorTable is the table that holds the actor relation/edge.
	ActorTable = "activity_logs"
	// ActorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActorInverseTable = "users"
	// ActorColumn is the table column denoting the actor relation/edge.
	ActorColumn = "user_activity_logs"
)

// Columns holds all SQL columns for activitylog fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTitle,
	FieldDescription,
	FieldLinkHref,
	FieldEntityType,
	FieldEntityID,
	FieldMetadata,
	FieldIPAddress,
	FieldUserAgent,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "activity_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_activity_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeUSER_REGISTERED     Type = "USER_REGISTERED"
	TypeDONATION_RECEIVED   Type = "DONATION_RECEIVED"
	TypePROGRAM_COMPLETED   Type = "PROGRAM_COMPLETED"
	TypePARTNERSHIP_STARTED Type = "PARTNERSHIP_STARTED"
	TypeSTORY_SUBMITTED     Type = "STORY_SUBMITTED"
	TypeVOLUNTEER_APPLIED   Type = "VOLUNTEER_APPLIED"
	TypeVOTE_CAST           Type = "VOTE_CAST"
	TypeACTION_ITEM_CREATED Type = "ACTION_ITEM_CREATED"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUSER_REGISTERED, TypeDONATION_RECEIVED, TypePROGRAM_COMPLETED, TypePARTNERSHIP_STARTED, TypeSTORY_SUBMITTED, TypeVOLUNTEER_APPLIED, TypeVOTE_CAST, TypeACTION_ITEM_CREATED:
		return nil
	default:
		return fmt.Errorf("activitylog: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the ActivityLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLinkHref orders the results by the link_href field.
func ByLinkHref(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkHref, opts...).ToFunc()
}

// ByEntityType orders the results by the entity_type field.
func ByEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityType, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByActorField orders the results by actor field.
func ByActorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActorStep(), sql.OrderByField(field, opts...))
	}
}
func newActorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActorTable, ActorColumn),
	)
}
