// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PasswordHistoryCreate is the builder for creating a PasswordHistory entity.
type PasswordHistoryCreate struct {
	config
	mutation *PasswordHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHashedPassword sets the "hashed_password" field.
func (_c *PasswordHistoryCreate) SetHashedPassword(v string) *PasswordHistoryCreate {
	_c.mutation.SetHashedPassword(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PasswordHistoryCreate) SetCreatedAt(v time.Time) *PasswordHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PasswordHistoryCreate) SetNillableCreatedAt(v *time.Time) *PasswordHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *PasswordHistoryCreate) SetUserID(id int) *PasswordHistoryCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *PasswordHistoryCreate) SetUser(v *User) *PasswordHistoryCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the PasswordHistoryMutation object of the builder.
func (_c *PasswordHistoryCreate) Mutation() *PasswordHistoryMutation {
	return _c.mutation
}

// Save creates the PasswordHistory in the database.
func (_c *PasswordHistoryCreate) Save(ctx context.Context) (*PasswordHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PasswordHistoryCreate) SaveX(ctx context.Context) *PasswordHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PasswordHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PasswordHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PasswordHistoryCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := passwordhistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PasswordHistoryCreate) check() error {
	if _, ok := _c.mutation.HashedPassword(); !ok {
		return &ValidationError{Name: "hashed_password", err: errors.New(`ent: missing required field "PasswordHistory.hashed_password"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PasswordHistory.created_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PasswordHistory.user"`)}
	}
	return nil
}

func (_c *PasswordHistoryCreate) sqlSave(ctx context.Context) (*PasswordHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PasswordHistoryCreate) createSpec() (*PasswordHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &PasswordHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(passwordhistory.Table, sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.HashedPassword(); ok {
		_spec.SetField(passwordhistory.FieldHashedPassword, field.TypeString, value)
		_node.HashedPassword = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(passwordhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_password_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PasswordHistory.Create().
//		SetHashedPassword(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PasswordHistoryUpsert) {
//			SetHashedPassword(v+v).
//		}).
//		Exec(ctx)
func (_c *PasswordHistoryCreate) OnConflict(opts ...sql.ConflictOption) *PasswordHistoryUpsertOne {
	_c.conflict = opts
	return &PasswordHistoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PasswordHistoryCreate) OnConflictColumns(columns ...string) *PasswordHistoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PasswordHistoryUpsertOne{
		create: _c,
	}
}

type (
	// PasswordHistoryUpsertOne is the builder for "upsert"-ing
	//  one PasswordHistory node.
	PasswordHistoryUpsertOne struct {
		create *PasswordHistoryCreate
	}

	// PasswordHistoryUpsert is the "OnConflict" setter.
	PasswordHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetHashedPassword sets the "hashed_password" field.
func (u *PasswordHistoryUpsert) SetHashedPassword(v string) *PasswordHistoryUpsert {
	u.Set(passwordhistory.FieldHashedPassword, v)
	return u
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *PasswordHistoryUpsert) UpdateHashedPassword() *PasswordHistoryUpsert {
	u.SetExcluded(passwordhistory.FieldHashedPassword)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PasswordHistoryUpsertOne) UpdateNewValues() *PasswordHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(passwordhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PasswordHistoryUpsertOne) Ignore() *PasswordHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PasswordHistoryUpsertOne) DoNothing() *PasswordHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PasswordHistoryCreate.OnConflict
// documentation for more info.
func (u *PasswordHistoryUpsertOne) Update(set func(*PasswordHistoryUpsert)) *PasswordHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PasswordHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetHashedPassword sets the "hashed_password" field.
func (u *PasswordHistoryUpsertOne) SetHashedPassword(v string) *PasswordHistoryUpsertOne {
	return u.Update(func(s *PasswordHistoryUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *PasswordHistoryUpsertOne) UpdateHashedPassword() *PasswordHistoryUpsertOne {
	return u.Update(func(s *PasswordHistoryUpsert) {
		s.UpdateHashedPassword()
	})
}

// Exec executes the query.
func (u *PasswordHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PasswordHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PasswordHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PasswordHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PasswordHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PasswordHistoryCreateBulk is the builder for creating many PasswordHistory entities in bulk.
type PasswordHistoryCreateBulk struct {
	config
	err      error
	builders []*PasswordHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the PasswordHistory entities in the database.
func (_c *PasswordHistoryCreateBulk) Save(ctx context.Context) ([]*PasswordHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PasswordHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasswordHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PasswordHistoryCreateBulk) SaveX(ctx context.Context) []*PasswordHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PasswordHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PasswordHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PasswordHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PasswordHistoryUpsert) {
//			SetHashedPassword(v+v).
//		}).
//		Exec(ctx)
func (_c *PasswordHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *PasswordHistoryUpsertBulk {
	_c.conflict = opts
	return &PasswordHistoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PasswordHistoryCreateBulk) OnConflictColumns(columns ...string) *PasswordHistoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PasswordHistoryUpsertBulk{
		create: _c,
	}
}

// PasswordHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of PasswordHistory nodes.
type PasswordHistoryUpsertBulk struct {
	create *PasswordHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PasswordHistoryUpsertBulk) UpdateNewValues() *PasswordHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(passwordhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PasswordHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PasswordHistoryUpsertBulk) Ignore() *PasswordHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PasswordHistoryUpsertBulk) DoNothing() *PasswordHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PasswordHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *PasswordHistoryUpsertBulk) Update(set func(*PasswordHistoryUpsert)) *PasswordHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PasswordHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetHashedPassword sets the "hashed_password" field.
func (u *PasswordHistoryUpsertBulk) SetHashedPassword(v string) *PasswordHistoryUpsertBulk {
	return u.Update(func(s *PasswordHistoryUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *PasswordHistoryUpsertBulk) UpdateHashedPassword() *PasswordHistoryUpsertBulk {
	return u.Update(func(s *PasswordHistoryUpsert) {
		s.UpdateHashedPassword()
	})
}

// Exec executes the query.
func (u *PasswordHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PasswordHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PasswordHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PasswordHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
