// Code generated by ent, DO NOT EDIT.

package badge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the badge type in the database.
	Label = "badge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldCriteria holds the string denoting the criteria field in the database.
	FieldCriteria = "criteria"
	// EdgeUserAchievements holds the string denoting the user_achievements edge name in mutations.
	EdgeUserAchievements = "user_achievements"
	// Table holds the table name of the badge in the database.
	Table = "badges"
	// UserAchievementsTable is the table that holds the user_achievements relation/edge.
	UserAchievementsTable = "user_achievements"
	// UserAchievementsInverseTable is the table name for the UserAchievement entity.
	// It exists in this package in order to avoid circular dependency with the "userachievement" package.
	UserAchievementsInverseTable = "user_achievements"
	// UserAchievementsColumn is the table column denoting the user_achievements relation/edge.
	UserAchievementsColumn = "badge_user_achievements"
)

// Columns holds all SQL columns for badge fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldImageURL,
	FieldCriteria,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Badge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByCriteria orders the results by the criteria field.
func ByCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCriteria, opts...).ToFunc()
}

// ByUserAchievementsCount orders the results by user_achievements count.
func ByUserAchievementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserAchievementsStep(), opts...)
	}
}

// ByUserAchievements orders the results by user_achievements terms.
func ByUserAchievements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserAchievementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserAchievementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserAchievementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserAchievementsTable, UserAchievementsColumn),
	)
}
