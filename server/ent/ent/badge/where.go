// Code generated by ent, DO NOT EDIT.

package badge

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldID, id))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldImageURL, v))
}

// Criteria applies equality check predicate on the "criteria" field. It's identical to CriteriaEQ.
func Criteria(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldCriteria, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldImageURL, v))
}

// CriteriaEQ applies the EQ predicate on the "criteria" field.
func CriteriaEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldCriteria, v))
}

// CriteriaNEQ applies the NEQ predicate on the "criteria" field.
func CriteriaNEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldCriteria, v))
}

// CriteriaIn applies the In predicate on the "criteria" field.
func CriteriaIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldCriteria, vs...))
}

// CriteriaNotIn applies the NotIn predicate on the "criteria" field.
func CriteriaNotIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldCriteria, vs...))
}

// CriteriaGT applies the GT predicate on the "criteria" field.
func CriteriaGT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldCriteria, v))
}

// CriteriaGTE applies the GTE predicate on the "criteria" field.
func CriteriaGTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldCriteria, v))
}

// CriteriaLT applies the LT predicate on the "criteria" field.
func CriteriaLT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldCriteria, v))
}

// CriteriaLTE applies the LTE predicate on the "criteria" field.
func CriteriaLTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldCriteria, v))
}

// CriteriaContains applies the Contains predicate on the "criteria" field.
func CriteriaContains(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContains(FieldCriteria, v))
}

// CriteriaHasPrefix applies the HasPrefix predicate on the "criteria" field.
func CriteriaHasPrefix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasPrefix(FieldCriteria, v))
}

// CriteriaHasSuffix applies the HasSuffix predicate on the "criteria" field.
func CriteriaHasSuffix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasSuffix(FieldCriteria, v))
}

// CriteriaEqualFold applies the EqualFold predicate on the "criteria" field.
func CriteriaEqualFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldCriteria, v))
}

// CriteriaContainsFold applies the ContainsFold predicate on the "criteria" field.
func CriteriaContainsFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldCriteria, v))
}

// HasUserAchievements applies the HasEdge predicate on the "user_achievements" edge.
func HasUserAchievements() predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserAchievementsTable, UserAchievementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserAchievementsWith applies the HasEdge predicate on the "user_achievements" edge with a given conditions (other predicates).
func HasUserAchievementsWith(preds ...predicate.UserAchievement) predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := newUserAchievementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.NotPredicates(p))
}
