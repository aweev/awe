// Code generated by ent, DO NOT EDIT.

package document

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFileURL, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFileName, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldMimeType, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldSize, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldVersion, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLanguage, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldIsPublic, v))
}

// AccessPassword applies equality check predicate on the "access_password" field. It's identical to AccessPasswordEQ.
func AccessPassword(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldAccessPassword, v))
}

// RequiresApproval applies equality check predicate on the "requires_approval" field. It's identical to RequiresApprovalEQ.
func RequiresApproval(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldRequiresApproval, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldIsApproved, v))
}

// ApprovedBy applies equality check predicate on the "approved_by" field. It's identical to ApprovedByEQ.
func ApprovedBy(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedAt applies equality check predicate on the "approved_at" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldApprovedAt, v))
}

// DownloadCount applies equality check predicate on the "download_count" field. It's identical to DownloadCountEQ.
func DownloadCount(v int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDownloadCount, v))
}

// LastAccessed applies equality check predicate on the "last_accessed" field. It's identical to LastAccessedEQ.
func LastAccessed(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLastAccessed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldType, vs...))
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFileURL, v))
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldFileURL, v))
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldFileURL, vs...))
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldFileURL, vs...))
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldFileURL, v))
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldFileURL, v))
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldFileURL, v))
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldFileURL, v))
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldFileURL, v))
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldFileURL, v))
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldFileURL, v))
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldFileURL, v))
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldFileURL, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldFileName, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeIsNil applies the IsNil predicate on the "mime_type" field.
func MimeTypeIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldMimeType))
}

// MimeTypeNotNil applies the NotNil predicate on the "mime_type" field.
func MimeTypeNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldMimeType))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldMimeType, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldSize))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldDescription))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldVersion, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldLanguage, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldIsPublic, v))
}

// AccessPasswordEQ applies the EQ predicate on the "access_password" field.
func AccessPasswordEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldAccessPassword, v))
}

// AccessPasswordNEQ applies the NEQ predicate on the "access_password" field.
func AccessPasswordNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldAccessPassword, v))
}

// AccessPasswordIn applies the In predicate on the "access_password" field.
func AccessPasswordIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldAccessPassword, vs...))
}

// AccessPasswordNotIn applies the NotIn predicate on the "access_password" field.
func AccessPasswordNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldAccessPassword, vs...))
}

// AccessPasswordGT applies the GT predicate on the "access_password" field.
func AccessPasswordGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldAccessPassword, v))
}

// AccessPasswordGTE applies the GTE predicate on the "access_password" field.
func AccessPasswordGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldAccessPassword, v))
}

// AccessPasswordLT applies the LT predicate on the "access_password" field.
func AccessPasswordLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldAccessPassword, v))
}

// AccessPasswordLTE applies the LTE predicate on the "access_password" field.
func AccessPasswordLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldAccessPassword, v))
}

// AccessPasswordContains applies the Contains predicate on the "access_password" field.
func AccessPasswordContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldAccessPassword, v))
}

// AccessPasswordHasPrefix applies the HasPrefix predicate on the "access_password" field.
func AccessPasswordHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldAccessPassword, v))
}

// AccessPasswordHasSuffix applies the HasSuffix predicate on the "access_password" field.
func AccessPasswordHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldAccessPassword, v))
}

// AccessPasswordIsNil applies the IsNil predicate on the "access_password" field.
func AccessPasswordIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldAccessPassword))
}

// AccessPasswordNotNil applies the NotNil predicate on the "access_password" field.
func AccessPasswordNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldAccessPassword))
}

// AccessPasswordEqualFold applies the EqualFold predicate on the "access_password" field.
func AccessPasswordEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldAccessPassword, v))
}

// AccessPasswordContainsFold applies the ContainsFold predicate on the "access_password" field.
func AccessPasswordContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldAccessPassword, v))
}

// RequiresApprovalEQ applies the EQ predicate on the "requires_approval" field.
func RequiresApprovalEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldRequiresApproval, v))
}

// RequiresApprovalNEQ applies the NEQ predicate on the "requires_approval" field.
func RequiresApprovalNEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldRequiresApproval, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldIsApproved, v))
}

// ApprovedByEQ applies the EQ predicate on the "approved_by" field.
func ApprovedByEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedByNEQ applies the NEQ predicate on the "approved_by" field.
func ApprovedByNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldApprovedBy, v))
}

// ApprovedByIn applies the In predicate on the "approved_by" field.
func ApprovedByIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldApprovedBy, vs...))
}

// ApprovedByNotIn applies the NotIn predicate on the "approved_by" field.
func ApprovedByNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldApprovedBy, vs...))
}

// ApprovedByGT applies the GT predicate on the "approved_by" field.
func ApprovedByGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldApprovedBy, v))
}

// ApprovedByGTE applies the GTE predicate on the "approved_by" field.
func ApprovedByGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldApprovedBy, v))
}

// ApprovedByLT applies the LT predicate on the "approved_by" field.
func ApprovedByLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldApprovedBy, v))
}

// ApprovedByLTE applies the LTE predicate on the "approved_by" field.
func ApprovedByLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldApprovedBy, v))
}

// ApprovedByContains applies the Contains predicate on the "approved_by" field.
func ApprovedByContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldApprovedBy, v))
}

// ApprovedByHasPrefix applies the HasPrefix predicate on the "approved_by" field.
func ApprovedByHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldApprovedBy, v))
}

// ApprovedByHasSuffix applies the HasSuffix predicate on the "approved_by" field.
func ApprovedByHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldApprovedBy, v))
}

// ApprovedByIsNil applies the IsNil predicate on the "approved_by" field.
func ApprovedByIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldApprovedBy))
}

// ApprovedByNotNil applies the NotNil predicate on the "approved_by" field.
func ApprovedByNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldApprovedBy))
}

// ApprovedByEqualFold applies the EqualFold predicate on the "approved_by" field.
func ApprovedByEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldApprovedBy, v))
}

// ApprovedByContainsFold applies the ContainsFold predicate on the "approved_by" field.
func ApprovedByContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldApprovedBy, v))
}

// ApprovedAtEQ applies the EQ predicate on the "approved_at" field.
func ApprovedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approved_at" field.
func ApprovedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approved_at" field.
func ApprovedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approved_at" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approved_at" field.
func ApprovedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approved_at" field.
func ApprovedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approved_at" field.
func ApprovedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approved_at" field.
func ApprovedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldApprovedAt, v))
}

// ApprovedAtIsNil applies the IsNil predicate on the "approved_at" field.
func ApprovedAtIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldApprovedAt))
}

// ApprovedAtNotNil applies the NotNil predicate on the "approved_at" field.
func ApprovedAtNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldApprovedAt))
}

// DownloadCountEQ applies the EQ predicate on the "download_count" field.
func DownloadCountEQ(v int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldDownloadCount, v))
}

// DownloadCountNEQ applies the NEQ predicate on the "download_count" field.
func DownloadCountNEQ(v int) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldDownloadCount, v))
}

// DownloadCountIn applies the In predicate on the "download_count" field.
func DownloadCountIn(vs ...int) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldDownloadCount, vs...))
}

// DownloadCountNotIn applies the NotIn predicate on the "download_count" field.
func DownloadCountNotIn(vs ...int) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldDownloadCount, vs...))
}

// DownloadCountGT applies the GT predicate on the "download_count" field.
func DownloadCountGT(v int) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldDownloadCount, v))
}

// DownloadCountGTE applies the GTE predicate on the "download_count" field.
func DownloadCountGTE(v int) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldDownloadCount, v))
}

// DownloadCountLT applies the LT predicate on the "download_count" field.
func DownloadCountLT(v int) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldDownloadCount, v))
}

// DownloadCountLTE applies the LTE predicate on the "download_count" field.
func DownloadCountLTE(v int) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldDownloadCount, v))
}

// LastAccessedEQ applies the EQ predicate on the "last_accessed" field.
func LastAccessedEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLastAccessed, v))
}

// LastAccessedNEQ applies the NEQ predicate on the "last_accessed" field.
func LastAccessedNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldLastAccessed, v))
}

// LastAccessedIn applies the In predicate on the "last_accessed" field.
func LastAccessedIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldLastAccessed, vs...))
}

// LastAccessedNotIn applies the NotIn predicate on the "last_accessed" field.
func LastAccessedNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldLastAccessed, vs...))
}

// LastAccessedGT applies the GT predicate on the "last_accessed" field.
func LastAccessedGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldLastAccessed, v))
}

// LastAccessedGTE applies the GTE predicate on the "last_accessed" field.
func LastAccessedGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldLastAccessed, v))
}

// LastAccessedLT applies the LT predicate on the "last_accessed" field.
func LastAccessedLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldLastAccessed, v))
}

// LastAccessedLTE applies the LTE predicate on the "last_accessed" field.
func LastAccessedLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldLastAccessed, v))
}

// LastAccessedIsNil applies the IsNil predicate on the "last_accessed" field.
func LastAccessedIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldLastAccessed))
}

// LastAccessedNotNil applies the NotNil predicate on the "last_accessed" field.
func LastAccessedNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldLastAccessed))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUploader applies the HasEdge predicate on the "uploader" edge.
func HasUploader() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UploaderTable, UploaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploaderWith applies the HasEdge predicate on the "uploader" edge with a given conditions (other predicates).
func HasUploaderWith(preds ...predicate.User) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newUploaderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.DocumentCategory) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(sql.NotPredicates(p))
}
