// Code generated by ent, DO NOT EDIT.

package document

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldAllowedRoles holds the string denoting the allowed_roles field in the database.
	FieldAllowedRoles = "allowed_roles"
	// FieldAccessPassword holds the string denoting the access_password field in the database.
	FieldAccessPassword = "access_password"
	// FieldRequiresApproval holds the string denoting the requires_approval field in the database.
	FieldRequiresApproval = "requires_approval"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldApprovedBy holds the string denoting the approved_by field in the database.
	FieldApprovedBy = "approved_by"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// FieldDownloadCount holds the string denoting the download_count field in the database.
	FieldDownloadCount = "download_count"
	// FieldLastAccessed holds the string denoting the last_accessed field in the database.
	FieldLastAccessed = "last_accessed"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUploader holds the string denoting the uploader edge name in mutations.
	EdgeUploader = "uploader"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// Table holds the table name of the document in the database.
	Table = "documents"
	// UploaderTable is the table that holds the uploader relation/edge.
	UploaderTable = "documents"
	// UploaderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UploaderInverseTable = "users"
	// UploaderColumn is the table column denoting the uploader relation/edge.
	UploaderColumn = "user_document_uploads"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "documents"
	// CategoryInverseTable is the table name for the DocumentCategory entity.
	// It exists in this package in order to avoid circular dependency with the "documentcategory" package.
	CategoryInverseTable = "document_categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "document_category_documents"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldType,
	FieldFileURL,
	FieldFileName,
	FieldMimeType,
	FieldSize,
	FieldDescription,
	FieldTags,
	FieldVersion,
	FieldLanguage,
	FieldIsPublic,
	FieldAllowedRoles,
	FieldAccessPassword,
	FieldRequiresApproval,
	FieldIsApproved,
	FieldApprovedBy,
	FieldApprovedAt,
	FieldDownloadCount,
	FieldLastAccessed,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "documents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"document_category_documents",
	"user_document_uploads",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultRequiresApproval holds the default value on creation for the "requires_approval" field.
	DefaultRequiresApproval bool
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
	// DefaultDownloadCount holds the default value on creation for the "download_count" field.
	DefaultDownloadCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeFINANCIAL_REPORT  Type = "FINANCIAL_REPORT"
	TypeANNUAL_REPORT     Type = "ANNUAL_REPORT"
	TypeBOARD_MINUTES     Type = "BOARD_MINUTES"
	TypePOLICY_DOCUMENT   Type = "POLICY_DOCUMENT"
	TypeGRANT_PROPOSAL    Type = "GRANT_PROPOSAL"
	TypeIMPACT_ASSESSMENT Type = "IMPACT_ASSESSMENT"
	TypeTRAINING_MATERIAL Type = "TRAINING_MATERIAL"
	TypeMARKETING_ASSET   Type = "MARKETING_ASSET"
	TypeLEGAL_DOCUMENT    Type = "LEGAL_DOCUMENT"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeFINANCIAL_REPORT, TypeANNUAL_REPORT, TypeBOARD_MINUTES, TypePOLICY_DOCUMENT, TypeGRANT_PROPOSAL, TypeIMPACT_ASSESSMENT, TypeTRAINING_MATERIAL, TypeMARKETING_ASSET, TypeLEGAL_DOCUMENT:
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByAccessPassword orders the results by the access_password field.
func ByAccessPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessPassword, opts...).ToFunc()
}

// ByRequiresApproval orders the results by the requires_approval field.
func ByRequiresApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiresApproval, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByApprovedBy orders the results by the approved_by field.
func ByApprovedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedBy, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByDownloadCount orders the results by the download_count field.
func ByDownloadCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadCount, opts...).ToFunc()
}

// ByLastAccessed orders the results by the last_accessed field.
func ByLastAccessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAccessed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUploaderField orders the results by uploader field.
func ByUploaderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploaderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newUploaderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploaderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploaderTable, UploaderColumn),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
