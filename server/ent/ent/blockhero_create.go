// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockhero"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockHeroCreate is the builder for creating a BlockHero entity.
type BlockHeroCreate struct {
	config
	mutation *BlockHeroMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockHeroCreate) SetInternalName(v string) *BlockHeroCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockHeroCreate) SetTitle(v map[string]string) *BlockHeroCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetSubtitle sets the "subtitle" field.
func (_c *BlockHeroCreate) SetSubtitle(v map[string]string) *BlockHeroCreate {
	_c.mutation.SetSubtitle(v)
	return _c
}

// SetCtaButtons sets the "cta_buttons" field.
func (_c *BlockHeroCreate) SetCtaButtons(v []map[string]interface{}) *BlockHeroCreate {
	_c.mutation.SetCtaButtons(v)
	return _c
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (_c *BlockHeroCreate) SetBackgroundImageURL(v string) *BlockHeroCreate {
	_c.mutation.SetBackgroundImageURL(v)
	return _c
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableBackgroundImageURL(v *string) *BlockHeroCreate {
	if v != nil {
		_c.SetBackgroundImageURL(*v)
	}
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockHeroCreate) SetBadge(v map[string]string) *BlockHeroCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockHeroCreate) SetDescription(v map[string]string) *BlockHeroCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetTextAlign sets the "text_align" field.
func (_c *BlockHeroCreate) SetTextAlign(v blockhero.TextAlign) *BlockHeroCreate {
	_c.mutation.SetTextAlign(v)
	return _c
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableTextAlign(v *blockhero.TextAlign) *BlockHeroCreate {
	if v != nil {
		_c.SetTextAlign(*v)
	}
	return _c
}

// SetColorScheme sets the "color_scheme" field.
func (_c *BlockHeroCreate) SetColorScheme(v blockhero.ColorScheme) *BlockHeroCreate {
	_c.mutation.SetColorScheme(v)
	return _c
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableColorScheme(v *blockhero.ColorScheme) *BlockHeroCreate {
	if v != nil {
		_c.SetColorScheme(*v)
	}
	return _c
}

// SetMinHeight sets the "min_height" field.
func (_c *BlockHeroCreate) SetMinHeight(v string) *BlockHeroCreate {
	_c.mutation.SetMinHeight(v)
	return _c
}

// SetNillableMinHeight sets the "min_height" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableMinHeight(v *string) *BlockHeroCreate {
	if v != nil {
		_c.SetMinHeight(*v)
	}
	return _c
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (_c *BlockHeroCreate) SetBackgroundVideoURL(v string) *BlockHeroCreate {
	_c.mutation.SetBackgroundVideoURL(v)
	return _c
}

// SetNillableBackgroundVideoURL sets the "background_video_url" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableBackgroundVideoURL(v *string) *BlockHeroCreate {
	if v != nil {
		_c.SetBackgroundVideoURL(*v)
	}
	return _c
}

// SetOverlayColor sets the "overlay_color" field.
func (_c *BlockHeroCreate) SetOverlayColor(v string) *BlockHeroCreate {
	_c.mutation.SetOverlayColor(v)
	return _c
}

// SetNillableOverlayColor sets the "overlay_color" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableOverlayColor(v *string) *BlockHeroCreate {
	if v != nil {
		_c.SetOverlayColor(*v)
	}
	return _c
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (_c *BlockHeroCreate) SetOverlayOpacity(v float64) *BlockHeroCreate {
	_c.mutation.SetOverlayOpacity(v)
	return _c
}

// SetNillableOverlayOpacity sets the "overlay_opacity" field if the given value is not nil.
func (_c *BlockHeroCreate) SetNillableOverlayOpacity(v *float64) *BlockHeroCreate {
	if v != nil {
		_c.SetOverlayOpacity(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockHeroCreate) SetContentBlockID(id int) *BlockHeroCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockHeroCreate) SetContentBlock(v *ContentBlock) *BlockHeroCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockHeroMutation object of the builder.
func (_c *BlockHeroCreate) Mutation() *BlockHeroMutation {
	return _c.mutation
}

// Save creates the BlockHero in the database.
func (_c *BlockHeroCreate) Save(ctx context.Context) (*BlockHero, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockHeroCreate) SaveX(ctx context.Context) *BlockHero {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockHeroCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockHeroCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockHeroCreate) defaults() {
	if _, ok := _c.mutation.TextAlign(); !ok {
		v := blockhero.DefaultTextAlign
		_c.mutation.SetTextAlign(v)
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		v := blockhero.DefaultColorScheme
		_c.mutation.SetColorScheme(v)
	}
	if _, ok := _c.mutation.MinHeight(); !ok {
		v := blockhero.DefaultMinHeight
		_c.mutation.SetMinHeight(v)
	}
	if _, ok := _c.mutation.OverlayOpacity(); !ok {
		v := blockhero.DefaultOverlayOpacity
		_c.mutation.SetOverlayOpacity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockHeroCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockHero.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockHero.title"`)}
	}
	if _, ok := _c.mutation.TextAlign(); !ok {
		return &ValidationError{Name: "text_align", err: errors.New(`ent: missing required field "BlockHero.text_align"`)}
	}
	if v, ok := _c.mutation.TextAlign(); ok {
		if err := blockhero.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockHero.text_align": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		return &ValidationError{Name: "color_scheme", err: errors.New(`ent: missing required field "BlockHero.color_scheme"`)}
	}
	if v, ok := _c.mutation.ColorScheme(); ok {
		if err := blockhero.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockHero.color_scheme": %w`, err)}
		}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockHero.content_block"`)}
	}
	return nil
}

func (_c *BlockHeroCreate) sqlSave(ctx context.Context) (*BlockHero, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockHeroCreate) createSpec() (*BlockHero, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockHero{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockhero.Table, sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockhero.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockhero.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Subtitle(); ok {
		_spec.SetField(blockhero.FieldSubtitle, field.TypeJSON, value)
		_node.Subtitle = value
	}
	if value, ok := _c.mutation.CtaButtons(); ok {
		_spec.SetField(blockhero.FieldCtaButtons, field.TypeJSON, value)
		_node.CtaButtons = value
	}
	if value, ok := _c.mutation.BackgroundImageURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundImageURL, field.TypeString, value)
		_node.BackgroundImageURL = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blockhero.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockhero.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.TextAlign(); ok {
		_spec.SetField(blockhero.FieldTextAlign, field.TypeEnum, value)
		_node.TextAlign = value
	}
	if value, ok := _c.mutation.ColorScheme(); ok {
		_spec.SetField(blockhero.FieldColorScheme, field.TypeEnum, value)
		_node.ColorScheme = value
	}
	if value, ok := _c.mutation.MinHeight(); ok {
		_spec.SetField(blockhero.FieldMinHeight, field.TypeString, value)
		_node.MinHeight = value
	}
	if value, ok := _c.mutation.BackgroundVideoURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundVideoURL, field.TypeString, value)
		_node.BackgroundVideoURL = value
	}
	if value, ok := _c.mutation.OverlayColor(); ok {
		_spec.SetField(blockhero.FieldOverlayColor, field.TypeString, value)
		_node.OverlayColor = value
	}
	if value, ok := _c.mutation.OverlayOpacity(); ok {
		_spec.SetField(blockhero.FieldOverlayOpacity, field.TypeFloat64, value)
		_node.OverlayOpacity = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_hero = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockHero.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockHeroUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockHeroCreate) OnConflict(opts ...sql.ConflictOption) *BlockHeroUpsertOne {
	_c.conflict = opts
	return &BlockHeroUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockHeroCreate) OnConflictColumns(columns ...string) *BlockHeroUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockHeroUpsertOne{
		create: _c,
	}
}

type (
	// BlockHeroUpsertOne is the builder for "upsert"-ing
	//  one BlockHero node.
	BlockHeroUpsertOne struct {
		create *BlockHeroCreate
	}

	// BlockHeroUpsert is the "OnConflict" setter.
	BlockHeroUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockHeroUpsert) SetInternalName(v string) *BlockHeroUpsert {
	u.Set(blockhero.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateInternalName() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockHeroUpsert) SetTitle(v map[string]string) *BlockHeroUpsert {
	u.Set(blockhero.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateTitle() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldTitle)
	return u
}

// SetSubtitle sets the "subtitle" field.
func (u *BlockHeroUpsert) SetSubtitle(v map[string]string) *BlockHeroUpsert {
	u.Set(blockhero.FieldSubtitle, v)
	return u
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateSubtitle() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldSubtitle)
	return u
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *BlockHeroUpsert) ClearSubtitle() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldSubtitle)
	return u
}

// SetCtaButtons sets the "cta_buttons" field.
func (u *BlockHeroUpsert) SetCtaButtons(v []map[string]interface{}) *BlockHeroUpsert {
	u.Set(blockhero.FieldCtaButtons, v)
	return u
}

// UpdateCtaButtons sets the "cta_buttons" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateCtaButtons() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldCtaButtons)
	return u
}

// ClearCtaButtons clears the value of the "cta_buttons" field.
func (u *BlockHeroUpsert) ClearCtaButtons() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldCtaButtons)
	return u
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *BlockHeroUpsert) SetBackgroundImageURL(v string) *BlockHeroUpsert {
	u.Set(blockhero.FieldBackgroundImageURL, v)
	return u
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateBackgroundImageURL() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldBackgroundImageURL)
	return u
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *BlockHeroUpsert) ClearBackgroundImageURL() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldBackgroundImageURL)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockHeroUpsert) SetBadge(v map[string]string) *BlockHeroUpsert {
	u.Set(blockhero.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateBadge() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockHeroUpsert) ClearBadge() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldBadge)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockHeroUpsert) SetDescription(v map[string]string) *BlockHeroUpsert {
	u.Set(blockhero.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateDescription() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockHeroUpsert) ClearDescription() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldDescription)
	return u
}

// SetTextAlign sets the "text_align" field.
func (u *BlockHeroUpsert) SetTextAlign(v blockhero.TextAlign) *BlockHeroUpsert {
	u.Set(blockhero.FieldTextAlign, v)
	return u
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateTextAlign() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldTextAlign)
	return u
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockHeroUpsert) SetColorScheme(v blockhero.ColorScheme) *BlockHeroUpsert {
	u.Set(blockhero.FieldColorScheme, v)
	return u
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateColorScheme() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldColorScheme)
	return u
}

// SetMinHeight sets the "min_height" field.
func (u *BlockHeroUpsert) SetMinHeight(v string) *BlockHeroUpsert {
	u.Set(blockhero.FieldMinHeight, v)
	return u
}

// UpdateMinHeight sets the "min_height" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateMinHeight() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldMinHeight)
	return u
}

// ClearMinHeight clears the value of the "min_height" field.
func (u *BlockHeroUpsert) ClearMinHeight() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldMinHeight)
	return u
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (u *BlockHeroUpsert) SetBackgroundVideoURL(v string) *BlockHeroUpsert {
	u.Set(blockhero.FieldBackgroundVideoURL, v)
	return u
}

// UpdateBackgroundVideoURL sets the "background_video_url" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateBackgroundVideoURL() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldBackgroundVideoURL)
	return u
}

// ClearBackgroundVideoURL clears the value of the "background_video_url" field.
func (u *BlockHeroUpsert) ClearBackgroundVideoURL() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldBackgroundVideoURL)
	return u
}

// SetOverlayColor sets the "overlay_color" field.
func (u *BlockHeroUpsert) SetOverlayColor(v string) *BlockHeroUpsert {
	u.Set(blockhero.FieldOverlayColor, v)
	return u
}

// UpdateOverlayColor sets the "overlay_color" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateOverlayColor() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldOverlayColor)
	return u
}

// ClearOverlayColor clears the value of the "overlay_color" field.
func (u *BlockHeroUpsert) ClearOverlayColor() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldOverlayColor)
	return u
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (u *BlockHeroUpsert) SetOverlayOpacity(v float64) *BlockHeroUpsert {
	u.Set(blockhero.FieldOverlayOpacity, v)
	return u
}

// UpdateOverlayOpacity sets the "overlay_opacity" field to the value that was provided on create.
func (u *BlockHeroUpsert) UpdateOverlayOpacity() *BlockHeroUpsert {
	u.SetExcluded(blockhero.FieldOverlayOpacity)
	return u
}

// AddOverlayOpacity adds v to the "overlay_opacity" field.
func (u *BlockHeroUpsert) AddOverlayOpacity(v float64) *BlockHeroUpsert {
	u.Add(blockhero.FieldOverlayOpacity, v)
	return u
}

// ClearOverlayOpacity clears the value of the "overlay_opacity" field.
func (u *BlockHeroUpsert) ClearOverlayOpacity() *BlockHeroUpsert {
	u.SetNull(blockhero.FieldOverlayOpacity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockHeroUpsertOne) UpdateNewValues() *BlockHeroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockHeroUpsertOne) Ignore() *BlockHeroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockHeroUpsertOne) DoNothing() *BlockHeroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockHeroCreate.OnConflict
// documentation for more info.
func (u *BlockHeroUpsertOne) Update(set func(*BlockHeroUpsert)) *BlockHeroUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockHeroUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockHeroUpsertOne) SetInternalName(v string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateInternalName() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockHeroUpsertOne) SetTitle(v map[string]string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateTitle() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateTitle()
	})
}

// SetSubtitle sets the "subtitle" field.
func (u *BlockHeroUpsertOne) SetSubtitle(v map[string]string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetSubtitle(v)
	})
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateSubtitle() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateSubtitle()
	})
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *BlockHeroUpsertOne) ClearSubtitle() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearSubtitle()
	})
}

// SetCtaButtons sets the "cta_buttons" field.
func (u *BlockHeroUpsertOne) SetCtaButtons(v []map[string]interface{}) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetCtaButtons(v)
	})
}

// UpdateCtaButtons sets the "cta_buttons" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateCtaButtons() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateCtaButtons()
	})
}

// ClearCtaButtons clears the value of the "cta_buttons" field.
func (u *BlockHeroUpsertOne) ClearCtaButtons() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearCtaButtons()
	})
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *BlockHeroUpsertOne) SetBackgroundImageURL(v string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBackgroundImageURL(v)
	})
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateBackgroundImageURL() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBackgroundImageURL()
	})
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *BlockHeroUpsertOne) ClearBackgroundImageURL() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBackgroundImageURL()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockHeroUpsertOne) SetBadge(v map[string]string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateBadge() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockHeroUpsertOne) ClearBadge() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBadge()
	})
}

// SetDescription sets the "description" field.
func (u *BlockHeroUpsertOne) SetDescription(v map[string]string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateDescription() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockHeroUpsertOne) ClearDescription() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearDescription()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockHeroUpsertOne) SetTextAlign(v blockhero.TextAlign) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateTextAlign() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockHeroUpsertOne) SetColorScheme(v blockhero.ColorScheme) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateColorScheme() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateColorScheme()
	})
}

// SetMinHeight sets the "min_height" field.
func (u *BlockHeroUpsertOne) SetMinHeight(v string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetMinHeight(v)
	})
}

// UpdateMinHeight sets the "min_height" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateMinHeight() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateMinHeight()
	})
}

// ClearMinHeight clears the value of the "min_height" field.
func (u *BlockHeroUpsertOne) ClearMinHeight() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearMinHeight()
	})
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (u *BlockHeroUpsertOne) SetBackgroundVideoURL(v string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBackgroundVideoURL(v)
	})
}

// UpdateBackgroundVideoURL sets the "background_video_url" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateBackgroundVideoURL() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBackgroundVideoURL()
	})
}

// ClearBackgroundVideoURL clears the value of the "background_video_url" field.
func (u *BlockHeroUpsertOne) ClearBackgroundVideoURL() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBackgroundVideoURL()
	})
}

// SetOverlayColor sets the "overlay_color" field.
func (u *BlockHeroUpsertOne) SetOverlayColor(v string) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetOverlayColor(v)
	})
}

// UpdateOverlayColor sets the "overlay_color" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateOverlayColor() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateOverlayColor()
	})
}

// ClearOverlayColor clears the value of the "overlay_color" field.
func (u *BlockHeroUpsertOne) ClearOverlayColor() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearOverlayColor()
	})
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (u *BlockHeroUpsertOne) SetOverlayOpacity(v float64) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetOverlayOpacity(v)
	})
}

// AddOverlayOpacity adds v to the "overlay_opacity" field.
func (u *BlockHeroUpsertOne) AddOverlayOpacity(v float64) *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.AddOverlayOpacity(v)
	})
}

// UpdateOverlayOpacity sets the "overlay_opacity" field to the value that was provided on create.
func (u *BlockHeroUpsertOne) UpdateOverlayOpacity() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateOverlayOpacity()
	})
}

// ClearOverlayOpacity clears the value of the "overlay_opacity" field.
func (u *BlockHeroUpsertOne) ClearOverlayOpacity() *BlockHeroUpsertOne {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearOverlayOpacity()
	})
}

// Exec executes the query.
func (u *BlockHeroUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockHeroCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockHeroUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockHeroUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockHeroUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockHeroCreateBulk is the builder for creating many BlockHero entities in bulk.
type BlockHeroCreateBulk struct {
	config
	err      error
	builders []*BlockHeroCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockHero entities in the database.
func (_c *BlockHeroCreateBulk) Save(ctx context.Context) ([]*BlockHero, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockHero, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockHeroMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockHeroCreateBulk) SaveX(ctx context.Context) []*BlockHero {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockHeroCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockHeroCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockHero.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockHeroUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockHeroCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockHeroUpsertBulk {
	_c.conflict = opts
	return &BlockHeroUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockHeroCreateBulk) OnConflictColumns(columns ...string) *BlockHeroUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockHeroUpsertBulk{
		create: _c,
	}
}

// BlockHeroUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockHero nodes.
type BlockHeroUpsertBulk struct {
	create *BlockHeroCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockHeroUpsertBulk) UpdateNewValues() *BlockHeroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockHero.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockHeroUpsertBulk) Ignore() *BlockHeroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockHeroUpsertBulk) DoNothing() *BlockHeroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockHeroCreateBulk.OnConflict
// documentation for more info.
func (u *BlockHeroUpsertBulk) Update(set func(*BlockHeroUpsert)) *BlockHeroUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockHeroUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockHeroUpsertBulk) SetInternalName(v string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateInternalName() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockHeroUpsertBulk) SetTitle(v map[string]string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateTitle() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateTitle()
	})
}

// SetSubtitle sets the "subtitle" field.
func (u *BlockHeroUpsertBulk) SetSubtitle(v map[string]string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetSubtitle(v)
	})
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateSubtitle() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateSubtitle()
	})
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *BlockHeroUpsertBulk) ClearSubtitle() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearSubtitle()
	})
}

// SetCtaButtons sets the "cta_buttons" field.
func (u *BlockHeroUpsertBulk) SetCtaButtons(v []map[string]interface{}) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetCtaButtons(v)
	})
}

// UpdateCtaButtons sets the "cta_buttons" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateCtaButtons() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateCtaButtons()
	})
}

// ClearCtaButtons clears the value of the "cta_buttons" field.
func (u *BlockHeroUpsertBulk) ClearCtaButtons() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearCtaButtons()
	})
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *BlockHeroUpsertBulk) SetBackgroundImageURL(v string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBackgroundImageURL(v)
	})
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateBackgroundImageURL() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBackgroundImageURL()
	})
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *BlockHeroUpsertBulk) ClearBackgroundImageURL() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBackgroundImageURL()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockHeroUpsertBulk) SetBadge(v map[string]string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateBadge() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockHeroUpsertBulk) ClearBadge() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBadge()
	})
}

// SetDescription sets the "description" field.
func (u *BlockHeroUpsertBulk) SetDescription(v map[string]string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateDescription() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockHeroUpsertBulk) ClearDescription() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearDescription()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockHeroUpsertBulk) SetTextAlign(v blockhero.TextAlign) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateTextAlign() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockHeroUpsertBulk) SetColorScheme(v blockhero.ColorScheme) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateColorScheme() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateColorScheme()
	})
}

// SetMinHeight sets the "min_height" field.
func (u *BlockHeroUpsertBulk) SetMinHeight(v string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetMinHeight(v)
	})
}

// UpdateMinHeight sets the "min_height" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateMinHeight() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateMinHeight()
	})
}

// ClearMinHeight clears the value of the "min_height" field.
func (u *BlockHeroUpsertBulk) ClearMinHeight() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearMinHeight()
	})
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (u *BlockHeroUpsertBulk) SetBackgroundVideoURL(v string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetBackgroundVideoURL(v)
	})
}

// UpdateBackgroundVideoURL sets the "background_video_url" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateBackgroundVideoURL() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateBackgroundVideoURL()
	})
}

// ClearBackgroundVideoURL clears the value of the "background_video_url" field.
func (u *BlockHeroUpsertBulk) ClearBackgroundVideoURL() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearBackgroundVideoURL()
	})
}

// SetOverlayColor sets the "overlay_color" field.
func (u *BlockHeroUpsertBulk) SetOverlayColor(v string) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetOverlayColor(v)
	})
}

// UpdateOverlayColor sets the "overlay_color" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateOverlayColor() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateOverlayColor()
	})
}

// ClearOverlayColor clears the value of the "overlay_color" field.
func (u *BlockHeroUpsertBulk) ClearOverlayColor() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearOverlayColor()
	})
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (u *BlockHeroUpsertBulk) SetOverlayOpacity(v float64) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.SetOverlayOpacity(v)
	})
}

// AddOverlayOpacity adds v to the "overlay_opacity" field.
func (u *BlockHeroUpsertBulk) AddOverlayOpacity(v float64) *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.AddOverlayOpacity(v)
	})
}

// UpdateOverlayOpacity sets the "overlay_opacity" field to the value that was provided on create.
func (u *BlockHeroUpsertBulk) UpdateOverlayOpacity() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.UpdateOverlayOpacity()
	})
}

// ClearOverlayOpacity clears the value of the "overlay_opacity" field.
func (u *BlockHeroUpsertBulk) ClearOverlayOpacity() *BlockHeroUpsertBulk {
	return u.Update(func(s *BlockHeroUpsert) {
		s.ClearOverlayOpacity()
	})
}

// Exec executes the query.
func (u *BlockHeroUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockHeroCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockHeroCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockHeroUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
