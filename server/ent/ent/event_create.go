// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/agenda"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (_c *EventCreate) SetTitle(v map[string]string) *EventCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *EventCreate) SetDescription(v map[string]interface{}) *EventCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetEventType sets the "event_type" field.
func (_c *EventCreate) SetEventType(v string) *EventCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *EventCreate) SetStartDate(v time.Time) *EventCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *EventCreate) SetEndDate(v time.Time) *EventCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetCapacity sets the "capacity" field.
func (_c *EventCreate) SetCapacity(v int) *EventCreate {
	_c.mutation.SetCapacity(v)
	return _c
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_c *EventCreate) SetNillableCapacity(v *int) *EventCreate {
	if v != nil {
		_c.SetCapacity(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *EventCreate) SetStatus(v event.Status) *EventCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *EventCreate) SetNillableStatus(v *event.Status) *EventCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetIsVirtual sets the "is_virtual" field.
func (_c *EventCreate) SetIsVirtual(v bool) *EventCreate {
	_c.mutation.SetIsVirtual(v)
	return _c
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (_c *EventCreate) SetNillableIsVirtual(v *bool) *EventCreate {
	if v != nil {
		_c.SetIsVirtual(*v)
	}
	return _c
}

// SetMeetingURL sets the "meeting_url" field.
func (_c *EventCreate) SetMeetingURL(v string) *EventCreate {
	_c.mutation.SetMeetingURL(v)
	return _c
}

// SetNillableMeetingURL sets the "meeting_url" field if the given value is not nil.
func (_c *EventCreate) SetNillableMeetingURL(v *string) *EventCreate {
	if v != nil {
		_c.SetMeetingURL(*v)
	}
	return _c
}

// SetRegistrationRequired sets the "registration_required" field.
func (_c *EventCreate) SetRegistrationRequired(v bool) *EventCreate {
	_c.mutation.SetRegistrationRequired(v)
	return _c
}

// SetNillableRegistrationRequired sets the "registration_required" field if the given value is not nil.
func (_c *EventCreate) SetNillableRegistrationRequired(v *bool) *EventCreate {
	if v != nil {
		_c.SetRegistrationRequired(*v)
	}
	return _c
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (_c *EventCreate) SetRegistrationDeadline(v time.Time) *EventCreate {
	_c.mutation.SetRegistrationDeadline(v)
	return _c
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (_c *EventCreate) SetNillableRegistrationDeadline(v *time.Time) *EventCreate {
	if v != nil {
		_c.SetRegistrationDeadline(*v)
	}
	return _c
}

// SetRequiresApproval sets the "requires_approval" field.
func (_c *EventCreate) SetRequiresApproval(v bool) *EventCreate {
	_c.mutation.SetRequiresApproval(v)
	return _c
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_c *EventCreate) SetNillableRequiresApproval(v *bool) *EventCreate {
	if v != nil {
		_c.SetRequiresApproval(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *EventCreate) SetTags(v []string) *EventCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *EventCreate) SetImageURL(v string) *EventCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *EventCreate) SetNillableImageURL(v *string) *EventCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (_c *EventCreate) SetCorporateVolunteerFriendly(v bool) *EventCreate {
	_c.mutation.SetCorporateVolunteerFriendly(v)
	return _c
}

// SetNillableCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field if the given value is not nil.
func (_c *EventCreate) SetNillableCorporateVolunteerFriendly(v *bool) *EventCreate {
	if v != nil {
		_c.SetCorporateVolunteerFriendly(*v)
	}
	return _c
}

// SetAlumniOnly sets the "alumni_only" field.
func (_c *EventCreate) SetAlumniOnly(v bool) *EventCreate {
	_c.mutation.SetAlumniOnly(v)
	return _c
}

// SetNillableAlumniOnly sets the "alumni_only" field if the given value is not nil.
func (_c *EventCreate) SetNillableAlumniOnly(v *bool) *EventCreate {
	if v != nil {
		_c.SetAlumniOnly(*v)
	}
	return _c
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (_c *EventCreate) SetMajorDonorOnly(v bool) *EventCreate {
	_c.mutation.SetMajorDonorOnly(v)
	return _c
}

// SetNillableMajorDonorOnly sets the "major_donor_only" field if the given value is not nil.
func (_c *EventCreate) SetNillableMajorDonorOnly(v *bool) *EventCreate {
	if v != nil {
		_c.SetMajorDonorOnly(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *EventCreate) SetCreatedAt(v time.Time) *EventCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *EventCreate) SetNillableCreatedAt(v *time.Time) *EventCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *EventCreate) SetUpdatedAt(v time.Time) *EventCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *EventCreate) SetNillableUpdatedAt(v *time.Time) *EventCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *EventCreate) SetProgramID(id int) *EventCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_c *EventCreate) SetNillableProgramID(id *int) *EventCreate {
	if id != nil {
		_c = _c.SetProgramID(*id)
	}
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *EventCreate) SetProgram(v *Program) *EventCreate {
	return _c.SetProgramID(v.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_c *EventCreate) SetCreatedByID(id int) *EventCreate {
	_c.mutation.SetCreatedByID(id)
	return _c
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_c *EventCreate) SetCreatedBy(v *User) *EventCreate {
	return _c.SetCreatedByID(v.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the EventRegistration entity by IDs.
func (_c *EventCreate) AddRegistrationIDs(ids ...int) *EventCreate {
	_c.mutation.AddRegistrationIDs(ids...)
	return _c
}

// AddRegistrations adds the "registrations" edges to the EventRegistration entity.
func (_c *EventCreate) AddRegistrations(v ...*EventRegistration) *EventCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRegistrationIDs(ids...)
}

// SetAgendaID sets the "agenda" edge to the Agenda entity by ID.
func (_c *EventCreate) SetAgendaID(id int) *EventCreate {
	_c.mutation.SetAgendaID(id)
	return _c
}

// SetNillableAgendaID sets the "agenda" edge to the Agenda entity by ID if the given value is not nil.
func (_c *EventCreate) SetNillableAgendaID(id *int) *EventCreate {
	if id != nil {
		_c = _c.SetAgendaID(*id)
	}
	return _c
}

// SetAgenda sets the "agenda" edge to the Agenda entity.
func (_c *EventCreate) SetAgenda(v *Agenda) *EventCreate {
	return _c.SetAgendaID(v.ID)
}

// SetLocationID sets the "location" edge to the Address entity by ID.
func (_c *EventCreate) SetLocationID(id int) *EventCreate {
	_c.mutation.SetLocationID(id)
	return _c
}

// SetNillableLocationID sets the "location" edge to the Address entity by ID if the given value is not nil.
func (_c *EventCreate) SetNillableLocationID(id *int) *EventCreate {
	if id != nil {
		_c = _c.SetLocationID(*id)
	}
	return _c
}

// SetLocation sets the "location" edge to the Address entity.
func (_c *EventCreate) SetLocation(v *Address) *EventCreate {
	return _c.SetLocationID(v.ID)
}

// Mutation returns the EventMutation object of the builder.
func (_c *EventCreate) Mutation() *EventMutation {
	return _c.mutation
}

// Save creates the Event in the database.
func (_c *EventCreate) Save(ctx context.Context) (*Event, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EventCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := event.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.IsVirtual(); !ok {
		v := event.DefaultIsVirtual
		_c.mutation.SetIsVirtual(v)
	}
	if _, ok := _c.mutation.RegistrationRequired(); !ok {
		v := event.DefaultRegistrationRequired
		_c.mutation.SetRegistrationRequired(v)
	}
	if _, ok := _c.mutation.RequiresApproval(); !ok {
		v := event.DefaultRequiresApproval
		_c.mutation.SetRequiresApproval(v)
	}
	if _, ok := _c.mutation.CorporateVolunteerFriendly(); !ok {
		v := event.DefaultCorporateVolunteerFriendly
		_c.mutation.SetCorporateVolunteerFriendly(v)
	}
	if _, ok := _c.mutation.AlumniOnly(); !ok {
		v := event.DefaultAlumniOnly
		_c.mutation.SetAlumniOnly(v)
	}
	if _, ok := _c.mutation.MajorDonorOnly(); !ok {
		v := event.DefaultMajorDonorOnly
		_c.mutation.SetMajorDonorOnly(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := event.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EventCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Event.title"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Event.description"`)}
	}
	if _, ok := _c.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "Event.event_type"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Event.start_date"`)}
	}
	if _, ok := _c.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Event.end_date"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Event.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsVirtual(); !ok {
		return &ValidationError{Name: "is_virtual", err: errors.New(`ent: missing required field "Event.is_virtual"`)}
	}
	if _, ok := _c.mutation.RegistrationRequired(); !ok {
		return &ValidationError{Name: "registration_required", err: errors.New(`ent: missing required field "Event.registration_required"`)}
	}
	if _, ok := _c.mutation.RequiresApproval(); !ok {
		return &ValidationError{Name: "requires_approval", err: errors.New(`ent: missing required field "Event.requires_approval"`)}
	}
	if _, ok := _c.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Event.tags"`)}
	}
	if _, ok := _c.mutation.CorporateVolunteerFriendly(); !ok {
		return &ValidationError{Name: "corporate_volunteer_friendly", err: errors.New(`ent: missing required field "Event.corporate_volunteer_friendly"`)}
	}
	if _, ok := _c.mutation.AlumniOnly(); !ok {
		return &ValidationError{Name: "alumni_only", err: errors.New(`ent: missing required field "Event.alumni_only"`)}
	}
	if _, ok := _c.mutation.MajorDonorOnly(); !ok {
		return &ValidationError{Name: "major_donor_only", err: errors.New(`ent: missing required field "Event.major_donor_only"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	if len(_c.mutation.CreatedByIDs()) == 0 {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required edge "Event.created_by"`)}
	}
	return nil
}

func (_c *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.Capacity(); ok {
		_spec.SetField(event.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.IsVirtual(); ok {
		_spec.SetField(event.FieldIsVirtual, field.TypeBool, value)
		_node.IsVirtual = value
	}
	if value, ok := _c.mutation.MeetingURL(); ok {
		_spec.SetField(event.FieldMeetingURL, field.TypeString, value)
		_node.MeetingURL = value
	}
	if value, ok := _c.mutation.RegistrationRequired(); ok {
		_spec.SetField(event.FieldRegistrationRequired, field.TypeBool, value)
		_node.RegistrationRequired = value
	}
	if value, ok := _c.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
		_node.RegistrationDeadline = value
	}
	if value, ok := _c.mutation.RequiresApproval(); ok {
		_spec.SetField(event.FieldRequiresApproval, field.TypeBool, value)
		_node.RequiresApproval = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.CorporateVolunteerFriendly(); ok {
		_spec.SetField(event.FieldCorporateVolunteerFriendly, field.TypeBool, value)
		_node.CorporateVolunteerFriendly = value
	}
	if value, ok := _c.mutation.AlumniOnly(); ok {
		_spec.SetField(event.FieldAlumniOnly, field.TypeBool, value)
		_node.AlumniOnly = value
	}
	if value, ok := _c.mutation.MajorDonorOnly(); ok {
		_spec.SetField(event.FieldMajorDonorOnly, field.TypeBool, value)
		_node.MajorDonorOnly = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AgendaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	_c.conflict = opts
	return &EventUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: _c,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *EventUpsert) SetTitle(v map[string]string) *EventUpsert {
	u.Set(event.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsert) UpdateTitle() *EventUpsert {
	u.SetExcluded(event.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *EventUpsert) SetDescription(v map[string]interface{}) *EventUpsert {
	u.Set(event.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsert) UpdateDescription() *EventUpsert {
	u.SetExcluded(event.FieldDescription)
	return u
}

// SetEventType sets the "event_type" field.
func (u *EventUpsert) SetEventType(v string) *EventUpsert {
	u.Set(event.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventType() *EventUpsert {
	u.SetExcluded(event.FieldEventType)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsert) SetStartDate(v time.Time) *EventUpsert {
	u.Set(event.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateStartDate() *EventUpsert {
	u.SetExcluded(event.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsert) SetEndDate(v time.Time) *EventUpsert {
	u.Set(event.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateEndDate() *EventUpsert {
	u.SetExcluded(event.FieldEndDate)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsert) SetCapacity(v int) *EventUpsert {
	u.Set(event.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsert) UpdateCapacity() *EventUpsert {
	u.SetExcluded(event.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsert) AddCapacity(v int) *EventUpsert {
	u.Add(event.FieldCapacity, v)
	return u
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsert) ClearCapacity() *EventUpsert {
	u.SetNull(event.FieldCapacity)
	return u
}

// SetStatus sets the "status" field.
func (u *EventUpsert) SetStatus(v event.Status) *EventUpsert {
	u.Set(event.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsert) UpdateStatus() *EventUpsert {
	u.SetExcluded(event.FieldStatus)
	return u
}

// SetIsVirtual sets the "is_virtual" field.
func (u *EventUpsert) SetIsVirtual(v bool) *EventUpsert {
	u.Set(event.FieldIsVirtual, v)
	return u
}

// UpdateIsVirtual sets the "is_virtual" field to the value that was provided on create.
func (u *EventUpsert) UpdateIsVirtual() *EventUpsert {
	u.SetExcluded(event.FieldIsVirtual)
	return u
}

// SetMeetingURL sets the "meeting_url" field.
func (u *EventUpsert) SetMeetingURL(v string) *EventUpsert {
	u.Set(event.FieldMeetingURL, v)
	return u
}

// UpdateMeetingURL sets the "meeting_url" field to the value that was provided on create.
func (u *EventUpsert) UpdateMeetingURL() *EventUpsert {
	u.SetExcluded(event.FieldMeetingURL)
	return u
}

// ClearMeetingURL clears the value of the "meeting_url" field.
func (u *EventUpsert) ClearMeetingURL() *EventUpsert {
	u.SetNull(event.FieldMeetingURL)
	return u
}

// SetRegistrationRequired sets the "registration_required" field.
func (u *EventUpsert) SetRegistrationRequired(v bool) *EventUpsert {
	u.Set(event.FieldRegistrationRequired, v)
	return u
}

// UpdateRegistrationRequired sets the "registration_required" field to the value that was provided on create.
func (u *EventUpsert) UpdateRegistrationRequired() *EventUpsert {
	u.SetExcluded(event.FieldRegistrationRequired)
	return u
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsert) SetRegistrationDeadline(v time.Time) *EventUpsert {
	u.Set(event.FieldRegistrationDeadline, v)
	return u
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsert) UpdateRegistrationDeadline() *EventUpsert {
	u.SetExcluded(event.FieldRegistrationDeadline)
	return u
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsert) ClearRegistrationDeadline() *EventUpsert {
	u.SetNull(event.FieldRegistrationDeadline)
	return u
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *EventUpsert) SetRequiresApproval(v bool) *EventUpsert {
	u.Set(event.FieldRequiresApproval, v)
	return u
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *EventUpsert) UpdateRequiresApproval() *EventUpsert {
	u.SetExcluded(event.FieldRequiresApproval)
	return u
}

// SetTags sets the "tags" field.
func (u *EventUpsert) SetTags(v []string) *EventUpsert {
	u.Set(event.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventUpsert) UpdateTags() *EventUpsert {
	u.SetExcluded(event.FieldTags)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsert) SetImageURL(v string) *EventUpsert {
	u.Set(event.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsert) UpdateImageURL() *EventUpsert {
	u.SetExcluded(event.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *EventUpsert) ClearImageURL() *EventUpsert {
	u.SetNull(event.FieldImageURL)
	return u
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (u *EventUpsert) SetCorporateVolunteerFriendly(v bool) *EventUpsert {
	u.Set(event.FieldCorporateVolunteerFriendly, v)
	return u
}

// UpdateCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field to the value that was provided on create.
func (u *EventUpsert) UpdateCorporateVolunteerFriendly() *EventUpsert {
	u.SetExcluded(event.FieldCorporateVolunteerFriendly)
	return u
}

// SetAlumniOnly sets the "alumni_only" field.
func (u *EventUpsert) SetAlumniOnly(v bool) *EventUpsert {
	u.Set(event.FieldAlumniOnly, v)
	return u
}

// UpdateAlumniOnly sets the "alumni_only" field to the value that was provided on create.
func (u *EventUpsert) UpdateAlumniOnly() *EventUpsert {
	u.SetExcluded(event.FieldAlumniOnly)
	return u
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (u *EventUpsert) SetMajorDonorOnly(v bool) *EventUpsert {
	u.Set(event.FieldMajorDonorOnly, v)
	return u
}

// UpdateMajorDonorOnly sets the "major_donor_only" field to the value that was provided on create.
func (u *EventUpsert) UpdateMajorDonorOnly() *EventUpsert {
	u.SetExcluded(event.FieldMajorDonorOnly)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsert) SetUpdatedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateUpdatedAt() *EventUpsert {
	u.SetExcluded(event.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(event.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *EventUpsertOne) SetTitle(v map[string]string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateTitle() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertOne) SetDescription(v map[string]interface{}) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetEventType sets the "event_type" field.
func (u *EventUpsertOne) SetEventType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventType()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertOne) SetStartDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStartDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertOne) SetEndDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEndDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsertOne) SetCapacity(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsertOne) AddCapacity(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCapacity() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsertOne) ClearCapacity() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearCapacity()
	})
}

// SetStatus sets the "status" field.
func (u *EventUpsertOne) SetStatus(v event.Status) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStatus() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStatus()
	})
}

// SetIsVirtual sets the "is_virtual" field.
func (u *EventUpsertOne) SetIsVirtual(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetIsVirtual(v)
	})
}

// UpdateIsVirtual sets the "is_virtual" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateIsVirtual() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsVirtual()
	})
}

// SetMeetingURL sets the "meeting_url" field.
func (u *EventUpsertOne) SetMeetingURL(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetMeetingURL(v)
	})
}

// UpdateMeetingURL sets the "meeting_url" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateMeetingURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMeetingURL()
	})
}

// ClearMeetingURL clears the value of the "meeting_url" field.
func (u *EventUpsertOne) ClearMeetingURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearMeetingURL()
	})
}

// SetRegistrationRequired sets the "registration_required" field.
func (u *EventUpsertOne) SetRegistrationRequired(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationRequired(v)
	})
}

// UpdateRegistrationRequired sets the "registration_required" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRegistrationRequired() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationRequired()
	})
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsertOne) SetRegistrationDeadline(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationDeadline(v)
	})
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRegistrationDeadline() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationDeadline()
	})
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsertOne) ClearRegistrationDeadline() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearRegistrationDeadline()
	})
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *EventUpsertOne) SetRequiresApproval(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRequiresApproval(v)
	})
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRequiresApproval() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRequiresApproval()
	})
}

// SetTags sets the "tags" field.
func (u *EventUpsertOne) SetTags(v []string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateTags() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTags()
	})
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsertOne) SetImageURL(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateImageURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *EventUpsertOne) ClearImageURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearImageURL()
	})
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (u *EventUpsertOne) SetCorporateVolunteerFriendly(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCorporateVolunteerFriendly(v)
	})
}

// UpdateCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCorporateVolunteerFriendly() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCorporateVolunteerFriendly()
	})
}

// SetAlumniOnly sets the "alumni_only" field.
func (u *EventUpsertOne) SetAlumniOnly(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetAlumniOnly(v)
	})
}

// UpdateAlumniOnly sets the "alumni_only" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateAlumniOnly() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateAlumniOnly()
	})
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (u *EventUpsertOne) SetMajorDonorOnly(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetMajorDonorOnly(v)
	})
}

// UpdateMajorDonorOnly sets the "major_donor_only" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateMajorDonorOnly() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMajorDonorOnly()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertOne) SetUpdatedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUpdatedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (_c *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Event, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	_c.conflict = opts
	return &EventUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: _c,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(event.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *EventUpsertBulk) SetTitle(v map[string]string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateTitle() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertBulk) SetDescription(v map[string]interface{}) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetEventType sets the "event_type" field.
func (u *EventUpsertBulk) SetEventType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventType()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertBulk) SetStartDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStartDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertBulk) SetEndDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEndDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// SetCapacity sets the "capacity" field.
func (u *EventUpsertBulk) SetCapacity(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *EventUpsertBulk) AddCapacity(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCapacity() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *EventUpsertBulk) ClearCapacity() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearCapacity()
	})
}

// SetStatus sets the "status" field.
func (u *EventUpsertBulk) SetStatus(v event.Status) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStatus() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStatus()
	})
}

// SetIsVirtual sets the "is_virtual" field.
func (u *EventUpsertBulk) SetIsVirtual(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetIsVirtual(v)
	})
}

// UpdateIsVirtual sets the "is_virtual" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateIsVirtual() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsVirtual()
	})
}

// SetMeetingURL sets the "meeting_url" field.
func (u *EventUpsertBulk) SetMeetingURL(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetMeetingURL(v)
	})
}

// UpdateMeetingURL sets the "meeting_url" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateMeetingURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMeetingURL()
	})
}

// ClearMeetingURL clears the value of the "meeting_url" field.
func (u *EventUpsertBulk) ClearMeetingURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearMeetingURL()
	})
}

// SetRegistrationRequired sets the "registration_required" field.
func (u *EventUpsertBulk) SetRegistrationRequired(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationRequired(v)
	})
}

// UpdateRegistrationRequired sets the "registration_required" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRegistrationRequired() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationRequired()
	})
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsertBulk) SetRegistrationDeadline(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationDeadline(v)
	})
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRegistrationDeadline() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationDeadline()
	})
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsertBulk) ClearRegistrationDeadline() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearRegistrationDeadline()
	})
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *EventUpsertBulk) SetRequiresApproval(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRequiresApproval(v)
	})
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRequiresApproval() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRequiresApproval()
	})
}

// SetTags sets the "tags" field.
func (u *EventUpsertBulk) SetTags(v []string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateTags() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTags()
	})
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsertBulk) SetImageURL(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateImageURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *EventUpsertBulk) ClearImageURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearImageURL()
	})
}

// SetCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field.
func (u *EventUpsertBulk) SetCorporateVolunteerFriendly(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCorporateVolunteerFriendly(v)
	})
}

// UpdateCorporateVolunteerFriendly sets the "corporate_volunteer_friendly" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCorporateVolunteerFriendly() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCorporateVolunteerFriendly()
	})
}

// SetAlumniOnly sets the "alumni_only" field.
func (u *EventUpsertBulk) SetAlumniOnly(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetAlumniOnly(v)
	})
}

// UpdateAlumniOnly sets the "alumni_only" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateAlumniOnly() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateAlumniOnly()
	})
}

// SetMajorDonorOnly sets the "major_donor_only" field.
func (u *EventUpsertBulk) SetMajorDonorOnly(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetMajorDonorOnly(v)
	})
}

// UpdateMajorDonorOnly sets the "major_donor_only" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateMajorDonorOnly() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMajorDonorOnly()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertBulk) SetUpdatedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUpdatedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
