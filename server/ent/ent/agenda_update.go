// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/event"
	"awe/ent/ent/mentorshipsession"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgendaUpdate is the builder for updating Agenda entities.
type AgendaUpdate struct {
	config
	hooks    []Hook
	mutation *AgendaMutation
}

// Where appends a list predicates to the AgendaUpdate builder.
func (_u *AgendaUpdate) Where(ps ...predicate.Agenda) *AgendaUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *AgendaUpdate) SetStatus(v string) *AgendaUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AgendaUpdate) SetNillableStatus(v *string) *AgendaUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *AgendaUpdate) SetEventID(id int) *AgendaUpdate {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *AgendaUpdate) SetEvent(v *Event) *AgendaUpdate {
	return _u.SetEventID(v.ID)
}

// AddItemIDs adds the "items" edge to the AgendaItem entity by IDs.
func (_u *AgendaUpdate) AddItemIDs(ids ...int) *AgendaUpdate {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the AgendaItem entity.
func (_u *AgendaUpdate) AddItems(v ...*AgendaItem) *AgendaUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// SetMentorshipSessionID sets the "mentorship_session" edge to the MentorshipSession entity by ID.
func (_u *AgendaUpdate) SetMentorshipSessionID(id int) *AgendaUpdate {
	_u.mutation.SetMentorshipSessionID(id)
	return _u
}

// SetNillableMentorshipSessionID sets the "mentorship_session" edge to the MentorshipSession entity by ID if the given value is not nil.
func (_u *AgendaUpdate) SetNillableMentorshipSessionID(id *int) *AgendaUpdate {
	if id != nil {
		_u = _u.SetMentorshipSessionID(*id)
	}
	return _u
}

// SetMentorshipSession sets the "mentorship_session" edge to the MentorshipSession entity.
func (_u *AgendaUpdate) SetMentorshipSession(v *MentorshipSession) *AgendaUpdate {
	return _u.SetMentorshipSessionID(v.ID)
}

// Mutation returns the AgendaMutation object of the builder.
func (_u *AgendaUpdate) Mutation() *AgendaMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *AgendaUpdate) ClearEvent() *AgendaUpdate {
	_u.mutation.ClearEvent()
	return _u
}

// ClearItems clears all "items" edges to the AgendaItem entity.
func (_u *AgendaUpdate) ClearItems() *AgendaUpdate {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to AgendaItem entities by IDs.
func (_u *AgendaUpdate) RemoveItemIDs(ids ...int) *AgendaUpdate {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to AgendaItem entities.
func (_u *AgendaUpdate) RemoveItems(v ...*AgendaItem) *AgendaUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearMentorshipSession clears the "mentorship_session" edge to the MentorshipSession entity.
func (_u *AgendaUpdate) ClearMentorshipSession() *AgendaUpdate {
	_u.mutation.ClearMentorshipSession()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AgendaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AgendaUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AgendaUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AgendaUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AgendaUpdate) check() error {
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agenda.event"`)
	}
	return nil
}

func (_u *AgendaUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agenda.Table, agenda.Columns, sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(agenda.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.EventTable,
			Columns: []string{agenda.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.EventTable,
			Columns: []string{agenda.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.MentorshipSessionTable,
			Columns: []string{agenda.MentorshipSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.MentorshipSessionTable,
			Columns: []string{agenda.MentorshipSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenda.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AgendaUpdateOne is the builder for updating a single Agenda entity.
type AgendaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgendaMutation
}

// SetStatus sets the "status" field.
func (_u *AgendaUpdateOne) SetStatus(v string) *AgendaUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AgendaUpdateOne) SetNillableStatus(v *string) *AgendaUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *AgendaUpdateOne) SetEventID(id int) *AgendaUpdateOne {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *AgendaUpdateOne) SetEvent(v *Event) *AgendaUpdateOne {
	return _u.SetEventID(v.ID)
}

// AddItemIDs adds the "items" edge to the AgendaItem entity by IDs.
func (_u *AgendaUpdateOne) AddItemIDs(ids ...int) *AgendaUpdateOne {
	_u.mutation.AddItemIDs(ids...)
	return _u
}

// AddItems adds the "items" edges to the AgendaItem entity.
func (_u *AgendaUpdateOne) AddItems(v ...*AgendaItem) *AgendaUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddItemIDs(ids...)
}

// SetMentorshipSessionID sets the "mentorship_session" edge to the MentorshipSession entity by ID.
func (_u *AgendaUpdateOne) SetMentorshipSessionID(id int) *AgendaUpdateOne {
	_u.mutation.SetMentorshipSessionID(id)
	return _u
}

// SetNillableMentorshipSessionID sets the "mentorship_session" edge to the MentorshipSession entity by ID if the given value is not nil.
func (_u *AgendaUpdateOne) SetNillableMentorshipSessionID(id *int) *AgendaUpdateOne {
	if id != nil {
		_u = _u.SetMentorshipSessionID(*id)
	}
	return _u
}

// SetMentorshipSession sets the "mentorship_session" edge to the MentorshipSession entity.
func (_u *AgendaUpdateOne) SetMentorshipSession(v *MentorshipSession) *AgendaUpdateOne {
	return _u.SetMentorshipSessionID(v.ID)
}

// Mutation returns the AgendaMutation object of the builder.
func (_u *AgendaUpdateOne) Mutation() *AgendaMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *AgendaUpdateOne) ClearEvent() *AgendaUpdateOne {
	_u.mutation.ClearEvent()
	return _u
}

// ClearItems clears all "items" edges to the AgendaItem entity.
func (_u *AgendaUpdateOne) ClearItems() *AgendaUpdateOne {
	_u.mutation.ClearItems()
	return _u
}

// RemoveItemIDs removes the "items" edge to AgendaItem entities by IDs.
func (_u *AgendaUpdateOne) RemoveItemIDs(ids ...int) *AgendaUpdateOne {
	_u.mutation.RemoveItemIDs(ids...)
	return _u
}

// RemoveItems removes "items" edges to AgendaItem entities.
func (_u *AgendaUpdateOne) RemoveItems(v ...*AgendaItem) *AgendaUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveItemIDs(ids...)
}

// ClearMentorshipSession clears the "mentorship_session" edge to the MentorshipSession entity.
func (_u *AgendaUpdateOne) ClearMentorshipSession() *AgendaUpdateOne {
	_u.mutation.ClearMentorshipSession()
	return _u
}

// Where appends a list predicates to the AgendaUpdate builder.
func (_u *AgendaUpdateOne) Where(ps ...predicate.Agenda) *AgendaUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AgendaUpdateOne) Select(field string, fields ...string) *AgendaUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Agenda entity.
func (_u *AgendaUpdateOne) Save(ctx context.Context) (*Agenda, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AgendaUpdateOne) SaveX(ctx context.Context) *Agenda {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AgendaUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AgendaUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AgendaUpdateOne) check() error {
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agenda.event"`)
	}
	return nil
}

func (_u *AgendaUpdateOne) sqlSave(ctx context.Context) (_node *Agenda, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agenda.Table, agenda.Columns, sqlgraph.NewFieldSpec(agenda.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agenda.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agenda.FieldID)
		for _, f := range fields {
			if !agenda.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agenda.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(agenda.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.EventTable,
			Columns: []string{agenda.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.EventTable,
			Columns: []string{agenda.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedItemsIDs(); len(nodes) > 0 && !_u.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.MentorshipSessionTable,
			Columns: []string{agenda.MentorshipSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.MentorshipSessionTable,
			Columns: []string{agenda.MentorshipSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agenda{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agenda.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
