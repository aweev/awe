// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/contentblock"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlockVideoEmbed is the model entity for the BlockVideoEmbed schema.
type BlockVideoEmbed struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// Badge holds the value of the "badge" field.
	Badge map[string]string `json:"badge,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// AspectRatio holds the value of the "aspect_ratio" field.
	AspectRatio string `json:"aspect_ratio,omitempty"`
	// Autoplay holds the value of the "autoplay" field.
	Autoplay bool `json:"autoplay,omitempty"`
	// ShowControls holds the value of the "show_controls" field.
	ShowControls bool `json:"show_controls,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockVideoEmbedQuery when eager-loading is set.
	Edges                           BlockVideoEmbedEdges `json:"edges"`
	content_block_block_video_embed *int
	selectValues                    sql.SelectValues
}

// BlockVideoEmbedEdges holds the relations/edges for other nodes in the graph.
type BlockVideoEmbedEdges struct {
	// ContentBlock holds the value of the content_block edge.
	ContentBlock *ContentBlock `json:"content_block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContentBlockOrErr returns the ContentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockVideoEmbedEdges) ContentBlockOrErr() (*ContentBlock, error) {
	if e.ContentBlock != nil {
		return e.ContentBlock, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contentblock.Label}
	}
	return nil, &NotLoadedError{edge: "content_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockVideoEmbed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockvideoembed.FieldBadge, blockvideoembed.FieldTitle, blockvideoembed.FieldDescription:
			values[i] = new([]byte)
		case blockvideoembed.FieldAutoplay, blockvideoembed.FieldShowControls:
			values[i] = new(sql.NullBool)
		case blockvideoembed.FieldID:
			values[i] = new(sql.NullInt64)
		case blockvideoembed.FieldInternalName, blockvideoembed.FieldVideoURL, blockvideoembed.FieldThumbnailURL, blockvideoembed.FieldAspectRatio:
			values[i] = new(sql.NullString)
		case blockvideoembed.FieldCreatedAt, blockvideoembed.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blockvideoembed.ForeignKeys[0]: // content_block_block_video_embed
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockVideoEmbed fields.
func (_m *BlockVideoEmbed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockvideoembed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case blockvideoembed.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				_m.InternalName = value.String
			}
		case blockvideoembed.FieldBadge:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field badge", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Badge); err != nil {
					return fmt.Errorf("unmarshal field badge: %w", err)
				}
			}
		case blockvideoembed.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case blockvideoembed.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case blockvideoembed.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				_m.VideoURL = value.String
			}
		case blockvideoembed.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				_m.ThumbnailURL = value.String
			}
		case blockvideoembed.FieldAspectRatio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aspect_ratio", values[i])
			} else if value.Valid {
				_m.AspectRatio = value.String
			}
		case blockvideoembed.FieldAutoplay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field autoplay", values[i])
			} else if value.Valid {
				_m.Autoplay = value.Bool
			}
		case blockvideoembed.FieldShowControls:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_controls", values[i])
			} else if value.Valid {
				_m.ShowControls = value.Bool
			}
		case blockvideoembed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case blockvideoembed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case blockvideoembed.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field content_block_block_video_embed", value)
			} else if value.Valid {
				_m.content_block_block_video_embed = new(int)
				*_m.content_block_block_video_embed = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockVideoEmbed.
// This includes values selected through modifiers, order, etc.
func (_m *BlockVideoEmbed) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryContentBlock queries the "content_block" edge of the BlockVideoEmbed entity.
func (_m *BlockVideoEmbed) QueryContentBlock() *ContentBlockQuery {
	return NewBlockVideoEmbedClient(_m.config).QueryContentBlock(_m)
}

// Update returns a builder for updating this BlockVideoEmbed.
// Note that you need to call BlockVideoEmbed.Unwrap() before calling this method if this BlockVideoEmbed
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BlockVideoEmbed) Update() *BlockVideoEmbedUpdateOne {
	return NewBlockVideoEmbedClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BlockVideoEmbed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BlockVideoEmbed) Unwrap() *BlockVideoEmbed {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockVideoEmbed is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BlockVideoEmbed) String() string {
	var builder strings.Builder
	builder.WriteString("BlockVideoEmbed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("internal_name=")
	builder.WriteString(_m.InternalName)
	builder.WriteString(", ")
	builder.WriteString("badge=")
	builder.WriteString(fmt.Sprintf("%v", _m.Badge))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(_m.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(_m.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("aspect_ratio=")
	builder.WriteString(_m.AspectRatio)
	builder.WriteString(", ")
	builder.WriteString("autoplay=")
	builder.WriteString(fmt.Sprintf("%v", _m.Autoplay))
	builder.WriteString(", ")
	builder.WriteString("show_controls=")
	builder.WriteString(fmt.Sprintf("%v", _m.ShowControls))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlockVideoEmbeds is a parsable slice of BlockVideoEmbed.
type BlockVideoEmbeds []*BlockVideoEmbed
