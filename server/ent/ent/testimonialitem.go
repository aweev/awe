// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/successstory"
	"awe/ent/ent/testimonialitem"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TestimonialItem is the model entity for the TestimonialItem schema.
type TestimonialItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Quote holds the value of the "quote" field.
	Quote map[string]string `json:"quote,omitempty"`
	// AuthorName holds the value of the "author_name" field.
	AuthorName string `json:"author_name,omitempty"`
	// AuthorRole holds the value of the "author_role" field.
	AuthorRole map[string]string `json:"author_role,omitempty"`
	// AuthorImageURL holds the value of the "author_image_url" field.
	AuthorImageURL string `json:"author_image_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestimonialItemQuery when eager-loading is set.
	Edges                           TestimonialItemEdges `json:"edges"`
	block_testimonials_testimonials *int
	success_story_testimonials      *int
	testimonial_item_success_story  *int
	selectValues                    sql.SelectValues
}

// TestimonialItemEdges holds the relations/edges for other nodes in the graph.
type TestimonialItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockTestimonials `json:"block,omitempty"`
	// SuccessStory holds the value of the success_story edge.
	SuccessStory *SuccessStory `json:"success_story,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestimonialItemEdges) BlockOrErr() (*BlockTestimonials, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blocktestimonials.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// SuccessStoryOrErr returns the SuccessStory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestimonialItemEdges) SuccessStoryOrErr() (*SuccessStory, error) {
	if e.SuccessStory != nil {
		return e.SuccessStory, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: successstory.Label}
	}
	return nil, &NotLoadedError{edge: "success_story"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestimonialItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testimonialitem.FieldQuote, testimonialitem.FieldAuthorRole:
			values[i] = new([]byte)
		case testimonialitem.FieldID, testimonialitem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case testimonialitem.FieldAuthorName, testimonialitem.FieldAuthorImageURL:
			values[i] = new(sql.NullString)
		case testimonialitem.ForeignKeys[0]: // block_testimonials_testimonials
			values[i] = new(sql.NullInt64)
		case testimonialitem.ForeignKeys[1]: // success_story_testimonials
			values[i] = new(sql.NullInt64)
		case testimonialitem.ForeignKeys[2]: // testimonial_item_success_story
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestimonialItem fields.
func (_m *TestimonialItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testimonialitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case testimonialitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case testimonialitem.FieldQuote:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field quote", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Quote); err != nil {
					return fmt.Errorf("unmarshal field quote: %w", err)
				}
			}
		case testimonialitem.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				_m.AuthorName = value.String
			}
		case testimonialitem.FieldAuthorRole:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field author_role", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.AuthorRole); err != nil {
					return fmt.Errorf("unmarshal field author_role: %w", err)
				}
			}
		case testimonialitem.FieldAuthorImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_image_url", values[i])
			} else if value.Valid {
				_m.AuthorImageURL = value.String
			}
		case testimonialitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_testimonials_testimonials", value)
			} else if value.Valid {
				_m.block_testimonials_testimonials = new(int)
				*_m.block_testimonials_testimonials = int(value.Int64)
			}
		case testimonialitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field success_story_testimonials", value)
			} else if value.Valid {
				_m.success_story_testimonials = new(int)
				*_m.success_story_testimonials = int(value.Int64)
			}
		case testimonialitem.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field testimonial_item_success_story", value)
			} else if value.Valid {
				_m.testimonial_item_success_story = new(int)
				*_m.testimonial_item_success_story = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestimonialItem.
// This includes values selected through modifiers, order, etc.
func (_m *TestimonialItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the TestimonialItem entity.
func (_m *TestimonialItem) QueryBlock() *BlockTestimonialsQuery {
	return NewTestimonialItemClient(_m.config).QueryBlock(_m)
}

// QuerySuccessStory queries the "success_story" edge of the TestimonialItem entity.
func (_m *TestimonialItem) QuerySuccessStory() *SuccessStoryQuery {
	return NewTestimonialItemClient(_m.config).QuerySuccessStory(_m)
}

// Update returns a builder for updating this TestimonialItem.
// Note that you need to call TestimonialItem.Unwrap() before calling this method if this TestimonialItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TestimonialItem) Update() *TestimonialItemUpdateOne {
	return NewTestimonialItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TestimonialItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TestimonialItem) Unwrap() *TestimonialItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestimonialItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TestimonialItem) String() string {
	var builder strings.Builder
	builder.WriteString("TestimonialItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("quote=")
	builder.WriteString(fmt.Sprintf("%v", _m.Quote))
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(_m.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("author_role=")
	builder.WriteString(fmt.Sprintf("%v", _m.AuthorRole))
	builder.WriteString(", ")
	builder.WriteString("author_image_url=")
	builder.WriteString(_m.AuthorImageURL)
	builder.WriteByte(')')
	return builder.String()
}

// TestimonialItems is a parsable slice of TestimonialItem.
type TestimonialItems []*TestimonialItem
