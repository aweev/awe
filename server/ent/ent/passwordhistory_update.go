// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PasswordHistoryUpdate is the builder for updating PasswordHistory entities.
type PasswordHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordHistoryMutation
}

// Where appends a list predicates to the PasswordHistoryUpdate builder.
func (_u *PasswordHistoryUpdate) Where(ps ...predicate.PasswordHistory) *PasswordHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *PasswordHistoryUpdate) SetHashedPassword(v string) *PasswordHistoryUpdate {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *PasswordHistoryUpdate) SetNillableHashedPassword(v *string) *PasswordHistoryUpdate {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *PasswordHistoryUpdate) SetUserID(id int) *PasswordHistoryUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PasswordHistoryUpdate) SetUser(v *User) *PasswordHistoryUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the PasswordHistoryMutation object of the builder.
func (_u *PasswordHistoryUpdate) Mutation() *PasswordHistoryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PasswordHistoryUpdate) ClearUser() *PasswordHistoryUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PasswordHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PasswordHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PasswordHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PasswordHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PasswordHistoryUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PasswordHistory.user"`)
	}
	return nil
}

func (_u *PasswordHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordhistory.Table, passwordhistory.Columns, sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(passwordhistory.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PasswordHistoryUpdateOne is the builder for updating a single PasswordHistory entity.
type PasswordHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordHistoryMutation
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *PasswordHistoryUpdateOne) SetHashedPassword(v string) *PasswordHistoryUpdateOne {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *PasswordHistoryUpdateOne) SetNillableHashedPassword(v *string) *PasswordHistoryUpdateOne {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *PasswordHistoryUpdateOne) SetUserID(id int) *PasswordHistoryUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PasswordHistoryUpdateOne) SetUser(v *User) *PasswordHistoryUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the PasswordHistoryMutation object of the builder.
func (_u *PasswordHistoryUpdateOne) Mutation() *PasswordHistoryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PasswordHistoryUpdateOne) ClearUser() *PasswordHistoryUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the PasswordHistoryUpdate builder.
func (_u *PasswordHistoryUpdateOne) Where(ps ...predicate.PasswordHistory) *PasswordHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PasswordHistoryUpdateOne) Select(field string, fields ...string) *PasswordHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PasswordHistory entity.
func (_u *PasswordHistoryUpdateOne) Save(ctx context.Context) (*PasswordHistory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PasswordHistoryUpdateOne) SaveX(ctx context.Context) *PasswordHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PasswordHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PasswordHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PasswordHistoryUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PasswordHistory.user"`)
	}
	return nil
}

func (_u *PasswordHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PasswordHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordhistory.Table, passwordhistory.Columns, sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PasswordHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordhistory.FieldID)
		for _, f := range fields {
			if !passwordhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != passwordhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(passwordhistory.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PasswordHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
