// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/organization"
	"awe/ent/ent/program"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Grant is the model entity for the Grant schema.
type Grant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GrantAmount holds the value of the "grant_amount" field.
	GrantAmount float64 `json:"grant_amount,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Status holds the value of the "status" field.
	Status grant.Status `json:"status,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals []string `json:"goals,omitempty"`
	// GrantReference holds the value of the "grant_reference" field.
	GrantReference string `json:"grant_reference,omitempty"`
	// ContactPerson holds the value of the "contact_person" field.
	ContactPerson string `json:"contact_person,omitempty"`
	// ContactEmail holds the value of the "contact_email" field.
	ContactEmail string `json:"contact_email,omitempty"`
	// RenewalEligible holds the value of the "renewal_eligible" field.
	RenewalEligible bool `json:"renewal_eligible,omitempty"`
	// NextReviewDate holds the value of the "next_review_date" field.
	NextReviewDate time.Time `json:"next_review_date,omitempty"`
	// RequiresMatching holds the value of the "requires_matching" field.
	RequiresMatching bool `json:"requires_matching,omitempty"`
	// MatchingAmount holds the value of the "matching_amount" field.
	MatchingAmount float64 `json:"matching_amount,omitempty"`
	// Restrictions holds the value of the "restrictions" field.
	Restrictions []string `json:"restrictions,omitempty"`
	// ReportingSchedule holds the value of the "reporting_schedule" field.
	ReportingSchedule map[string]string `json:"reporting_schedule,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantQuery when eager-loading is set.
	Edges               GrantEdges `json:"edges"`
	organization_grants *int
	program_grants      *int
	selectValues        sql.SelectValues
}

// GrantEdges holds the relations/edges for other nodes in the graph.
type GrantEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// Reports holds the value of the reports edge.
	Reports []*GrantReport `json:"reports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// ReportsOrErr returns the Reports value or an error if the edge
// was not loaded in eager-loading.
func (e GrantEdges) ReportsOrErr() ([]*GrantReport, error) {
	if e.loadedTypes[2] {
		return e.Reports, nil
	}
	return nil, &NotLoadedError{edge: "reports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grant.FieldGoals, grant.FieldRestrictions, grant.FieldReportingSchedule:
			values[i] = new([]byte)
		case grant.FieldRenewalEligible, grant.FieldRequiresMatching:
			values[i] = new(sql.NullBool)
		case grant.FieldGrantAmount, grant.FieldMatchingAmount:
			values[i] = new(sql.NullFloat64)
		case grant.FieldID:
			values[i] = new(sql.NullInt64)
		case grant.FieldName, grant.FieldStatus, grant.FieldGrantReference, grant.FieldContactPerson, grant.FieldContactEmail:
			values[i] = new(sql.NullString)
		case grant.FieldStartDate, grant.FieldEndDate, grant.FieldNextReviewDate, grant.FieldCreatedAt, grant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case grant.ForeignKeys[0]: // organization_grants
			values[i] = new(sql.NullInt64)
		case grant.ForeignKeys[1]: // program_grants
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grant fields.
func (_m *Grant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case grant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case grant.FieldGrantAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field grant_amount", values[i])
			} else if value.Valid {
				_m.GrantAmount = value.Float64
			}
		case grant.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case grant.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case grant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = grant.Status(value.String)
			}
		case grant.FieldGoals:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Goals); err != nil {
					return fmt.Errorf("unmarshal field goals: %w", err)
				}
			}
		case grant.FieldGrantReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grant_reference", values[i])
			} else if value.Valid {
				_m.GrantReference = value.String
			}
		case grant.FieldContactPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person", values[i])
			} else if value.Valid {
				_m.ContactPerson = value.String
			}
		case grant.FieldContactEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_email", values[i])
			} else if value.Valid {
				_m.ContactEmail = value.String
			}
		case grant.FieldRenewalEligible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_eligible", values[i])
			} else if value.Valid {
				_m.RenewalEligible = value.Bool
			}
		case grant.FieldNextReviewDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_review_date", values[i])
			} else if value.Valid {
				_m.NextReviewDate = value.Time
			}
		case grant.FieldRequiresMatching:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_matching", values[i])
			} else if value.Valid {
				_m.RequiresMatching = value.Bool
			}
		case grant.FieldMatchingAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field matching_amount", values[i])
			} else if value.Valid {
				_m.MatchingAmount = value.Float64
			}
		case grant.FieldRestrictions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field restrictions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Restrictions); err != nil {
					return fmt.Errorf("unmarshal field restrictions: %w", err)
				}
			}
		case grant.FieldReportingSchedule:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reporting_schedule", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ReportingSchedule); err != nil {
					return fmt.Errorf("unmarshal field reporting_schedule: %w", err)
				}
			}
		case grant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case grant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case grant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field organization_grants", value)
			} else if value.Valid {
				_m.organization_grants = new(int)
				*_m.organization_grants = int(value.Int64)
			}
		case grant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_grants", value)
			} else if value.Valid {
				_m.program_grants = new(int)
				*_m.program_grants = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Grant.
// This includes values selected through modifiers, order, etc.
func (_m *Grant) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Grant entity.
func (_m *Grant) QueryOrganization() *OrganizationQuery {
	return NewGrantClient(_m.config).QueryOrganization(_m)
}

// QueryProgram queries the "program" edge of the Grant entity.
func (_m *Grant) QueryProgram() *ProgramQuery {
	return NewGrantClient(_m.config).QueryProgram(_m)
}

// QueryReports queries the "reports" edge of the Grant entity.
func (_m *Grant) QueryReports() *GrantReportQuery {
	return NewGrantClient(_m.config).QueryReports(_m)
}

// Update returns a builder for updating this Grant.
// Note that you need to call Grant.Unwrap() before calling this method if this Grant
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Grant) Update() *GrantUpdateOne {
	return NewGrantClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Grant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Grant) Unwrap() *Grant {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grant is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Grant) String() string {
	var builder strings.Builder
	builder.WriteString("Grant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("grant_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.GrantAmount))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", _m.Goals))
	builder.WriteString(", ")
	builder.WriteString("grant_reference=")
	builder.WriteString(_m.GrantReference)
	builder.WriteString(", ")
	builder.WriteString("contact_person=")
	builder.WriteString(_m.ContactPerson)
	builder.WriteString(", ")
	builder.WriteString("contact_email=")
	builder.WriteString(_m.ContactEmail)
	builder.WriteString(", ")
	builder.WriteString("renewal_eligible=")
	builder.WriteString(fmt.Sprintf("%v", _m.RenewalEligible))
	builder.WriteString(", ")
	builder.WriteString("next_review_date=")
	builder.WriteString(_m.NextReviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("requires_matching=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiresMatching))
	builder.WriteString(", ")
	builder.WriteString("matching_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.MatchingAmount))
	builder.WriteString(", ")
	builder.WriteString("restrictions=")
	builder.WriteString(fmt.Sprintf("%v", _m.Restrictions))
	builder.WriteString(", ")
	builder.WriteString("reporting_schedule=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReportingSchedule))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Grants is a parsable slice of Grant.
type Grants []*Grant
