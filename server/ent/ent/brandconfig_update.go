// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandconfig"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandConfigUpdate is the builder for updating BrandConfig entities.
type BrandConfigUpdate struct {
	config
	hooks    []Hook
	mutation *BrandConfigMutation
}

// Where appends a list predicates to the BrandConfigUpdate builder.
func (_u *BrandConfigUpdate) Where(ps ...predicate.BrandConfig) *BrandConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *BrandConfigUpdate) SetName(v string) *BrandConfigUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BrandConfigUpdate) SetNillableName(v *string) *BrandConfigUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *BrandConfigUpdate) SetLogoURL(v string) *BrandConfigUpdate {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *BrandConfigUpdate) SetNillableLogoURL(v *string) *BrandConfigUpdate {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *BrandConfigUpdate) ClearLogoURL() *BrandConfigUpdate {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetColors sets the "colors" field.
func (_u *BrandConfigUpdate) SetColors(v map[string]string) *BrandConfigUpdate {
	_u.mutation.SetColors(v)
	return _u
}

// SetContact sets the "contact" field.
func (_u *BrandConfigUpdate) SetContact(v map[string]string) *BrandConfigUpdate {
	_u.mutation.SetContact(v)
	return _u
}

// SetSocial sets the "social" field.
func (_u *BrandConfigUpdate) SetSocial(v map[string]string) *BrandConfigUpdate {
	_u.mutation.SetSocial(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BrandConfigUpdate) SetUpdatedAt(v time.Time) *BrandConfigUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the BrandConfigMutation object of the builder.
func (_u *BrandConfigUpdate) Mutation() *BrandConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BrandConfigUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BrandConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BrandConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BrandConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BrandConfigUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := brandconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *BrandConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(brandconfig.Table, brandconfig.Columns, sqlgraph.NewFieldSpec(brandconfig.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(brandconfig.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(brandconfig.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(brandconfig.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Colors(); ok {
		_spec.SetField(brandconfig.FieldColors, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Contact(); ok {
		_spec.SetField(brandconfig.FieldContact, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Social(); ok {
		_spec.SetField(brandconfig.FieldSocial, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(brandconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brandconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BrandConfigUpdateOne is the builder for updating a single BrandConfig entity.
type BrandConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BrandConfigMutation
}

// SetName sets the "name" field.
func (_u *BrandConfigUpdateOne) SetName(v string) *BrandConfigUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BrandConfigUpdateOne) SetNillableName(v *string) *BrandConfigUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *BrandConfigUpdateOne) SetLogoURL(v string) *BrandConfigUpdateOne {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *BrandConfigUpdateOne) SetNillableLogoURL(v *string) *BrandConfigUpdateOne {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *BrandConfigUpdateOne) ClearLogoURL() *BrandConfigUpdateOne {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetColors sets the "colors" field.
func (_u *BrandConfigUpdateOne) SetColors(v map[string]string) *BrandConfigUpdateOne {
	_u.mutation.SetColors(v)
	return _u
}

// SetContact sets the "contact" field.
func (_u *BrandConfigUpdateOne) SetContact(v map[string]string) *BrandConfigUpdateOne {
	_u.mutation.SetContact(v)
	return _u
}

// SetSocial sets the "social" field.
func (_u *BrandConfigUpdateOne) SetSocial(v map[string]string) *BrandConfigUpdateOne {
	_u.mutation.SetSocial(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BrandConfigUpdateOne) SetUpdatedAt(v time.Time) *BrandConfigUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the BrandConfigMutation object of the builder.
func (_u *BrandConfigUpdateOne) Mutation() *BrandConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the BrandConfigUpdate builder.
func (_u *BrandConfigUpdateOne) Where(ps ...predicate.BrandConfig) *BrandConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BrandConfigUpdateOne) Select(field string, fields ...string) *BrandConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BrandConfig entity.
func (_u *BrandConfigUpdateOne) Save(ctx context.Context) (*BrandConfig, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BrandConfigUpdateOne) SaveX(ctx context.Context) *BrandConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BrandConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BrandConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BrandConfigUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := brandconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *BrandConfigUpdateOne) sqlSave(ctx context.Context) (_node *BrandConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(brandconfig.Table, brandconfig.Columns, sqlgraph.NewFieldSpec(brandconfig.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BrandConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, brandconfig.FieldID)
		for _, f := range fields {
			if !brandconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != brandconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(brandconfig.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(brandconfig.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(brandconfig.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Colors(); ok {
		_spec.SetField(brandconfig.FieldColors, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Contact(); ok {
		_spec.SetField(brandconfig.FieldContact, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Social(); ok {
		_spec.SetField(brandconfig.FieldSocial, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(brandconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &BrandConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brandconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
