// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrustedDeviceCreate is the builder for creating a TrustedDevice entity.
type TrustedDeviceCreate struct {
	config
	mutation *TrustedDeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFingerprint sets the "fingerprint" field.
func (_c *TrustedDeviceCreate) SetFingerprint(v string) *TrustedDeviceCreate {
	_c.mutation.SetFingerprint(v)
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *TrustedDeviceCreate) SetUserAgent(v string) *TrustedDeviceCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *TrustedDeviceCreate) SetNillableUserAgent(v *string) *TrustedDeviceCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetLastIP sets the "last_ip" field.
func (_c *TrustedDeviceCreate) SetLastIP(v string) *TrustedDeviceCreate {
	_c.mutation.SetLastIP(v)
	return _c
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (_c *TrustedDeviceCreate) SetNillableLastIP(v *string) *TrustedDeviceCreate {
	if v != nil {
		_c.SetLastIP(*v)
	}
	return _c
}

// SetLastUsedAt sets the "last_used_at" field.
func (_c *TrustedDeviceCreate) SetLastUsedAt(v time.Time) *TrustedDeviceCreate {
	_c.mutation.SetLastUsedAt(v)
	return _c
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (_c *TrustedDeviceCreate) SetNillableLastUsedAt(v *time.Time) *TrustedDeviceCreate {
	if v != nil {
		_c.SetLastUsedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TrustedDeviceCreate) SetCreatedAt(v time.Time) *TrustedDeviceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TrustedDeviceCreate) SetNillableCreatedAt(v *time.Time) *TrustedDeviceCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetVerifiedAt sets the "verified_at" field.
func (_c *TrustedDeviceCreate) SetVerifiedAt(v time.Time) *TrustedDeviceCreate {
	_c.mutation.SetVerifiedAt(v)
	return _c
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_c *TrustedDeviceCreate) SetNillableVerifiedAt(v *time.Time) *TrustedDeviceCreate {
	if v != nil {
		_c.SetVerifiedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *TrustedDeviceCreate) SetUserID(id int) *TrustedDeviceCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *TrustedDeviceCreate) SetUser(v *User) *TrustedDeviceCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the TrustedDeviceMutation object of the builder.
func (_c *TrustedDeviceCreate) Mutation() *TrustedDeviceMutation {
	return _c.mutation
}

// Save creates the TrustedDevice in the database.
func (_c *TrustedDeviceCreate) Save(ctx context.Context) (*TrustedDevice, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TrustedDeviceCreate) SaveX(ctx context.Context) *TrustedDevice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustedDeviceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustedDeviceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TrustedDeviceCreate) defaults() {
	if _, ok := _c.mutation.LastUsedAt(); !ok {
		v := trusteddevice.DefaultLastUsedAt()
		_c.mutation.SetLastUsedAt(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := trusteddevice.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TrustedDeviceCreate) check() error {
	if _, ok := _c.mutation.Fingerprint(); !ok {
		return &ValidationError{Name: "fingerprint", err: errors.New(`ent: missing required field "TrustedDevice.fingerprint"`)}
	}
	if _, ok := _c.mutation.LastUsedAt(); !ok {
		return &ValidationError{Name: "last_used_at", err: errors.New(`ent: missing required field "TrustedDevice.last_used_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TrustedDevice.created_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TrustedDevice.user"`)}
	}
	return nil
}

func (_c *TrustedDeviceCreate) sqlSave(ctx context.Context) (*TrustedDevice, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TrustedDeviceCreate) createSpec() (*TrustedDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustedDevice{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(trusteddevice.Table, sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Fingerprint(); ok {
		_spec.SetField(trusteddevice.FieldFingerprint, field.TypeString, value)
		_node.Fingerprint = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(trusteddevice.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.LastIP(); ok {
		_spec.SetField(trusteddevice.FieldLastIP, field.TypeString, value)
		_node.LastIP = value
	}
	if value, ok := _c.mutation.LastUsedAt(); ok {
		_spec.SetField(trusteddevice.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(trusteddevice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.VerifiedAt(); ok {
		_spec.SetField(trusteddevice.FieldVerifiedAt, field.TypeTime, value)
		_node.VerifiedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_trusted_devices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrustedDevice.Create().
//		SetFingerprint(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrustedDeviceUpsert) {
//			SetFingerprint(v+v).
//		}).
//		Exec(ctx)
func (_c *TrustedDeviceCreate) OnConflict(opts ...sql.ConflictOption) *TrustedDeviceUpsertOne {
	_c.conflict = opts
	return &TrustedDeviceUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TrustedDeviceCreate) OnConflictColumns(columns ...string) *TrustedDeviceUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TrustedDeviceUpsertOne{
		create: _c,
	}
}

type (
	// TrustedDeviceUpsertOne is the builder for "upsert"-ing
	//  one TrustedDevice node.
	TrustedDeviceUpsertOne struct {
		create *TrustedDeviceCreate
	}

	// TrustedDeviceUpsert is the "OnConflict" setter.
	TrustedDeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetFingerprint sets the "fingerprint" field.
func (u *TrustedDeviceUpsert) SetFingerprint(v string) *TrustedDeviceUpsert {
	u.Set(trusteddevice.FieldFingerprint, v)
	return u
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *TrustedDeviceUpsert) UpdateFingerprint() *TrustedDeviceUpsert {
	u.SetExcluded(trusteddevice.FieldFingerprint)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *TrustedDeviceUpsert) SetUserAgent(v string) *TrustedDeviceUpsert {
	u.Set(trusteddevice.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *TrustedDeviceUpsert) UpdateUserAgent() *TrustedDeviceUpsert {
	u.SetExcluded(trusteddevice.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *TrustedDeviceUpsert) ClearUserAgent() *TrustedDeviceUpsert {
	u.SetNull(trusteddevice.FieldUserAgent)
	return u
}

// SetLastIP sets the "last_ip" field.
func (u *TrustedDeviceUpsert) SetLastIP(v string) *TrustedDeviceUpsert {
	u.Set(trusteddevice.FieldLastIP, v)
	return u
}

// UpdateLastIP sets the "last_ip" field to the value that was provided on create.
func (u *TrustedDeviceUpsert) UpdateLastIP() *TrustedDeviceUpsert {
	u.SetExcluded(trusteddevice.FieldLastIP)
	return u
}

// ClearLastIP clears the value of the "last_ip" field.
func (u *TrustedDeviceUpsert) ClearLastIP() *TrustedDeviceUpsert {
	u.SetNull(trusteddevice.FieldLastIP)
	return u
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *TrustedDeviceUpsert) SetLastUsedAt(v time.Time) *TrustedDeviceUpsert {
	u.Set(trusteddevice.FieldLastUsedAt, v)
	return u
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsert) UpdateLastUsedAt() *TrustedDeviceUpsert {
	u.SetExcluded(trusteddevice.FieldLastUsedAt)
	return u
}

// SetVerifiedAt sets the "verified_at" field.
func (u *TrustedDeviceUpsert) SetVerifiedAt(v time.Time) *TrustedDeviceUpsert {
	u.Set(trusteddevice.FieldVerifiedAt, v)
	return u
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsert) UpdateVerifiedAt() *TrustedDeviceUpsert {
	u.SetExcluded(trusteddevice.FieldVerifiedAt)
	return u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *TrustedDeviceUpsert) ClearVerifiedAt() *TrustedDeviceUpsert {
	u.SetNull(trusteddevice.FieldVerifiedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrustedDeviceUpsertOne) UpdateNewValues() *TrustedDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(trusteddevice.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrustedDeviceUpsertOne) Ignore() *TrustedDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrustedDeviceUpsertOne) DoNothing() *TrustedDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrustedDeviceCreate.OnConflict
// documentation for more info.
func (u *TrustedDeviceUpsertOne) Update(set func(*TrustedDeviceUpsert)) *TrustedDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrustedDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetFingerprint sets the "fingerprint" field.
func (u *TrustedDeviceUpsertOne) SetFingerprint(v string) *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetFingerprint(v)
	})
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *TrustedDeviceUpsertOne) UpdateFingerprint() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateFingerprint()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *TrustedDeviceUpsertOne) SetUserAgent(v string) *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *TrustedDeviceUpsertOne) UpdateUserAgent() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *TrustedDeviceUpsertOne) ClearUserAgent() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearUserAgent()
	})
}

// SetLastIP sets the "last_ip" field.
func (u *TrustedDeviceUpsertOne) SetLastIP(v string) *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetLastIP(v)
	})
}

// UpdateLastIP sets the "last_ip" field to the value that was provided on create.
func (u *TrustedDeviceUpsertOne) UpdateLastIP() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateLastIP()
	})
}

// ClearLastIP clears the value of the "last_ip" field.
func (u *TrustedDeviceUpsertOne) ClearLastIP() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearLastIP()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *TrustedDeviceUpsertOne) SetLastUsedAt(v time.Time) *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsertOne) UpdateLastUsedAt() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateLastUsedAt()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *TrustedDeviceUpsertOne) SetVerifiedAt(v time.Time) *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsertOne) UpdateVerifiedAt() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *TrustedDeviceUpsertOne) ClearVerifiedAt() *TrustedDeviceUpsertOne {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearVerifiedAt()
	})
}

// Exec executes the query.
func (u *TrustedDeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrustedDeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrustedDeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrustedDeviceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrustedDeviceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrustedDeviceCreateBulk is the builder for creating many TrustedDevice entities in bulk.
type TrustedDeviceCreateBulk struct {
	config
	err      error
	builders []*TrustedDeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the TrustedDevice entities in the database.
func (_c *TrustedDeviceCreateBulk) Save(ctx context.Context) ([]*TrustedDevice, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TrustedDevice, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustedDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TrustedDeviceCreateBulk) SaveX(ctx context.Context) []*TrustedDevice {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TrustedDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TrustedDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrustedDevice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrustedDeviceUpsert) {
//			SetFingerprint(v+v).
//		}).
//		Exec(ctx)
func (_c *TrustedDeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrustedDeviceUpsertBulk {
	_c.conflict = opts
	return &TrustedDeviceUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TrustedDeviceCreateBulk) OnConflictColumns(columns ...string) *TrustedDeviceUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TrustedDeviceUpsertBulk{
		create: _c,
	}
}

// TrustedDeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of TrustedDevice nodes.
type TrustedDeviceUpsertBulk struct {
	create *TrustedDeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrustedDeviceUpsertBulk) UpdateNewValues() *TrustedDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(trusteddevice.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrustedDevice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrustedDeviceUpsertBulk) Ignore() *TrustedDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrustedDeviceUpsertBulk) DoNothing() *TrustedDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrustedDeviceCreateBulk.OnConflict
// documentation for more info.
func (u *TrustedDeviceUpsertBulk) Update(set func(*TrustedDeviceUpsert)) *TrustedDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrustedDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetFingerprint sets the "fingerprint" field.
func (u *TrustedDeviceUpsertBulk) SetFingerprint(v string) *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetFingerprint(v)
	})
}

// UpdateFingerprint sets the "fingerprint" field to the value that was provided on create.
func (u *TrustedDeviceUpsertBulk) UpdateFingerprint() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateFingerprint()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *TrustedDeviceUpsertBulk) SetUserAgent(v string) *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *TrustedDeviceUpsertBulk) UpdateUserAgent() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *TrustedDeviceUpsertBulk) ClearUserAgent() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearUserAgent()
	})
}

// SetLastIP sets the "last_ip" field.
func (u *TrustedDeviceUpsertBulk) SetLastIP(v string) *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetLastIP(v)
	})
}

// UpdateLastIP sets the "last_ip" field to the value that was provided on create.
func (u *TrustedDeviceUpsertBulk) UpdateLastIP() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateLastIP()
	})
}

// ClearLastIP clears the value of the "last_ip" field.
func (u *TrustedDeviceUpsertBulk) ClearLastIP() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearLastIP()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *TrustedDeviceUpsertBulk) SetLastUsedAt(v time.Time) *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsertBulk) UpdateLastUsedAt() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateLastUsedAt()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *TrustedDeviceUpsertBulk) SetVerifiedAt(v time.Time) *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *TrustedDeviceUpsertBulk) UpdateVerifiedAt() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *TrustedDeviceUpsertBulk) ClearVerifiedAt() *TrustedDeviceUpsertBulk {
	return u.Update(func(s *TrustedDeviceUpsert) {
		s.ClearVerifiedAt()
	})
}

// Exec executes the query.
func (u *TrustedDeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrustedDeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrustedDeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrustedDeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
