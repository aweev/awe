// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrustedDeviceUpdate is the builder for updating TrustedDevice entities.
type TrustedDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *TrustedDeviceMutation
}

// Where appends a list predicates to the TrustedDeviceUpdate builder.
func (_u *TrustedDeviceUpdate) Where(ps ...predicate.TrustedDevice) *TrustedDeviceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFingerprint sets the "fingerprint" field.
func (_u *TrustedDeviceUpdate) SetFingerprint(v string) *TrustedDeviceUpdate {
	_u.mutation.SetFingerprint(v)
	return _u
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (_u *TrustedDeviceUpdate) SetNillableFingerprint(v *string) *TrustedDeviceUpdate {
	if v != nil {
		_u.SetFingerprint(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *TrustedDeviceUpdate) SetUserAgent(v string) *TrustedDeviceUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *TrustedDeviceUpdate) SetNillableUserAgent(v *string) *TrustedDeviceUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *TrustedDeviceUpdate) ClearUserAgent() *TrustedDeviceUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetLastIP sets the "last_ip" field.
func (_u *TrustedDeviceUpdate) SetLastIP(v string) *TrustedDeviceUpdate {
	_u.mutation.SetLastIP(v)
	return _u
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (_u *TrustedDeviceUpdate) SetNillableLastIP(v *string) *TrustedDeviceUpdate {
	if v != nil {
		_u.SetLastIP(*v)
	}
	return _u
}

// ClearLastIP clears the value of the "last_ip" field.
func (_u *TrustedDeviceUpdate) ClearLastIP() *TrustedDeviceUpdate {
	_u.mutation.ClearLastIP()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *TrustedDeviceUpdate) SetLastUsedAt(v time.Time) *TrustedDeviceUpdate {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *TrustedDeviceUpdate) SetVerifiedAt(v time.Time) *TrustedDeviceUpdate {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *TrustedDeviceUpdate) SetNillableVerifiedAt(v *time.Time) *TrustedDeviceUpdate {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *TrustedDeviceUpdate) ClearVerifiedAt() *TrustedDeviceUpdate {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *TrustedDeviceUpdate) SetUserID(id int) *TrustedDeviceUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TrustedDeviceUpdate) SetUser(v *User) *TrustedDeviceUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TrustedDeviceMutation object of the builder.
func (_u *TrustedDeviceUpdate) Mutation() *TrustedDeviceMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TrustedDeviceUpdate) ClearUser() *TrustedDeviceUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustedDeviceUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustedDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustedDeviceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustedDeviceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustedDeviceUpdate) defaults() {
	if _, ok := _u.mutation.LastUsedAt(); !ok {
		v := trusteddevice.UpdateDefaultLastUsedAt()
		_u.mutation.SetLastUsedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustedDeviceUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrustedDevice.user"`)
	}
	return nil
}

func (_u *TrustedDeviceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trusteddevice.Table, trusteddevice.Columns, sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Fingerprint(); ok {
		_spec.SetField(trusteddevice.FieldFingerprint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(trusteddevice.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(trusteddevice.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.LastIP(); ok {
		_spec.SetField(trusteddevice.FieldLastIP, field.TypeString, value)
	}
	if _u.mutation.LastIPCleared() {
		_spec.ClearField(trusteddevice.FieldLastIP, field.TypeString)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(trusteddevice.FieldLastUsedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(trusteddevice.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(trusteddevice.FieldVerifiedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trusteddevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustedDeviceUpdateOne is the builder for updating a single TrustedDevice entity.
type TrustedDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrustedDeviceMutation
}

// SetFingerprint sets the "fingerprint" field.
func (_u *TrustedDeviceUpdateOne) SetFingerprint(v string) *TrustedDeviceUpdateOne {
	_u.mutation.SetFingerprint(v)
	return _u
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (_u *TrustedDeviceUpdateOne) SetNillableFingerprint(v *string) *TrustedDeviceUpdateOne {
	if v != nil {
		_u.SetFingerprint(*v)
	}
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *TrustedDeviceUpdateOne) SetUserAgent(v string) *TrustedDeviceUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *TrustedDeviceUpdateOne) SetNillableUserAgent(v *string) *TrustedDeviceUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *TrustedDeviceUpdateOne) ClearUserAgent() *TrustedDeviceUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetLastIP sets the "last_ip" field.
func (_u *TrustedDeviceUpdateOne) SetLastIP(v string) *TrustedDeviceUpdateOne {
	_u.mutation.SetLastIP(v)
	return _u
}

// SetNillableLastIP sets the "last_ip" field if the given value is not nil.
func (_u *TrustedDeviceUpdateOne) SetNillableLastIP(v *string) *TrustedDeviceUpdateOne {
	if v != nil {
		_u.SetLastIP(*v)
	}
	return _u
}

// ClearLastIP clears the value of the "last_ip" field.
func (_u *TrustedDeviceUpdateOne) ClearLastIP() *TrustedDeviceUpdateOne {
	_u.mutation.ClearLastIP()
	return _u
}

// SetLastUsedAt sets the "last_used_at" field.
func (_u *TrustedDeviceUpdateOne) SetLastUsedAt(v time.Time) *TrustedDeviceUpdateOne {
	_u.mutation.SetLastUsedAt(v)
	return _u
}

// SetVerifiedAt sets the "verified_at" field.
func (_u *TrustedDeviceUpdateOne) SetVerifiedAt(v time.Time) *TrustedDeviceUpdateOne {
	_u.mutation.SetVerifiedAt(v)
	return _u
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_u *TrustedDeviceUpdateOne) SetNillableVerifiedAt(v *time.Time) *TrustedDeviceUpdateOne {
	if v != nil {
		_u.SetVerifiedAt(*v)
	}
	return _u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (_u *TrustedDeviceUpdateOne) ClearVerifiedAt() *TrustedDeviceUpdateOne {
	_u.mutation.ClearVerifiedAt()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *TrustedDeviceUpdateOne) SetUserID(id int) *TrustedDeviceUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TrustedDeviceUpdateOne) SetUser(v *User) *TrustedDeviceUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TrustedDeviceMutation object of the builder.
func (_u *TrustedDeviceUpdateOne) Mutation() *TrustedDeviceMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TrustedDeviceUpdateOne) ClearUser() *TrustedDeviceUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the TrustedDeviceUpdate builder.
func (_u *TrustedDeviceUpdateOne) Where(ps ...predicate.TrustedDevice) *TrustedDeviceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustedDeviceUpdateOne) Select(field string, fields ...string) *TrustedDeviceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustedDevice entity.
func (_u *TrustedDeviceUpdateOne) Save(ctx context.Context) (*TrustedDevice, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustedDeviceUpdateOne) SaveX(ctx context.Context) *TrustedDevice {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustedDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustedDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustedDeviceUpdateOne) defaults() {
	if _, ok := _u.mutation.LastUsedAt(); !ok {
		v := trusteddevice.UpdateDefaultLastUsedAt()
		_u.mutation.SetLastUsedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustedDeviceUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrustedDevice.user"`)
	}
	return nil
}

func (_u *TrustedDeviceUpdateOne) sqlSave(ctx context.Context) (_node *TrustedDevice, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trusteddevice.Table, trusteddevice.Columns, sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TrustedDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trusteddevice.FieldID)
		for _, f := range fields {
			if !trusteddevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trusteddevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Fingerprint(); ok {
		_spec.SetField(trusteddevice.FieldFingerprint, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(trusteddevice.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(trusteddevice.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.LastIP(); ok {
		_spec.SetField(trusteddevice.FieldLastIP, field.TypeString, value)
	}
	if _u.mutation.LastIPCleared() {
		_spec.ClearField(trusteddevice.FieldLastIP, field.TypeString)
	}
	if value, ok := _u.mutation.LastUsedAt(); ok {
		_spec.SetField(trusteddevice.FieldLastUsedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.VerifiedAt(); ok {
		_spec.SetField(trusteddevice.FieldVerifiedAt, field.TypeTime, value)
	}
	if _u.mutation.VerifiedAtCleared() {
		_spec.ClearField(trusteddevice.FieldVerifiedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TrustedDevice{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trusteddevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
