// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/partnerlogoitem"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockPartnerLogosUpdate is the builder for updating BlockPartnerLogos entities.
type BlockPartnerLogosUpdate struct {
	config
	hooks    []Hook
	mutation *BlockPartnerLogosMutation
}

// Where appends a list predicates to the BlockPartnerLogosUpdate builder.
func (_u *BlockPartnerLogosUpdate) Where(ps ...predicate.BlockPartnerLogos) *BlockPartnerLogosUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockPartnerLogosUpdate) SetInternalName(v string) *BlockPartnerLogosUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdate) SetNillableInternalName(v *string) *BlockPartnerLogosUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockPartnerLogosUpdate) SetTitle(v map[string]string) *BlockPartnerLogosUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockPartnerLogosUpdate) ClearTitle() *BlockPartnerLogosUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockPartnerLogosUpdate) SetDescription(v map[string]string) *BlockPartnerLogosUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockPartnerLogosUpdate) ClearDescription() *BlockPartnerLogosUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockPartnerLogosUpdate) SetLayout(v string) *BlockPartnerLogosUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdate) SetNillableLayout(v *string) *BlockPartnerLogosUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetItemsPerRow sets the "items_per_row" field.
func (_u *BlockPartnerLogosUpdate) SetItemsPerRow(v int) *BlockPartnerLogosUpdate {
	_u.mutation.ResetItemsPerRow()
	_u.mutation.SetItemsPerRow(v)
	return _u
}

// SetNillableItemsPerRow sets the "items_per_row" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdate) SetNillableItemsPerRow(v *int) *BlockPartnerLogosUpdate {
	if v != nil {
		_u.SetItemsPerRow(*v)
	}
	return _u
}

// AddItemsPerRow adds value to the "items_per_row" field.
func (_u *BlockPartnerLogosUpdate) AddItemsPerRow(v int) *BlockPartnerLogosUpdate {
	_u.mutation.AddItemsPerRow(v)
	return _u
}

// SetGrayscale sets the "grayscale" field.
func (_u *BlockPartnerLogosUpdate) SetGrayscale(v bool) *BlockPartnerLogosUpdate {
	_u.mutation.SetGrayscale(v)
	return _u
}

// SetNillableGrayscale sets the "grayscale" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdate) SetNillableGrayscale(v *bool) *BlockPartnerLogosUpdate {
	if v != nil {
		_u.SetGrayscale(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockPartnerLogosUpdate) SetUpdatedAt(v time.Time) *BlockPartnerLogosUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockPartnerLogosUpdate) SetContentBlockID(id int) *BlockPartnerLogosUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockPartnerLogosUpdate) SetContentBlock(v *ContentBlock) *BlockPartnerLogosUpdate {
	return _u.SetContentBlockID(v.ID)
}

// AddPartnerIDs adds the "partners" edge to the PartnerLogoItem entity by IDs.
func (_u *BlockPartnerLogosUpdate) AddPartnerIDs(ids ...int) *BlockPartnerLogosUpdate {
	_u.mutation.AddPartnerIDs(ids...)
	return _u
}

// AddPartners adds the "partners" edges to the PartnerLogoItem entity.
func (_u *BlockPartnerLogosUpdate) AddPartners(v ...*PartnerLogoItem) *BlockPartnerLogosUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnerIDs(ids...)
}

// Mutation returns the BlockPartnerLogosMutation object of the builder.
func (_u *BlockPartnerLogosUpdate) Mutation() *BlockPartnerLogosMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockPartnerLogosUpdate) ClearContentBlock() *BlockPartnerLogosUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearPartners clears all "partners" edges to the PartnerLogoItem entity.
func (_u *BlockPartnerLogosUpdate) ClearPartners() *BlockPartnerLogosUpdate {
	_u.mutation.ClearPartners()
	return _u
}

// RemovePartnerIDs removes the "partners" edge to PartnerLogoItem entities by IDs.
func (_u *BlockPartnerLogosUpdate) RemovePartnerIDs(ids ...int) *BlockPartnerLogosUpdate {
	_u.mutation.RemovePartnerIDs(ids...)
	return _u
}

// RemovePartners removes "partners" edges to PartnerLogoItem entities.
func (_u *BlockPartnerLogosUpdate) RemovePartners(v ...*PartnerLogoItem) *BlockPartnerLogosUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockPartnerLogosUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockPartnerLogosUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockPartnerLogosUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockPartnerLogosUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockPartnerLogosUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockpartnerlogos.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockPartnerLogosUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockPartnerLogos.content_block"`)
	}
	return nil
}

func (_u *BlockPartnerLogosUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockpartnerlogos.Table, blockpartnerlogos.Columns, sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockpartnerlogos.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockpartnerlogos.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockpartnerlogos.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockpartnerlogos.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockpartnerlogos.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blockpartnerlogos.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.ItemsPerRow(); ok {
		_spec.SetField(blockpartnerlogos.FieldItemsPerRow, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedItemsPerRow(); ok {
		_spec.AddField(blockpartnerlogos.FieldItemsPerRow, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Grayscale(); ok {
		_spec.SetField(blockpartnerlogos.FieldGrayscale, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockpartnerlogos.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockpartnerlogos.ContentBlockTable,
			Columns: []string{blockpartnerlogos.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockpartnerlogos.ContentBlockTable,
			Columns: []string{blockpartnerlogos.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnersIDs(); len(nodes) > 0 && !_u.mutation.PartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockpartnerlogos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockPartnerLogosUpdateOne is the builder for updating a single BlockPartnerLogos entity.
type BlockPartnerLogosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockPartnerLogosMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockPartnerLogosUpdateOne) SetInternalName(v string) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdateOne) SetNillableInternalName(v *string) *BlockPartnerLogosUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockPartnerLogosUpdateOne) SetTitle(v map[string]string) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockPartnerLogosUpdateOne) ClearTitle() *BlockPartnerLogosUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockPartnerLogosUpdateOne) SetDescription(v map[string]string) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockPartnerLogosUpdateOne) ClearDescription() *BlockPartnerLogosUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockPartnerLogosUpdateOne) SetLayout(v string) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdateOne) SetNillableLayout(v *string) *BlockPartnerLogosUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetItemsPerRow sets the "items_per_row" field.
func (_u *BlockPartnerLogosUpdateOne) SetItemsPerRow(v int) *BlockPartnerLogosUpdateOne {
	_u.mutation.ResetItemsPerRow()
	_u.mutation.SetItemsPerRow(v)
	return _u
}

// SetNillableItemsPerRow sets the "items_per_row" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdateOne) SetNillableItemsPerRow(v *int) *BlockPartnerLogosUpdateOne {
	if v != nil {
		_u.SetItemsPerRow(*v)
	}
	return _u
}

// AddItemsPerRow adds value to the "items_per_row" field.
func (_u *BlockPartnerLogosUpdateOne) AddItemsPerRow(v int) *BlockPartnerLogosUpdateOne {
	_u.mutation.AddItemsPerRow(v)
	return _u
}

// SetGrayscale sets the "grayscale" field.
func (_u *BlockPartnerLogosUpdateOne) SetGrayscale(v bool) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetGrayscale(v)
	return _u
}

// SetNillableGrayscale sets the "grayscale" field if the given value is not nil.
func (_u *BlockPartnerLogosUpdateOne) SetNillableGrayscale(v *bool) *BlockPartnerLogosUpdateOne {
	if v != nil {
		_u.SetGrayscale(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockPartnerLogosUpdateOne) SetUpdatedAt(v time.Time) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockPartnerLogosUpdateOne) SetContentBlockID(id int) *BlockPartnerLogosUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockPartnerLogosUpdateOne) SetContentBlock(v *ContentBlock) *BlockPartnerLogosUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// AddPartnerIDs adds the "partners" edge to the PartnerLogoItem entity by IDs.
func (_u *BlockPartnerLogosUpdateOne) AddPartnerIDs(ids ...int) *BlockPartnerLogosUpdateOne {
	_u.mutation.AddPartnerIDs(ids...)
	return _u
}

// AddPartners adds the "partners" edges to the PartnerLogoItem entity.
func (_u *BlockPartnerLogosUpdateOne) AddPartners(v ...*PartnerLogoItem) *BlockPartnerLogosUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnerIDs(ids...)
}

// Mutation returns the BlockPartnerLogosMutation object of the builder.
func (_u *BlockPartnerLogosUpdateOne) Mutation() *BlockPartnerLogosMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockPartnerLogosUpdateOne) ClearContentBlock() *BlockPartnerLogosUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearPartners clears all "partners" edges to the PartnerLogoItem entity.
func (_u *BlockPartnerLogosUpdateOne) ClearPartners() *BlockPartnerLogosUpdateOne {
	_u.mutation.ClearPartners()
	return _u
}

// RemovePartnerIDs removes the "partners" edge to PartnerLogoItem entities by IDs.
func (_u *BlockPartnerLogosUpdateOne) RemovePartnerIDs(ids ...int) *BlockPartnerLogosUpdateOne {
	_u.mutation.RemovePartnerIDs(ids...)
	return _u
}

// RemovePartners removes "partners" edges to PartnerLogoItem entities.
func (_u *BlockPartnerLogosUpdateOne) RemovePartners(v ...*PartnerLogoItem) *BlockPartnerLogosUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnerIDs(ids...)
}

// Where appends a list predicates to the BlockPartnerLogosUpdate builder.
func (_u *BlockPartnerLogosUpdateOne) Where(ps ...predicate.BlockPartnerLogos) *BlockPartnerLogosUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockPartnerLogosUpdateOne) Select(field string, fields ...string) *BlockPartnerLogosUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockPartnerLogos entity.
func (_u *BlockPartnerLogosUpdateOne) Save(ctx context.Context) (*BlockPartnerLogos, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockPartnerLogosUpdateOne) SaveX(ctx context.Context) *BlockPartnerLogos {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockPartnerLogosUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockPartnerLogosUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockPartnerLogosUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockpartnerlogos.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockPartnerLogosUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockPartnerLogos.content_block"`)
	}
	return nil
}

func (_u *BlockPartnerLogosUpdateOne) sqlSave(ctx context.Context) (_node *BlockPartnerLogos, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockpartnerlogos.Table, blockpartnerlogos.Columns, sqlgraph.NewFieldSpec(blockpartnerlogos.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockPartnerLogos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockpartnerlogos.FieldID)
		for _, f := range fields {
			if !blockpartnerlogos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockpartnerlogos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockpartnerlogos.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockpartnerlogos.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockpartnerlogos.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockpartnerlogos.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockpartnerlogos.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blockpartnerlogos.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.ItemsPerRow(); ok {
		_spec.SetField(blockpartnerlogos.FieldItemsPerRow, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedItemsPerRow(); ok {
		_spec.AddField(blockpartnerlogos.FieldItemsPerRow, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Grayscale(); ok {
		_spec.SetField(blockpartnerlogos.FieldGrayscale, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockpartnerlogos.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockpartnerlogos.ContentBlockTable,
			Columns: []string{blockpartnerlogos.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockpartnerlogos.ContentBlockTable,
			Columns: []string{blockpartnerlogos.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnersIDs(); len(nodes) > 0 && !_u.mutation.PartnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnerlogoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockPartnerLogos{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockpartnerlogos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
