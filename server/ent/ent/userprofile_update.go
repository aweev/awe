// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/userskill"
	"awe/ent/ent/volunteerassignment"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserProfileUpdate is the builder for updating UserProfile entities.
type UserProfileUpdate struct {
	config
	hooks    []Hook
	mutation *UserProfileMutation
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (_u *UserProfileUpdate) Where(ps ...predicate.UserProfile) *UserProfileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserProfileUpdate) SetFirstName(v string) *UserProfileUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableFirstName(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserProfileUpdate) ClearFirstName() *UserProfileUpdate {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserProfileUpdate) SetLastName(v string) *UserProfileUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableLastName(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserProfileUpdate) ClearLastName() *UserProfileUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserProfileUpdate) SetAvatarURL(v string) *UserProfileUpdate {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableAvatarURL(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserProfileUpdate) ClearAvatarURL() *UserProfileUpdate {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetBio sets the "bio" field.
func (_u *UserProfileUpdate) SetBio(v string) *UserProfileUpdate {
	_u.mutation.SetBio(v)
	return _u
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableBio(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetBio(*v)
	}
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *UserProfileUpdate) ClearBio() *UserProfileUpdate {
	_u.mutation.ClearBio()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserProfileUpdate) SetPhone(v string) *UserProfileUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillablePhone(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserProfileUpdate) ClearPhone() *UserProfileUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// SetJobTitle sets the "job_title" field.
func (_u *UserProfileUpdate) SetJobTitle(v string) *UserProfileUpdate {
	_u.mutation.SetJobTitle(v)
	return _u
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableJobTitle(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetJobTitle(*v)
	}
	return _u
}

// ClearJobTitle clears the value of the "job_title" field.
func (_u *UserProfileUpdate) ClearJobTitle() *UserProfileUpdate {
	_u.mutation.ClearJobTitle()
	return _u
}

// SetCompany sets the "company" field.
func (_u *UserProfileUpdate) SetCompany(v string) *UserProfileUpdate {
	_u.mutation.SetCompany(v)
	return _u
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableCompany(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetCompany(*v)
	}
	return _u
}

// ClearCompany clears the value of the "company" field.
func (_u *UserProfileUpdate) ClearCompany() *UserProfileUpdate {
	_u.mutation.ClearCompany()
	return _u
}

// SetLinkedin sets the "linkedin" field.
func (_u *UserProfileUpdate) SetLinkedin(v string) *UserProfileUpdate {
	_u.mutation.SetLinkedin(v)
	return _u
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableLinkedin(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetLinkedin(*v)
	}
	return _u
}

// ClearLinkedin clears the value of the "linkedin" field.
func (_u *UserProfileUpdate) ClearLinkedin() *UserProfileUpdate {
	_u.mutation.ClearLinkedin()
	return _u
}

// SetTwitter sets the "twitter" field.
func (_u *UserProfileUpdate) SetTwitter(v string) *UserProfileUpdate {
	_u.mutation.SetTwitter(v)
	return _u
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableTwitter(v *string) *UserProfileUpdate {
	if v != nil {
		_u.SetTwitter(*v)
	}
	return _u
}

// ClearTwitter clears the value of the "twitter" field.
func (_u *UserProfileUpdate) ClearTwitter() *UserProfileUpdate {
	_u.mutation.ClearTwitter()
	return _u
}

// SetInterests sets the "interests" field.
func (_u *UserProfileUpdate) SetInterests(v []string) *UserProfileUpdate {
	_u.mutation.SetInterests(v)
	return _u
}

// AppendInterests appends value to the "interests" field.
func (_u *UserProfileUpdate) AppendInterests(v []string) *UserProfileUpdate {
	_u.mutation.AppendInterests(v)
	return _u
}

// SetCompletedPct sets the "completed_pct" field.
func (_u *UserProfileUpdate) SetCompletedPct(v int) *UserProfileUpdate {
	_u.mutation.ResetCompletedPct()
	_u.mutation.SetCompletedPct(v)
	return _u
}

// SetNillableCompletedPct sets the "completed_pct" field if the given value is not nil.
func (_u *UserProfileUpdate) SetNillableCompletedPct(v *int) *UserProfileUpdate {
	if v != nil {
		_u.SetCompletedPct(*v)
	}
	return _u
}

// AddCompletedPct adds value to the "completed_pct" field.
func (_u *UserProfileUpdate) AddCompletedPct(v int) *UserProfileUpdate {
	_u.mutation.AddCompletedPct(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserProfileUpdate) SetUpdatedAt(v time.Time) *UserProfileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserProfileUpdate) SetUserID(id int) *UserProfileUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserProfileUpdate) SetUser(v *User) *UserProfileUpdate {
	return _u.SetUserID(v.ID)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_u *UserProfileUpdate) AddAssignmentIDs(ids ...int) *UserProfileUpdate {
	_u.mutation.AddAssignmentIDs(ids...)
	return _u
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_u *UserProfileUpdate) AddAssignments(v ...*VolunteerAssignment) *UserProfileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssignmentIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the UserSkill entity by IDs.
func (_u *UserProfileUpdate) AddSkillIDs(ids ...int) *UserProfileUpdate {
	_u.mutation.AddSkillIDs(ids...)
	return _u
}

// AddSkills adds the "skills" edges to the UserSkill entity.
func (_u *UserProfileUpdate) AddSkills(v ...*UserSkill) *UserProfileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSkillIDs(ids...)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (_u *UserProfileUpdate) SetAddressID(id int) *UserProfileUpdate {
	_u.mutation.SetAddressID(id)
	return _u
}

// SetAddress sets the "address" edge to the Address entity.
func (_u *UserProfileUpdate) SetAddress(v *Address) *UserProfileUpdate {
	return _u.SetAddressID(v.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (_u *UserProfileUpdate) Mutation() *UserProfileMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserProfileUpdate) ClearUser() *UserProfileUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearAssignments clears all "assignments" edges to the VolunteerAssignment entity.
func (_u *UserProfileUpdate) ClearAssignments() *UserProfileUpdate {
	_u.mutation.ClearAssignments()
	return _u
}

// RemoveAssignmentIDs removes the "assignments" edge to VolunteerAssignment entities by IDs.
func (_u *UserProfileUpdate) RemoveAssignmentIDs(ids ...int) *UserProfileUpdate {
	_u.mutation.RemoveAssignmentIDs(ids...)
	return _u
}

// RemoveAssignments removes "assignments" edges to VolunteerAssignment entities.
func (_u *UserProfileUpdate) RemoveAssignments(v ...*VolunteerAssignment) *UserProfileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssignmentIDs(ids...)
}

// ClearSkills clears all "skills" edges to the UserSkill entity.
func (_u *UserProfileUpdate) ClearSkills() *UserProfileUpdate {
	_u.mutation.ClearSkills()
	return _u
}

// RemoveSkillIDs removes the "skills" edge to UserSkill entities by IDs.
func (_u *UserProfileUpdate) RemoveSkillIDs(ids ...int) *UserProfileUpdate {
	_u.mutation.RemoveSkillIDs(ids...)
	return _u
}

// RemoveSkills removes "skills" edges to UserSkill entities.
func (_u *UserProfileUpdate) RemoveSkills(v ...*UserSkill) *UserProfileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSkillIDs(ids...)
}

// ClearAddress clears the "address" edge to the Address entity.
func (_u *UserProfileUpdate) ClearAddress() *UserProfileUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserProfileUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserProfileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserProfileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserProfileUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserProfileUpdate) check() error {
	if v, ok := _u.mutation.Bio(); ok {
		if err := userprofile.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`ent: validator failed for field "UserProfile.bio": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserProfile.user"`)
	}
	if _u.mutation.AddressCleared() && len(_u.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserProfile.address"`)
	}
	return nil
}

func (_u *UserProfileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(userprofile.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(userprofile.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(userprofile.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(userprofile.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(userprofile.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(userprofile.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(userprofile.FieldBio, field.TypeString, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(userprofile.FieldBio, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(userprofile.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(userprofile.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.JobTitle(); ok {
		_spec.SetField(userprofile.FieldJobTitle, field.TypeString, value)
	}
	if _u.mutation.JobTitleCleared() {
		_spec.ClearField(userprofile.FieldJobTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Company(); ok {
		_spec.SetField(userprofile.FieldCompany, field.TypeString, value)
	}
	if _u.mutation.CompanyCleared() {
		_spec.ClearField(userprofile.FieldCompany, field.TypeString)
	}
	if value, ok := _u.mutation.Linkedin(); ok {
		_spec.SetField(userprofile.FieldLinkedin, field.TypeString, value)
	}
	if _u.mutation.LinkedinCleared() {
		_spec.ClearField(userprofile.FieldLinkedin, field.TypeString)
	}
	if value, ok := _u.mutation.Twitter(); ok {
		_spec.SetField(userprofile.FieldTwitter, field.TypeString, value)
	}
	if _u.mutation.TwitterCleared() {
		_spec.ClearField(userprofile.FieldTwitter, field.TypeString)
	}
	if value, ok := _u.mutation.Interests(); ok {
		_spec.SetField(userprofile.FieldInterests, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterests(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userprofile.FieldInterests, value)
		})
	}
	if value, ok := _u.mutation.CompletedPct(); ok {
		_spec.SetField(userprofile.FieldCompletedPct, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletedPct(); ok {
		_spec.AddField(userprofile.FieldCompletedPct, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssignmentsIDs(); len(nodes) > 0 && !_u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !_u.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserProfileUpdateOne is the builder for updating a single UserProfile entity.
type UserProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserProfileMutation
}

// SetFirstName sets the "first_name" field.
func (_u *UserProfileUpdateOne) SetFirstName(v string) *UserProfileUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableFirstName(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserProfileUpdateOne) ClearFirstName() *UserProfileUpdateOne {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserProfileUpdateOne) SetLastName(v string) *UserProfileUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableLastName(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserProfileUpdateOne) ClearLastName() *UserProfileUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetAvatarURL sets the "avatar_url" field.
func (_u *UserProfileUpdateOne) SetAvatarURL(v string) *UserProfileUpdateOne {
	_u.mutation.SetAvatarURL(v)
	return _u
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableAvatarURL(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetAvatarURL(*v)
	}
	return _u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (_u *UserProfileUpdateOne) ClearAvatarURL() *UserProfileUpdateOne {
	_u.mutation.ClearAvatarURL()
	return _u
}

// SetBio sets the "bio" field.
func (_u *UserProfileUpdateOne) SetBio(v string) *UserProfileUpdateOne {
	_u.mutation.SetBio(v)
	return _u
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableBio(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetBio(*v)
	}
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *UserProfileUpdateOne) ClearBio() *UserProfileUpdateOne {
	_u.mutation.ClearBio()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserProfileUpdateOne) SetPhone(v string) *UserProfileUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillablePhone(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserProfileUpdateOne) ClearPhone() *UserProfileUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// SetJobTitle sets the "job_title" field.
func (_u *UserProfileUpdateOne) SetJobTitle(v string) *UserProfileUpdateOne {
	_u.mutation.SetJobTitle(v)
	return _u
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableJobTitle(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetJobTitle(*v)
	}
	return _u
}

// ClearJobTitle clears the value of the "job_title" field.
func (_u *UserProfileUpdateOne) ClearJobTitle() *UserProfileUpdateOne {
	_u.mutation.ClearJobTitle()
	return _u
}

// SetCompany sets the "company" field.
func (_u *UserProfileUpdateOne) SetCompany(v string) *UserProfileUpdateOne {
	_u.mutation.SetCompany(v)
	return _u
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableCompany(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetCompany(*v)
	}
	return _u
}

// ClearCompany clears the value of the "company" field.
func (_u *UserProfileUpdateOne) ClearCompany() *UserProfileUpdateOne {
	_u.mutation.ClearCompany()
	return _u
}

// SetLinkedin sets the "linkedin" field.
func (_u *UserProfileUpdateOne) SetLinkedin(v string) *UserProfileUpdateOne {
	_u.mutation.SetLinkedin(v)
	return _u
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableLinkedin(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetLinkedin(*v)
	}
	return _u
}

// ClearLinkedin clears the value of the "linkedin" field.
func (_u *UserProfileUpdateOne) ClearLinkedin() *UserProfileUpdateOne {
	_u.mutation.ClearLinkedin()
	return _u
}

// SetTwitter sets the "twitter" field.
func (_u *UserProfileUpdateOne) SetTwitter(v string) *UserProfileUpdateOne {
	_u.mutation.SetTwitter(v)
	return _u
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableTwitter(v *string) *UserProfileUpdateOne {
	if v != nil {
		_u.SetTwitter(*v)
	}
	return _u
}

// ClearTwitter clears the value of the "twitter" field.
func (_u *UserProfileUpdateOne) ClearTwitter() *UserProfileUpdateOne {
	_u.mutation.ClearTwitter()
	return _u
}

// SetInterests sets the "interests" field.
func (_u *UserProfileUpdateOne) SetInterests(v []string) *UserProfileUpdateOne {
	_u.mutation.SetInterests(v)
	return _u
}

// AppendInterests appends value to the "interests" field.
func (_u *UserProfileUpdateOne) AppendInterests(v []string) *UserProfileUpdateOne {
	_u.mutation.AppendInterests(v)
	return _u
}

// SetCompletedPct sets the "completed_pct" field.
func (_u *UserProfileUpdateOne) SetCompletedPct(v int) *UserProfileUpdateOne {
	_u.mutation.ResetCompletedPct()
	_u.mutation.SetCompletedPct(v)
	return _u
}

// SetNillableCompletedPct sets the "completed_pct" field if the given value is not nil.
func (_u *UserProfileUpdateOne) SetNillableCompletedPct(v *int) *UserProfileUpdateOne {
	if v != nil {
		_u.SetCompletedPct(*v)
	}
	return _u
}

// AddCompletedPct adds value to the "completed_pct" field.
func (_u *UserProfileUpdateOne) AddCompletedPct(v int) *UserProfileUpdateOne {
	_u.mutation.AddCompletedPct(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserProfileUpdateOne) SetUpdatedAt(v time.Time) *UserProfileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserProfileUpdateOne) SetUserID(id int) *UserProfileUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserProfileUpdateOne) SetUser(v *User) *UserProfileUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_u *UserProfileUpdateOne) AddAssignmentIDs(ids ...int) *UserProfileUpdateOne {
	_u.mutation.AddAssignmentIDs(ids...)
	return _u
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_u *UserProfileUpdateOne) AddAssignments(v ...*VolunteerAssignment) *UserProfileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssignmentIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the UserSkill entity by IDs.
func (_u *UserProfileUpdateOne) AddSkillIDs(ids ...int) *UserProfileUpdateOne {
	_u.mutation.AddSkillIDs(ids...)
	return _u
}

// AddSkills adds the "skills" edges to the UserSkill entity.
func (_u *UserProfileUpdateOne) AddSkills(v ...*UserSkill) *UserProfileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSkillIDs(ids...)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (_u *UserProfileUpdateOne) SetAddressID(id int) *UserProfileUpdateOne {
	_u.mutation.SetAddressID(id)
	return _u
}

// SetAddress sets the "address" edge to the Address entity.
func (_u *UserProfileUpdateOne) SetAddress(v *Address) *UserProfileUpdateOne {
	return _u.SetAddressID(v.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (_u *UserProfileUpdateOne) Mutation() *UserProfileMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserProfileUpdateOne) ClearUser() *UserProfileUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearAssignments clears all "assignments" edges to the VolunteerAssignment entity.
func (_u *UserProfileUpdateOne) ClearAssignments() *UserProfileUpdateOne {
	_u.mutation.ClearAssignments()
	return _u
}

// RemoveAssignmentIDs removes the "assignments" edge to VolunteerAssignment entities by IDs.
func (_u *UserProfileUpdateOne) RemoveAssignmentIDs(ids ...int) *UserProfileUpdateOne {
	_u.mutation.RemoveAssignmentIDs(ids...)
	return _u
}

// RemoveAssignments removes "assignments" edges to VolunteerAssignment entities.
func (_u *UserProfileUpdateOne) RemoveAssignments(v ...*VolunteerAssignment) *UserProfileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssignmentIDs(ids...)
}

// ClearSkills clears all "skills" edges to the UserSkill entity.
func (_u *UserProfileUpdateOne) ClearSkills() *UserProfileUpdateOne {
	_u.mutation.ClearSkills()
	return _u
}

// RemoveSkillIDs removes the "skills" edge to UserSkill entities by IDs.
func (_u *UserProfileUpdateOne) RemoveSkillIDs(ids ...int) *UserProfileUpdateOne {
	_u.mutation.RemoveSkillIDs(ids...)
	return _u
}

// RemoveSkills removes "skills" edges to UserSkill entities.
func (_u *UserProfileUpdateOne) RemoveSkills(v ...*UserSkill) *UserProfileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSkillIDs(ids...)
}

// ClearAddress clears the "address" edge to the Address entity.
func (_u *UserProfileUpdateOne) ClearAddress() *UserProfileUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// Where appends a list predicates to the UserProfileUpdate builder.
func (_u *UserProfileUpdateOne) Where(ps ...predicate.UserProfile) *UserProfileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserProfileUpdateOne) Select(field string, fields ...string) *UserProfileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserProfile entity.
func (_u *UserProfileUpdateOne) Save(ctx context.Context) (*UserProfile, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserProfileUpdateOne) SaveX(ctx context.Context) *UserProfile {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserProfileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserProfileUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userprofile.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserProfileUpdateOne) check() error {
	if v, ok := _u.mutation.Bio(); ok {
		if err := userprofile.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`ent: validator failed for field "UserProfile.bio": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserProfile.user"`)
	}
	if _u.mutation.AddressCleared() && len(_u.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserProfile.address"`)
	}
	return nil
}

func (_u *UserProfileUpdateOne) sqlSave(ctx context.Context) (_node *UserProfile, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userprofile.Table, userprofile.Columns, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprofile.FieldID)
		for _, f := range fields {
			if !userprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(userprofile.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(userprofile.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(userprofile.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(userprofile.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarURL(); ok {
		_spec.SetField(userprofile.FieldAvatarURL, field.TypeString, value)
	}
	if _u.mutation.AvatarURLCleared() {
		_spec.ClearField(userprofile.FieldAvatarURL, field.TypeString)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(userprofile.FieldBio, field.TypeString, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(userprofile.FieldBio, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(userprofile.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(userprofile.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.JobTitle(); ok {
		_spec.SetField(userprofile.FieldJobTitle, field.TypeString, value)
	}
	if _u.mutation.JobTitleCleared() {
		_spec.ClearField(userprofile.FieldJobTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Company(); ok {
		_spec.SetField(userprofile.FieldCompany, field.TypeString, value)
	}
	if _u.mutation.CompanyCleared() {
		_spec.ClearField(userprofile.FieldCompany, field.TypeString)
	}
	if value, ok := _u.mutation.Linkedin(); ok {
		_spec.SetField(userprofile.FieldLinkedin, field.TypeString, value)
	}
	if _u.mutation.LinkedinCleared() {
		_spec.ClearField(userprofile.FieldLinkedin, field.TypeString)
	}
	if value, ok := _u.mutation.Twitter(); ok {
		_spec.SetField(userprofile.FieldTwitter, field.TypeString, value)
	}
	if _u.mutation.TwitterCleared() {
		_spec.ClearField(userprofile.FieldTwitter, field.TypeString)
	}
	if value, ok := _u.mutation.Interests(); ok {
		_spec.SetField(userprofile.FieldInterests, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedInterests(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userprofile.FieldInterests, value)
		})
	}
	if value, ok := _u.mutation.CompletedPct(); ok {
		_spec.SetField(userprofile.FieldCompletedPct, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletedPct(); ok {
		_spec.AddField(userprofile.FieldCompletedPct, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssignmentsIDs(); len(nodes) > 0 && !_u.mutation.AssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !_u.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserProfile{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
