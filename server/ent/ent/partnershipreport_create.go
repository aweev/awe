// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipreport"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnershipReportCreate is the builder for creating a PartnershipReport entity.
type PartnershipReportCreate struct {
	config
	mutation *PartnershipReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetReportPeriod sets the "report_period" field.
func (_c *PartnershipReportCreate) SetReportPeriod(v string) *PartnershipReportCreate {
	_c.mutation.SetReportPeriod(v)
	return _c
}

// SetGeneratedAt sets the "generated_at" field.
func (_c *PartnershipReportCreate) SetGeneratedAt(v time.Time) *PartnershipReportCreate {
	_c.mutation.SetGeneratedAt(v)
	return _c
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillableGeneratedAt(v *time.Time) *PartnershipReportCreate {
	if v != nil {
		_c.SetGeneratedAt(*v)
	}
	return _c
}

// SetGeneratedBy sets the "generated_by" field.
func (_c *PartnershipReportCreate) SetGeneratedBy(v string) *PartnershipReportCreate {
	_c.mutation.SetGeneratedBy(v)
	return _c
}

// SetNillableGeneratedBy sets the "generated_by" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillableGeneratedBy(v *string) *PartnershipReportCreate {
	if v != nil {
		_c.SetGeneratedBy(*v)
	}
	return _c
}

// SetImpactMetrics sets the "impact_metrics" field.
func (_c *PartnershipReportCreate) SetImpactMetrics(v map[string]interface{}) *PartnershipReportCreate {
	_c.mutation.SetImpactMetrics(v)
	return _c
}

// SetOutcomes sets the "outcomes" field.
func (_c *PartnershipReportCreate) SetOutcomes(v []string) *PartnershipReportCreate {
	_c.mutation.SetOutcomes(v)
	return _c
}

// SetFeedback sets the "feedback" field.
func (_c *PartnershipReportCreate) SetFeedback(v []string) *PartnershipReportCreate {
	_c.mutation.SetFeedback(v)
	return _c
}

// SetReportURL sets the "report_url" field.
func (_c *PartnershipReportCreate) SetReportURL(v string) *PartnershipReportCreate {
	_c.mutation.SetReportURL(v)
	return _c
}

// SetNillableReportURL sets the "report_url" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillableReportURL(v *string) *PartnershipReportCreate {
	if v != nil {
		_c.SetReportURL(*v)
	}
	return _c
}

// SetPresentationURL sets the "presentation_url" field.
func (_c *PartnershipReportCreate) SetPresentationURL(v string) *PartnershipReportCreate {
	_c.mutation.SetPresentationURL(v)
	return _c
}

// SetNillablePresentationURL sets the "presentation_url" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillablePresentationURL(v *string) *PartnershipReportCreate {
	if v != nil {
		_c.SetPresentationURL(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PartnershipReportCreate) SetCreatedAt(v time.Time) *PartnershipReportCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillableCreatedAt(v *time.Time) *PartnershipReportCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PartnershipReportCreate) SetUpdatedAt(v time.Time) *PartnershipReportCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PartnershipReportCreate) SetNillableUpdatedAt(v *time.Time) *PartnershipReportCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_c *PartnershipReportCreate) SetPartnershipID(id int) *PartnershipReportCreate {
	_c.mutation.SetPartnershipID(id)
	return _c
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_c *PartnershipReportCreate) SetPartnership(v *Partnership) *PartnershipReportCreate {
	return _c.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipReportMutation object of the builder.
func (_c *PartnershipReportCreate) Mutation() *PartnershipReportMutation {
	return _c.mutation
}

// Save creates the PartnershipReport in the database.
func (_c *PartnershipReportCreate) Save(ctx context.Context) (*PartnershipReport, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnershipReportCreate) SaveX(ctx context.Context) *PartnershipReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipReportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipReportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PartnershipReportCreate) defaults() {
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		v := partnershipreport.DefaultGeneratedAt()
		_c.mutation.SetGeneratedAt(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := partnershipreport.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := partnershipreport.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnershipReportCreate) check() error {
	if _, ok := _c.mutation.ReportPeriod(); !ok {
		return &ValidationError{Name: "report_period", err: errors.New(`ent: missing required field "PartnershipReport.report_period"`)}
	}
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		return &ValidationError{Name: "generated_at", err: errors.New(`ent: missing required field "PartnershipReport.generated_at"`)}
	}
	if _, ok := _c.mutation.ImpactMetrics(); !ok {
		return &ValidationError{Name: "impact_metrics", err: errors.New(`ent: missing required field "PartnershipReport.impact_metrics"`)}
	}
	if _, ok := _c.mutation.Outcomes(); !ok {
		return &ValidationError{Name: "outcomes", err: errors.New(`ent: missing required field "PartnershipReport.outcomes"`)}
	}
	if _, ok := _c.mutation.Feedback(); !ok {
		return &ValidationError{Name: "feedback", err: errors.New(`ent: missing required field "PartnershipReport.feedback"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnershipReport.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnershipReport.updated_at"`)}
	}
	if len(_c.mutation.PartnershipIDs()) == 0 {
		return &ValidationError{Name: "partnership", err: errors.New(`ent: missing required edge "PartnershipReport.partnership"`)}
	}
	return nil
}

func (_c *PartnershipReportCreate) sqlSave(ctx context.Context) (*PartnershipReport, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnershipReportCreate) createSpec() (*PartnershipReport, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnershipReport{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partnershipreport.Table, sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.ReportPeriod(); ok {
		_spec.SetField(partnershipreport.FieldReportPeriod, field.TypeString, value)
		_node.ReportPeriod = value
	}
	if value, ok := _c.mutation.GeneratedAt(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedAt, field.TypeTime, value)
		_node.GeneratedAt = value
	}
	if value, ok := _c.mutation.GeneratedBy(); ok {
		_spec.SetField(partnershipreport.FieldGeneratedBy, field.TypeString, value)
		_node.GeneratedBy = value
	}
	if value, ok := _c.mutation.ImpactMetrics(); ok {
		_spec.SetField(partnershipreport.FieldImpactMetrics, field.TypeJSON, value)
		_node.ImpactMetrics = value
	}
	if value, ok := _c.mutation.Outcomes(); ok {
		_spec.SetField(partnershipreport.FieldOutcomes, field.TypeJSON, value)
		_node.Outcomes = value
	}
	if value, ok := _c.mutation.Feedback(); ok {
		_spec.SetField(partnershipreport.FieldFeedback, field.TypeJSON, value)
		_node.Feedback = value
	}
	if value, ok := _c.mutation.ReportURL(); ok {
		_spec.SetField(partnershipreport.FieldReportURL, field.TypeString, value)
		_node.ReportURL = value
	}
	if value, ok := _c.mutation.PresentationURL(); ok {
		_spec.SetField(partnershipreport.FieldPresentationURL, field.TypeString, value)
		_node.PresentationURL = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(partnershipreport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipreport.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partnership_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipReport.Create().
//		SetReportPeriod(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipReportUpsert) {
//			SetReportPeriod(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipReportCreate) OnConflict(opts ...sql.ConflictOption) *PartnershipReportUpsertOne {
	_c.conflict = opts
	return &PartnershipReportUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipReportCreate) OnConflictColumns(columns ...string) *PartnershipReportUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipReportUpsertOne{
		create: _c,
	}
}

type (
	// PartnershipReportUpsertOne is the builder for "upsert"-ing
	//  one PartnershipReport node.
	PartnershipReportUpsertOne struct {
		create *PartnershipReportCreate
	}

	// PartnershipReportUpsert is the "OnConflict" setter.
	PartnershipReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetReportPeriod sets the "report_period" field.
func (u *PartnershipReportUpsert) SetReportPeriod(v string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldReportPeriod, v)
	return u
}

// UpdateReportPeriod sets the "report_period" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateReportPeriod() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldReportPeriod)
	return u
}

// SetGeneratedAt sets the "generated_at" field.
func (u *PartnershipReportUpsert) SetGeneratedAt(v time.Time) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldGeneratedAt, v)
	return u
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateGeneratedAt() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldGeneratedAt)
	return u
}

// SetGeneratedBy sets the "generated_by" field.
func (u *PartnershipReportUpsert) SetGeneratedBy(v string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldGeneratedBy, v)
	return u
}

// UpdateGeneratedBy sets the "generated_by" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateGeneratedBy() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldGeneratedBy)
	return u
}

// ClearGeneratedBy clears the value of the "generated_by" field.
func (u *PartnershipReportUpsert) ClearGeneratedBy() *PartnershipReportUpsert {
	u.SetNull(partnershipreport.FieldGeneratedBy)
	return u
}

// SetImpactMetrics sets the "impact_metrics" field.
func (u *PartnershipReportUpsert) SetImpactMetrics(v map[string]interface{}) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldImpactMetrics, v)
	return u
}

// UpdateImpactMetrics sets the "impact_metrics" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateImpactMetrics() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldImpactMetrics)
	return u
}

// SetOutcomes sets the "outcomes" field.
func (u *PartnershipReportUpsert) SetOutcomes(v []string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldOutcomes, v)
	return u
}

// UpdateOutcomes sets the "outcomes" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateOutcomes() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldOutcomes)
	return u
}

// SetFeedback sets the "feedback" field.
func (u *PartnershipReportUpsert) SetFeedback(v []string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldFeedback, v)
	return u
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateFeedback() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldFeedback)
	return u
}

// SetReportURL sets the "report_url" field.
func (u *PartnershipReportUpsert) SetReportURL(v string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldReportURL, v)
	return u
}

// UpdateReportURL sets the "report_url" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateReportURL() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldReportURL)
	return u
}

// ClearReportURL clears the value of the "report_url" field.
func (u *PartnershipReportUpsert) ClearReportURL() *PartnershipReportUpsert {
	u.SetNull(partnershipreport.FieldReportURL)
	return u
}

// SetPresentationURL sets the "presentation_url" field.
func (u *PartnershipReportUpsert) SetPresentationURL(v string) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldPresentationURL, v)
	return u
}

// UpdatePresentationURL sets the "presentation_url" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdatePresentationURL() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldPresentationURL)
	return u
}

// ClearPresentationURL clears the value of the "presentation_url" field.
func (u *PartnershipReportUpsert) ClearPresentationURL() *PartnershipReportUpsert {
	u.SetNull(partnershipreport.FieldPresentationURL)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipReportUpsert) SetUpdatedAt(v time.Time) *PartnershipReportUpsert {
	u.Set(partnershipreport.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsert) UpdateUpdatedAt() *PartnershipReportUpsert {
	u.SetExcluded(partnershipreport.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipReportUpsertOne) UpdateNewValues() *PartnershipReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnershipreport.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnershipReportUpsertOne) Ignore() *PartnershipReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipReportUpsertOne) DoNothing() *PartnershipReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipReportCreate.OnConflict
// documentation for more info.
func (u *PartnershipReportUpsertOne) Update(set func(*PartnershipReportUpsert)) *PartnershipReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetReportPeriod sets the "report_period" field.
func (u *PartnershipReportUpsertOne) SetReportPeriod(v string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetReportPeriod(v)
	})
}

// UpdateReportPeriod sets the "report_period" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateReportPeriod() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateReportPeriod()
	})
}

// SetGeneratedAt sets the "generated_at" field.
func (u *PartnershipReportUpsertOne) SetGeneratedAt(v time.Time) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetGeneratedAt(v)
	})
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateGeneratedAt() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateGeneratedAt()
	})
}

// SetGeneratedBy sets the "generated_by" field.
func (u *PartnershipReportUpsertOne) SetGeneratedBy(v string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetGeneratedBy(v)
	})
}

// UpdateGeneratedBy sets the "generated_by" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateGeneratedBy() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateGeneratedBy()
	})
}

// ClearGeneratedBy clears the value of the "generated_by" field.
func (u *PartnershipReportUpsertOne) ClearGeneratedBy() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearGeneratedBy()
	})
}

// SetImpactMetrics sets the "impact_metrics" field.
func (u *PartnershipReportUpsertOne) SetImpactMetrics(v map[string]interface{}) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetImpactMetrics(v)
	})
}

// UpdateImpactMetrics sets the "impact_metrics" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateImpactMetrics() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateImpactMetrics()
	})
}

// SetOutcomes sets the "outcomes" field.
func (u *PartnershipReportUpsertOne) SetOutcomes(v []string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetOutcomes(v)
	})
}

// UpdateOutcomes sets the "outcomes" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateOutcomes() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateOutcomes()
	})
}

// SetFeedback sets the "feedback" field.
func (u *PartnershipReportUpsertOne) SetFeedback(v []string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateFeedback() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateFeedback()
	})
}

// SetReportURL sets the "report_url" field.
func (u *PartnershipReportUpsertOne) SetReportURL(v string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetReportURL(v)
	})
}

// UpdateReportURL sets the "report_url" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateReportURL() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateReportURL()
	})
}

// ClearReportURL clears the value of the "report_url" field.
func (u *PartnershipReportUpsertOne) ClearReportURL() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearReportURL()
	})
}

// SetPresentationURL sets the "presentation_url" field.
func (u *PartnershipReportUpsertOne) SetPresentationURL(v string) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetPresentationURL(v)
	})
}

// UpdatePresentationURL sets the "presentation_url" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdatePresentationURL() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdatePresentationURL()
	})
}

// ClearPresentationURL clears the value of the "presentation_url" field.
func (u *PartnershipReportUpsertOne) ClearPresentationURL() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearPresentationURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipReportUpsertOne) SetUpdatedAt(v time.Time) *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsertOne) UpdateUpdatedAt() *PartnershipReportUpsertOne {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnershipReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnershipReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnershipReportCreateBulk is the builder for creating many PartnershipReport entities in bulk.
type PartnershipReportCreateBulk struct {
	config
	err      error
	builders []*PartnershipReportCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnershipReport entities in the database.
func (_c *PartnershipReportCreateBulk) Save(ctx context.Context) ([]*PartnershipReport, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PartnershipReport, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnershipReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnershipReportCreateBulk) SaveX(ctx context.Context) []*PartnershipReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipReportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipReportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipReportUpsert) {
//			SetReportPeriod(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnershipReportUpsertBulk {
	_c.conflict = opts
	return &PartnershipReportUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipReportCreateBulk) OnConflictColumns(columns ...string) *PartnershipReportUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipReportUpsertBulk{
		create: _c,
	}
}

// PartnershipReportUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnershipReport nodes.
type PartnershipReportUpsertBulk struct {
	create *PartnershipReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipReportUpsertBulk) UpdateNewValues() *PartnershipReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnershipreport.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnershipReportUpsertBulk) Ignore() *PartnershipReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipReportUpsertBulk) DoNothing() *PartnershipReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipReportCreateBulk.OnConflict
// documentation for more info.
func (u *PartnershipReportUpsertBulk) Update(set func(*PartnershipReportUpsert)) *PartnershipReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetReportPeriod sets the "report_period" field.
func (u *PartnershipReportUpsertBulk) SetReportPeriod(v string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetReportPeriod(v)
	})
}

// UpdateReportPeriod sets the "report_period" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateReportPeriod() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateReportPeriod()
	})
}

// SetGeneratedAt sets the "generated_at" field.
func (u *PartnershipReportUpsertBulk) SetGeneratedAt(v time.Time) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetGeneratedAt(v)
	})
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateGeneratedAt() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateGeneratedAt()
	})
}

// SetGeneratedBy sets the "generated_by" field.
func (u *PartnershipReportUpsertBulk) SetGeneratedBy(v string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetGeneratedBy(v)
	})
}

// UpdateGeneratedBy sets the "generated_by" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateGeneratedBy() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateGeneratedBy()
	})
}

// ClearGeneratedBy clears the value of the "generated_by" field.
func (u *PartnershipReportUpsertBulk) ClearGeneratedBy() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearGeneratedBy()
	})
}

// SetImpactMetrics sets the "impact_metrics" field.
func (u *PartnershipReportUpsertBulk) SetImpactMetrics(v map[string]interface{}) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetImpactMetrics(v)
	})
}

// UpdateImpactMetrics sets the "impact_metrics" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateImpactMetrics() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateImpactMetrics()
	})
}

// SetOutcomes sets the "outcomes" field.
func (u *PartnershipReportUpsertBulk) SetOutcomes(v []string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetOutcomes(v)
	})
}

// UpdateOutcomes sets the "outcomes" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateOutcomes() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateOutcomes()
	})
}

// SetFeedback sets the "feedback" field.
func (u *PartnershipReportUpsertBulk) SetFeedback(v []string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateFeedback() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateFeedback()
	})
}

// SetReportURL sets the "report_url" field.
func (u *PartnershipReportUpsertBulk) SetReportURL(v string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetReportURL(v)
	})
}

// UpdateReportURL sets the "report_url" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateReportURL() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateReportURL()
	})
}

// ClearReportURL clears the value of the "report_url" field.
func (u *PartnershipReportUpsertBulk) ClearReportURL() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearReportURL()
	})
}

// SetPresentationURL sets the "presentation_url" field.
func (u *PartnershipReportUpsertBulk) SetPresentationURL(v string) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetPresentationURL(v)
	})
}

// UpdatePresentationURL sets the "presentation_url" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdatePresentationURL() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdatePresentationURL()
	})
}

// ClearPresentationURL clears the value of the "presentation_url" field.
func (u *PartnershipReportUpsertBulk) ClearPresentationURL() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.ClearPresentationURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipReportUpsertBulk) SetUpdatedAt(v time.Time) *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipReportUpsertBulk) UpdateUpdatedAt() *PartnershipReportUpsertBulk {
	return u.Update(func(s *PartnershipReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnershipReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
