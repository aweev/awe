// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"awe/ent/ent/partnershiprenewal"
	"awe/ent/ent/partnershipreport"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PartnershipUpdate is the builder for updating Partnership entities.
type PartnershipUpdate struct {
	config
	hooks    []Hook
	mutation *PartnershipMutation
}

// Where appends a list predicates to the PartnershipUpdate builder.
func (_u *PartnershipUpdate) Where(ps ...predicate.Partnership) *PartnershipUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *PartnershipUpdate) SetSlug(v string) *PartnershipUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableSlug(v *string) *PartnershipUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *PartnershipUpdate) SetName(v map[string]string) *PartnershipUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetType sets the "type" field.
func (_u *PartnershipUpdate) SetType(v partnership.Type) *PartnershipUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableType(v *partnership.Type) *PartnershipUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *PartnershipUpdate) SetStatus(v partnership.Status) *PartnershipUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableStatus(v *partnership.Status) *PartnershipUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PartnershipUpdate) SetDescription(v map[string]interface{}) *PartnershipUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetValue sets the "value" field.
func (_u *PartnershipUpdate) SetValue(v float64) *PartnershipUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableValue(v *float64) *PartnershipUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *PartnershipUpdate) AddValue(v float64) *PartnershipUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *PartnershipUpdate) ClearValue() *PartnershipUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *PartnershipUpdate) SetCurrency(v string) *PartnershipUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableCurrency(v *string) *PartnershipUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *PartnershipUpdate) SetStartDate(v time.Time) *PartnershipUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableStartDate(v *time.Time) *PartnershipUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *PartnershipUpdate) ClearStartDate() *PartnershipUpdate {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *PartnershipUpdate) SetEndDate(v time.Time) *PartnershipUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableEndDate(v *time.Time) *PartnershipUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *PartnershipUpdate) ClearEndDate() *PartnershipUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *PartnershipUpdate) SetRenewalDate(v time.Time) *PartnershipUpdate {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableRenewalDate(v *time.Time) *PartnershipUpdate {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *PartnershipUpdate) ClearRenewalDate() *PartnershipUpdate {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetBenefits sets the "benefits" field.
func (_u *PartnershipUpdate) SetBenefits(v []string) *PartnershipUpdate {
	_u.mutation.SetBenefits(v)
	return _u
}

// AppendBenefits appends value to the "benefits" field.
func (_u *PartnershipUpdate) AppendBenefits(v []string) *PartnershipUpdate {
	_u.mutation.AppendBenefits(v)
	return _u
}

// SetDeliverables sets the "deliverables" field.
func (_u *PartnershipUpdate) SetDeliverables(v []string) *PartnershipUpdate {
	_u.mutation.SetDeliverables(v)
	return _u
}

// AppendDeliverables appends value to the "deliverables" field.
func (_u *PartnershipUpdate) AppendDeliverables(v []string) *PartnershipUpdate {
	_u.mutation.AppendDeliverables(v)
	return _u
}

// SetRequirements sets the "requirements" field.
func (_u *PartnershipUpdate) SetRequirements(v []string) *PartnershipUpdate {
	_u.mutation.SetRequirements(v)
	return _u
}

// AppendRequirements appends value to the "requirements" field.
func (_u *PartnershipUpdate) AppendRequirements(v []string) *PartnershipUpdate {
	_u.mutation.AppendRequirements(v)
	return _u
}

// SetLastContact sets the "last_contact" field.
func (_u *PartnershipUpdate) SetLastContact(v time.Time) *PartnershipUpdate {
	_u.mutation.SetLastContact(v)
	return _u
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableLastContact(v *time.Time) *PartnershipUpdate {
	if v != nil {
		_u.SetLastContact(*v)
	}
	return _u
}

// ClearLastContact clears the value of the "last_contact" field.
func (_u *PartnershipUpdate) ClearLastContact() *PartnershipUpdate {
	_u.mutation.ClearLastContact()
	return _u
}

// SetNextFollowUp sets the "next_follow_up" field.
func (_u *PartnershipUpdate) SetNextFollowUp(v time.Time) *PartnershipUpdate {
	_u.mutation.SetNextFollowUp(v)
	return _u
}

// SetNillableNextFollowUp sets the "next_follow_up" field if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableNextFollowUp(v *time.Time) *PartnershipUpdate {
	if v != nil {
		_u.SetNextFollowUp(*v)
	}
	return _u
}

// ClearNextFollowUp clears the value of the "next_follow_up" field.
func (_u *PartnershipUpdate) ClearNextFollowUp() *PartnershipUpdate {
	_u.mutation.ClearNextFollowUp()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipUpdate) SetUpdatedAt(v time.Time) *PartnershipUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *PartnershipUpdate) SetOrganizationID(id int) *PartnershipUpdate {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *PartnershipUpdate) SetOrganization(v *Organization) *PartnershipUpdate {
	return _u.SetOrganizationID(v.ID)
}

// SetManagerID sets the "manager" edge to the User entity by ID.
func (_u *PartnershipUpdate) SetManagerID(id int) *PartnershipUpdate {
	_u.mutation.SetManagerID(id)
	return _u
}

// SetNillableManagerID sets the "manager" edge to the User entity by ID if the given value is not nil.
func (_u *PartnershipUpdate) SetNillableManagerID(id *int) *PartnershipUpdate {
	if id != nil {
		_u = _u.SetManagerID(*id)
	}
	return _u
}

// SetManager sets the "manager" edge to the User entity.
func (_u *PartnershipUpdate) SetManager(v *User) *PartnershipUpdate {
	return _u.SetManagerID(v.ID)
}

// AddPrimaryContactIDs adds the "primary_contacts" edge to the User entity by IDs.
func (_u *PartnershipUpdate) AddPrimaryContactIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.AddPrimaryContactIDs(ids...)
	return _u
}

// AddPrimaryContacts adds the "primary_contacts" edges to the User entity.
func (_u *PartnershipUpdate) AddPrimaryContacts(v ...*User) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPrimaryContactIDs(ids...)
}

// AddReportIDs adds the "reports" edge to the PartnershipReport entity by IDs.
func (_u *PartnershipUpdate) AddReportIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the PartnershipReport entity.
func (_u *PartnershipUpdate) AddReports(v ...*PartnershipReport) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// AddInteractionIDs adds the "interactions" edge to the PartnershipInteraction entity by IDs.
func (_u *PartnershipUpdate) AddInteractionIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.AddInteractionIDs(ids...)
	return _u
}

// AddInteractions adds the "interactions" edges to the PartnershipInteraction entity.
func (_u *PartnershipUpdate) AddInteractions(v ...*PartnershipInteraction) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInteractionIDs(ids...)
}

// AddRenewalIDs adds the "renewals" edge to the PartnershipRenewal entity by IDs.
func (_u *PartnershipUpdate) AddRenewalIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.AddRenewalIDs(ids...)
	return _u
}

// AddRenewals adds the "renewals" edges to the PartnershipRenewal entity.
func (_u *PartnershipUpdate) AddRenewals(v ...*PartnershipRenewal) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenewalIDs(ids...)
}

// AddBrandBenefitIDs adds the "brand_benefits" edge to the BrandBenefit entity by IDs.
func (_u *PartnershipUpdate) AddBrandBenefitIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.AddBrandBenefitIDs(ids...)
	return _u
}

// AddBrandBenefits adds the "brand_benefits" edges to the BrandBenefit entity.
func (_u *PartnershipUpdate) AddBrandBenefits(v ...*BrandBenefit) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBrandBenefitIDs(ids...)
}

// Mutation returns the PartnershipMutation object of the builder.
func (_u *PartnershipUpdate) Mutation() *PartnershipMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *PartnershipUpdate) ClearOrganization() *PartnershipUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearManager clears the "manager" edge to the User entity.
func (_u *PartnershipUpdate) ClearManager() *PartnershipUpdate {
	_u.mutation.ClearManager()
	return _u
}

// ClearPrimaryContacts clears all "primary_contacts" edges to the User entity.
func (_u *PartnershipUpdate) ClearPrimaryContacts() *PartnershipUpdate {
	_u.mutation.ClearPrimaryContacts()
	return _u
}

// RemovePrimaryContactIDs removes the "primary_contacts" edge to User entities by IDs.
func (_u *PartnershipUpdate) RemovePrimaryContactIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.RemovePrimaryContactIDs(ids...)
	return _u
}

// RemovePrimaryContacts removes "primary_contacts" edges to User entities.
func (_u *PartnershipUpdate) RemovePrimaryContacts(v ...*User) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePrimaryContactIDs(ids...)
}

// ClearReports clears all "reports" edges to the PartnershipReport entity.
func (_u *PartnershipUpdate) ClearReports() *PartnershipUpdate {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to PartnershipReport entities by IDs.
func (_u *PartnershipUpdate) RemoveReportIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to PartnershipReport entities.
func (_u *PartnershipUpdate) RemoveReports(v ...*PartnershipReport) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// ClearInteractions clears all "interactions" edges to the PartnershipInteraction entity.
func (_u *PartnershipUpdate) ClearInteractions() *PartnershipUpdate {
	_u.mutation.ClearInteractions()
	return _u
}

// RemoveInteractionIDs removes the "interactions" edge to PartnershipInteraction entities by IDs.
func (_u *PartnershipUpdate) RemoveInteractionIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.RemoveInteractionIDs(ids...)
	return _u
}

// RemoveInteractions removes "interactions" edges to PartnershipInteraction entities.
func (_u *PartnershipUpdate) RemoveInteractions(v ...*PartnershipInteraction) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInteractionIDs(ids...)
}

// ClearRenewals clears all "renewals" edges to the PartnershipRenewal entity.
func (_u *PartnershipUpdate) ClearRenewals() *PartnershipUpdate {
	_u.mutation.ClearRenewals()
	return _u
}

// RemoveRenewalIDs removes the "renewals" edge to PartnershipRenewal entities by IDs.
func (_u *PartnershipUpdate) RemoveRenewalIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.RemoveRenewalIDs(ids...)
	return _u
}

// RemoveRenewals removes "renewals" edges to PartnershipRenewal entities.
func (_u *PartnershipUpdate) RemoveRenewals(v ...*PartnershipRenewal) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenewalIDs(ids...)
}

// ClearBrandBenefits clears all "brand_benefits" edges to the BrandBenefit entity.
func (_u *PartnershipUpdate) ClearBrandBenefits() *PartnershipUpdate {
	_u.mutation.ClearBrandBenefits()
	return _u
}

// RemoveBrandBenefitIDs removes the "brand_benefits" edge to BrandBenefit entities by IDs.
func (_u *PartnershipUpdate) RemoveBrandBenefitIDs(ids ...int) *PartnershipUpdate {
	_u.mutation.RemoveBrandBenefitIDs(ids...)
	return _u
}

// RemoveBrandBenefits removes "brand_benefits" edges to BrandBenefit entities.
func (_u *PartnershipUpdate) RemoveBrandBenefits(v ...*BrandBenefit) *PartnershipUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBrandBenefitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnershipUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnershipUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnership.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := partnership.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partnership.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := partnership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partnership.status": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Partnership.organization"`)
	}
	return nil
}

func (_u *PartnershipUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnership.Table, partnership.Columns, sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(partnership.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(partnership.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(partnership.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(partnership.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(partnership.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(partnership.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(partnership.FieldValue, field.TypeFloat64, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(partnership.FieldValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(partnership.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(partnership.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(partnership.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(partnership.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(partnership.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(partnership.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(partnership.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Benefits(); ok {
		_spec.SetField(partnership.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldBenefits, value)
		})
	}
	if value, ok := _u.mutation.Deliverables(); ok {
		_spec.SetField(partnership.FieldDeliverables, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDeliverables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldDeliverables, value)
		})
	}
	if value, ok := _u.mutation.Requirements(); ok {
		_spec.SetField(partnership.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldRequirements, value)
		})
	}
	if value, ok := _u.mutation.LastContact(); ok {
		_spec.SetField(partnership.FieldLastContact, field.TypeTime, value)
	}
	if _u.mutation.LastContactCleared() {
		_spec.ClearField(partnership.FieldLastContact, field.TypeTime)
	}
	if value, ok := _u.mutation.NextFollowUp(); ok {
		_spec.SetField(partnership.FieldNextFollowUp, field.TypeTime, value)
	}
	if _u.mutation.NextFollowUpCleared() {
		_spec.ClearField(partnership.FieldNextFollowUp, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnership.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PrimaryContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPrimaryContactsIDs(); len(nodes) > 0 && !_u.mutation.PrimaryContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrimaryContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInteractionsIDs(); len(nodes) > 0 && !_u.mutation.InteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InteractionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RenewalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRenewalsIDs(); len(nodes) > 0 && !_u.mutation.RenewalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RenewalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BrandBenefitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBrandBenefitsIDs(); len(nodes) > 0 && !_u.mutation.BrandBenefitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BrandBenefitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnershipUpdateOne is the builder for updating a single Partnership entity.
type PartnershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnershipMutation
}

// SetSlug sets the "slug" field.
func (_u *PartnershipUpdateOne) SetSlug(v string) *PartnershipUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableSlug(v *string) *PartnershipUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *PartnershipUpdateOne) SetName(v map[string]string) *PartnershipUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetType sets the "type" field.
func (_u *PartnershipUpdateOne) SetType(v partnership.Type) *PartnershipUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableType(v *partnership.Type) *PartnershipUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *PartnershipUpdateOne) SetStatus(v partnership.Status) *PartnershipUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableStatus(v *partnership.Status) *PartnershipUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PartnershipUpdateOne) SetDescription(v map[string]interface{}) *PartnershipUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetValue sets the "value" field.
func (_u *PartnershipUpdateOne) SetValue(v float64) *PartnershipUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableValue(v *float64) *PartnershipUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *PartnershipUpdateOne) AddValue(v float64) *PartnershipUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *PartnershipUpdateOne) ClearValue() *PartnershipUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *PartnershipUpdateOne) SetCurrency(v string) *PartnershipUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableCurrency(v *string) *PartnershipUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *PartnershipUpdateOne) SetStartDate(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableStartDate(v *time.Time) *PartnershipUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *PartnershipUpdateOne) ClearStartDate() *PartnershipUpdateOne {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *PartnershipUpdateOne) SetEndDate(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableEndDate(v *time.Time) *PartnershipUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *PartnershipUpdateOne) ClearEndDate() *PartnershipUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetRenewalDate sets the "renewal_date" field.
func (_u *PartnershipUpdateOne) SetRenewalDate(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetRenewalDate(v)
	return _u
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableRenewalDate(v *time.Time) *PartnershipUpdateOne {
	if v != nil {
		_u.SetRenewalDate(*v)
	}
	return _u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (_u *PartnershipUpdateOne) ClearRenewalDate() *PartnershipUpdateOne {
	_u.mutation.ClearRenewalDate()
	return _u
}

// SetBenefits sets the "benefits" field.
func (_u *PartnershipUpdateOne) SetBenefits(v []string) *PartnershipUpdateOne {
	_u.mutation.SetBenefits(v)
	return _u
}

// AppendBenefits appends value to the "benefits" field.
func (_u *PartnershipUpdateOne) AppendBenefits(v []string) *PartnershipUpdateOne {
	_u.mutation.AppendBenefits(v)
	return _u
}

// SetDeliverables sets the "deliverables" field.
func (_u *PartnershipUpdateOne) SetDeliverables(v []string) *PartnershipUpdateOne {
	_u.mutation.SetDeliverables(v)
	return _u
}

// AppendDeliverables appends value to the "deliverables" field.
func (_u *PartnershipUpdateOne) AppendDeliverables(v []string) *PartnershipUpdateOne {
	_u.mutation.AppendDeliverables(v)
	return _u
}

// SetRequirements sets the "requirements" field.
func (_u *PartnershipUpdateOne) SetRequirements(v []string) *PartnershipUpdateOne {
	_u.mutation.SetRequirements(v)
	return _u
}

// AppendRequirements appends value to the "requirements" field.
func (_u *PartnershipUpdateOne) AppendRequirements(v []string) *PartnershipUpdateOne {
	_u.mutation.AppendRequirements(v)
	return _u
}

// SetLastContact sets the "last_contact" field.
func (_u *PartnershipUpdateOne) SetLastContact(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetLastContact(v)
	return _u
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableLastContact(v *time.Time) *PartnershipUpdateOne {
	if v != nil {
		_u.SetLastContact(*v)
	}
	return _u
}

// ClearLastContact clears the value of the "last_contact" field.
func (_u *PartnershipUpdateOne) ClearLastContact() *PartnershipUpdateOne {
	_u.mutation.ClearLastContact()
	return _u
}

// SetNextFollowUp sets the "next_follow_up" field.
func (_u *PartnershipUpdateOne) SetNextFollowUp(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetNextFollowUp(v)
	return _u
}

// SetNillableNextFollowUp sets the "next_follow_up" field if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableNextFollowUp(v *time.Time) *PartnershipUpdateOne {
	if v != nil {
		_u.SetNextFollowUp(*v)
	}
	return _u
}

// ClearNextFollowUp clears the value of the "next_follow_up" field.
func (_u *PartnershipUpdateOne) ClearNextFollowUp() *PartnershipUpdateOne {
	_u.mutation.ClearNextFollowUp()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipUpdateOne) SetUpdatedAt(v time.Time) *PartnershipUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_u *PartnershipUpdateOne) SetOrganizationID(id int) *PartnershipUpdateOne {
	_u.mutation.SetOrganizationID(id)
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *PartnershipUpdateOne) SetOrganization(v *Organization) *PartnershipUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// SetManagerID sets the "manager" edge to the User entity by ID.
func (_u *PartnershipUpdateOne) SetManagerID(id int) *PartnershipUpdateOne {
	_u.mutation.SetManagerID(id)
	return _u
}

// SetNillableManagerID sets the "manager" edge to the User entity by ID if the given value is not nil.
func (_u *PartnershipUpdateOne) SetNillableManagerID(id *int) *PartnershipUpdateOne {
	if id != nil {
		_u = _u.SetManagerID(*id)
	}
	return _u
}

// SetManager sets the "manager" edge to the User entity.
func (_u *PartnershipUpdateOne) SetManager(v *User) *PartnershipUpdateOne {
	return _u.SetManagerID(v.ID)
}

// AddPrimaryContactIDs adds the "primary_contacts" edge to the User entity by IDs.
func (_u *PartnershipUpdateOne) AddPrimaryContactIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.AddPrimaryContactIDs(ids...)
	return _u
}

// AddPrimaryContacts adds the "primary_contacts" edges to the User entity.
func (_u *PartnershipUpdateOne) AddPrimaryContacts(v ...*User) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPrimaryContactIDs(ids...)
}

// AddReportIDs adds the "reports" edge to the PartnershipReport entity by IDs.
func (_u *PartnershipUpdateOne) AddReportIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the PartnershipReport entity.
func (_u *PartnershipUpdateOne) AddReports(v ...*PartnershipReport) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// AddInteractionIDs adds the "interactions" edge to the PartnershipInteraction entity by IDs.
func (_u *PartnershipUpdateOne) AddInteractionIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.AddInteractionIDs(ids...)
	return _u
}

// AddInteractions adds the "interactions" edges to the PartnershipInteraction entity.
func (_u *PartnershipUpdateOne) AddInteractions(v ...*PartnershipInteraction) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInteractionIDs(ids...)
}

// AddRenewalIDs adds the "renewals" edge to the PartnershipRenewal entity by IDs.
func (_u *PartnershipUpdateOne) AddRenewalIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.AddRenewalIDs(ids...)
	return _u
}

// AddRenewals adds the "renewals" edges to the PartnershipRenewal entity.
func (_u *PartnershipUpdateOne) AddRenewals(v ...*PartnershipRenewal) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenewalIDs(ids...)
}

// AddBrandBenefitIDs adds the "brand_benefits" edge to the BrandBenefit entity by IDs.
func (_u *PartnershipUpdateOne) AddBrandBenefitIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.AddBrandBenefitIDs(ids...)
	return _u
}

// AddBrandBenefits adds the "brand_benefits" edges to the BrandBenefit entity.
func (_u *PartnershipUpdateOne) AddBrandBenefits(v ...*BrandBenefit) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBrandBenefitIDs(ids...)
}

// Mutation returns the PartnershipMutation object of the builder.
func (_u *PartnershipUpdateOne) Mutation() *PartnershipMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *PartnershipUpdateOne) ClearOrganization() *PartnershipUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearManager clears the "manager" edge to the User entity.
func (_u *PartnershipUpdateOne) ClearManager() *PartnershipUpdateOne {
	_u.mutation.ClearManager()
	return _u
}

// ClearPrimaryContacts clears all "primary_contacts" edges to the User entity.
func (_u *PartnershipUpdateOne) ClearPrimaryContacts() *PartnershipUpdateOne {
	_u.mutation.ClearPrimaryContacts()
	return _u
}

// RemovePrimaryContactIDs removes the "primary_contacts" edge to User entities by IDs.
func (_u *PartnershipUpdateOne) RemovePrimaryContactIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.RemovePrimaryContactIDs(ids...)
	return _u
}

// RemovePrimaryContacts removes "primary_contacts" edges to User entities.
func (_u *PartnershipUpdateOne) RemovePrimaryContacts(v ...*User) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePrimaryContactIDs(ids...)
}

// ClearReports clears all "reports" edges to the PartnershipReport entity.
func (_u *PartnershipUpdateOne) ClearReports() *PartnershipUpdateOne {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to PartnershipReport entities by IDs.
func (_u *PartnershipUpdateOne) RemoveReportIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to PartnershipReport entities.
func (_u *PartnershipUpdateOne) RemoveReports(v ...*PartnershipReport) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// ClearInteractions clears all "interactions" edges to the PartnershipInteraction entity.
func (_u *PartnershipUpdateOne) ClearInteractions() *PartnershipUpdateOne {
	_u.mutation.ClearInteractions()
	return _u
}

// RemoveInteractionIDs removes the "interactions" edge to PartnershipInteraction entities by IDs.
func (_u *PartnershipUpdateOne) RemoveInteractionIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.RemoveInteractionIDs(ids...)
	return _u
}

// RemoveInteractions removes "interactions" edges to PartnershipInteraction entities.
func (_u *PartnershipUpdateOne) RemoveInteractions(v ...*PartnershipInteraction) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInteractionIDs(ids...)
}

// ClearRenewals clears all "renewals" edges to the PartnershipRenewal entity.
func (_u *PartnershipUpdateOne) ClearRenewals() *PartnershipUpdateOne {
	_u.mutation.ClearRenewals()
	return _u
}

// RemoveRenewalIDs removes the "renewals" edge to PartnershipRenewal entities by IDs.
func (_u *PartnershipUpdateOne) RemoveRenewalIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.RemoveRenewalIDs(ids...)
	return _u
}

// RemoveRenewals removes "renewals" edges to PartnershipRenewal entities.
func (_u *PartnershipUpdateOne) RemoveRenewals(v ...*PartnershipRenewal) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenewalIDs(ids...)
}

// ClearBrandBenefits clears all "brand_benefits" edges to the BrandBenefit entity.
func (_u *PartnershipUpdateOne) ClearBrandBenefits() *PartnershipUpdateOne {
	_u.mutation.ClearBrandBenefits()
	return _u
}

// RemoveBrandBenefitIDs removes the "brand_benefits" edge to BrandBenefit entities by IDs.
func (_u *PartnershipUpdateOne) RemoveBrandBenefitIDs(ids ...int) *PartnershipUpdateOne {
	_u.mutation.RemoveBrandBenefitIDs(ids...)
	return _u
}

// RemoveBrandBenefits removes "brand_benefits" edges to BrandBenefit entities.
func (_u *PartnershipUpdateOne) RemoveBrandBenefits(v ...*BrandBenefit) *PartnershipUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBrandBenefitIDs(ids...)
}

// Where appends a list predicates to the PartnershipUpdate builder.
func (_u *PartnershipUpdateOne) Where(ps ...predicate.Partnership) *PartnershipUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnershipUpdateOne) Select(field string, fields ...string) *PartnershipUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Partnership entity.
func (_u *PartnershipUpdateOne) Save(ctx context.Context) (*Partnership, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipUpdateOne) SaveX(ctx context.Context) *Partnership {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnershipUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnership.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := partnership.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partnership.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := partnership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partnership.status": %w`, err)}
		}
	}
	if _u.mutation.OrganizationCleared() && len(_u.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Partnership.organization"`)
	}
	return nil
}

func (_u *PartnershipUpdateOne) sqlSave(ctx context.Context) (_node *Partnership, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnership.Table, partnership.Columns, sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partnership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnership.FieldID)
		for _, f := range fields {
			if !partnership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(partnership.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(partnership.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(partnership.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(partnership.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(partnership.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(partnership.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(partnership.FieldValue, field.TypeFloat64, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(partnership.FieldValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(partnership.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(partnership.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(partnership.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(partnership.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(partnership.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.RenewalDate(); ok {
		_spec.SetField(partnership.FieldRenewalDate, field.TypeTime, value)
	}
	if _u.mutation.RenewalDateCleared() {
		_spec.ClearField(partnership.FieldRenewalDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Benefits(); ok {
		_spec.SetField(partnership.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldBenefits, value)
		})
	}
	if value, ok := _u.mutation.Deliverables(); ok {
		_spec.SetField(partnership.FieldDeliverables, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDeliverables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldDeliverables, value)
		})
	}
	if value, ok := _u.mutation.Requirements(); ok {
		_spec.SetField(partnership.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, partnership.FieldRequirements, value)
		})
	}
	if value, ok := _u.mutation.LastContact(); ok {
		_spec.SetField(partnership.FieldLastContact, field.TypeTime, value)
	}
	if _u.mutation.LastContactCleared() {
		_spec.ClearField(partnership.FieldLastContact, field.TypeTime)
	}
	if value, ok := _u.mutation.NextFollowUp(); ok {
		_spec.SetField(partnership.FieldNextFollowUp, field.TypeTime, value)
	}
	if _u.mutation.NextFollowUpCleared() {
		_spec.ClearField(partnership.FieldNextFollowUp, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnership.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PrimaryContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPrimaryContactsIDs(); len(nodes) > 0 && !_u.mutation.PrimaryContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrimaryContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInteractionsIDs(); len(nodes) > 0 && !_u.mutation.InteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InteractionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RenewalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRenewalsIDs(); len(nodes) > 0 && !_u.mutation.RenewalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RenewalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BrandBenefitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBrandBenefitsIDs(); len(nodes) > 0 && !_u.mutation.BrandBenefitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BrandBenefitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Partnership{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
