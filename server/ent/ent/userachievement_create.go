// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/badge"
	"awe/ent/ent/user"
	"awe/ent/ent/userachievement"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAchievementCreate is the builder for creating a UserAchievement entity.
type UserAchievementCreate struct {
	config
	mutation *UserAchievementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAwardedAt sets the "awarded_at" field.
func (_c *UserAchievementCreate) SetAwardedAt(v time.Time) *UserAchievementCreate {
	_c.mutation.SetAwardedAt(v)
	return _c
}

// SetNillableAwardedAt sets the "awarded_at" field if the given value is not nil.
func (_c *UserAchievementCreate) SetNillableAwardedAt(v *time.Time) *UserAchievementCreate {
	if v != nil {
		_c.SetAwardedAt(*v)
	}
	return _c
}

// SetNotes sets the "notes" field.
func (_c *UserAchievementCreate) SetNotes(v string) *UserAchievementCreate {
	_c.mutation.SetNotes(v)
	return _c
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_c *UserAchievementCreate) SetNillableNotes(v *string) *UserAchievementCreate {
	if v != nil {
		_c.SetNotes(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserAchievementCreate) SetUserID(id int) *UserAchievementCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserAchievementCreate) SetUser(v *User) *UserAchievementCreate {
	return _c.SetUserID(v.ID)
}

// SetBadgeID sets the "badge" edge to the Badge entity by ID.
func (_c *UserAchievementCreate) SetBadgeID(id int) *UserAchievementCreate {
	_c.mutation.SetBadgeID(id)
	return _c
}

// SetBadge sets the "badge" edge to the Badge entity.
func (_c *UserAchievementCreate) SetBadge(v *Badge) *UserAchievementCreate {
	return _c.SetBadgeID(v.ID)
}

// Mutation returns the UserAchievementMutation object of the builder.
func (_c *UserAchievementCreate) Mutation() *UserAchievementMutation {
	return _c.mutation
}

// Save creates the UserAchievement in the database.
func (_c *UserAchievementCreate) Save(ctx context.Context) (*UserAchievement, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserAchievementCreate) SaveX(ctx context.Context) *UserAchievement {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserAchievementCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserAchievementCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserAchievementCreate) defaults() {
	if _, ok := _c.mutation.AwardedAt(); !ok {
		v := userachievement.DefaultAwardedAt()
		_c.mutation.SetAwardedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserAchievementCreate) check() error {
	if _, ok := _c.mutation.AwardedAt(); !ok {
		return &ValidationError{Name: "awarded_at", err: errors.New(`ent: missing required field "UserAchievement.awarded_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAchievement.user"`)}
	}
	if len(_c.mutation.BadgeIDs()) == 0 {
		return &ValidationError{Name: "badge", err: errors.New(`ent: missing required edge "UserAchievement.badge"`)}
	}
	return nil
}

func (_c *UserAchievementCreate) sqlSave(ctx context.Context) (*UserAchievement, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserAchievementCreate) createSpec() (*UserAchievement, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAchievement{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(userachievement.Table, sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.AwardedAt(); ok {
		_spec.SetField(userachievement.FieldAwardedAt, field.TypeTime, value)
		_node.AwardedAt = value
	}
	if value, ok := _c.mutation.Notes(); ok {
		_spec.SetField(userachievement.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.UserTable,
			Columns: []string{userachievement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_achievements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BadgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.BadgeTable,
			Columns: []string{userachievement.BadgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.badge_user_achievements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAchievement.Create().
//		SetAwardedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAchievementUpsert) {
//			SetAwardedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserAchievementCreate) OnConflict(opts ...sql.ConflictOption) *UserAchievementUpsertOne {
	_c.conflict = opts
	return &UserAchievementUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserAchievementCreate) OnConflictColumns(columns ...string) *UserAchievementUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserAchievementUpsertOne{
		create: _c,
	}
}

type (
	// UserAchievementUpsertOne is the builder for "upsert"-ing
	//  one UserAchievement node.
	UserAchievementUpsertOne struct {
		create *UserAchievementCreate
	}

	// UserAchievementUpsert is the "OnConflict" setter.
	UserAchievementUpsert struct {
		*sql.UpdateSet
	}
)

// SetAwardedAt sets the "awarded_at" field.
func (u *UserAchievementUpsert) SetAwardedAt(v time.Time) *UserAchievementUpsert {
	u.Set(userachievement.FieldAwardedAt, v)
	return u
}

// UpdateAwardedAt sets the "awarded_at" field to the value that was provided on create.
func (u *UserAchievementUpsert) UpdateAwardedAt() *UserAchievementUpsert {
	u.SetExcluded(userachievement.FieldAwardedAt)
	return u
}

// SetNotes sets the "notes" field.
func (u *UserAchievementUpsert) SetNotes(v string) *UserAchievementUpsert {
	u.Set(userachievement.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *UserAchievementUpsert) UpdateNotes() *UserAchievementUpsert {
	u.SetExcluded(userachievement.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *UserAchievementUpsert) ClearNotes() *UserAchievementUpsert {
	u.SetNull(userachievement.FieldNotes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserAchievementUpsertOne) UpdateNewValues() *UserAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserAchievementUpsertOne) Ignore() *UserAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAchievementUpsertOne) DoNothing() *UserAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAchievementCreate.OnConflict
// documentation for more info.
func (u *UserAchievementUpsertOne) Update(set func(*UserAchievementUpsert)) *UserAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetAwardedAt sets the "awarded_at" field.
func (u *UserAchievementUpsertOne) SetAwardedAt(v time.Time) *UserAchievementUpsertOne {
	return u.Update(func(s *UserAchievementUpsert) {
		s.SetAwardedAt(v)
	})
}

// UpdateAwardedAt sets the "awarded_at" field to the value that was provided on create.
func (u *UserAchievementUpsertOne) UpdateAwardedAt() *UserAchievementUpsertOne {
	return u.Update(func(s *UserAchievementUpsert) {
		s.UpdateAwardedAt()
	})
}

// SetNotes sets the "notes" field.
func (u *UserAchievementUpsertOne) SetNotes(v string) *UserAchievementUpsertOne {
	return u.Update(func(s *UserAchievementUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *UserAchievementUpsertOne) UpdateNotes() *UserAchievementUpsertOne {
	return u.Update(func(s *UserAchievementUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *UserAchievementUpsertOne) ClearNotes() *UserAchievementUpsertOne {
	return u.Update(func(s *UserAchievementUpsert) {
		s.ClearNotes()
	})
}

// Exec executes the query.
func (u *UserAchievementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAchievementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAchievementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserAchievementUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserAchievementUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserAchievementCreateBulk is the builder for creating many UserAchievement entities in bulk.
type UserAchievementCreateBulk struct {
	config
	err      error
	builders []*UserAchievementCreate
	conflict []sql.ConflictOption
}

// Save creates the UserAchievement entities in the database.
func (_c *UserAchievementCreateBulk) Save(ctx context.Context) ([]*UserAchievement, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserAchievement, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserAchievementCreateBulk) SaveX(ctx context.Context) []*UserAchievement {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserAchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserAchievementCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAchievement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAchievementUpsert) {
//			SetAwardedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserAchievementCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserAchievementUpsertBulk {
	_c.conflict = opts
	return &UserAchievementUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserAchievementCreateBulk) OnConflictColumns(columns ...string) *UserAchievementUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserAchievementUpsertBulk{
		create: _c,
	}
}

// UserAchievementUpsertBulk is the builder for "upsert"-ing
// a bulk of UserAchievement nodes.
type UserAchievementUpsertBulk struct {
	create *UserAchievementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserAchievementUpsertBulk) UpdateNewValues() *UserAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAchievement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserAchievementUpsertBulk) Ignore() *UserAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAchievementUpsertBulk) DoNothing() *UserAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAchievementCreateBulk.OnConflict
// documentation for more info.
func (u *UserAchievementUpsertBulk) Update(set func(*UserAchievementUpsert)) *UserAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetAwardedAt sets the "awarded_at" field.
func (u *UserAchievementUpsertBulk) SetAwardedAt(v time.Time) *UserAchievementUpsertBulk {
	return u.Update(func(s *UserAchievementUpsert) {
		s.SetAwardedAt(v)
	})
}

// UpdateAwardedAt sets the "awarded_at" field to the value that was provided on create.
func (u *UserAchievementUpsertBulk) UpdateAwardedAt() *UserAchievementUpsertBulk {
	return u.Update(func(s *UserAchievementUpsert) {
		s.UpdateAwardedAt()
	})
}

// SetNotes sets the "notes" field.
func (u *UserAchievementUpsertBulk) SetNotes(v string) *UserAchievementUpsertBulk {
	return u.Update(func(s *UserAchievementUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *UserAchievementUpsertBulk) UpdateNotes() *UserAchievementUpsertBulk {
	return u.Update(func(s *UserAchievementUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *UserAchievementUpsertBulk) ClearNotes() *UserAchievementUpsertBulk {
	return u.Update(func(s *UserAchievementUpsert) {
		s.ClearNotes()
	})
}

// Exec executes the query.
func (u *UserAchievementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserAchievementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAchievementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAchievementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
