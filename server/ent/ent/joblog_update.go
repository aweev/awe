// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/job"
	"awe/ent/ent/joblog"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobLogUpdate is the builder for updating JobLog entities.
type JobLogUpdate struct {
	config
	hooks    []Hook
	mutation *JobLogMutation
}

// Where appends a list predicates to the JobLogUpdate builder.
func (_u *JobLogUpdate) Where(ps ...predicate.JobLog) *JobLogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *JobLogUpdate) SetStatus(v joblog.Status) *JobLogUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobLogUpdate) SetNillableStatus(v *joblog.Status) *JobLogUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *JobLogUpdate) SetMessage(v string) *JobLogUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *JobLogUpdate) SetNillableMessage(v *string) *JobLogUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *JobLogUpdate) SetMetadata(v map[string]interface{}) *JobLogUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *JobLogUpdate) ClearMetadata() *JobLogUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *JobLogUpdate) SetJobID(id int) *JobLogUpdate {
	_u.mutation.SetJobID(id)
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *JobLogUpdate) SetJob(v *Job) *JobLogUpdate {
	return _u.SetJobID(v.ID)
}

// Mutation returns the JobLogMutation object of the builder.
func (_u *JobLogUpdate) Mutation() *JobLogMutation {
	return _u.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *JobLogUpdate) ClearJob() *JobLogUpdate {
	_u.mutation.ClearJob()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobLogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobLogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobLogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobLogUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := joblog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "JobLog.status": %w`, err)}
		}
	}
	if _u.mutation.JobCleared() && len(_u.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobLog.job"`)
	}
	return nil
}

func (_u *JobLogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(joblog.Table, joblog.Columns, sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(joblog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(joblog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(joblog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(joblog.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joblog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobLogUpdateOne is the builder for updating a single JobLog entity.
type JobLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobLogMutation
}

// SetStatus sets the "status" field.
func (_u *JobLogUpdateOne) SetStatus(v joblog.Status) *JobLogUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobLogUpdateOne) SetNillableStatus(v *joblog.Status) *JobLogUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *JobLogUpdateOne) SetMessage(v string) *JobLogUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *JobLogUpdateOne) SetNillableMessage(v *string) *JobLogUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *JobLogUpdateOne) SetMetadata(v map[string]interface{}) *JobLogUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *JobLogUpdateOne) ClearMetadata() *JobLogUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *JobLogUpdateOne) SetJobID(id int) *JobLogUpdateOne {
	_u.mutation.SetJobID(id)
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *JobLogUpdateOne) SetJob(v *Job) *JobLogUpdateOne {
	return _u.SetJobID(v.ID)
}

// Mutation returns the JobLogMutation object of the builder.
func (_u *JobLogUpdateOne) Mutation() *JobLogMutation {
	return _u.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *JobLogUpdateOne) ClearJob() *JobLogUpdateOne {
	_u.mutation.ClearJob()
	return _u
}

// Where appends a list predicates to the JobLogUpdate builder.
func (_u *JobLogUpdateOne) Where(ps ...predicate.JobLog) *JobLogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobLogUpdateOne) Select(field string, fields ...string) *JobLogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated JobLog entity.
func (_u *JobLogUpdateOne) Save(ctx context.Context) (*JobLog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobLogUpdateOne) SaveX(ctx context.Context) *JobLog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobLogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobLogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobLogUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := joblog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "JobLog.status": %w`, err)}
		}
	}
	if _u.mutation.JobCleared() && len(_u.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobLog.job"`)
	}
	return nil
}

func (_u *JobLogUpdateOne) sqlSave(ctx context.Context) (_node *JobLog, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(joblog.Table, joblog.Columns, sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, joblog.FieldID)
		for _, f := range fields {
			if !joblog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != joblog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(joblog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(joblog.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(joblog.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(joblog.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobLog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{joblog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
