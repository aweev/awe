// Code generated by ent, DO NOT EDIT.

package page

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldLayout holds the string denoting the layout field in the database.
	FieldLayout = "layout"
	// FieldIsHomepage holds the string denoting the is_homepage field in the database.
	FieldIsHomepage = "is_homepage"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeChildPages holds the string denoting the child_pages edge name in mutations.
	EdgeChildPages = "child_pages"
	// EdgeParentPage holds the string denoting the parent_page edge name in mutations.
	EdgeParentPage = "parent_page"
	// EdgeBlocks holds the string denoting the blocks edge name in mutations.
	EdgeBlocks = "blocks"
	// EdgeSeo holds the string denoting the seo edge name in mutations.
	EdgeSeo = "seo"
	// Table holds the table name of the page in the database.
	Table = "pages"
	// ChildPagesTable is the table that holds the child_pages relation/edge.
	ChildPagesTable = "pages"
	// ChildPagesColumn is the table column denoting the child_pages relation/edge.
	ChildPagesColumn = "page_parent_page"
	// ParentPageTable is the table that holds the parent_page relation/edge.
	ParentPageTable = "pages"
	// ParentPageColumn is the table column denoting the parent_page relation/edge.
	ParentPageColumn = "page_parent_page"
	// BlocksTable is the table that holds the blocks relation/edge.
	BlocksTable = "content_blocks"
	// BlocksInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	BlocksInverseTable = "content_blocks"
	// BlocksColumn is the table column denoting the blocks relation/edge.
	BlocksColumn = "page_blocks"
	// SeoTable is the table that holds the seo relation/edge.
	SeoTable = "seo_configs"
	// SeoInverseTable is the table name for the SeoConfig entity.
	// It exists in this package in order to avoid circular dependency with the "seoconfig" package.
	SeoInverseTable = "seo_configs"
	// SeoColumn is the table column denoting the seo relation/edge.
	SeoColumn = "page_seo"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldTitle,
	FieldStatus,
	FieldPublishedAt,
	FieldLayout,
	FieldIsHomepage,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"page_parent_page",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLayout holds the default value on creation for the "layout" field.
	DefaultLayout string
	// DefaultIsHomepage holds the default value on creation for the "is_homepage" field.
	DefaultIsHomepage bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDRAFT is the default value of the Status enum.
const DefaultStatus = StatusDRAFT

// Status values.
const (
	StatusDRAFT     Status = "DRAFT"
	StatusREVIEW    Status = "REVIEW"
	StatusPUBLISHED Status = "PUBLISHED"
	StatusARCHIVED  Status = "ARCHIVED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusREVIEW, StatusPUBLISHED, StatusARCHIVED:
		return nil
	default:
		return fmt.Errorf("page: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByLayout orders the results by the layout field.
func ByLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayout, opts...).ToFunc()
}

// ByIsHomepage orders the results by the is_homepage field.
func ByIsHomepage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHomepage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByChildPagesCount orders the results by child_pages count.
func ByChildPagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildPagesStep(), opts...)
	}
}

// ByChildPages orders the results by child_pages terms.
func ByChildPages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildPagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentPageField orders the results by parent_page field.
func ByParentPageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentPageStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlocksCount orders the results by blocks count.
func ByBlocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlocksStep(), opts...)
	}
}

// ByBlocks orders the results by blocks terms.
func ByBlocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySeoField orders the results by seo field.
func BySeoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeoStep(), sql.OrderByField(field, opts...))
	}
}
func newChildPagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ChildPagesTable, ChildPagesColumn),
	)
}
func newParentPageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParentPageTable, ParentPageColumn),
	)
}
func newBlocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlocksTable, BlocksColumn),
	)
}
func newSeoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SeoTable, SeoColumn),
	)
}
