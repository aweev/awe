// Code generated by ent, DO NOT EDIT.

package page

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSlug, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPublishedAt, v))
}

// Layout applies equality check predicate on the "layout" field. It's identical to LayoutEQ.
func Layout(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldLayout, v))
}

// IsHomepage applies equality check predicate on the "is_homepage" field. It's identical to IsHomepageEQ.
func IsHomepage(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIsHomepage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldSlug, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldStatus, vs...))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldPublishedAt))
}

// LayoutEQ applies the EQ predicate on the "layout" field.
func LayoutEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldLayout, v))
}

// LayoutNEQ applies the NEQ predicate on the "layout" field.
func LayoutNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldLayout, v))
}

// LayoutIn applies the In predicate on the "layout" field.
func LayoutIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldLayout, vs...))
}

// LayoutNotIn applies the NotIn predicate on the "layout" field.
func LayoutNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldLayout, vs...))
}

// LayoutGT applies the GT predicate on the "layout" field.
func LayoutGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldLayout, v))
}

// LayoutGTE applies the GTE predicate on the "layout" field.
func LayoutGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldLayout, v))
}

// LayoutLT applies the LT predicate on the "layout" field.
func LayoutLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldLayout, v))
}

// LayoutLTE applies the LTE predicate on the "layout" field.
func LayoutLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldLayout, v))
}

// LayoutContains applies the Contains predicate on the "layout" field.
func LayoutContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldLayout, v))
}

// LayoutHasPrefix applies the HasPrefix predicate on the "layout" field.
func LayoutHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldLayout, v))
}

// LayoutHasSuffix applies the HasSuffix predicate on the "layout" field.
func LayoutHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldLayout, v))
}

// LayoutEqualFold applies the EqualFold predicate on the "layout" field.
func LayoutEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldLayout, v))
}

// LayoutContainsFold applies the ContainsFold predicate on the "layout" field.
func LayoutContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldLayout, v))
}

// IsHomepageEQ applies the EQ predicate on the "is_homepage" field.
func IsHomepageEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIsHomepage, v))
}

// IsHomepageNEQ applies the NEQ predicate on the "is_homepage" field.
func IsHomepageNEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldIsHomepage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasChildPages applies the HasEdge predicate on the "child_pages" edge.
func HasChildPages() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildPagesTable, ChildPagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildPagesWith applies the HasEdge predicate on the "child_pages" edge with a given conditions (other predicates).
func HasChildPagesWith(preds ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := newChildPagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentPage applies the HasEdge predicate on the "parent_page" edge.
func HasParentPage() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentPageTable, ParentPageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentPageWith applies the HasEdge predicate on the "parent_page" edge with a given conditions (other predicates).
func HasParentPageWith(preds ...predicate.Page) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := newParentPageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlocks applies the HasEdge predicate on the "blocks" edge.
func HasBlocks() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlocksTable, BlocksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlocksWith applies the HasEdge predicate on the "blocks" edge with a given conditions (other predicates).
func HasBlocksWith(preds ...predicate.ContentBlock) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := newBlocksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeo applies the HasEdge predicate on the "seo" edge.
func HasSeo() predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SeoTable, SeoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeoWith applies the HasEdge predicate on the "seo" edge with a given conditions (other predicates).
func HasSeoWith(preds ...predicate.SeoConfig) predicate.Page {
	return predicate.Page(func(s *sql.Selector) {
		step := newSeoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(sql.NotPredicates(p))
}
