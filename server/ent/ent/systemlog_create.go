// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/systemlog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemLogCreate is the builder for creating a SystemLog entity.
type SystemLogCreate struct {
	config
	mutation *SystemLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTimestamp sets the "timestamp" field.
func (_c *SystemLogCreate) SetTimestamp(v time.Time) *SystemLogCreate {
	_c.mutation.SetTimestamp(v)
	return _c
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_c *SystemLogCreate) SetNillableTimestamp(v *time.Time) *SystemLogCreate {
	if v != nil {
		_c.SetTimestamp(*v)
	}
	return _c
}

// SetLevel sets the "level" field.
func (_c *SystemLogCreate) SetLevel(v systemlog.Level) *SystemLogCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetMessage sets the "message" field.
func (_c *SystemLogCreate) SetMessage(v string) *SystemLogCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SystemLogCreate) SetMetadata(v map[string]interface{}) *SystemLogCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *SystemLogCreate) SetUserID(v string) *SystemLogCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *SystemLogCreate) SetNillableUserID(v *string) *SystemLogCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetContext sets the "context" field.
func (_c *SystemLogCreate) SetContext(v string) *SystemLogCreate {
	_c.mutation.SetContext(v)
	return _c
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_c *SystemLogCreate) SetNillableContext(v *string) *SystemLogCreate {
	if v != nil {
		_c.SetContext(*v)
	}
	return _c
}

// Mutation returns the SystemLogMutation object of the builder.
func (_c *SystemLogCreate) Mutation() *SystemLogMutation {
	return _c.mutation
}

// Save creates the SystemLog in the database.
func (_c *SystemLogCreate) Save(ctx context.Context) (*SystemLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SystemLogCreate) SaveX(ctx context.Context) *SystemLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SystemLogCreate) defaults() {
	if _, ok := _c.mutation.Timestamp(); !ok {
		v := systemlog.DefaultTimestamp()
		_c.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SystemLogCreate) check() error {
	if _, ok := _c.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "SystemLog.timestamp"`)}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "SystemLog.level"`)}
	}
	if v, ok := _c.mutation.Level(); ok {
		if err := systemlog.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SystemLog.level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "SystemLog.message"`)}
	}
	return nil
}

func (_c *SystemLogCreate) sqlSave(ctx context.Context) (*SystemLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SystemLogCreate) createSpec() (*SystemLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(systemlog.Table, sqlgraph.NewFieldSpec(systemlog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Timestamp(); ok {
		_spec.SetField(systemlog.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(systemlog.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(systemlog.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(systemlog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(systemlog.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Context(); ok {
		_spec.SetField(systemlog.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemLog.Create().
//		SetTimestamp(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemLogUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemLogCreate) OnConflict(opts ...sql.ConflictOption) *SystemLogUpsertOne {
	_c.conflict = opts
	return &SystemLogUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemLogCreate) OnConflictColumns(columns ...string) *SystemLogUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemLogUpsertOne{
		create: _c,
	}
}

type (
	// SystemLogUpsertOne is the builder for "upsert"-ing
	//  one SystemLog node.
	SystemLogUpsertOne struct {
		create *SystemLogCreate
	}

	// SystemLogUpsert is the "OnConflict" setter.
	SystemLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetTimestamp sets the "timestamp" field.
func (u *SystemLogUpsert) SetTimestamp(v time.Time) *SystemLogUpsert {
	u.Set(systemlog.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateTimestamp() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldTimestamp)
	return u
}

// SetLevel sets the "level" field.
func (u *SystemLogUpsert) SetLevel(v systemlog.Level) *SystemLogUpsert {
	u.Set(systemlog.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateLevel() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldLevel)
	return u
}

// SetMessage sets the "message" field.
func (u *SystemLogUpsert) SetMessage(v string) *SystemLogUpsert {
	u.Set(systemlog.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateMessage() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldMessage)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SystemLogUpsert) SetMetadata(v map[string]interface{}) *SystemLogUpsert {
	u.Set(systemlog.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateMetadata() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemLogUpsert) ClearMetadata() *SystemLogUpsert {
	u.SetNull(systemlog.FieldMetadata)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SystemLogUpsert) SetUserID(v string) *SystemLogUpsert {
	u.Set(systemlog.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateUserID() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemLogUpsert) ClearUserID() *SystemLogUpsert {
	u.SetNull(systemlog.FieldUserID)
	return u
}

// SetContext sets the "context" field.
func (u *SystemLogUpsert) SetContext(v string) *SystemLogUpsert {
	u.Set(systemlog.FieldContext, v)
	return u
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemLogUpsert) UpdateContext() *SystemLogUpsert {
	u.SetExcluded(systemlog.FieldContext)
	return u
}

// ClearContext clears the value of the "context" field.
func (u *SystemLogUpsert) ClearContext() *SystemLogUpsert {
	u.SetNull(systemlog.FieldContext)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemLogUpsertOne) UpdateNewValues() *SystemLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemLogUpsertOne) Ignore() *SystemLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemLogUpsertOne) DoNothing() *SystemLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemLogCreate.OnConflict
// documentation for more info.
func (u *SystemLogUpsertOne) Update(set func(*SystemLogUpsert)) *SystemLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *SystemLogUpsertOne) SetTimestamp(v time.Time) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateTimestamp() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateTimestamp()
	})
}

// SetLevel sets the "level" field.
func (u *SystemLogUpsertOne) SetLevel(v systemlog.Level) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateLevel() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateLevel()
	})
}

// SetMessage sets the "message" field.
func (u *SystemLogUpsertOne) SetMessage(v string) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateMessage() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateMessage()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SystemLogUpsertOne) SetMetadata(v map[string]interface{}) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateMetadata() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemLogUpsertOne) ClearMetadata() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearMetadata()
	})
}

// SetUserID sets the "user_id" field.
func (u *SystemLogUpsertOne) SetUserID(v string) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateUserID() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemLogUpsertOne) ClearUserID() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearUserID()
	})
}

// SetContext sets the "context" field.
func (u *SystemLogUpsertOne) SetContext(v string) *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemLogUpsertOne) UpdateContext() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateContext()
	})
}

// ClearContext clears the value of the "context" field.
func (u *SystemLogUpsertOne) ClearContext() *SystemLogUpsertOne {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearContext()
	})
}

// Exec executes the query.
func (u *SystemLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemLogCreateBulk is the builder for creating many SystemLog entities in bulk.
type SystemLogCreateBulk struct {
	config
	err      error
	builders []*SystemLogCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemLog entities in the database.
func (_c *SystemLogCreateBulk) Save(ctx context.Context) ([]*SystemLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SystemLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SystemLogCreateBulk) SaveX(ctx context.Context) []*SystemLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemLogUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemLogUpsertBulk {
	_c.conflict = opts
	return &SystemLogUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemLogCreateBulk) OnConflictColumns(columns ...string) *SystemLogUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemLogUpsertBulk{
		create: _c,
	}
}

// SystemLogUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemLog nodes.
type SystemLogUpsertBulk struct {
	create *SystemLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemLogUpsertBulk) UpdateNewValues() *SystemLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemLogUpsertBulk) Ignore() *SystemLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemLogUpsertBulk) DoNothing() *SystemLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemLogCreateBulk.OnConflict
// documentation for more info.
func (u *SystemLogUpsertBulk) Update(set func(*SystemLogUpsert)) *SystemLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *SystemLogUpsertBulk) SetTimestamp(v time.Time) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateTimestamp() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateTimestamp()
	})
}

// SetLevel sets the "level" field.
func (u *SystemLogUpsertBulk) SetLevel(v systemlog.Level) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateLevel() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateLevel()
	})
}

// SetMessage sets the "message" field.
func (u *SystemLogUpsertBulk) SetMessage(v string) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateMessage() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateMessage()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SystemLogUpsertBulk) SetMetadata(v map[string]interface{}) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateMetadata() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemLogUpsertBulk) ClearMetadata() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearMetadata()
	})
}

// SetUserID sets the "user_id" field.
func (u *SystemLogUpsertBulk) SetUserID(v string) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateUserID() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemLogUpsertBulk) ClearUserID() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearUserID()
	})
}

// SetContext sets the "context" field.
func (u *SystemLogUpsertBulk) SetContext(v string) *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemLogUpsertBulk) UpdateContext() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.UpdateContext()
	})
}

// ClearContext clears the value of the "context" field.
func (u *SystemLogUpsertBulk) ClearContext() *SystemLogUpsertBulk {
	return u.Update(func(s *SystemLogUpsert) {
		s.ClearContext()
	})
}

// Exec executes the query.
func (u *SystemLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
