// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/dashboardwidget"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AnalyticsDashboardUpdate is the builder for updating AnalyticsDashboard entities.
type AnalyticsDashboardUpdate struct {
	config
	hooks    []Hook
	mutation *AnalyticsDashboardMutation
}

// Where appends a list predicates to the AnalyticsDashboardUpdate builder.
func (_u *AnalyticsDashboardUpdate) Where(ps ...predicate.AnalyticsDashboard) *AnalyticsDashboardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *AnalyticsDashboardUpdate) SetName(v map[string]string) *AnalyticsDashboardUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *AnalyticsDashboardUpdate) SetDescription(v map[string]string) *AnalyticsDashboardUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AnalyticsDashboardUpdate) ClearDescription() *AnalyticsDashboardUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *AnalyticsDashboardUpdate) SetSlug(v string) *AnalyticsDashboardUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdate) SetNillableSlug(v *string) *AnalyticsDashboardUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetLayout sets the "layout" field.
func (_u *AnalyticsDashboardUpdate) SetLayout(v map[string]interface{}) *AnalyticsDashboardUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *AnalyticsDashboardUpdate) SetIsDefault(v bool) *AnalyticsDashboardUpdate {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdate) SetNillableIsDefault(v *bool) *AnalyticsDashboardUpdate {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *AnalyticsDashboardUpdate) SetIsPublic(v bool) *AnalyticsDashboardUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdate) SetNillableIsPublic(v *bool) *AnalyticsDashboardUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetSharedWith sets the "shared_with" field.
func (_u *AnalyticsDashboardUpdate) SetSharedWith(v []string) *AnalyticsDashboardUpdate {
	_u.mutation.SetSharedWith(v)
	return _u
}

// AppendSharedWith appends value to the "shared_with" field.
func (_u *AnalyticsDashboardUpdate) AppendSharedWith(v []string) *AnalyticsDashboardUpdate {
	_u.mutation.AppendSharedWith(v)
	return _u
}

// ClearSharedWith clears the value of the "shared_with" field.
func (_u *AnalyticsDashboardUpdate) ClearSharedWith() *AnalyticsDashboardUpdate {
	_u.mutation.ClearSharedWith()
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *AnalyticsDashboardUpdate) SetAllowedRoles(v []string) *AnalyticsDashboardUpdate {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *AnalyticsDashboardUpdate) AppendAllowedRoles(v []string) *AnalyticsDashboardUpdate {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AnalyticsDashboardUpdate) SetUpdatedAt(v time.Time) *AnalyticsDashboardUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *AnalyticsDashboardUpdate) SetOwnerID(id int) *AnalyticsDashboardUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *AnalyticsDashboardUpdate) SetOwner(v *User) *AnalyticsDashboardUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddWidgetIDs adds the "widgets" edge to the DashboardWidget entity by IDs.
func (_u *AnalyticsDashboardUpdate) AddWidgetIDs(ids ...int) *AnalyticsDashboardUpdate {
	_u.mutation.AddWidgetIDs(ids...)
	return _u
}

// AddWidgets adds the "widgets" edges to the DashboardWidget entity.
func (_u *AnalyticsDashboardUpdate) AddWidgets(v ...*DashboardWidget) *AnalyticsDashboardUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWidgetIDs(ids...)
}

// Mutation returns the AnalyticsDashboardMutation object of the builder.
func (_u *AnalyticsDashboardUpdate) Mutation() *AnalyticsDashboardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *AnalyticsDashboardUpdate) ClearOwner() *AnalyticsDashboardUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearWidgets clears all "widgets" edges to the DashboardWidget entity.
func (_u *AnalyticsDashboardUpdate) ClearWidgets() *AnalyticsDashboardUpdate {
	_u.mutation.ClearWidgets()
	return _u
}

// RemoveWidgetIDs removes the "widgets" edge to DashboardWidget entities by IDs.
func (_u *AnalyticsDashboardUpdate) RemoveWidgetIDs(ids ...int) *AnalyticsDashboardUpdate {
	_u.mutation.RemoveWidgetIDs(ids...)
	return _u
}

// RemoveWidgets removes "widgets" edges to DashboardWidget entities.
func (_u *AnalyticsDashboardUpdate) RemoveWidgets(v ...*DashboardWidget) *AnalyticsDashboardUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWidgetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AnalyticsDashboardUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AnalyticsDashboardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AnalyticsDashboardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AnalyticsDashboardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AnalyticsDashboardUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := analyticsdashboard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AnalyticsDashboardUpdate) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnalyticsDashboard.owner"`)
	}
	return nil
}

func (_u *AnalyticsDashboardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(analyticsdashboard.Table, analyticsdashboard.Columns, sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(analyticsdashboard.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(analyticsdashboard.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(analyticsdashboard.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(analyticsdashboard.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(analyticsdashboard.FieldLayout, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(analyticsdashboard.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(analyticsdashboard.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SharedWith(); ok {
		_spec.SetField(analyticsdashboard.FieldSharedWith, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSharedWith(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, analyticsdashboard.FieldSharedWith, value)
		})
	}
	if _u.mutation.SharedWithCleared() {
		_spec.ClearField(analyticsdashboard.FieldSharedWith, field.TypeJSON)
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(analyticsdashboard.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, analyticsdashboard.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(analyticsdashboard.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWidgetsIDs(); len(nodes) > 0 && !_u.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WidgetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{analyticsdashboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AnalyticsDashboardUpdateOne is the builder for updating a single AnalyticsDashboard entity.
type AnalyticsDashboardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnalyticsDashboardMutation
}

// SetName sets the "name" field.
func (_u *AnalyticsDashboardUpdateOne) SetName(v map[string]string) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *AnalyticsDashboardUpdateOne) SetDescription(v map[string]string) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AnalyticsDashboardUpdateOne) ClearDescription() *AnalyticsDashboardUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *AnalyticsDashboardUpdateOne) SetSlug(v string) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdateOne) SetNillableSlug(v *string) *AnalyticsDashboardUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetLayout sets the "layout" field.
func (_u *AnalyticsDashboardUpdateOne) SetLayout(v map[string]interface{}) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetIsDefault sets the "is_default" field.
func (_u *AnalyticsDashboardUpdateOne) SetIsDefault(v bool) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetIsDefault(v)
	return _u
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdateOne) SetNillableIsDefault(v *bool) *AnalyticsDashboardUpdateOne {
	if v != nil {
		_u.SetIsDefault(*v)
	}
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *AnalyticsDashboardUpdateOne) SetIsPublic(v bool) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *AnalyticsDashboardUpdateOne) SetNillableIsPublic(v *bool) *AnalyticsDashboardUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetSharedWith sets the "shared_with" field.
func (_u *AnalyticsDashboardUpdateOne) SetSharedWith(v []string) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetSharedWith(v)
	return _u
}

// AppendSharedWith appends value to the "shared_with" field.
func (_u *AnalyticsDashboardUpdateOne) AppendSharedWith(v []string) *AnalyticsDashboardUpdateOne {
	_u.mutation.AppendSharedWith(v)
	return _u
}

// ClearSharedWith clears the value of the "shared_with" field.
func (_u *AnalyticsDashboardUpdateOne) ClearSharedWith() *AnalyticsDashboardUpdateOne {
	_u.mutation.ClearSharedWith()
	return _u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_u *AnalyticsDashboardUpdateOne) SetAllowedRoles(v []string) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetAllowedRoles(v)
	return _u
}

// AppendAllowedRoles appends value to the "allowed_roles" field.
func (_u *AnalyticsDashboardUpdateOne) AppendAllowedRoles(v []string) *AnalyticsDashboardUpdateOne {
	_u.mutation.AppendAllowedRoles(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AnalyticsDashboardUpdateOne) SetUpdatedAt(v time.Time) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *AnalyticsDashboardUpdateOne) SetOwnerID(id int) *AnalyticsDashboardUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *AnalyticsDashboardUpdateOne) SetOwner(v *User) *AnalyticsDashboardUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddWidgetIDs adds the "widgets" edge to the DashboardWidget entity by IDs.
func (_u *AnalyticsDashboardUpdateOne) AddWidgetIDs(ids ...int) *AnalyticsDashboardUpdateOne {
	_u.mutation.AddWidgetIDs(ids...)
	return _u
}

// AddWidgets adds the "widgets" edges to the DashboardWidget entity.
func (_u *AnalyticsDashboardUpdateOne) AddWidgets(v ...*DashboardWidget) *AnalyticsDashboardUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWidgetIDs(ids...)
}

// Mutation returns the AnalyticsDashboardMutation object of the builder.
func (_u *AnalyticsDashboardUpdateOne) Mutation() *AnalyticsDashboardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *AnalyticsDashboardUpdateOne) ClearOwner() *AnalyticsDashboardUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearWidgets clears all "widgets" edges to the DashboardWidget entity.
func (_u *AnalyticsDashboardUpdateOne) ClearWidgets() *AnalyticsDashboardUpdateOne {
	_u.mutation.ClearWidgets()
	return _u
}

// RemoveWidgetIDs removes the "widgets" edge to DashboardWidget entities by IDs.
func (_u *AnalyticsDashboardUpdateOne) RemoveWidgetIDs(ids ...int) *AnalyticsDashboardUpdateOne {
	_u.mutation.RemoveWidgetIDs(ids...)
	return _u
}

// RemoveWidgets removes "widgets" edges to DashboardWidget entities.
func (_u *AnalyticsDashboardUpdateOne) RemoveWidgets(v ...*DashboardWidget) *AnalyticsDashboardUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWidgetIDs(ids...)
}

// Where appends a list predicates to the AnalyticsDashboardUpdate builder.
func (_u *AnalyticsDashboardUpdateOne) Where(ps ...predicate.AnalyticsDashboard) *AnalyticsDashboardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AnalyticsDashboardUpdateOne) Select(field string, fields ...string) *AnalyticsDashboardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AnalyticsDashboard entity.
func (_u *AnalyticsDashboardUpdateOne) Save(ctx context.Context) (*AnalyticsDashboard, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AnalyticsDashboardUpdateOne) SaveX(ctx context.Context) *AnalyticsDashboard {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AnalyticsDashboardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AnalyticsDashboardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AnalyticsDashboardUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := analyticsdashboard.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AnalyticsDashboardUpdateOne) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnalyticsDashboard.owner"`)
	}
	return nil
}

func (_u *AnalyticsDashboardUpdateOne) sqlSave(ctx context.Context) (_node *AnalyticsDashboard, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(analyticsdashboard.Table, analyticsdashboard.Columns, sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnalyticsDashboard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, analyticsdashboard.FieldID)
		for _, f := range fields {
			if !analyticsdashboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != analyticsdashboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(analyticsdashboard.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(analyticsdashboard.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(analyticsdashboard.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(analyticsdashboard.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(analyticsdashboard.FieldLayout, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsDefault(); ok {
		_spec.SetField(analyticsdashboard.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(analyticsdashboard.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SharedWith(); ok {
		_spec.SetField(analyticsdashboard.FieldSharedWith, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSharedWith(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, analyticsdashboard.FieldSharedWith, value)
		})
	}
	if _u.mutation.SharedWithCleared() {
		_spec.ClearField(analyticsdashboard.FieldSharedWith, field.TypeJSON)
	}
	if value, ok := _u.mutation.AllowedRoles(); ok {
		_spec.SetField(analyticsdashboard.FieldAllowedRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, analyticsdashboard.FieldAllowedRoles, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(analyticsdashboard.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWidgetsIDs(); len(nodes) > 0 && !_u.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WidgetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnalyticsDashboard{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{analyticsdashboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
