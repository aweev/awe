// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlockDonationFormUpdate is the builder for updating BlockDonationForm entities.
type BlockDonationFormUpdate struct {
	config
	hooks    []Hook
	mutation *BlockDonationFormMutation
}

// Where appends a list predicates to the BlockDonationFormUpdate builder.
func (_u *BlockDonationFormUpdate) Where(ps ...predicate.BlockDonationForm) *BlockDonationFormUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockDonationFormUpdate) SetInternalName(v string) *BlockDonationFormUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockDonationFormUpdate) SetNillableInternalName(v *string) *BlockDonationFormUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockDonationFormUpdate) SetTitle(v map[string]string) *BlockDonationFormUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockDonationFormUpdate) SetDescription(v map[string]string) *BlockDonationFormUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockDonationFormUpdate) ClearDescription() *BlockDonationFormUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (_u *BlockDonationFormUpdate) SetShowAmountButtons(v bool) *BlockDonationFormUpdate {
	_u.mutation.SetShowAmountButtons(v)
	return _u
}

// SetNillableShowAmountButtons sets the "show_amount_buttons" field if the given value is not nil.
func (_u *BlockDonationFormUpdate) SetNillableShowAmountButtons(v *bool) *BlockDonationFormUpdate {
	if v != nil {
		_u.SetShowAmountButtons(*v)
	}
	return _u
}

// SetDefaultAmounts sets the "default_amounts" field.
func (_u *BlockDonationFormUpdate) SetDefaultAmounts(v []int) *BlockDonationFormUpdate {
	_u.mutation.SetDefaultAmounts(v)
	return _u
}

// AppendDefaultAmounts appends value to the "default_amounts" field.
func (_u *BlockDonationFormUpdate) AppendDefaultAmounts(v []int) *BlockDonationFormUpdate {
	_u.mutation.AppendDefaultAmounts(v)
	return _u
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (_u *BlockDonationFormUpdate) SetAllowCustomAmount(v bool) *BlockDonationFormUpdate {
	_u.mutation.SetAllowCustomAmount(v)
	return _u
}

// SetNillableAllowCustomAmount sets the "allow_custom_amount" field if the given value is not nil.
func (_u *BlockDonationFormUpdate) SetNillableAllowCustomAmount(v *bool) *BlockDonationFormUpdate {
	if v != nil {
		_u.SetAllowCustomAmount(*v)
	}
	return _u
}

// SetShowRecurring sets the "show_recurring" field.
func (_u *BlockDonationFormUpdate) SetShowRecurring(v bool) *BlockDonationFormUpdate {
	_u.mutation.SetShowRecurring(v)
	return _u
}

// SetNillableShowRecurring sets the "show_recurring" field if the given value is not nil.
func (_u *BlockDonationFormUpdate) SetNillableShowRecurring(v *bool) *BlockDonationFormUpdate {
	if v != nil {
		_u.SetShowRecurring(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockDonationFormUpdate) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormUpdate {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockDonationFormUpdate) SetNillableColorScheme(v *blockdonationform.ColorScheme) *BlockDonationFormUpdate {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockDonationFormUpdate) SetUpdatedAt(v time.Time) *BlockDonationFormUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockDonationFormUpdate) SetContentBlockID(id int) *BlockDonationFormUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockDonationFormUpdate) SetContentBlock(v *ContentBlock) *BlockDonationFormUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockDonationFormMutation object of the builder.
func (_u *BlockDonationFormUpdate) Mutation() *BlockDonationFormMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockDonationFormUpdate) ClearContentBlock() *BlockDonationFormUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockDonationFormUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockDonationFormUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockDonationFormUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockDonationFormUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockDonationFormUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockdonationform.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockDonationFormUpdate) check() error {
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockdonationform.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockDonationForm.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockDonationForm.content_block"`)
	}
	return nil
}

func (_u *BlockDonationFormUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockdonationform.Table, blockdonationform.Columns, sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockdonationform.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockdonationform.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockdonationform.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockdonationform.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ShowAmountButtons(); ok {
		_spec.SetField(blockdonationform.FieldShowAmountButtons, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultAmounts(); ok {
		_spec.SetField(blockdonationform.FieldDefaultAmounts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDefaultAmounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockdonationform.FieldDefaultAmounts, value)
		})
	}
	if value, ok := _u.mutation.AllowCustomAmount(); ok {
		_spec.SetField(blockdonationform.FieldAllowCustomAmount, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowRecurring(); ok {
		_spec.SetField(blockdonationform.FieldShowRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockdonationform.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockdonationform.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockdonationform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockDonationFormUpdateOne is the builder for updating a single BlockDonationForm entity.
type BlockDonationFormUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockDonationFormMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockDonationFormUpdateOne) SetInternalName(v string) *BlockDonationFormUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockDonationFormUpdateOne) SetNillableInternalName(v *string) *BlockDonationFormUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockDonationFormUpdateOne) SetTitle(v map[string]string) *BlockDonationFormUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockDonationFormUpdateOne) SetDescription(v map[string]string) *BlockDonationFormUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockDonationFormUpdateOne) ClearDescription() *BlockDonationFormUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (_u *BlockDonationFormUpdateOne) SetShowAmountButtons(v bool) *BlockDonationFormUpdateOne {
	_u.mutation.SetShowAmountButtons(v)
	return _u
}

// SetNillableShowAmountButtons sets the "show_amount_buttons" field if the given value is not nil.
func (_u *BlockDonationFormUpdateOne) SetNillableShowAmountButtons(v *bool) *BlockDonationFormUpdateOne {
	if v != nil {
		_u.SetShowAmountButtons(*v)
	}
	return _u
}

// SetDefaultAmounts sets the "default_amounts" field.
func (_u *BlockDonationFormUpdateOne) SetDefaultAmounts(v []int) *BlockDonationFormUpdateOne {
	_u.mutation.SetDefaultAmounts(v)
	return _u
}

// AppendDefaultAmounts appends value to the "default_amounts" field.
func (_u *BlockDonationFormUpdateOne) AppendDefaultAmounts(v []int) *BlockDonationFormUpdateOne {
	_u.mutation.AppendDefaultAmounts(v)
	return _u
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (_u *BlockDonationFormUpdateOne) SetAllowCustomAmount(v bool) *BlockDonationFormUpdateOne {
	_u.mutation.SetAllowCustomAmount(v)
	return _u
}

// SetNillableAllowCustomAmount sets the "allow_custom_amount" field if the given value is not nil.
func (_u *BlockDonationFormUpdateOne) SetNillableAllowCustomAmount(v *bool) *BlockDonationFormUpdateOne {
	if v != nil {
		_u.SetAllowCustomAmount(*v)
	}
	return _u
}

// SetShowRecurring sets the "show_recurring" field.
func (_u *BlockDonationFormUpdateOne) SetShowRecurring(v bool) *BlockDonationFormUpdateOne {
	_u.mutation.SetShowRecurring(v)
	return _u
}

// SetNillableShowRecurring sets the "show_recurring" field if the given value is not nil.
func (_u *BlockDonationFormUpdateOne) SetNillableShowRecurring(v *bool) *BlockDonationFormUpdateOne {
	if v != nil {
		_u.SetShowRecurring(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockDonationFormUpdateOne) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormUpdateOne {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockDonationFormUpdateOne) SetNillableColorScheme(v *blockdonationform.ColorScheme) *BlockDonationFormUpdateOne {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockDonationFormUpdateOne) SetUpdatedAt(v time.Time) *BlockDonationFormUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockDonationFormUpdateOne) SetContentBlockID(id int) *BlockDonationFormUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockDonationFormUpdateOne) SetContentBlock(v *ContentBlock) *BlockDonationFormUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockDonationFormMutation object of the builder.
func (_u *BlockDonationFormUpdateOne) Mutation() *BlockDonationFormMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockDonationFormUpdateOne) ClearContentBlock() *BlockDonationFormUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockDonationFormUpdate builder.
func (_u *BlockDonationFormUpdateOne) Where(ps ...predicate.BlockDonationForm) *BlockDonationFormUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockDonationFormUpdateOne) Select(field string, fields ...string) *BlockDonationFormUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockDonationForm entity.
func (_u *BlockDonationFormUpdateOne) Save(ctx context.Context) (*BlockDonationForm, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockDonationFormUpdateOne) SaveX(ctx context.Context) *BlockDonationForm {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockDonationFormUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockDonationFormUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockDonationFormUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockdonationform.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockDonationFormUpdateOne) check() error {
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockdonationform.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockDonationForm.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockDonationForm.content_block"`)
	}
	return nil
}

func (_u *BlockDonationFormUpdateOne) sqlSave(ctx context.Context) (_node *BlockDonationForm, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockdonationform.Table, blockdonationform.Columns, sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockDonationForm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockdonationform.FieldID)
		for _, f := range fields {
			if !blockdonationform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockdonationform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockdonationform.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockdonationform.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockdonationform.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockdonationform.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ShowAmountButtons(); ok {
		_spec.SetField(blockdonationform.FieldShowAmountButtons, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultAmounts(); ok {
		_spec.SetField(blockdonationform.FieldDefaultAmounts, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDefaultAmounts(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockdonationform.FieldDefaultAmounts, value)
		})
	}
	if value, ok := _u.mutation.AllowCustomAmount(); ok {
		_spec.SetField(blockdonationform.FieldAllowCustomAmount, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowRecurring(); ok {
		_spec.SetField(blockdonationform.FieldShowRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockdonationform.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockdonationform.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockDonationForm{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockdonationform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
