// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/analyticsevent"
	"awe/ent/ent/auditlog"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/document"
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/message"
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/teammember"
	"awe/ent/ent/token"
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"awe/ent/ent/userachievement"
	"awe/ent/ent/userconsent"
	"awe/ent/ent/useronboarding"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/usersession"
	"awe/ent/ent/volunteerapplication"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                       *QueryContext
	order                     []user.OrderOption
	inters                    []Interceptor
	predicates                []predicate.User
	withProfile               *UserProfileQuery
	withSessions              *UserSessionQuery
	withTokens                *TokenQuery
	withTrustedDevices        *TrustedDeviceQuery
	withPasswordHistory       *PasswordHistoryQuery
	withTeamMember            *TeamMemberQuery
	withAuditLogs             *AuditLogQuery
	withJobs                  *JobQuery
	withDashboards            *AnalyticsDashboardQuery
	withAnalyticsEvents       *AnalyticsEventQuery
	withCreatedReports        *ReportDefinitionQuery
	withGeneratedReports      *GeneratedReportQuery
	withReportPermissions     *ReportPermissionQuery
	withScheduledReports      *ScheduledReportQuery
	withCreatedPrograms       *ProgramQuery
	withUpdatedPrograms       *ProgramQuery
	withProgramEnrolments     *ProgramEnrolmentQuery
	withParticipantIn         *ProgramParticipantQuery
	withSuccessStories        *SuccessStoryQuery
	withNewsArticles          *NewsArticleQuery
	withCreatedEvents         *EventQuery
	withEventRegistrations    *EventRegistrationQuery
	withMessagesSent          *MessageQuery
	withConversationLinks     *ConversationParticipantQuery
	withVolunteerApplications *VolunteerApplicationQuery
	withMentorshipRequests    *MentorshipRequestQuery
	withMentorshipsMentoring  *MentorshipRequestQuery
	withAchievements          *UserAchievementQuery
	withDonations             *DonationQuery
	withOrganization          *OrganizationQuery
	withManagedPartnerships   *PartnershipQuery
	withPartnershipContacts   *PartnershipQuery
	withSiteVisits            *SiteVisitQuery
	withDocumentUploads       *DocumentQuery
	withActivityLogs          *ActivityLogQuery
	withConsents              *UserConsentQuery
	withOnboarding            *UserOnboardingQuery
	withFKs                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (_q *UserQuery) Where(ps ...predicate.User) *UserQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *UserQuery) Limit(limit int) *UserQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *UserQuery) Offset(offset int) *UserQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *UserQuery) Unique(unique bool) *UserQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryProfile chains the current query on the "profile" edge.
func (_q *UserQuery) QueryProfile() *UserProfileQuery {
	query := (&UserProfileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProfileTable, user.ProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (_q *UserQuery) QuerySessions() *UserSessionQuery {
	query := (&UserSessionClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTokens chains the current query on the "tokens" edge.
func (_q *UserQuery) QueryTokens() *TokenQuery {
	query := (&TokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TokensTable, user.TokensColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrustedDevices chains the current query on the "trusted_devices" edge.
func (_q *UserQuery) QueryTrustedDevices() *TrustedDeviceQuery {
	query := (&TrustedDeviceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(trusteddevice.Table, trusteddevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TrustedDevicesTable, user.TrustedDevicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPasswordHistory chains the current query on the "password_history" edge.
func (_q *UserQuery) QueryPasswordHistory() *PasswordHistoryQuery {
	query := (&PasswordHistoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(passwordhistory.Table, passwordhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordHistoryTable, user.PasswordHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamMember chains the current query on the "team_member" edge.
func (_q *UserQuery) QueryTeamMember() *TeamMemberQuery {
	query := (&TeamMemberClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(teammember.Table, teammember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.TeamMemberTable, user.TeamMemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuditLogs chains the current query on the "audit_logs" edge.
func (_q *UserQuery) QueryAuditLogs() *AuditLogQuery {
	query := (&AuditLogClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditLogsTable, user.AuditLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobs chains the current query on the "jobs" edge.
func (_q *UserQuery) QueryJobs() *JobQuery {
	query := (&JobClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobsTable, user.JobsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDashboards chains the current query on the "dashboards" edge.
func (_q *UserQuery) QueryDashboards() *AnalyticsDashboardQuery {
	query := (&AnalyticsDashboardClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(analyticsdashboard.Table, analyticsdashboard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DashboardsTable, user.DashboardsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnalyticsEvents chains the current query on the "analytics_events" edge.
func (_q *UserQuery) QueryAnalyticsEvents() *AnalyticsEventQuery {
	query := (&AnalyticsEventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(analyticsevent.Table, analyticsevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AnalyticsEventsTable, user.AnalyticsEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedReports chains the current query on the "created_reports" edge.
func (_q *UserQuery) QueryCreatedReports() *ReportDefinitionQuery {
	query := (&ReportDefinitionClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(reportdefinition.Table, reportdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedReportsTable, user.CreatedReportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGeneratedReports chains the current query on the "generated_reports" edge.
func (_q *UserQuery) QueryGeneratedReports() *GeneratedReportQuery {
	query := (&GeneratedReportClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(generatedreport.Table, generatedreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GeneratedReportsTable, user.GeneratedReportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReportPermissions chains the current query on the "report_permissions" edge.
func (_q *UserQuery) QueryReportPermissions() *ReportPermissionQuery {
	query := (&ReportPermissionClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(reportpermission.Table, reportpermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReportPermissionsTable, user.ReportPermissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledReports chains the current query on the "scheduled_reports" edge.
func (_q *UserQuery) QueryScheduledReports() *ScheduledReportQuery {
	query := (&ScheduledReportClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(scheduledreport.Table, scheduledreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ScheduledReportsTable, user.ScheduledReportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedPrograms chains the current query on the "created_programs" edge.
func (_q *UserQuery) QueryCreatedPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedProgramsTable, user.CreatedProgramsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedPrograms chains the current query on the "updated_programs" edge.
func (_q *UserQuery) QueryUpdatedPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UpdatedProgramsTable, user.UpdatedProgramsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramEnrolments chains the current query on the "program_enrolments" edge.
func (_q *UserQuery) QueryProgramEnrolments() *ProgramEnrolmentQuery {
	query := (&ProgramEnrolmentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(programenrolment.Table, programenrolment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProgramEnrolmentsTable, user.ProgramEnrolmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParticipantIn chains the current query on the "participant_in" edge.
func (_q *UserQuery) QueryParticipantIn() *ProgramParticipantQuery {
	query := (&ProgramParticipantClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(programparticipant.Table, programparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ParticipantInTable, user.ParticipantInColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySuccessStories chains the current query on the "success_stories" edge.
func (_q *UserQuery) QuerySuccessStories() *SuccessStoryQuery {
	query := (&SuccessStoryClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(successstory.Table, successstory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SuccessStoriesTable, user.SuccessStoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNewsArticles chains the current query on the "news_articles" edge.
func (_q *UserQuery) QueryNewsArticles() *NewsArticleQuery {
	query := (&NewsArticleClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(newsarticle.Table, newsarticle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NewsArticlesTable, user.NewsArticlesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedEvents chains the current query on the "created_events" edge.
func (_q *UserQuery) QueryCreatedEvents() *EventQuery {
	query := (&EventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedEventsTable, user.CreatedEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEventRegistrations chains the current query on the "event_registrations" edge.
func (_q *UserQuery) QueryEventRegistrations() *EventRegistrationQuery {
	query := (&EventRegistrationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(eventregistration.Table, eventregistration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EventRegistrationsTable, user.EventRegistrationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessagesSent chains the current query on the "messages_sent" edge.
func (_q *UserQuery) QueryMessagesSent() *MessageQuery {
	query := (&MessageClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MessagesSentTable, user.MessagesSentColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConversationLinks chains the current query on the "conversation_links" edge.
func (_q *UserQuery) QueryConversationLinks() *ConversationParticipantQuery {
	query := (&ConversationParticipantClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(conversationparticipant.Table, conversationparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ConversationLinksTable, user.ConversationLinksColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVolunteerApplications chains the current query on the "volunteer_applications" edge.
func (_q *UserQuery) QueryVolunteerApplications() *VolunteerApplicationQuery {
	query := (&VolunteerApplicationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(volunteerapplication.Table, volunteerapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VolunteerApplicationsTable, user.VolunteerApplicationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMentorshipRequests chains the current query on the "mentorship_requests" edge.
func (_q *UserQuery) QueryMentorshipRequests() *MentorshipRequestQuery {
	query := (&MentorshipRequestClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(mentorshiprequest.Table, mentorshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MentorshipRequestsTable, user.MentorshipRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMentorshipsMentoring chains the current query on the "mentorships_mentoring" edge.
func (_q *UserQuery) QueryMentorshipsMentoring() *MentorshipRequestQuery {
	query := (&MentorshipRequestClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(mentorshiprequest.Table, mentorshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MentorshipsMentoringTable, user.MentorshipsMentoringColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAchievements chains the current query on the "achievements" edge.
func (_q *UserQuery) QueryAchievements() *UserAchievementQuery {
	query := (&UserAchievementClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userachievement.Table, userachievement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AchievementsTable, user.AchievementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDonations chains the current query on the "donations" edge.
func (_q *UserQuery) QueryDonations() *DonationQuery {
	query := (&DonationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(donation.Table, donation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DonationsTable, user.DonationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (_q *UserQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OrganizationTable, user.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryManagedPartnerships chains the current query on the "managed_partnerships" edge.
func (_q *UserQuery) QueryManagedPartnerships() *PartnershipQuery {
	query := (&PartnershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(partnership.Table, partnership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ManagedPartnershipsTable, user.ManagedPartnershipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPartnershipContacts chains the current query on the "partnership_contacts" edge.
func (_q *UserQuery) QueryPartnershipContacts() *PartnershipQuery {
	query := (&PartnershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(partnership.Table, partnership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PartnershipContactsTable, user.PartnershipContactsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySiteVisits chains the current query on the "site_visits" edge.
func (_q *UserQuery) QuerySiteVisits() *SiteVisitQuery {
	query := (&SiteVisitClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(sitevisit.Table, sitevisit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SiteVisitsTable, user.SiteVisitsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocumentUploads chains the current query on the "document_uploads" edge.
func (_q *UserQuery) QueryDocumentUploads() *DocumentQuery {
	query := (&DocumentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DocumentUploadsTable, user.DocumentUploadsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivityLogs chains the current query on the "activity_logs" edge.
func (_q *UserQuery) QueryActivityLogs() *ActivityLogQuery {
	query := (&ActivityLogClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(activitylog.Table, activitylog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivityLogsTable, user.ActivityLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsents chains the current query on the "consents" edge.
func (_q *UserQuery) QueryConsents() *UserConsentQuery {
	query := (&UserConsentClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userconsent.Table, userconsent.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ConsentsTable, user.ConsentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOnboarding chains the current query on the "onboarding" edge.
func (_q *UserQuery) QueryOnboarding() *UserOnboardingQuery {
	query := (&UserOnboardingClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(useronboarding.Table, useronboarding.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.OnboardingTable, user.OnboardingColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (_q *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *UserQuery) FirstX(ctx context.Context) *User {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (_q *UserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *UserQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (_q *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *UserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *UserQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (_q *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (_q *UserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *UserQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*UserQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *UserQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *UserQuery) Clone() *UserQuery {
	if _q == nil {
		return nil
	}
	return &UserQuery{
		config:                    _q.config,
		ctx:                       _q.ctx.Clone(),
		order:                     append([]user.OrderOption{}, _q.order...),
		inters:                    append([]Interceptor{}, _q.inters...),
		predicates:                append([]predicate.User{}, _q.predicates...),
		withProfile:               _q.withProfile.Clone(),
		withSessions:              _q.withSessions.Clone(),
		withTokens:                _q.withTokens.Clone(),
		withTrustedDevices:        _q.withTrustedDevices.Clone(),
		withPasswordHistory:       _q.withPasswordHistory.Clone(),
		withTeamMember:            _q.withTeamMember.Clone(),
		withAuditLogs:             _q.withAuditLogs.Clone(),
		withJobs:                  _q.withJobs.Clone(),
		withDashboards:            _q.withDashboards.Clone(),
		withAnalyticsEvents:       _q.withAnalyticsEvents.Clone(),
		withCreatedReports:        _q.withCreatedReports.Clone(),
		withGeneratedReports:      _q.withGeneratedReports.Clone(),
		withReportPermissions:     _q.withReportPermissions.Clone(),
		withScheduledReports:      _q.withScheduledReports.Clone(),
		withCreatedPrograms:       _q.withCreatedPrograms.Clone(),
		withUpdatedPrograms:       _q.withUpdatedPrograms.Clone(),
		withProgramEnrolments:     _q.withProgramEnrolments.Clone(),
		withParticipantIn:         _q.withParticipantIn.Clone(),
		withSuccessStories:        _q.withSuccessStories.Clone(),
		withNewsArticles:          _q.withNewsArticles.Clone(),
		withCreatedEvents:         _q.withCreatedEvents.Clone(),
		withEventRegistrations:    _q.withEventRegistrations.Clone(),
		withMessagesSent:          _q.withMessagesSent.Clone(),
		withConversationLinks:     _q.withConversationLinks.Clone(),
		withVolunteerApplications: _q.withVolunteerApplications.Clone(),
		withMentorshipRequests:    _q.withMentorshipRequests.Clone(),
		withMentorshipsMentoring:  _q.withMentorshipsMentoring.Clone(),
		withAchievements:          _q.withAchievements.Clone(),
		withDonations:             _q.withDonations.Clone(),
		withOrganization:          _q.withOrganization.Clone(),
		withManagedPartnerships:   _q.withManagedPartnerships.Clone(),
		withPartnershipContacts:   _q.withPartnershipContacts.Clone(),
		withSiteVisits:            _q.withSiteVisits.Clone(),
		withDocumentUploads:       _q.withDocumentUploads.Clone(),
		withActivityLogs:          _q.withActivityLogs.Clone(),
		withConsents:              _q.withConsents.Clone(),
		withOnboarding:            _q.withOnboarding.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithProfile(opts ...func(*UserProfileQuery)) *UserQuery {
	query := (&UserProfileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProfile = query
	return _q
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithSessions(opts ...func(*UserSessionQuery)) *UserQuery {
	query := (&UserSessionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSessions = query
	return _q
}

// WithTokens tells the query-builder to eager-load the nodes that are connected to
// the "tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithTokens(opts ...func(*TokenQuery)) *UserQuery {
	query := (&TokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTokens = query
	return _q
}

// WithTrustedDevices tells the query-builder to eager-load the nodes that are connected to
// the "trusted_devices" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithTrustedDevices(opts ...func(*TrustedDeviceQuery)) *UserQuery {
	query := (&TrustedDeviceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTrustedDevices = query
	return _q
}

// WithPasswordHistory tells the query-builder to eager-load the nodes that are connected to
// the "password_history" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithPasswordHistory(opts ...func(*PasswordHistoryQuery)) *UserQuery {
	query := (&PasswordHistoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPasswordHistory = query
	return _q
}

// WithTeamMember tells the query-builder to eager-load the nodes that are connected to
// the "team_member" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithTeamMember(opts ...func(*TeamMemberQuery)) *UserQuery {
	query := (&TeamMemberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTeamMember = query
	return _q
}

// WithAuditLogs tells the query-builder to eager-load the nodes that are connected to
// the "audit_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAuditLogs(opts ...func(*AuditLogQuery)) *UserQuery {
	query := (&AuditLogClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAuditLogs = query
	return _q
}

// WithJobs tells the query-builder to eager-load the nodes that are connected to
// the "jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithJobs(opts ...func(*JobQuery)) *UserQuery {
	query := (&JobClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withJobs = query
	return _q
}

// WithDashboards tells the query-builder to eager-load the nodes that are connected to
// the "dashboards" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithDashboards(opts ...func(*AnalyticsDashboardQuery)) *UserQuery {
	query := (&AnalyticsDashboardClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDashboards = query
	return _q
}

// WithAnalyticsEvents tells the query-builder to eager-load the nodes that are connected to
// the "analytics_events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAnalyticsEvents(opts ...func(*AnalyticsEventQuery)) *UserQuery {
	query := (&AnalyticsEventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAnalyticsEvents = query
	return _q
}

// WithCreatedReports tells the query-builder to eager-load the nodes that are connected to
// the "created_reports" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithCreatedReports(opts ...func(*ReportDefinitionQuery)) *UserQuery {
	query := (&ReportDefinitionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCreatedReports = query
	return _q
}

// WithGeneratedReports tells the query-builder to eager-load the nodes that are connected to
// the "generated_reports" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithGeneratedReports(opts ...func(*GeneratedReportQuery)) *UserQuery {
	query := (&GeneratedReportClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGeneratedReports = query
	return _q
}

// WithReportPermissions tells the query-builder to eager-load the nodes that are connected to
// the "report_permissions" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithReportPermissions(opts ...func(*ReportPermissionQuery)) *UserQuery {
	query := (&ReportPermissionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withReportPermissions = query
	return _q
}

// WithScheduledReports tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_reports" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithScheduledReports(opts ...func(*ScheduledReportQuery)) *UserQuery {
	query := (&ScheduledReportClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScheduledReports = query
	return _q
}

// WithCreatedPrograms tells the query-builder to eager-load the nodes that are connected to
// the "created_programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithCreatedPrograms(opts ...func(*ProgramQuery)) *UserQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCreatedPrograms = query
	return _q
}

// WithUpdatedPrograms tells the query-builder to eager-load the nodes that are connected to
// the "updated_programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithUpdatedPrograms(opts ...func(*ProgramQuery)) *UserQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUpdatedPrograms = query
	return _q
}

// WithProgramEnrolments tells the query-builder to eager-load the nodes that are connected to
// the "program_enrolments" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithProgramEnrolments(opts ...func(*ProgramEnrolmentQuery)) *UserQuery {
	query := (&ProgramEnrolmentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramEnrolments = query
	return _q
}

// WithParticipantIn tells the query-builder to eager-load the nodes that are connected to
// the "participant_in" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithParticipantIn(opts ...func(*ProgramParticipantQuery)) *UserQuery {
	query := (&ProgramParticipantClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withParticipantIn = query
	return _q
}

// WithSuccessStories tells the query-builder to eager-load the nodes that are connected to
// the "success_stories" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithSuccessStories(opts ...func(*SuccessStoryQuery)) *UserQuery {
	query := (&SuccessStoryClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSuccessStories = query
	return _q
}

// WithNewsArticles tells the query-builder to eager-load the nodes that are connected to
// the "news_articles" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNewsArticles(opts ...func(*NewsArticleQuery)) *UserQuery {
	query := (&NewsArticleClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNewsArticles = query
	return _q
}

// WithCreatedEvents tells the query-builder to eager-load the nodes that are connected to
// the "created_events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithCreatedEvents(opts ...func(*EventQuery)) *UserQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCreatedEvents = query
	return _q
}

// WithEventRegistrations tells the query-builder to eager-load the nodes that are connected to
// the "event_registrations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithEventRegistrations(opts ...func(*EventRegistrationQuery)) *UserQuery {
	query := (&EventRegistrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEventRegistrations = query
	return _q
}

// WithMessagesSent tells the query-builder to eager-load the nodes that are connected to
// the "messages_sent" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithMessagesSent(opts ...func(*MessageQuery)) *UserQuery {
	query := (&MessageClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMessagesSent = query
	return _q
}

// WithConversationLinks tells the query-builder to eager-load the nodes that are connected to
// the "conversation_links" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithConversationLinks(opts ...func(*ConversationParticipantQuery)) *UserQuery {
	query := (&ConversationParticipantClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withConversationLinks = query
	return _q
}

// WithVolunteerApplications tells the query-builder to eager-load the nodes that are connected to
// the "volunteer_applications" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithVolunteerApplications(opts ...func(*VolunteerApplicationQuery)) *UserQuery {
	query := (&VolunteerApplicationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withVolunteerApplications = query
	return _q
}

// WithMentorshipRequests tells the query-builder to eager-load the nodes that are connected to
// the "mentorship_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithMentorshipRequests(opts ...func(*MentorshipRequestQuery)) *UserQuery {
	query := (&MentorshipRequestClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMentorshipRequests = query
	return _q
}

// WithMentorshipsMentoring tells the query-builder to eager-load the nodes that are connected to
// the "mentorships_mentoring" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithMentorshipsMentoring(opts ...func(*MentorshipRequestQuery)) *UserQuery {
	query := (&MentorshipRequestClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMentorshipsMentoring = query
	return _q
}

// WithAchievements tells the query-builder to eager-load the nodes that are connected to
// the "achievements" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAchievements(opts ...func(*UserAchievementQuery)) *UserQuery {
	query := (&UserAchievementClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAchievements = query
	return _q
}

// WithDonations tells the query-builder to eager-load the nodes that are connected to
// the "donations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithDonations(opts ...func(*DonationQuery)) *UserQuery {
	query := (&DonationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDonations = query
	return _q
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithOrganization(opts ...func(*OrganizationQuery)) *UserQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrganization = query
	return _q
}

// WithManagedPartnerships tells the query-builder to eager-load the nodes that are connected to
// the "managed_partnerships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithManagedPartnerships(opts ...func(*PartnershipQuery)) *UserQuery {
	query := (&PartnershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withManagedPartnerships = query
	return _q
}

// WithPartnershipContacts tells the query-builder to eager-load the nodes that are connected to
// the "partnership_contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithPartnershipContacts(opts ...func(*PartnershipQuery)) *UserQuery {
	query := (&PartnershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPartnershipContacts = query
	return _q
}

// WithSiteVisits tells the query-builder to eager-load the nodes that are connected to
// the "site_visits" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithSiteVisits(opts ...func(*SiteVisitQuery)) *UserQuery {
	query := (&SiteVisitClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSiteVisits = query
	return _q
}

// WithDocumentUploads tells the query-builder to eager-load the nodes that are connected to
// the "document_uploads" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithDocumentUploads(opts ...func(*DocumentQuery)) *UserQuery {
	query := (&DocumentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDocumentUploads = query
	return _q
}

// WithActivityLogs tells the query-builder to eager-load the nodes that are connected to
// the "activity_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithActivityLogs(opts ...func(*ActivityLogQuery)) *UserQuery {
	query := (&ActivityLogClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withActivityLogs = query
	return _q
}

// WithConsents tells the query-builder to eager-load the nodes that are connected to
// the "consents" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithConsents(opts ...func(*UserConsentQuery)) *UserQuery {
	query := (&UserConsentClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withConsents = query
	return _q
}

// WithOnboarding tells the query-builder to eager-load the nodes that are connected to
// the "onboarding" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithOnboarding(opts ...func(*UserOnboardingQuery)) *UserQuery {
	query := (&UserOnboardingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOnboarding = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldEmail).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldEmail).
//		Scan(ctx, &v)
func (_q *UserQuery) Select(fields ...string) *UserSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: _q}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (_q *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [37]bool{
			_q.withProfile != nil,
			_q.withSessions != nil,
			_q.withTokens != nil,
			_q.withTrustedDevices != nil,
			_q.withPasswordHistory != nil,
			_q.withTeamMember != nil,
			_q.withAuditLogs != nil,
			_q.withJobs != nil,
			_q.withDashboards != nil,
			_q.withAnalyticsEvents != nil,
			_q.withCreatedReports != nil,
			_q.withGeneratedReports != nil,
			_q.withReportPermissions != nil,
			_q.withScheduledReports != nil,
			_q.withCreatedPrograms != nil,
			_q.withUpdatedPrograms != nil,
			_q.withProgramEnrolments != nil,
			_q.withParticipantIn != nil,
			_q.withSuccessStories != nil,
			_q.withNewsArticles != nil,
			_q.withCreatedEvents != nil,
			_q.withEventRegistrations != nil,
			_q.withMessagesSent != nil,
			_q.withConversationLinks != nil,
			_q.withVolunteerApplications != nil,
			_q.withMentorshipRequests != nil,
			_q.withMentorshipsMentoring != nil,
			_q.withAchievements != nil,
			_q.withDonations != nil,
			_q.withOrganization != nil,
			_q.withManagedPartnerships != nil,
			_q.withPartnershipContacts != nil,
			_q.withSiteVisits != nil,
			_q.withDocumentUploads != nil,
			_q.withActivityLogs != nil,
			_q.withConsents != nil,
			_q.withOnboarding != nil,
		}
	)
	if _q.withTeamMember != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, user.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withProfile; query != nil {
		if err := _q.loadProfile(ctx, query, nodes, nil,
			func(n *User, e *UserProfile) { n.Edges.Profile = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSessions; query != nil {
		if err := _q.loadSessions(ctx, query, nodes,
			func(n *User) { n.Edges.Sessions = []*UserSession{} },
			func(n *User, e *UserSession) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTokens; query != nil {
		if err := _q.loadTokens(ctx, query, nodes,
			func(n *User) { n.Edges.Tokens = []*Token{} },
			func(n *User, e *Token) { n.Edges.Tokens = append(n.Edges.Tokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTrustedDevices; query != nil {
		if err := _q.loadTrustedDevices(ctx, query, nodes,
			func(n *User) { n.Edges.TrustedDevices = []*TrustedDevice{} },
			func(n *User, e *TrustedDevice) { n.Edges.TrustedDevices = append(n.Edges.TrustedDevices, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPasswordHistory; query != nil {
		if err := _q.loadPasswordHistory(ctx, query, nodes,
			func(n *User) { n.Edges.PasswordHistory = []*PasswordHistory{} },
			func(n *User, e *PasswordHistory) { n.Edges.PasswordHistory = append(n.Edges.PasswordHistory, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTeamMember; query != nil {
		if err := _q.loadTeamMember(ctx, query, nodes, nil,
			func(n *User, e *TeamMember) { n.Edges.TeamMember = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAuditLogs; query != nil {
		if err := _q.loadAuditLogs(ctx, query, nodes,
			func(n *User) { n.Edges.AuditLogs = []*AuditLog{} },
			func(n *User, e *AuditLog) { n.Edges.AuditLogs = append(n.Edges.AuditLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withJobs; query != nil {
		if err := _q.loadJobs(ctx, query, nodes,
			func(n *User) { n.Edges.Jobs = []*Job{} },
			func(n *User, e *Job) { n.Edges.Jobs = append(n.Edges.Jobs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDashboards; query != nil {
		if err := _q.loadDashboards(ctx, query, nodes,
			func(n *User) { n.Edges.Dashboards = []*AnalyticsDashboard{} },
			func(n *User, e *AnalyticsDashboard) { n.Edges.Dashboards = append(n.Edges.Dashboards, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAnalyticsEvents; query != nil {
		if err := _q.loadAnalyticsEvents(ctx, query, nodes,
			func(n *User) { n.Edges.AnalyticsEvents = []*AnalyticsEvent{} },
			func(n *User, e *AnalyticsEvent) { n.Edges.AnalyticsEvents = append(n.Edges.AnalyticsEvents, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCreatedReports; query != nil {
		if err := _q.loadCreatedReports(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedReports = []*ReportDefinition{} },
			func(n *User, e *ReportDefinition) { n.Edges.CreatedReports = append(n.Edges.CreatedReports, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGeneratedReports; query != nil {
		if err := _q.loadGeneratedReports(ctx, query, nodes,
			func(n *User) { n.Edges.GeneratedReports = []*GeneratedReport{} },
			func(n *User, e *GeneratedReport) { n.Edges.GeneratedReports = append(n.Edges.GeneratedReports, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withReportPermissions; query != nil {
		if err := _q.loadReportPermissions(ctx, query, nodes,
			func(n *User) { n.Edges.ReportPermissions = []*ReportPermission{} },
			func(n *User, e *ReportPermission) { n.Edges.ReportPermissions = append(n.Edges.ReportPermissions, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScheduledReports; query != nil {
		if err := _q.loadScheduledReports(ctx, query, nodes,
			func(n *User) { n.Edges.ScheduledReports = []*ScheduledReport{} },
			func(n *User, e *ScheduledReport) { n.Edges.ScheduledReports = append(n.Edges.ScheduledReports, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCreatedPrograms; query != nil {
		if err := _q.loadCreatedPrograms(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedPrograms = []*Program{} },
			func(n *User, e *Program) { n.Edges.CreatedPrograms = append(n.Edges.CreatedPrograms, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withUpdatedPrograms; query != nil {
		if err := _q.loadUpdatedPrograms(ctx, query, nodes,
			func(n *User) { n.Edges.UpdatedPrograms = []*Program{} },
			func(n *User, e *Program) { n.Edges.UpdatedPrograms = append(n.Edges.UpdatedPrograms, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramEnrolments; query != nil {
		if err := _q.loadProgramEnrolments(ctx, query, nodes,
			func(n *User) { n.Edges.ProgramEnrolments = []*ProgramEnrolment{} },
			func(n *User, e *ProgramEnrolment) { n.Edges.ProgramEnrolments = append(n.Edges.ProgramEnrolments, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withParticipantIn; query != nil {
		if err := _q.loadParticipantIn(ctx, query, nodes,
			func(n *User) { n.Edges.ParticipantIn = []*ProgramParticipant{} },
			func(n *User, e *ProgramParticipant) { n.Edges.ParticipantIn = append(n.Edges.ParticipantIn, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSuccessStories; query != nil {
		if err := _q.loadSuccessStories(ctx, query, nodes,
			func(n *User) { n.Edges.SuccessStories = []*SuccessStory{} },
			func(n *User, e *SuccessStory) { n.Edges.SuccessStories = append(n.Edges.SuccessStories, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNewsArticles; query != nil {
		if err := _q.loadNewsArticles(ctx, query, nodes,
			func(n *User) { n.Edges.NewsArticles = []*NewsArticle{} },
			func(n *User, e *NewsArticle) { n.Edges.NewsArticles = append(n.Edges.NewsArticles, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCreatedEvents; query != nil {
		if err := _q.loadCreatedEvents(ctx, query, nodes,
			func(n *User) { n.Edges.CreatedEvents = []*Event{} },
			func(n *User, e *Event) { n.Edges.CreatedEvents = append(n.Edges.CreatedEvents, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEventRegistrations; query != nil {
		if err := _q.loadEventRegistrations(ctx, query, nodes,
			func(n *User) { n.Edges.EventRegistrations = []*EventRegistration{} },
			func(n *User, e *EventRegistration) {
				n.Edges.EventRegistrations = append(n.Edges.EventRegistrations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMessagesSent; query != nil {
		if err := _q.loadMessagesSent(ctx, query, nodes,
			func(n *User) { n.Edges.MessagesSent = []*Message{} },
			func(n *User, e *Message) { n.Edges.MessagesSent = append(n.Edges.MessagesSent, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withConversationLinks; query != nil {
		if err := _q.loadConversationLinks(ctx, query, nodes,
			func(n *User) { n.Edges.ConversationLinks = []*ConversationParticipant{} },
			func(n *User, e *ConversationParticipant) {
				n.Edges.ConversationLinks = append(n.Edges.ConversationLinks, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withVolunteerApplications; query != nil {
		if err := _q.loadVolunteerApplications(ctx, query, nodes,
			func(n *User) { n.Edges.VolunteerApplications = []*VolunteerApplication{} },
			func(n *User, e *VolunteerApplication) {
				n.Edges.VolunteerApplications = append(n.Edges.VolunteerApplications, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMentorshipRequests; query != nil {
		if err := _q.loadMentorshipRequests(ctx, query, nodes,
			func(n *User) { n.Edges.MentorshipRequests = []*MentorshipRequest{} },
			func(n *User, e *MentorshipRequest) {
				n.Edges.MentorshipRequests = append(n.Edges.MentorshipRequests, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMentorshipsMentoring; query != nil {
		if err := _q.loadMentorshipsMentoring(ctx, query, nodes,
			func(n *User) { n.Edges.MentorshipsMentoring = []*MentorshipRequest{} },
			func(n *User, e *MentorshipRequest) {
				n.Edges.MentorshipsMentoring = append(n.Edges.MentorshipsMentoring, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withAchievements; query != nil {
		if err := _q.loadAchievements(ctx, query, nodes,
			func(n *User) { n.Edges.Achievements = []*UserAchievement{} },
			func(n *User, e *UserAchievement) { n.Edges.Achievements = append(n.Edges.Achievements, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDonations; query != nil {
		if err := _q.loadDonations(ctx, query, nodes,
			func(n *User) { n.Edges.Donations = []*Donation{} },
			func(n *User, e *Donation) { n.Edges.Donations = append(n.Edges.Donations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrganization; query != nil {
		if err := _q.loadOrganization(ctx, query, nodes,
			func(n *User) { n.Edges.Organization = []*Organization{} },
			func(n *User, e *Organization) { n.Edges.Organization = append(n.Edges.Organization, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withManagedPartnerships; query != nil {
		if err := _q.loadManagedPartnerships(ctx, query, nodes,
			func(n *User) { n.Edges.ManagedPartnerships = []*Partnership{} },
			func(n *User, e *Partnership) { n.Edges.ManagedPartnerships = append(n.Edges.ManagedPartnerships, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPartnershipContacts; query != nil {
		if err := _q.loadPartnershipContacts(ctx, query, nodes,
			func(n *User) { n.Edges.PartnershipContacts = []*Partnership{} },
			func(n *User, e *Partnership) { n.Edges.PartnershipContacts = append(n.Edges.PartnershipContacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSiteVisits; query != nil {
		if err := _q.loadSiteVisits(ctx, query, nodes,
			func(n *User) { n.Edges.SiteVisits = []*SiteVisit{} },
			func(n *User, e *SiteVisit) { n.Edges.SiteVisits = append(n.Edges.SiteVisits, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDocumentUploads; query != nil {
		if err := _q.loadDocumentUploads(ctx, query, nodes,
			func(n *User) { n.Edges.DocumentUploads = []*Document{} },
			func(n *User, e *Document) { n.Edges.DocumentUploads = append(n.Edges.DocumentUploads, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withActivityLogs; query != nil {
		if err := _q.loadActivityLogs(ctx, query, nodes,
			func(n *User) { n.Edges.ActivityLogs = []*ActivityLog{} },
			func(n *User, e *ActivityLog) { n.Edges.ActivityLogs = append(n.Edges.ActivityLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withConsents; query != nil {
		if err := _q.loadConsents(ctx, query, nodes, nil,
			func(n *User, e *UserConsent) { n.Edges.Consents = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOnboarding; query != nil {
		if err := _q.loadOnboarding(ctx, query, nodes, nil,
			func(n *User, e *UserOnboarding) { n.Edges.Onboarding = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *UserQuery) loadProfile(ctx context.Context, query *UserProfileQuery, nodes []*User, init func(*User), assign func(*User, *UserProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProfileColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_profile
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_profile" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_profile" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadSessions(ctx context.Context, query *UserSessionQuery, nodes []*User, init func(*User), assign func(*User, *UserSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadTokens(ctx context.Context, query *TokenQuery, nodes []*User, init func(*User), assign func(*User, *Token)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Token(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_tokens
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_tokens" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_tokens" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadTrustedDevices(ctx context.Context, query *TrustedDeviceQuery, nodes []*User, init func(*User), assign func(*User, *TrustedDevice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TrustedDevice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TrustedDevicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_trusted_devices
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_trusted_devices" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_trusted_devices" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadPasswordHistory(ctx context.Context, query *PasswordHistoryQuery, nodes []*User, init func(*User), assign func(*User, *PasswordHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PasswordHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PasswordHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_password_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_password_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_password_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadTeamMember(ctx context.Context, query *TeamMemberQuery, nodes []*User, init func(*User), assign func(*User, *TeamMember)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*User)
	for i := range nodes {
		if nodes[i].user_team_member == nil {
			continue
		}
		fk := *nodes[i].user_team_member
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(teammember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_team_member" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *UserQuery) loadAuditLogs(ctx context.Context, query *AuditLogQuery, nodes []*User, init func(*User), assign func(*User, *AuditLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AuditLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AuditLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_audit_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_audit_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_audit_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadJobs(ctx context.Context, query *JobQuery, nodes []*User, init func(*User), assign func(*User, *Job)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Job(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.JobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_jobs
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_jobs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_jobs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadDashboards(ctx context.Context, query *AnalyticsDashboardQuery, nodes []*User, init func(*User), assign func(*User, *AnalyticsDashboard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AnalyticsDashboard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.DashboardsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_dashboards
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_dashboards" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_dashboards" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadAnalyticsEvents(ctx context.Context, query *AnalyticsEventQuery, nodes []*User, init func(*User), assign func(*User, *AnalyticsEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AnalyticsEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AnalyticsEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_analytics_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_analytics_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_analytics_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadCreatedReports(ctx context.Context, query *ReportDefinitionQuery, nodes []*User, init func(*User), assign func(*User, *ReportDefinition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReportDefinition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedReportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_created_reports
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_created_reports" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_created_reports" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadGeneratedReports(ctx context.Context, query *GeneratedReportQuery, nodes []*User, init func(*User), assign func(*User, *GeneratedReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GeneratedReport(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.GeneratedReportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_generated_reports
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_generated_reports" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_generated_reports" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadReportPermissions(ctx context.Context, query *ReportPermissionQuery, nodes []*User, init func(*User), assign func(*User, *ReportPermission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReportPermission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ReportPermissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_report_permissions
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_report_permissions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_report_permissions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadScheduledReports(ctx context.Context, query *ScheduledReportQuery, nodes []*User, init func(*User), assign func(*User, *ScheduledReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ScheduledReport(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ScheduledReportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_scheduled_reports
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_scheduled_reports" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_scheduled_reports" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadCreatedPrograms(ctx context.Context, query *ProgramQuery, nodes []*User, init func(*User), assign func(*User, *Program)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Program(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedProgramsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_created_programs
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_created_programs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_created_programs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadUpdatedPrograms(ctx context.Context, query *ProgramQuery, nodes []*User, init func(*User), assign func(*User, *Program)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Program(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UpdatedProgramsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_updated_programs
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_updated_programs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_updated_programs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadProgramEnrolments(ctx context.Context, query *ProgramEnrolmentQuery, nodes []*User, init func(*User), assign func(*User, *ProgramEnrolment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProgramEnrolment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProgramEnrolmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_program_enrolments
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_program_enrolments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_program_enrolments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadParticipantIn(ctx context.Context, query *ProgramParticipantQuery, nodes []*User, init func(*User), assign func(*User, *ProgramParticipant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProgramParticipant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ParticipantInColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_participant_in
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_participant_in" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_participant_in" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadSuccessStories(ctx context.Context, query *SuccessStoryQuery, nodes []*User, init func(*User), assign func(*User, *SuccessStory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SuccessStory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SuccessStoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_success_stories
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_success_stories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_success_stories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadNewsArticles(ctx context.Context, query *NewsArticleQuery, nodes []*User, init func(*User), assign func(*User, *NewsArticle)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NewsArticle(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.NewsArticlesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_news_articles
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_news_articles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_news_articles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadCreatedEvents(ctx context.Context, query *EventQuery, nodes []*User, init func(*User), assign func(*User, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CreatedEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_created_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_created_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_created_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadEventRegistrations(ctx context.Context, query *EventRegistrationQuery, nodes []*User, init func(*User), assign func(*User, *EventRegistration)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EventRegistration(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EventRegistrationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_event_registrations
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_event_registrations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_event_registrations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadMessagesSent(ctx context.Context, query *MessageQuery, nodes []*User, init func(*User), assign func(*User, *Message)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Message(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MessagesSentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_messages_sent
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_messages_sent" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_messages_sent" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadConversationLinks(ctx context.Context, query *ConversationParticipantQuery, nodes []*User, init func(*User), assign func(*User, *ConversationParticipant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ConversationParticipant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ConversationLinksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_conversation_links
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_conversation_links" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_conversation_links" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadVolunteerApplications(ctx context.Context, query *VolunteerApplicationQuery, nodes []*User, init func(*User), assign func(*User, *VolunteerApplication)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.VolunteerApplication(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.VolunteerApplicationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_volunteer_applications
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_volunteer_applications" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_volunteer_applications" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadMentorshipRequests(ctx context.Context, query *MentorshipRequestQuery, nodes []*User, init func(*User), assign func(*User, *MentorshipRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MentorshipRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MentorshipRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_mentorship_requests
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_mentorship_requests" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_mentorship_requests" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadMentorshipsMentoring(ctx context.Context, query *MentorshipRequestQuery, nodes []*User, init func(*User), assign func(*User, *MentorshipRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MentorshipRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MentorshipsMentoringColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_mentorships_mentoring
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_mentorships_mentoring" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_mentorships_mentoring" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadAchievements(ctx context.Context, query *UserAchievementQuery, nodes []*User, init func(*User), assign func(*User, *UserAchievement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserAchievement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AchievementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_achievements
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_achievements" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_achievements" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadDonations(ctx context.Context, query *DonationQuery, nodes []*User, init func(*User), assign func(*User, *Donation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Donation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.DonationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_donations
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_donations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_donations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*User, init func(*User), assign func(*User, *Organization)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Organization(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OrganizationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_organization
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_organization" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_organization" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadManagedPartnerships(ctx context.Context, query *PartnershipQuery, nodes []*User, init func(*User), assign func(*User, *Partnership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Partnership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ManagedPartnershipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_managed_partnerships
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_managed_partnerships" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_managed_partnerships" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadPartnershipContacts(ctx context.Context, query *PartnershipQuery, nodes []*User, init func(*User), assign func(*User, *Partnership)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.PartnershipContactsTable)
		s.Join(joinT).On(s.C(partnership.FieldID), joinT.C(user.PartnershipContactsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.PartnershipContactsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.PartnershipContactsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Partnership](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "partnership_contacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadSiteVisits(ctx context.Context, query *SiteVisitQuery, nodes []*User, init func(*User), assign func(*User, *SiteVisit)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SiteVisit(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SiteVisitsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_site_visits
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_site_visits" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_site_visits" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadDocumentUploads(ctx context.Context, query *DocumentQuery, nodes []*User, init func(*User), assign func(*User, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.DocumentUploadsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_document_uploads
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_document_uploads" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_document_uploads" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadActivityLogs(ctx context.Context, query *ActivityLogQuery, nodes []*User, init func(*User), assign func(*User, *ActivityLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ActivityLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ActivityLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_activity_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_activity_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_activity_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadConsents(ctx context.Context, query *UserConsentQuery, nodes []*User, init func(*User), assign func(*User, *UserConsent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.UserConsent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ConsentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_consents
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_consents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_consents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadOnboarding(ctx context.Context, query *UserOnboardingQuery, nodes []*User, init func(*User), assign func(*User, *UserOnboarding)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.UserOnboarding(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OnboardingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_onboarding
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_onboarding" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_onboarding" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, _s.UserQuery, _s, _s.inters, v)
}

func (_s *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
