// Code generated by ent, DO NOT EDIT.

package scheduledreport

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldID, id))
}

// Frequency applies equality check predicate on the "frequency" field. It's identical to FrequencyEQ.
func Frequency(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldFrequency, v))
}

// DayOfWeek applies equality check predicate on the "day_of_week" field. It's identical to DayOfWeekEQ.
func DayOfWeek(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldDayOfWeek, v))
}

// DayOfMonth applies equality check predicate on the "day_of_month" field. It's identical to DayOfMonthEQ.
func DayOfMonth(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldDayOfMonth, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldTime, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldTimezone, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldIsActive, v))
}

// LastRunAt applies equality check predicate on the "last_run_at" field. It's identical to LastRunAtEQ.
func LastRunAt(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldLastRunAt, v))
}

// NextRunAt applies equality check predicate on the "next_run_at" field. It's identical to NextRunAtEQ.
func NextRunAt(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldNextRunAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// FrequencyEQ applies the EQ predicate on the "frequency" field.
func FrequencyEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldFrequency, v))
}

// FrequencyNEQ applies the NEQ predicate on the "frequency" field.
func FrequencyNEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldFrequency, v))
}

// FrequencyIn applies the In predicate on the "frequency" field.
func FrequencyIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldFrequency, vs...))
}

// FrequencyNotIn applies the NotIn predicate on the "frequency" field.
func FrequencyNotIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldFrequency, vs...))
}

// FrequencyGT applies the GT predicate on the "frequency" field.
func FrequencyGT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldFrequency, v))
}

// FrequencyGTE applies the GTE predicate on the "frequency" field.
func FrequencyGTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldFrequency, v))
}

// FrequencyLT applies the LT predicate on the "frequency" field.
func FrequencyLT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldFrequency, v))
}

// FrequencyLTE applies the LTE predicate on the "frequency" field.
func FrequencyLTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldFrequency, v))
}

// FrequencyContains applies the Contains predicate on the "frequency" field.
func FrequencyContains(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContains(FieldFrequency, v))
}

// FrequencyHasPrefix applies the HasPrefix predicate on the "frequency" field.
func FrequencyHasPrefix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasPrefix(FieldFrequency, v))
}

// FrequencyHasSuffix applies the HasSuffix predicate on the "frequency" field.
func FrequencyHasSuffix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasSuffix(FieldFrequency, v))
}

// FrequencyEqualFold applies the EqualFold predicate on the "frequency" field.
func FrequencyEqualFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEqualFold(FieldFrequency, v))
}

// FrequencyContainsFold applies the ContainsFold predicate on the "frequency" field.
func FrequencyContainsFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContainsFold(FieldFrequency, v))
}

// DayOfWeekEQ applies the EQ predicate on the "day_of_week" field.
func DayOfWeekEQ(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldDayOfWeek, v))
}

// DayOfWeekNEQ applies the NEQ predicate on the "day_of_week" field.
func DayOfWeekNEQ(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldDayOfWeek, v))
}

// DayOfWeekIn applies the In predicate on the "day_of_week" field.
func DayOfWeekIn(vs ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldDayOfWeek, vs...))
}

// DayOfWeekNotIn applies the NotIn predicate on the "day_of_week" field.
func DayOfWeekNotIn(vs ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldDayOfWeek, vs...))
}

// DayOfWeekGT applies the GT predicate on the "day_of_week" field.
func DayOfWeekGT(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldDayOfWeek, v))
}

// DayOfWeekGTE applies the GTE predicate on the "day_of_week" field.
func DayOfWeekGTE(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldDayOfWeek, v))
}

// DayOfWeekLT applies the LT predicate on the "day_of_week" field.
func DayOfWeekLT(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldDayOfWeek, v))
}

// DayOfWeekLTE applies the LTE predicate on the "day_of_week" field.
func DayOfWeekLTE(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldDayOfWeek, v))
}

// DayOfWeekIsNil applies the IsNil predicate on the "day_of_week" field.
func DayOfWeekIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldDayOfWeek))
}

// DayOfWeekNotNil applies the NotNil predicate on the "day_of_week" field.
func DayOfWeekNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldDayOfWeek))
}

// DayOfMonthEQ applies the EQ predicate on the "day_of_month" field.
func DayOfMonthEQ(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldDayOfMonth, v))
}

// DayOfMonthNEQ applies the NEQ predicate on the "day_of_month" field.
func DayOfMonthNEQ(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldDayOfMonth, v))
}

// DayOfMonthIn applies the In predicate on the "day_of_month" field.
func DayOfMonthIn(vs ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldDayOfMonth, vs...))
}

// DayOfMonthNotIn applies the NotIn predicate on the "day_of_month" field.
func DayOfMonthNotIn(vs ...int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldDayOfMonth, vs...))
}

// DayOfMonthGT applies the GT predicate on the "day_of_month" field.
func DayOfMonthGT(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldDayOfMonth, v))
}

// DayOfMonthGTE applies the GTE predicate on the "day_of_month" field.
func DayOfMonthGTE(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldDayOfMonth, v))
}

// DayOfMonthLT applies the LT predicate on the "day_of_month" field.
func DayOfMonthLT(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldDayOfMonth, v))
}

// DayOfMonthLTE applies the LTE predicate on the "day_of_month" field.
func DayOfMonthLTE(v int) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldDayOfMonth, v))
}

// DayOfMonthIsNil applies the IsNil predicate on the "day_of_month" field.
func DayOfMonthIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldDayOfMonth))
}

// DayOfMonthNotNil applies the NotNil predicate on the "day_of_month" field.
func DayOfMonthNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldDayOfMonth))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldTime, v))
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContains(FieldTime, v))
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasPrefix(FieldTime, v))
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasSuffix(FieldTime, v))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldTime))
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEqualFold(FieldTime, v))
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContainsFold(FieldTime, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldContainsFold(FieldTimezone, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v Format) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v Format) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...Format) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...Format) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldFormat, vs...))
}

// ParametersIsNil applies the IsNil predicate on the "parameters" field.
func ParametersIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldParameters))
}

// ParametersNotNil applies the NotNil predicate on the "parameters" field.
func ParametersNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldParameters))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldIsActive, v))
}

// LastRunAtEQ applies the EQ predicate on the "last_run_at" field.
func LastRunAtEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldLastRunAt, v))
}

// LastRunAtNEQ applies the NEQ predicate on the "last_run_at" field.
func LastRunAtNEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldLastRunAt, v))
}

// LastRunAtIn applies the In predicate on the "last_run_at" field.
func LastRunAtIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldLastRunAt, vs...))
}

// LastRunAtNotIn applies the NotIn predicate on the "last_run_at" field.
func LastRunAtNotIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldLastRunAt, vs...))
}

// LastRunAtGT applies the GT predicate on the "last_run_at" field.
func LastRunAtGT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldLastRunAt, v))
}

// LastRunAtGTE applies the GTE predicate on the "last_run_at" field.
func LastRunAtGTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldLastRunAt, v))
}

// LastRunAtLT applies the LT predicate on the "last_run_at" field.
func LastRunAtLT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldLastRunAt, v))
}

// LastRunAtLTE applies the LTE predicate on the "last_run_at" field.
func LastRunAtLTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldLastRunAt, v))
}

// LastRunAtIsNil applies the IsNil predicate on the "last_run_at" field.
func LastRunAtIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldLastRunAt))
}

// LastRunAtNotNil applies the NotNil predicate on the "last_run_at" field.
func LastRunAtNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldLastRunAt))
}

// NextRunAtEQ applies the EQ predicate on the "next_run_at" field.
func NextRunAtEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldNextRunAt, v))
}

// NextRunAtNEQ applies the NEQ predicate on the "next_run_at" field.
func NextRunAtNEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldNextRunAt, v))
}

// NextRunAtIn applies the In predicate on the "next_run_at" field.
func NextRunAtIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldNextRunAt, vs...))
}

// NextRunAtNotIn applies the NotIn predicate on the "next_run_at" field.
func NextRunAtNotIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldNextRunAt, vs...))
}

// NextRunAtGT applies the GT predicate on the "next_run_at" field.
func NextRunAtGT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldNextRunAt, v))
}

// NextRunAtGTE applies the GTE predicate on the "next_run_at" field.
func NextRunAtGTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldNextRunAt, v))
}

// NextRunAtLT applies the LT predicate on the "next_run_at" field.
func NextRunAtLT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldNextRunAt, v))
}

// NextRunAtLTE applies the LTE predicate on the "next_run_at" field.
func NextRunAtLTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldNextRunAt, v))
}

// NextRunAtIsNil applies the IsNil predicate on the "next_run_at" field.
func NextRunAtIsNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIsNull(FieldNextRunAt))
}

// NextRunAtNotNil applies the NotNil predicate on the "next_run_at" field.
func NextRunAtNotNil() predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotNull(FieldNextRunAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasReportDefinition applies the HasEdge predicate on the "report_definition" edge.
func HasReportDefinition() predicate.ScheduledReport {
	return predicate.ScheduledReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportDefinitionWith applies the HasEdge predicate on the "report_definition" edge with a given conditions (other predicates).
func HasReportDefinitionWith(preds ...predicate.ReportDefinition) predicate.ScheduledReport {
	return predicate.ScheduledReport(func(s *sql.Selector) {
		step := newReportDefinitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.ScheduledReport {
	return predicate.ScheduledReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.ScheduledReport {
	return predicate.ScheduledReport(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScheduledReport) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScheduledReport) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScheduledReport) predicate.ScheduledReport {
	return predicate.ScheduledReport(sql.NotPredicates(p))
}
