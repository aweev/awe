// Code generated by ent, DO NOT EDIT.

package scheduledreport

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scheduledreport type in the database.
	Label = "scheduled_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFrequency holds the string denoting the frequency field in the database.
	FieldFrequency = "frequency"
	// FieldDayOfWeek holds the string denoting the day_of_week field in the database.
	FieldDayOfWeek = "day_of_week"
	// FieldDayOfMonth holds the string denoting the day_of_month field in the database.
	FieldDayOfMonth = "day_of_month"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldRecipients holds the string denoting the recipients field in the database.
	FieldRecipients = "recipients"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldParameters holds the string denoting the parameters field in the database.
	FieldParameters = "parameters"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastRunAt holds the string denoting the last_run_at field in the database.
	FieldLastRunAt = "last_run_at"
	// FieldNextRunAt holds the string denoting the next_run_at field in the database.
	FieldNextRunAt = "next_run_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeReportDefinition holds the string denoting the report_definition edge name in mutations.
	EdgeReportDefinition = "report_definition"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the scheduledreport in the database.
	Table = "scheduled_reports"
	// ReportDefinitionTable is the table that holds the report_definition relation/edge.
	ReportDefinitionTable = "scheduled_reports"
	// ReportDefinitionInverseTable is the table name for the ReportDefinition entity.
	// It exists in this package in order to avoid circular dependency with the "reportdefinition" package.
	ReportDefinitionInverseTable = "report_definitions"
	// ReportDefinitionColumn is the table column denoting the report_definition relation/edge.
	ReportDefinitionColumn = "report_definition_schedules"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "scheduled_reports"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_scheduled_reports"
)

// Columns holds all SQL columns for scheduledreport fields.
var Columns = []string{
	FieldID,
	FieldFrequency,
	FieldDayOfWeek,
	FieldDayOfMonth,
	FieldTime,
	FieldTimezone,
	FieldRecipients,
	FieldFormat,
	FieldParameters,
	FieldIsActive,
	FieldLastRunAt,
	FieldNextRunAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scheduled_reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_definition_schedules",
	"user_scheduled_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimezone holds the default value on creation for the "timezone" field.
	DefaultTimezone string
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Format defines the type for the "format" enum field.
type Format string

// Format values.
const (
	FormatPDF  Format = "PDF"
	FormatCSV  Format = "CSV"
	FormatXLSX Format = "XLSX"
	FormatJSON Format = "JSON"
)

func (f Format) String() string {
	return string(f)
}

// FormatValidator is a validator for the "format" field enum values. It is called by the builders before save.
func FormatValidator(f Format) error {
	switch f {
	case FormatPDF, FormatCSV, FormatXLSX, FormatJSON:
		return nil
	default:
		return fmt.Errorf("scheduledreport: invalid enum value for format field: %q", f)
	}
}

// OrderOption defines the ordering options for the ScheduledReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFrequency orders the results by the frequency field.
func ByFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrequency, opts...).ToFunc()
}

// ByDayOfWeek orders the results by the day_of_week field.
func ByDayOfWeek(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDayOfWeek, opts...).ToFunc()
}

// ByDayOfMonth orders the results by the day_of_month field.
func ByDayOfMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDayOfMonth, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastRunAt orders the results by the last_run_at field.
func ByLastRunAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunAt, opts...).ToFunc()
}

// ByNextRunAt orders the results by the next_run_at field.
func ByNextRunAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextRunAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByReportDefinitionField orders the results by report_definition field.
func ByReportDefinitionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportDefinitionStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatorField orders the results by creator field.
func ByCreatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), sql.OrderByField(field, opts...))
	}
}
func newReportDefinitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportDefinitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
	)
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
	)
}
