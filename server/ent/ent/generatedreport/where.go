// Code generated by ent, DO NOT EDIT.

package generatedreport

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldStatus, v))
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldFileURL, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldFileSize, v))
}

// RecipientEmail applies equality check predicate on the "recipient_email" field. It's identical to RecipientEmailEQ.
func RecipientEmail(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldRecipientEmail, v))
}

// GeneratedAt applies equality check predicate on the "generated_at" field. It's identical to GeneratedAtEQ.
func GeneratedAt(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldGeneratedAt, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldError, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContainsFold(FieldStatus, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v Format) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v Format) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...Format) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...Format) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldFormat, vs...))
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldFileURL, v))
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldFileURL, v))
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldFileURL, vs...))
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldFileURL, vs...))
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldFileURL, v))
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldFileURL, v))
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldFileURL, v))
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldFileURL, v))
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContains(FieldFileURL, v))
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasPrefix(FieldFileURL, v))
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasSuffix(FieldFileURL, v))
}

// FileURLIsNil applies the IsNil predicate on the "file_url" field.
func FileURLIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldFileURL))
}

// FileURLNotNil applies the NotNil predicate on the "file_url" field.
func FileURLNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldFileURL))
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEqualFold(FieldFileURL, v))
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContainsFold(FieldFileURL, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldFileSize, v))
}

// FileSizeIsNil applies the IsNil predicate on the "file_size" field.
func FileSizeIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldFileSize))
}

// FileSizeNotNil applies the NotNil predicate on the "file_size" field.
func FileSizeNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldFileSize))
}

// ParametersIsNil applies the IsNil predicate on the "parameters" field.
func ParametersIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldParameters))
}

// ParametersNotNil applies the NotNil predicate on the "parameters" field.
func ParametersNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldParameters))
}

// DeliveryMethodEQ applies the EQ predicate on the "delivery_method" field.
func DeliveryMethodEQ(v DeliveryMethod) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldDeliveryMethod, v))
}

// DeliveryMethodNEQ applies the NEQ predicate on the "delivery_method" field.
func DeliveryMethodNEQ(v DeliveryMethod) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldDeliveryMethod, v))
}

// DeliveryMethodIn applies the In predicate on the "delivery_method" field.
func DeliveryMethodIn(vs ...DeliveryMethod) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldDeliveryMethod, vs...))
}

// DeliveryMethodNotIn applies the NotIn predicate on the "delivery_method" field.
func DeliveryMethodNotIn(vs ...DeliveryMethod) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldDeliveryMethod, vs...))
}

// RecipientEmailEQ applies the EQ predicate on the "recipient_email" field.
func RecipientEmailEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldRecipientEmail, v))
}

// RecipientEmailNEQ applies the NEQ predicate on the "recipient_email" field.
func RecipientEmailNEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldRecipientEmail, v))
}

// RecipientEmailIn applies the In predicate on the "recipient_email" field.
func RecipientEmailIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldRecipientEmail, vs...))
}

// RecipientEmailNotIn applies the NotIn predicate on the "recipient_email" field.
func RecipientEmailNotIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldRecipientEmail, vs...))
}

// RecipientEmailGT applies the GT predicate on the "recipient_email" field.
func RecipientEmailGT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldRecipientEmail, v))
}

// RecipientEmailGTE applies the GTE predicate on the "recipient_email" field.
func RecipientEmailGTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldRecipientEmail, v))
}

// RecipientEmailLT applies the LT predicate on the "recipient_email" field.
func RecipientEmailLT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldRecipientEmail, v))
}

// RecipientEmailLTE applies the LTE predicate on the "recipient_email" field.
func RecipientEmailLTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldRecipientEmail, v))
}

// RecipientEmailContains applies the Contains predicate on the "recipient_email" field.
func RecipientEmailContains(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContains(FieldRecipientEmail, v))
}

// RecipientEmailHasPrefix applies the HasPrefix predicate on the "recipient_email" field.
func RecipientEmailHasPrefix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasPrefix(FieldRecipientEmail, v))
}

// RecipientEmailHasSuffix applies the HasSuffix predicate on the "recipient_email" field.
func RecipientEmailHasSuffix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasSuffix(FieldRecipientEmail, v))
}

// RecipientEmailIsNil applies the IsNil predicate on the "recipient_email" field.
func RecipientEmailIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldRecipientEmail))
}

// RecipientEmailNotNil applies the NotNil predicate on the "recipient_email" field.
func RecipientEmailNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldRecipientEmail))
}

// RecipientEmailEqualFold applies the EqualFold predicate on the "recipient_email" field.
func RecipientEmailEqualFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEqualFold(FieldRecipientEmail, v))
}

// RecipientEmailContainsFold applies the ContainsFold predicate on the "recipient_email" field.
func RecipientEmailContainsFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContainsFold(FieldRecipientEmail, v))
}

// GeneratedAtEQ applies the EQ predicate on the "generated_at" field.
func GeneratedAtEQ(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldGeneratedAt, v))
}

// GeneratedAtNEQ applies the NEQ predicate on the "generated_at" field.
func GeneratedAtNEQ(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldGeneratedAt, v))
}

// GeneratedAtIn applies the In predicate on the "generated_at" field.
func GeneratedAtIn(vs ...time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldGeneratedAt, vs...))
}

// GeneratedAtNotIn applies the NotIn predicate on the "generated_at" field.
func GeneratedAtNotIn(vs ...time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldGeneratedAt, vs...))
}

// GeneratedAtGT applies the GT predicate on the "generated_at" field.
func GeneratedAtGT(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldGeneratedAt, v))
}

// GeneratedAtGTE applies the GTE predicate on the "generated_at" field.
func GeneratedAtGTE(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldGeneratedAt, v))
}

// GeneratedAtLT applies the LT predicate on the "generated_at" field.
func GeneratedAtLT(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldGeneratedAt, v))
}

// GeneratedAtLTE applies the LTE predicate on the "generated_at" field.
func GeneratedAtLTE(v time.Time) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldGeneratedAt, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldContainsFold(FieldError, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.FieldNotNull(FieldMetadata))
}

// HasReportDefinition applies the HasEdge predicate on the "report_definition" edge.
func HasReportDefinition() predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportDefinitionWith applies the HasEdge predicate on the "report_definition" edge with a given conditions (other predicates).
func HasReportDefinitionWith(preds ...predicate.ReportDefinition) predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := newReportDefinitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerator applies the HasEdge predicate on the "generator" edge.
func HasGenerator() predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GeneratorTable, GeneratorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeneratorWith applies the HasEdge predicate on the "generator" edge with a given conditions (other predicates).
func HasGeneratorWith(preds ...predicate.User) predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := newGeneratorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.GeneratedReport {
	return predicate.GeneratedReport(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GeneratedReport) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GeneratedReport) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GeneratedReport) predicate.GeneratedReport {
	return predicate.GeneratedReport(sql.NotPredicates(p))
}
