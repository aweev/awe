// Code generated by ent, DO NOT EDIT.

package generatedreport

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the generatedreport type in the database.
	Label = "generated_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldParameters holds the string denoting the parameters field in the database.
	FieldParameters = "parameters"
	// FieldDeliveryMethod holds the string denoting the delivery_method field in the database.
	FieldDeliveryMethod = "delivery_method"
	// FieldRecipientEmail holds the string denoting the recipient_email field in the database.
	FieldRecipientEmail = "recipient_email"
	// FieldGeneratedAt holds the string denoting the generated_at field in the database.
	FieldGeneratedAt = "generated_at"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeReportDefinition holds the string denoting the report_definition edge name in mutations.
	EdgeReportDefinition = "report_definition"
	// EdgeGenerator holds the string denoting the generator edge name in mutations.
	EdgeGenerator = "generator"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// Table holds the table name of the generatedreport in the database.
	Table = "generated_reports"
	// ReportDefinitionTable is the table that holds the report_definition relation/edge.
	ReportDefinitionTable = "generated_reports"
	// ReportDefinitionInverseTable is the table name for the ReportDefinition entity.
	// It exists in this package in order to avoid circular dependency with the "reportdefinition" package.
	ReportDefinitionInverseTable = "report_definitions"
	// ReportDefinitionColumn is the table column denoting the report_definition relation/edge.
	ReportDefinitionColumn = "report_definition_generated_reports"
	// GeneratorTable is the table that holds the generator relation/edge.
	GeneratorTable = "generated_reports"
	// GeneratorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	GeneratorInverseTable = "users"
	// GeneratorColumn is the table column denoting the generator relation/edge.
	GeneratorColumn = "user_generated_reports"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "generated_reports"
	// JobInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInverseTable = "jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_reports"
)

// Columns holds all SQL columns for generatedreport fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldFormat,
	FieldFileURL,
	FieldFileSize,
	FieldParameters,
	FieldDeliveryMethod,
	FieldRecipientEmail,
	FieldGeneratedAt,
	FieldError,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "generated_reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_reports",
	"report_definition_generated_reports",
	"user_generated_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGeneratedAt holds the default value on creation for the "generated_at" field.
	DefaultGeneratedAt func() time.Time
)

// Format defines the type for the "format" enum field.
type Format string

// Format values.
const (
	FormatPDF  Format = "PDF"
	FormatCSV  Format = "CSV"
	FormatXLSX Format = "XLSX"
	FormatJSON Format = "JSON"
)

func (f Format) String() string {
	return string(f)
}

// FormatValidator is a validator for the "format" field enum values. It is called by the builders before save.
func FormatValidator(f Format) error {
	switch f {
	case FormatPDF, FormatCSV, FormatXLSX, FormatJSON:
		return nil
	default:
		return fmt.Errorf("generatedreport: invalid enum value for format field: %q", f)
	}
}

// DeliveryMethod defines the type for the "delivery_method" enum field.
type DeliveryMethod string

// DeliveryMethod values.
const (
	DeliveryMethodEMAIL    DeliveryMethod = "EMAIL"
	DeliveryMethodIN_APP   DeliveryMethod = "IN_APP"
	DeliveryMethodDOWNLOAD DeliveryMethod = "DOWNLOAD"
	DeliveryMethodWEBHOOK  DeliveryMethod = "WEBHOOK"
)

func (dm DeliveryMethod) String() string {
	return string(dm)
}

// DeliveryMethodValidator is a validator for the "delivery_method" field enum values. It is called by the builders before save.
func DeliveryMethodValidator(dm DeliveryMethod) error {
	switch dm {
	case DeliveryMethodEMAIL, DeliveryMethodIN_APP, DeliveryMethodDOWNLOAD, DeliveryMethodWEBHOOK:
		return nil
	default:
		return fmt.Errorf("generatedreport: invalid enum value for delivery_method field: %q", dm)
	}
}

// OrderOption defines the ordering options for the GeneratedReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByDeliveryMethod orders the results by the delivery_method field.
func ByDeliveryMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryMethod, opts...).ToFunc()
}

// ByRecipientEmail orders the results by the recipient_email field.
func ByRecipientEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipientEmail, opts...).ToFunc()
}

// ByGeneratedAt orders the results by the generated_at field.
func ByGeneratedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedAt, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByReportDefinitionField orders the results by report_definition field.
func ByReportDefinitionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportDefinitionStep(), sql.OrderByField(field, opts...))
	}
}

// ByGeneratorField orders the results by generator field.
func ByGeneratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneratorStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}
func newReportDefinitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportDefinitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
	)
}
func newGeneratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneratorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GeneratorTable, GeneratorColumn),
	)
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
	)
}
