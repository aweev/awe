// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockVideoEmbedCreate is the builder for creating a BlockVideoEmbed entity.
type BlockVideoEmbedCreate struct {
	config
	mutation *BlockVideoEmbedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockVideoEmbedCreate) SetInternalName(v string) *BlockVideoEmbedCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockVideoEmbedCreate) SetBadge(v map[string]string) *BlockVideoEmbedCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockVideoEmbedCreate) SetTitle(v map[string]string) *BlockVideoEmbedCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockVideoEmbedCreate) SetDescription(v map[string]string) *BlockVideoEmbedCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetVideoURL sets the "video_url" field.
func (_c *BlockVideoEmbedCreate) SetVideoURL(v string) *BlockVideoEmbedCreate {
	_c.mutation.SetVideoURL(v)
	return _c
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_c *BlockVideoEmbedCreate) SetThumbnailURL(v string) *BlockVideoEmbedCreate {
	_c.mutation.SetThumbnailURL(v)
	return _c
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableThumbnailURL(v *string) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetThumbnailURL(*v)
	}
	return _c
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_c *BlockVideoEmbedCreate) SetAspectRatio(v string) *BlockVideoEmbedCreate {
	_c.mutation.SetAspectRatio(v)
	return _c
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableAspectRatio(v *string) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetAspectRatio(*v)
	}
	return _c
}

// SetAutoplay sets the "autoplay" field.
func (_c *BlockVideoEmbedCreate) SetAutoplay(v bool) *BlockVideoEmbedCreate {
	_c.mutation.SetAutoplay(v)
	return _c
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableAutoplay(v *bool) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetAutoplay(*v)
	}
	return _c
}

// SetShowControls sets the "show_controls" field.
func (_c *BlockVideoEmbedCreate) SetShowControls(v bool) *BlockVideoEmbedCreate {
	_c.mutation.SetShowControls(v)
	return _c
}

// SetNillableShowControls sets the "show_controls" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableShowControls(v *bool) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetShowControls(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockVideoEmbedCreate) SetCreatedAt(v time.Time) *BlockVideoEmbedCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableCreatedAt(v *time.Time) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockVideoEmbedCreate) SetUpdatedAt(v time.Time) *BlockVideoEmbedCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockVideoEmbedCreate) SetNillableUpdatedAt(v *time.Time) *BlockVideoEmbedCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockVideoEmbedCreate) SetContentBlockID(id int) *BlockVideoEmbedCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockVideoEmbedCreate) SetContentBlock(v *ContentBlock) *BlockVideoEmbedCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockVideoEmbedMutation object of the builder.
func (_c *BlockVideoEmbedCreate) Mutation() *BlockVideoEmbedMutation {
	return _c.mutation
}

// Save creates the BlockVideoEmbed in the database.
func (_c *BlockVideoEmbedCreate) Save(ctx context.Context) (*BlockVideoEmbed, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockVideoEmbedCreate) SaveX(ctx context.Context) *BlockVideoEmbed {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockVideoEmbedCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockVideoEmbedCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockVideoEmbedCreate) defaults() {
	if _, ok := _c.mutation.AspectRatio(); !ok {
		v := blockvideoembed.DefaultAspectRatio
		_c.mutation.SetAspectRatio(v)
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		v := blockvideoembed.DefaultAutoplay
		_c.mutation.SetAutoplay(v)
	}
	if _, ok := _c.mutation.ShowControls(); !ok {
		v := blockvideoembed.DefaultShowControls
		_c.mutation.SetShowControls(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockvideoembed.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockvideoembed.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockVideoEmbedCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockVideoEmbed.internal_name"`)}
	}
	if _, ok := _c.mutation.VideoURL(); !ok {
		return &ValidationError{Name: "video_url", err: errors.New(`ent: missing required field "BlockVideoEmbed.video_url"`)}
	}
	if _, ok := _c.mutation.AspectRatio(); !ok {
		return &ValidationError{Name: "aspect_ratio", err: errors.New(`ent: missing required field "BlockVideoEmbed.aspect_ratio"`)}
	}
	if _, ok := _c.mutation.Autoplay(); !ok {
		return &ValidationError{Name: "autoplay", err: errors.New(`ent: missing required field "BlockVideoEmbed.autoplay"`)}
	}
	if _, ok := _c.mutation.ShowControls(); !ok {
		return &ValidationError{Name: "show_controls", err: errors.New(`ent: missing required field "BlockVideoEmbed.show_controls"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockVideoEmbed.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockVideoEmbed.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockVideoEmbed.content_block"`)}
	}
	return nil
}

func (_c *BlockVideoEmbedCreate) sqlSave(ctx context.Context) (*BlockVideoEmbed, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockVideoEmbedCreate) createSpec() (*BlockVideoEmbed, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockVideoEmbed{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockvideoembed.Table, sqlgraph.NewFieldSpec(blockvideoembed.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockvideoembed.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blockvideoembed.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockvideoembed.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockvideoembed.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.VideoURL(); ok {
		_spec.SetField(blockvideoembed.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := _c.mutation.ThumbnailURL(); ok {
		_spec.SetField(blockvideoembed.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := _c.mutation.AspectRatio(); ok {
		_spec.SetField(blockvideoembed.FieldAspectRatio, field.TypeString, value)
		_node.AspectRatio = value
	}
	if value, ok := _c.mutation.Autoplay(); ok {
		_spec.SetField(blockvideoembed.FieldAutoplay, field.TypeBool, value)
		_node.Autoplay = value
	}
	if value, ok := _c.mutation.ShowControls(); ok {
		_spec.SetField(blockvideoembed.FieldShowControls, field.TypeBool, value)
		_node.ShowControls = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockvideoembed.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockvideoembed.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_video_embed = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockVideoEmbed.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockVideoEmbedUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockVideoEmbedCreate) OnConflict(opts ...sql.ConflictOption) *BlockVideoEmbedUpsertOne {
	_c.conflict = opts
	return &BlockVideoEmbedUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockVideoEmbedCreate) OnConflictColumns(columns ...string) *BlockVideoEmbedUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockVideoEmbedUpsertOne{
		create: _c,
	}
}

type (
	// BlockVideoEmbedUpsertOne is the builder for "upsert"-ing
	//  one BlockVideoEmbed node.
	BlockVideoEmbedUpsertOne struct {
		create *BlockVideoEmbedCreate
	}

	// BlockVideoEmbedUpsert is the "OnConflict" setter.
	BlockVideoEmbedUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockVideoEmbedUpsert) SetInternalName(v string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateInternalName() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockVideoEmbedUpsert) SetBadge(v map[string]string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateBadge() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockVideoEmbedUpsert) ClearBadge() *BlockVideoEmbedUpsert {
	u.SetNull(blockvideoembed.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockVideoEmbedUpsert) SetTitle(v map[string]string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateTitle() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *BlockVideoEmbedUpsert) ClearTitle() *BlockVideoEmbedUpsert {
	u.SetNull(blockvideoembed.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockVideoEmbedUpsert) SetDescription(v map[string]string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateDescription() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVideoEmbedUpsert) ClearDescription() *BlockVideoEmbedUpsert {
	u.SetNull(blockvideoembed.FieldDescription)
	return u
}

// SetVideoURL sets the "video_url" field.
func (u *BlockVideoEmbedUpsert) SetVideoURL(v string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldVideoURL, v)
	return u
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateVideoURL() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldVideoURL)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsert) SetThumbnailURL(v string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateThumbnailURL() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldThumbnailURL)
	return u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsert) ClearThumbnailURL() *BlockVideoEmbedUpsert {
	u.SetNull(blockvideoembed.FieldThumbnailURL)
	return u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockVideoEmbedUpsert) SetAspectRatio(v string) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldAspectRatio, v)
	return u
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateAspectRatio() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldAspectRatio)
	return u
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockVideoEmbedUpsert) SetAutoplay(v bool) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldAutoplay, v)
	return u
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateAutoplay() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldAutoplay)
	return u
}

// SetShowControls sets the "show_controls" field.
func (u *BlockVideoEmbedUpsert) SetShowControls(v bool) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldShowControls, v)
	return u
}

// UpdateShowControls sets the "show_controls" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateShowControls() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldShowControls)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVideoEmbedUpsert) SetUpdatedAt(v time.Time) *BlockVideoEmbedUpsert {
	u.Set(blockvideoembed.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsert) UpdateUpdatedAt() *BlockVideoEmbedUpsert {
	u.SetExcluded(blockvideoembed.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockVideoEmbedUpsertOne) UpdateNewValues() *BlockVideoEmbedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockvideoembed.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockVideoEmbedUpsertOne) Ignore() *BlockVideoEmbedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockVideoEmbedUpsertOne) DoNothing() *BlockVideoEmbedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockVideoEmbedCreate.OnConflict
// documentation for more info.
func (u *BlockVideoEmbedUpsertOne) Update(set func(*BlockVideoEmbedUpsert)) *BlockVideoEmbedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockVideoEmbedUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockVideoEmbedUpsertOne) SetInternalName(v string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateInternalName() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockVideoEmbedUpsertOne) SetBadge(v map[string]string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateBadge() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockVideoEmbedUpsertOne) ClearBadge() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockVideoEmbedUpsertOne) SetTitle(v map[string]string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateTitle() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockVideoEmbedUpsertOne) ClearTitle() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockVideoEmbedUpsertOne) SetDescription(v map[string]string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateDescription() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVideoEmbedUpsertOne) ClearDescription() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearDescription()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *BlockVideoEmbedUpsertOne) SetVideoURL(v string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateVideoURL() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateVideoURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsertOne) SetThumbnailURL(v string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateThumbnailURL() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsertOne) ClearThumbnailURL() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockVideoEmbedUpsertOne) SetAspectRatio(v string) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetAspectRatio(v)
	})
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateAspectRatio() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateAspectRatio()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockVideoEmbedUpsertOne) SetAutoplay(v bool) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateAutoplay() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateAutoplay()
	})
}

// SetShowControls sets the "show_controls" field.
func (u *BlockVideoEmbedUpsertOne) SetShowControls(v bool) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetShowControls(v)
	})
}

// UpdateShowControls sets the "show_controls" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateShowControls() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateShowControls()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVideoEmbedUpsertOne) SetUpdatedAt(v time.Time) *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertOne) UpdateUpdatedAt() *BlockVideoEmbedUpsertOne {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockVideoEmbedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockVideoEmbedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockVideoEmbedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockVideoEmbedUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockVideoEmbedUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockVideoEmbedCreateBulk is the builder for creating many BlockVideoEmbed entities in bulk.
type BlockVideoEmbedCreateBulk struct {
	config
	err      error
	builders []*BlockVideoEmbedCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockVideoEmbed entities in the database.
func (_c *BlockVideoEmbedCreateBulk) Save(ctx context.Context) ([]*BlockVideoEmbed, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockVideoEmbed, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockVideoEmbedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockVideoEmbedCreateBulk) SaveX(ctx context.Context) []*BlockVideoEmbed {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockVideoEmbedCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockVideoEmbedCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockVideoEmbed.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockVideoEmbedUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockVideoEmbedCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockVideoEmbedUpsertBulk {
	_c.conflict = opts
	return &BlockVideoEmbedUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockVideoEmbedCreateBulk) OnConflictColumns(columns ...string) *BlockVideoEmbedUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockVideoEmbedUpsertBulk{
		create: _c,
	}
}

// BlockVideoEmbedUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockVideoEmbed nodes.
type BlockVideoEmbedUpsertBulk struct {
	create *BlockVideoEmbedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockVideoEmbedUpsertBulk) UpdateNewValues() *BlockVideoEmbedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockvideoembed.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockVideoEmbed.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockVideoEmbedUpsertBulk) Ignore() *BlockVideoEmbedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockVideoEmbedUpsertBulk) DoNothing() *BlockVideoEmbedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockVideoEmbedCreateBulk.OnConflict
// documentation for more info.
func (u *BlockVideoEmbedUpsertBulk) Update(set func(*BlockVideoEmbedUpsert)) *BlockVideoEmbedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockVideoEmbedUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockVideoEmbedUpsertBulk) SetInternalName(v string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateInternalName() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockVideoEmbedUpsertBulk) SetBadge(v map[string]string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateBadge() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockVideoEmbedUpsertBulk) ClearBadge() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockVideoEmbedUpsertBulk) SetTitle(v map[string]string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateTitle() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *BlockVideoEmbedUpsertBulk) ClearTitle() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockVideoEmbedUpsertBulk) SetDescription(v map[string]string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateDescription() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockVideoEmbedUpsertBulk) ClearDescription() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearDescription()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *BlockVideoEmbedUpsertBulk) SetVideoURL(v string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateVideoURL() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateVideoURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsertBulk) SetThumbnailURL(v string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateThumbnailURL() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *BlockVideoEmbedUpsertBulk) ClearThumbnailURL() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetAspectRatio sets the "aspect_ratio" field.
func (u *BlockVideoEmbedUpsertBulk) SetAspectRatio(v string) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetAspectRatio(v)
	})
}

// UpdateAspectRatio sets the "aspect_ratio" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateAspectRatio() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateAspectRatio()
	})
}

// SetAutoplay sets the "autoplay" field.
func (u *BlockVideoEmbedUpsertBulk) SetAutoplay(v bool) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetAutoplay(v)
	})
}

// UpdateAutoplay sets the "autoplay" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateAutoplay() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateAutoplay()
	})
}

// SetShowControls sets the "show_controls" field.
func (u *BlockVideoEmbedUpsertBulk) SetShowControls(v bool) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetShowControls(v)
	})
}

// UpdateShowControls sets the "show_controls" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateShowControls() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateShowControls()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockVideoEmbedUpsertBulk) SetUpdatedAt(v time.Time) *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockVideoEmbedUpsertBulk) UpdateUpdatedAt() *BlockVideoEmbedUpsertBulk {
	return u.Update(func(s *BlockVideoEmbedUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockVideoEmbedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockVideoEmbedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockVideoEmbedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockVideoEmbedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
