// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/grant"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/program"
	"awe/ent/ent/programcarditem"
	"awe/ent/ent/programcategory"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/user"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramCreate is the builder for creating a Program entity.
type ProgramCreate struct {
	config
	mutation *ProgramMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *ProgramCreate) SetSlug(v string) *ProgramCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetName sets the "name" field.
func (_c *ProgramCreate) SetName(v map[string]string) *ProgramCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ProgramCreate) SetDescription(v map[string]interface{}) *ProgramCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetTagline sets the "tagline" field.
func (_c *ProgramCreate) SetTagline(v map[string]string) *ProgramCreate {
	_c.mutation.SetTagline(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *ProgramCreate) SetStatus(v program.Status) *ProgramCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableStatus(v *program.Status) *ProgramCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *ProgramCreate) SetStartDate(v time.Time) *ProgramCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableStartDate(v *time.Time) *ProgramCreate {
	if v != nil {
		_c.SetStartDate(*v)
	}
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *ProgramCreate) SetEndDate(v time.Time) *ProgramCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableEndDate(v *time.Time) *ProgramCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_c *ProgramCreate) SetHeroImageURL(v string) *ProgramCreate {
	_c.mutation.SetHeroImageURL(v)
	return _c
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableHeroImageURL(v *string) *ProgramCreate {
	if v != nil {
		_c.SetHeroImageURL(*v)
	}
	return _c
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_c *ProgramCreate) SetThumbnailURL(v string) *ProgramCreate {
	_c.mutation.SetThumbnailURL(v)
	return _c
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableThumbnailURL(v *string) *ProgramCreate {
	if v != nil {
		_c.SetThumbnailURL(*v)
	}
	return _c
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (_c *ProgramCreate) SetVideoThumbnailURL(v string) *ProgramCreate {
	_c.mutation.SetVideoThumbnailURL(v)
	return _c
}

// SetNillableVideoThumbnailURL sets the "video_thumbnail_url" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableVideoThumbnailURL(v *string) *ProgramCreate {
	if v != nil {
		_c.SetVideoThumbnailURL(*v)
	}
	return _c
}

// SetMediaGallery sets the "media_gallery" field.
func (_c *ProgramCreate) SetMediaGallery(v []string) *ProgramCreate {
	_c.mutation.SetMediaGallery(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *ProgramCreate) SetTags(v []string) *ProgramCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetMetrics sets the "metrics" field.
func (_c *ProgramCreate) SetMetrics(v []map[string]interface{}) *ProgramCreate {
	_c.mutation.SetMetrics(v)
	return _c
}

// SetCurriculum sets the "curriculum" field.
func (_c *ProgramCreate) SetCurriculum(v []map[string]interface{}) *ProgramCreate {
	_c.mutation.SetCurriculum(v)
	return _c
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (_c *ProgramCreate) SetEligibilityCriteria(v []map[string]interface{}) *ProgramCreate {
	_c.mutation.SetEligibilityCriteria(v)
	return _c
}

// SetApplicationSteps sets the "application_steps" field.
func (_c *ProgramCreate) SetApplicationSteps(v []map[string]interface{}) *ProgramCreate {
	_c.mutation.SetApplicationSteps(v)
	return _c
}

// SetDuration sets the "duration" field.
func (_c *ProgramCreate) SetDuration(v string) *ProgramCreate {
	_c.mutation.SetDuration(v)
	return _c
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableDuration(v *string) *ProgramCreate {
	if v != nil {
		_c.SetDuration(*v)
	}
	return _c
}

// SetCapacity sets the "capacity" field.
func (_c *ProgramCreate) SetCapacity(v int) *ProgramCreate {
	_c.mutation.SetCapacity(v)
	return _c
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableCapacity(v *int) *ProgramCreate {
	if v != nil {
		_c.SetCapacity(*v)
	}
	return _c
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_c *ProgramCreate) SetApplicationDeadline(v time.Time) *ProgramCreate {
	_c.mutation.SetApplicationDeadline(v)
	return _c
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableApplicationDeadline(v *time.Time) *ProgramCreate {
	if v != nil {
		_c.SetApplicationDeadline(*v)
	}
	return _c
}

// SetRequirements sets the "requirements" field.
func (_c *ProgramCreate) SetRequirements(v []string) *ProgramCreate {
	_c.mutation.SetRequirements(v)
	return _c
}

// SetMinAge sets the "min_age" field.
func (_c *ProgramCreate) SetMinAge(v int) *ProgramCreate {
	_c.mutation.SetMinAge(v)
	return _c
}

// SetNillableMinAge sets the "min_age" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableMinAge(v *int) *ProgramCreate {
	if v != nil {
		_c.SetMinAge(*v)
	}
	return _c
}

// SetMaxAge sets the "max_age" field.
func (_c *ProgramCreate) SetMaxAge(v int) *ProgramCreate {
	_c.mutation.SetMaxAge(v)
	return _c
}

// SetNillableMaxAge sets the "max_age" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableMaxAge(v *int) *ProgramCreate {
	if v != nil {
		_c.SetMaxAge(*v)
	}
	return _c
}

// SetRequiredDocs sets the "required_docs" field.
func (_c *ProgramCreate) SetRequiredDocs(v []string) *ProgramCreate {
	_c.mutation.SetRequiredDocs(v)
	return _c
}

// SetCost sets the "cost" field.
func (_c *ProgramCreate) SetCost(v float64) *ProgramCreate {
	_c.mutation.SetCost(v)
	return _c
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableCost(v *float64) *ProgramCreate {
	if v != nil {
		_c.SetCost(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *ProgramCreate) SetCurrency(v string) *ProgramCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableCurrency(v *string) *ProgramCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetRules sets the "rules" field.
func (_c *ProgramCreate) SetRules(v []string) *ProgramCreate {
	_c.mutation.SetRules(v)
	return _c
}

// SetSteps sets the "steps" field.
func (_c *ProgramCreate) SetSteps(v []map[string]interface{}) *ProgramCreate {
	_c.mutation.SetSteps(v)
	return _c
}

// SetRequiredSkills sets the "required_skills" field.
func (_c *ProgramCreate) SetRequiredSkills(v []string) *ProgramCreate {
	_c.mutation.SetRequiredSkills(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ProgramCreate) SetCreatedAt(v time.Time) *ProgramCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableCreatedAt(v *time.Time) *ProgramCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProgramCreate) SetUpdatedAt(v time.Time) *ProgramCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProgramCreate) SetNillableUpdatedAt(v *time.Time) *ProgramCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCategoryID sets the "category" edge to the ProgramCategory entity by ID.
func (_c *ProgramCreate) SetCategoryID(id int) *ProgramCreate {
	_c.mutation.SetCategoryID(id)
	return _c
}

// SetCategory sets the "category" edge to the ProgramCategory entity.
func (_c *ProgramCreate) SetCategory(v *ProgramCategory) *ProgramCreate {
	return _c.SetCategoryID(v.ID)
}

// AddEnrolmentIDs adds the "enrolments" edge to the ProgramEnrolment entity by IDs.
func (_c *ProgramCreate) AddEnrolmentIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddEnrolmentIDs(ids...)
	return _c
}

// AddEnrolments adds the "enrolments" edges to the ProgramEnrolment entity.
func (_c *ProgramCreate) AddEnrolments(v ...*ProgramEnrolment) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEnrolmentIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ProgramParticipant entity by IDs.
func (_c *ProgramCreate) AddParticipantIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddParticipantIDs(ids...)
	return _c
}

// AddParticipants adds the "participants" edges to the ProgramParticipant entity.
func (_c *ProgramCreate) AddParticipants(v ...*ProgramParticipant) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddParticipantIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_c *ProgramCreate) SetCreatedByID(id int) *ProgramCreate {
	_c.mutation.SetCreatedByID(id)
	return _c
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (_c *ProgramCreate) SetNillableCreatedByID(id *int) *ProgramCreate {
	if id != nil {
		_c = _c.SetCreatedByID(*id)
	}
	return _c
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_c *ProgramCreate) SetCreatedBy(v *User) *ProgramCreate {
	return _c.SetCreatedByID(v.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (_c *ProgramCreate) SetUpdatedByID(id int) *ProgramCreate {
	_c.mutation.SetUpdatedByID(id)
	return _c
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (_c *ProgramCreate) SetNillableUpdatedByID(id *int) *ProgramCreate {
	if id != nil {
		_c = _c.SetUpdatedByID(*id)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (_c *ProgramCreate) SetUpdatedBy(v *User) *ProgramCreate {
	return _c.SetUpdatedByID(v.ID)
}

// AddProgramCardItemIDs adds the "program_card_items" edge to the ProgramCardItem entity by IDs.
func (_c *ProgramCreate) AddProgramCardItemIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddProgramCardItemIDs(ids...)
	return _c
}

// AddProgramCardItems adds the "program_card_items" edges to the ProgramCardItem entity.
func (_c *ProgramCreate) AddProgramCardItems(v ...*ProgramCardItem) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramCardItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *ProgramCreate) AddEventIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *ProgramCreate) AddEvents(v ...*Event) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_c *ProgramCreate) AddSuccessStoryIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddSuccessStoryIDs(ids...)
	return _c
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_c *ProgramCreate) AddSuccessStories(v ...*SuccessStory) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSuccessStoryIDs(ids...)
}

// AddVolunteerOpportunityIDs adds the "volunteer_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_c *ProgramCreate) AddVolunteerOpportunityIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddVolunteerOpportunityIDs(ids...)
	return _c
}

// AddVolunteerOpportunities adds the "volunteer_opportunities" edges to the VolunteerOpportunity entity.
func (_c *ProgramCreate) AddVolunteerOpportunities(v ...*VolunteerOpportunity) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddVolunteerOpportunityIDs(ids...)
}

// AddFundraisingCampaignIDs adds the "fundraising_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_c *ProgramCreate) AddFundraisingCampaignIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddFundraisingCampaignIDs(ids...)
	return _c
}

// AddFundraisingCampaigns adds the "fundraising_campaigns" edges to the FundraisingCampaign entity.
func (_c *ProgramCreate) AddFundraisingCampaigns(v ...*FundraisingCampaign) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFundraisingCampaignIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_c *ProgramCreate) AddDonationIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddDonationIDs(ids...)
	return _c
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_c *ProgramCreate) AddDonations(v ...*Donation) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDonationIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_c *ProgramCreate) AddGrantIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddGrantIDs(ids...)
	return _c
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_c *ProgramCreate) AddGrants(v ...*Grant) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGrantIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_c *ProgramCreate) AddSiteVisitIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddSiteVisitIDs(ids...)
	return _c
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_c *ProgramCreate) AddSiteVisits(v ...*SiteVisit) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSiteVisitIDs(ids...)
}

// AddImpactMetricIDs adds the "impact_metrics" edge to the ImpactMetric entity by IDs.
func (_c *ProgramCreate) AddImpactMetricIDs(ids ...int) *ProgramCreate {
	_c.mutation.AddImpactMetricIDs(ids...)
	return _c
}

// AddImpactMetrics adds the "impact_metrics" edges to the ImpactMetric entity.
func (_c *ProgramCreate) AddImpactMetrics(v ...*ImpactMetric) *ProgramCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddImpactMetricIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (_c *ProgramCreate) Mutation() *ProgramMutation {
	return _c.mutation
}

// Save creates the Program in the database.
func (_c *ProgramCreate) Save(ctx context.Context) (*Program, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProgramCreate) SaveX(ctx context.Context) *Program {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProgramCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := program.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Currency(); !ok {
		v := program.DefaultCurrency
		_c.mutation.SetCurrency(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := program.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := program.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProgramCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Program.slug"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Program.name"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Program.description"`)}
	}
	if _, ok := _c.mutation.Tagline(); !ok {
		return &ValidationError{Name: "tagline", err: errors.New(`ent: missing required field "Program.tagline"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Program.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Program.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MediaGallery(); !ok {
		return &ValidationError{Name: "media_gallery", err: errors.New(`ent: missing required field "Program.media_gallery"`)}
	}
	if _, ok := _c.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Program.tags"`)}
	}
	if _, ok := _c.mutation.Metrics(); !ok {
		return &ValidationError{Name: "metrics", err: errors.New(`ent: missing required field "Program.metrics"`)}
	}
	if _, ok := _c.mutation.Curriculum(); !ok {
		return &ValidationError{Name: "curriculum", err: errors.New(`ent: missing required field "Program.curriculum"`)}
	}
	if _, ok := _c.mutation.EligibilityCriteria(); !ok {
		return &ValidationError{Name: "eligibility_criteria", err: errors.New(`ent: missing required field "Program.eligibility_criteria"`)}
	}
	if _, ok := _c.mutation.ApplicationSteps(); !ok {
		return &ValidationError{Name: "application_steps", err: errors.New(`ent: missing required field "Program.application_steps"`)}
	}
	if _, ok := _c.mutation.Requirements(); !ok {
		return &ValidationError{Name: "requirements", err: errors.New(`ent: missing required field "Program.requirements"`)}
	}
	if _, ok := _c.mutation.RequiredDocs(); !ok {
		return &ValidationError{Name: "required_docs", err: errors.New(`ent: missing required field "Program.required_docs"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Program.currency"`)}
	}
	if _, ok := _c.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "Program.rules"`)}
	}
	if _, ok := _c.mutation.Steps(); !ok {
		return &ValidationError{Name: "steps", err: errors.New(`ent: missing required field "Program.steps"`)}
	}
	if _, ok := _c.mutation.RequiredSkills(); !ok {
		return &ValidationError{Name: "required_skills", err: errors.New(`ent: missing required field "Program.required_skills"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Program.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Program.updated_at"`)}
	}
	if len(_c.mutation.CategoryIDs()) == 0 {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "Program.category"`)}
	}
	return nil
}

func (_c *ProgramCreate) sqlSave(ctx context.Context) (*Program, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProgramCreate) createSpec() (*Program, *sqlgraph.CreateSpec) {
	var (
		_node = &Program{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(program.Table, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(program.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Tagline(); ok {
		_spec.SetField(program.FieldTagline, field.TypeJSON, value)
		_node.Tagline = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.HeroImageURL(); ok {
		_spec.SetField(program.FieldHeroImageURL, field.TypeString, value)
		_node.HeroImageURL = value
	}
	if value, ok := _c.mutation.ThumbnailURL(); ok {
		_spec.SetField(program.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := _c.mutation.VideoThumbnailURL(); ok {
		_spec.SetField(program.FieldVideoThumbnailURL, field.TypeString, value)
		_node.VideoThumbnailURL = value
	}
	if value, ok := _c.mutation.MediaGallery(); ok {
		_spec.SetField(program.FieldMediaGallery, field.TypeJSON, value)
		_node.MediaGallery = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Metrics(); ok {
		_spec.SetField(program.FieldMetrics, field.TypeJSON, value)
		_node.Metrics = value
	}
	if value, ok := _c.mutation.Curriculum(); ok {
		_spec.SetField(program.FieldCurriculum, field.TypeJSON, value)
		_node.Curriculum = value
	}
	if value, ok := _c.mutation.EligibilityCriteria(); ok {
		_spec.SetField(program.FieldEligibilityCriteria, field.TypeJSON, value)
		_node.EligibilityCriteria = value
	}
	if value, ok := _c.mutation.ApplicationSteps(); ok {
		_spec.SetField(program.FieldApplicationSteps, field.TypeJSON, value)
		_node.ApplicationSteps = value
	}
	if value, ok := _c.mutation.Duration(); ok {
		_spec.SetField(program.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := _c.mutation.Capacity(); ok {
		_spec.SetField(program.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if value, ok := _c.mutation.ApplicationDeadline(); ok {
		_spec.SetField(program.FieldApplicationDeadline, field.TypeTime, value)
		_node.ApplicationDeadline = value
	}
	if value, ok := _c.mutation.Requirements(); ok {
		_spec.SetField(program.FieldRequirements, field.TypeJSON, value)
		_node.Requirements = value
	}
	if value, ok := _c.mutation.MinAge(); ok {
		_spec.SetField(program.FieldMinAge, field.TypeInt, value)
		_node.MinAge = value
	}
	if value, ok := _c.mutation.MaxAge(); ok {
		_spec.SetField(program.FieldMaxAge, field.TypeInt, value)
		_node.MaxAge = value
	}
	if value, ok := _c.mutation.RequiredDocs(); ok {
		_spec.SetField(program.FieldRequiredDocs, field.TypeJSON, value)
		_node.RequiredDocs = value
	}
	if value, ok := _c.mutation.Cost(); ok {
		_spec.SetField(program.FieldCost, field.TypeFloat64, value)
		_node.Cost = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(program.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.Rules(); ok {
		_spec.SetField(program.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if value, ok := _c.mutation.Steps(); ok {
		_spec.SetField(program.FieldSteps, field.TypeJSON, value)
		_node.Steps = value
	}
	if value, ok := _c.mutation.RequiredSkills(); ok {
		_spec.SetField(program.FieldRequiredSkills, field.TypeJSON, value)
		_node.RequiredSkills = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(program.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_category_programs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_programs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_updated_programs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramCardItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VolunteerOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FundraisingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImpactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Program.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgramUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgramCreate) OnConflict(opts ...sql.ConflictOption) *ProgramUpsertOne {
	_c.conflict = opts
	return &ProgramUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Program.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgramCreate) OnConflictColumns(columns ...string) *ProgramUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgramUpsertOne{
		create: _c,
	}
}

type (
	// ProgramUpsertOne is the builder for "upsert"-ing
	//  one Program node.
	ProgramUpsertOne struct {
		create *ProgramCreate
	}

	// ProgramUpsert is the "OnConflict" setter.
	ProgramUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *ProgramUpsert) SetSlug(v string) *ProgramUpsert {
	u.Set(program.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateSlug() *ProgramUpsert {
	u.SetExcluded(program.FieldSlug)
	return u
}

// SetName sets the "name" field.
func (u *ProgramUpsert) SetName(v map[string]string) *ProgramUpsert {
	u.Set(program.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateName() *ProgramUpsert {
	u.SetExcluded(program.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProgramUpsert) SetDescription(v map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateDescription() *ProgramUpsert {
	u.SetExcluded(program.FieldDescription)
	return u
}

// SetTagline sets the "tagline" field.
func (u *ProgramUpsert) SetTagline(v map[string]string) *ProgramUpsert {
	u.Set(program.FieldTagline, v)
	return u
}

// UpdateTagline sets the "tagline" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateTagline() *ProgramUpsert {
	u.SetExcluded(program.FieldTagline)
	return u
}

// SetStatus sets the "status" field.
func (u *ProgramUpsert) SetStatus(v program.Status) *ProgramUpsert {
	u.Set(program.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateStatus() *ProgramUpsert {
	u.SetExcluded(program.FieldStatus)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *ProgramUpsert) SetStartDate(v time.Time) *ProgramUpsert {
	u.Set(program.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateStartDate() *ProgramUpsert {
	u.SetExcluded(program.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ProgramUpsert) ClearStartDate() *ProgramUpsert {
	u.SetNull(program.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *ProgramUpsert) SetEndDate(v time.Time) *ProgramUpsert {
	u.Set(program.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateEndDate() *ProgramUpsert {
	u.SetExcluded(program.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ProgramUpsert) ClearEndDate() *ProgramUpsert {
	u.SetNull(program.FieldEndDate)
	return u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramUpsert) SetHeroImageURL(v string) *ProgramUpsert {
	u.Set(program.FieldHeroImageURL, v)
	return u
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateHeroImageURL() *ProgramUpsert {
	u.SetExcluded(program.FieldHeroImageURL)
	return u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramUpsert) ClearHeroImageURL() *ProgramUpsert {
	u.SetNull(program.FieldHeroImageURL)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *ProgramUpsert) SetThumbnailURL(v string) *ProgramUpsert {
	u.Set(program.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateThumbnailURL() *ProgramUpsert {
	u.SetExcluded(program.FieldThumbnailURL)
	return u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *ProgramUpsert) ClearThumbnailURL() *ProgramUpsert {
	u.SetNull(program.FieldThumbnailURL)
	return u
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (u *ProgramUpsert) SetVideoThumbnailURL(v string) *ProgramUpsert {
	u.Set(program.FieldVideoThumbnailURL, v)
	return u
}

// UpdateVideoThumbnailURL sets the "video_thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateVideoThumbnailURL() *ProgramUpsert {
	u.SetExcluded(program.FieldVideoThumbnailURL)
	return u
}

// ClearVideoThumbnailURL clears the value of the "video_thumbnail_url" field.
func (u *ProgramUpsert) ClearVideoThumbnailURL() *ProgramUpsert {
	u.SetNull(program.FieldVideoThumbnailURL)
	return u
}

// SetMediaGallery sets the "media_gallery" field.
func (u *ProgramUpsert) SetMediaGallery(v []string) *ProgramUpsert {
	u.Set(program.FieldMediaGallery, v)
	return u
}

// UpdateMediaGallery sets the "media_gallery" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateMediaGallery() *ProgramUpsert {
	u.SetExcluded(program.FieldMediaGallery)
	return u
}

// SetTags sets the "tags" field.
func (u *ProgramUpsert) SetTags(v []string) *ProgramUpsert {
	u.Set(program.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateTags() *ProgramUpsert {
	u.SetExcluded(program.FieldTags)
	return u
}

// SetMetrics sets the "metrics" field.
func (u *ProgramUpsert) SetMetrics(v []map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldMetrics, v)
	return u
}

// UpdateMetrics sets the "metrics" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateMetrics() *ProgramUpsert {
	u.SetExcluded(program.FieldMetrics)
	return u
}

// SetCurriculum sets the "curriculum" field.
func (u *ProgramUpsert) SetCurriculum(v []map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldCurriculum, v)
	return u
}

// UpdateCurriculum sets the "curriculum" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateCurriculum() *ProgramUpsert {
	u.SetExcluded(program.FieldCurriculum)
	return u
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (u *ProgramUpsert) SetEligibilityCriteria(v []map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldEligibilityCriteria, v)
	return u
}

// UpdateEligibilityCriteria sets the "eligibility_criteria" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateEligibilityCriteria() *ProgramUpsert {
	u.SetExcluded(program.FieldEligibilityCriteria)
	return u
}

// SetApplicationSteps sets the "application_steps" field.
func (u *ProgramUpsert) SetApplicationSteps(v []map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldApplicationSteps, v)
	return u
}

// UpdateApplicationSteps sets the "application_steps" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateApplicationSteps() *ProgramUpsert {
	u.SetExcluded(program.FieldApplicationSteps)
	return u
}

// SetDuration sets the "duration" field.
func (u *ProgramUpsert) SetDuration(v string) *ProgramUpsert {
	u.Set(program.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateDuration() *ProgramUpsert {
	u.SetExcluded(program.FieldDuration)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *ProgramUpsert) ClearDuration() *ProgramUpsert {
	u.SetNull(program.FieldDuration)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *ProgramUpsert) SetCapacity(v int) *ProgramUpsert {
	u.Set(program.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateCapacity() *ProgramUpsert {
	u.SetExcluded(program.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *ProgramUpsert) AddCapacity(v int) *ProgramUpsert {
	u.Add(program.FieldCapacity, v)
	return u
}

// ClearCapacity clears the value of the "capacity" field.
func (u *ProgramUpsert) ClearCapacity() *ProgramUpsert {
	u.SetNull(program.FieldCapacity)
	return u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *ProgramUpsert) SetApplicationDeadline(v time.Time) *ProgramUpsert {
	u.Set(program.FieldApplicationDeadline, v)
	return u
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateApplicationDeadline() *ProgramUpsert {
	u.SetExcluded(program.FieldApplicationDeadline)
	return u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *ProgramUpsert) ClearApplicationDeadline() *ProgramUpsert {
	u.SetNull(program.FieldApplicationDeadline)
	return u
}

// SetRequirements sets the "requirements" field.
func (u *ProgramUpsert) SetRequirements(v []string) *ProgramUpsert {
	u.Set(program.FieldRequirements, v)
	return u
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateRequirements() *ProgramUpsert {
	u.SetExcluded(program.FieldRequirements)
	return u
}

// SetMinAge sets the "min_age" field.
func (u *ProgramUpsert) SetMinAge(v int) *ProgramUpsert {
	u.Set(program.FieldMinAge, v)
	return u
}

// UpdateMinAge sets the "min_age" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateMinAge() *ProgramUpsert {
	u.SetExcluded(program.FieldMinAge)
	return u
}

// AddMinAge adds v to the "min_age" field.
func (u *ProgramUpsert) AddMinAge(v int) *ProgramUpsert {
	u.Add(program.FieldMinAge, v)
	return u
}

// ClearMinAge clears the value of the "min_age" field.
func (u *ProgramUpsert) ClearMinAge() *ProgramUpsert {
	u.SetNull(program.FieldMinAge)
	return u
}

// SetMaxAge sets the "max_age" field.
func (u *ProgramUpsert) SetMaxAge(v int) *ProgramUpsert {
	u.Set(program.FieldMaxAge, v)
	return u
}

// UpdateMaxAge sets the "max_age" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateMaxAge() *ProgramUpsert {
	u.SetExcluded(program.FieldMaxAge)
	return u
}

// AddMaxAge adds v to the "max_age" field.
func (u *ProgramUpsert) AddMaxAge(v int) *ProgramUpsert {
	u.Add(program.FieldMaxAge, v)
	return u
}

// ClearMaxAge clears the value of the "max_age" field.
func (u *ProgramUpsert) ClearMaxAge() *ProgramUpsert {
	u.SetNull(program.FieldMaxAge)
	return u
}

// SetRequiredDocs sets the "required_docs" field.
func (u *ProgramUpsert) SetRequiredDocs(v []string) *ProgramUpsert {
	u.Set(program.FieldRequiredDocs, v)
	return u
}

// UpdateRequiredDocs sets the "required_docs" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateRequiredDocs() *ProgramUpsert {
	u.SetExcluded(program.FieldRequiredDocs)
	return u
}

// SetCost sets the "cost" field.
func (u *ProgramUpsert) SetCost(v float64) *ProgramUpsert {
	u.Set(program.FieldCost, v)
	return u
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateCost() *ProgramUpsert {
	u.SetExcluded(program.FieldCost)
	return u
}

// AddCost adds v to the "cost" field.
func (u *ProgramUpsert) AddCost(v float64) *ProgramUpsert {
	u.Add(program.FieldCost, v)
	return u
}

// ClearCost clears the value of the "cost" field.
func (u *ProgramUpsert) ClearCost() *ProgramUpsert {
	u.SetNull(program.FieldCost)
	return u
}

// SetCurrency sets the "currency" field.
func (u *ProgramUpsert) SetCurrency(v string) *ProgramUpsert {
	u.Set(program.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateCurrency() *ProgramUpsert {
	u.SetExcluded(program.FieldCurrency)
	return u
}

// SetRules sets the "rules" field.
func (u *ProgramUpsert) SetRules(v []string) *ProgramUpsert {
	u.Set(program.FieldRules, v)
	return u
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateRules() *ProgramUpsert {
	u.SetExcluded(program.FieldRules)
	return u
}

// SetSteps sets the "steps" field.
func (u *ProgramUpsert) SetSteps(v []map[string]interface{}) *ProgramUpsert {
	u.Set(program.FieldSteps, v)
	return u
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateSteps() *ProgramUpsert {
	u.SetExcluded(program.FieldSteps)
	return u
}

// SetRequiredSkills sets the "required_skills" field.
func (u *ProgramUpsert) SetRequiredSkills(v []string) *ProgramUpsert {
	u.Set(program.FieldRequiredSkills, v)
	return u
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateRequiredSkills() *ProgramUpsert {
	u.SetExcluded(program.FieldRequiredSkills)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramUpsert) SetUpdatedAt(v time.Time) *ProgramUpsert {
	u.Set(program.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramUpsert) UpdateUpdatedAt() *ProgramUpsert {
	u.SetExcluded(program.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Program.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProgramUpsertOne) UpdateNewValues() *ProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(program.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Program.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProgramUpsertOne) Ignore() *ProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgramUpsertOne) DoNothing() *ProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgramCreate.OnConflict
// documentation for more info.
func (u *ProgramUpsertOne) Update(set func(*ProgramUpsert)) *ProgramUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *ProgramUpsertOne) SetSlug(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateSlug() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *ProgramUpsertOne) SetName(v map[string]string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateName() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProgramUpsertOne) SetDescription(v map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateDescription() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateDescription()
	})
}

// SetTagline sets the "tagline" field.
func (u *ProgramUpsertOne) SetTagline(v map[string]string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetTagline(v)
	})
}

// UpdateTagline sets the "tagline" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateTagline() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateTagline()
	})
}

// SetStatus sets the "status" field.
func (u *ProgramUpsertOne) SetStatus(v program.Status) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateStatus() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateStatus()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ProgramUpsertOne) SetStartDate(v time.Time) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateStartDate() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ProgramUpsertOne) ClearStartDate() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ProgramUpsertOne) SetEndDate(v time.Time) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateEndDate() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ProgramUpsertOne) ClearEndDate() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearEndDate()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramUpsertOne) SetHeroImageURL(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateHeroImageURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramUpsertOne) ClearHeroImageURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *ProgramUpsertOne) SetThumbnailURL(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateThumbnailURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *ProgramUpsertOne) ClearThumbnailURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (u *ProgramUpsertOne) SetVideoThumbnailURL(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetVideoThumbnailURL(v)
	})
}

// UpdateVideoThumbnailURL sets the "video_thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateVideoThumbnailURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateVideoThumbnailURL()
	})
}

// ClearVideoThumbnailURL clears the value of the "video_thumbnail_url" field.
func (u *ProgramUpsertOne) ClearVideoThumbnailURL() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearVideoThumbnailURL()
	})
}

// SetMediaGallery sets the "media_gallery" field.
func (u *ProgramUpsertOne) SetMediaGallery(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMediaGallery(v)
	})
}

// UpdateMediaGallery sets the "media_gallery" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateMediaGallery() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMediaGallery()
	})
}

// SetTags sets the "tags" field.
func (u *ProgramUpsertOne) SetTags(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateTags() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateTags()
	})
}

// SetMetrics sets the "metrics" field.
func (u *ProgramUpsertOne) SetMetrics(v []map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMetrics(v)
	})
}

// UpdateMetrics sets the "metrics" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateMetrics() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMetrics()
	})
}

// SetCurriculum sets the "curriculum" field.
func (u *ProgramUpsertOne) SetCurriculum(v []map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCurriculum(v)
	})
}

// UpdateCurriculum sets the "curriculum" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateCurriculum() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCurriculum()
	})
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (u *ProgramUpsertOne) SetEligibilityCriteria(v []map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetEligibilityCriteria(v)
	})
}

// UpdateEligibilityCriteria sets the "eligibility_criteria" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateEligibilityCriteria() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateEligibilityCriteria()
	})
}

// SetApplicationSteps sets the "application_steps" field.
func (u *ProgramUpsertOne) SetApplicationSteps(v []map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetApplicationSteps(v)
	})
}

// UpdateApplicationSteps sets the "application_steps" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateApplicationSteps() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateApplicationSteps()
	})
}

// SetDuration sets the "duration" field.
func (u *ProgramUpsertOne) SetDuration(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateDuration() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ProgramUpsertOne) ClearDuration() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearDuration()
	})
}

// SetCapacity sets the "capacity" field.
func (u *ProgramUpsertOne) SetCapacity(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *ProgramUpsertOne) AddCapacity(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateCapacity() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *ProgramUpsertOne) ClearCapacity() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearCapacity()
	})
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *ProgramUpsertOne) SetApplicationDeadline(v time.Time) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetApplicationDeadline(v)
	})
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateApplicationDeadline() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateApplicationDeadline()
	})
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *ProgramUpsertOne) ClearApplicationDeadline() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearApplicationDeadline()
	})
}

// SetRequirements sets the "requirements" field.
func (u *ProgramUpsertOne) SetRequirements(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequirements(v)
	})
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateRequirements() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequirements()
	})
}

// SetMinAge sets the "min_age" field.
func (u *ProgramUpsertOne) SetMinAge(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMinAge(v)
	})
}

// AddMinAge adds v to the "min_age" field.
func (u *ProgramUpsertOne) AddMinAge(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.AddMinAge(v)
	})
}

// UpdateMinAge sets the "min_age" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateMinAge() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMinAge()
	})
}

// ClearMinAge clears the value of the "min_age" field.
func (u *ProgramUpsertOne) ClearMinAge() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearMinAge()
	})
}

// SetMaxAge sets the "max_age" field.
func (u *ProgramUpsertOne) SetMaxAge(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMaxAge(v)
	})
}

// AddMaxAge adds v to the "max_age" field.
func (u *ProgramUpsertOne) AddMaxAge(v int) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.AddMaxAge(v)
	})
}

// UpdateMaxAge sets the "max_age" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateMaxAge() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMaxAge()
	})
}

// ClearMaxAge clears the value of the "max_age" field.
func (u *ProgramUpsertOne) ClearMaxAge() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearMaxAge()
	})
}

// SetRequiredDocs sets the "required_docs" field.
func (u *ProgramUpsertOne) SetRequiredDocs(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequiredDocs(v)
	})
}

// UpdateRequiredDocs sets the "required_docs" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateRequiredDocs() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequiredDocs()
	})
}

// SetCost sets the "cost" field.
func (u *ProgramUpsertOne) SetCost(v float64) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *ProgramUpsertOne) AddCost(v float64) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateCost() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCost()
	})
}

// ClearCost clears the value of the "cost" field.
func (u *ProgramUpsertOne) ClearCost() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *ProgramUpsertOne) SetCurrency(v string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateCurrency() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCurrency()
	})
}

// SetRules sets the "rules" field.
func (u *ProgramUpsertOne) SetRules(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateRules() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRules()
	})
}

// SetSteps sets the "steps" field.
func (u *ProgramUpsertOne) SetSteps(v []map[string]interface{}) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateSteps() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateSteps()
	})
}

// SetRequiredSkills sets the "required_skills" field.
func (u *ProgramUpsertOne) SetRequiredSkills(v []string) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequiredSkills(v)
	})
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateRequiredSkills() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequiredSkills()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramUpsertOne) SetUpdatedAt(v time.Time) *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramUpsertOne) UpdateUpdatedAt() *ProgramUpsertOne {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProgramUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgramCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgramUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProgramUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProgramUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProgramCreateBulk is the builder for creating many Program entities in bulk.
type ProgramCreateBulk struct {
	config
	err      error
	builders []*ProgramCreate
	conflict []sql.ConflictOption
}

// Save creates the Program entities in the database.
func (_c *ProgramCreateBulk) Save(ctx context.Context) ([]*Program, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Program, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProgramCreateBulk) SaveX(ctx context.Context) []*Program {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Program.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProgramUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *ProgramCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProgramUpsertBulk {
	_c.conflict = opts
	return &ProgramUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Program.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ProgramCreateBulk) OnConflictColumns(columns ...string) *ProgramUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ProgramUpsertBulk{
		create: _c,
	}
}

// ProgramUpsertBulk is the builder for "upsert"-ing
// a bulk of Program nodes.
type ProgramUpsertBulk struct {
	create *ProgramCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Program.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProgramUpsertBulk) UpdateNewValues() *ProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(program.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Program.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProgramUpsertBulk) Ignore() *ProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProgramUpsertBulk) DoNothing() *ProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProgramCreateBulk.OnConflict
// documentation for more info.
func (u *ProgramUpsertBulk) Update(set func(*ProgramUpsert)) *ProgramUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProgramUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *ProgramUpsertBulk) SetSlug(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateSlug() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *ProgramUpsertBulk) SetName(v map[string]string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateName() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProgramUpsertBulk) SetDescription(v map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateDescription() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateDescription()
	})
}

// SetTagline sets the "tagline" field.
func (u *ProgramUpsertBulk) SetTagline(v map[string]string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetTagline(v)
	})
}

// UpdateTagline sets the "tagline" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateTagline() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateTagline()
	})
}

// SetStatus sets the "status" field.
func (u *ProgramUpsertBulk) SetStatus(v program.Status) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateStatus() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateStatus()
	})
}

// SetStartDate sets the "start_date" field.
func (u *ProgramUpsertBulk) SetStartDate(v time.Time) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateStartDate() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *ProgramUpsertBulk) ClearStartDate() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *ProgramUpsertBulk) SetEndDate(v time.Time) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateEndDate() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *ProgramUpsertBulk) ClearEndDate() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearEndDate()
	})
}

// SetHeroImageURL sets the "hero_image_url" field.
func (u *ProgramUpsertBulk) SetHeroImageURL(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetHeroImageURL(v)
	})
}

// UpdateHeroImageURL sets the "hero_image_url" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateHeroImageURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateHeroImageURL()
	})
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (u *ProgramUpsertBulk) ClearHeroImageURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearHeroImageURL()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *ProgramUpsertBulk) SetThumbnailURL(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateThumbnailURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateThumbnailURL()
	})
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (u *ProgramUpsertBulk) ClearThumbnailURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearThumbnailURL()
	})
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (u *ProgramUpsertBulk) SetVideoThumbnailURL(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetVideoThumbnailURL(v)
	})
}

// UpdateVideoThumbnailURL sets the "video_thumbnail_url" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateVideoThumbnailURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateVideoThumbnailURL()
	})
}

// ClearVideoThumbnailURL clears the value of the "video_thumbnail_url" field.
func (u *ProgramUpsertBulk) ClearVideoThumbnailURL() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearVideoThumbnailURL()
	})
}

// SetMediaGallery sets the "media_gallery" field.
func (u *ProgramUpsertBulk) SetMediaGallery(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMediaGallery(v)
	})
}

// UpdateMediaGallery sets the "media_gallery" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateMediaGallery() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMediaGallery()
	})
}

// SetTags sets the "tags" field.
func (u *ProgramUpsertBulk) SetTags(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateTags() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateTags()
	})
}

// SetMetrics sets the "metrics" field.
func (u *ProgramUpsertBulk) SetMetrics(v []map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMetrics(v)
	})
}

// UpdateMetrics sets the "metrics" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateMetrics() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMetrics()
	})
}

// SetCurriculum sets the "curriculum" field.
func (u *ProgramUpsertBulk) SetCurriculum(v []map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCurriculum(v)
	})
}

// UpdateCurriculum sets the "curriculum" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateCurriculum() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCurriculum()
	})
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (u *ProgramUpsertBulk) SetEligibilityCriteria(v []map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetEligibilityCriteria(v)
	})
}

// UpdateEligibilityCriteria sets the "eligibility_criteria" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateEligibilityCriteria() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateEligibilityCriteria()
	})
}

// SetApplicationSteps sets the "application_steps" field.
func (u *ProgramUpsertBulk) SetApplicationSteps(v []map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetApplicationSteps(v)
	})
}

// UpdateApplicationSteps sets the "application_steps" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateApplicationSteps() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateApplicationSteps()
	})
}

// SetDuration sets the "duration" field.
func (u *ProgramUpsertBulk) SetDuration(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateDuration() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ProgramUpsertBulk) ClearDuration() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearDuration()
	})
}

// SetCapacity sets the "capacity" field.
func (u *ProgramUpsertBulk) SetCapacity(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *ProgramUpsertBulk) AddCapacity(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateCapacity() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *ProgramUpsertBulk) ClearCapacity() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearCapacity()
	})
}

// SetApplicationDeadline sets the "application_deadline" field.
func (u *ProgramUpsertBulk) SetApplicationDeadline(v time.Time) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetApplicationDeadline(v)
	})
}

// UpdateApplicationDeadline sets the "application_deadline" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateApplicationDeadline() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateApplicationDeadline()
	})
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (u *ProgramUpsertBulk) ClearApplicationDeadline() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearApplicationDeadline()
	})
}

// SetRequirements sets the "requirements" field.
func (u *ProgramUpsertBulk) SetRequirements(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequirements(v)
	})
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateRequirements() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequirements()
	})
}

// SetMinAge sets the "min_age" field.
func (u *ProgramUpsertBulk) SetMinAge(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMinAge(v)
	})
}

// AddMinAge adds v to the "min_age" field.
func (u *ProgramUpsertBulk) AddMinAge(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.AddMinAge(v)
	})
}

// UpdateMinAge sets the "min_age" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateMinAge() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMinAge()
	})
}

// ClearMinAge clears the value of the "min_age" field.
func (u *ProgramUpsertBulk) ClearMinAge() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearMinAge()
	})
}

// SetMaxAge sets the "max_age" field.
func (u *ProgramUpsertBulk) SetMaxAge(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetMaxAge(v)
	})
}

// AddMaxAge adds v to the "max_age" field.
func (u *ProgramUpsertBulk) AddMaxAge(v int) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.AddMaxAge(v)
	})
}

// UpdateMaxAge sets the "max_age" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateMaxAge() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateMaxAge()
	})
}

// ClearMaxAge clears the value of the "max_age" field.
func (u *ProgramUpsertBulk) ClearMaxAge() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearMaxAge()
	})
}

// SetRequiredDocs sets the "required_docs" field.
func (u *ProgramUpsertBulk) SetRequiredDocs(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequiredDocs(v)
	})
}

// UpdateRequiredDocs sets the "required_docs" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateRequiredDocs() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequiredDocs()
	})
}

// SetCost sets the "cost" field.
func (u *ProgramUpsertBulk) SetCost(v float64) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *ProgramUpsertBulk) AddCost(v float64) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateCost() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCost()
	})
}

// ClearCost clears the value of the "cost" field.
func (u *ProgramUpsertBulk) ClearCost() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.ClearCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *ProgramUpsertBulk) SetCurrency(v string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateCurrency() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateCurrency()
	})
}

// SetRules sets the "rules" field.
func (u *ProgramUpsertBulk) SetRules(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateRules() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRules()
	})
}

// SetSteps sets the "steps" field.
func (u *ProgramUpsertBulk) SetSteps(v []map[string]interface{}) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateSteps() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateSteps()
	})
}

// SetRequiredSkills sets the "required_skills" field.
func (u *ProgramUpsertBulk) SetRequiredSkills(v []string) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetRequiredSkills(v)
	})
}

// UpdateRequiredSkills sets the "required_skills" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateRequiredSkills() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateRequiredSkills()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProgramUpsertBulk) SetUpdatedAt(v time.Time) *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProgramUpsertBulk) UpdateUpdatedAt() *ProgramUpsertBulk {
	return u.Update(func(s *ProgramUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProgramUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProgramCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProgramCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProgramUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
