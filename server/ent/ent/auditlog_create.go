// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/auditlog"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogCreate is the builder for creating a AuditLog entity.
type AuditLogCreate struct {
	config
	mutation *AuditLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAction sets the "action" field.
func (_c *AuditLogCreate) SetAction(v string) *AuditLogCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetMeta sets the "meta" field.
func (_c *AuditLogCreate) SetMeta(v map[string]interface{}) *AuditLogCreate {
	_c.mutation.SetMeta(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AuditLogCreate) SetCreatedAt(v time.Time) *AuditLogCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableCreatedAt(v *time.Time) *AuditLogCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetEntityID sets the "entity_id" field.
func (_c *AuditLogCreate) SetEntityID(v string) *AuditLogCreate {
	_c.mutation.SetEntityID(v)
	return _c
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableEntityID(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetEntityID(*v)
	}
	return _c
}

// SetEntityType sets the "entity_type" field.
func (_c *AuditLogCreate) SetEntityType(v string) *AuditLogCreate {
	_c.mutation.SetEntityType(v)
	return _c
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_c *AuditLogCreate) SetNillableEntityType(v *string) *AuditLogCreate {
	if v != nil {
		_c.SetEntityType(*v)
	}
	return _c
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_c *AuditLogCreate) SetActorID(id int) *AuditLogCreate {
	_c.mutation.SetActorID(id)
	return _c
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_c *AuditLogCreate) SetNillableActorID(id *int) *AuditLogCreate {
	if id != nil {
		_c = _c.SetActorID(*id)
	}
	return _c
}

// SetActor sets the "actor" edge to the User entity.
func (_c *AuditLogCreate) SetActor(v *User) *AuditLogCreate {
	return _c.SetActorID(v.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (_c *AuditLogCreate) Mutation() *AuditLogMutation {
	return _c.mutation
}

// Save creates the AuditLog in the database.
func (_c *AuditLogCreate) Save(ctx context.Context) (*AuditLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AuditLogCreate) SaveX(ctx context.Context) *AuditLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuditLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuditLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AuditLogCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := auditlog.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AuditLogCreate) check() error {
	if _, ok := _c.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AuditLog.action"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuditLog.created_at"`)}
	}
	return nil
}

func (_c *AuditLogCreate) sqlSave(ctx context.Context) (*AuditLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AuditLogCreate) createSpec() (*AuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(auditlog.Table, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := _c.mutation.Meta(); ok {
		_spec.SetField(auditlog.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.EntityID(); ok {
		_spec.SetField(auditlog.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := _c.mutation.EntityType(); ok {
		_spec.SetField(auditlog.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if nodes := _c.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.audit_log_actor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AuditLog.Create().
//		SetAction(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditLogUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (_c *AuditLogCreate) OnConflict(opts ...sql.ConflictOption) *AuditLogUpsertOne {
	_c.conflict = opts
	return &AuditLogUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AuditLogCreate) OnConflictColumns(columns ...string) *AuditLogUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AuditLogUpsertOne{
		create: _c,
	}
}

type (
	// AuditLogUpsertOne is the builder for "upsert"-ing
	//  one AuditLog node.
	AuditLogUpsertOne struct {
		create *AuditLogCreate
	}

	// AuditLogUpsert is the "OnConflict" setter.
	AuditLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetAction sets the "action" field.
func (u *AuditLogUpsert) SetAction(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateAction() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldAction)
	return u
}

// SetMeta sets the "meta" field.
func (u *AuditLogUpsert) SetMeta(v map[string]interface{}) *AuditLogUpsert {
	u.Set(auditlog.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateMeta() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldMeta)
	return u
}

// ClearMeta clears the value of the "meta" field.
func (u *AuditLogUpsert) ClearMeta() *AuditLogUpsert {
	u.SetNull(auditlog.FieldMeta)
	return u
}

// SetEntityID sets the "entity_id" field.
func (u *AuditLogUpsert) SetEntityID(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldEntityID, v)
	return u
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateEntityID() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldEntityID)
	return u
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *AuditLogUpsert) ClearEntityID() *AuditLogUpsert {
	u.SetNull(auditlog.FieldEntityID)
	return u
}

// SetEntityType sets the "entity_type" field.
func (u *AuditLogUpsert) SetEntityType(v string) *AuditLogUpsert {
	u.Set(auditlog.FieldEntityType, v)
	return u
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AuditLogUpsert) UpdateEntityType() *AuditLogUpsert {
	u.SetExcluded(auditlog.FieldEntityType)
	return u
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *AuditLogUpsert) ClearEntityType() *AuditLogUpsert {
	u.SetNull(auditlog.FieldEntityType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AuditLogUpsertOne) UpdateNewValues() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(auditlog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AuditLogUpsertOne) Ignore() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditLogUpsertOne) DoNothing() *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditLogCreate.OnConflict
// documentation for more info.
func (u *AuditLogUpsertOne) Update(set func(*AuditLogUpsert)) *AuditLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *AuditLogUpsertOne) SetAction(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateAction() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateAction()
	})
}

// SetMeta sets the "meta" field.
func (u *AuditLogUpsertOne) SetMeta(v map[string]interface{}) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateMeta() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *AuditLogUpsertOne) ClearMeta() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearMeta()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *AuditLogUpsertOne) SetEntityID(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateEntityID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateEntityID()
	})
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *AuditLogUpsertOne) ClearEntityID() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearEntityID()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *AuditLogUpsertOne) SetEntityType(v string) *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AuditLogUpsertOne) UpdateEntityType() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *AuditLogUpsertOne) ClearEntityType() *AuditLogUpsertOne {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearEntityType()
	})
}

// Exec executes the query.
func (u *AuditLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuditLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuditLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuditLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuditLogCreateBulk is the builder for creating many AuditLog entities in bulk.
type AuditLogCreateBulk struct {
	config
	err      error
	builders []*AuditLogCreate
	conflict []sql.ConflictOption
}

// Save creates the AuditLog entities in the database.
func (_c *AuditLogCreateBulk) Save(ctx context.Context) ([]*AuditLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AuditLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AuditLogCreateBulk) SaveX(ctx context.Context) []*AuditLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AuditLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuditLogUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (_c *AuditLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuditLogUpsertBulk {
	_c.conflict = opts
	return &AuditLogUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AuditLogCreateBulk) OnConflictColumns(columns ...string) *AuditLogUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AuditLogUpsertBulk{
		create: _c,
	}
}

// AuditLogUpsertBulk is the builder for "upsert"-ing
// a bulk of AuditLog nodes.
type AuditLogUpsertBulk struct {
	create *AuditLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AuditLogUpsertBulk) UpdateNewValues() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(auditlog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AuditLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AuditLogUpsertBulk) Ignore() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuditLogUpsertBulk) DoNothing() *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuditLogCreateBulk.OnConflict
// documentation for more info.
func (u *AuditLogUpsertBulk) Update(set func(*AuditLogUpsert)) *AuditLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuditLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *AuditLogUpsertBulk) SetAction(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateAction() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateAction()
	})
}

// SetMeta sets the "meta" field.
func (u *AuditLogUpsertBulk) SetMeta(v map[string]interface{}) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateMeta() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *AuditLogUpsertBulk) ClearMeta() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearMeta()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *AuditLogUpsertBulk) SetEntityID(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateEntityID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateEntityID()
	})
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *AuditLogUpsertBulk) ClearEntityID() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearEntityID()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *AuditLogUpsertBulk) SetEntityType(v string) *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AuditLogUpsertBulk) UpdateEntityType() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *AuditLogUpsertBulk) ClearEntityType() *AuditLogUpsertBulk {
	return u.Update(func(s *AuditLogUpsert) {
		s.ClearEntityType()
	})
}

// Exec executes the query.
func (u *AuditLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AuditLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuditLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuditLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
