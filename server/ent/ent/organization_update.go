// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdate) SetName(v string) *OrganizationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableName(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetWebsite sets the "website" field.
func (_u *OrganizationUpdate) SetWebsite(v string) *OrganizationUpdate {
	_u.mutation.SetWebsite(v)
	return _u
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableWebsite(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetWebsite(*v)
	}
	return _u
}

// ClearWebsite clears the value of the "website" field.
func (_u *OrganizationUpdate) ClearWebsite() *OrganizationUpdate {
	_u.mutation.ClearWebsite()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *OrganizationUpdate) SetLogoURL(v string) *OrganizationUpdate {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableLogoURL(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *OrganizationUpdate) ClearLogoURL() *OrganizationUpdate {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdate) SetDescription(v string) *OrganizationUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDescription(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIndustry sets the "industry" field.
func (_u *OrganizationUpdate) SetIndustry(v string) *OrganizationUpdate {
	_u.mutation.SetIndustry(v)
	return _u
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableIndustry(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetIndustry(*v)
	}
	return _u
}

// ClearIndustry clears the value of the "industry" field.
func (_u *OrganizationUpdate) ClearIndustry() *OrganizationUpdate {
	_u.mutation.ClearIndustry()
	return _u
}

// SetSize sets the "size" field.
func (_u *OrganizationUpdate) SetSize(v string) *OrganizationUpdate {
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableSize(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *OrganizationUpdate) ClearSize() *OrganizationUpdate {
	_u.mutation.ClearSize()
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *OrganizationUpdate) SetContactEmail(v string) *OrganizationUpdate {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableContactEmail(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (_u *OrganizationUpdate) ClearContactEmail() *OrganizationUpdate {
	_u.mutation.ClearContactEmail()
	return _u
}

// SetContactPhone sets the "contact_phone" field.
func (_u *OrganizationUpdate) SetContactPhone(v string) *OrganizationUpdate {
	_u.mutation.SetContactPhone(v)
	return _u
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableContactPhone(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetContactPhone(*v)
	}
	return _u
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (_u *OrganizationUpdate) ClearContactPhone() *OrganizationUpdate {
	_u.mutation.ClearContactPhone()
	return _u
}

// SetAddress sets the "address" field.
func (_u *OrganizationUpdate) SetAddress(v map[string]string) *OrganizationUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *OrganizationUpdate) ClearAddress() *OrganizationUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdate) SetUpdatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddPartnershipIDs adds the "partnerships" edge to the Partnership entity by IDs.
func (_u *OrganizationUpdate) AddPartnershipIDs(ids ...int) *OrganizationUpdate {
	_u.mutation.AddPartnershipIDs(ids...)
	return _u
}

// AddPartnerships adds the "partnerships" edges to the Partnership entity.
func (_u *OrganizationUpdate) AddPartnerships(v ...*Partnership) *OrganizationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnershipIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *OrganizationUpdate) AddGrantIDs(ids ...int) *OrganizationUpdate {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *OrganizationUpdate) AddGrants(v ...*Grant) *OrganizationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *OrganizationUpdate) SetUserID(id int) *OrganizationUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableUserID(id *int) *OrganizationUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OrganizationUpdate) SetUser(v *User) *OrganizationUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdate) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearPartnerships clears all "partnerships" edges to the Partnership entity.
func (_u *OrganizationUpdate) ClearPartnerships() *OrganizationUpdate {
	_u.mutation.ClearPartnerships()
	return _u
}

// RemovePartnershipIDs removes the "partnerships" edge to Partnership entities by IDs.
func (_u *OrganizationUpdate) RemovePartnershipIDs(ids ...int) *OrganizationUpdate {
	_u.mutation.RemovePartnershipIDs(ids...)
	return _u
}

// RemovePartnerships removes "partnerships" edges to Partnership entities.
func (_u *OrganizationUpdate) RemovePartnerships(v ...*Partnership) *OrganizationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnershipIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *OrganizationUpdate) ClearGrants() *OrganizationUpdate {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *OrganizationUpdate) RemoveGrantIDs(ids ...int) *OrganizationUpdate {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *OrganizationUpdate) RemoveGrants(v ...*Grant) *OrganizationUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OrganizationUpdate) ClearUser() *OrganizationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrganizationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if _u.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Industry(); ok {
		_spec.SetField(organization.FieldIndustry, field.TypeString, value)
	}
	if _u.mutation.IndustryCleared() {
		_spec.ClearField(organization.FieldIndustry, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(organization.FieldSize, field.TypeString, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(organization.FieldSize, field.TypeString)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(organization.FieldContactEmail, field.TypeString, value)
	}
	if _u.mutation.ContactEmailCleared() {
		_spec.ClearField(organization.FieldContactEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ContactPhone(); ok {
		_spec.SetField(organization.FieldContactPhone, field.TypeString, value)
	}
	if _u.mutation.ContactPhoneCleared() {
		_spec.ClearField(organization.FieldContactPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeJSON, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnershipsIDs(); len(nodes) > 0 && !_u.mutation.PartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (_u *OrganizationUpdateOne) SetName(v string) *OrganizationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableName(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetWebsite sets the "website" field.
func (_u *OrganizationUpdateOne) SetWebsite(v string) *OrganizationUpdateOne {
	_u.mutation.SetWebsite(v)
	return _u
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableWebsite(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetWebsite(*v)
	}
	return _u
}

// ClearWebsite clears the value of the "website" field.
func (_u *OrganizationUpdateOne) ClearWebsite() *OrganizationUpdateOne {
	_u.mutation.ClearWebsite()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *OrganizationUpdateOne) SetLogoURL(v string) *OrganizationUpdateOne {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableLogoURL(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *OrganizationUpdateOne) ClearLogoURL() *OrganizationUpdateOne {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdateOne) SetDescription(v string) *OrganizationUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDescription(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIndustry sets the "industry" field.
func (_u *OrganizationUpdateOne) SetIndustry(v string) *OrganizationUpdateOne {
	_u.mutation.SetIndustry(v)
	return _u
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableIndustry(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetIndustry(*v)
	}
	return _u
}

// ClearIndustry clears the value of the "industry" field.
func (_u *OrganizationUpdateOne) ClearIndustry() *OrganizationUpdateOne {
	_u.mutation.ClearIndustry()
	return _u
}

// SetSize sets the "size" field.
func (_u *OrganizationUpdateOne) SetSize(v string) *OrganizationUpdateOne {
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableSize(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *OrganizationUpdateOne) ClearSize() *OrganizationUpdateOne {
	_u.mutation.ClearSize()
	return _u
}

// SetContactEmail sets the "contact_email" field.
func (_u *OrganizationUpdateOne) SetContactEmail(v string) *OrganizationUpdateOne {
	_u.mutation.SetContactEmail(v)
	return _u
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableContactEmail(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetContactEmail(*v)
	}
	return _u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (_u *OrganizationUpdateOne) ClearContactEmail() *OrganizationUpdateOne {
	_u.mutation.ClearContactEmail()
	return _u
}

// SetContactPhone sets the "contact_phone" field.
func (_u *OrganizationUpdateOne) SetContactPhone(v string) *OrganizationUpdateOne {
	_u.mutation.SetContactPhone(v)
	return _u
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableContactPhone(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetContactPhone(*v)
	}
	return _u
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (_u *OrganizationUpdateOne) ClearContactPhone() *OrganizationUpdateOne {
	_u.mutation.ClearContactPhone()
	return _u
}

// SetAddress sets the "address" field.
func (_u *OrganizationUpdateOne) SetAddress(v map[string]string) *OrganizationUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *OrganizationUpdateOne) ClearAddress() *OrganizationUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdateOne) SetUpdatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddPartnershipIDs adds the "partnerships" edge to the Partnership entity by IDs.
func (_u *OrganizationUpdateOne) AddPartnershipIDs(ids ...int) *OrganizationUpdateOne {
	_u.mutation.AddPartnershipIDs(ids...)
	return _u
}

// AddPartnerships adds the "partnerships" edges to the Partnership entity.
func (_u *OrganizationUpdateOne) AddPartnerships(v ...*Partnership) *OrganizationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnershipIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *OrganizationUpdateOne) AddGrantIDs(ids ...int) *OrganizationUpdateOne {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *OrganizationUpdateOne) AddGrants(v ...*Grant) *OrganizationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *OrganizationUpdateOne) SetUserID(id int) *OrganizationUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableUserID(id *int) *OrganizationUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *OrganizationUpdateOne) SetUser(v *User) *OrganizationUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearPartnerships clears all "partnerships" edges to the Partnership entity.
func (_u *OrganizationUpdateOne) ClearPartnerships() *OrganizationUpdateOne {
	_u.mutation.ClearPartnerships()
	return _u
}

// RemovePartnershipIDs removes the "partnerships" edge to Partnership entities by IDs.
func (_u *OrganizationUpdateOne) RemovePartnershipIDs(ids ...int) *OrganizationUpdateOne {
	_u.mutation.RemovePartnershipIDs(ids...)
	return _u
}

// RemovePartnerships removes "partnerships" edges to Partnership entities.
func (_u *OrganizationUpdateOne) RemovePartnerships(v ...*Partnership) *OrganizationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnershipIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *OrganizationUpdateOne) ClearGrants() *OrganizationUpdateOne {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *OrganizationUpdateOne) RemoveGrantIDs(ids ...int) *OrganizationUpdateOne {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *OrganizationUpdateOne) RemoveGrants(v ...*Grant) *OrganizationUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (_u *OrganizationUpdateOne) ClearUser() *OrganizationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Organization entity.
func (_u *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if _u.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Industry(); ok {
		_spec.SetField(organization.FieldIndustry, field.TypeString, value)
	}
	if _u.mutation.IndustryCleared() {
		_spec.ClearField(organization.FieldIndustry, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(organization.FieldSize, field.TypeString, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(organization.FieldSize, field.TypeString)
	}
	if value, ok := _u.mutation.ContactEmail(); ok {
		_spec.SetField(organization.FieldContactEmail, field.TypeString, value)
	}
	if _u.mutation.ContactEmailCleared() {
		_spec.ClearField(organization.FieldContactEmail, field.TypeString)
	}
	if value, ok := _u.mutation.ContactPhone(); ok {
		_spec.SetField(organization.FieldContactPhone, field.TypeString, value)
	}
	if _u.mutation.ContactPhoneCleared() {
		_spec.ClearField(organization.FieldContactPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeJSON, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnershipsIDs(); len(nodes) > 0 && !_u.mutation.PartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
