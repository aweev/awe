// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ImpactDataPoint is the model entity for the ImpactDataPoint schema.
type ImpactDataPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// RecordedAt holds the value of the "recorded_at" field.
	RecordedAt time.Time `json:"recorded_at,omitempty"`
	// RecordedBy holds the value of the "recorded_by" field.
	RecordedBy string `json:"recorded_by,omitempty"`
	// Period holds the value of the "period" field.
	Period string `json:"period,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// VerifiedBy holds the value of the "verified_by" field.
	VerifiedBy string `json:"verified_by,omitempty"`
	// VerifiedAt holds the value of the "verified_at" field.
	VerifiedAt time.Time `json:"verified_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImpactDataPointQuery when eager-loading is set.
	Edges                     ImpactDataPointEdges `json:"edges"`
	impact_metric_data_points *int
	selectValues              sql.SelectValues
}

// ImpactDataPointEdges holds the relations/edges for other nodes in the graph.
type ImpactDataPointEdges struct {
	// Metric holds the value of the metric edge.
	Metric *ImpactMetric `json:"metric,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetricOrErr returns the Metric value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImpactDataPointEdges) MetricOrErr() (*ImpactMetric, error) {
	if e.Metric != nil {
		return e.Metric, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: impactmetric.Label}
	}
	return nil, &NotLoadedError{edge: "metric"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImpactDataPoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case impactdatapoint.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case impactdatapoint.FieldValue:
			values[i] = new(sql.NullFloat64)
		case impactdatapoint.FieldID:
			values[i] = new(sql.NullInt64)
		case impactdatapoint.FieldRecordedBy, impactdatapoint.FieldPeriod, impactdatapoint.FieldNotes, impactdatapoint.FieldSource, impactdatapoint.FieldVerifiedBy:
			values[i] = new(sql.NullString)
		case impactdatapoint.FieldRecordedAt, impactdatapoint.FieldVerifiedAt, impactdatapoint.FieldCreatedAt, impactdatapoint.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case impactdatapoint.ForeignKeys[0]: // impact_metric_data_points
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImpactDataPoint fields.
func (_m *ImpactDataPoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case impactdatapoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case impactdatapoint.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.Float64
			}
		case impactdatapoint.FieldRecordedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field recorded_at", values[i])
			} else if value.Valid {
				_m.RecordedAt = value.Time
			}
		case impactdatapoint.FieldRecordedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recorded_by", values[i])
			} else if value.Valid {
				_m.RecordedBy = value.String
			}
		case impactdatapoint.FieldPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				_m.Period = value.String
			}
		case impactdatapoint.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				_m.Notes = value.String
			}
		case impactdatapoint.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				_m.Source = value.String
			}
		case impactdatapoint.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				_m.IsVerified = value.Bool
			}
		case impactdatapoint.FieldVerifiedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verified_by", values[i])
			} else if value.Valid {
				_m.VerifiedBy = value.String
			}
		case impactdatapoint.FieldVerifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verified_at", values[i])
			} else if value.Valid {
				_m.VerifiedAt = value.Time
			}
		case impactdatapoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case impactdatapoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case impactdatapoint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field impact_metric_data_points", value)
			} else if value.Valid {
				_m.impact_metric_data_points = new(int)
				*_m.impact_metric_data_points = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ImpactDataPoint.
// This includes values selected through modifiers, order, etc.
func (_m *ImpactDataPoint) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryMetric queries the "metric" edge of the ImpactDataPoint entity.
func (_m *ImpactDataPoint) QueryMetric() *ImpactMetricQuery {
	return NewImpactDataPointClient(_m.config).QueryMetric(_m)
}

// Update returns a builder for updating this ImpactDataPoint.
// Note that you need to call ImpactDataPoint.Unwrap() before calling this method if this ImpactDataPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImpactDataPoint) Update() *ImpactDataPointUpdateOne {
	return NewImpactDataPointClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImpactDataPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImpactDataPoint) Unwrap() *ImpactDataPoint {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImpactDataPoint is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImpactDataPoint) String() string {
	var builder strings.Builder
	builder.WriteString("ImpactDataPoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteString(", ")
	builder.WriteString("recorded_at=")
	builder.WriteString(_m.RecordedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("recorded_by=")
	builder.WriteString(_m.RecordedBy)
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(_m.Period)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(_m.Notes)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(_m.Source)
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("verified_by=")
	builder.WriteString(_m.VerifiedBy)
	builder.WriteString(", ")
	builder.WriteString("verified_at=")
	builder.WriteString(_m.VerifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ImpactDataPoints is a parsable slice of ImpactDataPoint.
type ImpactDataPoints []*ImpactDataPoint
