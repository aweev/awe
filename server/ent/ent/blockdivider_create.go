// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockdivider"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockDividerCreate is the builder for creating a BlockDivider entity.
type BlockDividerCreate struct {
	config
	mutation *BlockDividerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockDividerCreate) SetInternalName(v string) *BlockDividerCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetHeight sets the "height" field.
func (_c *BlockDividerCreate) SetHeight(v int) *BlockDividerCreate {
	_c.mutation.SetHeight(v)
	return _c
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (_c *BlockDividerCreate) SetNillableHeight(v *int) *BlockDividerCreate {
	if v != nil {
		_c.SetHeight(*v)
	}
	return _c
}

// SetColor sets the "color" field.
func (_c *BlockDividerCreate) SetColor(v string) *BlockDividerCreate {
	_c.mutation.SetColor(v)
	return _c
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_c *BlockDividerCreate) SetNillableColor(v *string) *BlockDividerCreate {
	if v != nil {
		_c.SetColor(*v)
	}
	return _c
}

// SetStyle sets the "style" field.
func (_c *BlockDividerCreate) SetStyle(v string) *BlockDividerCreate {
	_c.mutation.SetStyle(v)
	return _c
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (_c *BlockDividerCreate) SetNillableStyle(v *string) *BlockDividerCreate {
	if v != nil {
		_c.SetStyle(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockDividerCreate) SetCreatedAt(v time.Time) *BlockDividerCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockDividerCreate) SetNillableCreatedAt(v *time.Time) *BlockDividerCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockDividerCreate) SetUpdatedAt(v time.Time) *BlockDividerCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockDividerCreate) SetNillableUpdatedAt(v *time.Time) *BlockDividerCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockDividerCreate) SetContentBlockID(id int) *BlockDividerCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockDividerCreate) SetContentBlock(v *ContentBlock) *BlockDividerCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockDividerMutation object of the builder.
func (_c *BlockDividerCreate) Mutation() *BlockDividerMutation {
	return _c.mutation
}

// Save creates the BlockDivider in the database.
func (_c *BlockDividerCreate) Save(ctx context.Context) (*BlockDivider, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockDividerCreate) SaveX(ctx context.Context) *BlockDivider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockDividerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockDividerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockDividerCreate) defaults() {
	if _, ok := _c.mutation.Height(); !ok {
		v := blockdivider.DefaultHeight
		_c.mutation.SetHeight(v)
	}
	if _, ok := _c.mutation.Style(); !ok {
		v := blockdivider.DefaultStyle
		_c.mutation.SetStyle(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockdivider.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockdivider.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockDividerCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockDivider.internal_name"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockDivider.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockDivider.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockDivider.content_block"`)}
	}
	return nil
}

func (_c *BlockDividerCreate) sqlSave(ctx context.Context) (*BlockDivider, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockDividerCreate) createSpec() (*BlockDivider, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockDivider{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockdivider.Table, sqlgraph.NewFieldSpec(blockdivider.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockdivider.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Height(); ok {
		_spec.SetField(blockdivider.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := _c.mutation.Color(); ok {
		_spec.SetField(blockdivider.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := _c.mutation.Style(); ok {
		_spec.SetField(blockdivider.FieldStyle, field.TypeString, value)
		_node.Style = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockdivider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockdivider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdivider.ContentBlockTable,
			Columns: []string{blockdivider.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_divider = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockDivider.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockDividerUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockDividerCreate) OnConflict(opts ...sql.ConflictOption) *BlockDividerUpsertOne {
	_c.conflict = opts
	return &BlockDividerUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockDividerCreate) OnConflictColumns(columns ...string) *BlockDividerUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockDividerUpsertOne{
		create: _c,
	}
}

type (
	// BlockDividerUpsertOne is the builder for "upsert"-ing
	//  one BlockDivider node.
	BlockDividerUpsertOne struct {
		create *BlockDividerCreate
	}

	// BlockDividerUpsert is the "OnConflict" setter.
	BlockDividerUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockDividerUpsert) SetInternalName(v string) *BlockDividerUpsert {
	u.Set(blockdivider.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDividerUpsert) UpdateInternalName() *BlockDividerUpsert {
	u.SetExcluded(blockdivider.FieldInternalName)
	return u
}

// SetHeight sets the "height" field.
func (u *BlockDividerUpsert) SetHeight(v int) *BlockDividerUpsert {
	u.Set(blockdivider.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockDividerUpsert) UpdateHeight() *BlockDividerUpsert {
	u.SetExcluded(blockdivider.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *BlockDividerUpsert) AddHeight(v int) *BlockDividerUpsert {
	u.Add(blockdivider.FieldHeight, v)
	return u
}

// ClearHeight clears the value of the "height" field.
func (u *BlockDividerUpsert) ClearHeight() *BlockDividerUpsert {
	u.SetNull(blockdivider.FieldHeight)
	return u
}

// SetColor sets the "color" field.
func (u *BlockDividerUpsert) SetColor(v string) *BlockDividerUpsert {
	u.Set(blockdivider.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *BlockDividerUpsert) UpdateColor() *BlockDividerUpsert {
	u.SetExcluded(blockdivider.FieldColor)
	return u
}

// ClearColor clears the value of the "color" field.
func (u *BlockDividerUpsert) ClearColor() *BlockDividerUpsert {
	u.SetNull(blockdivider.FieldColor)
	return u
}

// SetStyle sets the "style" field.
func (u *BlockDividerUpsert) SetStyle(v string) *BlockDividerUpsert {
	u.Set(blockdivider.FieldStyle, v)
	return u
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *BlockDividerUpsert) UpdateStyle() *BlockDividerUpsert {
	u.SetExcluded(blockdivider.FieldStyle)
	return u
}

// ClearStyle clears the value of the "style" field.
func (u *BlockDividerUpsert) ClearStyle() *BlockDividerUpsert {
	u.SetNull(blockdivider.FieldStyle)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDividerUpsert) SetUpdatedAt(v time.Time) *BlockDividerUpsert {
	u.Set(blockdivider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDividerUpsert) UpdateUpdatedAt() *BlockDividerUpsert {
	u.SetExcluded(blockdivider.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockDividerUpsertOne) UpdateNewValues() *BlockDividerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockdivider.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockDividerUpsertOne) Ignore() *BlockDividerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockDividerUpsertOne) DoNothing() *BlockDividerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockDividerCreate.OnConflict
// documentation for more info.
func (u *BlockDividerUpsertOne) Update(set func(*BlockDividerUpsert)) *BlockDividerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockDividerUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockDividerUpsertOne) SetInternalName(v string) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDividerUpsertOne) UpdateInternalName() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateInternalName()
	})
}

// SetHeight sets the "height" field.
func (u *BlockDividerUpsertOne) SetHeight(v int) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BlockDividerUpsertOne) AddHeight(v int) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockDividerUpsertOne) UpdateHeight() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *BlockDividerUpsertOne) ClearHeight() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearHeight()
	})
}

// SetColor sets the "color" field.
func (u *BlockDividerUpsertOne) SetColor(v string) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *BlockDividerUpsertOne) UpdateColor() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *BlockDividerUpsertOne) ClearColor() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearColor()
	})
}

// SetStyle sets the "style" field.
func (u *BlockDividerUpsertOne) SetStyle(v string) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetStyle(v)
	})
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *BlockDividerUpsertOne) UpdateStyle() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateStyle()
	})
}

// ClearStyle clears the value of the "style" field.
func (u *BlockDividerUpsertOne) ClearStyle() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearStyle()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDividerUpsertOne) SetUpdatedAt(v time.Time) *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDividerUpsertOne) UpdateUpdatedAt() *BlockDividerUpsertOne {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockDividerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockDividerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockDividerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockDividerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockDividerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockDividerCreateBulk is the builder for creating many BlockDivider entities in bulk.
type BlockDividerCreateBulk struct {
	config
	err      error
	builders []*BlockDividerCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockDivider entities in the database.
func (_c *BlockDividerCreateBulk) Save(ctx context.Context) ([]*BlockDivider, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockDivider, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockDividerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockDividerCreateBulk) SaveX(ctx context.Context) []*BlockDivider {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockDividerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockDividerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockDivider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockDividerUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockDividerCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockDividerUpsertBulk {
	_c.conflict = opts
	return &BlockDividerUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockDividerCreateBulk) OnConflictColumns(columns ...string) *BlockDividerUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockDividerUpsertBulk{
		create: _c,
	}
}

// BlockDividerUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockDivider nodes.
type BlockDividerUpsertBulk struct {
	create *BlockDividerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockDividerUpsertBulk) UpdateNewValues() *BlockDividerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockdivider.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockDivider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockDividerUpsertBulk) Ignore() *BlockDividerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockDividerUpsertBulk) DoNothing() *BlockDividerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockDividerCreateBulk.OnConflict
// documentation for more info.
func (u *BlockDividerUpsertBulk) Update(set func(*BlockDividerUpsert)) *BlockDividerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockDividerUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockDividerUpsertBulk) SetInternalName(v string) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDividerUpsertBulk) UpdateInternalName() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateInternalName()
	})
}

// SetHeight sets the "height" field.
func (u *BlockDividerUpsertBulk) SetHeight(v int) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BlockDividerUpsertBulk) AddHeight(v int) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockDividerUpsertBulk) UpdateHeight() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *BlockDividerUpsertBulk) ClearHeight() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearHeight()
	})
}

// SetColor sets the "color" field.
func (u *BlockDividerUpsertBulk) SetColor(v string) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *BlockDividerUpsertBulk) UpdateColor() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateColor()
	})
}

// ClearColor clears the value of the "color" field.
func (u *BlockDividerUpsertBulk) ClearColor() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearColor()
	})
}

// SetStyle sets the "style" field.
func (u *BlockDividerUpsertBulk) SetStyle(v string) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetStyle(v)
	})
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *BlockDividerUpsertBulk) UpdateStyle() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateStyle()
	})
}

// ClearStyle clears the value of the "style" field.
func (u *BlockDividerUpsertBulk) ClearStyle() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.ClearStyle()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDividerUpsertBulk) SetUpdatedAt(v time.Time) *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDividerUpsertBulk) UpdateUpdatedAt() *BlockDividerUpsertBulk {
	return u.Update(func(s *BlockDividerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockDividerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockDividerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockDividerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockDividerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
