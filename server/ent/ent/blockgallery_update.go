// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/galleryimage"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockGalleryUpdate is the builder for updating BlockGallery entities.
type BlockGalleryUpdate struct {
	config
	hooks    []Hook
	mutation *BlockGalleryMutation
}

// Where appends a list predicates to the BlockGalleryUpdate builder.
func (_u *BlockGalleryUpdate) Where(ps ...predicate.BlockGallery) *BlockGalleryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockGalleryUpdate) SetInternalName(v string) *BlockGalleryUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockGalleryUpdate) SetNillableInternalName(v *string) *BlockGalleryUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockGalleryUpdate) SetTitle(v map[string]string) *BlockGalleryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockGalleryUpdate) ClearTitle() *BlockGalleryUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockGalleryUpdate) SetDescription(v map[string]string) *BlockGalleryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockGalleryUpdate) ClearDescription() *BlockGalleryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockGalleryUpdate) SetLayout(v blockgallery.Layout) *BlockGalleryUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockGalleryUpdate) SetNillableLayout(v *blockgallery.Layout) *BlockGalleryUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetColumns sets the "columns" field.
func (_u *BlockGalleryUpdate) SetColumns(v int) *BlockGalleryUpdate {
	_u.mutation.ResetColumns()
	_u.mutation.SetColumns(v)
	return _u
}

// SetNillableColumns sets the "columns" field if the given value is not nil.
func (_u *BlockGalleryUpdate) SetNillableColumns(v *int) *BlockGalleryUpdate {
	if v != nil {
		_u.SetColumns(*v)
	}
	return _u
}

// AddColumns adds value to the "columns" field.
func (_u *BlockGalleryUpdate) AddColumns(v int) *BlockGalleryUpdate {
	_u.mutation.AddColumns(v)
	return _u
}

// SetSpacing sets the "spacing" field.
func (_u *BlockGalleryUpdate) SetSpacing(v string) *BlockGalleryUpdate {
	_u.mutation.SetSpacing(v)
	return _u
}

// SetNillableSpacing sets the "spacing" field if the given value is not nil.
func (_u *BlockGalleryUpdate) SetNillableSpacing(v *string) *BlockGalleryUpdate {
	if v != nil {
		_u.SetSpacing(*v)
	}
	return _u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_u *BlockGalleryUpdate) SetAspectRatio(v string) *BlockGalleryUpdate {
	_u.mutation.SetAspectRatio(v)
	return _u
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_u *BlockGalleryUpdate) SetNillableAspectRatio(v *string) *BlockGalleryUpdate {
	if v != nil {
		_u.SetAspectRatio(*v)
	}
	return _u
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (_u *BlockGalleryUpdate) ClearAspectRatio() *BlockGalleryUpdate {
	_u.mutation.ClearAspectRatio()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockGalleryUpdate) SetUpdatedAt(v time.Time) *BlockGalleryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockGalleryUpdate) SetContentBlockID(id int) *BlockGalleryUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockGalleryUpdate) SetContentBlock(v *ContentBlock) *BlockGalleryUpdate {
	return _u.SetContentBlockID(v.ID)
}

// AddImageIDs adds the "images" edge to the GalleryImage entity by IDs.
func (_u *BlockGalleryUpdate) AddImageIDs(ids ...int) *BlockGalleryUpdate {
	_u.mutation.AddImageIDs(ids...)
	return _u
}

// AddImages adds the "images" edges to the GalleryImage entity.
func (_u *BlockGalleryUpdate) AddImages(v ...*GalleryImage) *BlockGalleryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImageIDs(ids...)
}

// Mutation returns the BlockGalleryMutation object of the builder.
func (_u *BlockGalleryUpdate) Mutation() *BlockGalleryMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockGalleryUpdate) ClearContentBlock() *BlockGalleryUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearImages clears all "images" edges to the GalleryImage entity.
func (_u *BlockGalleryUpdate) ClearImages() *BlockGalleryUpdate {
	_u.mutation.ClearImages()
	return _u
}

// RemoveImageIDs removes the "images" edge to GalleryImage entities by IDs.
func (_u *BlockGalleryUpdate) RemoveImageIDs(ids ...int) *BlockGalleryUpdate {
	_u.mutation.RemoveImageIDs(ids...)
	return _u
}

// RemoveImages removes "images" edges to GalleryImage entities.
func (_u *BlockGalleryUpdate) RemoveImages(v ...*GalleryImage) *BlockGalleryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockGalleryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockGalleryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockGalleryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockGalleryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockGalleryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockgallery.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockGalleryUpdate) check() error {
	if v, ok := _u.mutation.Layout(); ok {
		if err := blockgallery.LayoutValidator(v); err != nil {
			return &ValidationError{Name: "layout", err: fmt.Errorf(`ent: validator failed for field "BlockGallery.layout": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockGallery.content_block"`)
	}
	return nil
}

func (_u *BlockGalleryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockgallery.Table, blockgallery.Columns, sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockgallery.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockgallery.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockgallery.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockgallery.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockgallery.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blockgallery.FieldLayout, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Columns(); ok {
		_spec.SetField(blockgallery.FieldColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedColumns(); ok {
		_spec.AddField(blockgallery.FieldColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Spacing(); ok {
		_spec.SetField(blockgallery.FieldSpacing, field.TypeString, value)
	}
	if value, ok := _u.mutation.AspectRatio(); ok {
		_spec.SetField(blockgallery.FieldAspectRatio, field.TypeString, value)
	}
	if _u.mutation.AspectRatioCleared() {
		_spec.ClearField(blockgallery.FieldAspectRatio, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockgallery.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImagesIDs(); len(nodes) > 0 && !_u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockgallery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockGalleryUpdateOne is the builder for updating a single BlockGallery entity.
type BlockGalleryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockGalleryMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockGalleryUpdateOne) SetInternalName(v string) *BlockGalleryUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockGalleryUpdateOne) SetNillableInternalName(v *string) *BlockGalleryUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockGalleryUpdateOne) SetTitle(v map[string]string) *BlockGalleryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockGalleryUpdateOne) ClearTitle() *BlockGalleryUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockGalleryUpdateOne) SetDescription(v map[string]string) *BlockGalleryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockGalleryUpdateOne) ClearDescription() *BlockGalleryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockGalleryUpdateOne) SetLayout(v blockgallery.Layout) *BlockGalleryUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockGalleryUpdateOne) SetNillableLayout(v *blockgallery.Layout) *BlockGalleryUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetColumns sets the "columns" field.
func (_u *BlockGalleryUpdateOne) SetColumns(v int) *BlockGalleryUpdateOne {
	_u.mutation.ResetColumns()
	_u.mutation.SetColumns(v)
	return _u
}

// SetNillableColumns sets the "columns" field if the given value is not nil.
func (_u *BlockGalleryUpdateOne) SetNillableColumns(v *int) *BlockGalleryUpdateOne {
	if v != nil {
		_u.SetColumns(*v)
	}
	return _u
}

// AddColumns adds value to the "columns" field.
func (_u *BlockGalleryUpdateOne) AddColumns(v int) *BlockGalleryUpdateOne {
	_u.mutation.AddColumns(v)
	return _u
}

// SetSpacing sets the "spacing" field.
func (_u *BlockGalleryUpdateOne) SetSpacing(v string) *BlockGalleryUpdateOne {
	_u.mutation.SetSpacing(v)
	return _u
}

// SetNillableSpacing sets the "spacing" field if the given value is not nil.
func (_u *BlockGalleryUpdateOne) SetNillableSpacing(v *string) *BlockGalleryUpdateOne {
	if v != nil {
		_u.SetSpacing(*v)
	}
	return _u
}

// SetAspectRatio sets the "aspect_ratio" field.
func (_u *BlockGalleryUpdateOne) SetAspectRatio(v string) *BlockGalleryUpdateOne {
	_u.mutation.SetAspectRatio(v)
	return _u
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (_u *BlockGalleryUpdateOne) SetNillableAspectRatio(v *string) *BlockGalleryUpdateOne {
	if v != nil {
		_u.SetAspectRatio(*v)
	}
	return _u
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (_u *BlockGalleryUpdateOne) ClearAspectRatio() *BlockGalleryUpdateOne {
	_u.mutation.ClearAspectRatio()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockGalleryUpdateOne) SetUpdatedAt(v time.Time) *BlockGalleryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockGalleryUpdateOne) SetContentBlockID(id int) *BlockGalleryUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockGalleryUpdateOne) SetContentBlock(v *ContentBlock) *BlockGalleryUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// AddImageIDs adds the "images" edge to the GalleryImage entity by IDs.
func (_u *BlockGalleryUpdateOne) AddImageIDs(ids ...int) *BlockGalleryUpdateOne {
	_u.mutation.AddImageIDs(ids...)
	return _u
}

// AddImages adds the "images" edges to the GalleryImage entity.
func (_u *BlockGalleryUpdateOne) AddImages(v ...*GalleryImage) *BlockGalleryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImageIDs(ids...)
}

// Mutation returns the BlockGalleryMutation object of the builder.
func (_u *BlockGalleryUpdateOne) Mutation() *BlockGalleryMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockGalleryUpdateOne) ClearContentBlock() *BlockGalleryUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// ClearImages clears all "images" edges to the GalleryImage entity.
func (_u *BlockGalleryUpdateOne) ClearImages() *BlockGalleryUpdateOne {
	_u.mutation.ClearImages()
	return _u
}

// RemoveImageIDs removes the "images" edge to GalleryImage entities by IDs.
func (_u *BlockGalleryUpdateOne) RemoveImageIDs(ids ...int) *BlockGalleryUpdateOne {
	_u.mutation.RemoveImageIDs(ids...)
	return _u
}

// RemoveImages removes "images" edges to GalleryImage entities.
func (_u *BlockGalleryUpdateOne) RemoveImages(v ...*GalleryImage) *BlockGalleryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the BlockGalleryUpdate builder.
func (_u *BlockGalleryUpdateOne) Where(ps ...predicate.BlockGallery) *BlockGalleryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockGalleryUpdateOne) Select(field string, fields ...string) *BlockGalleryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockGallery entity.
func (_u *BlockGalleryUpdateOne) Save(ctx context.Context) (*BlockGallery, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockGalleryUpdateOne) SaveX(ctx context.Context) *BlockGallery {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockGalleryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockGalleryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockGalleryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockgallery.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockGalleryUpdateOne) check() error {
	if v, ok := _u.mutation.Layout(); ok {
		if err := blockgallery.LayoutValidator(v); err != nil {
			return &ValidationError{Name: "layout", err: fmt.Errorf(`ent: validator failed for field "BlockGallery.layout": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockGallery.content_block"`)
	}
	return nil
}

func (_u *BlockGalleryUpdateOne) sqlSave(ctx context.Context) (_node *BlockGallery, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockgallery.Table, blockgallery.Columns, sqlgraph.NewFieldSpec(blockgallery.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockGallery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockgallery.FieldID)
		for _, f := range fields {
			if !blockgallery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockgallery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockgallery.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockgallery.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blockgallery.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockgallery.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockgallery.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blockgallery.FieldLayout, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Columns(); ok {
		_spec.SetField(blockgallery.FieldColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedColumns(); ok {
		_spec.AddField(blockgallery.FieldColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Spacing(); ok {
		_spec.SetField(blockgallery.FieldSpacing, field.TypeString, value)
	}
	if value, ok := _u.mutation.AspectRatio(); ok {
		_spec.SetField(blockgallery.FieldAspectRatio, field.TypeString, value)
	}
	if _u.mutation.AspectRatioCleared() {
		_spec.ClearField(blockgallery.FieldAspectRatio, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockgallery.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImagesIDs(); len(nodes) > 0 && !_u.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(galleryimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockGallery{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockgallery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
