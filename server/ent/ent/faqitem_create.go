// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/faqitem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FaqItemCreate is the builder for creating a FaqItem entity.
type FaqItemCreate struct {
	config
	mutation *FaqItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrder sets the "order" field.
func (_c *FaqItemCreate) SetOrder(v int) *FaqItemCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetQuestion sets the "question" field.
func (_c *FaqItemCreate) SetQuestion(v map[string]string) *FaqItemCreate {
	_c.mutation.SetQuestion(v)
	return _c
}

// SetAnswer sets the "answer" field.
func (_c *FaqItemCreate) SetAnswer(v map[string]string) *FaqItemCreate {
	_c.mutation.SetAnswer(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *FaqItemCreate) SetCreatedAt(v time.Time) *FaqItemCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FaqItemCreate) SetNillableCreatedAt(v *time.Time) *FaqItemCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FaqItemCreate) SetUpdatedAt(v time.Time) *FaqItemCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FaqItemCreate) SetNillableUpdatedAt(v *time.Time) *FaqItemCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetBlockID sets the "block" edge to the BlockFaq entity by ID.
func (_c *FaqItemCreate) SetBlockID(id int) *FaqItemCreate {
	_c.mutation.SetBlockID(id)
	return _c
}

// SetBlock sets the "block" edge to the BlockFaq entity.
func (_c *FaqItemCreate) SetBlock(v *BlockFaq) *FaqItemCreate {
	return _c.SetBlockID(v.ID)
}

// Mutation returns the FaqItemMutation object of the builder.
func (_c *FaqItemCreate) Mutation() *FaqItemMutation {
	return _c.mutation
}

// Save creates the FaqItem in the database.
func (_c *FaqItemCreate) Save(ctx context.Context) (*FaqItem, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FaqItemCreate) SaveX(ctx context.Context) *FaqItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FaqItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FaqItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FaqItemCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := faqitem.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := faqitem.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FaqItemCreate) check() error {
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "FaqItem.order"`)}
	}
	if _, ok := _c.mutation.Question(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required field "FaqItem.question"`)}
	}
	if _, ok := _c.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "FaqItem.answer"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FaqItem.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FaqItem.updated_at"`)}
	}
	if len(_c.mutation.BlockIDs()) == 0 {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required edge "FaqItem.block"`)}
	}
	return nil
}

func (_c *FaqItemCreate) sqlSave(ctx context.Context) (*FaqItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FaqItemCreate) createSpec() (*FaqItem, *sqlgraph.CreateSpec) {
	var (
		_node = &FaqItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(faqitem.Table, sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(faqitem.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Question(); ok {
		_spec.SetField(faqitem.FieldQuestion, field.TypeJSON, value)
		_node.Question = value
	}
	if value, ok := _c.mutation.Answer(); ok {
		_spec.SetField(faqitem.FieldAnswer, field.TypeJSON, value)
		_node.Answer = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(faqitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(faqitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.block_faq_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FaqItem.Create().
//		SetOrder(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaqItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *FaqItemCreate) OnConflict(opts ...sql.ConflictOption) *FaqItemUpsertOne {
	_c.conflict = opts
	return &FaqItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FaqItemCreate) OnConflictColumns(columns ...string) *FaqItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FaqItemUpsertOne{
		create: _c,
	}
}

type (
	// FaqItemUpsertOne is the builder for "upsert"-ing
	//  one FaqItem node.
	FaqItemUpsertOne struct {
		create *FaqItemCreate
	}

	// FaqItemUpsert is the "OnConflict" setter.
	FaqItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrder sets the "order" field.
func (u *FaqItemUpsert) SetOrder(v int) *FaqItemUpsert {
	u.Set(faqitem.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *FaqItemUpsert) UpdateOrder() *FaqItemUpsert {
	u.SetExcluded(faqitem.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *FaqItemUpsert) AddOrder(v int) *FaqItemUpsert {
	u.Add(faqitem.FieldOrder, v)
	return u
}

// SetQuestion sets the "question" field.
func (u *FaqItemUpsert) SetQuestion(v map[string]string) *FaqItemUpsert {
	u.Set(faqitem.FieldQuestion, v)
	return u
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *FaqItemUpsert) UpdateQuestion() *FaqItemUpsert {
	u.SetExcluded(faqitem.FieldQuestion)
	return u
}

// SetAnswer sets the "answer" field.
func (u *FaqItemUpsert) SetAnswer(v map[string]string) *FaqItemUpsert {
	u.Set(faqitem.FieldAnswer, v)
	return u
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *FaqItemUpsert) UpdateAnswer() *FaqItemUpsert {
	u.SetExcluded(faqitem.FieldAnswer)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FaqItemUpsert) SetUpdatedAt(v time.Time) *FaqItemUpsert {
	u.Set(faqitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaqItemUpsert) UpdateUpdatedAt() *FaqItemUpsert {
	u.SetExcluded(faqitem.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaqItemUpsertOne) UpdateNewValues() *FaqItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(faqitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FaqItemUpsertOne) Ignore() *FaqItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaqItemUpsertOne) DoNothing() *FaqItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaqItemCreate.OnConflict
// documentation for more info.
func (u *FaqItemUpsertOne) Update(set func(*FaqItemUpsert)) *FaqItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaqItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *FaqItemUpsertOne) SetOrder(v int) *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *FaqItemUpsertOne) AddOrder(v int) *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *FaqItemUpsertOne) UpdateOrder() *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateOrder()
	})
}

// SetQuestion sets the "question" field.
func (u *FaqItemUpsertOne) SetQuestion(v map[string]string) *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetQuestion(v)
	})
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *FaqItemUpsertOne) UpdateQuestion() *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateQuestion()
	})
}

// SetAnswer sets the "answer" field.
func (u *FaqItemUpsertOne) SetAnswer(v map[string]string) *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *FaqItemUpsertOne) UpdateAnswer() *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateAnswer()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FaqItemUpsertOne) SetUpdatedAt(v time.Time) *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaqItemUpsertOne) UpdateUpdatedAt() *FaqItemUpsertOne {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FaqItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaqItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaqItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FaqItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FaqItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FaqItemCreateBulk is the builder for creating many FaqItem entities in bulk.
type FaqItemCreateBulk struct {
	config
	err      error
	builders []*FaqItemCreate
	conflict []sql.ConflictOption
}

// Save creates the FaqItem entities in the database.
func (_c *FaqItemCreateBulk) Save(ctx context.Context) ([]*FaqItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*FaqItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FaqItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FaqItemCreateBulk) SaveX(ctx context.Context) []*FaqItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FaqItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FaqItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FaqItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaqItemUpsert) {
//			SetOrder(v+v).
//		}).
//		Exec(ctx)
func (_c *FaqItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *FaqItemUpsertBulk {
	_c.conflict = opts
	return &FaqItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FaqItemCreateBulk) OnConflictColumns(columns ...string) *FaqItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FaqItemUpsertBulk{
		create: _c,
	}
}

// FaqItemUpsertBulk is the builder for "upsert"-ing
// a bulk of FaqItem nodes.
type FaqItemUpsertBulk struct {
	create *FaqItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaqItemUpsertBulk) UpdateNewValues() *FaqItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(faqitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FaqItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FaqItemUpsertBulk) Ignore() *FaqItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaqItemUpsertBulk) DoNothing() *FaqItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaqItemCreateBulk.OnConflict
// documentation for more info.
func (u *FaqItemUpsertBulk) Update(set func(*FaqItemUpsert)) *FaqItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaqItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrder sets the "order" field.
func (u *FaqItemUpsertBulk) SetOrder(v int) *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *FaqItemUpsertBulk) AddOrder(v int) *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *FaqItemUpsertBulk) UpdateOrder() *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateOrder()
	})
}

// SetQuestion sets the "question" field.
func (u *FaqItemUpsertBulk) SetQuestion(v map[string]string) *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetQuestion(v)
	})
}

// UpdateQuestion sets the "question" field to the value that was provided on create.
func (u *FaqItemUpsertBulk) UpdateQuestion() *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateQuestion()
	})
}

// SetAnswer sets the "answer" field.
func (u *FaqItemUpsertBulk) SetAnswer(v map[string]string) *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *FaqItemUpsertBulk) UpdateAnswer() *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateAnswer()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FaqItemUpsertBulk) SetUpdatedAt(v time.Time) *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaqItemUpsertBulk) UpdateUpdatedAt() *FaqItemUpsertBulk {
	return u.Update(func(s *FaqItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FaqItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FaqItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaqItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaqItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
