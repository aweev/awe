// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"awe/ent/ent/organization"
	"awe/ent/ent/program"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *GrantCreate) SetName(v string) *GrantCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetGrantAmount sets the "grant_amount" field.
func (_c *GrantCreate) SetGrantAmount(v float64) *GrantCreate {
	_c.mutation.SetGrantAmount(v)
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *GrantCreate) SetStartDate(v time.Time) *GrantCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *GrantCreate) SetEndDate(v time.Time) *GrantCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *GrantCreate) SetStatus(v grant.Status) *GrantCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *GrantCreate) SetNillableStatus(v *grant.Status) *GrantCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetGoals sets the "goals" field.
func (_c *GrantCreate) SetGoals(v []string) *GrantCreate {
	_c.mutation.SetGoals(v)
	return _c
}

// SetGrantReference sets the "grant_reference" field.
func (_c *GrantCreate) SetGrantReference(v string) *GrantCreate {
	_c.mutation.SetGrantReference(v)
	return _c
}

// SetNillableGrantReference sets the "grant_reference" field if the given value is not nil.
func (_c *GrantCreate) SetNillableGrantReference(v *string) *GrantCreate {
	if v != nil {
		_c.SetGrantReference(*v)
	}
	return _c
}

// SetContactPerson sets the "contact_person" field.
func (_c *GrantCreate) SetContactPerson(v string) *GrantCreate {
	_c.mutation.SetContactPerson(v)
	return _c
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (_c *GrantCreate) SetNillableContactPerson(v *string) *GrantCreate {
	if v != nil {
		_c.SetContactPerson(*v)
	}
	return _c
}

// SetContactEmail sets the "contact_email" field.
func (_c *GrantCreate) SetContactEmail(v string) *GrantCreate {
	_c.mutation.SetContactEmail(v)
	return _c
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_c *GrantCreate) SetNillableContactEmail(v *string) *GrantCreate {
	if v != nil {
		_c.SetContactEmail(*v)
	}
	return _c
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (_c *GrantCreate) SetRenewalEligible(v bool) *GrantCreate {
	_c.mutation.SetRenewalEligible(v)
	return _c
}

// SetNillableRenewalEligible sets the "renewal_eligible" field if the given value is not nil.
func (_c *GrantCreate) SetNillableRenewalEligible(v *bool) *GrantCreate {
	if v != nil {
		_c.SetRenewalEligible(*v)
	}
	return _c
}

// SetNextReviewDate sets the "next_review_date" field.
func (_c *GrantCreate) SetNextReviewDate(v time.Time) *GrantCreate {
	_c.mutation.SetNextReviewDate(v)
	return _c
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_c *GrantCreate) SetNillableNextReviewDate(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetNextReviewDate(*v)
	}
	return _c
}

// SetRequiresMatching sets the "requires_matching" field.
func (_c *GrantCreate) SetRequiresMatching(v bool) *GrantCreate {
	_c.mutation.SetRequiresMatching(v)
	return _c
}

// SetNillableRequiresMatching sets the "requires_matching" field if the given value is not nil.
func (_c *GrantCreate) SetNillableRequiresMatching(v *bool) *GrantCreate {
	if v != nil {
		_c.SetRequiresMatching(*v)
	}
	return _c
}

// SetMatchingAmount sets the "matching_amount" field.
func (_c *GrantCreate) SetMatchingAmount(v float64) *GrantCreate {
	_c.mutation.SetMatchingAmount(v)
	return _c
}

// SetNillableMatchingAmount sets the "matching_amount" field if the given value is not nil.
func (_c *GrantCreate) SetNillableMatchingAmount(v *float64) *GrantCreate {
	if v != nil {
		_c.SetMatchingAmount(*v)
	}
	return _c
}

// SetRestrictions sets the "restrictions" field.
func (_c *GrantCreate) SetRestrictions(v []string) *GrantCreate {
	_c.mutation.SetRestrictions(v)
	return _c
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (_c *GrantCreate) SetReportingSchedule(v map[string]string) *GrantCreate {
	_c.mutation.SetReportingSchedule(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GrantCreate) SetCreatedAt(v time.Time) *GrantCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableCreatedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GrantCreate) SetUpdatedAt(v time.Time) *GrantCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableUpdatedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_c *GrantCreate) SetOrganizationID(id int) *GrantCreate {
	_c.mutation.SetOrganizationID(id)
	return _c
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_c *GrantCreate) SetOrganization(v *Organization) *GrantCreate {
	return _c.SetOrganizationID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *GrantCreate) SetProgramID(id int) *GrantCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *GrantCreate) SetProgram(v *Program) *GrantCreate {
	return _c.SetProgramID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GrantReport entity by IDs.
func (_c *GrantCreate) AddReportIDs(ids ...int) *GrantCreate {
	_c.mutation.AddReportIDs(ids...)
	return _c
}

// AddReports adds the "reports" edges to the GrantReport entity.
func (_c *GrantCreate) AddReports(v ...*GrantReport) *GrantCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReportIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_c *GrantCreate) Mutation() *GrantMutation {
	return _c.mutation
}

// Save creates the Grant in the database.
func (_c *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GrantCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := grant.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.RenewalEligible(); !ok {
		v := grant.DefaultRenewalEligible
		_c.mutation.SetRenewalEligible(v)
	}
	if _, ok := _c.mutation.RequiresMatching(); !ok {
		v := grant.DefaultRequiresMatching
		_c.mutation.SetRequiresMatching(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := grant.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := grant.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GrantCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Grant.name"`)}
	}
	if _, ok := _c.mutation.GrantAmount(); !ok {
		return &ValidationError{Name: "grant_amount", err: errors.New(`ent: missing required field "Grant.grant_amount"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Grant.start_date"`)}
	}
	if _, ok := _c.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Grant.end_date"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Grant.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := grant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grant.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "Grant.goals"`)}
	}
	if _, ok := _c.mutation.RenewalEligible(); !ok {
		return &ValidationError{Name: "renewal_eligible", err: errors.New(`ent: missing required field "Grant.renewal_eligible"`)}
	}
	if _, ok := _c.mutation.RequiresMatching(); !ok {
		return &ValidationError{Name: "requires_matching", err: errors.New(`ent: missing required field "Grant.requires_matching"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Grant.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Grant.updated_at"`)}
	}
	if len(_c.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Grant.organization"`)}
	}
	if len(_c.mutation.ProgramIDs()) == 0 {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "Grant.program"`)}
	}
	return nil
}

func (_c *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(grant.Table, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(grant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GrantAmount(); ok {
		_spec.SetField(grant.FieldGrantAmount, field.TypeFloat64, value)
		_node.GrantAmount = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(grant.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(grant.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(grant.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Goals(); ok {
		_spec.SetField(grant.FieldGoals, field.TypeJSON, value)
		_node.Goals = value
	}
	if value, ok := _c.mutation.GrantReference(); ok {
		_spec.SetField(grant.FieldGrantReference, field.TypeString, value)
		_node.GrantReference = value
	}
	if value, ok := _c.mutation.ContactPerson(); ok {
		_spec.SetField(grant.FieldContactPerson, field.TypeString, value)
		_node.ContactPerson = value
	}
	if value, ok := _c.mutation.ContactEmail(); ok {
		_spec.SetField(grant.FieldContactEmail, field.TypeString, value)
		_node.ContactEmail = value
	}
	if value, ok := _c.mutation.RenewalEligible(); ok {
		_spec.SetField(grant.FieldRenewalEligible, field.TypeBool, value)
		_node.RenewalEligible = value
	}
	if value, ok := _c.mutation.NextReviewDate(); ok {
		_spec.SetField(grant.FieldNextReviewDate, field.TypeTime, value)
		_node.NextReviewDate = value
	}
	if value, ok := _c.mutation.RequiresMatching(); ok {
		_spec.SetField(grant.FieldRequiresMatching, field.TypeBool, value)
		_node.RequiresMatching = value
	}
	if value, ok := _c.mutation.MatchingAmount(); ok {
		_spec.SetField(grant.FieldMatchingAmount, field.TypeFloat64, value)
		_node.MatchingAmount = value
	}
	if value, ok := _c.mutation.Restrictions(); ok {
		_spec.SetField(grant.FieldRestrictions, field.TypeJSON, value)
		_node.Restrictions = value
	}
	if value, ok := _c.mutation.ReportingSchedule(); ok {
		_spec.SetField(grant.FieldReportingSchedule, field.TypeJSON, value)
		_node.ReportingSchedule = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(grant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(grant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_grants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_grants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Grant.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantCreate) OnConflict(opts ...sql.ConflictOption) *GrantUpsertOne {
	_c.conflict = opts
	return &GrantUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantCreate) OnConflictColumns(columns ...string) *GrantUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantUpsertOne{
		create: _c,
	}
}

type (
	// GrantUpsertOne is the builder for "upsert"-ing
	//  one Grant node.
	GrantUpsertOne struct {
		create *GrantCreate
	}

	// GrantUpsert is the "OnConflict" setter.
	GrantUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *GrantUpsert) SetName(v string) *GrantUpsert {
	u.Set(grant.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GrantUpsert) UpdateName() *GrantUpsert {
	u.SetExcluded(grant.FieldName)
	return u
}

// SetGrantAmount sets the "grant_amount" field.
func (u *GrantUpsert) SetGrantAmount(v float64) *GrantUpsert {
	u.Set(grant.FieldGrantAmount, v)
	return u
}

// UpdateGrantAmount sets the "grant_amount" field to the value that was provided on create.
func (u *GrantUpsert) UpdateGrantAmount() *GrantUpsert {
	u.SetExcluded(grant.FieldGrantAmount)
	return u
}

// AddGrantAmount adds v to the "grant_amount" field.
func (u *GrantUpsert) AddGrantAmount(v float64) *GrantUpsert {
	u.Add(grant.FieldGrantAmount, v)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *GrantUpsert) SetStartDate(v time.Time) *GrantUpsert {
	u.Set(grant.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *GrantUpsert) UpdateStartDate() *GrantUpsert {
	u.SetExcluded(grant.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *GrantUpsert) SetEndDate(v time.Time) *GrantUpsert {
	u.Set(grant.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *GrantUpsert) UpdateEndDate() *GrantUpsert {
	u.SetExcluded(grant.FieldEndDate)
	return u
}

// SetStatus sets the "status" field.
func (u *GrantUpsert) SetStatus(v grant.Status) *GrantUpsert {
	u.Set(grant.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantUpsert) UpdateStatus() *GrantUpsert {
	u.SetExcluded(grant.FieldStatus)
	return u
}

// SetGoals sets the "goals" field.
func (u *GrantUpsert) SetGoals(v []string) *GrantUpsert {
	u.Set(grant.FieldGoals, v)
	return u
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *GrantUpsert) UpdateGoals() *GrantUpsert {
	u.SetExcluded(grant.FieldGoals)
	return u
}

// SetGrantReference sets the "grant_reference" field.
func (u *GrantUpsert) SetGrantReference(v string) *GrantUpsert {
	u.Set(grant.FieldGrantReference, v)
	return u
}

// UpdateGrantReference sets the "grant_reference" field to the value that was provided on create.
func (u *GrantUpsert) UpdateGrantReference() *GrantUpsert {
	u.SetExcluded(grant.FieldGrantReference)
	return u
}

// ClearGrantReference clears the value of the "grant_reference" field.
func (u *GrantUpsert) ClearGrantReference() *GrantUpsert {
	u.SetNull(grant.FieldGrantReference)
	return u
}

// SetContactPerson sets the "contact_person" field.
func (u *GrantUpsert) SetContactPerson(v string) *GrantUpsert {
	u.Set(grant.FieldContactPerson, v)
	return u
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *GrantUpsert) UpdateContactPerson() *GrantUpsert {
	u.SetExcluded(grant.FieldContactPerson)
	return u
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *GrantUpsert) ClearContactPerson() *GrantUpsert {
	u.SetNull(grant.FieldContactPerson)
	return u
}

// SetContactEmail sets the "contact_email" field.
func (u *GrantUpsert) SetContactEmail(v string) *GrantUpsert {
	u.Set(grant.FieldContactEmail, v)
	return u
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *GrantUpsert) UpdateContactEmail() *GrantUpsert {
	u.SetExcluded(grant.FieldContactEmail)
	return u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *GrantUpsert) ClearContactEmail() *GrantUpsert {
	u.SetNull(grant.FieldContactEmail)
	return u
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (u *GrantUpsert) SetRenewalEligible(v bool) *GrantUpsert {
	u.Set(grant.FieldRenewalEligible, v)
	return u
}

// UpdateRenewalEligible sets the "renewal_eligible" field to the value that was provided on create.
func (u *GrantUpsert) UpdateRenewalEligible() *GrantUpsert {
	u.SetExcluded(grant.FieldRenewalEligible)
	return u
}

// SetNextReviewDate sets the "next_review_date" field.
func (u *GrantUpsert) SetNextReviewDate(v time.Time) *GrantUpsert {
	u.Set(grant.FieldNextReviewDate, v)
	return u
}

// UpdateNextReviewDate sets the "next_review_date" field to the value that was provided on create.
func (u *GrantUpsert) UpdateNextReviewDate() *GrantUpsert {
	u.SetExcluded(grant.FieldNextReviewDate)
	return u
}

// ClearNextReviewDate clears the value of the "next_review_date" field.
func (u *GrantUpsert) ClearNextReviewDate() *GrantUpsert {
	u.SetNull(grant.FieldNextReviewDate)
	return u
}

// SetRequiresMatching sets the "requires_matching" field.
func (u *GrantUpsert) SetRequiresMatching(v bool) *GrantUpsert {
	u.Set(grant.FieldRequiresMatching, v)
	return u
}

// UpdateRequiresMatching sets the "requires_matching" field to the value that was provided on create.
func (u *GrantUpsert) UpdateRequiresMatching() *GrantUpsert {
	u.SetExcluded(grant.FieldRequiresMatching)
	return u
}

// SetMatchingAmount sets the "matching_amount" field.
func (u *GrantUpsert) SetMatchingAmount(v float64) *GrantUpsert {
	u.Set(grant.FieldMatchingAmount, v)
	return u
}

// UpdateMatchingAmount sets the "matching_amount" field to the value that was provided on create.
func (u *GrantUpsert) UpdateMatchingAmount() *GrantUpsert {
	u.SetExcluded(grant.FieldMatchingAmount)
	return u
}

// AddMatchingAmount adds v to the "matching_amount" field.
func (u *GrantUpsert) AddMatchingAmount(v float64) *GrantUpsert {
	u.Add(grant.FieldMatchingAmount, v)
	return u
}

// ClearMatchingAmount clears the value of the "matching_amount" field.
func (u *GrantUpsert) ClearMatchingAmount() *GrantUpsert {
	u.SetNull(grant.FieldMatchingAmount)
	return u
}

// SetRestrictions sets the "restrictions" field.
func (u *GrantUpsert) SetRestrictions(v []string) *GrantUpsert {
	u.Set(grant.FieldRestrictions, v)
	return u
}

// UpdateRestrictions sets the "restrictions" field to the value that was provided on create.
func (u *GrantUpsert) UpdateRestrictions() *GrantUpsert {
	u.SetExcluded(grant.FieldRestrictions)
	return u
}

// ClearRestrictions clears the value of the "restrictions" field.
func (u *GrantUpsert) ClearRestrictions() *GrantUpsert {
	u.SetNull(grant.FieldRestrictions)
	return u
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (u *GrantUpsert) SetReportingSchedule(v map[string]string) *GrantUpsert {
	u.Set(grant.FieldReportingSchedule, v)
	return u
}

// UpdateReportingSchedule sets the "reporting_schedule" field to the value that was provided on create.
func (u *GrantUpsert) UpdateReportingSchedule() *GrantUpsert {
	u.SetExcluded(grant.FieldReportingSchedule)
	return u
}

// ClearReportingSchedule clears the value of the "reporting_schedule" field.
func (u *GrantUpsert) ClearReportingSchedule() *GrantUpsert {
	u.SetNull(grant.FieldReportingSchedule)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsert) SetUpdatedAt(v time.Time) *GrantUpsert {
	u.Set(grant.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsert) UpdateUpdatedAt() *GrantUpsert {
	u.SetExcluded(grant.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GrantUpsertOne) UpdateNewValues() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(grant.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GrantUpsertOne) Ignore() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantUpsertOne) DoNothing() *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantCreate.OnConflict
// documentation for more info.
func (u *GrantUpsertOne) Update(set func(*GrantUpsert)) *GrantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *GrantUpsertOne) SetName(v string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateName() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateName()
	})
}

// SetGrantAmount sets the "grant_amount" field.
func (u *GrantUpsertOne) SetGrantAmount(v float64) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetGrantAmount(v)
	})
}

// AddGrantAmount adds v to the "grant_amount" field.
func (u *GrantUpsertOne) AddGrantAmount(v float64) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.AddGrantAmount(v)
	})
}

// UpdateGrantAmount sets the "grant_amount" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateGrantAmount() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGrantAmount()
	})
}

// SetStartDate sets the "start_date" field.
func (u *GrantUpsertOne) SetStartDate(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateStartDate() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *GrantUpsertOne) SetEndDate(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateEndDate() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateEndDate()
	})
}

// SetStatus sets the "status" field.
func (u *GrantUpsertOne) SetStatus(v grant.Status) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateStatus() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateStatus()
	})
}

// SetGoals sets the "goals" field.
func (u *GrantUpsertOne) SetGoals(v []string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetGoals(v)
	})
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateGoals() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGoals()
	})
}

// SetGrantReference sets the "grant_reference" field.
func (u *GrantUpsertOne) SetGrantReference(v string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetGrantReference(v)
	})
}

// UpdateGrantReference sets the "grant_reference" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateGrantReference() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGrantReference()
	})
}

// ClearGrantReference clears the value of the "grant_reference" field.
func (u *GrantUpsertOne) ClearGrantReference() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearGrantReference()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *GrantUpsertOne) SetContactPerson(v string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateContactPerson() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *GrantUpsertOne) ClearContactPerson() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactEmail sets the "contact_email" field.
func (u *GrantUpsertOne) SetContactEmail(v string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetContactEmail(v)
	})
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateContactEmail() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateContactEmail()
	})
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *GrantUpsertOne) ClearContactEmail() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearContactEmail()
	})
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (u *GrantUpsertOne) SetRenewalEligible(v bool) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetRenewalEligible(v)
	})
}

// UpdateRenewalEligible sets the "renewal_eligible" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateRenewalEligible() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRenewalEligible()
	})
}

// SetNextReviewDate sets the "next_review_date" field.
func (u *GrantUpsertOne) SetNextReviewDate(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetNextReviewDate(v)
	})
}

// UpdateNextReviewDate sets the "next_review_date" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateNextReviewDate() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateNextReviewDate()
	})
}

// ClearNextReviewDate clears the value of the "next_review_date" field.
func (u *GrantUpsertOne) ClearNextReviewDate() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearNextReviewDate()
	})
}

// SetRequiresMatching sets the "requires_matching" field.
func (u *GrantUpsertOne) SetRequiresMatching(v bool) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetRequiresMatching(v)
	})
}

// UpdateRequiresMatching sets the "requires_matching" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateRequiresMatching() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRequiresMatching()
	})
}

// SetMatchingAmount sets the "matching_amount" field.
func (u *GrantUpsertOne) SetMatchingAmount(v float64) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetMatchingAmount(v)
	})
}

// AddMatchingAmount adds v to the "matching_amount" field.
func (u *GrantUpsertOne) AddMatchingAmount(v float64) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.AddMatchingAmount(v)
	})
}

// UpdateMatchingAmount sets the "matching_amount" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateMatchingAmount() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateMatchingAmount()
	})
}

// ClearMatchingAmount clears the value of the "matching_amount" field.
func (u *GrantUpsertOne) ClearMatchingAmount() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearMatchingAmount()
	})
}

// SetRestrictions sets the "restrictions" field.
func (u *GrantUpsertOne) SetRestrictions(v []string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetRestrictions(v)
	})
}

// UpdateRestrictions sets the "restrictions" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateRestrictions() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRestrictions()
	})
}

// ClearRestrictions clears the value of the "restrictions" field.
func (u *GrantUpsertOne) ClearRestrictions() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearRestrictions()
	})
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (u *GrantUpsertOne) SetReportingSchedule(v map[string]string) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetReportingSchedule(v)
	})
}

// UpdateReportingSchedule sets the "reporting_schedule" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateReportingSchedule() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateReportingSchedule()
	})
}

// ClearReportingSchedule clears the value of the "reporting_schedule" field.
func (u *GrantUpsertOne) ClearReportingSchedule() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.ClearReportingSchedule()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsertOne) SetUpdatedAt(v time.Time) *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsertOne) UpdateUpdatedAt() *GrantUpsertOne {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GrantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GrantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GrantUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GrantUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	err      error
	builders []*GrantCreate
	conflict []sql.ConflictOption
}

// Save creates the Grant entities in the database.
func (_c *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Grant, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Grant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantCreateBulk) OnConflict(opts ...sql.ConflictOption) *GrantUpsertBulk {
	_c.conflict = opts
	return &GrantUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantCreateBulk) OnConflictColumns(columns ...string) *GrantUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantUpsertBulk{
		create: _c,
	}
}

// GrantUpsertBulk is the builder for "upsert"-ing
// a bulk of Grant nodes.
type GrantUpsertBulk struct {
	create *GrantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GrantUpsertBulk) UpdateNewValues() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(grant.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Grant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GrantUpsertBulk) Ignore() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantUpsertBulk) DoNothing() *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantCreateBulk.OnConflict
// documentation for more info.
func (u *GrantUpsertBulk) Update(set func(*GrantUpsert)) *GrantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *GrantUpsertBulk) SetName(v string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateName() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateName()
	})
}

// SetGrantAmount sets the "grant_amount" field.
func (u *GrantUpsertBulk) SetGrantAmount(v float64) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetGrantAmount(v)
	})
}

// AddGrantAmount adds v to the "grant_amount" field.
func (u *GrantUpsertBulk) AddGrantAmount(v float64) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.AddGrantAmount(v)
	})
}

// UpdateGrantAmount sets the "grant_amount" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateGrantAmount() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGrantAmount()
	})
}

// SetStartDate sets the "start_date" field.
func (u *GrantUpsertBulk) SetStartDate(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateStartDate() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *GrantUpsertBulk) SetEndDate(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateEndDate() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateEndDate()
	})
}

// SetStatus sets the "status" field.
func (u *GrantUpsertBulk) SetStatus(v grant.Status) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateStatus() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateStatus()
	})
}

// SetGoals sets the "goals" field.
func (u *GrantUpsertBulk) SetGoals(v []string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetGoals(v)
	})
}

// UpdateGoals sets the "goals" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateGoals() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGoals()
	})
}

// SetGrantReference sets the "grant_reference" field.
func (u *GrantUpsertBulk) SetGrantReference(v string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetGrantReference(v)
	})
}

// UpdateGrantReference sets the "grant_reference" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateGrantReference() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateGrantReference()
	})
}

// ClearGrantReference clears the value of the "grant_reference" field.
func (u *GrantUpsertBulk) ClearGrantReference() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearGrantReference()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *GrantUpsertBulk) SetContactPerson(v string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateContactPerson() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *GrantUpsertBulk) ClearContactPerson() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactEmail sets the "contact_email" field.
func (u *GrantUpsertBulk) SetContactEmail(v string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetContactEmail(v)
	})
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateContactEmail() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateContactEmail()
	})
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *GrantUpsertBulk) ClearContactEmail() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearContactEmail()
	})
}

// SetRenewalEligible sets the "renewal_eligible" field.
func (u *GrantUpsertBulk) SetRenewalEligible(v bool) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetRenewalEligible(v)
	})
}

// UpdateRenewalEligible sets the "renewal_eligible" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateRenewalEligible() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRenewalEligible()
	})
}

// SetNextReviewDate sets the "next_review_date" field.
func (u *GrantUpsertBulk) SetNextReviewDate(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetNextReviewDate(v)
	})
}

// UpdateNextReviewDate sets the "next_review_date" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateNextReviewDate() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateNextReviewDate()
	})
}

// ClearNextReviewDate clears the value of the "next_review_date" field.
func (u *GrantUpsertBulk) ClearNextReviewDate() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearNextReviewDate()
	})
}

// SetRequiresMatching sets the "requires_matching" field.
func (u *GrantUpsertBulk) SetRequiresMatching(v bool) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetRequiresMatching(v)
	})
}

// UpdateRequiresMatching sets the "requires_matching" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateRequiresMatching() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRequiresMatching()
	})
}

// SetMatchingAmount sets the "matching_amount" field.
func (u *GrantUpsertBulk) SetMatchingAmount(v float64) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetMatchingAmount(v)
	})
}

// AddMatchingAmount adds v to the "matching_amount" field.
func (u *GrantUpsertBulk) AddMatchingAmount(v float64) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.AddMatchingAmount(v)
	})
}

// UpdateMatchingAmount sets the "matching_amount" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateMatchingAmount() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateMatchingAmount()
	})
}

// ClearMatchingAmount clears the value of the "matching_amount" field.
func (u *GrantUpsertBulk) ClearMatchingAmount() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearMatchingAmount()
	})
}

// SetRestrictions sets the "restrictions" field.
func (u *GrantUpsertBulk) SetRestrictions(v []string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetRestrictions(v)
	})
}

// UpdateRestrictions sets the "restrictions" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateRestrictions() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateRestrictions()
	})
}

// ClearRestrictions clears the value of the "restrictions" field.
func (u *GrantUpsertBulk) ClearRestrictions() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearRestrictions()
	})
}

// SetReportingSchedule sets the "reporting_schedule" field.
func (u *GrantUpsertBulk) SetReportingSchedule(v map[string]string) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetReportingSchedule(v)
	})
}

// UpdateReportingSchedule sets the "reporting_schedule" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateReportingSchedule() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateReportingSchedule()
	})
}

// ClearReportingSchedule clears the value of the "reporting_schedule" field.
func (u *GrantUpsertBulk) ClearReportingSchedule() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.ClearReportingSchedule()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantUpsertBulk) SetUpdatedAt(v time.Time) *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantUpsertBulk) UpdateUpdatedAt() *GrantUpsertBulk {
	return u.Update(func(s *GrantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GrantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GrantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GrantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
