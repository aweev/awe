// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/dashboardwidget"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnalyticsDashboardCreate is the builder for creating a AnalyticsDashboard entity.
type AnalyticsDashboardCreate struct {
	config
	mutation *AnalyticsDashboardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *AnalyticsDashboardCreate) SetName(v map[string]string) *AnalyticsDashboardCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *AnalyticsDashboardCreate) SetDescription(v map[string]string) *AnalyticsDashboardCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetSlug sets the "slug" field.
func (_c *AnalyticsDashboardCreate) SetSlug(v string) *AnalyticsDashboardCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *AnalyticsDashboardCreate) SetLayout(v map[string]interface{}) *AnalyticsDashboardCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetIsDefault sets the "is_default" field.
func (_c *AnalyticsDashboardCreate) SetIsDefault(v bool) *AnalyticsDashboardCreate {
	_c.mutation.SetIsDefault(v)
	return _c
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (_c *AnalyticsDashboardCreate) SetNillableIsDefault(v *bool) *AnalyticsDashboardCreate {
	if v != nil {
		_c.SetIsDefault(*v)
	}
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *AnalyticsDashboardCreate) SetIsPublic(v bool) *AnalyticsDashboardCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *AnalyticsDashboardCreate) SetNillableIsPublic(v *bool) *AnalyticsDashboardCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetSharedWith sets the "shared_with" field.
func (_c *AnalyticsDashboardCreate) SetSharedWith(v []string) *AnalyticsDashboardCreate {
	_c.mutation.SetSharedWith(v)
	return _c
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_c *AnalyticsDashboardCreate) SetAllowedRoles(v []string) *AnalyticsDashboardCreate {
	_c.mutation.SetAllowedRoles(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AnalyticsDashboardCreate) SetCreatedAt(v time.Time) *AnalyticsDashboardCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AnalyticsDashboardCreate) SetNillableCreatedAt(v *time.Time) *AnalyticsDashboardCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AnalyticsDashboardCreate) SetUpdatedAt(v time.Time) *AnalyticsDashboardCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AnalyticsDashboardCreate) SetNillableUpdatedAt(v *time.Time) *AnalyticsDashboardCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_c *AnalyticsDashboardCreate) SetOwnerID(id int) *AnalyticsDashboardCreate {
	_c.mutation.SetOwnerID(id)
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *AnalyticsDashboardCreate) SetOwner(v *User) *AnalyticsDashboardCreate {
	return _c.SetOwnerID(v.ID)
}

// AddWidgetIDs adds the "widgets" edge to the DashboardWidget entity by IDs.
func (_c *AnalyticsDashboardCreate) AddWidgetIDs(ids ...int) *AnalyticsDashboardCreate {
	_c.mutation.AddWidgetIDs(ids...)
	return _c
}

// AddWidgets adds the "widgets" edges to the DashboardWidget entity.
func (_c *AnalyticsDashboardCreate) AddWidgets(v ...*DashboardWidget) *AnalyticsDashboardCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddWidgetIDs(ids...)
}

// Mutation returns the AnalyticsDashboardMutation object of the builder.
func (_c *AnalyticsDashboardCreate) Mutation() *AnalyticsDashboardMutation {
	return _c.mutation
}

// Save creates the AnalyticsDashboard in the database.
func (_c *AnalyticsDashboardCreate) Save(ctx context.Context) (*AnalyticsDashboard, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AnalyticsDashboardCreate) SaveX(ctx context.Context) *AnalyticsDashboard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AnalyticsDashboardCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AnalyticsDashboardCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AnalyticsDashboardCreate) defaults() {
	if _, ok := _c.mutation.IsDefault(); !ok {
		v := analyticsdashboard.DefaultIsDefault
		_c.mutation.SetIsDefault(v)
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := analyticsdashboard.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := analyticsdashboard.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := analyticsdashboard.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AnalyticsDashboardCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AnalyticsDashboard.name"`)}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "AnalyticsDashboard.slug"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "AnalyticsDashboard.layout"`)}
	}
	if _, ok := _c.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "AnalyticsDashboard.is_default"`)}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "AnalyticsDashboard.is_public"`)}
	}
	if _, ok := _c.mutation.AllowedRoles(); !ok {
		return &ValidationError{Name: "allowed_roles", err: errors.New(`ent: missing required field "AnalyticsDashboard.allowed_roles"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AnalyticsDashboard.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AnalyticsDashboard.updated_at"`)}
	}
	if len(_c.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "AnalyticsDashboard.owner"`)}
	}
	return nil
}

func (_c *AnalyticsDashboardCreate) sqlSave(ctx context.Context) (*AnalyticsDashboard, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AnalyticsDashboardCreate) createSpec() (*AnalyticsDashboard, *sqlgraph.CreateSpec) {
	var (
		_node = &AnalyticsDashboard{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(analyticsdashboard.Table, sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(analyticsdashboard.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(analyticsdashboard.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(analyticsdashboard.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(analyticsdashboard.FieldLayout, field.TypeJSON, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.IsDefault(); ok {
		_spec.SetField(analyticsdashboard.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(analyticsdashboard.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.SharedWith(); ok {
		_spec.SetField(analyticsdashboard.FieldSharedWith, field.TypeJSON, value)
		_node.SharedWith = value
	}
	if value, ok := _c.mutation.AllowedRoles(); ok {
		_spec.SetField(analyticsdashboard.FieldAllowedRoles, field.TypeJSON, value)
		_node.AllowedRoles = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(analyticsdashboard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(analyticsdashboard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_dashboards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.WidgetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AnalyticsDashboard.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnalyticsDashboardUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *AnalyticsDashboardCreate) OnConflict(opts ...sql.ConflictOption) *AnalyticsDashboardUpsertOne {
	_c.conflict = opts
	return &AnalyticsDashboardUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AnalyticsDashboardCreate) OnConflictColumns(columns ...string) *AnalyticsDashboardUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AnalyticsDashboardUpsertOne{
		create: _c,
	}
}

type (
	// AnalyticsDashboardUpsertOne is the builder for "upsert"-ing
	//  one AnalyticsDashboard node.
	AnalyticsDashboardUpsertOne struct {
		create *AnalyticsDashboardCreate
	}

	// AnalyticsDashboardUpsert is the "OnConflict" setter.
	AnalyticsDashboardUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *AnalyticsDashboardUpsert) SetName(v map[string]string) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateName() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *AnalyticsDashboardUpsert) SetDescription(v map[string]string) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateDescription() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AnalyticsDashboardUpsert) ClearDescription() *AnalyticsDashboardUpsert {
	u.SetNull(analyticsdashboard.FieldDescription)
	return u
}

// SetSlug sets the "slug" field.
func (u *AnalyticsDashboardUpsert) SetSlug(v string) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateSlug() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldSlug)
	return u
}

// SetLayout sets the "layout" field.
func (u *AnalyticsDashboardUpsert) SetLayout(v map[string]interface{}) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateLayout() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldLayout)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *AnalyticsDashboardUpsert) SetIsDefault(v bool) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateIsDefault() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldIsDefault)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *AnalyticsDashboardUpsert) SetIsPublic(v bool) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateIsPublic() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldIsPublic)
	return u
}

// SetSharedWith sets the "shared_with" field.
func (u *AnalyticsDashboardUpsert) SetSharedWith(v []string) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldSharedWith, v)
	return u
}

// UpdateSharedWith sets the "shared_with" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateSharedWith() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldSharedWith)
	return u
}

// ClearSharedWith clears the value of the "shared_with" field.
func (u *AnalyticsDashboardUpsert) ClearSharedWith() *AnalyticsDashboardUpsert {
	u.SetNull(analyticsdashboard.FieldSharedWith)
	return u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *AnalyticsDashboardUpsert) SetAllowedRoles(v []string) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldAllowedRoles, v)
	return u
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateAllowedRoles() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldAllowedRoles)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnalyticsDashboardUpsert) SetUpdatedAt(v time.Time) *AnalyticsDashboardUpsert {
	u.Set(analyticsdashboard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsert) UpdateUpdatedAt() *AnalyticsDashboardUpsert {
	u.SetExcluded(analyticsdashboard.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AnalyticsDashboardUpsertOne) UpdateNewValues() *AnalyticsDashboardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(analyticsdashboard.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AnalyticsDashboardUpsertOne) Ignore() *AnalyticsDashboardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnalyticsDashboardUpsertOne) DoNothing() *AnalyticsDashboardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnalyticsDashboardCreate.OnConflict
// documentation for more info.
func (u *AnalyticsDashboardUpsertOne) Update(set func(*AnalyticsDashboardUpsert)) *AnalyticsDashboardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnalyticsDashboardUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AnalyticsDashboardUpsertOne) SetName(v map[string]string) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateName() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AnalyticsDashboardUpsertOne) SetDescription(v map[string]string) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateDescription() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AnalyticsDashboardUpsertOne) ClearDescription() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.ClearDescription()
	})
}

// SetSlug sets the "slug" field.
func (u *AnalyticsDashboardUpsertOne) SetSlug(v string) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateSlug() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateSlug()
	})
}

// SetLayout sets the "layout" field.
func (u *AnalyticsDashboardUpsertOne) SetLayout(v map[string]interface{}) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateLayout() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateLayout()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *AnalyticsDashboardUpsertOne) SetIsDefault(v bool) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateIsDefault() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *AnalyticsDashboardUpsertOne) SetIsPublic(v bool) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateIsPublic() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateIsPublic()
	})
}

// SetSharedWith sets the "shared_with" field.
func (u *AnalyticsDashboardUpsertOne) SetSharedWith(v []string) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetSharedWith(v)
	})
}

// UpdateSharedWith sets the "shared_with" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateSharedWith() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateSharedWith()
	})
}

// ClearSharedWith clears the value of the "shared_with" field.
func (u *AnalyticsDashboardUpsertOne) ClearSharedWith() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.ClearSharedWith()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *AnalyticsDashboardUpsertOne) SetAllowedRoles(v []string) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateAllowedRoles() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnalyticsDashboardUpsertOne) SetUpdatedAt(v time.Time) *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertOne) UpdateUpdatedAt() *AnalyticsDashboardUpsertOne {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AnalyticsDashboardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnalyticsDashboardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnalyticsDashboardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnalyticsDashboardUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnalyticsDashboardUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnalyticsDashboardCreateBulk is the builder for creating many AnalyticsDashboard entities in bulk.
type AnalyticsDashboardCreateBulk struct {
	config
	err      error
	builders []*AnalyticsDashboardCreate
	conflict []sql.ConflictOption
}

// Save creates the AnalyticsDashboard entities in the database.
func (_c *AnalyticsDashboardCreateBulk) Save(ctx context.Context) ([]*AnalyticsDashboard, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AnalyticsDashboard, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnalyticsDashboardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AnalyticsDashboardCreateBulk) SaveX(ctx context.Context) []*AnalyticsDashboard {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AnalyticsDashboardCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AnalyticsDashboardCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AnalyticsDashboard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnalyticsDashboardUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *AnalyticsDashboardCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnalyticsDashboardUpsertBulk {
	_c.conflict = opts
	return &AnalyticsDashboardUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AnalyticsDashboardCreateBulk) OnConflictColumns(columns ...string) *AnalyticsDashboardUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AnalyticsDashboardUpsertBulk{
		create: _c,
	}
}

// AnalyticsDashboardUpsertBulk is the builder for "upsert"-ing
// a bulk of AnalyticsDashboard nodes.
type AnalyticsDashboardUpsertBulk struct {
	create *AnalyticsDashboardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AnalyticsDashboardUpsertBulk) UpdateNewValues() *AnalyticsDashboardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(analyticsdashboard.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AnalyticsDashboard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AnalyticsDashboardUpsertBulk) Ignore() *AnalyticsDashboardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnalyticsDashboardUpsertBulk) DoNothing() *AnalyticsDashboardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnalyticsDashboardCreateBulk.OnConflict
// documentation for more info.
func (u *AnalyticsDashboardUpsertBulk) Update(set func(*AnalyticsDashboardUpsert)) *AnalyticsDashboardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnalyticsDashboardUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AnalyticsDashboardUpsertBulk) SetName(v map[string]string) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateName() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AnalyticsDashboardUpsertBulk) SetDescription(v map[string]string) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateDescription() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AnalyticsDashboardUpsertBulk) ClearDescription() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.ClearDescription()
	})
}

// SetSlug sets the "slug" field.
func (u *AnalyticsDashboardUpsertBulk) SetSlug(v string) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateSlug() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateSlug()
	})
}

// SetLayout sets the "layout" field.
func (u *AnalyticsDashboardUpsertBulk) SetLayout(v map[string]interface{}) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateLayout() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateLayout()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *AnalyticsDashboardUpsertBulk) SetIsDefault(v bool) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateIsDefault() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateIsDefault()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *AnalyticsDashboardUpsertBulk) SetIsPublic(v bool) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateIsPublic() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateIsPublic()
	})
}

// SetSharedWith sets the "shared_with" field.
func (u *AnalyticsDashboardUpsertBulk) SetSharedWith(v []string) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetSharedWith(v)
	})
}

// UpdateSharedWith sets the "shared_with" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateSharedWith() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateSharedWith()
	})
}

// ClearSharedWith clears the value of the "shared_with" field.
func (u *AnalyticsDashboardUpsertBulk) ClearSharedWith() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.ClearSharedWith()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *AnalyticsDashboardUpsertBulk) SetAllowedRoles(v []string) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateAllowedRoles() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnalyticsDashboardUpsertBulk) SetUpdatedAt(v time.Time) *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnalyticsDashboardUpsertBulk) UpdateUpdatedAt() *AnalyticsDashboardUpsertBulk {
	return u.Update(func(s *AnalyticsDashboardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AnalyticsDashboardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AnalyticsDashboardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnalyticsDashboardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnalyticsDashboardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
