// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktabs"
	"awe/ent/ent/predicate"
	"awe/ent/ent/tabitem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TabItemUpdate is the builder for updating TabItem entities.
type TabItemUpdate struct {
	config
	hooks    []Hook
	mutation *TabItemMutation
}

// Where appends a list predicates to the TabItemUpdate builder.
func (_u *TabItemUpdate) Where(ps ...predicate.TabItem) *TabItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *TabItemUpdate) SetOrder(v int) *TabItemUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TabItemUpdate) SetNillableOrder(v *int) *TabItemUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TabItemUpdate) AddOrder(v int) *TabItemUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *TabItemUpdate) SetTitle(v map[string]string) *TabItemUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *TabItemUpdate) SetContent(v map[string]string) *TabItemUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TabItemUpdate) SetUpdatedAt(v time.Time) *TabItemUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetBlockID sets the "block" edge to the BlockTabs entity by ID.
func (_u *TabItemUpdate) SetBlockID(id int) *TabItemUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTabs entity.
func (_u *TabItemUpdate) SetBlock(v *BlockTabs) *TabItemUpdate {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TabItemMutation object of the builder.
func (_u *TabItemUpdate) Mutation() *TabItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTabs entity.
func (_u *TabItemUpdate) ClearBlock() *TabItemUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TabItemUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TabItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TabItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TabItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TabItemUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := tabitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TabItemUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TabItem.block"`)
	}
	return nil
}

func (_u *TabItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tabitem.Table, tabitem.Columns, sqlgraph.NewFieldSpec(tabitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(tabitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(tabitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(tabitem.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(tabitem.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tabitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabitem.BlockTable,
			Columns: []string{tabitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabitem.BlockTable,
			Columns: []string{tabitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tabitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TabItemUpdateOne is the builder for updating a single TabItem entity.
type TabItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TabItemMutation
}

// SetOrder sets the "order" field.
func (_u *TabItemUpdateOne) SetOrder(v int) *TabItemUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TabItemUpdateOne) SetNillableOrder(v *int) *TabItemUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TabItemUpdateOne) AddOrder(v int) *TabItemUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *TabItemUpdateOne) SetTitle(v map[string]string) *TabItemUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *TabItemUpdateOne) SetContent(v map[string]string) *TabItemUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TabItemUpdateOne) SetUpdatedAt(v time.Time) *TabItemUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetBlockID sets the "block" edge to the BlockTabs entity by ID.
func (_u *TabItemUpdateOne) SetBlockID(id int) *TabItemUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTabs entity.
func (_u *TabItemUpdateOne) SetBlock(v *BlockTabs) *TabItemUpdateOne {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TabItemMutation object of the builder.
func (_u *TabItemUpdateOne) Mutation() *TabItemMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTabs entity.
func (_u *TabItemUpdateOne) ClearBlock() *TabItemUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// Where appends a list predicates to the TabItemUpdate builder.
func (_u *TabItemUpdateOne) Where(ps ...predicate.TabItem) *TabItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TabItemUpdateOne) Select(field string, fields ...string) *TabItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TabItem entity.
func (_u *TabItemUpdateOne) Save(ctx context.Context) (*TabItem, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TabItemUpdateOne) SaveX(ctx context.Context) *TabItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TabItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TabItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TabItemUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := tabitem.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TabItemUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TabItem.block"`)
	}
	return nil
}

func (_u *TabItemUpdateOne) sqlSave(ctx context.Context) (_node *TabItem, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tabitem.Table, tabitem.Columns, sqlgraph.NewFieldSpec(tabitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TabItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tabitem.FieldID)
		for _, f := range fields {
			if !tabitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tabitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(tabitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(tabitem.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(tabitem.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(tabitem.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tabitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabitem.BlockTable,
			Columns: []string{tabitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabitem.BlockTable,
			Columns: []string{tabitem.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktabs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TabItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tabitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
