// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SiteVisitCreate is the builder for creating a SiteVisit entity.
type SiteVisitCreate struct {
	config
	mutation *SiteVisitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRequestedDate sets the "requested_date" field.
func (_c *SiteVisitCreate) SetRequestedDate(v time.Time) *SiteVisitCreate {
	_c.mutation.SetRequestedDate(v)
	return _c
}

// SetScheduledDate sets the "scheduled_date" field.
func (_c *SiteVisitCreate) SetScheduledDate(v time.Time) *SiteVisitCreate {
	_c.mutation.SetScheduledDate(v)
	return _c
}

// SetNillableScheduledDate sets the "scheduled_date" field if the given value is not nil.
func (_c *SiteVisitCreate) SetNillableScheduledDate(v *time.Time) *SiteVisitCreate {
	if v != nil {
		_c.SetScheduledDate(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *SiteVisitCreate) SetStatus(v string) *SiteVisitCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *SiteVisitCreate) SetNillableStatus(v *string) *SiteVisitCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetNotes sets the "notes" field.
func (_c *SiteVisitCreate) SetNotes(v string) *SiteVisitCreate {
	_c.mutation.SetNotes(v)
	return _c
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_c *SiteVisitCreate) SetNillableNotes(v *string) *SiteVisitCreate {
	if v != nil {
		_c.SetNotes(*v)
	}
	return _c
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_c *SiteVisitCreate) SetDonorID(id int) *SiteVisitCreate {
	_c.mutation.SetDonorID(id)
	return _c
}

// SetDonor sets the "donor" edge to the User entity.
func (_c *SiteVisitCreate) SetDonor(v *User) *SiteVisitCreate {
	return _c.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *SiteVisitCreate) SetProgramID(id int) *SiteVisitCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *SiteVisitCreate) SetProgram(v *Program) *SiteVisitCreate {
	return _c.SetProgramID(v.ID)
}

// Mutation returns the SiteVisitMutation object of the builder.
func (_c *SiteVisitCreate) Mutation() *SiteVisitMutation {
	return _c.mutation
}

// Save creates the SiteVisit in the database.
func (_c *SiteVisitCreate) Save(ctx context.Context) (*SiteVisit, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SiteVisitCreate) SaveX(ctx context.Context) *SiteVisit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SiteVisitCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SiteVisitCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SiteVisitCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := sitevisit.DefaultStatus
		_c.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SiteVisitCreate) check() error {
	if _, ok := _c.mutation.RequestedDate(); !ok {
		return &ValidationError{Name: "requested_date", err: errors.New(`ent: missing required field "SiteVisit.requested_date"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SiteVisit.status"`)}
	}
	if len(_c.mutation.DonorIDs()) == 0 {
		return &ValidationError{Name: "donor", err: errors.New(`ent: missing required edge "SiteVisit.donor"`)}
	}
	if len(_c.mutation.ProgramIDs()) == 0 {
		return &ValidationError{Name: "program", err: errors.New(`ent: missing required edge "SiteVisit.program"`)}
	}
	return nil
}

func (_c *SiteVisitCreate) sqlSave(ctx context.Context) (*SiteVisit, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SiteVisitCreate) createSpec() (*SiteVisit, *sqlgraph.CreateSpec) {
	var (
		_node = &SiteVisit{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(sitevisit.Table, sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.RequestedDate(); ok {
		_spec.SetField(sitevisit.FieldRequestedDate, field.TypeTime, value)
		_node.RequestedDate = value
	}
	if value, ok := _c.mutation.ScheduledDate(); ok {
		_spec.SetField(sitevisit.FieldScheduledDate, field.TypeTime, value)
		_node.ScheduledDate = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(sitevisit.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Notes(); ok {
		_spec.SetField(sitevisit.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := _c.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_site_visits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_site_visits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SiteVisit.Create().
//		SetRequestedDate(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteVisitUpsert) {
//			SetRequestedDate(v+v).
//		}).
//		Exec(ctx)
func (_c *SiteVisitCreate) OnConflict(opts ...sql.ConflictOption) *SiteVisitUpsertOne {
	_c.conflict = opts
	return &SiteVisitUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SiteVisitCreate) OnConflictColumns(columns ...string) *SiteVisitUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SiteVisitUpsertOne{
		create: _c,
	}
}

type (
	// SiteVisitUpsertOne is the builder for "upsert"-ing
	//  one SiteVisit node.
	SiteVisitUpsertOne struct {
		create *SiteVisitCreate
	}

	// SiteVisitUpsert is the "OnConflict" setter.
	SiteVisitUpsert struct {
		*sql.UpdateSet
	}
)

// SetRequestedDate sets the "requested_date" field.
func (u *SiteVisitUpsert) SetRequestedDate(v time.Time) *SiteVisitUpsert {
	u.Set(sitevisit.FieldRequestedDate, v)
	return u
}

// UpdateRequestedDate sets the "requested_date" field to the value that was provided on create.
func (u *SiteVisitUpsert) UpdateRequestedDate() *SiteVisitUpsert {
	u.SetExcluded(sitevisit.FieldRequestedDate)
	return u
}

// SetScheduledDate sets the "scheduled_date" field.
func (u *SiteVisitUpsert) SetScheduledDate(v time.Time) *SiteVisitUpsert {
	u.Set(sitevisit.FieldScheduledDate, v)
	return u
}

// UpdateScheduledDate sets the "scheduled_date" field to the value that was provided on create.
func (u *SiteVisitUpsert) UpdateScheduledDate() *SiteVisitUpsert {
	u.SetExcluded(sitevisit.FieldScheduledDate)
	return u
}

// ClearScheduledDate clears the value of the "scheduled_date" field.
func (u *SiteVisitUpsert) ClearScheduledDate() *SiteVisitUpsert {
	u.SetNull(sitevisit.FieldScheduledDate)
	return u
}

// SetStatus sets the "status" field.
func (u *SiteVisitUpsert) SetStatus(v string) *SiteVisitUpsert {
	u.Set(sitevisit.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SiteVisitUpsert) UpdateStatus() *SiteVisitUpsert {
	u.SetExcluded(sitevisit.FieldStatus)
	return u
}

// SetNotes sets the "notes" field.
func (u *SiteVisitUpsert) SetNotes(v string) *SiteVisitUpsert {
	u.Set(sitevisit.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SiteVisitUpsert) UpdateNotes() *SiteVisitUpsert {
	u.SetExcluded(sitevisit.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *SiteVisitUpsert) ClearNotes() *SiteVisitUpsert {
	u.SetNull(sitevisit.FieldNotes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SiteVisitUpsertOne) UpdateNewValues() *SiteVisitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SiteVisitUpsertOne) Ignore() *SiteVisitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteVisitUpsertOne) DoNothing() *SiteVisitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteVisitCreate.OnConflict
// documentation for more info.
func (u *SiteVisitUpsertOne) Update(set func(*SiteVisitUpsert)) *SiteVisitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteVisitUpsert{UpdateSet: update})
	}))
	return u
}

// SetRequestedDate sets the "requested_date" field.
func (u *SiteVisitUpsertOne) SetRequestedDate(v time.Time) *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetRequestedDate(v)
	})
}

// UpdateRequestedDate sets the "requested_date" field to the value that was provided on create.
func (u *SiteVisitUpsertOne) UpdateRequestedDate() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateRequestedDate()
	})
}

// SetScheduledDate sets the "scheduled_date" field.
func (u *SiteVisitUpsertOne) SetScheduledDate(v time.Time) *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetScheduledDate(v)
	})
}

// UpdateScheduledDate sets the "scheduled_date" field to the value that was provided on create.
func (u *SiteVisitUpsertOne) UpdateScheduledDate() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateScheduledDate()
	})
}

// ClearScheduledDate clears the value of the "scheduled_date" field.
func (u *SiteVisitUpsertOne) ClearScheduledDate() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.ClearScheduledDate()
	})
}

// SetStatus sets the "status" field.
func (u *SiteVisitUpsertOne) SetStatus(v string) *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SiteVisitUpsertOne) UpdateStatus() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateStatus()
	})
}

// SetNotes sets the "notes" field.
func (u *SiteVisitUpsertOne) SetNotes(v string) *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SiteVisitUpsertOne) UpdateNotes() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *SiteVisitUpsertOne) ClearNotes() *SiteVisitUpsertOne {
	return u.Update(func(s *SiteVisitUpsert) {
		s.ClearNotes()
	})
}

// Exec executes the query.
func (u *SiteVisitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteVisitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteVisitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SiteVisitUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SiteVisitUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SiteVisitCreateBulk is the builder for creating many SiteVisit entities in bulk.
type SiteVisitCreateBulk struct {
	config
	err      error
	builders []*SiteVisitCreate
	conflict []sql.ConflictOption
}

// Save creates the SiteVisit entities in the database.
func (_c *SiteVisitCreateBulk) Save(ctx context.Context) ([]*SiteVisit, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SiteVisit, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteVisitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SiteVisitCreateBulk) SaveX(ctx context.Context) []*SiteVisit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SiteVisitCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SiteVisitCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SiteVisit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SiteVisitUpsert) {
//			SetRequestedDate(v+v).
//		}).
//		Exec(ctx)
func (_c *SiteVisitCreateBulk) OnConflict(opts ...sql.ConflictOption) *SiteVisitUpsertBulk {
	_c.conflict = opts
	return &SiteVisitUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SiteVisitCreateBulk) OnConflictColumns(columns ...string) *SiteVisitUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SiteVisitUpsertBulk{
		create: _c,
	}
}

// SiteVisitUpsertBulk is the builder for "upsert"-ing
// a bulk of SiteVisit nodes.
type SiteVisitUpsertBulk struct {
	create *SiteVisitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SiteVisitUpsertBulk) UpdateNewValues() *SiteVisitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SiteVisit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SiteVisitUpsertBulk) Ignore() *SiteVisitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SiteVisitUpsertBulk) DoNothing() *SiteVisitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SiteVisitCreateBulk.OnConflict
// documentation for more info.
func (u *SiteVisitUpsertBulk) Update(set func(*SiteVisitUpsert)) *SiteVisitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SiteVisitUpsert{UpdateSet: update})
	}))
	return u
}

// SetRequestedDate sets the "requested_date" field.
func (u *SiteVisitUpsertBulk) SetRequestedDate(v time.Time) *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetRequestedDate(v)
	})
}

// UpdateRequestedDate sets the "requested_date" field to the value that was provided on create.
func (u *SiteVisitUpsertBulk) UpdateRequestedDate() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateRequestedDate()
	})
}

// SetScheduledDate sets the "scheduled_date" field.
func (u *SiteVisitUpsertBulk) SetScheduledDate(v time.Time) *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetScheduledDate(v)
	})
}

// UpdateScheduledDate sets the "scheduled_date" field to the value that was provided on create.
func (u *SiteVisitUpsertBulk) UpdateScheduledDate() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateScheduledDate()
	})
}

// ClearScheduledDate clears the value of the "scheduled_date" field.
func (u *SiteVisitUpsertBulk) ClearScheduledDate() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.ClearScheduledDate()
	})
}

// SetStatus sets the "status" field.
func (u *SiteVisitUpsertBulk) SetStatus(v string) *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SiteVisitUpsertBulk) UpdateStatus() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateStatus()
	})
}

// SetNotes sets the "notes" field.
func (u *SiteVisitUpsertBulk) SetNotes(v string) *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *SiteVisitUpsertBulk) UpdateNotes() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *SiteVisitUpsertBulk) ClearNotes() *SiteVisitUpsertBulk {
	return u.Update(func(s *SiteVisitUpsert) {
		s.ClearNotes()
	})
}

// Exec executes the query.
func (u *SiteVisitUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SiteVisitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SiteVisitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SiteVisitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
