// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (_c *DocumentCreate) SetTitle(v map[string]string) *DocumentCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetType sets the "type" field.
func (_c *DocumentCreate) SetType(v document.Type) *DocumentCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetFileURL sets the "file_url" field.
func (_c *DocumentCreate) SetFileURL(v string) *DocumentCreate {
	_c.mutation.SetFileURL(v)
	return _c
}

// SetFileName sets the "file_name" field.
func (_c *DocumentCreate) SetFileName(v string) *DocumentCreate {
	_c.mutation.SetFileName(v)
	return _c
}

// SetMimeType sets the "mime_type" field.
func (_c *DocumentCreate) SetMimeType(v string) *DocumentCreate {
	_c.mutation.SetMimeType(v)
	return _c
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableMimeType(v *string) *DocumentCreate {
	if v != nil {
		_c.SetMimeType(*v)
	}
	return _c
}

// SetSize sets the "size" field.
func (_c *DocumentCreate) SetSize(v int) *DocumentCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableSize(v *int) *DocumentCreate {
	if v != nil {
		_c.SetSize(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *DocumentCreate) SetDescription(v map[string]string) *DocumentCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *DocumentCreate) SetTags(v []string) *DocumentCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetVersion sets the "version" field.
func (_c *DocumentCreate) SetVersion(v string) *DocumentCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableVersion(v *string) *DocumentCreate {
	if v != nil {
		_c.SetVersion(*v)
	}
	return _c
}

// SetLanguage sets the "language" field.
func (_c *DocumentCreate) SetLanguage(v string) *DocumentCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableLanguage(v *string) *DocumentCreate {
	if v != nil {
		_c.SetLanguage(*v)
	}
	return _c
}

// SetIsPublic sets the "is_public" field.
func (_c *DocumentCreate) SetIsPublic(v bool) *DocumentCreate {
	_c.mutation.SetIsPublic(v)
	return _c
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableIsPublic(v *bool) *DocumentCreate {
	if v != nil {
		_c.SetIsPublic(*v)
	}
	return _c
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_c *DocumentCreate) SetAllowedRoles(v []string) *DocumentCreate {
	_c.mutation.SetAllowedRoles(v)
	return _c
}

// SetAccessPassword sets the "access_password" field.
func (_c *DocumentCreate) SetAccessPassword(v string) *DocumentCreate {
	_c.mutation.SetAccessPassword(v)
	return _c
}

// SetNillableAccessPassword sets the "access_password" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableAccessPassword(v *string) *DocumentCreate {
	if v != nil {
		_c.SetAccessPassword(*v)
	}
	return _c
}

// SetRequiresApproval sets the "requires_approval" field.
func (_c *DocumentCreate) SetRequiresApproval(v bool) *DocumentCreate {
	_c.mutation.SetRequiresApproval(v)
	return _c
}

// SetNillableRequiresApproval sets the "requires_approval" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableRequiresApproval(v *bool) *DocumentCreate {
	if v != nil {
		_c.SetRequiresApproval(*v)
	}
	return _c
}

// SetIsApproved sets the "is_approved" field.
func (_c *DocumentCreate) SetIsApproved(v bool) *DocumentCreate {
	_c.mutation.SetIsApproved(v)
	return _c
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableIsApproved(v *bool) *DocumentCreate {
	if v != nil {
		_c.SetIsApproved(*v)
	}
	return _c
}

// SetApprovedBy sets the "approved_by" field.
func (_c *DocumentCreate) SetApprovedBy(v string) *DocumentCreate {
	_c.mutation.SetApprovedBy(v)
	return _c
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableApprovedBy(v *string) *DocumentCreate {
	if v != nil {
		_c.SetApprovedBy(*v)
	}
	return _c
}

// SetApprovedAt sets the "approved_at" field.
func (_c *DocumentCreate) SetApprovedAt(v time.Time) *DocumentCreate {
	_c.mutation.SetApprovedAt(v)
	return _c
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableApprovedAt(v *time.Time) *DocumentCreate {
	if v != nil {
		_c.SetApprovedAt(*v)
	}
	return _c
}

// SetDownloadCount sets the "download_count" field.
func (_c *DocumentCreate) SetDownloadCount(v int) *DocumentCreate {
	_c.mutation.SetDownloadCount(v)
	return _c
}

// SetNillableDownloadCount sets the "download_count" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableDownloadCount(v *int) *DocumentCreate {
	if v != nil {
		_c.SetDownloadCount(*v)
	}
	return _c
}

// SetLastAccessed sets the "last_accessed" field.
func (_c *DocumentCreate) SetLastAccessed(v time.Time) *DocumentCreate {
	_c.mutation.SetLastAccessed(v)
	return _c
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableLastAccessed(v *time.Time) *DocumentCreate {
	if v != nil {
		_c.SetLastAccessed(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DocumentCreate) SetCreatedAt(v time.Time) *DocumentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableCreatedAt(v *time.Time) *DocumentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DocumentCreate) SetUpdatedAt(v time.Time) *DocumentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableUpdatedAt(v *time.Time) *DocumentCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (_c *DocumentCreate) SetUploaderID(id int) *DocumentCreate {
	_c.mutation.SetUploaderID(id)
	return _c
}

// SetUploader sets the "uploader" edge to the User entity.
func (_c *DocumentCreate) SetUploader(v *User) *DocumentCreate {
	return _c.SetUploaderID(v.ID)
}

// SetCategoryID sets the "category" edge to the DocumentCategory entity by ID.
func (_c *DocumentCreate) SetCategoryID(id int) *DocumentCreate {
	_c.mutation.SetCategoryID(id)
	return _c
}

// SetNillableCategoryID sets the "category" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_c *DocumentCreate) SetNillableCategoryID(id *int) *DocumentCreate {
	if id != nil {
		_c = _c.SetCategoryID(*id)
	}
	return _c
}

// SetCategory sets the "category" edge to the DocumentCategory entity.
func (_c *DocumentCreate) SetCategory(v *DocumentCategory) *DocumentCreate {
	return _c.SetCategoryID(v.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (_c *DocumentCreate) Mutation() *DocumentMutation {
	return _c.mutation
}

// Save creates the Document in the database.
func (_c *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DocumentCreate) defaults() {
	if _, ok := _c.mutation.Version(); !ok {
		v := document.DefaultVersion
		_c.mutation.SetVersion(v)
	}
	if _, ok := _c.mutation.Language(); !ok {
		v := document.DefaultLanguage
		_c.mutation.SetLanguage(v)
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		v := document.DefaultIsPublic
		_c.mutation.SetIsPublic(v)
	}
	if _, ok := _c.mutation.RequiresApproval(); !ok {
		v := document.DefaultRequiresApproval
		_c.mutation.SetRequiresApproval(v)
	}
	if _, ok := _c.mutation.IsApproved(); !ok {
		v := document.DefaultIsApproved
		_c.mutation.SetIsApproved(v)
	}
	if _, ok := _c.mutation.DownloadCount(); !ok {
		v := document.DefaultDownloadCount
		_c.mutation.SetDownloadCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := document.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := document.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DocumentCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Document.title"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Document.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := document.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Document.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FileURL(); !ok {
		return &ValidationError{Name: "file_url", err: errors.New(`ent: missing required field "Document.file_url"`)}
	}
	if _, ok := _c.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Document.file_name"`)}
	}
	if _, ok := _c.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Document.tags"`)}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Document.version"`)}
	}
	if _, ok := _c.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Document.language"`)}
	}
	if _, ok := _c.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Document.is_public"`)}
	}
	if _, ok := _c.mutation.AllowedRoles(); !ok {
		return &ValidationError{Name: "allowed_roles", err: errors.New(`ent: missing required field "Document.allowed_roles"`)}
	}
	if _, ok := _c.mutation.RequiresApproval(); !ok {
		return &ValidationError{Name: "requires_approval", err: errors.New(`ent: missing required field "Document.requires_approval"`)}
	}
	if _, ok := _c.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "Document.is_approved"`)}
	}
	if _, ok := _c.mutation.DownloadCount(); !ok {
		return &ValidationError{Name: "download_count", err: errors.New(`ent: missing required field "Document.download_count"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Document.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Document.updated_at"`)}
	}
	if len(_c.mutation.UploaderIDs()) == 0 {
		return &ValidationError{Name: "uploader", err: errors.New(`ent: missing required edge "Document.uploader"`)}
	}
	return nil
}

func (_c *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(document.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(document.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.FileURL(); ok {
		_spec.SetField(document.FieldFileURL, field.TypeString, value)
		_node.FileURL = value
	}
	if value, ok := _c.mutation.FileName(); ok {
		_spec.SetField(document.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := _c.mutation.MimeType(); ok {
		_spec.SetField(document.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(document.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(document.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(document.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(document.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.IsPublic(); ok {
		_spec.SetField(document.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := _c.mutation.AllowedRoles(); ok {
		_spec.SetField(document.FieldAllowedRoles, field.TypeJSON, value)
		_node.AllowedRoles = value
	}
	if value, ok := _c.mutation.AccessPassword(); ok {
		_spec.SetField(document.FieldAccessPassword, field.TypeString, value)
		_node.AccessPassword = value
	}
	if value, ok := _c.mutation.RequiresApproval(); ok {
		_spec.SetField(document.FieldRequiresApproval, field.TypeBool, value)
		_node.RequiresApproval = value
	}
	if value, ok := _c.mutation.IsApproved(); ok {
		_spec.SetField(document.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := _c.mutation.ApprovedBy(); ok {
		_spec.SetField(document.FieldApprovedBy, field.TypeString, value)
		_node.ApprovedBy = value
	}
	if value, ok := _c.mutation.ApprovedAt(); ok {
		_spec.SetField(document.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = value
	}
	if value, ok := _c.mutation.DownloadCount(); ok {
		_spec.SetField(document.FieldDownloadCount, field.TypeInt, value)
		_node.DownloadCount = value
	}
	if value, ok := _c.mutation.LastAccessed(); ok {
		_spec.SetField(document.FieldLastAccessed, field.TypeTime, value)
		_node.LastAccessed = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(document.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_document_uploads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_category_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *DocumentCreate) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertOne {
	_c.conflict = opts
	return &DocumentUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DocumentCreate) OnConflictColumns(columns ...string) *DocumentUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertOne{
		create: _c,
	}
}

type (
	// DocumentUpsertOne is the builder for "upsert"-ing
	//  one Document node.
	DocumentUpsertOne struct {
		create *DocumentCreate
	}

	// DocumentUpsert is the "OnConflict" setter.
	DocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *DocumentUpsert) SetTitle(v map[string]string) *DocumentUpsert {
	u.Set(document.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateTitle() *DocumentUpsert {
	u.SetExcluded(document.FieldTitle)
	return u
}

// SetType sets the "type" field.
func (u *DocumentUpsert) SetType(v document.Type) *DocumentUpsert {
	u.Set(document.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateType() *DocumentUpsert {
	u.SetExcluded(document.FieldType)
	return u
}

// SetFileURL sets the "file_url" field.
func (u *DocumentUpsert) SetFileURL(v string) *DocumentUpsert {
	u.Set(document.FieldFileURL, v)
	return u
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateFileURL() *DocumentUpsert {
	u.SetExcluded(document.FieldFileURL)
	return u
}

// SetFileName sets the "file_name" field.
func (u *DocumentUpsert) SetFileName(v string) *DocumentUpsert {
	u.Set(document.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateFileName() *DocumentUpsert {
	u.SetExcluded(document.FieldFileName)
	return u
}

// SetMimeType sets the "mime_type" field.
func (u *DocumentUpsert) SetMimeType(v string) *DocumentUpsert {
	u.Set(document.FieldMimeType, v)
	return u
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateMimeType() *DocumentUpsert {
	u.SetExcluded(document.FieldMimeType)
	return u
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *DocumentUpsert) ClearMimeType() *DocumentUpsert {
	u.SetNull(document.FieldMimeType)
	return u
}

// SetSize sets the "size" field.
func (u *DocumentUpsert) SetSize(v int) *DocumentUpsert {
	u.Set(document.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateSize() *DocumentUpsert {
	u.SetExcluded(document.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *DocumentUpsert) AddSize(v int) *DocumentUpsert {
	u.Add(document.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *DocumentUpsert) ClearSize() *DocumentUpsert {
	u.SetNull(document.FieldSize)
	return u
}

// SetDescription sets the "description" field.
func (u *DocumentUpsert) SetDescription(v map[string]string) *DocumentUpsert {
	u.Set(document.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateDescription() *DocumentUpsert {
	u.SetExcluded(document.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentUpsert) ClearDescription() *DocumentUpsert {
	u.SetNull(document.FieldDescription)
	return u
}

// SetTags sets the "tags" field.
func (u *DocumentUpsert) SetTags(v []string) *DocumentUpsert {
	u.Set(document.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateTags() *DocumentUpsert {
	u.SetExcluded(document.FieldTags)
	return u
}

// SetVersion sets the "version" field.
func (u *DocumentUpsert) SetVersion(v string) *DocumentUpsert {
	u.Set(document.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateVersion() *DocumentUpsert {
	u.SetExcluded(document.FieldVersion)
	return u
}

// SetLanguage sets the "language" field.
func (u *DocumentUpsert) SetLanguage(v string) *DocumentUpsert {
	u.Set(document.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateLanguage() *DocumentUpsert {
	u.SetExcluded(document.FieldLanguage)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *DocumentUpsert) SetIsPublic(v bool) *DocumentUpsert {
	u.Set(document.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateIsPublic() *DocumentUpsert {
	u.SetExcluded(document.FieldIsPublic)
	return u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *DocumentUpsert) SetAllowedRoles(v []string) *DocumentUpsert {
	u.Set(document.FieldAllowedRoles, v)
	return u
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateAllowedRoles() *DocumentUpsert {
	u.SetExcluded(document.FieldAllowedRoles)
	return u
}

// SetAccessPassword sets the "access_password" field.
func (u *DocumentUpsert) SetAccessPassword(v string) *DocumentUpsert {
	u.Set(document.FieldAccessPassword, v)
	return u
}

// UpdateAccessPassword sets the "access_password" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateAccessPassword() *DocumentUpsert {
	u.SetExcluded(document.FieldAccessPassword)
	return u
}

// ClearAccessPassword clears the value of the "access_password" field.
func (u *DocumentUpsert) ClearAccessPassword() *DocumentUpsert {
	u.SetNull(document.FieldAccessPassword)
	return u
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *DocumentUpsert) SetRequiresApproval(v bool) *DocumentUpsert {
	u.Set(document.FieldRequiresApproval, v)
	return u
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateRequiresApproval() *DocumentUpsert {
	u.SetExcluded(document.FieldRequiresApproval)
	return u
}

// SetIsApproved sets the "is_approved" field.
func (u *DocumentUpsert) SetIsApproved(v bool) *DocumentUpsert {
	u.Set(document.FieldIsApproved, v)
	return u
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateIsApproved() *DocumentUpsert {
	u.SetExcluded(document.FieldIsApproved)
	return u
}

// SetApprovedBy sets the "approved_by" field.
func (u *DocumentUpsert) SetApprovedBy(v string) *DocumentUpsert {
	u.Set(document.FieldApprovedBy, v)
	return u
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateApprovedBy() *DocumentUpsert {
	u.SetExcluded(document.FieldApprovedBy)
	return u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *DocumentUpsert) ClearApprovedBy() *DocumentUpsert {
	u.SetNull(document.FieldApprovedBy)
	return u
}

// SetApprovedAt sets the "approved_at" field.
func (u *DocumentUpsert) SetApprovedAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldApprovedAt, v)
	return u
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateApprovedAt() *DocumentUpsert {
	u.SetExcluded(document.FieldApprovedAt)
	return u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *DocumentUpsert) ClearApprovedAt() *DocumentUpsert {
	u.SetNull(document.FieldApprovedAt)
	return u
}

// SetDownloadCount sets the "download_count" field.
func (u *DocumentUpsert) SetDownloadCount(v int) *DocumentUpsert {
	u.Set(document.FieldDownloadCount, v)
	return u
}

// UpdateDownloadCount sets the "download_count" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateDownloadCount() *DocumentUpsert {
	u.SetExcluded(document.FieldDownloadCount)
	return u
}

// AddDownloadCount adds v to the "download_count" field.
func (u *DocumentUpsert) AddDownloadCount(v int) *DocumentUpsert {
	u.Add(document.FieldDownloadCount, v)
	return u
}

// SetLastAccessed sets the "last_accessed" field.
func (u *DocumentUpsert) SetLastAccessed(v time.Time) *DocumentUpsert {
	u.Set(document.FieldLastAccessed, v)
	return u
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateLastAccessed() *DocumentUpsert {
	u.SetExcluded(document.FieldLastAccessed)
	return u
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (u *DocumentUpsert) ClearLastAccessed() *DocumentUpsert {
	u.SetNull(document.FieldLastAccessed)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsert) SetUpdatedAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateUpdatedAt() *DocumentUpsert {
	u.SetExcluded(document.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentUpsertOne) UpdateNewValues() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(document.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentUpsertOne) Ignore() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertOne) DoNothing() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreate.OnConflict
// documentation for more info.
func (u *DocumentUpsertOne) Update(set func(*DocumentUpsert)) *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *DocumentUpsertOne) SetTitle(v map[string]string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateTitle() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTitle()
	})
}

// SetType sets the "type" field.
func (u *DocumentUpsertOne) SetType(v document.Type) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateType()
	})
}

// SetFileURL sets the "file_url" field.
func (u *DocumentUpsertOne) SetFileURL(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFileURL(v)
	})
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateFileURL() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFileURL()
	})
}

// SetFileName sets the "file_name" field.
func (u *DocumentUpsertOne) SetFileName(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateFileName() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFileName()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *DocumentUpsertOne) SetMimeType(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateMimeType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *DocumentUpsertOne) ClearMimeType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearMimeType()
	})
}

// SetSize sets the "size" field.
func (u *DocumentUpsertOne) SetSize(v int) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *DocumentUpsertOne) AddSize(v int) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateSize() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *DocumentUpsertOne) ClearSize() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearSize()
	})
}

// SetDescription sets the "description" field.
func (u *DocumentUpsertOne) SetDescription(v map[string]string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateDescription() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentUpsertOne) ClearDescription() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearDescription()
	})
}

// SetTags sets the "tags" field.
func (u *DocumentUpsertOne) SetTags(v []string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateTags() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTags()
	})
}

// SetVersion sets the "version" field.
func (u *DocumentUpsertOne) SetVersion(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateVersion() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateVersion()
	})
}

// SetLanguage sets the "language" field.
func (u *DocumentUpsertOne) SetLanguage(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateLanguage() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLanguage()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *DocumentUpsertOne) SetIsPublic(v bool) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateIsPublic() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *DocumentUpsertOne) SetAllowedRoles(v []string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateAllowedRoles() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetAccessPassword sets the "access_password" field.
func (u *DocumentUpsertOne) SetAccessPassword(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetAccessPassword(v)
	})
}

// UpdateAccessPassword sets the "access_password" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateAccessPassword() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateAccessPassword()
	})
}

// ClearAccessPassword clears the value of the "access_password" field.
func (u *DocumentUpsertOne) ClearAccessPassword() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearAccessPassword()
	})
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *DocumentUpsertOne) SetRequiresApproval(v bool) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetRequiresApproval(v)
	})
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateRequiresApproval() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateRequiresApproval()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *DocumentUpsertOne) SetIsApproved(v bool) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateIsApproved() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIsApproved()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *DocumentUpsertOne) SetApprovedBy(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateApprovedBy() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *DocumentUpsertOne) ClearApprovedBy() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *DocumentUpsertOne) SetApprovedAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateApprovedAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *DocumentUpsertOne) ClearApprovedAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearApprovedAt()
	})
}

// SetDownloadCount sets the "download_count" field.
func (u *DocumentUpsertOne) SetDownloadCount(v int) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDownloadCount(v)
	})
}

// AddDownloadCount adds v to the "download_count" field.
func (u *DocumentUpsertOne) AddDownloadCount(v int) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.AddDownloadCount(v)
	})
}

// UpdateDownloadCount sets the "download_count" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateDownloadCount() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDownloadCount()
	})
}

// SetLastAccessed sets the "last_accessed" field.
func (u *DocumentUpsertOne) SetLastAccessed(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLastAccessed(v)
	})
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateLastAccessed() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLastAccessed()
	})
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (u *DocumentUpsertOne) ClearLastAccessed() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearLastAccessed()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsertOne) SetUpdatedAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateUpdatedAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Document entities in the database.
func (_c *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Document, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *DocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertBulk {
	_c.conflict = opts
	return &DocumentUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DocumentCreateBulk) OnConflictColumns(columns ...string) *DocumentUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertBulk{
		create: _c,
	}
}

// DocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Document nodes.
type DocumentUpsertBulk struct {
	create *DocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentUpsertBulk) UpdateNewValues() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(document.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentUpsertBulk) Ignore() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertBulk) DoNothing() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentUpsertBulk) Update(set func(*DocumentUpsert)) *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *DocumentUpsertBulk) SetTitle(v map[string]string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateTitle() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTitle()
	})
}

// SetType sets the "type" field.
func (u *DocumentUpsertBulk) SetType(v document.Type) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateType()
	})
}

// SetFileURL sets the "file_url" field.
func (u *DocumentUpsertBulk) SetFileURL(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFileURL(v)
	})
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateFileURL() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFileURL()
	})
}

// SetFileName sets the "file_name" field.
func (u *DocumentUpsertBulk) SetFileName(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateFileName() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateFileName()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *DocumentUpsertBulk) SetMimeType(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateMimeType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *DocumentUpsertBulk) ClearMimeType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearMimeType()
	})
}

// SetSize sets the "size" field.
func (u *DocumentUpsertBulk) SetSize(v int) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *DocumentUpsertBulk) AddSize(v int) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateSize() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *DocumentUpsertBulk) ClearSize() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearSize()
	})
}

// SetDescription sets the "description" field.
func (u *DocumentUpsertBulk) SetDescription(v map[string]string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateDescription() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentUpsertBulk) ClearDescription() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearDescription()
	})
}

// SetTags sets the "tags" field.
func (u *DocumentUpsertBulk) SetTags(v []string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateTags() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTags()
	})
}

// SetVersion sets the "version" field.
func (u *DocumentUpsertBulk) SetVersion(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateVersion() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateVersion()
	})
}

// SetLanguage sets the "language" field.
func (u *DocumentUpsertBulk) SetLanguage(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateLanguage() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLanguage()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *DocumentUpsertBulk) SetIsPublic(v bool) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateIsPublic() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIsPublic()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *DocumentUpsertBulk) SetAllowedRoles(v []string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateAllowedRoles() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetAccessPassword sets the "access_password" field.
func (u *DocumentUpsertBulk) SetAccessPassword(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetAccessPassword(v)
	})
}

// UpdateAccessPassword sets the "access_password" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateAccessPassword() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateAccessPassword()
	})
}

// ClearAccessPassword clears the value of the "access_password" field.
func (u *DocumentUpsertBulk) ClearAccessPassword() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearAccessPassword()
	})
}

// SetRequiresApproval sets the "requires_approval" field.
func (u *DocumentUpsertBulk) SetRequiresApproval(v bool) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetRequiresApproval(v)
	})
}

// UpdateRequiresApproval sets the "requires_approval" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateRequiresApproval() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateRequiresApproval()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *DocumentUpsertBulk) SetIsApproved(v bool) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateIsApproved() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIsApproved()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *DocumentUpsertBulk) SetApprovedBy(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateApprovedBy() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *DocumentUpsertBulk) ClearApprovedBy() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *DocumentUpsertBulk) SetApprovedAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateApprovedAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *DocumentUpsertBulk) ClearApprovedAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearApprovedAt()
	})
}

// SetDownloadCount sets the "download_count" field.
func (u *DocumentUpsertBulk) SetDownloadCount(v int) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetDownloadCount(v)
	})
}

// AddDownloadCount adds v to the "download_count" field.
func (u *DocumentUpsertBulk) AddDownloadCount(v int) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.AddDownloadCount(v)
	})
}

// UpdateDownloadCount sets the "download_count" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateDownloadCount() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateDownloadCount()
	})
}

// SetLastAccessed sets the "last_accessed" field.
func (u *DocumentUpsertBulk) SetLastAccessed(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLastAccessed(v)
	})
}

// UpdateLastAccessed sets the "last_accessed" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateLastAccessed() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLastAccessed()
	})
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (u *DocumentUpsertBulk) ClearLastAccessed() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearLastAccessed()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentUpsertBulk) SetUpdatedAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateUpdatedAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
