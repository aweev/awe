// Code generated by ent, DO NOT EDIT.

package blockprogramcards

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldInternalName, v))
}

// Layout applies equality check predicate on the "layout" field. It's identical to LayoutEQ.
func Layout(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldLayout, v))
}

// ItemsPerRow applies equality check predicate on the "items_per_row" field. It's identical to ItemsPerRowEQ.
func ItemsPerRow(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldItemsPerRow, v))
}

// ShowAllPrograms applies equality check predicate on the "show_all_programs" field. It's identical to ShowAllProgramsEQ.
func ShowAllPrograms(v bool) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldShowAllPrograms, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldUpdatedAt, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldContainsFold(FieldInternalName, v))
}

// BadgeIsNil applies the IsNil predicate on the "badge" field.
func BadgeIsNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIsNull(FieldBadge))
}

// BadgeNotNil applies the NotNil predicate on the "badge" field.
func BadgeNotNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotNull(FieldBadge))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotNull(FieldTitle))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotNull(FieldDescription))
}

// LayoutEQ applies the EQ predicate on the "layout" field.
func LayoutEQ(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldLayout, v))
}

// LayoutNEQ applies the NEQ predicate on the "layout" field.
func LayoutNEQ(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldLayout, v))
}

// LayoutIn applies the In predicate on the "layout" field.
func LayoutIn(vs ...string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldLayout, vs...))
}

// LayoutNotIn applies the NotIn predicate on the "layout" field.
func LayoutNotIn(vs ...string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldLayout, vs...))
}

// LayoutGT applies the GT predicate on the "layout" field.
func LayoutGT(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldLayout, v))
}

// LayoutGTE applies the GTE predicate on the "layout" field.
func LayoutGTE(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldLayout, v))
}

// LayoutLT applies the LT predicate on the "layout" field.
func LayoutLT(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldLayout, v))
}

// LayoutLTE applies the LTE predicate on the "layout" field.
func LayoutLTE(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldLayout, v))
}

// LayoutContains applies the Contains predicate on the "layout" field.
func LayoutContains(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldContains(FieldLayout, v))
}

// LayoutHasPrefix applies the HasPrefix predicate on the "layout" field.
func LayoutHasPrefix(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldHasPrefix(FieldLayout, v))
}

// LayoutHasSuffix applies the HasSuffix predicate on the "layout" field.
func LayoutHasSuffix(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldHasSuffix(FieldLayout, v))
}

// LayoutEqualFold applies the EqualFold predicate on the "layout" field.
func LayoutEqualFold(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEqualFold(FieldLayout, v))
}

// LayoutContainsFold applies the ContainsFold predicate on the "layout" field.
func LayoutContainsFold(v string) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldContainsFold(FieldLayout, v))
}

// ItemsPerRowEQ applies the EQ predicate on the "items_per_row" field.
func ItemsPerRowEQ(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldItemsPerRow, v))
}

// ItemsPerRowNEQ applies the NEQ predicate on the "items_per_row" field.
func ItemsPerRowNEQ(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldItemsPerRow, v))
}

// ItemsPerRowIn applies the In predicate on the "items_per_row" field.
func ItemsPerRowIn(vs ...int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldItemsPerRow, vs...))
}

// ItemsPerRowNotIn applies the NotIn predicate on the "items_per_row" field.
func ItemsPerRowNotIn(vs ...int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldItemsPerRow, vs...))
}

// ItemsPerRowGT applies the GT predicate on the "items_per_row" field.
func ItemsPerRowGT(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldItemsPerRow, v))
}

// ItemsPerRowGTE applies the GTE predicate on the "items_per_row" field.
func ItemsPerRowGTE(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldItemsPerRow, v))
}

// ItemsPerRowLT applies the LT predicate on the "items_per_row" field.
func ItemsPerRowLT(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldItemsPerRow, v))
}

// ItemsPerRowLTE applies the LTE predicate on the "items_per_row" field.
func ItemsPerRowLTE(v int) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldItemsPerRow, v))
}

// ShowAllProgramsEQ applies the EQ predicate on the "show_all_programs" field.
func ShowAllProgramsEQ(v bool) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldShowAllPrograms, v))
}

// ShowAllProgramsNEQ applies the NEQ predicate on the "show_all_programs" field.
func ShowAllProgramsNEQ(v bool) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldShowAllPrograms, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedPrograms applies the HasEdge predicate on the "selected_programs" edge.
func HasSelectedPrograms() predicate.BlockProgramCards {
	return predicate.BlockProgramCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SelectedProgramsTable, SelectedProgramsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedProgramsWith applies the HasEdge predicate on the "selected_programs" edge with a given conditions (other predicates).
func HasSelectedProgramsWith(preds ...predicate.ProgramCardItem) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(func(s *sql.Selector) {
		step := newSelectedProgramsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockProgramCards) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockProgramCards) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockProgramCards) predicate.BlockProgramCards {
	return predicate.BlockProgramCards(sql.NotPredicates(p))
}
