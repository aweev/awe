// Code generated by ent, DO NOT EDIT.

package contentblock

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldOrder, v))
}

// IsVisible applies equality check predicate on the "is_visible" field. It's identical to IsVisibleEQ.
func IsVisible(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldIsVisible, v))
}

// HideOnMobile applies equality check predicate on the "hide_on_mobile" field. It's identical to HideOnMobileEQ.
func HideOnMobile(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnMobile, v))
}

// HideOnTablet applies equality check predicate on the "hide_on_tablet" field. It's identical to HideOnTabletEQ.
func HideOnTablet(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnTablet, v))
}

// HideOnDesktop applies equality check predicate on the "hide_on_desktop" field. It's identical to HideOnDesktopEQ.
func HideOnDesktop(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnDesktop, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLTE(FieldOrder, v))
}

// BlockTypeEQ applies the EQ predicate on the "block_type" field.
func BlockTypeEQ(v BlockType) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldBlockType, v))
}

// BlockTypeNEQ applies the NEQ predicate on the "block_type" field.
func BlockTypeNEQ(v BlockType) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldBlockType, v))
}

// BlockTypeIn applies the In predicate on the "block_type" field.
func BlockTypeIn(vs ...BlockType) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIn(FieldBlockType, vs...))
}

// BlockTypeNotIn applies the NotIn predicate on the "block_type" field.
func BlockTypeNotIn(vs ...BlockType) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotIn(FieldBlockType, vs...))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotNull(FieldConfig))
}

// IsVisibleEQ applies the EQ predicate on the "is_visible" field.
func IsVisibleEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldIsVisible, v))
}

// IsVisibleNEQ applies the NEQ predicate on the "is_visible" field.
func IsVisibleNEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldIsVisible, v))
}

// HideOnMobileEQ applies the EQ predicate on the "hide_on_mobile" field.
func HideOnMobileEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnMobile, v))
}

// HideOnMobileNEQ applies the NEQ predicate on the "hide_on_mobile" field.
func HideOnMobileNEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldHideOnMobile, v))
}

// HideOnTabletEQ applies the EQ predicate on the "hide_on_tablet" field.
func HideOnTabletEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnTablet, v))
}

// HideOnTabletNEQ applies the NEQ predicate on the "hide_on_tablet" field.
func HideOnTabletNEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldHideOnTablet, v))
}

// HideOnDesktopEQ applies the EQ predicate on the "hide_on_desktop" field.
func HideOnDesktopEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldHideOnDesktop, v))
}

// HideOnDesktopNEQ applies the NEQ predicate on the "hide_on_desktop" field.
func HideOnDesktopNEQ(v bool) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldHideOnDesktop, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ContentBlock {
	return predicate.ContentBlock(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPage applies the HasEdge predicate on the "page" edge.
func HasPage() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PageTable, PageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPageWith applies the HasEdge predicate on the "page" edge with a given conditions (other predicates).
func HasPageWith(preds ...predicate.Page) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newPageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockHero applies the HasEdge predicate on the "block_hero" edge.
func HasBlockHero() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockHeroTable, BlockHeroColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockHeroWith applies the HasEdge predicate on the "block_hero" edge with a given conditions (other predicates).
func HasBlockHeroWith(preds ...predicate.BlockHero) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockHeroStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockTextContent applies the HasEdge predicate on the "block_text_content" edge.
func HasBlockTextContent() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockTextContentTable, BlockTextContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockTextContentWith applies the HasEdge predicate on the "block_text_content" edge with a given conditions (other predicates).
func HasBlockTextContentWith(preds ...predicate.BlockTextContent) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockTextContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockFaq applies the HasEdge predicate on the "block_faq" edge.
func HasBlockFaq() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockFaqTable, BlockFaqColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockFaqWith applies the HasEdge predicate on the "block_faq" edge with a given conditions (other predicates).
func HasBlockFaqWith(preds ...predicate.BlockFaq) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockFaqStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockCta applies the HasEdge predicate on the "block_cta" edge.
func HasBlockCta() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockCtaTable, BlockCtaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockCtaWith applies the HasEdge predicate on the "block_cta" edge with a given conditions (other predicates).
func HasBlockCtaWith(preds ...predicate.BlockCta) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockCtaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockTestimonials applies the HasEdge predicate on the "block_testimonials" edge.
func HasBlockTestimonials() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockTestimonialsTable, BlockTestimonialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockTestimonialsWith applies the HasEdge predicate on the "block_testimonials" edge with a given conditions (other predicates).
func HasBlockTestimonialsWith(preds ...predicate.BlockTestimonials) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockTestimonialsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockStats applies the HasEdge predicate on the "block_stats" edge.
func HasBlockStats() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockStatsTable, BlockStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockStatsWith applies the HasEdge predicate on the "block_stats" edge with a given conditions (other predicates).
func HasBlockStatsWith(preds ...predicate.BlockStats) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockGallery applies the HasEdge predicate on the "block_gallery" edge.
func HasBlockGallery() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockGalleryTable, BlockGalleryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockGalleryWith applies the HasEdge predicate on the "block_gallery" edge with a given conditions (other predicates).
func HasBlockGalleryWith(preds ...predicate.BlockGallery) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockGalleryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockProgramCards applies the HasEdge predicate on the "block_program_cards" edge.
func HasBlockProgramCards() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockProgramCardsTable, BlockProgramCardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockProgramCardsWith applies the HasEdge predicate on the "block_program_cards" edge with a given conditions (other predicates).
func HasBlockProgramCardsWith(preds ...predicate.BlockProgramCards) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockProgramCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockSuccessStories applies the HasEdge predicate on the "block_success_stories" edge.
func HasBlockSuccessStories() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockSuccessStoriesTable, BlockSuccessStoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockSuccessStoriesWith applies the HasEdge predicate on the "block_success_stories" edge with a given conditions (other predicates).
func HasBlockSuccessStoriesWith(preds ...predicate.BlockSuccessStories) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockSuccessStoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockDonationForm applies the HasEdge predicate on the "block_donation_form" edge.
func HasBlockDonationForm() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockDonationFormTable, BlockDonationFormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockDonationFormWith applies the HasEdge predicate on the "block_donation_form" edge with a given conditions (other predicates).
func HasBlockDonationFormWith(preds ...predicate.BlockDonationForm) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockDonationFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockVolunteerSignup applies the HasEdge predicate on the "block_volunteer_signup" edge.
func HasBlockVolunteerSignup() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockVolunteerSignupTable, BlockVolunteerSignupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockVolunteerSignupWith applies the HasEdge predicate on the "block_volunteer_signup" edge with a given conditions (other predicates).
func HasBlockVolunteerSignupWith(preds ...predicate.BlockVolunteerSignup) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockVolunteerSignupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockNewsletterSignup applies the HasEdge predicate on the "block_newsletter_signup" edge.
func HasBlockNewsletterSignup() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockNewsletterSignupTable, BlockNewsletterSignupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockNewsletterSignupWith applies the HasEdge predicate on the "block_newsletter_signup" edge with a given conditions (other predicates).
func HasBlockNewsletterSignupWith(preds ...predicate.BlockNewsletterSignup) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockNewsletterSignupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockPartnerLogos applies the HasEdge predicate on the "block_partner_logos" edge.
func HasBlockPartnerLogos() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockPartnerLogosTable, BlockPartnerLogosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockPartnerLogosWith applies the HasEdge predicate on the "block_partner_logos" edge with a given conditions (other predicates).
func HasBlockPartnerLogosWith(preds ...predicate.BlockPartnerLogos) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockPartnerLogosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockTeamGrid applies the HasEdge predicate on the "block_team_grid" edge.
func HasBlockTeamGrid() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockTeamGridTable, BlockTeamGridColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockTeamGridWith applies the HasEdge predicate on the "block_team_grid" edge with a given conditions (other predicates).
func HasBlockTeamGridWith(preds ...predicate.BlockTeamGrid) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockTeamGridStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockTimeline applies the HasEdge predicate on the "block_timeline" edge.
func HasBlockTimeline() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockTimelineTable, BlockTimelineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockTimelineWith applies the HasEdge predicate on the "block_timeline" edge with a given conditions (other predicates).
func HasBlockTimelineWith(preds ...predicate.BlockTimeline) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockTimelineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockContactForm applies the HasEdge predicate on the "block_contact_form" edge.
func HasBlockContactForm() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockContactFormTable, BlockContactFormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockContactFormWith applies the HasEdge predicate on the "block_contact_form" edge with a given conditions (other predicates).
func HasBlockContactFormWith(preds ...predicate.BlockContactForm) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockContactFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockVideoEmbed applies the HasEdge predicate on the "block_video_embed" edge.
func HasBlockVideoEmbed() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockVideoEmbedTable, BlockVideoEmbedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockVideoEmbedWith applies the HasEdge predicate on the "block_video_embed" edge with a given conditions (other predicates).
func HasBlockVideoEmbedWith(preds ...predicate.BlockVideoEmbed) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockVideoEmbedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockMap applies the HasEdge predicate on the "block_map" edge.
func HasBlockMap() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockMapTable, BlockMapColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockMapWith applies the HasEdge predicate on the "block_map" edge with a given conditions (other predicates).
func HasBlockMapWith(preds ...predicate.BlockMap) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockMapStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockAccordion applies the HasEdge predicate on the "block_accordion" edge.
func HasBlockAccordion() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockAccordionTable, BlockAccordionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockAccordionWith applies the HasEdge predicate on the "block_accordion" edge with a given conditions (other predicates).
func HasBlockAccordionWith(preds ...predicate.BlockAccordion) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockAccordionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockTabs applies the HasEdge predicate on the "block_tabs" edge.
func HasBlockTabs() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockTabsTable, BlockTabsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockTabsWith applies the HasEdge predicate on the "block_tabs" edge with a given conditions (other predicates).
func HasBlockTabsWith(preds ...predicate.BlockTabs) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockTabsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockDivider applies the HasEdge predicate on the "block_divider" edge.
func HasBlockDivider() predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BlockDividerTable, BlockDividerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockDividerWith applies the HasEdge predicate on the "block_divider" edge with a given conditions (other predicates).
func HasBlockDividerWith(preds ...predicate.BlockDivider) predicate.ContentBlock {
	return predicate.ContentBlock(func(s *sql.Selector) {
		step := newBlockDividerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContentBlock) predicate.ContentBlock {
	return predicate.ContentBlock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContentBlock) predicate.ContentBlock {
	return predicate.ContentBlock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContentBlock) predicate.ContentBlock {
	return predicate.ContentBlock(sql.NotPredicates(p))
}
