// Code generated by ent, DO NOT EDIT.

package contentblock

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contentblock type in the database.
	Label = "content_block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldBlockType holds the string denoting the block_type field in the database.
	FieldBlockType = "block_type"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldIsVisible holds the string denoting the is_visible field in the database.
	FieldIsVisible = "is_visible"
	// FieldHideOnMobile holds the string denoting the hide_on_mobile field in the database.
	FieldHideOnMobile = "hide_on_mobile"
	// FieldHideOnTablet holds the string denoting the hide_on_tablet field in the database.
	FieldHideOnTablet = "hide_on_tablet"
	// FieldHideOnDesktop holds the string denoting the hide_on_desktop field in the database.
	FieldHideOnDesktop = "hide_on_desktop"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePage holds the string denoting the page edge name in mutations.
	EdgePage = "page"
	// EdgeBlockHero holds the string denoting the block_hero edge name in mutations.
	EdgeBlockHero = "block_hero"
	// EdgeBlockTextContent holds the string denoting the block_text_content edge name in mutations.
	EdgeBlockTextContent = "block_text_content"
	// EdgeBlockFaq holds the string denoting the block_faq edge name in mutations.
	EdgeBlockFaq = "block_faq"
	// EdgeBlockCta holds the string denoting the block_cta edge name in mutations.
	EdgeBlockCta = "block_cta"
	// EdgeBlockTestimonials holds the string denoting the block_testimonials edge name in mutations.
	EdgeBlockTestimonials = "block_testimonials"
	// EdgeBlockStats holds the string denoting the block_stats edge name in mutations.
	EdgeBlockStats = "block_stats"
	// EdgeBlockGallery holds the string denoting the block_gallery edge name in mutations.
	EdgeBlockGallery = "block_gallery"
	// EdgeBlockProgramCards holds the string denoting the block_program_cards edge name in mutations.
	EdgeBlockProgramCards = "block_program_cards"
	// EdgeBlockSuccessStories holds the string denoting the block_success_stories edge name in mutations.
	EdgeBlockSuccessStories = "block_success_stories"
	// EdgeBlockDonationForm holds the string denoting the block_donation_form edge name in mutations.
	EdgeBlockDonationForm = "block_donation_form"
	// EdgeBlockVolunteerSignup holds the string denoting the block_volunteer_signup edge name in mutations.
	EdgeBlockVolunteerSignup = "block_volunteer_signup"
	// EdgeBlockNewsletterSignup holds the string denoting the block_newsletter_signup edge name in mutations.
	EdgeBlockNewsletterSignup = "block_newsletter_signup"
	// EdgeBlockPartnerLogos holds the string denoting the block_partner_logos edge name in mutations.
	EdgeBlockPartnerLogos = "block_partner_logos"
	// EdgeBlockTeamGrid holds the string denoting the block_team_grid edge name in mutations.
	EdgeBlockTeamGrid = "block_team_grid"
	// EdgeBlockTimeline holds the string denoting the block_timeline edge name in mutations.
	EdgeBlockTimeline = "block_timeline"
	// EdgeBlockContactForm holds the string denoting the block_contact_form edge name in mutations.
	EdgeBlockContactForm = "block_contact_form"
	// EdgeBlockVideoEmbed holds the string denoting the block_video_embed edge name in mutations.
	EdgeBlockVideoEmbed = "block_video_embed"
	// EdgeBlockMap holds the string denoting the block_map edge name in mutations.
	EdgeBlockMap = "block_map"
	// EdgeBlockAccordion holds the string denoting the block_accordion edge name in mutations.
	EdgeBlockAccordion = "block_accordion"
	// EdgeBlockTabs holds the string denoting the block_tabs edge name in mutations.
	EdgeBlockTabs = "block_tabs"
	// EdgeBlockDivider holds the string denoting the block_divider edge name in mutations.
	EdgeBlockDivider = "block_divider"
	// Table holds the table name of the contentblock in the database.
	Table = "content_blocks"
	// PageTable is the table that holds the page relation/edge.
	PageTable = "content_blocks"
	// PageInverseTable is the table name for the Page entity.
	// It exists in this package in order to avoid circular dependency with the "page" package.
	PageInverseTable = "pages"
	// PageColumn is the table column denoting the page relation/edge.
	PageColumn = "page_blocks"
	// BlockHeroTable is the table that holds the block_hero relation/edge.
	BlockHeroTable = "block_heros"
	// BlockHeroInverseTable is the table name for the BlockHero entity.
	// It exists in this package in order to avoid circular dependency with the "blockhero" package.
	BlockHeroInverseTable = "block_heros"
	// BlockHeroColumn is the table column denoting the block_hero relation/edge.
	BlockHeroColumn = "content_block_block_hero"
	// BlockTextContentTable is the table that holds the block_text_content relation/edge.
	BlockTextContentTable = "block_text_contents"
	// BlockTextContentInverseTable is the table name for the BlockTextContent entity.
	// It exists in this package in order to avoid circular dependency with the "blocktextcontent" package.
	BlockTextContentInverseTable = "block_text_contents"
	// BlockTextContentColumn is the table column denoting the block_text_content relation/edge.
	BlockTextContentColumn = "content_block_block_text_content"
	// BlockFaqTable is the table that holds the block_faq relation/edge.
	BlockFaqTable = "block_faqs"
	// BlockFaqInverseTable is the table name for the BlockFaq entity.
	// It exists in this package in order to avoid circular dependency with the "blockfaq" package.
	BlockFaqInverseTable = "block_faqs"
	// BlockFaqColumn is the table column denoting the block_faq relation/edge.
	BlockFaqColumn = "content_block_block_faq"
	// BlockCtaTable is the table that holds the block_cta relation/edge.
	BlockCtaTable = "block_cta"
	// BlockCtaInverseTable is the table name for the BlockCta entity.
	// It exists in this package in order to avoid circular dependency with the "blockcta" package.
	BlockCtaInverseTable = "block_cta"
	// BlockCtaColumn is the table column denoting the block_cta relation/edge.
	BlockCtaColumn = "content_block_block_cta"
	// BlockTestimonialsTable is the table that holds the block_testimonials relation/edge.
	BlockTestimonialsTable = "block_testimonials"
	// BlockTestimonialsInverseTable is the table name for the BlockTestimonials entity.
	// It exists in this package in order to avoid circular dependency with the "blocktestimonials" package.
	BlockTestimonialsInverseTable = "block_testimonials"
	// BlockTestimonialsColumn is the table column denoting the block_testimonials relation/edge.
	BlockTestimonialsColumn = "content_block_block_testimonials"
	// BlockStatsTable is the table that holds the block_stats relation/edge.
	BlockStatsTable = "block_stats"
	// BlockStatsInverseTable is the table name for the BlockStats entity.
	// It exists in this package in order to avoid circular dependency with the "blockstats" package.
	BlockStatsInverseTable = "block_stats"
	// BlockStatsColumn is the table column denoting the block_stats relation/edge.
	BlockStatsColumn = "content_block_block_stats"
	// BlockGalleryTable is the table that holds the block_gallery relation/edge.
	BlockGalleryTable = "block_galleries"
	// BlockGalleryInverseTable is the table name for the BlockGallery entity.
	// It exists in this package in order to avoid circular dependency with the "blockgallery" package.
	BlockGalleryInverseTable = "block_galleries"
	// BlockGalleryColumn is the table column denoting the block_gallery relation/edge.
	BlockGalleryColumn = "content_block_block_gallery"
	// BlockProgramCardsTable is the table that holds the block_program_cards relation/edge.
	BlockProgramCardsTable = "block_program_cards"
	// BlockProgramCardsInverseTable is the table name for the BlockProgramCards entity.
	// It exists in this package in order to avoid circular dependency with the "blockprogramcards" package.
	BlockProgramCardsInverseTable = "block_program_cards"
	// BlockProgramCardsColumn is the table column denoting the block_program_cards relation/edge.
	BlockProgramCardsColumn = "content_block_block_program_cards"
	// BlockSuccessStoriesTable is the table that holds the block_success_stories relation/edge.
	BlockSuccessStoriesTable = "block_success_stories"
	// BlockSuccessStoriesInverseTable is the table name for the BlockSuccessStories entity.
	// It exists in this package in order to avoid circular dependency with the "blocksuccessstories" package.
	BlockSuccessStoriesInverseTable = "block_success_stories"
	// BlockSuccessStoriesColumn is the table column denoting the block_success_stories relation/edge.
	BlockSuccessStoriesColumn = "content_block_block_success_stories"
	// BlockDonationFormTable is the table that holds the block_donation_form relation/edge.
	BlockDonationFormTable = "block_donation_forms"
	// BlockDonationFormInverseTable is the table name for the BlockDonationForm entity.
	// It exists in this package in order to avoid circular dependency with the "blockdonationform" package.
	BlockDonationFormInverseTable = "block_donation_forms"
	// BlockDonationFormColumn is the table column denoting the block_donation_form relation/edge.
	BlockDonationFormColumn = "content_block_block_donation_form"
	// BlockVolunteerSignupTable is the table that holds the block_volunteer_signup relation/edge.
	BlockVolunteerSignupTable = "block_volunteer_signups"
	// BlockVolunteerSignupInverseTable is the table name for the BlockVolunteerSignup entity.
	// It exists in this package in order to avoid circular dependency with the "blockvolunteersignup" package.
	BlockVolunteerSignupInverseTable = "block_volunteer_signups"
	// BlockVolunteerSignupColumn is the table column denoting the block_volunteer_signup relation/edge.
	BlockVolunteerSignupColumn = "content_block_block_volunteer_signup"
	// BlockNewsletterSignupTable is the table that holds the block_newsletter_signup relation/edge.
	BlockNewsletterSignupTable = "block_newsletter_signups"
	// BlockNewsletterSignupInverseTable is the table name for the BlockNewsletterSignup entity.
	// It exists in this package in order to avoid circular dependency with the "blocknewslettersignup" package.
	BlockNewsletterSignupInverseTable = "block_newsletter_signups"
	// BlockNewsletterSignupColumn is the table column denoting the block_newsletter_signup relation/edge.
	BlockNewsletterSignupColumn = "content_block_block_newsletter_signup"
	// BlockPartnerLogosTable is the table that holds the block_partner_logos relation/edge.
	BlockPartnerLogosTable = "block_partner_logos"
	// BlockPartnerLogosInverseTable is the table name for the BlockPartnerLogos entity.
	// It exists in this package in order to avoid circular dependency with the "blockpartnerlogos" package.
	BlockPartnerLogosInverseTable = "block_partner_logos"
	// BlockPartnerLogosColumn is the table column denoting the block_partner_logos relation/edge.
	BlockPartnerLogosColumn = "content_block_block_partner_logos"
	// BlockTeamGridTable is the table that holds the block_team_grid relation/edge.
	BlockTeamGridTable = "block_team_grids"
	// BlockTeamGridInverseTable is the table name for the BlockTeamGrid entity.
	// It exists in this package in order to avoid circular dependency with the "blockteamgrid" package.
	BlockTeamGridInverseTable = "block_team_grids"
	// BlockTeamGridColumn is the table column denoting the block_team_grid relation/edge.
	BlockTeamGridColumn = "content_block_block_team_grid"
	// BlockTimelineTable is the table that holds the block_timeline relation/edge.
	BlockTimelineTable = "block_timelines"
	// BlockTimelineInverseTable is the table name for the BlockTimeline entity.
	// It exists in this package in order to avoid circular dependency with the "blocktimeline" package.
	BlockTimelineInverseTable = "block_timelines"
	// BlockTimelineColumn is the table column denoting the block_timeline relation/edge.
	BlockTimelineColumn = "content_block_block_timeline"
	// BlockContactFormTable is the table that holds the block_contact_form relation/edge.
	BlockContactFormTable = "block_contact_forms"
	// BlockContactFormInverseTable is the table name for the BlockContactForm entity.
	// It exists in this package in order to avoid circular dependency with the "blockcontactform" package.
	BlockContactFormInverseTable = "block_contact_forms"
	// BlockContactFormColumn is the table column denoting the block_contact_form relation/edge.
	BlockContactFormColumn = "content_block_block_contact_form"
	// BlockVideoEmbedTable is the table that holds the block_video_embed relation/edge.
	BlockVideoEmbedTable = "block_video_embeds"
	// BlockVideoEmbedInverseTable is the table name for the BlockVideoEmbed entity.
	// It exists in this package in order to avoid circular dependency with the "blockvideoembed" package.
	BlockVideoEmbedInverseTable = "block_video_embeds"
	// BlockVideoEmbedColumn is the table column denoting the block_video_embed relation/edge.
	BlockVideoEmbedColumn = "content_block_block_video_embed"
	// BlockMapTable is the table that holds the block_map relation/edge.
	BlockMapTable = "block_maps"
	// BlockMapInverseTable is the table name for the BlockMap entity.
	// It exists in this package in order to avoid circular dependency with the "blockmap" package.
	BlockMapInverseTable = "block_maps"
	// BlockMapColumn is the table column denoting the block_map relation/edge.
	BlockMapColumn = "content_block_block_map"
	// BlockAccordionTable is the table that holds the block_accordion relation/edge.
	BlockAccordionTable = "block_accordions"
	// BlockAccordionInverseTable is the table name for the BlockAccordion entity.
	// It exists in this package in order to avoid circular dependency with the "blockaccordion" package.
	BlockAccordionInverseTable = "block_accordions"
	// BlockAccordionColumn is the table column denoting the block_accordion relation/edge.
	BlockAccordionColumn = "content_block_block_accordion"
	// BlockTabsTable is the table that holds the block_tabs relation/edge.
	BlockTabsTable = "block_tabs"
	// BlockTabsInverseTable is the table name for the BlockTabs entity.
	// It exists in this package in order to avoid circular dependency with the "blocktabs" package.
	BlockTabsInverseTable = "block_tabs"
	// BlockTabsColumn is the table column denoting the block_tabs relation/edge.
	BlockTabsColumn = "content_block_block_tabs"
	// BlockDividerTable is the table that holds the block_divider relation/edge.
	BlockDividerTable = "block_dividers"
	// BlockDividerInverseTable is the table name for the BlockDivider entity.
	// It exists in this package in order to avoid circular dependency with the "blockdivider" package.
	BlockDividerInverseTable = "block_dividers"
	// BlockDividerColumn is the table column denoting the block_divider relation/edge.
	BlockDividerColumn = "content_block_block_divider"
)

// Columns holds all SQL columns for contentblock fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldBlockType,
	FieldConfig,
	FieldIsVisible,
	FieldHideOnMobile,
	FieldHideOnTablet,
	FieldHideOnDesktop,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "content_blocks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"page_blocks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsVisible holds the default value on creation for the "is_visible" field.
	DefaultIsVisible bool
	// DefaultHideOnMobile holds the default value on creation for the "hide_on_mobile" field.
	DefaultHideOnMobile bool
	// DefaultHideOnTablet holds the default value on creation for the "hide_on_tablet" field.
	DefaultHideOnTablet bool
	// DefaultHideOnDesktop holds the default value on creation for the "hide_on_desktop" field.
	DefaultHideOnDesktop bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// BlockType defines the type for the "block_type" enum field.
type BlockType string

// BlockType values.
const (
	BlockTypeHERO              BlockType = "HERO"
	BlockTypeFAQ               BlockType = "FAQ"
	BlockTypeCTA               BlockType = "CTA"
	BlockTypeTESTIMONIALS      BlockType = "TESTIMONIALS"
	BlockTypeSTATS             BlockType = "STATS"
	BlockTypeGALLERY           BlockType = "GALLERY"
	BlockTypeTEXT_CONTENT      BlockType = "TEXT_CONTENT"
	BlockTypePROGRAM_CARDS     BlockType = "PROGRAM_CARDS"
	BlockTypeSUCCESS_STORIES   BlockType = "SUCCESS_STORIES"
	BlockTypeDONATION_FORM     BlockType = "DONATION_FORM"
	BlockTypeVOLUNTEER_SIGNUP  BlockType = "VOLUNTEER_SIGNUP"
	BlockTypeNEWSLETTER_SIGNUP BlockType = "NEWSLETTER_SIGNUP"
	BlockTypePARTNER_LOGOS     BlockType = "PARTNER_LOGOS"
	BlockTypeTEAM_GRID         BlockType = "TEAM_GRID"
	BlockTypeTIMELINE          BlockType = "TIMELINE"
	BlockTypeCONTACT_FORM      BlockType = "CONTACT_FORM"
	BlockTypeVIDEO_EMBED       BlockType = "VIDEO_EMBED"
	BlockTypeMAP               BlockType = "MAP"
	BlockTypeACCORDION         BlockType = "ACCORDION"
	BlockTypeTABS              BlockType = "TABS"
	BlockTypeDIVIDER           BlockType = "DIVIDER"
)

func (bt BlockType) String() string {
	return string(bt)
}

// BlockTypeValidator is a validator for the "block_type" field enum values. It is called by the builders before save.
func BlockTypeValidator(bt BlockType) error {
	switch bt {
	case BlockTypeHERO, BlockTypeFAQ, BlockTypeCTA, BlockTypeTESTIMONIALS, BlockTypeSTATS, BlockTypeGALLERY, BlockTypeTEXT_CONTENT, BlockTypePROGRAM_CARDS, BlockTypeSUCCESS_STORIES, BlockTypeDONATION_FORM, BlockTypeVOLUNTEER_SIGNUP, BlockTypeNEWSLETTER_SIGNUP, BlockTypePARTNER_LOGOS, BlockTypeTEAM_GRID, BlockTypeTIMELINE, BlockTypeCONTACT_FORM, BlockTypeVIDEO_EMBED, BlockTypeMAP, BlockTypeACCORDION, BlockTypeTABS, BlockTypeDIVIDER:
		return nil
	default:
		return fmt.Errorf("contentblock: invalid enum value for block_type field: %q", bt)
	}
}

// OrderOption defines the ordering options for the ContentBlock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByBlockType orders the results by the block_type field.
func ByBlockType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockType, opts...).ToFunc()
}

// ByIsVisible orders the results by the is_visible field.
func ByIsVisible(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVisible, opts...).ToFunc()
}

// ByHideOnMobile orders the results by the hide_on_mobile field.
func ByHideOnMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideOnMobile, opts...).ToFunc()
}

// ByHideOnTablet orders the results by the hide_on_tablet field.
func ByHideOnTablet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideOnTablet, opts...).ToFunc()
}

// ByHideOnDesktop orders the results by the hide_on_desktop field.
func ByHideOnDesktop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideOnDesktop, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPageField orders the results by page field.
func ByPageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPageStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockHeroField orders the results by block_hero field.
func ByBlockHeroField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockHeroStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockTextContentField orders the results by block_text_content field.
func ByBlockTextContentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockTextContentStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockFaqField orders the results by block_faq field.
func ByBlockFaqField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockFaqStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockCtaField orders the results by block_cta field.
func ByBlockCtaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockCtaStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockTestimonialsField orders the results by block_testimonials field.
func ByBlockTestimonialsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockTestimonialsStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockStatsField orders the results by block_stats field.
func ByBlockStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStatsStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockGalleryField orders the results by block_gallery field.
func ByBlockGalleryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockGalleryStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockProgramCardsField orders the results by block_program_cards field.
func ByBlockProgramCardsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockProgramCardsStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockSuccessStoriesField orders the results by block_success_stories field.
func ByBlockSuccessStoriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockSuccessStoriesStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockDonationFormField orders the results by block_donation_form field.
func ByBlockDonationFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockDonationFormStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockVolunteerSignupField orders the results by block_volunteer_signup field.
func ByBlockVolunteerSignupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockVolunteerSignupStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockNewsletterSignupField orders the results by block_newsletter_signup field.
func ByBlockNewsletterSignupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockNewsletterSignupStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockPartnerLogosField orders the results by block_partner_logos field.
func ByBlockPartnerLogosField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockPartnerLogosStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockTeamGridField orders the results by block_team_grid field.
func ByBlockTeamGridField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockTeamGridStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockTimelineField orders the results by block_timeline field.
func ByBlockTimelineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockTimelineStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockContactFormField orders the results by block_contact_form field.
func ByBlockContactFormField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockContactFormStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockVideoEmbedField orders the results by block_video_embed field.
func ByBlockVideoEmbedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockVideoEmbedStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockMapField orders the results by block_map field.
func ByBlockMapField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockMapStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockAccordionField orders the results by block_accordion field.
func ByBlockAccordionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockAccordionStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockTabsField orders the results by block_tabs field.
func ByBlockTabsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockTabsStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockDividerField orders the results by block_divider field.
func ByBlockDividerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockDividerStep(), sql.OrderByField(field, opts...))
	}
}
func newPageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PageTable, PageColumn),
	)
}
func newBlockHeroStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockHeroInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockHeroTable, BlockHeroColumn),
	)
}
func newBlockTextContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockTextContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockTextContentTable, BlockTextContentColumn),
	)
}
func newBlockFaqStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockFaqInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockFaqTable, BlockFaqColumn),
	)
}
func newBlockCtaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockCtaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockCtaTable, BlockCtaColumn),
	)
}
func newBlockTestimonialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockTestimonialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockTestimonialsTable, BlockTestimonialsColumn),
	)
}
func newBlockStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockStatsTable, BlockStatsColumn),
	)
}
func newBlockGalleryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockGalleryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockGalleryTable, BlockGalleryColumn),
	)
}
func newBlockProgramCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockProgramCardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockProgramCardsTable, BlockProgramCardsColumn),
	)
}
func newBlockSuccessStoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockSuccessStoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockSuccessStoriesTable, BlockSuccessStoriesColumn),
	)
}
func newBlockDonationFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockDonationFormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockDonationFormTable, BlockDonationFormColumn),
	)
}
func newBlockVolunteerSignupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockVolunteerSignupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockVolunteerSignupTable, BlockVolunteerSignupColumn),
	)
}
func newBlockNewsletterSignupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockNewsletterSignupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockNewsletterSignupTable, BlockNewsletterSignupColumn),
	)
}
func newBlockPartnerLogosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockPartnerLogosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockPartnerLogosTable, BlockPartnerLogosColumn),
	)
}
func newBlockTeamGridStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockTeamGridInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockTeamGridTable, BlockTeamGridColumn),
	)
}
func newBlockTimelineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockTimelineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockTimelineTable, BlockTimelineColumn),
	)
}
func newBlockContactFormStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockContactFormInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockContactFormTable, BlockContactFormColumn),
	)
}
func newBlockVideoEmbedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockVideoEmbedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockVideoEmbedTable, BlockVideoEmbedColumn),
	)
}
func newBlockMapStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockMapInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockMapTable, BlockMapColumn),
	)
}
func newBlockAccordionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockAccordionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockAccordionTable, BlockAccordionColumn),
	)
}
func newBlockTabsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockTabsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockTabsTable, BlockTabsColumn),
	)
}
func newBlockDividerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockDividerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BlockDividerTable, BlockDividerColumn),
	)
}
