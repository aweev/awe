// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/user"
	"awe/ent/ent/volunteerapplication"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VolunteerApplicationCreate is the builder for creating a VolunteerApplication entity.
type VolunteerApplicationCreate struct {
	config
	mutation *VolunteerApplicationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *VolunteerApplicationCreate) SetStatus(v volunteerapplication.Status) *VolunteerApplicationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableStatus(v *volunteerapplication.Status) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetMotivation sets the "motivation" field.
func (_c *VolunteerApplicationCreate) SetMotivation(v string) *VolunteerApplicationCreate {
	_c.mutation.SetMotivation(v)
	return _c
}

// SetAvailability sets the "availability" field.
func (_c *VolunteerApplicationCreate) SetAvailability(v map[string]interface{}) *VolunteerApplicationCreate {
	_c.mutation.SetAvailability(v)
	return _c
}

// SetBackgroundCheck sets the "background_check" field.
func (_c *VolunteerApplicationCreate) SetBackgroundCheck(v bool) *VolunteerApplicationCreate {
	_c.mutation.SetBackgroundCheck(v)
	return _c
}

// SetNillableBackgroundCheck sets the "background_check" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableBackgroundCheck(v *bool) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetBackgroundCheck(*v)
	}
	return _c
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (_c *VolunteerApplicationCreate) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationCreate {
	_c.mutation.SetBackgroundCheckDate(v)
	return _c
}

// SetNillableBackgroundCheckDate sets the "background_check_date" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableBackgroundCheckDate(v *time.Time) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetBackgroundCheckDate(*v)
	}
	return _c
}

// SetReferences sets the "references" field.
func (_c *VolunteerApplicationCreate) SetReferences(v []map[string]interface{}) *VolunteerApplicationCreate {
	_c.mutation.SetReferences(v)
	return _c
}

// SetEmergencyContact sets the "emergency_contact" field.
func (_c *VolunteerApplicationCreate) SetEmergencyContact(v map[string]string) *VolunteerApplicationCreate {
	_c.mutation.SetEmergencyContact(v)
	return _c
}

// SetReviewedBy sets the "reviewed_by" field.
func (_c *VolunteerApplicationCreate) SetReviewedBy(v string) *VolunteerApplicationCreate {
	_c.mutation.SetReviewedBy(v)
	return _c
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableReviewedBy(v *string) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetReviewedBy(*v)
	}
	return _c
}

// SetReviewedAt sets the "reviewed_at" field.
func (_c *VolunteerApplicationCreate) SetReviewedAt(v time.Time) *VolunteerApplicationCreate {
	_c.mutation.SetReviewedAt(v)
	return _c
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableReviewedAt(v *time.Time) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetReviewedAt(*v)
	}
	return _c
}

// SetReviewNotes sets the "review_notes" field.
func (_c *VolunteerApplicationCreate) SetReviewNotes(v string) *VolunteerApplicationCreate {
	_c.mutation.SetReviewNotes(v)
	return _c
}

// SetNillableReviewNotes sets the "review_notes" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableReviewNotes(v *string) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetReviewNotes(*v)
	}
	return _c
}

// SetInterviewDate sets the "interview_date" field.
func (_c *VolunteerApplicationCreate) SetInterviewDate(v time.Time) *VolunteerApplicationCreate {
	_c.mutation.SetInterviewDate(v)
	return _c
}

// SetNillableInterviewDate sets the "interview_date" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableInterviewDate(v *time.Time) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetInterviewDate(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *VolunteerApplicationCreate) SetCreatedAt(v time.Time) *VolunteerApplicationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableCreatedAt(v *time.Time) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *VolunteerApplicationCreate) SetUpdatedAt(v time.Time) *VolunteerApplicationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *VolunteerApplicationCreate) SetNillableUpdatedAt(v *time.Time) *VolunteerApplicationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *VolunteerApplicationCreate) SetUserID(id int) *VolunteerApplicationCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *VolunteerApplicationCreate) SetUser(v *User) *VolunteerApplicationCreate {
	return _c.SetUserID(v.ID)
}

// AddInterestedOpportunityIDs adds the "interested_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_c *VolunteerApplicationCreate) AddInterestedOpportunityIDs(ids ...int) *VolunteerApplicationCreate {
	_c.mutation.AddInterestedOpportunityIDs(ids...)
	return _c
}

// AddInterestedOpportunities adds the "interested_opportunities" edges to the VolunteerOpportunity entity.
func (_c *VolunteerApplicationCreate) AddInterestedOpportunities(v ...*VolunteerOpportunity) *VolunteerApplicationCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInterestedOpportunityIDs(ids...)
}

// Mutation returns the VolunteerApplicationMutation object of the builder.
func (_c *VolunteerApplicationCreate) Mutation() *VolunteerApplicationMutation {
	return _c.mutation
}

// Save creates the VolunteerApplication in the database.
func (_c *VolunteerApplicationCreate) Save(ctx context.Context) (*VolunteerApplication, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VolunteerApplicationCreate) SaveX(ctx context.Context) *VolunteerApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerApplicationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerApplicationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VolunteerApplicationCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := volunteerapplication.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.BackgroundCheck(); !ok {
		v := volunteerapplication.DefaultBackgroundCheck
		_c.mutation.SetBackgroundCheck(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := volunteerapplication.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := volunteerapplication.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VolunteerApplicationCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "VolunteerApplication.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := volunteerapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "VolunteerApplication.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Motivation(); !ok {
		return &ValidationError{Name: "motivation", err: errors.New(`ent: missing required field "VolunteerApplication.motivation"`)}
	}
	if _, ok := _c.mutation.Availability(); !ok {
		return &ValidationError{Name: "availability", err: errors.New(`ent: missing required field "VolunteerApplication.availability"`)}
	}
	if _, ok := _c.mutation.BackgroundCheck(); !ok {
		return &ValidationError{Name: "background_check", err: errors.New(`ent: missing required field "VolunteerApplication.background_check"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VolunteerApplication.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VolunteerApplication.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "VolunteerApplication.user"`)}
	}
	return nil
}

func (_c *VolunteerApplicationCreate) sqlSave(ctx context.Context) (*VolunteerApplication, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VolunteerApplicationCreate) createSpec() (*VolunteerApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &VolunteerApplication{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(volunteerapplication.Table, sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(volunteerapplication.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Motivation(); ok {
		_spec.SetField(volunteerapplication.FieldMotivation, field.TypeString, value)
		_node.Motivation = value
	}
	if value, ok := _c.mutation.Availability(); ok {
		_spec.SetField(volunteerapplication.FieldAvailability, field.TypeJSON, value)
		_node.Availability = value
	}
	if value, ok := _c.mutation.BackgroundCheck(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheck, field.TypeBool, value)
		_node.BackgroundCheck = value
	}
	if value, ok := _c.mutation.BackgroundCheckDate(); ok {
		_spec.SetField(volunteerapplication.FieldBackgroundCheckDate, field.TypeTime, value)
		_node.BackgroundCheckDate = value
	}
	if value, ok := _c.mutation.References(); ok {
		_spec.SetField(volunteerapplication.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := _c.mutation.EmergencyContact(); ok {
		_spec.SetField(volunteerapplication.FieldEmergencyContact, field.TypeJSON, value)
		_node.EmergencyContact = value
	}
	if value, ok := _c.mutation.ReviewedBy(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedBy, field.TypeString, value)
		_node.ReviewedBy = value
	}
	if value, ok := _c.mutation.ReviewedAt(); ok {
		_spec.SetField(volunteerapplication.FieldReviewedAt, field.TypeTime, value)
		_node.ReviewedAt = value
	}
	if value, ok := _c.mutation.ReviewNotes(); ok {
		_spec.SetField(volunteerapplication.FieldReviewNotes, field.TypeString, value)
		_node.ReviewNotes = value
	}
	if value, ok := _c.mutation.InterviewDate(); ok {
		_spec.SetField(volunteerapplication.FieldInterviewDate, field.TypeTime, value)
		_node.InterviewDate = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(volunteerapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_volunteer_applications = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InterestedOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerApplication.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerApplicationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerApplicationCreate) OnConflict(opts ...sql.ConflictOption) *VolunteerApplicationUpsertOne {
	_c.conflict = opts
	return &VolunteerApplicationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerApplicationCreate) OnConflictColumns(columns ...string) *VolunteerApplicationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerApplicationUpsertOne{
		create: _c,
	}
}

type (
	// VolunteerApplicationUpsertOne is the builder for "upsert"-ing
	//  one VolunteerApplication node.
	VolunteerApplicationUpsertOne struct {
		create *VolunteerApplicationCreate
	}

	// VolunteerApplicationUpsert is the "OnConflict" setter.
	VolunteerApplicationUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *VolunteerApplicationUpsert) SetStatus(v volunteerapplication.Status) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateStatus() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldStatus)
	return u
}

// SetMotivation sets the "motivation" field.
func (u *VolunteerApplicationUpsert) SetMotivation(v string) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldMotivation, v)
	return u
}

// UpdateMotivation sets the "motivation" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateMotivation() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldMotivation)
	return u
}

// SetAvailability sets the "availability" field.
func (u *VolunteerApplicationUpsert) SetAvailability(v map[string]interface{}) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldAvailability, v)
	return u
}

// UpdateAvailability sets the "availability" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateAvailability() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldAvailability)
	return u
}

// SetBackgroundCheck sets the "background_check" field.
func (u *VolunteerApplicationUpsert) SetBackgroundCheck(v bool) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldBackgroundCheck, v)
	return u
}

// UpdateBackgroundCheck sets the "background_check" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateBackgroundCheck() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldBackgroundCheck)
	return u
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (u *VolunteerApplicationUpsert) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldBackgroundCheckDate, v)
	return u
}

// UpdateBackgroundCheckDate sets the "background_check_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateBackgroundCheckDate() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldBackgroundCheckDate)
	return u
}

// ClearBackgroundCheckDate clears the value of the "background_check_date" field.
func (u *VolunteerApplicationUpsert) ClearBackgroundCheckDate() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldBackgroundCheckDate)
	return u
}

// SetReferences sets the "references" field.
func (u *VolunteerApplicationUpsert) SetReferences(v []map[string]interface{}) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldReferences, v)
	return u
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateReferences() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldReferences)
	return u
}

// ClearReferences clears the value of the "references" field.
func (u *VolunteerApplicationUpsert) ClearReferences() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldReferences)
	return u
}

// SetEmergencyContact sets the "emergency_contact" field.
func (u *VolunteerApplicationUpsert) SetEmergencyContact(v map[string]string) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldEmergencyContact, v)
	return u
}

// UpdateEmergencyContact sets the "emergency_contact" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateEmergencyContact() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldEmergencyContact)
	return u
}

// ClearEmergencyContact clears the value of the "emergency_contact" field.
func (u *VolunteerApplicationUpsert) ClearEmergencyContact() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldEmergencyContact)
	return u
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *VolunteerApplicationUpsert) SetReviewedBy(v string) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldReviewedBy, v)
	return u
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateReviewedBy() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldReviewedBy)
	return u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *VolunteerApplicationUpsert) ClearReviewedBy() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldReviewedBy)
	return u
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *VolunteerApplicationUpsert) SetReviewedAt(v time.Time) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldReviewedAt, v)
	return u
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateReviewedAt() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldReviewedAt)
	return u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *VolunteerApplicationUpsert) ClearReviewedAt() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldReviewedAt)
	return u
}

// SetReviewNotes sets the "review_notes" field.
func (u *VolunteerApplicationUpsert) SetReviewNotes(v string) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldReviewNotes, v)
	return u
}

// UpdateReviewNotes sets the "review_notes" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateReviewNotes() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldReviewNotes)
	return u
}

// ClearReviewNotes clears the value of the "review_notes" field.
func (u *VolunteerApplicationUpsert) ClearReviewNotes() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldReviewNotes)
	return u
}

// SetInterviewDate sets the "interview_date" field.
func (u *VolunteerApplicationUpsert) SetInterviewDate(v time.Time) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldInterviewDate, v)
	return u
}

// UpdateInterviewDate sets the "interview_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateInterviewDate() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldInterviewDate)
	return u
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (u *VolunteerApplicationUpsert) ClearInterviewDate() *VolunteerApplicationUpsert {
	u.SetNull(volunteerapplication.FieldInterviewDate)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerApplicationUpsert) SetUpdatedAt(v time.Time) *VolunteerApplicationUpsert {
	u.Set(volunteerapplication.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsert) UpdateUpdatedAt() *VolunteerApplicationUpsert {
	u.SetExcluded(volunteerapplication.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerApplicationUpsertOne) UpdateNewValues() *VolunteerApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(volunteerapplication.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VolunteerApplicationUpsertOne) Ignore() *VolunteerApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerApplicationUpsertOne) DoNothing() *VolunteerApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerApplicationCreate.OnConflict
// documentation for more info.
func (u *VolunteerApplicationUpsertOne) Update(set func(*VolunteerApplicationUpsert)) *VolunteerApplicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerApplicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VolunteerApplicationUpsertOne) SetStatus(v volunteerapplication.Status) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateStatus() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateStatus()
	})
}

// SetMotivation sets the "motivation" field.
func (u *VolunteerApplicationUpsertOne) SetMotivation(v string) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetMotivation(v)
	})
}

// UpdateMotivation sets the "motivation" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateMotivation() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateMotivation()
	})
}

// SetAvailability sets the "availability" field.
func (u *VolunteerApplicationUpsertOne) SetAvailability(v map[string]interface{}) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetAvailability(v)
	})
}

// UpdateAvailability sets the "availability" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateAvailability() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateAvailability()
	})
}

// SetBackgroundCheck sets the "background_check" field.
func (u *VolunteerApplicationUpsertOne) SetBackgroundCheck(v bool) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetBackgroundCheck(v)
	})
}

// UpdateBackgroundCheck sets the "background_check" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateBackgroundCheck() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateBackgroundCheck()
	})
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (u *VolunteerApplicationUpsertOne) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetBackgroundCheckDate(v)
	})
}

// UpdateBackgroundCheckDate sets the "background_check_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateBackgroundCheckDate() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateBackgroundCheckDate()
	})
}

// ClearBackgroundCheckDate clears the value of the "background_check_date" field.
func (u *VolunteerApplicationUpsertOne) ClearBackgroundCheckDate() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearBackgroundCheckDate()
	})
}

// SetReferences sets the "references" field.
func (u *VolunteerApplicationUpsertOne) SetReferences(v []map[string]interface{}) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReferences(v)
	})
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateReferences() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReferences()
	})
}

// ClearReferences clears the value of the "references" field.
func (u *VolunteerApplicationUpsertOne) ClearReferences() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReferences()
	})
}

// SetEmergencyContact sets the "emergency_contact" field.
func (u *VolunteerApplicationUpsertOne) SetEmergencyContact(v map[string]string) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetEmergencyContact(v)
	})
}

// UpdateEmergencyContact sets the "emergency_contact" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateEmergencyContact() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateEmergencyContact()
	})
}

// ClearEmergencyContact clears the value of the "emergency_contact" field.
func (u *VolunteerApplicationUpsertOne) ClearEmergencyContact() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearEmergencyContact()
	})
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *VolunteerApplicationUpsertOne) SetReviewedBy(v string) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewedBy(v)
	})
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateReviewedBy() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewedBy()
	})
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *VolunteerApplicationUpsertOne) ClearReviewedBy() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewedBy()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *VolunteerApplicationUpsertOne) SetReviewedAt(v time.Time) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateReviewedAt() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *VolunteerApplicationUpsertOne) ClearReviewedAt() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewedAt()
	})
}

// SetReviewNotes sets the "review_notes" field.
func (u *VolunteerApplicationUpsertOne) SetReviewNotes(v string) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewNotes(v)
	})
}

// UpdateReviewNotes sets the "review_notes" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateReviewNotes() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewNotes()
	})
}

// ClearReviewNotes clears the value of the "review_notes" field.
func (u *VolunteerApplicationUpsertOne) ClearReviewNotes() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewNotes()
	})
}

// SetInterviewDate sets the "interview_date" field.
func (u *VolunteerApplicationUpsertOne) SetInterviewDate(v time.Time) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetInterviewDate(v)
	})
}

// UpdateInterviewDate sets the "interview_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateInterviewDate() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateInterviewDate()
	})
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (u *VolunteerApplicationUpsertOne) ClearInterviewDate() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearInterviewDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerApplicationUpsertOne) SetUpdatedAt(v time.Time) *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertOne) UpdateUpdatedAt() *VolunteerApplicationUpsertOne {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerApplicationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerApplicationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerApplicationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VolunteerApplicationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VolunteerApplicationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VolunteerApplicationCreateBulk is the builder for creating many VolunteerApplication entities in bulk.
type VolunteerApplicationCreateBulk struct {
	config
	err      error
	builders []*VolunteerApplicationCreate
	conflict []sql.ConflictOption
}

// Save creates the VolunteerApplication entities in the database.
func (_c *VolunteerApplicationCreateBulk) Save(ctx context.Context) ([]*VolunteerApplication, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*VolunteerApplication, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VolunteerApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VolunteerApplicationCreateBulk) SaveX(ctx context.Context) []*VolunteerApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VolunteerApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VolunteerApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VolunteerApplication.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VolunteerApplicationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *VolunteerApplicationCreateBulk) OnConflict(opts ...sql.ConflictOption) *VolunteerApplicationUpsertBulk {
	_c.conflict = opts
	return &VolunteerApplicationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *VolunteerApplicationCreateBulk) OnConflictColumns(columns ...string) *VolunteerApplicationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &VolunteerApplicationUpsertBulk{
		create: _c,
	}
}

// VolunteerApplicationUpsertBulk is the builder for "upsert"-ing
// a bulk of VolunteerApplication nodes.
type VolunteerApplicationUpsertBulk struct {
	create *VolunteerApplicationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VolunteerApplicationUpsertBulk) UpdateNewValues() *VolunteerApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(volunteerapplication.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VolunteerApplication.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VolunteerApplicationUpsertBulk) Ignore() *VolunteerApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VolunteerApplicationUpsertBulk) DoNothing() *VolunteerApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VolunteerApplicationCreateBulk.OnConflict
// documentation for more info.
func (u *VolunteerApplicationUpsertBulk) Update(set func(*VolunteerApplicationUpsert)) *VolunteerApplicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VolunteerApplicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *VolunteerApplicationUpsertBulk) SetStatus(v volunteerapplication.Status) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateStatus() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateStatus()
	})
}

// SetMotivation sets the "motivation" field.
func (u *VolunteerApplicationUpsertBulk) SetMotivation(v string) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetMotivation(v)
	})
}

// UpdateMotivation sets the "motivation" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateMotivation() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateMotivation()
	})
}

// SetAvailability sets the "availability" field.
func (u *VolunteerApplicationUpsertBulk) SetAvailability(v map[string]interface{}) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetAvailability(v)
	})
}

// UpdateAvailability sets the "availability" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateAvailability() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateAvailability()
	})
}

// SetBackgroundCheck sets the "background_check" field.
func (u *VolunteerApplicationUpsertBulk) SetBackgroundCheck(v bool) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetBackgroundCheck(v)
	})
}

// UpdateBackgroundCheck sets the "background_check" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateBackgroundCheck() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateBackgroundCheck()
	})
}

// SetBackgroundCheckDate sets the "background_check_date" field.
func (u *VolunteerApplicationUpsertBulk) SetBackgroundCheckDate(v time.Time) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetBackgroundCheckDate(v)
	})
}

// UpdateBackgroundCheckDate sets the "background_check_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateBackgroundCheckDate() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateBackgroundCheckDate()
	})
}

// ClearBackgroundCheckDate clears the value of the "background_check_date" field.
func (u *VolunteerApplicationUpsertBulk) ClearBackgroundCheckDate() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearBackgroundCheckDate()
	})
}

// SetReferences sets the "references" field.
func (u *VolunteerApplicationUpsertBulk) SetReferences(v []map[string]interface{}) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReferences(v)
	})
}

// UpdateReferences sets the "references" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateReferences() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReferences()
	})
}

// ClearReferences clears the value of the "references" field.
func (u *VolunteerApplicationUpsertBulk) ClearReferences() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReferences()
	})
}

// SetEmergencyContact sets the "emergency_contact" field.
func (u *VolunteerApplicationUpsertBulk) SetEmergencyContact(v map[string]string) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetEmergencyContact(v)
	})
}

// UpdateEmergencyContact sets the "emergency_contact" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateEmergencyContact() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateEmergencyContact()
	})
}

// ClearEmergencyContact clears the value of the "emergency_contact" field.
func (u *VolunteerApplicationUpsertBulk) ClearEmergencyContact() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearEmergencyContact()
	})
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *VolunteerApplicationUpsertBulk) SetReviewedBy(v string) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewedBy(v)
	})
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateReviewedBy() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewedBy()
	})
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *VolunteerApplicationUpsertBulk) ClearReviewedBy() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewedBy()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *VolunteerApplicationUpsertBulk) SetReviewedAt(v time.Time) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateReviewedAt() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *VolunteerApplicationUpsertBulk) ClearReviewedAt() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewedAt()
	})
}

// SetReviewNotes sets the "review_notes" field.
func (u *VolunteerApplicationUpsertBulk) SetReviewNotes(v string) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetReviewNotes(v)
	})
}

// UpdateReviewNotes sets the "review_notes" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateReviewNotes() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateReviewNotes()
	})
}

// ClearReviewNotes clears the value of the "review_notes" field.
func (u *VolunteerApplicationUpsertBulk) ClearReviewNotes() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearReviewNotes()
	})
}

// SetInterviewDate sets the "interview_date" field.
func (u *VolunteerApplicationUpsertBulk) SetInterviewDate(v time.Time) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetInterviewDate(v)
	})
}

// UpdateInterviewDate sets the "interview_date" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateInterviewDate() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateInterviewDate()
	})
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (u *VolunteerApplicationUpsertBulk) ClearInterviewDate() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.ClearInterviewDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VolunteerApplicationUpsertBulk) SetUpdatedAt(v time.Time) *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VolunteerApplicationUpsertBulk) UpdateUpdatedAt() *VolunteerApplicationUpsertBulk {
	return u.Update(func(s *VolunteerApplicationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *VolunteerApplicationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VolunteerApplicationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VolunteerApplicationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VolunteerApplicationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
