// Code generated by ent, DO NOT EDIT.

package vote

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vote type in the database.
	Label = "vote"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuestion holds the string denoting the question field in the database.
	FieldQuestion = "question"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// EdgeAgendaItem holds the string denoting the agenda_item edge name in mutations.
	EdgeAgendaItem = "agenda_item"
	// EdgeBallots holds the string denoting the ballots edge name in mutations.
	EdgeBallots = "ballots"
	// Table holds the table name of the vote in the database.
	Table = "votes"
	// AgendaItemTable is the table that holds the agenda_item relation/edge.
	AgendaItemTable = "votes"
	// AgendaItemInverseTable is the table name for the AgendaItem entity.
	// It exists in this package in order to avoid circular dependency with the "agendaitem" package.
	AgendaItemInverseTable = "agenda_items"
	// AgendaItemColumn is the table column denoting the agenda_item relation/edge.
	AgendaItemColumn = "agenda_item_vote"
	// BallotsTable is the table that holds the ballots relation/edge.
	BallotsTable = "ballots"
	// BallotsInverseTable is the table name for the Ballot entity.
	// It exists in this package in order to avoid circular dependency with the "ballot" package.
	BallotsInverseTable = "ballots"
	// BallotsColumn is the table column denoting the ballots relation/edge.
	BallotsColumn = "vote_ballots"
)

// Columns holds all SQL columns for vote fields.
var Columns = []string{
	FieldID,
	FieldQuestion,
	FieldOptions,
	FieldStatus,
	FieldResult,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "votes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agenda_item_vote",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the Vote queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuestion orders the results by the question field.
func ByQuestion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByAgendaItemField orders the results by agenda_item field.
func ByAgendaItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgendaItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByBallotsCount orders the results by ballots count.
func ByBallotsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBallotsStep(), opts...)
	}
}

// ByBallots orders the results by ballots terms.
func ByBallots(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBallotsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAgendaItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgendaItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AgendaItemTable, AgendaItemColumn),
	)
}
func newBallotsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BallotsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BallotsTable, BallotsColumn),
	)
}
