// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/faqitem"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FaqItem is the model entity for the FaqItem schema.
type FaqItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Question holds the value of the "question" field.
	Question map[string]string `json:"question,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer map[string]string `json:"answer,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FaqItemQuery when eager-loading is set.
	Edges           FaqItemEdges `json:"edges"`
	block_faq_items *int
	selectValues    sql.SelectValues
}

// FaqItemEdges holds the relations/edges for other nodes in the graph.
type FaqItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockFaq `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaqItemEdges) BlockOrErr() (*BlockFaq, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockfaq.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FaqItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case faqitem.FieldQuestion, faqitem.FieldAnswer:
			values[i] = new([]byte)
		case faqitem.FieldID, faqitem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case faqitem.FieldCreatedAt, faqitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case faqitem.ForeignKeys[0]: // block_faq_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FaqItem fields.
func (_m *FaqItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case faqitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case faqitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case faqitem.FieldQuestion:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field question", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Question); err != nil {
					return fmt.Errorf("unmarshal field question: %w", err)
				}
			}
		case faqitem.FieldAnswer:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Answer); err != nil {
					return fmt.Errorf("unmarshal field answer: %w", err)
				}
			}
		case faqitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case faqitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case faqitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_faq_items", value)
			} else if value.Valid {
				_m.block_faq_items = new(int)
				*_m.block_faq_items = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FaqItem.
// This includes values selected through modifiers, order, etc.
func (_m *FaqItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the FaqItem entity.
func (_m *FaqItem) QueryBlock() *BlockFaqQuery {
	return NewFaqItemClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this FaqItem.
// Note that you need to call FaqItem.Unwrap() before calling this method if this FaqItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FaqItem) Update() *FaqItemUpdateOne {
	return NewFaqItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FaqItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FaqItem) Unwrap() *FaqItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FaqItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FaqItem) String() string {
	var builder strings.Builder
	builder.WriteString("FaqItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("question=")
	builder.WriteString(fmt.Sprintf("%v", _m.Question))
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(fmt.Sprintf("%v", _m.Answer))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FaqItems is a parsable slice of FaqItem.
type FaqItems []*FaqItem
