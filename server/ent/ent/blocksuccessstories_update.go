// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockSuccessStoriesUpdate is the builder for updating BlockSuccessStories entities.
type BlockSuccessStoriesUpdate struct {
	config
	hooks    []Hook
	mutation *BlockSuccessStoriesMutation
}

// Where appends a list predicates to the BlockSuccessStoriesUpdate builder.
func (_u *BlockSuccessStoriesUpdate) Where(ps ...predicate.BlockSuccessStories) *BlockSuccessStoriesUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockSuccessStoriesUpdate) SetInternalName(v string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdate) SetNillableInternalName(v *string) *BlockSuccessStoriesUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockSuccessStoriesUpdate) SetBadge(v map[string]string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockSuccessStoriesUpdate) ClearBadge() *BlockSuccessStoriesUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockSuccessStoriesUpdate) SetTitle(v map[string]string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockSuccessStoriesUpdate) ClearTitle() *BlockSuccessStoriesUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockSuccessStoriesUpdate) SetDescription(v map[string]string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockSuccessStoriesUpdate) ClearDescription() *BlockSuccessStoriesUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockSuccessStoriesUpdate) SetLayout(v string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdate) SetNillableLayout(v *string) *BlockSuccessStoriesUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetMaxItems sets the "max_items" field.
func (_u *BlockSuccessStoriesUpdate) SetMaxItems(v int) *BlockSuccessStoriesUpdate {
	_u.mutation.ResetMaxItems()
	_u.mutation.SetMaxItems(v)
	return _u
}

// SetNillableMaxItems sets the "max_items" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdate) SetNillableMaxItems(v *int) *BlockSuccessStoriesUpdate {
	if v != nil {
		_u.SetMaxItems(*v)
	}
	return _u
}

// AddMaxItems adds value to the "max_items" field.
func (_u *BlockSuccessStoriesUpdate) AddMaxItems(v int) *BlockSuccessStoriesUpdate {
	_u.mutation.AddMaxItems(v)
	return _u
}

// SetAutoplay sets the "autoplay" field.
func (_u *BlockSuccessStoriesUpdate) SetAutoplay(v bool) *BlockSuccessStoriesUpdate {
	_u.mutation.SetAutoplay(v)
	return _u
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdate) SetNillableAutoplay(v *bool) *BlockSuccessStoriesUpdate {
	if v != nil {
		_u.SetAutoplay(*v)
	}
	return _u
}

// SetProgramFilter sets the "program_filter" field.
func (_u *BlockSuccessStoriesUpdate) SetProgramFilter(v string) *BlockSuccessStoriesUpdate {
	_u.mutation.SetProgramFilter(v)
	return _u
}

// SetNillableProgramFilter sets the "program_filter" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdate) SetNillableProgramFilter(v *string) *BlockSuccessStoriesUpdate {
	if v != nil {
		_u.SetProgramFilter(*v)
	}
	return _u
}

// ClearProgramFilter clears the value of the "program_filter" field.
func (_u *BlockSuccessStoriesUpdate) ClearProgramFilter() *BlockSuccessStoriesUpdate {
	_u.mutation.ClearProgramFilter()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockSuccessStoriesUpdate) SetUpdatedAt(v time.Time) *BlockSuccessStoriesUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockSuccessStoriesUpdate) SetContentBlockID(id int) *BlockSuccessStoriesUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockSuccessStoriesUpdate) SetContentBlock(v *ContentBlock) *BlockSuccessStoriesUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockSuccessStoriesMutation object of the builder.
func (_u *BlockSuccessStoriesUpdate) Mutation() *BlockSuccessStoriesMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockSuccessStoriesUpdate) ClearContentBlock() *BlockSuccessStoriesUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockSuccessStoriesUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockSuccessStoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockSuccessStoriesUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockSuccessStoriesUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockSuccessStoriesUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocksuccessstories.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockSuccessStoriesUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockSuccessStories.content_block"`)
	}
	return nil
}

func (_u *BlockSuccessStoriesUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocksuccessstories.Table, blocksuccessstories.Columns, sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocksuccessstories.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blocksuccessstories.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blocksuccessstories.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocksuccessstories.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blocksuccessstories.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocksuccessstories.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocksuccessstories.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocksuccessstories.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxItems(); ok {
		_spec.SetField(blocksuccessstories.FieldMaxItems, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxItems(); ok {
		_spec.AddField(blocksuccessstories.FieldMaxItems, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Autoplay(); ok {
		_spec.SetField(blocksuccessstories.FieldAutoplay, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ProgramFilter(); ok {
		_spec.SetField(blocksuccessstories.FieldProgramFilter, field.TypeString, value)
	}
	if _u.mutation.ProgramFilterCleared() {
		_spec.ClearField(blocksuccessstories.FieldProgramFilter, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocksuccessstories.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocksuccessstories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockSuccessStoriesUpdateOne is the builder for updating a single BlockSuccessStories entity.
type BlockSuccessStoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockSuccessStoriesMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockSuccessStoriesUpdateOne) SetInternalName(v string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdateOne) SetNillableInternalName(v *string) *BlockSuccessStoriesUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockSuccessStoriesUpdateOne) SetBadge(v map[string]string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockSuccessStoriesUpdateOne) ClearBadge() *BlockSuccessStoriesUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockSuccessStoriesUpdateOne) SetTitle(v map[string]string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *BlockSuccessStoriesUpdateOne) ClearTitle() *BlockSuccessStoriesUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockSuccessStoriesUpdateOne) SetDescription(v map[string]string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockSuccessStoriesUpdateOne) ClearDescription() *BlockSuccessStoriesUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockSuccessStoriesUpdateOne) SetLayout(v string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdateOne) SetNillableLayout(v *string) *BlockSuccessStoriesUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetMaxItems sets the "max_items" field.
func (_u *BlockSuccessStoriesUpdateOne) SetMaxItems(v int) *BlockSuccessStoriesUpdateOne {
	_u.mutation.ResetMaxItems()
	_u.mutation.SetMaxItems(v)
	return _u
}

// SetNillableMaxItems sets the "max_items" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdateOne) SetNillableMaxItems(v *int) *BlockSuccessStoriesUpdateOne {
	if v != nil {
		_u.SetMaxItems(*v)
	}
	return _u
}

// AddMaxItems adds value to the "max_items" field.
func (_u *BlockSuccessStoriesUpdateOne) AddMaxItems(v int) *BlockSuccessStoriesUpdateOne {
	_u.mutation.AddMaxItems(v)
	return _u
}

// SetAutoplay sets the "autoplay" field.
func (_u *BlockSuccessStoriesUpdateOne) SetAutoplay(v bool) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetAutoplay(v)
	return _u
}

// SetNillableAutoplay sets the "autoplay" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdateOne) SetNillableAutoplay(v *bool) *BlockSuccessStoriesUpdateOne {
	if v != nil {
		_u.SetAutoplay(*v)
	}
	return _u
}

// SetProgramFilter sets the "program_filter" field.
func (_u *BlockSuccessStoriesUpdateOne) SetProgramFilter(v string) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetProgramFilter(v)
	return _u
}

// SetNillableProgramFilter sets the "program_filter" field if the given value is not nil.
func (_u *BlockSuccessStoriesUpdateOne) SetNillableProgramFilter(v *string) *BlockSuccessStoriesUpdateOne {
	if v != nil {
		_u.SetProgramFilter(*v)
	}
	return _u
}

// ClearProgramFilter clears the value of the "program_filter" field.
func (_u *BlockSuccessStoriesUpdateOne) ClearProgramFilter() *BlockSuccessStoriesUpdateOne {
	_u.mutation.ClearProgramFilter()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockSuccessStoriesUpdateOne) SetUpdatedAt(v time.Time) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockSuccessStoriesUpdateOne) SetContentBlockID(id int) *BlockSuccessStoriesUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockSuccessStoriesUpdateOne) SetContentBlock(v *ContentBlock) *BlockSuccessStoriesUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockSuccessStoriesMutation object of the builder.
func (_u *BlockSuccessStoriesUpdateOne) Mutation() *BlockSuccessStoriesMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockSuccessStoriesUpdateOne) ClearContentBlock() *BlockSuccessStoriesUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockSuccessStoriesUpdate builder.
func (_u *BlockSuccessStoriesUpdateOne) Where(ps ...predicate.BlockSuccessStories) *BlockSuccessStoriesUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockSuccessStoriesUpdateOne) Select(field string, fields ...string) *BlockSuccessStoriesUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockSuccessStories entity.
func (_u *BlockSuccessStoriesUpdateOne) Save(ctx context.Context) (*BlockSuccessStories, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockSuccessStoriesUpdateOne) SaveX(ctx context.Context) *BlockSuccessStories {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockSuccessStoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockSuccessStoriesUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockSuccessStoriesUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocksuccessstories.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockSuccessStoriesUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockSuccessStories.content_block"`)
	}
	return nil
}

func (_u *BlockSuccessStoriesUpdateOne) sqlSave(ctx context.Context) (_node *BlockSuccessStories, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocksuccessstories.Table, blocksuccessstories.Columns, sqlgraph.NewFieldSpec(blocksuccessstories.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockSuccessStories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocksuccessstories.FieldID)
		for _, f := range fields {
			if !blocksuccessstories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocksuccessstories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocksuccessstories.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blocksuccessstories.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blocksuccessstories.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocksuccessstories.FieldTitle, field.TypeJSON, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(blocksuccessstories.FieldTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocksuccessstories.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocksuccessstories.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocksuccessstories.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxItems(); ok {
		_spec.SetField(blocksuccessstories.FieldMaxItems, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxItems(); ok {
		_spec.AddField(blocksuccessstories.FieldMaxItems, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Autoplay(); ok {
		_spec.SetField(blocksuccessstories.FieldAutoplay, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ProgramFilter(); ok {
		_spec.SetField(blocksuccessstories.FieldProgramFilter, field.TypeString, value)
	}
	if _u.mutation.ProgramFilterCleared() {
		_spec.ClearField(blocksuccessstories.FieldProgramFilter, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocksuccessstories.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockSuccessStories{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocksuccessstories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
