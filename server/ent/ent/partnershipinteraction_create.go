// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnershipInteractionCreate is the builder for creating a PartnershipInteraction entity.
type PartnershipInteractionCreate struct {
	config
	mutation *PartnershipInteractionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInteractionType sets the "interaction_type" field.
func (_c *PartnershipInteractionCreate) SetInteractionType(v string) *PartnershipInteractionCreate {
	_c.mutation.SetInteractionType(v)
	return _c
}

// SetSubject sets the "subject" field.
func (_c *PartnershipInteractionCreate) SetSubject(v string) *PartnershipInteractionCreate {
	_c.mutation.SetSubject(v)
	return _c
}

// SetSummary sets the "summary" field.
func (_c *PartnershipInteractionCreate) SetSummary(v string) *PartnershipInteractionCreate {
	_c.mutation.SetSummary(v)
	return _c
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableSummary(v *string) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetSummary(*v)
	}
	return _c
}

// SetInteractedAt sets the "interacted_at" field.
func (_c *PartnershipInteractionCreate) SetInteractedAt(v time.Time) *PartnershipInteractionCreate {
	_c.mutation.SetInteractedAt(v)
	return _c
}

// SetNillableInteractedAt sets the "interacted_at" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableInteractedAt(v *time.Time) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetInteractedAt(*v)
	}
	return _c
}

// SetAttendees sets the "attendees" field.
func (_c *PartnershipInteractionCreate) SetAttendees(v []string) *PartnershipInteractionCreate {
	_c.mutation.SetAttendees(v)
	return _c
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (_c *PartnershipInteractionCreate) SetFollowUpRequired(v bool) *PartnershipInteractionCreate {
	_c.mutation.SetFollowUpRequired(v)
	return _c
}

// SetNillableFollowUpRequired sets the "follow_up_required" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableFollowUpRequired(v *bool) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetFollowUpRequired(*v)
	}
	return _c
}

// SetFollowUpDate sets the "follow_up_date" field.
func (_c *PartnershipInteractionCreate) SetFollowUpDate(v time.Time) *PartnershipInteractionCreate {
	_c.mutation.SetFollowUpDate(v)
	return _c
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableFollowUpDate(v *time.Time) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetFollowUpDate(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PartnershipInteractionCreate) SetCreatedAt(v time.Time) *PartnershipInteractionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableCreatedAt(v *time.Time) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PartnershipInteractionCreate) SetUpdatedAt(v time.Time) *PartnershipInteractionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PartnershipInteractionCreate) SetNillableUpdatedAt(v *time.Time) *PartnershipInteractionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_c *PartnershipInteractionCreate) SetPartnershipID(id int) *PartnershipInteractionCreate {
	_c.mutation.SetPartnershipID(id)
	return _c
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_c *PartnershipInteractionCreate) SetPartnership(v *Partnership) *PartnershipInteractionCreate {
	return _c.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipInteractionMutation object of the builder.
func (_c *PartnershipInteractionCreate) Mutation() *PartnershipInteractionMutation {
	return _c.mutation
}

// Save creates the PartnershipInteraction in the database.
func (_c *PartnershipInteractionCreate) Save(ctx context.Context) (*PartnershipInteraction, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnershipInteractionCreate) SaveX(ctx context.Context) *PartnershipInteraction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipInteractionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipInteractionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PartnershipInteractionCreate) defaults() {
	if _, ok := _c.mutation.InteractedAt(); !ok {
		v := partnershipinteraction.DefaultInteractedAt()
		_c.mutation.SetInteractedAt(v)
	}
	if _, ok := _c.mutation.FollowUpRequired(); !ok {
		v := partnershipinteraction.DefaultFollowUpRequired
		_c.mutation.SetFollowUpRequired(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := partnershipinteraction.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := partnershipinteraction.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnershipInteractionCreate) check() error {
	if _, ok := _c.mutation.InteractionType(); !ok {
		return &ValidationError{Name: "interaction_type", err: errors.New(`ent: missing required field "PartnershipInteraction.interaction_type"`)}
	}
	if _, ok := _c.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "PartnershipInteraction.subject"`)}
	}
	if _, ok := _c.mutation.InteractedAt(); !ok {
		return &ValidationError{Name: "interacted_at", err: errors.New(`ent: missing required field "PartnershipInteraction.interacted_at"`)}
	}
	if _, ok := _c.mutation.Attendees(); !ok {
		return &ValidationError{Name: "attendees", err: errors.New(`ent: missing required field "PartnershipInteraction.attendees"`)}
	}
	if _, ok := _c.mutation.FollowUpRequired(); !ok {
		return &ValidationError{Name: "follow_up_required", err: errors.New(`ent: missing required field "PartnershipInteraction.follow_up_required"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PartnershipInteraction.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PartnershipInteraction.updated_at"`)}
	}
	if len(_c.mutation.PartnershipIDs()) == 0 {
		return &ValidationError{Name: "partnership", err: errors.New(`ent: missing required edge "PartnershipInteraction.partnership"`)}
	}
	return nil
}

func (_c *PartnershipInteractionCreate) sqlSave(ctx context.Context) (*PartnershipInteraction, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnershipInteractionCreate) createSpec() (*PartnershipInteraction, *sqlgraph.CreateSpec) {
	var (
		_node = &PartnershipInteraction{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partnershipinteraction.Table, sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InteractionType(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractionType, field.TypeString, value)
		_node.InteractionType = value
	}
	if value, ok := _c.mutation.Subject(); ok {
		_spec.SetField(partnershipinteraction.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := _c.mutation.Summary(); ok {
		_spec.SetField(partnershipinteraction.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := _c.mutation.InteractedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldInteractedAt, field.TypeTime, value)
		_node.InteractedAt = value
	}
	if value, ok := _c.mutation.Attendees(); ok {
		_spec.SetField(partnershipinteraction.FieldAttendees, field.TypeJSON, value)
		_node.Attendees = value
	}
	if value, ok := _c.mutation.FollowUpRequired(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpRequired, field.TypeBool, value)
		_node.FollowUpRequired = value
	}
	if value, ok := _c.mutation.FollowUpDate(); ok {
		_spec.SetField(partnershipinteraction.FieldFollowUpDate, field.TypeTime, value)
		_node.FollowUpDate = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershipinteraction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.partnership_interactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipInteraction.Create().
//		SetInteractionType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipInteractionUpsert) {
//			SetInteractionType(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipInteractionCreate) OnConflict(opts ...sql.ConflictOption) *PartnershipInteractionUpsertOne {
	_c.conflict = opts
	return &PartnershipInteractionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipInteractionCreate) OnConflictColumns(columns ...string) *PartnershipInteractionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipInteractionUpsertOne{
		create: _c,
	}
}

type (
	// PartnershipInteractionUpsertOne is the builder for "upsert"-ing
	//  one PartnershipInteraction node.
	PartnershipInteractionUpsertOne struct {
		create *PartnershipInteractionCreate
	}

	// PartnershipInteractionUpsert is the "OnConflict" setter.
	PartnershipInteractionUpsert struct {
		*sql.UpdateSet
	}
)

// SetInteractionType sets the "interaction_type" field.
func (u *PartnershipInteractionUpsert) SetInteractionType(v string) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldInteractionType, v)
	return u
}

// UpdateInteractionType sets the "interaction_type" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateInteractionType() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldInteractionType)
	return u
}

// SetSubject sets the "subject" field.
func (u *PartnershipInteractionUpsert) SetSubject(v string) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateSubject() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldSubject)
	return u
}

// SetSummary sets the "summary" field.
func (u *PartnershipInteractionUpsert) SetSummary(v string) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldSummary, v)
	return u
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateSummary() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldSummary)
	return u
}

// ClearSummary clears the value of the "summary" field.
func (u *PartnershipInteractionUpsert) ClearSummary() *PartnershipInteractionUpsert {
	u.SetNull(partnershipinteraction.FieldSummary)
	return u
}

// SetInteractedAt sets the "interacted_at" field.
func (u *PartnershipInteractionUpsert) SetInteractedAt(v time.Time) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldInteractedAt, v)
	return u
}

// UpdateInteractedAt sets the "interacted_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateInteractedAt() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldInteractedAt)
	return u
}

// SetAttendees sets the "attendees" field.
func (u *PartnershipInteractionUpsert) SetAttendees(v []string) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldAttendees, v)
	return u
}

// UpdateAttendees sets the "attendees" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateAttendees() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldAttendees)
	return u
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (u *PartnershipInteractionUpsert) SetFollowUpRequired(v bool) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldFollowUpRequired, v)
	return u
}

// UpdateFollowUpRequired sets the "follow_up_required" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateFollowUpRequired() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldFollowUpRequired)
	return u
}

// SetFollowUpDate sets the "follow_up_date" field.
func (u *PartnershipInteractionUpsert) SetFollowUpDate(v time.Time) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldFollowUpDate, v)
	return u
}

// UpdateFollowUpDate sets the "follow_up_date" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateFollowUpDate() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldFollowUpDate)
	return u
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (u *PartnershipInteractionUpsert) ClearFollowUpDate() *PartnershipInteractionUpsert {
	u.SetNull(partnershipinteraction.FieldFollowUpDate)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipInteractionUpsert) SetUpdatedAt(v time.Time) *PartnershipInteractionUpsert {
	u.Set(partnershipinteraction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsert) UpdateUpdatedAt() *PartnershipInteractionUpsert {
	u.SetExcluded(partnershipinteraction.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipInteractionUpsertOne) UpdateNewValues() *PartnershipInteractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnershipinteraction.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnershipInteractionUpsertOne) Ignore() *PartnershipInteractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipInteractionUpsertOne) DoNothing() *PartnershipInteractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipInteractionCreate.OnConflict
// documentation for more info.
func (u *PartnershipInteractionUpsertOne) Update(set func(*PartnershipInteractionUpsert)) *PartnershipInteractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipInteractionUpsert{UpdateSet: update})
	}))
	return u
}

// SetInteractionType sets the "interaction_type" field.
func (u *PartnershipInteractionUpsertOne) SetInteractionType(v string) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetInteractionType(v)
	})
}

// UpdateInteractionType sets the "interaction_type" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateInteractionType() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateInteractionType()
	})
}

// SetSubject sets the "subject" field.
func (u *PartnershipInteractionUpsertOne) SetSubject(v string) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateSubject() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateSubject()
	})
}

// SetSummary sets the "summary" field.
func (u *PartnershipInteractionUpsertOne) SetSummary(v string) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateSummary() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *PartnershipInteractionUpsertOne) ClearSummary() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.ClearSummary()
	})
}

// SetInteractedAt sets the "interacted_at" field.
func (u *PartnershipInteractionUpsertOne) SetInteractedAt(v time.Time) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetInteractedAt(v)
	})
}

// UpdateInteractedAt sets the "interacted_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateInteractedAt() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateInteractedAt()
	})
}

// SetAttendees sets the "attendees" field.
func (u *PartnershipInteractionUpsertOne) SetAttendees(v []string) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetAttendees(v)
	})
}

// UpdateAttendees sets the "attendees" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateAttendees() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateAttendees()
	})
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (u *PartnershipInteractionUpsertOne) SetFollowUpRequired(v bool) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetFollowUpRequired(v)
	})
}

// UpdateFollowUpRequired sets the "follow_up_required" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateFollowUpRequired() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateFollowUpRequired()
	})
}

// SetFollowUpDate sets the "follow_up_date" field.
func (u *PartnershipInteractionUpsertOne) SetFollowUpDate(v time.Time) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetFollowUpDate(v)
	})
}

// UpdateFollowUpDate sets the "follow_up_date" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateFollowUpDate() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateFollowUpDate()
	})
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (u *PartnershipInteractionUpsertOne) ClearFollowUpDate() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.ClearFollowUpDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipInteractionUpsertOne) SetUpdatedAt(v time.Time) *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertOne) UpdateUpdatedAt() *PartnershipInteractionUpsertOne {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipInteractionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipInteractionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipInteractionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnershipInteractionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnershipInteractionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnershipInteractionCreateBulk is the builder for creating many PartnershipInteraction entities in bulk.
type PartnershipInteractionCreateBulk struct {
	config
	err      error
	builders []*PartnershipInteractionCreate
	conflict []sql.ConflictOption
}

// Save creates the PartnershipInteraction entities in the database.
func (_c *PartnershipInteractionCreateBulk) Save(ctx context.Context) ([]*PartnershipInteraction, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PartnershipInteraction, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnershipInteractionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnershipInteractionCreateBulk) SaveX(ctx context.Context) []*PartnershipInteraction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipInteractionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipInteractionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PartnershipInteraction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipInteractionUpsert) {
//			SetInteractionType(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipInteractionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnershipInteractionUpsertBulk {
	_c.conflict = opts
	return &PartnershipInteractionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipInteractionCreateBulk) OnConflictColumns(columns ...string) *PartnershipInteractionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipInteractionUpsertBulk{
		create: _c,
	}
}

// PartnershipInteractionUpsertBulk is the builder for "upsert"-ing
// a bulk of PartnershipInteraction nodes.
type PartnershipInteractionUpsertBulk struct {
	create *PartnershipInteractionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipInteractionUpsertBulk) UpdateNewValues() *PartnershipInteractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnershipinteraction.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PartnershipInteraction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnershipInteractionUpsertBulk) Ignore() *PartnershipInteractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipInteractionUpsertBulk) DoNothing() *PartnershipInteractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipInteractionCreateBulk.OnConflict
// documentation for more info.
func (u *PartnershipInteractionUpsertBulk) Update(set func(*PartnershipInteractionUpsert)) *PartnershipInteractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipInteractionUpsert{UpdateSet: update})
	}))
	return u
}

// SetInteractionType sets the "interaction_type" field.
func (u *PartnershipInteractionUpsertBulk) SetInteractionType(v string) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetInteractionType(v)
	})
}

// UpdateInteractionType sets the "interaction_type" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateInteractionType() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateInteractionType()
	})
}

// SetSubject sets the "subject" field.
func (u *PartnershipInteractionUpsertBulk) SetSubject(v string) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateSubject() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateSubject()
	})
}

// SetSummary sets the "summary" field.
func (u *PartnershipInteractionUpsertBulk) SetSummary(v string) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetSummary(v)
	})
}

// UpdateSummary sets the "summary" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateSummary() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateSummary()
	})
}

// ClearSummary clears the value of the "summary" field.
func (u *PartnershipInteractionUpsertBulk) ClearSummary() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.ClearSummary()
	})
}

// SetInteractedAt sets the "interacted_at" field.
func (u *PartnershipInteractionUpsertBulk) SetInteractedAt(v time.Time) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetInteractedAt(v)
	})
}

// UpdateInteractedAt sets the "interacted_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateInteractedAt() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateInteractedAt()
	})
}

// SetAttendees sets the "attendees" field.
func (u *PartnershipInteractionUpsertBulk) SetAttendees(v []string) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetAttendees(v)
	})
}

// UpdateAttendees sets the "attendees" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateAttendees() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateAttendees()
	})
}

// SetFollowUpRequired sets the "follow_up_required" field.
func (u *PartnershipInteractionUpsertBulk) SetFollowUpRequired(v bool) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetFollowUpRequired(v)
	})
}

// UpdateFollowUpRequired sets the "follow_up_required" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateFollowUpRequired() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateFollowUpRequired()
	})
}

// SetFollowUpDate sets the "follow_up_date" field.
func (u *PartnershipInteractionUpsertBulk) SetFollowUpDate(v time.Time) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetFollowUpDate(v)
	})
}

// UpdateFollowUpDate sets the "follow_up_date" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateFollowUpDate() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateFollowUpDate()
	})
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (u *PartnershipInteractionUpsertBulk) ClearFollowUpDate() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.ClearFollowUpDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipInteractionUpsertBulk) SetUpdatedAt(v time.Time) *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipInteractionUpsertBulk) UpdateUpdatedAt() *PartnershipInteractionUpsertBulk {
	return u.Update(func(s *PartnershipInteractionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipInteractionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnershipInteractionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipInteractionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipInteractionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
