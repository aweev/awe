// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockContactFormUpdate is the builder for updating BlockContactForm entities.
type BlockContactFormUpdate struct {
	config
	hooks    []Hook
	mutation *BlockContactFormMutation
}

// Where appends a list predicates to the BlockContactFormUpdate builder.
func (_u *BlockContactFormUpdate) Where(ps ...predicate.BlockContactForm) *BlockContactFormUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockContactFormUpdate) SetInternalName(v string) *BlockContactFormUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableInternalName(v *string) *BlockContactFormUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockContactFormUpdate) SetTitle(v map[string]string) *BlockContactFormUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockContactFormUpdate) SetDescription(v map[string]string) *BlockContactFormUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockContactFormUpdate) ClearDescription() *BlockContactFormUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetShowNameField sets the "show_name_field" field.
func (_u *BlockContactFormUpdate) SetShowNameField(v bool) *BlockContactFormUpdate {
	_u.mutation.SetShowNameField(v)
	return _u
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableShowNameField(v *bool) *BlockContactFormUpdate {
	if v != nil {
		_u.SetShowNameField(*v)
	}
	return _u
}

// SetShowPhoneField sets the "show_phone_field" field.
func (_u *BlockContactFormUpdate) SetShowPhoneField(v bool) *BlockContactFormUpdate {
	_u.mutation.SetShowPhoneField(v)
	return _u
}

// SetNillableShowPhoneField sets the "show_phone_field" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableShowPhoneField(v *bool) *BlockContactFormUpdate {
	if v != nil {
		_u.SetShowPhoneField(*v)
	}
	return _u
}

// SetShowSubjectField sets the "show_subject_field" field.
func (_u *BlockContactFormUpdate) SetShowSubjectField(v bool) *BlockContactFormUpdate {
	_u.mutation.SetShowSubjectField(v)
	return _u
}

// SetNillableShowSubjectField sets the "show_subject_field" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableShowSubjectField(v *bool) *BlockContactFormUpdate {
	if v != nil {
		_u.SetShowSubjectField(*v)
	}
	return _u
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (_u *BlockContactFormUpdate) SetShowOrganizationField(v bool) *BlockContactFormUpdate {
	_u.mutation.SetShowOrganizationField(v)
	return _u
}

// SetNillableShowOrganizationField sets the "show_organization_field" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableShowOrganizationField(v *bool) *BlockContactFormUpdate {
	if v != nil {
		_u.SetShowOrganizationField(*v)
	}
	return _u
}

// SetRecipientEmail sets the "recipient_email" field.
func (_u *BlockContactFormUpdate) SetRecipientEmail(v string) *BlockContactFormUpdate {
	_u.mutation.SetRecipientEmail(v)
	return _u
}

// SetNillableRecipientEmail sets the "recipient_email" field if the given value is not nil.
func (_u *BlockContactFormUpdate) SetNillableRecipientEmail(v *string) *BlockContactFormUpdate {
	if v != nil {
		_u.SetRecipientEmail(*v)
	}
	return _u
}

// SetSuccessMessage sets the "success_message" field.
func (_u *BlockContactFormUpdate) SetSuccessMessage(v map[string]string) *BlockContactFormUpdate {
	_u.mutation.SetSuccessMessage(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockContactFormUpdate) SetUpdatedAt(v time.Time) *BlockContactFormUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockContactFormUpdate) SetContentBlockID(id int) *BlockContactFormUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockContactFormUpdate) SetContentBlock(v *ContentBlock) *BlockContactFormUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockContactFormMutation object of the builder.
func (_u *BlockContactFormUpdate) Mutation() *BlockContactFormMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockContactFormUpdate) ClearContentBlock() *BlockContactFormUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockContactFormUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockContactFormUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockContactFormUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockContactFormUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockContactFormUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockcontactform.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockContactFormUpdate) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockContactForm.content_block"`)
	}
	return nil
}

func (_u *BlockContactFormUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockcontactform.Table, blockcontactform.Columns, sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockcontactform.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockcontactform.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockcontactform.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockcontactform.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ShowNameField(); ok {
		_spec.SetField(blockcontactform.FieldShowNameField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowPhoneField(); ok {
		_spec.SetField(blockcontactform.FieldShowPhoneField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowSubjectField(); ok {
		_spec.SetField(blockcontactform.FieldShowSubjectField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowOrganizationField(); ok {
		_spec.SetField(blockcontactform.FieldShowOrganizationField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RecipientEmail(); ok {
		_spec.SetField(blockcontactform.FieldRecipientEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.SuccessMessage(); ok {
		_spec.SetField(blockcontactform.FieldSuccessMessage, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcontactform.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockcontactform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockContactFormUpdateOne is the builder for updating a single BlockContactForm entity.
type BlockContactFormUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockContactFormMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockContactFormUpdateOne) SetInternalName(v string) *BlockContactFormUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableInternalName(v *string) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockContactFormUpdateOne) SetTitle(v map[string]string) *BlockContactFormUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockContactFormUpdateOne) SetDescription(v map[string]string) *BlockContactFormUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockContactFormUpdateOne) ClearDescription() *BlockContactFormUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetShowNameField sets the "show_name_field" field.
func (_u *BlockContactFormUpdateOne) SetShowNameField(v bool) *BlockContactFormUpdateOne {
	_u.mutation.SetShowNameField(v)
	return _u
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableShowNameField(v *bool) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetShowNameField(*v)
	}
	return _u
}

// SetShowPhoneField sets the "show_phone_field" field.
func (_u *BlockContactFormUpdateOne) SetShowPhoneField(v bool) *BlockContactFormUpdateOne {
	_u.mutation.SetShowPhoneField(v)
	return _u
}

// SetNillableShowPhoneField sets the "show_phone_field" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableShowPhoneField(v *bool) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetShowPhoneField(*v)
	}
	return _u
}

// SetShowSubjectField sets the "show_subject_field" field.
func (_u *BlockContactFormUpdateOne) SetShowSubjectField(v bool) *BlockContactFormUpdateOne {
	_u.mutation.SetShowSubjectField(v)
	return _u
}

// SetNillableShowSubjectField sets the "show_subject_field" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableShowSubjectField(v *bool) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetShowSubjectField(*v)
	}
	return _u
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (_u *BlockContactFormUpdateOne) SetShowOrganizationField(v bool) *BlockContactFormUpdateOne {
	_u.mutation.SetShowOrganizationField(v)
	return _u
}

// SetNillableShowOrganizationField sets the "show_organization_field" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableShowOrganizationField(v *bool) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetShowOrganizationField(*v)
	}
	return _u
}

// SetRecipientEmail sets the "recipient_email" field.
func (_u *BlockContactFormUpdateOne) SetRecipientEmail(v string) *BlockContactFormUpdateOne {
	_u.mutation.SetRecipientEmail(v)
	return _u
}

// SetNillableRecipientEmail sets the "recipient_email" field if the given value is not nil.
func (_u *BlockContactFormUpdateOne) SetNillableRecipientEmail(v *string) *BlockContactFormUpdateOne {
	if v != nil {
		_u.SetRecipientEmail(*v)
	}
	return _u
}

// SetSuccessMessage sets the "success_message" field.
func (_u *BlockContactFormUpdateOne) SetSuccessMessage(v map[string]string) *BlockContactFormUpdateOne {
	_u.mutation.SetSuccessMessage(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockContactFormUpdateOne) SetUpdatedAt(v time.Time) *BlockContactFormUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockContactFormUpdateOne) SetContentBlockID(id int) *BlockContactFormUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockContactFormUpdateOne) SetContentBlock(v *ContentBlock) *BlockContactFormUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockContactFormMutation object of the builder.
func (_u *BlockContactFormUpdateOne) Mutation() *BlockContactFormMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockContactFormUpdateOne) ClearContentBlock() *BlockContactFormUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockContactFormUpdate builder.
func (_u *BlockContactFormUpdateOne) Where(ps ...predicate.BlockContactForm) *BlockContactFormUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockContactFormUpdateOne) Select(field string, fields ...string) *BlockContactFormUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockContactForm entity.
func (_u *BlockContactFormUpdateOne) Save(ctx context.Context) (*BlockContactForm, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockContactFormUpdateOne) SaveX(ctx context.Context) *BlockContactForm {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockContactFormUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockContactFormUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockContactFormUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blockcontactform.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockContactFormUpdateOne) check() error {
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockContactForm.content_block"`)
	}
	return nil
}

func (_u *BlockContactFormUpdateOne) sqlSave(ctx context.Context) (_node *BlockContactForm, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockcontactform.Table, blockcontactform.Columns, sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockContactForm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockcontactform.FieldID)
		for _, f := range fields {
			if !blockcontactform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockcontactform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockcontactform.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockcontactform.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockcontactform.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockcontactform.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ShowNameField(); ok {
		_spec.SetField(blockcontactform.FieldShowNameField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowPhoneField(); ok {
		_spec.SetField(blockcontactform.FieldShowPhoneField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowSubjectField(); ok {
		_spec.SetField(blockcontactform.FieldShowSubjectField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ShowOrganizationField(); ok {
		_spec.SetField(blockcontactform.FieldShowOrganizationField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RecipientEmail(); ok {
		_spec.SetField(blockcontactform.FieldRecipientEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.SuccessMessage(); ok {
		_spec.SetField(blockcontactform.FieldSuccessMessage, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcontactform.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockContactForm{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockcontactform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
