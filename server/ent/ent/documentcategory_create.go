// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCategoryCreate is the builder for creating a DocumentCategory entity.
type DocumentCategoryCreate struct {
	config
	mutation *DocumentCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *DocumentCategoryCreate) SetName(v map[string]string) *DocumentCategoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *DocumentCategoryCreate) SetDescription(v map[string]string) *DocumentCategoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetSlug sets the "slug" field.
func (_c *DocumentCategoryCreate) SetSlug(v string) *DocumentCategoryCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetDisplayOrder sets the "display_order" field.
func (_c *DocumentCategoryCreate) SetDisplayOrder(v int) *DocumentCategoryCreate {
	_c.mutation.SetDisplayOrder(v)
	return _c
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_c *DocumentCategoryCreate) SetNillableDisplayOrder(v *int) *DocumentCategoryCreate {
	if v != nil {
		_c.SetDisplayOrder(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *DocumentCategoryCreate) SetIsActive(v bool) *DocumentCategoryCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *DocumentCategoryCreate) SetNillableIsActive(v *bool) *DocumentCategoryCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DocumentCategoryCreate) SetCreatedAt(v time.Time) *DocumentCategoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DocumentCategoryCreate) SetNillableCreatedAt(v *time.Time) *DocumentCategoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DocumentCategoryCreate) SetUpdatedAt(v time.Time) *DocumentCategoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DocumentCategoryCreate) SetNillableUpdatedAt(v *time.Time) *DocumentCategoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddChildIDs adds the "children" edge to the DocumentCategory entity by IDs.
func (_c *DocumentCategoryCreate) AddChildIDs(ids ...int) *DocumentCategoryCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the DocumentCategory entity.
func (_c *DocumentCategoryCreate) AddChildren(v ...*DocumentCategory) *DocumentCategoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the DocumentCategory entity by ID.
func (_c *DocumentCategoryCreate) SetParentID(id int) *DocumentCategoryCreate {
	_c.mutation.SetParentID(id)
	return _c
}

// SetNillableParentID sets the "parent" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_c *DocumentCategoryCreate) SetNillableParentID(id *int) *DocumentCategoryCreate {
	if id != nil {
		_c = _c.SetParentID(*id)
	}
	return _c
}

// SetParent sets the "parent" edge to the DocumentCategory entity.
func (_c *DocumentCategoryCreate) SetParent(v *DocumentCategory) *DocumentCategoryCreate {
	return _c.SetParentID(v.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (_c *DocumentCategoryCreate) AddDocumentIDs(ids ...int) *DocumentCategoryCreate {
	_c.mutation.AddDocumentIDs(ids...)
	return _c
}

// AddDocuments adds the "documents" edges to the Document entity.
func (_c *DocumentCategoryCreate) AddDocuments(v ...*Document) *DocumentCategoryCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDocumentIDs(ids...)
}

// Mutation returns the DocumentCategoryMutation object of the builder.
func (_c *DocumentCategoryCreate) Mutation() *DocumentCategoryMutation {
	return _c.mutation
}

// Save creates the DocumentCategory in the database.
func (_c *DocumentCategoryCreate) Save(ctx context.Context) (*DocumentCategory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DocumentCategoryCreate) SaveX(ctx context.Context) *DocumentCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DocumentCategoryCreate) defaults() {
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		v := documentcategory.DefaultDisplayOrder
		_c.mutation.SetDisplayOrder(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := documentcategory.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := documentcategory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := documentcategory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DocumentCategoryCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DocumentCategory.name"`)}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "DocumentCategory.slug"`)}
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "DocumentCategory.display_order"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "DocumentCategory.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DocumentCategory.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DocumentCategory.updated_at"`)}
	}
	return nil
}

func (_c *DocumentCategoryCreate) sqlSave(ctx context.Context) (*DocumentCategory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DocumentCategoryCreate) createSpec() (*DocumentCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &DocumentCategory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(documentcategory.Table, sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(documentcategory.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(documentcategory.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(documentcategory.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.DisplayOrder(); ok {
		_spec.SetField(documentcategory.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(documentcategory.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(documentcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(documentcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_category_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DocumentCategory.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *DocumentCategoryCreate) OnConflict(opts ...sql.ConflictOption) *DocumentCategoryUpsertOne {
	_c.conflict = opts
	return &DocumentCategoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DocumentCategoryCreate) OnConflictColumns(columns ...string) *DocumentCategoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DocumentCategoryUpsertOne{
		create: _c,
	}
}

type (
	// DocumentCategoryUpsertOne is the builder for "upsert"-ing
	//  one DocumentCategory node.
	DocumentCategoryUpsertOne struct {
		create *DocumentCategoryCreate
	}

	// DocumentCategoryUpsert is the "OnConflict" setter.
	DocumentCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DocumentCategoryUpsert) SetName(v map[string]string) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateName() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *DocumentCategoryUpsert) SetDescription(v map[string]string) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateDescription() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentCategoryUpsert) ClearDescription() *DocumentCategoryUpsert {
	u.SetNull(documentcategory.FieldDescription)
	return u
}

// SetSlug sets the "slug" field.
func (u *DocumentCategoryUpsert) SetSlug(v string) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateSlug() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldSlug)
	return u
}

// SetDisplayOrder sets the "display_order" field.
func (u *DocumentCategoryUpsert) SetDisplayOrder(v int) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldDisplayOrder, v)
	return u
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateDisplayOrder() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldDisplayOrder)
	return u
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *DocumentCategoryUpsert) AddDisplayOrder(v int) *DocumentCategoryUpsert {
	u.Add(documentcategory.FieldDisplayOrder, v)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *DocumentCategoryUpsert) SetIsActive(v bool) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateIsActive() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldIsActive)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentCategoryUpsert) SetUpdatedAt(v time.Time) *DocumentCategoryUpsert {
	u.Set(documentcategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentCategoryUpsert) UpdateUpdatedAt() *DocumentCategoryUpsert {
	u.SetExcluded(documentcategory.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentCategoryUpsertOne) UpdateNewValues() *DocumentCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(documentcategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentCategoryUpsertOne) Ignore() *DocumentCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentCategoryUpsertOne) DoNothing() *DocumentCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCategoryCreate.OnConflict
// documentation for more info.
func (u *DocumentCategoryUpsertOne) Update(set func(*DocumentCategoryUpsert)) *DocumentCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DocumentCategoryUpsertOne) SetName(v map[string]string) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateName() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *DocumentCategoryUpsertOne) SetDescription(v map[string]string) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateDescription() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentCategoryUpsertOne) ClearDescription() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetSlug sets the "slug" field.
func (u *DocumentCategoryUpsertOne) SetSlug(v string) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateSlug() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateSlug()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *DocumentCategoryUpsertOne) SetDisplayOrder(v int) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *DocumentCategoryUpsertOne) AddDisplayOrder(v int) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateDisplayOrder() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsActive sets the "is_active" field.
func (u *DocumentCategoryUpsertOne) SetIsActive(v bool) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateIsActive() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentCategoryUpsertOne) SetUpdatedAt(v time.Time) *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentCategoryUpsertOne) UpdateUpdatedAt() *DocumentCategoryUpsertOne {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DocumentCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentCategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentCategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentCategoryCreateBulk is the builder for creating many DocumentCategory entities in bulk.
type DocumentCategoryCreateBulk struct {
	config
	err      error
	builders []*DocumentCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the DocumentCategory entities in the database.
func (_c *DocumentCategoryCreateBulk) Save(ctx context.Context) ([]*DocumentCategory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DocumentCategory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DocumentCategoryCreateBulk) SaveX(ctx context.Context) []*DocumentCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DocumentCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *DocumentCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentCategoryUpsertBulk {
	_c.conflict = opts
	return &DocumentCategoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DocumentCategoryCreateBulk) OnConflictColumns(columns ...string) *DocumentCategoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DocumentCategoryUpsertBulk{
		create: _c,
	}
}

// DocumentCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of DocumentCategory nodes.
type DocumentCategoryUpsertBulk struct {
	create *DocumentCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentCategoryUpsertBulk) UpdateNewValues() *DocumentCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(documentcategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DocumentCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentCategoryUpsertBulk) Ignore() *DocumentCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentCategoryUpsertBulk) DoNothing() *DocumentCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentCategoryUpsertBulk) Update(set func(*DocumentCategoryUpsert)) *DocumentCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DocumentCategoryUpsertBulk) SetName(v map[string]string) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateName() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *DocumentCategoryUpsertBulk) SetDescription(v map[string]string) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateDescription() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DocumentCategoryUpsertBulk) ClearDescription() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetSlug sets the "slug" field.
func (u *DocumentCategoryUpsertBulk) SetSlug(v string) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateSlug() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateSlug()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *DocumentCategoryUpsertBulk) SetDisplayOrder(v int) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *DocumentCategoryUpsertBulk) AddDisplayOrder(v int) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateDisplayOrder() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// SetIsActive sets the "is_active" field.
func (u *DocumentCategoryUpsertBulk) SetIsActive(v bool) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateIsActive() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateIsActive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DocumentCategoryUpsertBulk) SetUpdatedAt(v time.Time) *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DocumentCategoryUpsertBulk) UpdateUpdatedAt() *DocumentCategoryUpsertBulk {
	return u.Update(func(s *DocumentCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DocumentCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
