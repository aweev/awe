// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/analyticsevent"
	"awe/ent/ent/auditlog"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/document"
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/message"
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/program"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/teammember"
	"awe/ent/ent/token"
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"awe/ent/ent/userachievement"
	"awe/ent/ent/userconsent"
	"awe/ent/ent/useronboarding"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/usersession"
	"awe/ent/ent/volunteerapplication"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_c *UserCreate) SetNillableUsername(v *string) *UserCreate {
	if v != nil {
		_c.SetUsername(*v)
	}
	return _c
}

// SetHashedPassword sets the "hashed_password" field.
func (_c *UserCreate) SetHashedPassword(v string) *UserCreate {
	_c.mutation.SetHashedPassword(v)
	return _c
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_c *UserCreate) SetNillableHashedPassword(v *string) *UserCreate {
	if v != nil {
		_c.SetHashedPassword(*v)
	}
	return _c
}

// SetIsVerified sets the "is_verified" field.
func (_c *UserCreate) SetIsVerified(v bool) *UserCreate {
	_c.mutation.SetIsVerified(v)
	return _c
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_c *UserCreate) SetNillableIsVerified(v *bool) *UserCreate {
	if v != nil {
		_c.SetIsVerified(*v)
	}
	return _c
}

// SetEmailVerified sets the "email_verified" field.
func (_c *UserCreate) SetEmailVerified(v time.Time) *UserCreate {
	_c.mutation.SetEmailVerified(v)
	return _c
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_c *UserCreate) SetNillableEmailVerified(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetEmailVerified(*v)
	}
	return _c
}

// SetLastLoginAt sets the "last_login_at" field.
func (_c *UserCreate) SetLastLoginAt(v time.Time) *UserCreate {
	_c.mutation.SetLastLoginAt(v)
	return _c
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastLoginAt(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *UserCreate) SetIsActive(v bool) *UserCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *UserCreate) SetNillableIsActive(v *bool) *UserCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (_c *UserCreate) SetDeactivatedAt(v time.Time) *UserCreate {
	_c.mutation.SetDeactivatedAt(v)
	return _c
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeactivatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetDeactivatedAt(*v)
	}
	return _c
}

// SetLockedUntil sets the "locked_until" field.
func (_c *UserCreate) SetLockedUntil(v time.Time) *UserCreate {
	_c.mutation.SetLockedUntil(v)
	return _c
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_c *UserCreate) SetNillableLockedUntil(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLockedUntil(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (_c *UserCreate) SetImpersonatingUserID(v string) *UserCreate {
	_c.mutation.SetImpersonatingUserID(v)
	return _c
}

// SetNillableImpersonatingUserID sets the "impersonating_user_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableImpersonatingUserID(v *string) *UserCreate {
	if v != nil {
		_c.SetImpersonatingUserID(*v)
	}
	return _c
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (_c *UserCreate) SetSecurityTimestamp(v time.Time) *UserCreate {
	_c.mutation.SetSecurityTimestamp(v)
	return _c
}

// SetNillableSecurityTimestamp sets the "security_timestamp" field if the given value is not nil.
func (_c *UserCreate) SetNillableSecurityTimestamp(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetSecurityTimestamp(*v)
	}
	return _c
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (_c *UserCreate) SetPasswordResetRequired(v bool) *UserCreate {
	_c.mutation.SetPasswordResetRequired(v)
	return _c
}

// SetNillablePasswordResetRequired sets the "password_reset_required" field if the given value is not nil.
func (_c *UserCreate) SetNillablePasswordResetRequired(v *bool) *UserCreate {
	if v != nil {
		_c.SetPasswordResetRequired(*v)
	}
	return _c
}

// SetRoles sets the "roles" field.
func (_c *UserCreate) SetRoles(v []string) *UserCreate {
	_c.mutation.SetRoles(v)
	return _c
}

// SetMfaSecret sets the "mfa_secret" field.
func (_c *UserCreate) SetMfaSecret(v string) *UserCreate {
	_c.mutation.SetMfaSecret(v)
	return _c
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (_c *UserCreate) SetNillableMfaSecret(v *string) *UserCreate {
	if v != nil {
		_c.SetMfaSecret(*v)
	}
	return _c
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (_c *UserCreate) SetMfaEnabled(v bool) *UserCreate {
	_c.mutation.SetMfaEnabled(v)
	return _c
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (_c *UserCreate) SetNillableMfaEnabled(v *bool) *UserCreate {
	if v != nil {
		_c.SetMfaEnabled(*v)
	}
	return _c
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (_c *UserCreate) SetOnboardingStartedAt(v time.Time) *UserCreate {
	_c.mutation.SetOnboardingStartedAt(v)
	return _c
}

// SetNillableOnboardingStartedAt sets the "onboarding_started_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingStartedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetOnboardingStartedAt(*v)
	}
	return _c
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (_c *UserCreate) SetOnboardingCompletedAt(v time.Time) *UserCreate {
	_c.mutation.SetOnboardingCompletedAt(v)
	return _c
}

// SetNillableOnboardingCompletedAt sets the "onboarding_completed_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingCompletedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetOnboardingCompletedAt(*v)
	}
	return _c
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (_c *UserCreate) SetOnboardingSkipped(v bool) *UserCreate {
	_c.mutation.SetOnboardingSkipped(v)
	return _c
}

// SetNillableOnboardingSkipped sets the "onboarding_skipped" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingSkipped(v *bool) *UserCreate {
	if v != nil {
		_c.SetOnboardingSkipped(*v)
	}
	return _c
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (_c *UserCreate) SetOnboardingVersion(v string) *UserCreate {
	_c.mutation.SetOnboardingVersion(v)
	return _c
}

// SetNillableOnboardingVersion sets the "onboarding_version" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingVersion(v *string) *UserCreate {
	if v != nil {
		_c.SetOnboardingVersion(*v)
	}
	return _c
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (_c *UserCreate) SetOnboardingCompleted(v bool) *UserCreate {
	_c.mutation.SetOnboardingCompleted(v)
	return _c
}

// SetNillableOnboardingCompleted sets the "onboarding_completed" field if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingCompleted(v *bool) *UserCreate {
	if v != nil {
		_c.SetOnboardingCompleted(*v)
	}
	return _c
}

// SetPosition sets the "position" field.
func (_c *UserCreate) SetPosition(v string) *UserCreate {
	_c.mutation.SetPosition(v)
	return _c
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_c *UserCreate) SetNillablePosition(v *string) *UserCreate {
	if v != nil {
		_c.SetPosition(*v)
	}
	return _c
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (_c *UserCreate) SetAnalyticsProperties(v map[string]interface{}) *UserCreate {
	_c.mutation.SetAnalyticsProperties(v)
	return _c
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (_c *UserCreate) SetProfileID(id int) *UserCreate {
	_c.mutation.SetProfileID(id)
	return _c
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableProfileID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetProfileID(*id)
	}
	return _c
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (_c *UserCreate) SetProfile(v *UserProfile) *UserCreate {
	return _c.SetProfileID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (_c *UserCreate) AddSessionIDs(ids ...int) *UserCreate {
	_c.mutation.AddSessionIDs(ids...)
	return _c
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (_c *UserCreate) AddSessions(v ...*UserSession) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSessionIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (_c *UserCreate) AddTokenIDs(ids ...int) *UserCreate {
	_c.mutation.AddTokenIDs(ids...)
	return _c
}

// AddTokens adds the "tokens" edges to the Token entity.
func (_c *UserCreate) AddTokens(v ...*Token) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTokenIDs(ids...)
}

// AddTrustedDeviceIDs adds the "trusted_devices" edge to the TrustedDevice entity by IDs.
func (_c *UserCreate) AddTrustedDeviceIDs(ids ...int) *UserCreate {
	_c.mutation.AddTrustedDeviceIDs(ids...)
	return _c
}

// AddTrustedDevices adds the "trusted_devices" edges to the TrustedDevice entity.
func (_c *UserCreate) AddTrustedDevices(v ...*TrustedDevice) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTrustedDeviceIDs(ids...)
}

// AddPasswordHistoryIDs adds the "password_history" edge to the PasswordHistory entity by IDs.
func (_c *UserCreate) AddPasswordHistoryIDs(ids ...int) *UserCreate {
	_c.mutation.AddPasswordHistoryIDs(ids...)
	return _c
}

// AddPasswordHistory adds the "password_history" edges to the PasswordHistory entity.
func (_c *UserCreate) AddPasswordHistory(v ...*PasswordHistory) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPasswordHistoryIDs(ids...)
}

// SetTeamMemberID sets the "team_member" edge to the TeamMember entity by ID.
func (_c *UserCreate) SetTeamMemberID(id int) *UserCreate {
	_c.mutation.SetTeamMemberID(id)
	return _c
}

// SetNillableTeamMemberID sets the "team_member" edge to the TeamMember entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableTeamMemberID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetTeamMemberID(*id)
	}
	return _c
}

// SetTeamMember sets the "team_member" edge to the TeamMember entity.
func (_c *UserCreate) SetTeamMember(v *TeamMember) *UserCreate {
	return _c.SetTeamMemberID(v.ID)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (_c *UserCreate) AddAuditLogIDs(ids ...int) *UserCreate {
	_c.mutation.AddAuditLogIDs(ids...)
	return _c
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (_c *UserCreate) AddAuditLogs(v ...*AuditLog) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAuditLogIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_c *UserCreate) AddJobIDs(ids ...int) *UserCreate {
	_c.mutation.AddJobIDs(ids...)
	return _c
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_c *UserCreate) AddJobs(v ...*Job) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobIDs(ids...)
}

// AddDashboardIDs adds the "dashboards" edge to the AnalyticsDashboard entity by IDs.
func (_c *UserCreate) AddDashboardIDs(ids ...int) *UserCreate {
	_c.mutation.AddDashboardIDs(ids...)
	return _c
}

// AddDashboards adds the "dashboards" edges to the AnalyticsDashboard entity.
func (_c *UserCreate) AddDashboards(v ...*AnalyticsDashboard) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDashboardIDs(ids...)
}

// AddAnalyticsEventIDs adds the "analytics_events" edge to the AnalyticsEvent entity by IDs.
func (_c *UserCreate) AddAnalyticsEventIDs(ids ...int) *UserCreate {
	_c.mutation.AddAnalyticsEventIDs(ids...)
	return _c
}

// AddAnalyticsEvents adds the "analytics_events" edges to the AnalyticsEvent entity.
func (_c *UserCreate) AddAnalyticsEvents(v ...*AnalyticsEvent) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAnalyticsEventIDs(ids...)
}

// AddCreatedReportIDs adds the "created_reports" edge to the ReportDefinition entity by IDs.
func (_c *UserCreate) AddCreatedReportIDs(ids ...int) *UserCreate {
	_c.mutation.AddCreatedReportIDs(ids...)
	return _c
}

// AddCreatedReports adds the "created_reports" edges to the ReportDefinition entity.
func (_c *UserCreate) AddCreatedReports(v ...*ReportDefinition) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCreatedReportIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_c *UserCreate) AddGeneratedReportIDs(ids ...int) *UserCreate {
	_c.mutation.AddGeneratedReportIDs(ids...)
	return _c
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_c *UserCreate) AddGeneratedReports(v ...*GeneratedReport) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGeneratedReportIDs(ids...)
}

// AddReportPermissionIDs adds the "report_permissions" edge to the ReportPermission entity by IDs.
func (_c *UserCreate) AddReportPermissionIDs(ids ...int) *UserCreate {
	_c.mutation.AddReportPermissionIDs(ids...)
	return _c
}

// AddReportPermissions adds the "report_permissions" edges to the ReportPermission entity.
func (_c *UserCreate) AddReportPermissions(v ...*ReportPermission) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReportPermissionIDs(ids...)
}

// AddScheduledReportIDs adds the "scheduled_reports" edge to the ScheduledReport entity by IDs.
func (_c *UserCreate) AddScheduledReportIDs(ids ...int) *UserCreate {
	_c.mutation.AddScheduledReportIDs(ids...)
	return _c
}

// AddScheduledReports adds the "scheduled_reports" edges to the ScheduledReport entity.
func (_c *UserCreate) AddScheduledReports(v ...*ScheduledReport) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduledReportIDs(ids...)
}

// AddCreatedProgramIDs adds the "created_programs" edge to the Program entity by IDs.
func (_c *UserCreate) AddCreatedProgramIDs(ids ...int) *UserCreate {
	_c.mutation.AddCreatedProgramIDs(ids...)
	return _c
}

// AddCreatedPrograms adds the "created_programs" edges to the Program entity.
func (_c *UserCreate) AddCreatedPrograms(v ...*Program) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCreatedProgramIDs(ids...)
}

// AddUpdatedProgramIDs adds the "updated_programs" edge to the Program entity by IDs.
func (_c *UserCreate) AddUpdatedProgramIDs(ids ...int) *UserCreate {
	_c.mutation.AddUpdatedProgramIDs(ids...)
	return _c
}

// AddUpdatedPrograms adds the "updated_programs" edges to the Program entity.
func (_c *UserCreate) AddUpdatedPrograms(v ...*Program) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUpdatedProgramIDs(ids...)
}

// AddProgramEnrolmentIDs adds the "program_enrolments" edge to the ProgramEnrolment entity by IDs.
func (_c *UserCreate) AddProgramEnrolmentIDs(ids ...int) *UserCreate {
	_c.mutation.AddProgramEnrolmentIDs(ids...)
	return _c
}

// AddProgramEnrolments adds the "program_enrolments" edges to the ProgramEnrolment entity.
func (_c *UserCreate) AddProgramEnrolments(v ...*ProgramEnrolment) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramEnrolmentIDs(ids...)
}

// AddParticipantInIDs adds the "participant_in" edge to the ProgramParticipant entity by IDs.
func (_c *UserCreate) AddParticipantInIDs(ids ...int) *UserCreate {
	_c.mutation.AddParticipantInIDs(ids...)
	return _c
}

// AddParticipantIn adds the "participant_in" edges to the ProgramParticipant entity.
func (_c *UserCreate) AddParticipantIn(v ...*ProgramParticipant) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddParticipantInIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_c *UserCreate) AddSuccessStoryIDs(ids ...int) *UserCreate {
	_c.mutation.AddSuccessStoryIDs(ids...)
	return _c
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_c *UserCreate) AddSuccessStories(v ...*SuccessStory) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSuccessStoryIDs(ids...)
}

// AddNewsArticleIDs adds the "news_articles" edge to the NewsArticle entity by IDs.
func (_c *UserCreate) AddNewsArticleIDs(ids ...int) *UserCreate {
	_c.mutation.AddNewsArticleIDs(ids...)
	return _c
}

// AddNewsArticles adds the "news_articles" edges to the NewsArticle entity.
func (_c *UserCreate) AddNewsArticles(v ...*NewsArticle) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNewsArticleIDs(ids...)
}

// AddCreatedEventIDs adds the "created_events" edge to the Event entity by IDs.
func (_c *UserCreate) AddCreatedEventIDs(ids ...int) *UserCreate {
	_c.mutation.AddCreatedEventIDs(ids...)
	return _c
}

// AddCreatedEvents adds the "created_events" edges to the Event entity.
func (_c *UserCreate) AddCreatedEvents(v ...*Event) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCreatedEventIDs(ids...)
}

// AddEventRegistrationIDs adds the "event_registrations" edge to the EventRegistration entity by IDs.
func (_c *UserCreate) AddEventRegistrationIDs(ids ...int) *UserCreate {
	_c.mutation.AddEventRegistrationIDs(ids...)
	return _c
}

// AddEventRegistrations adds the "event_registrations" edges to the EventRegistration entity.
func (_c *UserCreate) AddEventRegistrations(v ...*EventRegistration) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventRegistrationIDs(ids...)
}

// AddMessagesSentIDs adds the "messages_sent" edge to the Message entity by IDs.
func (_c *UserCreate) AddMessagesSentIDs(ids ...int) *UserCreate {
	_c.mutation.AddMessagesSentIDs(ids...)
	return _c
}

// AddMessagesSent adds the "messages_sent" edges to the Message entity.
func (_c *UserCreate) AddMessagesSent(v ...*Message) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMessagesSentIDs(ids...)
}

// AddConversationLinkIDs adds the "conversation_links" edge to the ConversationParticipant entity by IDs.
func (_c *UserCreate) AddConversationLinkIDs(ids ...int) *UserCreate {
	_c.mutation.AddConversationLinkIDs(ids...)
	return _c
}

// AddConversationLinks adds the "conversation_links" edges to the ConversationParticipant entity.
func (_c *UserCreate) AddConversationLinks(v ...*ConversationParticipant) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddConversationLinkIDs(ids...)
}

// AddVolunteerApplicationIDs adds the "volunteer_applications" edge to the VolunteerApplication entity by IDs.
func (_c *UserCreate) AddVolunteerApplicationIDs(ids ...int) *UserCreate {
	_c.mutation.AddVolunteerApplicationIDs(ids...)
	return _c
}

// AddVolunteerApplications adds the "volunteer_applications" edges to the VolunteerApplication entity.
func (_c *UserCreate) AddVolunteerApplications(v ...*VolunteerApplication) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddVolunteerApplicationIDs(ids...)
}

// AddMentorshipRequestIDs adds the "mentorship_requests" edge to the MentorshipRequest entity by IDs.
func (_c *UserCreate) AddMentorshipRequestIDs(ids ...int) *UserCreate {
	_c.mutation.AddMentorshipRequestIDs(ids...)
	return _c
}

// AddMentorshipRequests adds the "mentorship_requests" edges to the MentorshipRequest entity.
func (_c *UserCreate) AddMentorshipRequests(v ...*MentorshipRequest) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMentorshipRequestIDs(ids...)
}

// AddMentorshipsMentoringIDs adds the "mentorships_mentoring" edge to the MentorshipRequest entity by IDs.
func (_c *UserCreate) AddMentorshipsMentoringIDs(ids ...int) *UserCreate {
	_c.mutation.AddMentorshipsMentoringIDs(ids...)
	return _c
}

// AddMentorshipsMentoring adds the "mentorships_mentoring" edges to the MentorshipRequest entity.
func (_c *UserCreate) AddMentorshipsMentoring(v ...*MentorshipRequest) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMentorshipsMentoringIDs(ids...)
}

// AddAchievementIDs adds the "achievements" edge to the UserAchievement entity by IDs.
func (_c *UserCreate) AddAchievementIDs(ids ...int) *UserCreate {
	_c.mutation.AddAchievementIDs(ids...)
	return _c
}

// AddAchievements adds the "achievements" edges to the UserAchievement entity.
func (_c *UserCreate) AddAchievements(v ...*UserAchievement) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAchievementIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_c *UserCreate) AddDonationIDs(ids ...int) *UserCreate {
	_c.mutation.AddDonationIDs(ids...)
	return _c
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_c *UserCreate) AddDonations(v ...*Donation) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDonationIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_c *UserCreate) AddOrganizationIDs(ids ...int) *UserCreate {
	_c.mutation.AddOrganizationIDs(ids...)
	return _c
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_c *UserCreate) AddOrganization(v ...*Organization) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrganizationIDs(ids...)
}

// AddManagedPartnershipIDs adds the "managed_partnerships" edge to the Partnership entity by IDs.
func (_c *UserCreate) AddManagedPartnershipIDs(ids ...int) *UserCreate {
	_c.mutation.AddManagedPartnershipIDs(ids...)
	return _c
}

// AddManagedPartnerships adds the "managed_partnerships" edges to the Partnership entity.
func (_c *UserCreate) AddManagedPartnerships(v ...*Partnership) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddManagedPartnershipIDs(ids...)
}

// AddPartnershipContactIDs adds the "partnership_contacts" edge to the Partnership entity by IDs.
func (_c *UserCreate) AddPartnershipContactIDs(ids ...int) *UserCreate {
	_c.mutation.AddPartnershipContactIDs(ids...)
	return _c
}

// AddPartnershipContacts adds the "partnership_contacts" edges to the Partnership entity.
func (_c *UserCreate) AddPartnershipContacts(v ...*Partnership) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPartnershipContactIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_c *UserCreate) AddSiteVisitIDs(ids ...int) *UserCreate {
	_c.mutation.AddSiteVisitIDs(ids...)
	return _c
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_c *UserCreate) AddSiteVisits(v ...*SiteVisit) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSiteVisitIDs(ids...)
}

// AddDocumentUploadIDs adds the "document_uploads" edge to the Document entity by IDs.
func (_c *UserCreate) AddDocumentUploadIDs(ids ...int) *UserCreate {
	_c.mutation.AddDocumentUploadIDs(ids...)
	return _c
}

// AddDocumentUploads adds the "document_uploads" edges to the Document entity.
func (_c *UserCreate) AddDocumentUploads(v ...*Document) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDocumentUploadIDs(ids...)
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (_c *UserCreate) AddActivityLogIDs(ids ...int) *UserCreate {
	_c.mutation.AddActivityLogIDs(ids...)
	return _c
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (_c *UserCreate) AddActivityLogs(v ...*ActivityLog) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActivityLogIDs(ids...)
}

// SetConsentsID sets the "consents" edge to the UserConsent entity by ID.
func (_c *UserCreate) SetConsentsID(id int) *UserCreate {
	_c.mutation.SetConsentsID(id)
	return _c
}

// SetNillableConsentsID sets the "consents" edge to the UserConsent entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableConsentsID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetConsentsID(*id)
	}
	return _c
}

// SetConsents sets the "consents" edge to the UserConsent entity.
func (_c *UserCreate) SetConsents(v *UserConsent) *UserCreate {
	return _c.SetConsentsID(v.ID)
}

// SetOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID.
func (_c *UserCreate) SetOnboardingID(id int) *UserCreate {
	_c.mutation.SetOnboardingID(id)
	return _c
}

// SetNillableOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillableOnboardingID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetOnboardingID(*id)
	}
	return _c
}

// SetOnboarding sets the "onboarding" edge to the UserOnboarding entity.
func (_c *UserCreate) SetOnboarding(v *UserOnboarding) *UserCreate {
	return _c.SetOnboardingID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.IsVerified(); !ok {
		v := user.DefaultIsVerified
		_c.mutation.SetIsVerified(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := user.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.SecurityTimestamp(); !ok {
		v := user.DefaultSecurityTimestamp()
		_c.mutation.SetSecurityTimestamp(v)
	}
	if _, ok := _c.mutation.PasswordResetRequired(); !ok {
		v := user.DefaultPasswordResetRequired
		_c.mutation.SetPasswordResetRequired(v)
	}
	if _, ok := _c.mutation.MfaEnabled(); !ok {
		v := user.DefaultMfaEnabled
		_c.mutation.SetMfaEnabled(v)
	}
	if _, ok := _c.mutation.OnboardingSkipped(); !ok {
		v := user.DefaultOnboardingSkipped
		_c.mutation.SetOnboardingSkipped(v)
	}
	if _, ok := _c.mutation.OnboardingCompleted(); !ok {
		v := user.DefaultOnboardingCompleted
		_c.mutation.SetOnboardingCompleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := _c.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "User.is_verified"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "User.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := _c.mutation.SecurityTimestamp(); !ok {
		return &ValidationError{Name: "security_timestamp", err: errors.New(`ent: missing required field "User.security_timestamp"`)}
	}
	if _, ok := _c.mutation.PasswordResetRequired(); !ok {
		return &ValidationError{Name: "password_reset_required", err: errors.New(`ent: missing required field "User.password_reset_required"`)}
	}
	if _, ok := _c.mutation.Roles(); !ok {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required field "User.roles"`)}
	}
	if _, ok := _c.mutation.MfaEnabled(); !ok {
		return &ValidationError{Name: "mfa_enabled", err: errors.New(`ent: missing required field "User.mfa_enabled"`)}
	}
	if _, ok := _c.mutation.OnboardingSkipped(); !ok {
		return &ValidationError{Name: "onboarding_skipped", err: errors.New(`ent: missing required field "User.onboarding_skipped"`)}
	}
	if _, ok := _c.mutation.OnboardingCompleted(); !ok {
		return &ValidationError{Name: "onboarding_completed", err: errors.New(`ent: missing required field "User.onboarding_completed"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
		_node.HashedPassword = value
	}
	if value, ok := _c.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := _c.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeTime, value)
		_node.EmailVerified = value
	}
	if value, ok := _c.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.DeactivatedAt(); ok {
		_spec.SetField(user.FieldDeactivatedAt, field.TypeTime, value)
		_node.DeactivatedAt = value
	}
	if value, ok := _c.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
		_node.LockedUntil = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ImpersonatingUserID(); ok {
		_spec.SetField(user.FieldImpersonatingUserID, field.TypeString, value)
		_node.ImpersonatingUserID = value
	}
	if value, ok := _c.mutation.SecurityTimestamp(); ok {
		_spec.SetField(user.FieldSecurityTimestamp, field.TypeTime, value)
		_node.SecurityTimestamp = value
	}
	if value, ok := _c.mutation.PasswordResetRequired(); ok {
		_spec.SetField(user.FieldPasswordResetRequired, field.TypeBool, value)
		_node.PasswordResetRequired = value
	}
	if value, ok := _c.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
		_node.Roles = value
	}
	if value, ok := _c.mutation.MfaSecret(); ok {
		_spec.SetField(user.FieldMfaSecret, field.TypeString, value)
		_node.MfaSecret = value
	}
	if value, ok := _c.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
		_node.MfaEnabled = value
	}
	if value, ok := _c.mutation.OnboardingStartedAt(); ok {
		_spec.SetField(user.FieldOnboardingStartedAt, field.TypeTime, value)
		_node.OnboardingStartedAt = value
	}
	if value, ok := _c.mutation.OnboardingCompletedAt(); ok {
		_spec.SetField(user.FieldOnboardingCompletedAt, field.TypeTime, value)
		_node.OnboardingCompletedAt = value
	}
	if value, ok := _c.mutation.OnboardingSkipped(); ok {
		_spec.SetField(user.FieldOnboardingSkipped, field.TypeBool, value)
		_node.OnboardingSkipped = value
	}
	if value, ok := _c.mutation.OnboardingVersion(); ok {
		_spec.SetField(user.FieldOnboardingVersion, field.TypeString, value)
		_node.OnboardingVersion = value
	}
	if value, ok := _c.mutation.OnboardingCompleted(); ok {
		_spec.SetField(user.FieldOnboardingCompleted, field.TypeBool, value)
		_node.OnboardingCompleted = value
	}
	if value, ok := _c.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := _c.mutation.AnalyticsProperties(); ok {
		_spec.SetField(user.FieldAnalyticsProperties, field.TypeJSON, value)
		_node.AnalyticsProperties = value
	}
	if nodes := _c.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TrustedDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PasswordHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TeamMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_team_member = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DashboardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AnalyticsEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReportPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UpdatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramEnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParticipantInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NewsArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MessagesSentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ConversationLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VolunteerApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MentorshipRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MentorshipsMentoringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ManagedPartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PartnershipContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DocumentUploadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ConsentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconsent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OnboardingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	_c.conflict = opts
	return &UserUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: _c,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsert) ClearUsername() *UserUpsert {
	u.SetNull(user.FieldUsername)
	return u
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsert) SetHashedPassword(v string) *UserUpsert {
	u.Set(user.FieldHashedPassword, v)
	return u
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsert) UpdateHashedPassword() *UserUpsert {
	u.SetExcluded(user.FieldHashedPassword)
	return u
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (u *UserUpsert) ClearHashedPassword() *UserUpsert {
	u.SetNull(user.FieldHashedPassword)
	return u
}

// SetIsVerified sets the "is_verified" field.
func (u *UserUpsert) SetIsVerified(v bool) *UserUpsert {
	u.Set(user.FieldIsVerified, v)
	return u
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsVerified() *UserUpsert {
	u.SetExcluded(user.FieldIsVerified)
	return u
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsert) SetEmailVerified(v time.Time) *UserUpsert {
	u.Set(user.FieldEmailVerified, v)
	return u
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerified() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerified)
	return u
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *UserUpsert) ClearEmailVerified() *UserUpsert {
	u.SetNull(user.FieldEmailVerified)
	return u
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsert) SetLastLoginAt(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLoginAt, v)
	return u
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginAt() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginAt)
	return u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsert) ClearLastLoginAt() *UserUpsert {
	u.SetNull(user.FieldLastLoginAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsert) SetIsActive(v bool) *UserUpsert {
	u.Set(user.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsActive() *UserUpsert {
	u.SetExcluded(user.FieldIsActive)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *UserUpsert) SetDeactivatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeactivatedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *UserUpsert) ClearDeactivatedAt() *UserUpsert {
	u.SetNull(user.FieldDeactivatedAt)
	return u
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsert) SetLockedUntil(v time.Time) *UserUpsert {
	u.Set(user.FieldLockedUntil, v)
	return u
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsert) UpdateLockedUntil() *UserUpsert {
	u.SetExcluded(user.FieldLockedUntil)
	return u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsert) ClearLockedUntil() *UserUpsert {
	u.SetNull(user.FieldLockedUntil)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (u *UserUpsert) SetImpersonatingUserID(v string) *UserUpsert {
	u.Set(user.FieldImpersonatingUserID, v)
	return u
}

// UpdateImpersonatingUserID sets the "impersonating_user_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateImpersonatingUserID() *UserUpsert {
	u.SetExcluded(user.FieldImpersonatingUserID)
	return u
}

// ClearImpersonatingUserID clears the value of the "impersonating_user_id" field.
func (u *UserUpsert) ClearImpersonatingUserID() *UserUpsert {
	u.SetNull(user.FieldImpersonatingUserID)
	return u
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (u *UserUpsert) SetSecurityTimestamp(v time.Time) *UserUpsert {
	u.Set(user.FieldSecurityTimestamp, v)
	return u
}

// UpdateSecurityTimestamp sets the "security_timestamp" field to the value that was provided on create.
func (u *UserUpsert) UpdateSecurityTimestamp() *UserUpsert {
	u.SetExcluded(user.FieldSecurityTimestamp)
	return u
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (u *UserUpsert) SetPasswordResetRequired(v bool) *UserUpsert {
	u.Set(user.FieldPasswordResetRequired, v)
	return u
}

// UpdatePasswordResetRequired sets the "password_reset_required" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordResetRequired() *UserUpsert {
	u.SetExcluded(user.FieldPasswordResetRequired)
	return u
}

// SetRoles sets the "roles" field.
func (u *UserUpsert) SetRoles(v []string) *UserUpsert {
	u.Set(user.FieldRoles, v)
	return u
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UserUpsert) UpdateRoles() *UserUpsert {
	u.SetExcluded(user.FieldRoles)
	return u
}

// SetMfaSecret sets the "mfa_secret" field.
func (u *UserUpsert) SetMfaSecret(v string) *UserUpsert {
	u.Set(user.FieldMfaSecret, v)
	return u
}

// UpdateMfaSecret sets the "mfa_secret" field to the value that was provided on create.
func (u *UserUpsert) UpdateMfaSecret() *UserUpsert {
	u.SetExcluded(user.FieldMfaSecret)
	return u
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (u *UserUpsert) ClearMfaSecret() *UserUpsert {
	u.SetNull(user.FieldMfaSecret)
	return u
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsert) SetMfaEnabled(v bool) *UserUpsert {
	u.Set(user.FieldMfaEnabled, v)
	return u
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsert) UpdateMfaEnabled() *UserUpsert {
	u.SetExcluded(user.FieldMfaEnabled)
	return u
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (u *UserUpsert) SetOnboardingStartedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldOnboardingStartedAt, v)
	return u
}

// UpdateOnboardingStartedAt sets the "onboarding_started_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateOnboardingStartedAt() *UserUpsert {
	u.SetExcluded(user.FieldOnboardingStartedAt)
	return u
}

// ClearOnboardingStartedAt clears the value of the "onboarding_started_at" field.
func (u *UserUpsert) ClearOnboardingStartedAt() *UserUpsert {
	u.SetNull(user.FieldOnboardingStartedAt)
	return u
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (u *UserUpsert) SetOnboardingCompletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldOnboardingCompletedAt, v)
	return u
}

// UpdateOnboardingCompletedAt sets the "onboarding_completed_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateOnboardingCompletedAt() *UserUpsert {
	u.SetExcluded(user.FieldOnboardingCompletedAt)
	return u
}

// ClearOnboardingCompletedAt clears the value of the "onboarding_completed_at" field.
func (u *UserUpsert) ClearOnboardingCompletedAt() *UserUpsert {
	u.SetNull(user.FieldOnboardingCompletedAt)
	return u
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (u *UserUpsert) SetOnboardingSkipped(v bool) *UserUpsert {
	u.Set(user.FieldOnboardingSkipped, v)
	return u
}

// UpdateOnboardingSkipped sets the "onboarding_skipped" field to the value that was provided on create.
func (u *UserUpsert) UpdateOnboardingSkipped() *UserUpsert {
	u.SetExcluded(user.FieldOnboardingSkipped)
	return u
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (u *UserUpsert) SetOnboardingVersion(v string) *UserUpsert {
	u.Set(user.FieldOnboardingVersion, v)
	return u
}

// UpdateOnboardingVersion sets the "onboarding_version" field to the value that was provided on create.
func (u *UserUpsert) UpdateOnboardingVersion() *UserUpsert {
	u.SetExcluded(user.FieldOnboardingVersion)
	return u
}

// ClearOnboardingVersion clears the value of the "onboarding_version" field.
func (u *UserUpsert) ClearOnboardingVersion() *UserUpsert {
	u.SetNull(user.FieldOnboardingVersion)
	return u
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (u *UserUpsert) SetOnboardingCompleted(v bool) *UserUpsert {
	u.Set(user.FieldOnboardingCompleted, v)
	return u
}

// UpdateOnboardingCompleted sets the "onboarding_completed" field to the value that was provided on create.
func (u *UserUpsert) UpdateOnboardingCompleted() *UserUpsert {
	u.SetExcluded(user.FieldOnboardingCompleted)
	return u
}

// SetPosition sets the "position" field.
func (u *UserUpsert) SetPosition(v string) *UserUpsert {
	u.Set(user.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *UserUpsert) UpdatePosition() *UserUpsert {
	u.SetExcluded(user.FieldPosition)
	return u
}

// ClearPosition clears the value of the "position" field.
func (u *UserUpsert) ClearPosition() *UserUpsert {
	u.SetNull(user.FieldPosition)
	return u
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (u *UserUpsert) SetAnalyticsProperties(v map[string]interface{}) *UserUpsert {
	u.Set(user.FieldAnalyticsProperties, v)
	return u
}

// UpdateAnalyticsProperties sets the "analytics_properties" field to the value that was provided on create.
func (u *UserUpsert) UpdateAnalyticsProperties() *UserUpsert {
	u.SetExcluded(user.FieldAnalyticsProperties)
	return u
}

// ClearAnalyticsProperties clears the value of the "analytics_properties" field.
func (u *UserUpsert) ClearAnalyticsProperties() *UserUpsert {
	u.SetNull(user.FieldAnalyticsProperties)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsertOne) ClearUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsername()
	})
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsertOne) SetHashedPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHashedPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashedPassword()
	})
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (u *UserUpsertOne) ClearHashedPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearHashedPassword()
	})
}

// SetIsVerified sets the "is_verified" field.
func (u *UserUpsertOne) SetIsVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsVerified(v)
	})
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsVerified()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertOne) SetEmailVerified(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *UserUpsertOne) ClearEmailVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerified()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsertOne) SetLastLoginAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsertOne) ClearLastLoginAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertOne) SetIsActive(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsActive() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *UserUpsertOne) SetDeactivatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeactivatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *UserUpsertOne) ClearDeactivatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsertOne) SetLockedUntil(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsertOne) ClearLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (u *UserUpsertOne) SetImpersonatingUserID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetImpersonatingUserID(v)
	})
}

// UpdateImpersonatingUserID sets the "impersonating_user_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateImpersonatingUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateImpersonatingUserID()
	})
}

// ClearImpersonatingUserID clears the value of the "impersonating_user_id" field.
func (u *UserUpsertOne) ClearImpersonatingUserID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearImpersonatingUserID()
	})
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (u *UserUpsertOne) SetSecurityTimestamp(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSecurityTimestamp(v)
	})
}

// UpdateSecurityTimestamp sets the "security_timestamp" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSecurityTimestamp() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSecurityTimestamp()
	})
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (u *UserUpsertOne) SetPasswordResetRequired(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetRequired(v)
	})
}

// UpdatePasswordResetRequired sets the "password_reset_required" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordResetRequired() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetRequired()
	})
}

// SetRoles sets the "roles" field.
func (u *UserUpsertOne) SetRoles(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRoles(v)
	})
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRoles() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRoles()
	})
}

// SetMfaSecret sets the "mfa_secret" field.
func (u *UserUpsertOne) SetMfaSecret(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaSecret(v)
	})
}

// UpdateMfaSecret sets the "mfa_secret" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMfaSecret() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaSecret()
	})
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (u *UserUpsertOne) ClearMfaSecret() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMfaSecret()
	})
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsertOne) SetMfaEnabled(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaEnabled(v)
	})
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMfaEnabled() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaEnabled()
	})
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (u *UserUpsertOne) SetOnboardingStartedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingStartedAt(v)
	})
}

// UpdateOnboardingStartedAt sets the "onboarding_started_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOnboardingStartedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingStartedAt()
	})
}

// ClearOnboardingStartedAt clears the value of the "onboarding_started_at" field.
func (u *UserUpsertOne) ClearOnboardingStartedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingStartedAt()
	})
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (u *UserUpsertOne) SetOnboardingCompletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingCompletedAt(v)
	})
}

// UpdateOnboardingCompletedAt sets the "onboarding_completed_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOnboardingCompletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingCompletedAt()
	})
}

// ClearOnboardingCompletedAt clears the value of the "onboarding_completed_at" field.
func (u *UserUpsertOne) ClearOnboardingCompletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingCompletedAt()
	})
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (u *UserUpsertOne) SetOnboardingSkipped(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingSkipped(v)
	})
}

// UpdateOnboardingSkipped sets the "onboarding_skipped" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOnboardingSkipped() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingSkipped()
	})
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (u *UserUpsertOne) SetOnboardingVersion(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingVersion(v)
	})
}

// UpdateOnboardingVersion sets the "onboarding_version" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOnboardingVersion() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingVersion()
	})
}

// ClearOnboardingVersion clears the value of the "onboarding_version" field.
func (u *UserUpsertOne) ClearOnboardingVersion() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingVersion()
	})
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (u *UserUpsertOne) SetOnboardingCompleted(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingCompleted(v)
	})
}

// UpdateOnboardingCompleted sets the "onboarding_completed" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOnboardingCompleted() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingCompleted()
	})
}

// SetPosition sets the "position" field.
func (u *UserUpsertOne) SetPosition(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePosition() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *UserUpsertOne) ClearPosition() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPosition()
	})
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (u *UserUpsertOne) SetAnalyticsProperties(v map[string]interface{}) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAnalyticsProperties(v)
	})
}

// UpdateAnalyticsProperties sets the "analytics_properties" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAnalyticsProperties() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAnalyticsProperties()
	})
}

// ClearAnalyticsProperties clears the value of the "analytics_properties" field.
func (u *UserUpsertOne) ClearAnalyticsProperties() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAnalyticsProperties()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	_c.conflict = opts
	return &UserUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: _c,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *UserUpsertBulk) ClearUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUsername()
	})
}

// SetHashedPassword sets the "hashed_password" field.
func (u *UserUpsertBulk) SetHashedPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHashedPassword(v)
	})
}

// UpdateHashedPassword sets the "hashed_password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHashedPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashedPassword()
	})
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (u *UserUpsertBulk) ClearHashedPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearHashedPassword()
	})
}

// SetIsVerified sets the "is_verified" field.
func (u *UserUpsertBulk) SetIsVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsVerified(v)
	})
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsVerified()
	})
}

// SetEmailVerified sets the "email_verified" field.
func (u *UserUpsertBulk) SetEmailVerified(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerified(v)
	})
}

// UpdateEmailVerified sets the "email_verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerified()
	})
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (u *UserUpsertBulk) ClearEmailVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerified()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsertBulk) SetLastLoginAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsertBulk) ClearLastLoginAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserUpsertBulk) SetIsActive(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsActive() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsActive()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *UserUpsertBulk) SetDeactivatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeactivatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *UserUpsertBulk) ClearDeactivatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetLockedUntil sets the "locked_until" field.
func (u *UserUpsertBulk) SetLockedUntil(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "locked_until" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (u *UserUpsertBulk) ClearLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (u *UserUpsertBulk) SetImpersonatingUserID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetImpersonatingUserID(v)
	})
}

// UpdateImpersonatingUserID sets the "impersonating_user_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateImpersonatingUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateImpersonatingUserID()
	})
}

// ClearImpersonatingUserID clears the value of the "impersonating_user_id" field.
func (u *UserUpsertBulk) ClearImpersonatingUserID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearImpersonatingUserID()
	})
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (u *UserUpsertBulk) SetSecurityTimestamp(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSecurityTimestamp(v)
	})
}

// UpdateSecurityTimestamp sets the "security_timestamp" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSecurityTimestamp() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSecurityTimestamp()
	})
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (u *UserUpsertBulk) SetPasswordResetRequired(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordResetRequired(v)
	})
}

// UpdatePasswordResetRequired sets the "password_reset_required" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordResetRequired() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordResetRequired()
	})
}

// SetRoles sets the "roles" field.
func (u *UserUpsertBulk) SetRoles(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRoles(v)
	})
}

// UpdateRoles sets the "roles" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRoles() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRoles()
	})
}

// SetMfaSecret sets the "mfa_secret" field.
func (u *UserUpsertBulk) SetMfaSecret(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaSecret(v)
	})
}

// UpdateMfaSecret sets the "mfa_secret" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMfaSecret() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaSecret()
	})
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (u *UserUpsertBulk) ClearMfaSecret() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMfaSecret()
	})
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsertBulk) SetMfaEnabled(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaEnabled(v)
	})
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMfaEnabled() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaEnabled()
	})
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (u *UserUpsertBulk) SetOnboardingStartedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingStartedAt(v)
	})
}

// UpdateOnboardingStartedAt sets the "onboarding_started_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOnboardingStartedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingStartedAt()
	})
}

// ClearOnboardingStartedAt clears the value of the "onboarding_started_at" field.
func (u *UserUpsertBulk) ClearOnboardingStartedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingStartedAt()
	})
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (u *UserUpsertBulk) SetOnboardingCompletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingCompletedAt(v)
	})
}

// UpdateOnboardingCompletedAt sets the "onboarding_completed_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOnboardingCompletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingCompletedAt()
	})
}

// ClearOnboardingCompletedAt clears the value of the "onboarding_completed_at" field.
func (u *UserUpsertBulk) ClearOnboardingCompletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingCompletedAt()
	})
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (u *UserUpsertBulk) SetOnboardingSkipped(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingSkipped(v)
	})
}

// UpdateOnboardingSkipped sets the "onboarding_skipped" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOnboardingSkipped() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingSkipped()
	})
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (u *UserUpsertBulk) SetOnboardingVersion(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingVersion(v)
	})
}

// UpdateOnboardingVersion sets the "onboarding_version" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOnboardingVersion() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingVersion()
	})
}

// ClearOnboardingVersion clears the value of the "onboarding_version" field.
func (u *UserUpsertBulk) ClearOnboardingVersion() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOnboardingVersion()
	})
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (u *UserUpsertBulk) SetOnboardingCompleted(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOnboardingCompleted(v)
	})
}

// UpdateOnboardingCompleted sets the "onboarding_completed" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOnboardingCompleted() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOnboardingCompleted()
	})
}

// SetPosition sets the "position" field.
func (u *UserUpsertBulk) SetPosition(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePosition() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *UserUpsertBulk) ClearPosition() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPosition()
	})
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (u *UserUpsertBulk) SetAnalyticsProperties(v map[string]interface{}) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAnalyticsProperties(v)
	})
}

// UpdateAnalyticsProperties sets the "analytics_properties" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAnalyticsProperties() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAnalyticsProperties()
	})
}

// ClearAnalyticsProperties clears the value of the "analytics_properties" field.
func (u *UserUpsertBulk) ClearAnalyticsProperties() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAnalyticsProperties()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
