// Code generated by ent, DO NOT EDIT.

package ballot

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ballot {
	return predicate.Ballot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ballot {
	return predicate.Ballot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ballot {
	return predicate.Ballot(sql.FieldLTE(FieldID, id))
}

// VoterID applies equality check predicate on the "voter_id" field. It's identical to VoterIDEQ.
func VoterID(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldVoterID, v))
}

// Choice applies equality check predicate on the "choice" field. It's identical to ChoiceEQ.
func Choice(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldChoice, v))
}

// CastAt applies equality check predicate on the "cast_at" field. It's identical to CastAtEQ.
func CastAt(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldCastAt, v))
}

// VoterIDEQ applies the EQ predicate on the "voter_id" field.
func VoterIDEQ(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldVoterID, v))
}

// VoterIDNEQ applies the NEQ predicate on the "voter_id" field.
func VoterIDNEQ(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldNEQ(FieldVoterID, v))
}

// VoterIDIn applies the In predicate on the "voter_id" field.
func VoterIDIn(vs ...string) predicate.Ballot {
	return predicate.Ballot(sql.FieldIn(FieldVoterID, vs...))
}

// VoterIDNotIn applies the NotIn predicate on the "voter_id" field.
func VoterIDNotIn(vs ...string) predicate.Ballot {
	return predicate.Ballot(sql.FieldNotIn(FieldVoterID, vs...))
}

// VoterIDGT applies the GT predicate on the "voter_id" field.
func VoterIDGT(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldGT(FieldVoterID, v))
}

// VoterIDGTE applies the GTE predicate on the "voter_id" field.
func VoterIDGTE(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldGTE(FieldVoterID, v))
}

// VoterIDLT applies the LT predicate on the "voter_id" field.
func VoterIDLT(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldLT(FieldVoterID, v))
}

// VoterIDLTE applies the LTE predicate on the "voter_id" field.
func VoterIDLTE(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldLTE(FieldVoterID, v))
}

// VoterIDContains applies the Contains predicate on the "voter_id" field.
func VoterIDContains(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldContains(FieldVoterID, v))
}

// VoterIDHasPrefix applies the HasPrefix predicate on the "voter_id" field.
func VoterIDHasPrefix(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldHasPrefix(FieldVoterID, v))
}

// VoterIDHasSuffix applies the HasSuffix predicate on the "voter_id" field.
func VoterIDHasSuffix(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldHasSuffix(FieldVoterID, v))
}

// VoterIDEqualFold applies the EqualFold predicate on the "voter_id" field.
func VoterIDEqualFold(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEqualFold(FieldVoterID, v))
}

// VoterIDContainsFold applies the ContainsFold predicate on the "voter_id" field.
func VoterIDContainsFold(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldContainsFold(FieldVoterID, v))
}

// ChoiceEQ applies the EQ predicate on the "choice" field.
func ChoiceEQ(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldChoice, v))
}

// ChoiceNEQ applies the NEQ predicate on the "choice" field.
func ChoiceNEQ(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldNEQ(FieldChoice, v))
}

// ChoiceIn applies the In predicate on the "choice" field.
func ChoiceIn(vs ...string) predicate.Ballot {
	return predicate.Ballot(sql.FieldIn(FieldChoice, vs...))
}

// ChoiceNotIn applies the NotIn predicate on the "choice" field.
func ChoiceNotIn(vs ...string) predicate.Ballot {
	return predicate.Ballot(sql.FieldNotIn(FieldChoice, vs...))
}

// ChoiceGT applies the GT predicate on the "choice" field.
func ChoiceGT(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldGT(FieldChoice, v))
}

// ChoiceGTE applies the GTE predicate on the "choice" field.
func ChoiceGTE(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldGTE(FieldChoice, v))
}

// ChoiceLT applies the LT predicate on the "choice" field.
func ChoiceLT(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldLT(FieldChoice, v))
}

// ChoiceLTE applies the LTE predicate on the "choice" field.
func ChoiceLTE(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldLTE(FieldChoice, v))
}

// ChoiceContains applies the Contains predicate on the "choice" field.
func ChoiceContains(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldContains(FieldChoice, v))
}

// ChoiceHasPrefix applies the HasPrefix predicate on the "choice" field.
func ChoiceHasPrefix(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldHasPrefix(FieldChoice, v))
}

// ChoiceHasSuffix applies the HasSuffix predicate on the "choice" field.
func ChoiceHasSuffix(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldHasSuffix(FieldChoice, v))
}

// ChoiceEqualFold applies the EqualFold predicate on the "choice" field.
func ChoiceEqualFold(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldEqualFold(FieldChoice, v))
}

// ChoiceContainsFold applies the ContainsFold predicate on the "choice" field.
func ChoiceContainsFold(v string) predicate.Ballot {
	return predicate.Ballot(sql.FieldContainsFold(FieldChoice, v))
}

// CastAtEQ applies the EQ predicate on the "cast_at" field.
func CastAtEQ(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldEQ(FieldCastAt, v))
}

// CastAtNEQ applies the NEQ predicate on the "cast_at" field.
func CastAtNEQ(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldNEQ(FieldCastAt, v))
}

// CastAtIn applies the In predicate on the "cast_at" field.
func CastAtIn(vs ...time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldIn(FieldCastAt, vs...))
}

// CastAtNotIn applies the NotIn predicate on the "cast_at" field.
func CastAtNotIn(vs ...time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldNotIn(FieldCastAt, vs...))
}

// CastAtGT applies the GT predicate on the "cast_at" field.
func CastAtGT(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldGT(FieldCastAt, v))
}

// CastAtGTE applies the GTE predicate on the "cast_at" field.
func CastAtGTE(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldGTE(FieldCastAt, v))
}

// CastAtLT applies the LT predicate on the "cast_at" field.
func CastAtLT(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldLT(FieldCastAt, v))
}

// CastAtLTE applies the LTE predicate on the "cast_at" field.
func CastAtLTE(v time.Time) predicate.Ballot {
	return predicate.Ballot(sql.FieldLTE(FieldCastAt, v))
}

// HasVote applies the HasEdge predicate on the "vote" edge.
func HasVote() predicate.Ballot {
	return predicate.Ballot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoteTable, VoteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoteWith applies the HasEdge predicate on the "vote" edge with a given conditions (other predicates).
func HasVoteWith(preds ...predicate.Vote) predicate.Ballot {
	return predicate.Ballot(func(s *sql.Selector) {
		step := newVoteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ballot) predicate.Ballot {
	return predicate.Ballot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ballot) predicate.Ballot {
	return predicate.Ballot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ballot) predicate.Ballot {
	return predicate.Ballot(sql.NotPredicates(p))
}
