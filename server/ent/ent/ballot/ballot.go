// Code generated by ent, DO NOT EDIT.

package ballot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ballot type in the database.
	Label = "ballot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVoterID holds the string denoting the voter_id field in the database.
	FieldVoterID = "voter_id"
	// FieldChoice holds the string denoting the choice field in the database.
	FieldChoice = "choice"
	// FieldCastAt holds the string denoting the cast_at field in the database.
	FieldCastAt = "cast_at"
	// EdgeVote holds the string denoting the vote edge name in mutations.
	EdgeVote = "vote"
	// Table holds the table name of the ballot in the database.
	Table = "ballots"
	// VoteTable is the table that holds the vote relation/edge.
	VoteTable = "ballots"
	// VoteInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VoteInverseTable = "votes"
	// VoteColumn is the table column denoting the vote relation/edge.
	VoteColumn = "vote_ballots"
)

// Columns holds all SQL columns for ballot fields.
var Columns = []string{
	FieldID,
	FieldVoterID,
	FieldChoice,
	FieldCastAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ballots"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vote_ballots",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCastAt holds the default value on creation for the "cast_at" field.
	DefaultCastAt func() time.Time
)

// OrderOption defines the ordering options for the Ballot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVoterID orders the results by the voter_id field.
func ByVoterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoterID, opts...).ToFunc()
}

// ByChoice orders the results by the choice field.
func ByChoice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChoice, opts...).ToFunc()
}

// ByCastAt orders the results by the cast_at field.
func ByCastAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCastAt, opts...).ToFunc()
}

// ByVoteField orders the results by vote field.
func ByVoteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVoteStep(), sql.OrderByField(field, opts...))
	}
}
func newVoteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VoteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VoteTable, VoteColumn),
	)
}
