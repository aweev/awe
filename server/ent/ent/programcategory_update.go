// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programcategory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProgramCategoryUpdate is the builder for updating ProgramCategory entities.
type ProgramCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProgramCategoryMutation
}

// Where appends a list predicates to the ProgramCategoryUpdate builder.
func (_u *ProgramCategoryUpdate) Where(ps ...predicate.ProgramCategory) *ProgramCategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ProgramCategoryUpdate) SetSlug(v string) *ProgramCategoryUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProgramCategoryUpdate) SetNillableSlug(v *string) *ProgramCategoryUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramCategoryUpdate) SetName(v map[string]string) *ProgramCategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramCategoryUpdate) SetDescription(v map[string]string) *ProgramCategoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProgramCategoryUpdate) ClearDescription() *ProgramCategoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIconName sets the "icon_name" field.
func (_u *ProgramCategoryUpdate) SetIconName(v string) *ProgramCategoryUpdate {
	_u.mutation.SetIconName(v)
	return _u
}

// SetNillableIconName sets the "icon_name" field if the given value is not nil.
func (_u *ProgramCategoryUpdate) SetNillableIconName(v *string) *ProgramCategoryUpdate {
	if v != nil {
		_u.SetIconName(*v)
	}
	return _u
}

// ClearIconName clears the value of the "icon_name" field.
func (_u *ProgramCategoryUpdate) ClearIconName() *ProgramCategoryUpdate {
	_u.mutation.ClearIconName()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *ProgramCategoryUpdate) SetDisplayOrder(v int) *ProgramCategoryUpdate {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *ProgramCategoryUpdate) SetNillableDisplayOrder(v *int) *ProgramCategoryUpdate {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *ProgramCategoryUpdate) AddDisplayOrder(v int) *ProgramCategoryUpdate {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetColor sets the "color" field.
func (_u *ProgramCategoryUpdate) SetColor(v string) *ProgramCategoryUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *ProgramCategoryUpdate) SetNillableColor(v *string) *ProgramCategoryUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *ProgramCategoryUpdate) SetHeroImageURL(v string) *ProgramCategoryUpdate {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *ProgramCategoryUpdate) SetNillableHeroImageURL(v *string) *ProgramCategoryUpdate {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *ProgramCategoryUpdate) ClearHeroImageURL() *ProgramCategoryUpdate {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramCategoryUpdate) SetUpdatedAt(v time.Time) *ProgramCategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ProgramCategoryUpdate) AddProgramIDs(ids ...int) *ProgramCategoryUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ProgramCategoryUpdate) AddPrograms(v ...*Program) *ProgramCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// Mutation returns the ProgramCategoryMutation object of the builder.
func (_u *ProgramCategoryUpdate) Mutation() *ProgramCategoryMutation {
	return _u.mutation
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ProgramCategoryUpdate) ClearPrograms() *ProgramCategoryUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ProgramCategoryUpdate) RemoveProgramIDs(ids ...int) *ProgramCategoryUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ProgramCategoryUpdate) RemovePrograms(v ...*Program) *ProgramCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProgramCategoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProgramCategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramCategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramCategoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := programcategory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ProgramCategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(programcategory.Table, programcategory.Columns, sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(programcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(programcategory.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(programcategory.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(programcategory.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.IconName(); ok {
		_spec.SetField(programcategory.FieldIconName, field.TypeString, value)
	}
	if _u.mutation.IconNameCleared() {
		_spec.ClearField(programcategory.FieldIconName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(programcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(programcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(programcategory.FieldColor, field.TypeString, value)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(programcategory.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(programcategory.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProgramCategoryUpdateOne is the builder for updating a single ProgramCategory entity.
type ProgramCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgramCategoryMutation
}

// SetSlug sets the "slug" field.
func (_u *ProgramCategoryUpdateOne) SetSlug(v string) *ProgramCategoryUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProgramCategoryUpdateOne) SetNillableSlug(v *string) *ProgramCategoryUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramCategoryUpdateOne) SetName(v map[string]string) *ProgramCategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramCategoryUpdateOne) SetDescription(v map[string]string) *ProgramCategoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProgramCategoryUpdateOne) ClearDescription() *ProgramCategoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIconName sets the "icon_name" field.
func (_u *ProgramCategoryUpdateOne) SetIconName(v string) *ProgramCategoryUpdateOne {
	_u.mutation.SetIconName(v)
	return _u
}

// SetNillableIconName sets the "icon_name" field if the given value is not nil.
func (_u *ProgramCategoryUpdateOne) SetNillableIconName(v *string) *ProgramCategoryUpdateOne {
	if v != nil {
		_u.SetIconName(*v)
	}
	return _u
}

// ClearIconName clears the value of the "icon_name" field.
func (_u *ProgramCategoryUpdateOne) ClearIconName() *ProgramCategoryUpdateOne {
	_u.mutation.ClearIconName()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *ProgramCategoryUpdateOne) SetDisplayOrder(v int) *ProgramCategoryUpdateOne {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *ProgramCategoryUpdateOne) SetNillableDisplayOrder(v *int) *ProgramCategoryUpdateOne {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *ProgramCategoryUpdateOne) AddDisplayOrder(v int) *ProgramCategoryUpdateOne {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetColor sets the "color" field.
func (_u *ProgramCategoryUpdateOne) SetColor(v string) *ProgramCategoryUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *ProgramCategoryUpdateOne) SetNillableColor(v *string) *ProgramCategoryUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *ProgramCategoryUpdateOne) SetHeroImageURL(v string) *ProgramCategoryUpdateOne {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *ProgramCategoryUpdateOne) SetNillableHeroImageURL(v *string) *ProgramCategoryUpdateOne {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *ProgramCategoryUpdateOne) ClearHeroImageURL() *ProgramCategoryUpdateOne {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramCategoryUpdateOne) SetUpdatedAt(v time.Time) *ProgramCategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ProgramCategoryUpdateOne) AddProgramIDs(ids ...int) *ProgramCategoryUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ProgramCategoryUpdateOne) AddPrograms(v ...*Program) *ProgramCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// Mutation returns the ProgramCategoryMutation object of the builder.
func (_u *ProgramCategoryUpdateOne) Mutation() *ProgramCategoryMutation {
	return _u.mutation
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ProgramCategoryUpdateOne) ClearPrograms() *ProgramCategoryUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ProgramCategoryUpdateOne) RemoveProgramIDs(ids ...int) *ProgramCategoryUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ProgramCategoryUpdateOne) RemovePrograms(v ...*Program) *ProgramCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the ProgramCategoryUpdate builder.
func (_u *ProgramCategoryUpdateOne) Where(ps ...predicate.ProgramCategory) *ProgramCategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProgramCategoryUpdateOne) Select(field string, fields ...string) *ProgramCategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProgramCategory entity.
func (_u *ProgramCategoryUpdateOne) Save(ctx context.Context) (*ProgramCategory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramCategoryUpdateOne) SaveX(ctx context.Context) *ProgramCategory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProgramCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramCategoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := programcategory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ProgramCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProgramCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(programcategory.Table, programcategory.Columns, sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProgramCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, programcategory.FieldID)
		for _, f := range fields {
			if !programcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != programcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(programcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(programcategory.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(programcategory.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(programcategory.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.IconName(); ok {
		_spec.SetField(programcategory.FieldIconName, field.TypeString, value)
	}
	if _u.mutation.IconNameCleared() {
		_spec.ClearField(programcategory.FieldIconName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(programcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(programcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(programcategory.FieldColor, field.TypeString, value)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(programcategory.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(programcategory.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProgramCategory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
