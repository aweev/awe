// Code generated by ent, DO NOT EDIT.

package mentorshiprequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mentorshiprequest type in the database.
	Label = "mentorship_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldPreferences holds the string denoting the preferences field in the database.
	FieldPreferences = "preferences"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldMatchedAt holds the string denoting the matched_at field in the database.
	FieldMatchedAt = "matched_at"
	// FieldMatchedBy holds the string denoting the matched_by field in the database.
	FieldMatchedBy = "matched_by"
	// FieldMatchReason holds the string denoting the match_reason field in the database.
	FieldMatchReason = "match_reason"
	// FieldSessionsCompleted holds the string denoting the sessions_completed field in the database.
	FieldSessionsCompleted = "sessions_completed"
	// FieldLastSessionDate holds the string denoting the last_session_date field in the database.
	FieldLastSessionDate = "last_session_date"
	// FieldNextSessionDate holds the string denoting the next_session_date field in the database.
	FieldNextSessionDate = "next_session_date"
	// FieldCompletionNotes holds the string denoting the completion_notes field in the database.
	FieldCompletionNotes = "completion_notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeMentor holds the string denoting the mentor edge name in mutations.
	EdgeMentor = "mentor"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// Table holds the table name of the mentorshiprequest in the database.
	Table = "mentorship_requests"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "mentorship_requests"
	// RequesterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequesterInverseTable = "users"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "user_mentorship_requests"
	// MentorTable is the table that holds the mentor relation/edge.
	MentorTable = "mentorship_requests"
	// MentorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MentorInverseTable = "users"
	// MentorColumn is the table column denoting the mentor relation/edge.
	MentorColumn = "user_mentorships_mentoring"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "mentorship_sessions"
	// SessionsInverseTable is the table name for the MentorshipSession entity.
	// It exists in this package in order to avoid circular dependency with the "mentorshipsession" package.
	SessionsInverseTable = "mentorship_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "mentorship_request_sessions"
)

// Columns holds all SQL columns for mentorshiprequest fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldGoals,
	FieldPreferences,
	FieldDuration,
	FieldMatchedAt,
	FieldMatchedBy,
	FieldMatchReason,
	FieldSessionsCompleted,
	FieldLastSessionDate,
	FieldNextSessionDate,
	FieldCompletionNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "mentorship_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_mentorship_requests",
	"user_mentorships_mentoring",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSessionsCompleted holds the default value on creation for the "sessions_completed" field.
	DefaultSessionsCompleted int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusREQUESTED is the default value of the Status enum.
const DefaultStatus = StatusREQUESTED

// Status values.
const (
	StatusREQUESTED Status = "REQUESTED"
	StatusMATCHED   Status = "MATCHED"
	StatusACTIVE    Status = "ACTIVE"
	StatusCOMPLETED Status = "COMPLETED"
	StatusPAUSED    Status = "PAUSED"
	StatusCANCELLED Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusREQUESTED, StatusMATCHED, StatusACTIVE, StatusCOMPLETED, StatusPAUSED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("mentorshiprequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the MentorshipRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByMatchedAt orders the results by the matched_at field.
func ByMatchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedAt, opts...).ToFunc()
}

// ByMatchedBy orders the results by the matched_by field.
func ByMatchedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchedBy, opts...).ToFunc()
}

// ByMatchReason orders the results by the match_reason field.
func ByMatchReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchReason, opts...).ToFunc()
}

// BySessionsCompleted orders the results by the sessions_completed field.
func BySessionsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionsCompleted, opts...).ToFunc()
}

// ByLastSessionDate orders the results by the last_session_date field.
func ByLastSessionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSessionDate, opts...).ToFunc()
}

// ByNextSessionDate orders the results by the next_session_date field.
func ByNextSessionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextSessionDate, opts...).ToFunc()
}

// ByCompletionNotes orders the results by the completion_notes field.
func ByCompletionNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByMentorField orders the results by mentor field.
func ByMentorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
	)
}
func newMentorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MentorTable, MentorColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
