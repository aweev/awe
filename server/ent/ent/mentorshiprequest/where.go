// Code generated by ent, DO NOT EDIT.

package mentorshiprequest

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldID, id))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldDuration, v))
}

// MatchedAt applies equality check predicate on the "matched_at" field. It's identical to MatchedAtEQ.
func MatchedAt(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchedAt, v))
}

// MatchedBy applies equality check predicate on the "matched_by" field. It's identical to MatchedByEQ.
func MatchedBy(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchedBy, v))
}

// MatchReason applies equality check predicate on the "match_reason" field. It's identical to MatchReasonEQ.
func MatchReason(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchReason, v))
}

// SessionsCompleted applies equality check predicate on the "sessions_completed" field. It's identical to SessionsCompletedEQ.
func SessionsCompleted(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldSessionsCompleted, v))
}

// LastSessionDate applies equality check predicate on the "last_session_date" field. It's identical to LastSessionDateEQ.
func LastSessionDate(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldLastSessionDate, v))
}

// NextSessionDate applies equality check predicate on the "next_session_date" field. It's identical to NextSessionDateEQ.
func NextSessionDate(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldNextSessionDate, v))
}

// CompletionNotes applies equality check predicate on the "completion_notes" field. It's identical to CompletionNotesEQ.
func CompletionNotes(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldCompletionNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContainsFold(FieldDuration, v))
}

// MatchedAtEQ applies the EQ predicate on the "matched_at" field.
func MatchedAtEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchedAt, v))
}

// MatchedAtNEQ applies the NEQ predicate on the "matched_at" field.
func MatchedAtNEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldMatchedAt, v))
}

// MatchedAtIn applies the In predicate on the "matched_at" field.
func MatchedAtIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldMatchedAt, vs...))
}

// MatchedAtNotIn applies the NotIn predicate on the "matched_at" field.
func MatchedAtNotIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldMatchedAt, vs...))
}

// MatchedAtGT applies the GT predicate on the "matched_at" field.
func MatchedAtGT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldMatchedAt, v))
}

// MatchedAtGTE applies the GTE predicate on the "matched_at" field.
func MatchedAtGTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldMatchedAt, v))
}

// MatchedAtLT applies the LT predicate on the "matched_at" field.
func MatchedAtLT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldMatchedAt, v))
}

// MatchedAtLTE applies the LTE predicate on the "matched_at" field.
func MatchedAtLTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldMatchedAt, v))
}

// MatchedAtIsNil applies the IsNil predicate on the "matched_at" field.
func MatchedAtIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldMatchedAt))
}

// MatchedAtNotNil applies the NotNil predicate on the "matched_at" field.
func MatchedAtNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldMatchedAt))
}

// MatchedByEQ applies the EQ predicate on the "matched_by" field.
func MatchedByEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchedBy, v))
}

// MatchedByNEQ applies the NEQ predicate on the "matched_by" field.
func MatchedByNEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldMatchedBy, v))
}

// MatchedByIn applies the In predicate on the "matched_by" field.
func MatchedByIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldMatchedBy, vs...))
}

// MatchedByNotIn applies the NotIn predicate on the "matched_by" field.
func MatchedByNotIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldMatchedBy, vs...))
}

// MatchedByGT applies the GT predicate on the "matched_by" field.
func MatchedByGT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldMatchedBy, v))
}

// MatchedByGTE applies the GTE predicate on the "matched_by" field.
func MatchedByGTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldMatchedBy, v))
}

// MatchedByLT applies the LT predicate on the "matched_by" field.
func MatchedByLT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldMatchedBy, v))
}

// MatchedByLTE applies the LTE predicate on the "matched_by" field.
func MatchedByLTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldMatchedBy, v))
}

// MatchedByContains applies the Contains predicate on the "matched_by" field.
func MatchedByContains(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContains(FieldMatchedBy, v))
}

// MatchedByHasPrefix applies the HasPrefix predicate on the "matched_by" field.
func MatchedByHasPrefix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasPrefix(FieldMatchedBy, v))
}

// MatchedByHasSuffix applies the HasSuffix predicate on the "matched_by" field.
func MatchedByHasSuffix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasSuffix(FieldMatchedBy, v))
}

// MatchedByIsNil applies the IsNil predicate on the "matched_by" field.
func MatchedByIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldMatchedBy))
}

// MatchedByNotNil applies the NotNil predicate on the "matched_by" field.
func MatchedByNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldMatchedBy))
}

// MatchedByEqualFold applies the EqualFold predicate on the "matched_by" field.
func MatchedByEqualFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEqualFold(FieldMatchedBy, v))
}

// MatchedByContainsFold applies the ContainsFold predicate on the "matched_by" field.
func MatchedByContainsFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContainsFold(FieldMatchedBy, v))
}

// MatchReasonEQ applies the EQ predicate on the "match_reason" field.
func MatchReasonEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldMatchReason, v))
}

// MatchReasonNEQ applies the NEQ predicate on the "match_reason" field.
func MatchReasonNEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldMatchReason, v))
}

// MatchReasonIn applies the In predicate on the "match_reason" field.
func MatchReasonIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldMatchReason, vs...))
}

// MatchReasonNotIn applies the NotIn predicate on the "match_reason" field.
func MatchReasonNotIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldMatchReason, vs...))
}

// MatchReasonGT applies the GT predicate on the "match_reason" field.
func MatchReasonGT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldMatchReason, v))
}

// MatchReasonGTE applies the GTE predicate on the "match_reason" field.
func MatchReasonGTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldMatchReason, v))
}

// MatchReasonLT applies the LT predicate on the "match_reason" field.
func MatchReasonLT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldMatchReason, v))
}

// MatchReasonLTE applies the LTE predicate on the "match_reason" field.
func MatchReasonLTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldMatchReason, v))
}

// MatchReasonContains applies the Contains predicate on the "match_reason" field.
func MatchReasonContains(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContains(FieldMatchReason, v))
}

// MatchReasonHasPrefix applies the HasPrefix predicate on the "match_reason" field.
func MatchReasonHasPrefix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasPrefix(FieldMatchReason, v))
}

// MatchReasonHasSuffix applies the HasSuffix predicate on the "match_reason" field.
func MatchReasonHasSuffix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasSuffix(FieldMatchReason, v))
}

// MatchReasonIsNil applies the IsNil predicate on the "match_reason" field.
func MatchReasonIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldMatchReason))
}

// MatchReasonNotNil applies the NotNil predicate on the "match_reason" field.
func MatchReasonNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldMatchReason))
}

// MatchReasonEqualFold applies the EqualFold predicate on the "match_reason" field.
func MatchReasonEqualFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEqualFold(FieldMatchReason, v))
}

// MatchReasonContainsFold applies the ContainsFold predicate on the "match_reason" field.
func MatchReasonContainsFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContainsFold(FieldMatchReason, v))
}

// SessionsCompletedEQ applies the EQ predicate on the "sessions_completed" field.
func SessionsCompletedEQ(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldSessionsCompleted, v))
}

// SessionsCompletedNEQ applies the NEQ predicate on the "sessions_completed" field.
func SessionsCompletedNEQ(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldSessionsCompleted, v))
}

// SessionsCompletedIn applies the In predicate on the "sessions_completed" field.
func SessionsCompletedIn(vs ...int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldSessionsCompleted, vs...))
}

// SessionsCompletedNotIn applies the NotIn predicate on the "sessions_completed" field.
func SessionsCompletedNotIn(vs ...int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldSessionsCompleted, vs...))
}

// SessionsCompletedGT applies the GT predicate on the "sessions_completed" field.
func SessionsCompletedGT(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldSessionsCompleted, v))
}

// SessionsCompletedGTE applies the GTE predicate on the "sessions_completed" field.
func SessionsCompletedGTE(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldSessionsCompleted, v))
}

// SessionsCompletedLT applies the LT predicate on the "sessions_completed" field.
func SessionsCompletedLT(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldSessionsCompleted, v))
}

// SessionsCompletedLTE applies the LTE predicate on the "sessions_completed" field.
func SessionsCompletedLTE(v int) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldSessionsCompleted, v))
}

// LastSessionDateEQ applies the EQ predicate on the "last_session_date" field.
func LastSessionDateEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldLastSessionDate, v))
}

// LastSessionDateNEQ applies the NEQ predicate on the "last_session_date" field.
func LastSessionDateNEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldLastSessionDate, v))
}

// LastSessionDateIn applies the In predicate on the "last_session_date" field.
func LastSessionDateIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldLastSessionDate, vs...))
}

// LastSessionDateNotIn applies the NotIn predicate on the "last_session_date" field.
func LastSessionDateNotIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldLastSessionDate, vs...))
}

// LastSessionDateGT applies the GT predicate on the "last_session_date" field.
func LastSessionDateGT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldLastSessionDate, v))
}

// LastSessionDateGTE applies the GTE predicate on the "last_session_date" field.
func LastSessionDateGTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldLastSessionDate, v))
}

// LastSessionDateLT applies the LT predicate on the "last_session_date" field.
func LastSessionDateLT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldLastSessionDate, v))
}

// LastSessionDateLTE applies the LTE predicate on the "last_session_date" field.
func LastSessionDateLTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldLastSessionDate, v))
}

// LastSessionDateIsNil applies the IsNil predicate on the "last_session_date" field.
func LastSessionDateIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldLastSessionDate))
}

// LastSessionDateNotNil applies the NotNil predicate on the "last_session_date" field.
func LastSessionDateNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldLastSessionDate))
}

// NextSessionDateEQ applies the EQ predicate on the "next_session_date" field.
func NextSessionDateEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldNextSessionDate, v))
}

// NextSessionDateNEQ applies the NEQ predicate on the "next_session_date" field.
func NextSessionDateNEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldNextSessionDate, v))
}

// NextSessionDateIn applies the In predicate on the "next_session_date" field.
func NextSessionDateIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldNextSessionDate, vs...))
}

// NextSessionDateNotIn applies the NotIn predicate on the "next_session_date" field.
func NextSessionDateNotIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldNextSessionDate, vs...))
}

// NextSessionDateGT applies the GT predicate on the "next_session_date" field.
func NextSessionDateGT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldNextSessionDate, v))
}

// NextSessionDateGTE applies the GTE predicate on the "next_session_date" field.
func NextSessionDateGTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldNextSessionDate, v))
}

// NextSessionDateLT applies the LT predicate on the "next_session_date" field.
func NextSessionDateLT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldNextSessionDate, v))
}

// NextSessionDateLTE applies the LTE predicate on the "next_session_date" field.
func NextSessionDateLTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldNextSessionDate, v))
}

// NextSessionDateIsNil applies the IsNil predicate on the "next_session_date" field.
func NextSessionDateIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldNextSessionDate))
}

// NextSessionDateNotNil applies the NotNil predicate on the "next_session_date" field.
func NextSessionDateNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldNextSessionDate))
}

// CompletionNotesEQ applies the EQ predicate on the "completion_notes" field.
func CompletionNotesEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldCompletionNotes, v))
}

// CompletionNotesNEQ applies the NEQ predicate on the "completion_notes" field.
func CompletionNotesNEQ(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldCompletionNotes, v))
}

// CompletionNotesIn applies the In predicate on the "completion_notes" field.
func CompletionNotesIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldCompletionNotes, vs...))
}

// CompletionNotesNotIn applies the NotIn predicate on the "completion_notes" field.
func CompletionNotesNotIn(vs ...string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldCompletionNotes, vs...))
}

// CompletionNotesGT applies the GT predicate on the "completion_notes" field.
func CompletionNotesGT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldCompletionNotes, v))
}

// CompletionNotesGTE applies the GTE predicate on the "completion_notes" field.
func CompletionNotesGTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldCompletionNotes, v))
}

// CompletionNotesLT applies the LT predicate on the "completion_notes" field.
func CompletionNotesLT(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldCompletionNotes, v))
}

// CompletionNotesLTE applies the LTE predicate on the "completion_notes" field.
func CompletionNotesLTE(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldCompletionNotes, v))
}

// CompletionNotesContains applies the Contains predicate on the "completion_notes" field.
func CompletionNotesContains(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContains(FieldCompletionNotes, v))
}

// CompletionNotesHasPrefix applies the HasPrefix predicate on the "completion_notes" field.
func CompletionNotesHasPrefix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasPrefix(FieldCompletionNotes, v))
}

// CompletionNotesHasSuffix applies the HasSuffix predicate on the "completion_notes" field.
func CompletionNotesHasSuffix(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldHasSuffix(FieldCompletionNotes, v))
}

// CompletionNotesIsNil applies the IsNil predicate on the "completion_notes" field.
func CompletionNotesIsNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIsNull(FieldCompletionNotes))
}

// CompletionNotesNotNil applies the NotNil predicate on the "completion_notes" field.
func CompletionNotesNotNil() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotNull(FieldCompletionNotes))
}

// CompletionNotesEqualFold applies the EqualFold predicate on the "completion_notes" field.
func CompletionNotesEqualFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEqualFold(FieldCompletionNotes, v))
}

// CompletionNotesContainsFold applies the ContainsFold predicate on the "completion_notes" field.
func CompletionNotesContainsFold(v string) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldContainsFold(FieldCompletionNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.User) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentor applies the HasEdge predicate on the "mentor" edge.
func HasMentor() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MentorTable, MentorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentorWith applies the HasEdge predicate on the "mentor" edge with a given conditions (other predicates).
func HasMentorWith(preds ...predicate.User) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := newMentorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.MentorshipSession) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MentorshipRequest) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MentorshipRequest) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MentorshipRequest) predicate.MentorshipRequest {
	return predicate.MentorshipRequest(sql.NotPredicates(p))
}
