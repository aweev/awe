// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/predicate"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ReportDefinitionUpdate is the builder for updating ReportDefinition entities.
type ReportDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *ReportDefinitionMutation
}

// Where appends a list predicates to the ReportDefinitionUpdate builder.
func (_u *ReportDefinitionUpdate) Where(ps ...predicate.ReportDefinition) *ReportDefinitionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ReportDefinitionUpdate) SetName(v string) *ReportDefinitionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ReportDefinitionUpdate) SetNillableName(v *string) *ReportDefinitionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ReportDefinitionUpdate) SetSlug(v string) *ReportDefinitionUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ReportDefinitionUpdate) SetNillableSlug(v *string) *ReportDefinitionUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ReportDefinitionUpdate) SetType(v reportdefinition.Type) *ReportDefinitionUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ReportDefinitionUpdate) SetNillableType(v *reportdefinition.Type) *ReportDefinitionUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ReportDefinitionUpdate) SetDescription(v string) *ReportDefinitionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ReportDefinitionUpdate) SetNillableDescription(v *string) *ReportDefinitionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ReportDefinitionUpdate) ClearDescription() *ReportDefinitionUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetQuery sets the "query" field.
func (_u *ReportDefinitionUpdate) SetQuery(v map[string]interface{}) *ReportDefinitionUpdate {
	_u.mutation.SetQuery(v)
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *ReportDefinitionUpdate) ClearQuery() *ReportDefinitionUpdate {
	_u.mutation.ClearQuery()
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *ReportDefinitionUpdate) SetParameters(v []map[string]interface{}) *ReportDefinitionUpdate {
	_u.mutation.SetParameters(v)
	return _u
}

// AppendParameters appends value to the "parameters" field.
func (_u *ReportDefinitionUpdate) AppendParameters(v []map[string]interface{}) *ReportDefinitionUpdate {
	_u.mutation.AppendParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *ReportDefinitionUpdate) ClearParameters() *ReportDefinitionUpdate {
	_u.mutation.ClearParameters()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *ReportDefinitionUpdate) SetIsPublic(v bool) *ReportDefinitionUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *ReportDefinitionUpdate) SetNillableIsPublic(v *bool) *ReportDefinitionUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ReportDefinitionUpdate) SetUpdatedAt(v time.Time) *ReportDefinitionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *ReportDefinitionUpdate) SetCreatorID(id int) *ReportDefinitionUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ReportDefinitionUpdate) SetCreator(v *User) *ReportDefinitionUpdate {
	return _u.SetCreatorID(v.ID)
}

// AddPermissionIDs adds the "permissions" edge to the ReportPermission entity by IDs.
func (_u *ReportDefinitionUpdate) AddPermissionIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the ReportPermission entity.
func (_u *ReportDefinitionUpdate) AddPermissions(v ...*ReportPermission) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_u *ReportDefinitionUpdate) AddGeneratedReportIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.AddGeneratedReportIDs(ids...)
	return _u
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_u *ReportDefinitionUpdate) AddGeneratedReports(v ...*GeneratedReport) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGeneratedReportIDs(ids...)
}

// AddScheduleIDs adds the "schedules" edge to the ScheduledReport entity by IDs.
func (_u *ReportDefinitionUpdate) AddScheduleIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.AddScheduleIDs(ids...)
	return _u
}

// AddSchedules adds the "schedules" edges to the ScheduledReport entity.
func (_u *ReportDefinitionUpdate) AddSchedules(v ...*ScheduledReport) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduleIDs(ids...)
}

// Mutation returns the ReportDefinitionMutation object of the builder.
func (_u *ReportDefinitionUpdate) Mutation() *ReportDefinitionMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ReportDefinitionUpdate) ClearCreator() *ReportDefinitionUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// ClearPermissions clears all "permissions" edges to the ReportPermission entity.
func (_u *ReportDefinitionUpdate) ClearPermissions() *ReportDefinitionUpdate {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to ReportPermission entities by IDs.
func (_u *ReportDefinitionUpdate) RemovePermissionIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to ReportPermission entities.
func (_u *ReportDefinitionUpdate) RemovePermissions(v ...*ReportPermission) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// ClearGeneratedReports clears all "generated_reports" edges to the GeneratedReport entity.
func (_u *ReportDefinitionUpdate) ClearGeneratedReports() *ReportDefinitionUpdate {
	_u.mutation.ClearGeneratedReports()
	return _u
}

// RemoveGeneratedReportIDs removes the "generated_reports" edge to GeneratedReport entities by IDs.
func (_u *ReportDefinitionUpdate) RemoveGeneratedReportIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.RemoveGeneratedReportIDs(ids...)
	return _u
}

// RemoveGeneratedReports removes "generated_reports" edges to GeneratedReport entities.
func (_u *ReportDefinitionUpdate) RemoveGeneratedReports(v ...*GeneratedReport) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGeneratedReportIDs(ids...)
}

// ClearSchedules clears all "schedules" edges to the ScheduledReport entity.
func (_u *ReportDefinitionUpdate) ClearSchedules() *ReportDefinitionUpdate {
	_u.mutation.ClearSchedules()
	return _u
}

// RemoveScheduleIDs removes the "schedules" edge to ScheduledReport entities by IDs.
func (_u *ReportDefinitionUpdate) RemoveScheduleIDs(ids ...int) *ReportDefinitionUpdate {
	_u.mutation.RemoveScheduleIDs(ids...)
	return _u
}

// RemoveSchedules removes "schedules" edges to ScheduledReport entities.
func (_u *ReportDefinitionUpdate) RemoveSchedules(v ...*ScheduledReport) *ReportDefinitionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ReportDefinitionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReportDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ReportDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReportDefinitionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ReportDefinitionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := reportdefinition.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReportDefinitionUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := reportdefinition.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReportDefinition.type": %w`, err)}
		}
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReportDefinition.creator"`)
	}
	return nil
}

func (_u *ReportDefinitionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportdefinition.Table, reportdefinition.Columns, sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(reportdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(reportdefinition.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(reportdefinition.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(reportdefinition.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(reportdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(reportdefinition.FieldQuery, field.TypeJSON, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(reportdefinition.FieldQuery, field.TypeJSON)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(reportdefinition.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reportdefinition.FieldParameters, value)
		})
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(reportdefinition.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(reportdefinition.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(reportdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGeneratedReportsIDs(); len(nodes) > 0 && !_u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !_u.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ReportDefinitionUpdateOne is the builder for updating a single ReportDefinition entity.
type ReportDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportDefinitionMutation
}

// SetName sets the "name" field.
func (_u *ReportDefinitionUpdateOne) SetName(v string) *ReportDefinitionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ReportDefinitionUpdateOne) SetNillableName(v *string) *ReportDefinitionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ReportDefinitionUpdateOne) SetSlug(v string) *ReportDefinitionUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ReportDefinitionUpdateOne) SetNillableSlug(v *string) *ReportDefinitionUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ReportDefinitionUpdateOne) SetType(v reportdefinition.Type) *ReportDefinitionUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ReportDefinitionUpdateOne) SetNillableType(v *reportdefinition.Type) *ReportDefinitionUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ReportDefinitionUpdateOne) SetDescription(v string) *ReportDefinitionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ReportDefinitionUpdateOne) SetNillableDescription(v *string) *ReportDefinitionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ReportDefinitionUpdateOne) ClearDescription() *ReportDefinitionUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetQuery sets the "query" field.
func (_u *ReportDefinitionUpdateOne) SetQuery(v map[string]interface{}) *ReportDefinitionUpdateOne {
	_u.mutation.SetQuery(v)
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *ReportDefinitionUpdateOne) ClearQuery() *ReportDefinitionUpdateOne {
	_u.mutation.ClearQuery()
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *ReportDefinitionUpdateOne) SetParameters(v []map[string]interface{}) *ReportDefinitionUpdateOne {
	_u.mutation.SetParameters(v)
	return _u
}

// AppendParameters appends value to the "parameters" field.
func (_u *ReportDefinitionUpdateOne) AppendParameters(v []map[string]interface{}) *ReportDefinitionUpdateOne {
	_u.mutation.AppendParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *ReportDefinitionUpdateOne) ClearParameters() *ReportDefinitionUpdateOne {
	_u.mutation.ClearParameters()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *ReportDefinitionUpdateOne) SetIsPublic(v bool) *ReportDefinitionUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *ReportDefinitionUpdateOne) SetNillableIsPublic(v *bool) *ReportDefinitionUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ReportDefinitionUpdateOne) SetUpdatedAt(v time.Time) *ReportDefinitionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *ReportDefinitionUpdateOne) SetCreatorID(id int) *ReportDefinitionUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *ReportDefinitionUpdateOne) SetCreator(v *User) *ReportDefinitionUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// AddPermissionIDs adds the "permissions" edge to the ReportPermission entity by IDs.
func (_u *ReportDefinitionUpdateOne) AddPermissionIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.AddPermissionIDs(ids...)
	return _u
}

// AddPermissions adds the "permissions" edges to the ReportPermission entity.
func (_u *ReportDefinitionUpdateOne) AddPermissions(v ...*ReportPermission) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPermissionIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_u *ReportDefinitionUpdateOne) AddGeneratedReportIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.AddGeneratedReportIDs(ids...)
	return _u
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_u *ReportDefinitionUpdateOne) AddGeneratedReports(v ...*GeneratedReport) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGeneratedReportIDs(ids...)
}

// AddScheduleIDs adds the "schedules" edge to the ScheduledReport entity by IDs.
func (_u *ReportDefinitionUpdateOne) AddScheduleIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.AddScheduleIDs(ids...)
	return _u
}

// AddSchedules adds the "schedules" edges to the ScheduledReport entity.
func (_u *ReportDefinitionUpdateOne) AddSchedules(v ...*ScheduledReport) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduleIDs(ids...)
}

// Mutation returns the ReportDefinitionMutation object of the builder.
func (_u *ReportDefinitionUpdateOne) Mutation() *ReportDefinitionMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *ReportDefinitionUpdateOne) ClearCreator() *ReportDefinitionUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// ClearPermissions clears all "permissions" edges to the ReportPermission entity.
func (_u *ReportDefinitionUpdateOne) ClearPermissions() *ReportDefinitionUpdateOne {
	_u.mutation.ClearPermissions()
	return _u
}

// RemovePermissionIDs removes the "permissions" edge to ReportPermission entities by IDs.
func (_u *ReportDefinitionUpdateOne) RemovePermissionIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.RemovePermissionIDs(ids...)
	return _u
}

// RemovePermissions removes "permissions" edges to ReportPermission entities.
func (_u *ReportDefinitionUpdateOne) RemovePermissions(v ...*ReportPermission) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePermissionIDs(ids...)
}

// ClearGeneratedReports clears all "generated_reports" edges to the GeneratedReport entity.
func (_u *ReportDefinitionUpdateOne) ClearGeneratedReports() *ReportDefinitionUpdateOne {
	_u.mutation.ClearGeneratedReports()
	return _u
}

// RemoveGeneratedReportIDs removes the "generated_reports" edge to GeneratedReport entities by IDs.
func (_u *ReportDefinitionUpdateOne) RemoveGeneratedReportIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.RemoveGeneratedReportIDs(ids...)
	return _u
}

// RemoveGeneratedReports removes "generated_reports" edges to GeneratedReport entities.
func (_u *ReportDefinitionUpdateOne) RemoveGeneratedReports(v ...*GeneratedReport) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGeneratedReportIDs(ids...)
}

// ClearSchedules clears all "schedules" edges to the ScheduledReport entity.
func (_u *ReportDefinitionUpdateOne) ClearSchedules() *ReportDefinitionUpdateOne {
	_u.mutation.ClearSchedules()
	return _u
}

// RemoveScheduleIDs removes the "schedules" edge to ScheduledReport entities by IDs.
func (_u *ReportDefinitionUpdateOne) RemoveScheduleIDs(ids ...int) *ReportDefinitionUpdateOne {
	_u.mutation.RemoveScheduleIDs(ids...)
	return _u
}

// RemoveSchedules removes "schedules" edges to ScheduledReport entities.
func (_u *ReportDefinitionUpdateOne) RemoveSchedules(v ...*ScheduledReport) *ReportDefinitionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduleIDs(ids...)
}

// Where appends a list predicates to the ReportDefinitionUpdate builder.
func (_u *ReportDefinitionUpdateOne) Where(ps ...predicate.ReportDefinition) *ReportDefinitionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ReportDefinitionUpdateOne) Select(field string, fields ...string) *ReportDefinitionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ReportDefinition entity.
func (_u *ReportDefinitionUpdateOne) Save(ctx context.Context) (*ReportDefinition, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReportDefinitionUpdateOne) SaveX(ctx context.Context) *ReportDefinition {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ReportDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReportDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ReportDefinitionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := reportdefinition.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReportDefinitionUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := reportdefinition.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReportDefinition.type": %w`, err)}
		}
	}
	if _u.mutation.CreatorCleared() && len(_u.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReportDefinition.creator"`)
	}
	return nil
}

func (_u *ReportDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *ReportDefinition, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportdefinition.Table, reportdefinition.Columns, sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportdefinition.FieldID)
		for _, f := range fields {
			if !reportdefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportdefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(reportdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(reportdefinition.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(reportdefinition.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(reportdefinition.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(reportdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(reportdefinition.FieldQuery, field.TypeJSON, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(reportdefinition.FieldQuery, field.TypeJSON)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(reportdefinition.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, reportdefinition.FieldParameters, value)
		})
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(reportdefinition.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(reportdefinition.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(reportdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !_u.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGeneratedReportsIDs(); len(nodes) > 0 && !_u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !_u.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportDefinition{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
