// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduledReportCreate is the builder for creating a ScheduledReport entity.
type ScheduledReportCreate struct {
	config
	mutation *ScheduledReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFrequency sets the "frequency" field.
func (_c *ScheduledReportCreate) SetFrequency(v string) *ScheduledReportCreate {
	_c.mutation.SetFrequency(v)
	return _c
}

// SetDayOfWeek sets the "day_of_week" field.
func (_c *ScheduledReportCreate) SetDayOfWeek(v int) *ScheduledReportCreate {
	_c.mutation.SetDayOfWeek(v)
	return _c
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableDayOfWeek(v *int) *ScheduledReportCreate {
	if v != nil {
		_c.SetDayOfWeek(*v)
	}
	return _c
}

// SetDayOfMonth sets the "day_of_month" field.
func (_c *ScheduledReportCreate) SetDayOfMonth(v int) *ScheduledReportCreate {
	_c.mutation.SetDayOfMonth(v)
	return _c
}

// SetNillableDayOfMonth sets the "day_of_month" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableDayOfMonth(v *int) *ScheduledReportCreate {
	if v != nil {
		_c.SetDayOfMonth(*v)
	}
	return _c
}

// SetTime sets the "time" field.
func (_c *ScheduledReportCreate) SetTime(v string) *ScheduledReportCreate {
	_c.mutation.SetTime(v)
	return _c
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableTime(v *string) *ScheduledReportCreate {
	if v != nil {
		_c.SetTime(*v)
	}
	return _c
}

// SetTimezone sets the "timezone" field.
func (_c *ScheduledReportCreate) SetTimezone(v string) *ScheduledReportCreate {
	_c.mutation.SetTimezone(v)
	return _c
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableTimezone(v *string) *ScheduledReportCreate {
	if v != nil {
		_c.SetTimezone(*v)
	}
	return _c
}

// SetRecipients sets the "recipients" field.
func (_c *ScheduledReportCreate) SetRecipients(v []map[string]interface{}) *ScheduledReportCreate {
	_c.mutation.SetRecipients(v)
	return _c
}

// SetFormat sets the "format" field.
func (_c *ScheduledReportCreate) SetFormat(v scheduledreport.Format) *ScheduledReportCreate {
	_c.mutation.SetFormat(v)
	return _c
}

// SetParameters sets the "parameters" field.
func (_c *ScheduledReportCreate) SetParameters(v map[string]interface{}) *ScheduledReportCreate {
	_c.mutation.SetParameters(v)
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *ScheduledReportCreate) SetIsActive(v bool) *ScheduledReportCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableIsActive(v *bool) *ScheduledReportCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetLastRunAt sets the "last_run_at" field.
func (_c *ScheduledReportCreate) SetLastRunAt(v time.Time) *ScheduledReportCreate {
	_c.mutation.SetLastRunAt(v)
	return _c
}

// SetNillableLastRunAt sets the "last_run_at" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableLastRunAt(v *time.Time) *ScheduledReportCreate {
	if v != nil {
		_c.SetLastRunAt(*v)
	}
	return _c
}

// SetNextRunAt sets the "next_run_at" field.
func (_c *ScheduledReportCreate) SetNextRunAt(v time.Time) *ScheduledReportCreate {
	_c.mutation.SetNextRunAt(v)
	return _c
}

// SetNillableNextRunAt sets the "next_run_at" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableNextRunAt(v *time.Time) *ScheduledReportCreate {
	if v != nil {
		_c.SetNextRunAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ScheduledReportCreate) SetCreatedAt(v time.Time) *ScheduledReportCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableCreatedAt(v *time.Time) *ScheduledReportCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ScheduledReportCreate) SetUpdatedAt(v time.Time) *ScheduledReportCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ScheduledReportCreate) SetNillableUpdatedAt(v *time.Time) *ScheduledReportCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_c *ScheduledReportCreate) SetReportDefinitionID(id int) *ScheduledReportCreate {
	_c.mutation.SetReportDefinitionID(id)
	return _c
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_c *ScheduledReportCreate) SetReportDefinition(v *ReportDefinition) *ScheduledReportCreate {
	return _c.SetReportDefinitionID(v.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_c *ScheduledReportCreate) SetCreatorID(id int) *ScheduledReportCreate {
	_c.mutation.SetCreatorID(id)
	return _c
}

// SetCreator sets the "creator" edge to the User entity.
func (_c *ScheduledReportCreate) SetCreator(v *User) *ScheduledReportCreate {
	return _c.SetCreatorID(v.ID)
}

// Mutation returns the ScheduledReportMutation object of the builder.
func (_c *ScheduledReportCreate) Mutation() *ScheduledReportMutation {
	return _c.mutation
}

// Save creates the ScheduledReport in the database.
func (_c *ScheduledReportCreate) Save(ctx context.Context) (*ScheduledReport, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ScheduledReportCreate) SaveX(ctx context.Context) *ScheduledReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ScheduledReportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ScheduledReportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ScheduledReportCreate) defaults() {
	if _, ok := _c.mutation.Timezone(); !ok {
		v := scheduledreport.DefaultTimezone
		_c.mutation.SetTimezone(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := scheduledreport.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := scheduledreport.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := scheduledreport.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ScheduledReportCreate) check() error {
	if _, ok := _c.mutation.Frequency(); !ok {
		return &ValidationError{Name: "frequency", err: errors.New(`ent: missing required field "ScheduledReport.frequency"`)}
	}
	if _, ok := _c.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "ScheduledReport.timezone"`)}
	}
	if _, ok := _c.mutation.Recipients(); !ok {
		return &ValidationError{Name: "recipients", err: errors.New(`ent: missing required field "ScheduledReport.recipients"`)}
	}
	if _, ok := _c.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "ScheduledReport.format"`)}
	}
	if v, ok := _c.mutation.Format(); ok {
		if err := scheduledreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "ScheduledReport.format": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ScheduledReport.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScheduledReport.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScheduledReport.updated_at"`)}
	}
	if len(_c.mutation.ReportDefinitionIDs()) == 0 {
		return &ValidationError{Name: "report_definition", err: errors.New(`ent: missing required edge "ScheduledReport.report_definition"`)}
	}
	if len(_c.mutation.CreatorIDs()) == 0 {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "ScheduledReport.creator"`)}
	}
	return nil
}

func (_c *ScheduledReportCreate) sqlSave(ctx context.Context) (*ScheduledReport, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ScheduledReportCreate) createSpec() (*ScheduledReport, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledReport{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(scheduledreport.Table, sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Frequency(); ok {
		_spec.SetField(scheduledreport.FieldFrequency, field.TypeString, value)
		_node.Frequency = value
	}
	if value, ok := _c.mutation.DayOfWeek(); ok {
		_spec.SetField(scheduledreport.FieldDayOfWeek, field.TypeInt, value)
		_node.DayOfWeek = value
	}
	if value, ok := _c.mutation.DayOfMonth(); ok {
		_spec.SetField(scheduledreport.FieldDayOfMonth, field.TypeInt, value)
		_node.DayOfMonth = value
	}
	if value, ok := _c.mutation.Time(); ok {
		_spec.SetField(scheduledreport.FieldTime, field.TypeString, value)
		_node.Time = value
	}
	if value, ok := _c.mutation.Timezone(); ok {
		_spec.SetField(scheduledreport.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := _c.mutation.Recipients(); ok {
		_spec.SetField(scheduledreport.FieldRecipients, field.TypeJSON, value)
		_node.Recipients = value
	}
	if value, ok := _c.mutation.Format(); ok {
		_spec.SetField(scheduledreport.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := _c.mutation.Parameters(); ok {
		_spec.SetField(scheduledreport.FieldParameters, field.TypeJSON, value)
		_node.Parameters = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(scheduledreport.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.LastRunAt(); ok {
		_spec.SetField(scheduledreport.FieldLastRunAt, field.TypeTime, value)
		_node.LastRunAt = value
	}
	if value, ok := _c.mutation.NextRunAt(); ok {
		_spec.SetField(scheduledreport.FieldNextRunAt, field.TypeTime, value)
		_node.NextRunAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(scheduledreport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledreport.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_definition_schedules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_scheduled_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScheduledReport.Create().
//		SetFrequency(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduledReportUpsert) {
//			SetFrequency(v+v).
//		}).
//		Exec(ctx)
func (_c *ScheduledReportCreate) OnConflict(opts ...sql.ConflictOption) *ScheduledReportUpsertOne {
	_c.conflict = opts
	return &ScheduledReportUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ScheduledReportCreate) OnConflictColumns(columns ...string) *ScheduledReportUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ScheduledReportUpsertOne{
		create: _c,
	}
}

type (
	// ScheduledReportUpsertOne is the builder for "upsert"-ing
	//  one ScheduledReport node.
	ScheduledReportUpsertOne struct {
		create *ScheduledReportCreate
	}

	// ScheduledReportUpsert is the "OnConflict" setter.
	ScheduledReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetFrequency sets the "frequency" field.
func (u *ScheduledReportUpsert) SetFrequency(v string) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldFrequency, v)
	return u
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateFrequency() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldFrequency)
	return u
}

// SetDayOfWeek sets the "day_of_week" field.
func (u *ScheduledReportUpsert) SetDayOfWeek(v int) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldDayOfWeek, v)
	return u
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateDayOfWeek() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldDayOfWeek)
	return u
}

// AddDayOfWeek adds v to the "day_of_week" field.
func (u *ScheduledReportUpsert) AddDayOfWeek(v int) *ScheduledReportUpsert {
	u.Add(scheduledreport.FieldDayOfWeek, v)
	return u
}

// ClearDayOfWeek clears the value of the "day_of_week" field.
func (u *ScheduledReportUpsert) ClearDayOfWeek() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldDayOfWeek)
	return u
}

// SetDayOfMonth sets the "day_of_month" field.
func (u *ScheduledReportUpsert) SetDayOfMonth(v int) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldDayOfMonth, v)
	return u
}

// UpdateDayOfMonth sets the "day_of_month" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateDayOfMonth() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldDayOfMonth)
	return u
}

// AddDayOfMonth adds v to the "day_of_month" field.
func (u *ScheduledReportUpsert) AddDayOfMonth(v int) *ScheduledReportUpsert {
	u.Add(scheduledreport.FieldDayOfMonth, v)
	return u
}

// ClearDayOfMonth clears the value of the "day_of_month" field.
func (u *ScheduledReportUpsert) ClearDayOfMonth() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldDayOfMonth)
	return u
}

// SetTime sets the "time" field.
func (u *ScheduledReportUpsert) SetTime(v string) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateTime() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldTime)
	return u
}

// ClearTime clears the value of the "time" field.
func (u *ScheduledReportUpsert) ClearTime() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldTime)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *ScheduledReportUpsert) SetTimezone(v string) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateTimezone() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldTimezone)
	return u
}

// SetRecipients sets the "recipients" field.
func (u *ScheduledReportUpsert) SetRecipients(v []map[string]interface{}) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldRecipients, v)
	return u
}

// UpdateRecipients sets the "recipients" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateRecipients() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldRecipients)
	return u
}

// SetFormat sets the "format" field.
func (u *ScheduledReportUpsert) SetFormat(v scheduledreport.Format) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateFormat() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldFormat)
	return u
}

// SetParameters sets the "parameters" field.
func (u *ScheduledReportUpsert) SetParameters(v map[string]interface{}) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldParameters, v)
	return u
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateParameters() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldParameters)
	return u
}

// ClearParameters clears the value of the "parameters" field.
func (u *ScheduledReportUpsert) ClearParameters() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldParameters)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *ScheduledReportUpsert) SetIsActive(v bool) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateIsActive() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldIsActive)
	return u
}

// SetLastRunAt sets the "last_run_at" field.
func (u *ScheduledReportUpsert) SetLastRunAt(v time.Time) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldLastRunAt, v)
	return u
}

// UpdateLastRunAt sets the "last_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateLastRunAt() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldLastRunAt)
	return u
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (u *ScheduledReportUpsert) ClearLastRunAt() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldLastRunAt)
	return u
}

// SetNextRunAt sets the "next_run_at" field.
func (u *ScheduledReportUpsert) SetNextRunAt(v time.Time) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldNextRunAt, v)
	return u
}

// UpdateNextRunAt sets the "next_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateNextRunAt() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldNextRunAt)
	return u
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (u *ScheduledReportUpsert) ClearNextRunAt() *ScheduledReportUpsert {
	u.SetNull(scheduledreport.FieldNextRunAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduledReportUpsert) SetUpdatedAt(v time.Time) *ScheduledReportUpsert {
	u.Set(scheduledreport.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduledReportUpsert) UpdateUpdatedAt() *ScheduledReportUpsert {
	u.SetExcluded(scheduledreport.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ScheduledReportUpsertOne) UpdateNewValues() *ScheduledReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scheduledreport.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScheduledReportUpsertOne) Ignore() *ScheduledReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduledReportUpsertOne) DoNothing() *ScheduledReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduledReportCreate.OnConflict
// documentation for more info.
func (u *ScheduledReportUpsertOne) Update(set func(*ScheduledReportUpsert)) *ScheduledReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduledReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetFrequency sets the "frequency" field.
func (u *ScheduledReportUpsertOne) SetFrequency(v string) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateFrequency() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateFrequency()
	})
}

// SetDayOfWeek sets the "day_of_week" field.
func (u *ScheduledReportUpsertOne) SetDayOfWeek(v int) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetDayOfWeek(v)
	})
}

// AddDayOfWeek adds v to the "day_of_week" field.
func (u *ScheduledReportUpsertOne) AddDayOfWeek(v int) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.AddDayOfWeek(v)
	})
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateDayOfWeek() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateDayOfWeek()
	})
}

// ClearDayOfWeek clears the value of the "day_of_week" field.
func (u *ScheduledReportUpsertOne) ClearDayOfWeek() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearDayOfWeek()
	})
}

// SetDayOfMonth sets the "day_of_month" field.
func (u *ScheduledReportUpsertOne) SetDayOfMonth(v int) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetDayOfMonth(v)
	})
}

// AddDayOfMonth adds v to the "day_of_month" field.
func (u *ScheduledReportUpsertOne) AddDayOfMonth(v int) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.AddDayOfMonth(v)
	})
}

// UpdateDayOfMonth sets the "day_of_month" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateDayOfMonth() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateDayOfMonth()
	})
}

// ClearDayOfMonth clears the value of the "day_of_month" field.
func (u *ScheduledReportUpsertOne) ClearDayOfMonth() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearDayOfMonth()
	})
}

// SetTime sets the "time" field.
func (u *ScheduledReportUpsertOne) SetTime(v string) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateTime() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateTime()
	})
}

// ClearTime clears the value of the "time" field.
func (u *ScheduledReportUpsertOne) ClearTime() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearTime()
	})
}

// SetTimezone sets the "timezone" field.
func (u *ScheduledReportUpsertOne) SetTimezone(v string) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateTimezone() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateTimezone()
	})
}

// SetRecipients sets the "recipients" field.
func (u *ScheduledReportUpsertOne) SetRecipients(v []map[string]interface{}) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetRecipients(v)
	})
}

// UpdateRecipients sets the "recipients" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateRecipients() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateRecipients()
	})
}

// SetFormat sets the "format" field.
func (u *ScheduledReportUpsertOne) SetFormat(v scheduledreport.Format) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateFormat() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateFormat()
	})
}

// SetParameters sets the "parameters" field.
func (u *ScheduledReportUpsertOne) SetParameters(v map[string]interface{}) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateParameters() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *ScheduledReportUpsertOne) ClearParameters() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearParameters()
	})
}

// SetIsActive sets the "is_active" field.
func (u *ScheduledReportUpsertOne) SetIsActive(v bool) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateIsActive() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateIsActive()
	})
}

// SetLastRunAt sets the "last_run_at" field.
func (u *ScheduledReportUpsertOne) SetLastRunAt(v time.Time) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetLastRunAt(v)
	})
}

// UpdateLastRunAt sets the "last_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateLastRunAt() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateLastRunAt()
	})
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (u *ScheduledReportUpsertOne) ClearLastRunAt() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearLastRunAt()
	})
}

// SetNextRunAt sets the "next_run_at" field.
func (u *ScheduledReportUpsertOne) SetNextRunAt(v time.Time) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetNextRunAt(v)
	})
}

// UpdateNextRunAt sets the "next_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateNextRunAt() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateNextRunAt()
	})
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (u *ScheduledReportUpsertOne) ClearNextRunAt() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearNextRunAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduledReportUpsertOne) SetUpdatedAt(v time.Time) *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertOne) UpdateUpdatedAt() *ScheduledReportUpsertOne {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScheduledReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScheduledReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduledReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScheduledReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScheduledReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScheduledReportCreateBulk is the builder for creating many ScheduledReport entities in bulk.
type ScheduledReportCreateBulk struct {
	config
	err      error
	builders []*ScheduledReportCreate
	conflict []sql.ConflictOption
}

// Save creates the ScheduledReport entities in the database.
func (_c *ScheduledReportCreateBulk) Save(ctx context.Context) ([]*ScheduledReport, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ScheduledReport, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ScheduledReportCreateBulk) SaveX(ctx context.Context) []*ScheduledReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ScheduledReportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ScheduledReportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScheduledReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScheduledReportUpsert) {
//			SetFrequency(v+v).
//		}).
//		Exec(ctx)
func (_c *ScheduledReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScheduledReportUpsertBulk {
	_c.conflict = opts
	return &ScheduledReportUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ScheduledReportCreateBulk) OnConflictColumns(columns ...string) *ScheduledReportUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ScheduledReportUpsertBulk{
		create: _c,
	}
}

// ScheduledReportUpsertBulk is the builder for "upsert"-ing
// a bulk of ScheduledReport nodes.
type ScheduledReportUpsertBulk struct {
	create *ScheduledReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ScheduledReportUpsertBulk) UpdateNewValues() *ScheduledReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scheduledreport.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScheduledReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScheduledReportUpsertBulk) Ignore() *ScheduledReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScheduledReportUpsertBulk) DoNothing() *ScheduledReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScheduledReportCreateBulk.OnConflict
// documentation for more info.
func (u *ScheduledReportUpsertBulk) Update(set func(*ScheduledReportUpsert)) *ScheduledReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScheduledReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetFrequency sets the "frequency" field.
func (u *ScheduledReportUpsertBulk) SetFrequency(v string) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateFrequency() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateFrequency()
	})
}

// SetDayOfWeek sets the "day_of_week" field.
func (u *ScheduledReportUpsertBulk) SetDayOfWeek(v int) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetDayOfWeek(v)
	})
}

// AddDayOfWeek adds v to the "day_of_week" field.
func (u *ScheduledReportUpsertBulk) AddDayOfWeek(v int) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.AddDayOfWeek(v)
	})
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateDayOfWeek() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateDayOfWeek()
	})
}

// ClearDayOfWeek clears the value of the "day_of_week" field.
func (u *ScheduledReportUpsertBulk) ClearDayOfWeek() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearDayOfWeek()
	})
}

// SetDayOfMonth sets the "day_of_month" field.
func (u *ScheduledReportUpsertBulk) SetDayOfMonth(v int) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetDayOfMonth(v)
	})
}

// AddDayOfMonth adds v to the "day_of_month" field.
func (u *ScheduledReportUpsertBulk) AddDayOfMonth(v int) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.AddDayOfMonth(v)
	})
}

// UpdateDayOfMonth sets the "day_of_month" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateDayOfMonth() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateDayOfMonth()
	})
}

// ClearDayOfMonth clears the value of the "day_of_month" field.
func (u *ScheduledReportUpsertBulk) ClearDayOfMonth() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearDayOfMonth()
	})
}

// SetTime sets the "time" field.
func (u *ScheduledReportUpsertBulk) SetTime(v string) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateTime() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateTime()
	})
}

// ClearTime clears the value of the "time" field.
func (u *ScheduledReportUpsertBulk) ClearTime() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearTime()
	})
}

// SetTimezone sets the "timezone" field.
func (u *ScheduledReportUpsertBulk) SetTimezone(v string) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateTimezone() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateTimezone()
	})
}

// SetRecipients sets the "recipients" field.
func (u *ScheduledReportUpsertBulk) SetRecipients(v []map[string]interface{}) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetRecipients(v)
	})
}

// UpdateRecipients sets the "recipients" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateRecipients() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateRecipients()
	})
}

// SetFormat sets the "format" field.
func (u *ScheduledReportUpsertBulk) SetFormat(v scheduledreport.Format) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateFormat() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateFormat()
	})
}

// SetParameters sets the "parameters" field.
func (u *ScheduledReportUpsertBulk) SetParameters(v map[string]interface{}) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateParameters() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *ScheduledReportUpsertBulk) ClearParameters() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearParameters()
	})
}

// SetIsActive sets the "is_active" field.
func (u *ScheduledReportUpsertBulk) SetIsActive(v bool) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateIsActive() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateIsActive()
	})
}

// SetLastRunAt sets the "last_run_at" field.
func (u *ScheduledReportUpsertBulk) SetLastRunAt(v time.Time) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetLastRunAt(v)
	})
}

// UpdateLastRunAt sets the "last_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateLastRunAt() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateLastRunAt()
	})
}

// ClearLastRunAt clears the value of the "last_run_at" field.
func (u *ScheduledReportUpsertBulk) ClearLastRunAt() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearLastRunAt()
	})
}

// SetNextRunAt sets the "next_run_at" field.
func (u *ScheduledReportUpsertBulk) SetNextRunAt(v time.Time) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetNextRunAt(v)
	})
}

// UpdateNextRunAt sets the "next_run_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateNextRunAt() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateNextRunAt()
	})
}

// ClearNextRunAt clears the value of the "next_run_at" field.
func (u *ScheduledReportUpsertBulk) ClearNextRunAt() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.ClearNextRunAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScheduledReportUpsertBulk) SetUpdatedAt(v time.Time) *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScheduledReportUpsertBulk) UpdateUpdatedAt() *ScheduledReportUpsertBulk {
	return u.Update(func(s *ScheduledReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ScheduledReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScheduledReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScheduledReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScheduledReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
