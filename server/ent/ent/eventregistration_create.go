// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventRegistrationCreate is the builder for creating a EventRegistration entity.
type EventRegistrationCreate struct {
	config
	mutation *EventRegistrationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *EventRegistrationCreate) SetStatus(v eventregistration.Status) *EventRegistrationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *EventRegistrationCreate) SetNillableStatus(v *eventregistration.Status) *EventRegistrationCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetAttendanceStatus sets the "attendance_status" field.
func (_c *EventRegistrationCreate) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationCreate {
	_c.mutation.SetAttendanceStatus(v)
	return _c
}

// SetNillableAttendanceStatus sets the "attendance_status" field if the given value is not nil.
func (_c *EventRegistrationCreate) SetNillableAttendanceStatus(v *eventregistration.AttendanceStatus) *EventRegistrationCreate {
	if v != nil {
		_c.SetAttendanceStatus(*v)
	}
	return _c
}

// SetRegistrationData sets the "registration_data" field.
func (_c *EventRegistrationCreate) SetRegistrationData(v map[string]interface{}) *EventRegistrationCreate {
	_c.mutation.SetRegistrationData(v)
	return _c
}

// SetFeedback sets the "feedback" field.
func (_c *EventRegistrationCreate) SetFeedback(v map[string]interface{}) *EventRegistrationCreate {
	_c.mutation.SetFeedback(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *EventRegistrationCreate) SetCreatedAt(v time.Time) *EventRegistrationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *EventRegistrationCreate) SetNillableCreatedAt(v *time.Time) *EventRegistrationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *EventRegistrationCreate) SetUpdatedAt(v time.Time) *EventRegistrationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *EventRegistrationCreate) SetNillableUpdatedAt(v *time.Time) *EventRegistrationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_c *EventRegistrationCreate) SetEventID(id int) *EventRegistrationCreate {
	_c.mutation.SetEventID(id)
	return _c
}

// SetEvent sets the "event" edge to the Event entity.
func (_c *EventRegistrationCreate) SetEvent(v *Event) *EventRegistrationCreate {
	return _c.SetEventID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *EventRegistrationCreate) SetUserID(id int) *EventRegistrationCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *EventRegistrationCreate) SetUser(v *User) *EventRegistrationCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the EventRegistrationMutation object of the builder.
func (_c *EventRegistrationCreate) Mutation() *EventRegistrationMutation {
	return _c.mutation
}

// Save creates the EventRegistration in the database.
func (_c *EventRegistrationCreate) Save(ctx context.Context) (*EventRegistration, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EventRegistrationCreate) SaveX(ctx context.Context) *EventRegistration {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventRegistrationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventRegistrationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EventRegistrationCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := eventregistration.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.AttendanceStatus(); !ok {
		v := eventregistration.DefaultAttendanceStatus
		_c.mutation.SetAttendanceStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := eventregistration.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := eventregistration.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EventRegistrationCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EventRegistration.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := eventregistration.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AttendanceStatus(); !ok {
		return &ValidationError{Name: "attendance_status", err: errors.New(`ent: missing required field "EventRegistration.attendance_status"`)}
	}
	if v, ok := _c.mutation.AttendanceStatus(); ok {
		if err := eventregistration.AttendanceStatusValidator(v); err != nil {
			return &ValidationError{Name: "attendance_status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.attendance_status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventRegistration.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EventRegistration.updated_at"`)}
	}
	if len(_c.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventRegistration.event"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "EventRegistration.user"`)}
	}
	return nil
}

func (_c *EventRegistrationCreate) sqlSave(ctx context.Context) (*EventRegistration, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EventRegistrationCreate) createSpec() (*EventRegistration, *sqlgraph.CreateSpec) {
	var (
		_node = &EventRegistration{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(eventregistration.Table, sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(eventregistration.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.AttendanceStatus(); ok {
		_spec.SetField(eventregistration.FieldAttendanceStatus, field.TypeEnum, value)
		_node.AttendanceStatus = value
	}
	if value, ok := _c.mutation.RegistrationData(); ok {
		_spec.SetField(eventregistration.FieldRegistrationData, field.TypeJSON, value)
		_node.RegistrationData = value
	}
	if value, ok := _c.mutation.Feedback(); ok {
		_spec.SetField(eventregistration.FieldFeedback, field.TypeJSON, value)
		_node.Feedback = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(eventregistration.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(eventregistration.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_registrations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_event_registrations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventRegistration.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventRegistrationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *EventRegistrationCreate) OnConflict(opts ...sql.ConflictOption) *EventRegistrationUpsertOne {
	_c.conflict = opts
	return &EventRegistrationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *EventRegistrationCreate) OnConflictColumns(columns ...string) *EventRegistrationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &EventRegistrationUpsertOne{
		create: _c,
	}
}

type (
	// EventRegistrationUpsertOne is the builder for "upsert"-ing
	//  one EventRegistration node.
	EventRegistrationUpsertOne struct {
		create *EventRegistrationCreate
	}

	// EventRegistrationUpsert is the "OnConflict" setter.
	EventRegistrationUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *EventRegistrationUpsert) SetStatus(v eventregistration.Status) *EventRegistrationUpsert {
	u.Set(eventregistration.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventRegistrationUpsert) UpdateStatus() *EventRegistrationUpsert {
	u.SetExcluded(eventregistration.FieldStatus)
	return u
}

// SetAttendanceStatus sets the "attendance_status" field.
func (u *EventRegistrationUpsert) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationUpsert {
	u.Set(eventregistration.FieldAttendanceStatus, v)
	return u
}

// UpdateAttendanceStatus sets the "attendance_status" field to the value that was provided on create.
func (u *EventRegistrationUpsert) UpdateAttendanceStatus() *EventRegistrationUpsert {
	u.SetExcluded(eventregistration.FieldAttendanceStatus)
	return u
}

// SetRegistrationData sets the "registration_data" field.
func (u *EventRegistrationUpsert) SetRegistrationData(v map[string]interface{}) *EventRegistrationUpsert {
	u.Set(eventregistration.FieldRegistrationData, v)
	return u
}

// UpdateRegistrationData sets the "registration_data" field to the value that was provided on create.
func (u *EventRegistrationUpsert) UpdateRegistrationData() *EventRegistrationUpsert {
	u.SetExcluded(eventregistration.FieldRegistrationData)
	return u
}

// ClearRegistrationData clears the value of the "registration_data" field.
func (u *EventRegistrationUpsert) ClearRegistrationData() *EventRegistrationUpsert {
	u.SetNull(eventregistration.FieldRegistrationData)
	return u
}

// SetFeedback sets the "feedback" field.
func (u *EventRegistrationUpsert) SetFeedback(v map[string]interface{}) *EventRegistrationUpsert {
	u.Set(eventregistration.FieldFeedback, v)
	return u
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *EventRegistrationUpsert) UpdateFeedback() *EventRegistrationUpsert {
	u.SetExcluded(eventregistration.FieldFeedback)
	return u
}

// ClearFeedback clears the value of the "feedback" field.
func (u *EventRegistrationUpsert) ClearFeedback() *EventRegistrationUpsert {
	u.SetNull(eventregistration.FieldFeedback)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventRegistrationUpsert) SetUpdatedAt(v time.Time) *EventRegistrationUpsert {
	u.Set(eventregistration.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventRegistrationUpsert) UpdateUpdatedAt() *EventRegistrationUpsert {
	u.SetExcluded(eventregistration.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventRegistrationUpsertOne) UpdateNewValues() *EventRegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(eventregistration.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventRegistrationUpsertOne) Ignore() *EventRegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventRegistrationUpsertOne) DoNothing() *EventRegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventRegistrationCreate.OnConflict
// documentation for more info.
func (u *EventRegistrationUpsertOne) Update(set func(*EventRegistrationUpsert)) *EventRegistrationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventRegistrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *EventRegistrationUpsertOne) SetStatus(v eventregistration.Status) *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventRegistrationUpsertOne) UpdateStatus() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateStatus()
	})
}

// SetAttendanceStatus sets the "attendance_status" field.
func (u *EventRegistrationUpsertOne) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetAttendanceStatus(v)
	})
}

// UpdateAttendanceStatus sets the "attendance_status" field to the value that was provided on create.
func (u *EventRegistrationUpsertOne) UpdateAttendanceStatus() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateAttendanceStatus()
	})
}

// SetRegistrationData sets the "registration_data" field.
func (u *EventRegistrationUpsertOne) SetRegistrationData(v map[string]interface{}) *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetRegistrationData(v)
	})
}

// UpdateRegistrationData sets the "registration_data" field to the value that was provided on create.
func (u *EventRegistrationUpsertOne) UpdateRegistrationData() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateRegistrationData()
	})
}

// ClearRegistrationData clears the value of the "registration_data" field.
func (u *EventRegistrationUpsertOne) ClearRegistrationData() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.ClearRegistrationData()
	})
}

// SetFeedback sets the "feedback" field.
func (u *EventRegistrationUpsertOne) SetFeedback(v map[string]interface{}) *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *EventRegistrationUpsertOne) UpdateFeedback() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *EventRegistrationUpsertOne) ClearFeedback() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.ClearFeedback()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventRegistrationUpsertOne) SetUpdatedAt(v time.Time) *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventRegistrationUpsertOne) UpdateUpdatedAt() *EventRegistrationUpsertOne {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EventRegistrationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventRegistrationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventRegistrationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventRegistrationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventRegistrationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventRegistrationCreateBulk is the builder for creating many EventRegistration entities in bulk.
type EventRegistrationCreateBulk struct {
	config
	err      error
	builders []*EventRegistrationCreate
	conflict []sql.ConflictOption
}

// Save creates the EventRegistration entities in the database.
func (_c *EventRegistrationCreateBulk) Save(ctx context.Context) ([]*EventRegistration, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*EventRegistration, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventRegistrationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EventRegistrationCreateBulk) SaveX(ctx context.Context) []*EventRegistration {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventRegistrationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventRegistrationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventRegistration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventRegistrationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *EventRegistrationCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventRegistrationUpsertBulk {
	_c.conflict = opts
	return &EventRegistrationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *EventRegistrationCreateBulk) OnConflictColumns(columns ...string) *EventRegistrationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &EventRegistrationUpsertBulk{
		create: _c,
	}
}

// EventRegistrationUpsertBulk is the builder for "upsert"-ing
// a bulk of EventRegistration nodes.
type EventRegistrationUpsertBulk struct {
	create *EventRegistrationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventRegistrationUpsertBulk) UpdateNewValues() *EventRegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(eventregistration.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventRegistration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventRegistrationUpsertBulk) Ignore() *EventRegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventRegistrationUpsertBulk) DoNothing() *EventRegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventRegistrationCreateBulk.OnConflict
// documentation for more info.
func (u *EventRegistrationUpsertBulk) Update(set func(*EventRegistrationUpsert)) *EventRegistrationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventRegistrationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *EventRegistrationUpsertBulk) SetStatus(v eventregistration.Status) *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventRegistrationUpsertBulk) UpdateStatus() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateStatus()
	})
}

// SetAttendanceStatus sets the "attendance_status" field.
func (u *EventRegistrationUpsertBulk) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetAttendanceStatus(v)
	})
}

// UpdateAttendanceStatus sets the "attendance_status" field to the value that was provided on create.
func (u *EventRegistrationUpsertBulk) UpdateAttendanceStatus() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateAttendanceStatus()
	})
}

// SetRegistrationData sets the "registration_data" field.
func (u *EventRegistrationUpsertBulk) SetRegistrationData(v map[string]interface{}) *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetRegistrationData(v)
	})
}

// UpdateRegistrationData sets the "registration_data" field to the value that was provided on create.
func (u *EventRegistrationUpsertBulk) UpdateRegistrationData() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateRegistrationData()
	})
}

// ClearRegistrationData clears the value of the "registration_data" field.
func (u *EventRegistrationUpsertBulk) ClearRegistrationData() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.ClearRegistrationData()
	})
}

// SetFeedback sets the "feedback" field.
func (u *EventRegistrationUpsertBulk) SetFeedback(v map[string]interface{}) *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *EventRegistrationUpsertBulk) UpdateFeedback() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *EventRegistrationUpsertBulk) ClearFeedback() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.ClearFeedback()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventRegistrationUpsertBulk) SetUpdatedAt(v time.Time) *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventRegistrationUpsertBulk) UpdateUpdatedAt() *EventRegistrationUpsertBulk {
	return u.Update(func(s *EventRegistrationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EventRegistrationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventRegistrationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventRegistrationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventRegistrationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
