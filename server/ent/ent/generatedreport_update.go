// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/predicate"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GeneratedReportUpdate is the builder for updating GeneratedReport entities.
type GeneratedReportUpdate struct {
	config
	hooks    []Hook
	mutation *GeneratedReportMutation
}

// Where appends a list predicates to the GeneratedReportUpdate builder.
func (_u *GeneratedReportUpdate) Where(ps ...predicate.GeneratedReport) *GeneratedReportUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *GeneratedReportUpdate) SetStatus(v string) *GeneratedReportUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableStatus(v *string) *GeneratedReportUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetFormat sets the "format" field.
func (_u *GeneratedReportUpdate) SetFormat(v generatedreport.Format) *GeneratedReportUpdate {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableFormat(v *generatedreport.Format) *GeneratedReportUpdate {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetFileURL sets the "file_url" field.
func (_u *GeneratedReportUpdate) SetFileURL(v string) *GeneratedReportUpdate {
	_u.mutation.SetFileURL(v)
	return _u
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableFileURL(v *string) *GeneratedReportUpdate {
	if v != nil {
		_u.SetFileURL(*v)
	}
	return _u
}

// ClearFileURL clears the value of the "file_url" field.
func (_u *GeneratedReportUpdate) ClearFileURL() *GeneratedReportUpdate {
	_u.mutation.ClearFileURL()
	return _u
}

// SetFileSize sets the "file_size" field.
func (_u *GeneratedReportUpdate) SetFileSize(v int) *GeneratedReportUpdate {
	_u.mutation.ResetFileSize()
	_u.mutation.SetFileSize(v)
	return _u
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableFileSize(v *int) *GeneratedReportUpdate {
	if v != nil {
		_u.SetFileSize(*v)
	}
	return _u
}

// AddFileSize adds value to the "file_size" field.
func (_u *GeneratedReportUpdate) AddFileSize(v int) *GeneratedReportUpdate {
	_u.mutation.AddFileSize(v)
	return _u
}

// ClearFileSize clears the value of the "file_size" field.
func (_u *GeneratedReportUpdate) ClearFileSize() *GeneratedReportUpdate {
	_u.mutation.ClearFileSize()
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *GeneratedReportUpdate) SetParameters(v map[string]interface{}) *GeneratedReportUpdate {
	_u.mutation.SetParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *GeneratedReportUpdate) ClearParameters() *GeneratedReportUpdate {
	_u.mutation.ClearParameters()
	return _u
}

// SetDeliveryMethod sets the "delivery_method" field.
func (_u *GeneratedReportUpdate) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportUpdate {
	_u.mutation.SetDeliveryMethod(v)
	return _u
}

// SetNillableDeliveryMethod sets the "delivery_method" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableDeliveryMethod(v *generatedreport.DeliveryMethod) *GeneratedReportUpdate {
	if v != nil {
		_u.SetDeliveryMethod(*v)
	}
	return _u
}

// SetRecipientEmail sets the "recipient_email" field.
func (_u *GeneratedReportUpdate) SetRecipientEmail(v string) *GeneratedReportUpdate {
	_u.mutation.SetRecipientEmail(v)
	return _u
}

// SetNillableRecipientEmail sets the "recipient_email" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableRecipientEmail(v *string) *GeneratedReportUpdate {
	if v != nil {
		_u.SetRecipientEmail(*v)
	}
	return _u
}

// ClearRecipientEmail clears the value of the "recipient_email" field.
func (_u *GeneratedReportUpdate) ClearRecipientEmail() *GeneratedReportUpdate {
	_u.mutation.ClearRecipientEmail()
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *GeneratedReportUpdate) SetGeneratedAt(v time.Time) *GeneratedReportUpdate {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableGeneratedAt(v *time.Time) *GeneratedReportUpdate {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetError sets the "error" field.
func (_u *GeneratedReportUpdate) SetError(v string) *GeneratedReportUpdate {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableError(v *string) *GeneratedReportUpdate {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *GeneratedReportUpdate) ClearError() *GeneratedReportUpdate {
	_u.mutation.ClearError()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *GeneratedReportUpdate) SetMetadata(v map[string]interface{}) *GeneratedReportUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *GeneratedReportUpdate) ClearMetadata() *GeneratedReportUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *GeneratedReportUpdate) SetReportDefinitionID(id int) *GeneratedReportUpdate {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *GeneratedReportUpdate) SetReportDefinition(v *ReportDefinition) *GeneratedReportUpdate {
	return _u.SetReportDefinitionID(v.ID)
}

// SetGeneratorID sets the "generator" edge to the User entity by ID.
func (_u *GeneratedReportUpdate) SetGeneratorID(id int) *GeneratedReportUpdate {
	_u.mutation.SetGeneratorID(id)
	return _u
}

// SetGenerator sets the "generator" edge to the User entity.
func (_u *GeneratedReportUpdate) SetGenerator(v *User) *GeneratedReportUpdate {
	return _u.SetGeneratorID(v.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *GeneratedReportUpdate) SetJobID(id int) *GeneratedReportUpdate {
	_u.mutation.SetJobID(id)
	return _u
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (_u *GeneratedReportUpdate) SetNillableJobID(id *int) *GeneratedReportUpdate {
	if id != nil {
		_u = _u.SetJobID(*id)
	}
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *GeneratedReportUpdate) SetJob(v *Job) *GeneratedReportUpdate {
	return _u.SetJobID(v.ID)
}

// Mutation returns the GeneratedReportMutation object of the builder.
func (_u *GeneratedReportUpdate) Mutation() *GeneratedReportMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *GeneratedReportUpdate) ClearReportDefinition() *GeneratedReportUpdate {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearGenerator clears the "generator" edge to the User entity.
func (_u *GeneratedReportUpdate) ClearGenerator() *GeneratedReportUpdate {
	_u.mutation.ClearGenerator()
	return _u
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *GeneratedReportUpdate) ClearJob() *GeneratedReportUpdate {
	_u.mutation.ClearJob()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GeneratedReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GeneratedReportUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GeneratedReportUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GeneratedReportUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GeneratedReportUpdate) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := generatedreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.format": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeliveryMethod(); ok {
		if err := generatedreport.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.delivery_method": %w`, err)}
		}
	}
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GeneratedReport.report_definition"`)
	}
	if _u.mutation.GeneratorCleared() && len(_u.mutation.GeneratorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GeneratedReport.generator"`)
	}
	return nil
}

func (_u *GeneratedReportUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(generatedreport.Table, generatedreport.Columns, sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(generatedreport.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(generatedreport.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileURL(); ok {
		_spec.SetField(generatedreport.FieldFileURL, field.TypeString, value)
	}
	if _u.mutation.FileURLCleared() {
		_spec.ClearField(generatedreport.FieldFileURL, field.TypeString)
	}
	if value, ok := _u.mutation.FileSize(); ok {
		_spec.SetField(generatedreport.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFileSize(); ok {
		_spec.AddField(generatedreport.FieldFileSize, field.TypeInt, value)
	}
	if _u.mutation.FileSizeCleared() {
		_spec.ClearField(generatedreport.FieldFileSize, field.TypeInt)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(generatedreport.FieldParameters, field.TypeJSON, value)
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(generatedreport.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.DeliveryMethod(); ok {
		_spec.SetField(generatedreport.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.RecipientEmail(); ok {
		_spec.SetField(generatedreport.FieldRecipientEmail, field.TypeString, value)
	}
	if _u.mutation.RecipientEmailCleared() {
		_spec.ClearField(generatedreport.FieldRecipientEmail, field.TypeString)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(generatedreport.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(generatedreport.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(generatedreport.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(generatedreport.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(generatedreport.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GeneratedReportUpdateOne is the builder for updating a single GeneratedReport entity.
type GeneratedReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeneratedReportMutation
}

// SetStatus sets the "status" field.
func (_u *GeneratedReportUpdateOne) SetStatus(v string) *GeneratedReportUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableStatus(v *string) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetFormat sets the "format" field.
func (_u *GeneratedReportUpdateOne) SetFormat(v generatedreport.Format) *GeneratedReportUpdateOne {
	_u.mutation.SetFormat(v)
	return _u
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableFormat(v *generatedreport.Format) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetFormat(*v)
	}
	return _u
}

// SetFileURL sets the "file_url" field.
func (_u *GeneratedReportUpdateOne) SetFileURL(v string) *GeneratedReportUpdateOne {
	_u.mutation.SetFileURL(v)
	return _u
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableFileURL(v *string) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetFileURL(*v)
	}
	return _u
}

// ClearFileURL clears the value of the "file_url" field.
func (_u *GeneratedReportUpdateOne) ClearFileURL() *GeneratedReportUpdateOne {
	_u.mutation.ClearFileURL()
	return _u
}

// SetFileSize sets the "file_size" field.
func (_u *GeneratedReportUpdateOne) SetFileSize(v int) *GeneratedReportUpdateOne {
	_u.mutation.ResetFileSize()
	_u.mutation.SetFileSize(v)
	return _u
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableFileSize(v *int) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetFileSize(*v)
	}
	return _u
}

// AddFileSize adds value to the "file_size" field.
func (_u *GeneratedReportUpdateOne) AddFileSize(v int) *GeneratedReportUpdateOne {
	_u.mutation.AddFileSize(v)
	return _u
}

// ClearFileSize clears the value of the "file_size" field.
func (_u *GeneratedReportUpdateOne) ClearFileSize() *GeneratedReportUpdateOne {
	_u.mutation.ClearFileSize()
	return _u
}

// SetParameters sets the "parameters" field.
func (_u *GeneratedReportUpdateOne) SetParameters(v map[string]interface{}) *GeneratedReportUpdateOne {
	_u.mutation.SetParameters(v)
	return _u
}

// ClearParameters clears the value of the "parameters" field.
func (_u *GeneratedReportUpdateOne) ClearParameters() *GeneratedReportUpdateOne {
	_u.mutation.ClearParameters()
	return _u
}

// SetDeliveryMethod sets the "delivery_method" field.
func (_u *GeneratedReportUpdateOne) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportUpdateOne {
	_u.mutation.SetDeliveryMethod(v)
	return _u
}

// SetNillableDeliveryMethod sets the "delivery_method" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableDeliveryMethod(v *generatedreport.DeliveryMethod) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetDeliveryMethod(*v)
	}
	return _u
}

// SetRecipientEmail sets the "recipient_email" field.
func (_u *GeneratedReportUpdateOne) SetRecipientEmail(v string) *GeneratedReportUpdateOne {
	_u.mutation.SetRecipientEmail(v)
	return _u
}

// SetNillableRecipientEmail sets the "recipient_email" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableRecipientEmail(v *string) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetRecipientEmail(*v)
	}
	return _u
}

// ClearRecipientEmail clears the value of the "recipient_email" field.
func (_u *GeneratedReportUpdateOne) ClearRecipientEmail() *GeneratedReportUpdateOne {
	_u.mutation.ClearRecipientEmail()
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *GeneratedReportUpdateOne) SetGeneratedAt(v time.Time) *GeneratedReportUpdateOne {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableGeneratedAt(v *time.Time) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetError sets the "error" field.
func (_u *GeneratedReportUpdateOne) SetError(v string) *GeneratedReportUpdateOne {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableError(v *string) *GeneratedReportUpdateOne {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *GeneratedReportUpdateOne) ClearError() *GeneratedReportUpdateOne {
	_u.mutation.ClearError()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *GeneratedReportUpdateOne) SetMetadata(v map[string]interface{}) *GeneratedReportUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *GeneratedReportUpdateOne) ClearMetadata() *GeneratedReportUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *GeneratedReportUpdateOne) SetReportDefinitionID(id int) *GeneratedReportUpdateOne {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *GeneratedReportUpdateOne) SetReportDefinition(v *ReportDefinition) *GeneratedReportUpdateOne {
	return _u.SetReportDefinitionID(v.ID)
}

// SetGeneratorID sets the "generator" edge to the User entity by ID.
func (_u *GeneratedReportUpdateOne) SetGeneratorID(id int) *GeneratedReportUpdateOne {
	_u.mutation.SetGeneratorID(id)
	return _u
}

// SetGenerator sets the "generator" edge to the User entity.
func (_u *GeneratedReportUpdateOne) SetGenerator(v *User) *GeneratedReportUpdateOne {
	return _u.SetGeneratorID(v.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *GeneratedReportUpdateOne) SetJobID(id int) *GeneratedReportUpdateOne {
	_u.mutation.SetJobID(id)
	return _u
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (_u *GeneratedReportUpdateOne) SetNillableJobID(id *int) *GeneratedReportUpdateOne {
	if id != nil {
		_u = _u.SetJobID(*id)
	}
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *GeneratedReportUpdateOne) SetJob(v *Job) *GeneratedReportUpdateOne {
	return _u.SetJobID(v.ID)
}

// Mutation returns the GeneratedReportMutation object of the builder.
func (_u *GeneratedReportUpdateOne) Mutation() *GeneratedReportMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *GeneratedReportUpdateOne) ClearReportDefinition() *GeneratedReportUpdateOne {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearGenerator clears the "generator" edge to the User entity.
func (_u *GeneratedReportUpdateOne) ClearGenerator() *GeneratedReportUpdateOne {
	_u.mutation.ClearGenerator()
	return _u
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *GeneratedReportUpdateOne) ClearJob() *GeneratedReportUpdateOne {
	_u.mutation.ClearJob()
	return _u
}

// Where appends a list predicates to the GeneratedReportUpdate builder.
func (_u *GeneratedReportUpdateOne) Where(ps ...predicate.GeneratedReport) *GeneratedReportUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GeneratedReportUpdateOne) Select(field string, fields ...string) *GeneratedReportUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GeneratedReport entity.
func (_u *GeneratedReportUpdateOne) Save(ctx context.Context) (*GeneratedReport, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GeneratedReportUpdateOne) SaveX(ctx context.Context) *GeneratedReport {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GeneratedReportUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GeneratedReportUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GeneratedReportUpdateOne) check() error {
	if v, ok := _u.mutation.Format(); ok {
		if err := generatedreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.format": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeliveryMethod(); ok {
		if err := generatedreport.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.delivery_method": %w`, err)}
		}
	}
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GeneratedReport.report_definition"`)
	}
	if _u.mutation.GeneratorCleared() && len(_u.mutation.GeneratorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GeneratedReport.generator"`)
	}
	return nil
}

func (_u *GeneratedReportUpdateOne) sqlSave(ctx context.Context) (_node *GeneratedReport, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(generatedreport.Table, generatedreport.Columns, sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GeneratedReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generatedreport.FieldID)
		for _, f := range fields {
			if !generatedreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generatedreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(generatedreport.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Format(); ok {
		_spec.SetField(generatedreport.FieldFormat, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileURL(); ok {
		_spec.SetField(generatedreport.FieldFileURL, field.TypeString, value)
	}
	if _u.mutation.FileURLCleared() {
		_spec.ClearField(generatedreport.FieldFileURL, field.TypeString)
	}
	if value, ok := _u.mutation.FileSize(); ok {
		_spec.SetField(generatedreport.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFileSize(); ok {
		_spec.AddField(generatedreport.FieldFileSize, field.TypeInt, value)
	}
	if _u.mutation.FileSizeCleared() {
		_spec.ClearField(generatedreport.FieldFileSize, field.TypeInt)
	}
	if value, ok := _u.mutation.Parameters(); ok {
		_spec.SetField(generatedreport.FieldParameters, field.TypeJSON, value)
	}
	if _u.mutation.ParametersCleared() {
		_spec.ClearField(generatedreport.FieldParameters, field.TypeJSON)
	}
	if value, ok := _u.mutation.DeliveryMethod(); ok {
		_spec.SetField(generatedreport.FieldDeliveryMethod, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.RecipientEmail(); ok {
		_spec.SetField(generatedreport.FieldRecipientEmail, field.TypeString, value)
	}
	if _u.mutation.RecipientEmailCleared() {
		_spec.ClearField(generatedreport.FieldRecipientEmail, field.TypeString)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(generatedreport.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(generatedreport.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(generatedreport.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(generatedreport.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(generatedreport.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GeneratedReport{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
