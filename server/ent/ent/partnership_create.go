// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"awe/ent/ent/partnershiprenewal"
	"awe/ent/ent/partnershipreport"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnershipCreate is the builder for creating a Partnership entity.
type PartnershipCreate struct {
	config
	mutation *PartnershipMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *PartnershipCreate) SetSlug(v string) *PartnershipCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetName sets the "name" field.
func (_c *PartnershipCreate) SetName(v map[string]string) *PartnershipCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *PartnershipCreate) SetType(v partnership.Type) *PartnershipCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *PartnershipCreate) SetStatus(v partnership.Status) *PartnershipCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableStatus(v *partnership.Status) *PartnershipCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *PartnershipCreate) SetDescription(v map[string]interface{}) *PartnershipCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *PartnershipCreate) SetValue(v float64) *PartnershipCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableValue(v *float64) *PartnershipCreate {
	if v != nil {
		_c.SetValue(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *PartnershipCreate) SetCurrency(v string) *PartnershipCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableCurrency(v *string) *PartnershipCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *PartnershipCreate) SetStartDate(v time.Time) *PartnershipCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableStartDate(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetStartDate(*v)
	}
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *PartnershipCreate) SetEndDate(v time.Time) *PartnershipCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableEndDate(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetRenewalDate sets the "renewal_date" field.
func (_c *PartnershipCreate) SetRenewalDate(v time.Time) *PartnershipCreate {
	_c.mutation.SetRenewalDate(v)
	return _c
}

// SetNillableRenewalDate sets the "renewal_date" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableRenewalDate(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetRenewalDate(*v)
	}
	return _c
}

// SetBenefits sets the "benefits" field.
func (_c *PartnershipCreate) SetBenefits(v []string) *PartnershipCreate {
	_c.mutation.SetBenefits(v)
	return _c
}

// SetDeliverables sets the "deliverables" field.
func (_c *PartnershipCreate) SetDeliverables(v []string) *PartnershipCreate {
	_c.mutation.SetDeliverables(v)
	return _c
}

// SetRequirements sets the "requirements" field.
func (_c *PartnershipCreate) SetRequirements(v []string) *PartnershipCreate {
	_c.mutation.SetRequirements(v)
	return _c
}

// SetLastContact sets the "last_contact" field.
func (_c *PartnershipCreate) SetLastContact(v time.Time) *PartnershipCreate {
	_c.mutation.SetLastContact(v)
	return _c
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableLastContact(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetLastContact(*v)
	}
	return _c
}

// SetNextFollowUp sets the "next_follow_up" field.
func (_c *PartnershipCreate) SetNextFollowUp(v time.Time) *PartnershipCreate {
	_c.mutation.SetNextFollowUp(v)
	return _c
}

// SetNillableNextFollowUp sets the "next_follow_up" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableNextFollowUp(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetNextFollowUp(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PartnershipCreate) SetCreatedAt(v time.Time) *PartnershipCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableCreatedAt(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PartnershipCreate) SetUpdatedAt(v time.Time) *PartnershipCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PartnershipCreate) SetNillableUpdatedAt(v *time.Time) *PartnershipCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (_c *PartnershipCreate) SetOrganizationID(id int) *PartnershipCreate {
	_c.mutation.SetOrganizationID(id)
	return _c
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_c *PartnershipCreate) SetOrganization(v *Organization) *PartnershipCreate {
	return _c.SetOrganizationID(v.ID)
}

// SetManagerID sets the "manager" edge to the User entity by ID.
func (_c *PartnershipCreate) SetManagerID(id int) *PartnershipCreate {
	_c.mutation.SetManagerID(id)
	return _c
}

// SetNillableManagerID sets the "manager" edge to the User entity by ID if the given value is not nil.
func (_c *PartnershipCreate) SetNillableManagerID(id *int) *PartnershipCreate {
	if id != nil {
		_c = _c.SetManagerID(*id)
	}
	return _c
}

// SetManager sets the "manager" edge to the User entity.
func (_c *PartnershipCreate) SetManager(v *User) *PartnershipCreate {
	return _c.SetManagerID(v.ID)
}

// AddPrimaryContactIDs adds the "primary_contacts" edge to the User entity by IDs.
func (_c *PartnershipCreate) AddPrimaryContactIDs(ids ...int) *PartnershipCreate {
	_c.mutation.AddPrimaryContactIDs(ids...)
	return _c
}

// AddPrimaryContacts adds the "primary_contacts" edges to the User entity.
func (_c *PartnershipCreate) AddPrimaryContacts(v ...*User) *PartnershipCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPrimaryContactIDs(ids...)
}

// AddReportIDs adds the "reports" edge to the PartnershipReport entity by IDs.
func (_c *PartnershipCreate) AddReportIDs(ids ...int) *PartnershipCreate {
	_c.mutation.AddReportIDs(ids...)
	return _c
}

// AddReports adds the "reports" edges to the PartnershipReport entity.
func (_c *PartnershipCreate) AddReports(v ...*PartnershipReport) *PartnershipCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddReportIDs(ids...)
}

// AddInteractionIDs adds the "interactions" edge to the PartnershipInteraction entity by IDs.
func (_c *PartnershipCreate) AddInteractionIDs(ids ...int) *PartnershipCreate {
	_c.mutation.AddInteractionIDs(ids...)
	return _c
}

// AddInteractions adds the "interactions" edges to the PartnershipInteraction entity.
func (_c *PartnershipCreate) AddInteractions(v ...*PartnershipInteraction) *PartnershipCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInteractionIDs(ids...)
}

// AddRenewalIDs adds the "renewals" edge to the PartnershipRenewal entity by IDs.
func (_c *PartnershipCreate) AddRenewalIDs(ids ...int) *PartnershipCreate {
	_c.mutation.AddRenewalIDs(ids...)
	return _c
}

// AddRenewals adds the "renewals" edges to the PartnershipRenewal entity.
func (_c *PartnershipCreate) AddRenewals(v ...*PartnershipRenewal) *PartnershipCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRenewalIDs(ids...)
}

// AddBrandBenefitIDs adds the "brand_benefits" edge to the BrandBenefit entity by IDs.
func (_c *PartnershipCreate) AddBrandBenefitIDs(ids ...int) *PartnershipCreate {
	_c.mutation.AddBrandBenefitIDs(ids...)
	return _c
}

// AddBrandBenefits adds the "brand_benefits" edges to the BrandBenefit entity.
func (_c *PartnershipCreate) AddBrandBenefits(v ...*BrandBenefit) *PartnershipCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBrandBenefitIDs(ids...)
}

// Mutation returns the PartnershipMutation object of the builder.
func (_c *PartnershipCreate) Mutation() *PartnershipMutation {
	return _c.mutation
}

// Save creates the Partnership in the database.
func (_c *PartnershipCreate) Save(ctx context.Context) (*Partnership, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnershipCreate) SaveX(ctx context.Context) *Partnership {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PartnershipCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := partnership.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Currency(); !ok {
		v := partnership.DefaultCurrency
		_c.mutation.SetCurrency(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := partnership.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := partnership.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnershipCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Partnership.slug"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Partnership.name"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Partnership.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := partnership.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Partnership.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Partnership.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := partnership.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Partnership.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Partnership.description"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Partnership.currency"`)}
	}
	if _, ok := _c.mutation.Benefits(); !ok {
		return &ValidationError{Name: "benefits", err: errors.New(`ent: missing required field "Partnership.benefits"`)}
	}
	if _, ok := _c.mutation.Deliverables(); !ok {
		return &ValidationError{Name: "deliverables", err: errors.New(`ent: missing required field "Partnership.deliverables"`)}
	}
	if _, ok := _c.mutation.Requirements(); !ok {
		return &ValidationError{Name: "requirements", err: errors.New(`ent: missing required field "Partnership.requirements"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Partnership.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Partnership.updated_at"`)}
	}
	if len(_c.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Partnership.organization"`)}
	}
	return nil
}

func (_c *PartnershipCreate) sqlSave(ctx context.Context) (*Partnership, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnershipCreate) createSpec() (*Partnership, *sqlgraph.CreateSpec) {
	var (
		_node = &Partnership{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partnership.Table, sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(partnership.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(partnership.FieldName, field.TypeJSON, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(partnership.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(partnership.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(partnership.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(partnership.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(partnership.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(partnership.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(partnership.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.RenewalDate(); ok {
		_spec.SetField(partnership.FieldRenewalDate, field.TypeTime, value)
		_node.RenewalDate = value
	}
	if value, ok := _c.mutation.Benefits(); ok {
		_spec.SetField(partnership.FieldBenefits, field.TypeJSON, value)
		_node.Benefits = value
	}
	if value, ok := _c.mutation.Deliverables(); ok {
		_spec.SetField(partnership.FieldDeliverables, field.TypeJSON, value)
		_node.Deliverables = value
	}
	if value, ok := _c.mutation.Requirements(); ok {
		_spec.SetField(partnership.FieldRequirements, field.TypeJSON, value)
		_node.Requirements = value
	}
	if value, ok := _c.mutation.LastContact(); ok {
		_spec.SetField(partnership.FieldLastContact, field.TypeTime, value)
		_node.LastContact = value
	}
	if value, ok := _c.mutation.NextFollowUp(); ok {
		_spec.SetField(partnership.FieldNextFollowUp, field.TypeTime, value)
		_node.NextFollowUp = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(partnership.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(partnership.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_partnerships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_managed_partnerships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PrimaryContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InteractionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershipinteraction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RenewalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BrandBenefitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brandbenefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Partnership.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipCreate) OnConflict(opts ...sql.ConflictOption) *PartnershipUpsertOne {
	_c.conflict = opts
	return &PartnershipUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Partnership.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipCreate) OnConflictColumns(columns ...string) *PartnershipUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipUpsertOne{
		create: _c,
	}
}

type (
	// PartnershipUpsertOne is the builder for "upsert"-ing
	//  one Partnership node.
	PartnershipUpsertOne struct {
		create *PartnershipCreate
	}

	// PartnershipUpsert is the "OnConflict" setter.
	PartnershipUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *PartnershipUpsert) SetSlug(v string) *PartnershipUpsert {
	u.Set(partnership.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateSlug() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldSlug)
	return u
}

// SetName sets the "name" field.
func (u *PartnershipUpsert) SetName(v map[string]string) *PartnershipUpsert {
	u.Set(partnership.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateName() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *PartnershipUpsert) SetType(v partnership.Type) *PartnershipUpsert {
	u.Set(partnership.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateType() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *PartnershipUpsert) SetStatus(v partnership.Status) *PartnershipUpsert {
	u.Set(partnership.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateStatus() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldStatus)
	return u
}

// SetDescription sets the "description" field.
func (u *PartnershipUpsert) SetDescription(v map[string]interface{}) *PartnershipUpsert {
	u.Set(partnership.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateDescription() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldDescription)
	return u
}

// SetValue sets the "value" field.
func (u *PartnershipUpsert) SetValue(v float64) *PartnershipUpsert {
	u.Set(partnership.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateValue() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *PartnershipUpsert) AddValue(v float64) *PartnershipUpsert {
	u.Add(partnership.FieldValue, v)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *PartnershipUpsert) ClearValue() *PartnershipUpsert {
	u.SetNull(partnership.FieldValue)
	return u
}

// SetCurrency sets the "currency" field.
func (u *PartnershipUpsert) SetCurrency(v string) *PartnershipUpsert {
	u.Set(partnership.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateCurrency() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldCurrency)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *PartnershipUpsert) SetStartDate(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateStartDate() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *PartnershipUpsert) ClearStartDate() *PartnershipUpsert {
	u.SetNull(partnership.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *PartnershipUpsert) SetEndDate(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateEndDate() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *PartnershipUpsert) ClearEndDate() *PartnershipUpsert {
	u.SetNull(partnership.FieldEndDate)
	return u
}

// SetRenewalDate sets the "renewal_date" field.
func (u *PartnershipUpsert) SetRenewalDate(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldRenewalDate, v)
	return u
}

// UpdateRenewalDate sets the "renewal_date" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateRenewalDate() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldRenewalDate)
	return u
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (u *PartnershipUpsert) ClearRenewalDate() *PartnershipUpsert {
	u.SetNull(partnership.FieldRenewalDate)
	return u
}

// SetBenefits sets the "benefits" field.
func (u *PartnershipUpsert) SetBenefits(v []string) *PartnershipUpsert {
	u.Set(partnership.FieldBenefits, v)
	return u
}

// UpdateBenefits sets the "benefits" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateBenefits() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldBenefits)
	return u
}

// SetDeliverables sets the "deliverables" field.
func (u *PartnershipUpsert) SetDeliverables(v []string) *PartnershipUpsert {
	u.Set(partnership.FieldDeliverables, v)
	return u
}

// UpdateDeliverables sets the "deliverables" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateDeliverables() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldDeliverables)
	return u
}

// SetRequirements sets the "requirements" field.
func (u *PartnershipUpsert) SetRequirements(v []string) *PartnershipUpsert {
	u.Set(partnership.FieldRequirements, v)
	return u
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateRequirements() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldRequirements)
	return u
}

// SetLastContact sets the "last_contact" field.
func (u *PartnershipUpsert) SetLastContact(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldLastContact, v)
	return u
}

// UpdateLastContact sets the "last_contact" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateLastContact() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldLastContact)
	return u
}

// ClearLastContact clears the value of the "last_contact" field.
func (u *PartnershipUpsert) ClearLastContact() *PartnershipUpsert {
	u.SetNull(partnership.FieldLastContact)
	return u
}

// SetNextFollowUp sets the "next_follow_up" field.
func (u *PartnershipUpsert) SetNextFollowUp(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldNextFollowUp, v)
	return u
}

// UpdateNextFollowUp sets the "next_follow_up" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateNextFollowUp() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldNextFollowUp)
	return u
}

// ClearNextFollowUp clears the value of the "next_follow_up" field.
func (u *PartnershipUpsert) ClearNextFollowUp() *PartnershipUpsert {
	u.SetNull(partnership.FieldNextFollowUp)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipUpsert) SetUpdatedAt(v time.Time) *PartnershipUpsert {
	u.Set(partnership.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipUpsert) UpdateUpdatedAt() *PartnershipUpsert {
	u.SetExcluded(partnership.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Partnership.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipUpsertOne) UpdateNewValues() *PartnershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(partnership.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Partnership.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PartnershipUpsertOne) Ignore() *PartnershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipUpsertOne) DoNothing() *PartnershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipCreate.OnConflict
// documentation for more info.
func (u *PartnershipUpsertOne) Update(set func(*PartnershipUpsert)) *PartnershipUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *PartnershipUpsertOne) SetSlug(v string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateSlug() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *PartnershipUpsertOne) SetName(v map[string]string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateName() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *PartnershipUpsertOne) SetType(v partnership.Type) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateType() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *PartnershipUpsertOne) SetStatus(v partnership.Status) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateStatus() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *PartnershipUpsertOne) SetDescription(v map[string]interface{}) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateDescription() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateDescription()
	})
}

// SetValue sets the "value" field.
func (u *PartnershipUpsertOne) SetValue(v float64) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *PartnershipUpsertOne) AddValue(v float64) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateValue() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *PartnershipUpsertOne) ClearValue() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearValue()
	})
}

// SetCurrency sets the "currency" field.
func (u *PartnershipUpsertOne) SetCurrency(v string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateCurrency() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateCurrency()
	})
}

// SetStartDate sets the "start_date" field.
func (u *PartnershipUpsertOne) SetStartDate(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateStartDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *PartnershipUpsertOne) ClearStartDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *PartnershipUpsertOne) SetEndDate(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateEndDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *PartnershipUpsertOne) ClearEndDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearEndDate()
	})
}

// SetRenewalDate sets the "renewal_date" field.
func (u *PartnershipUpsertOne) SetRenewalDate(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetRenewalDate(v)
	})
}

// UpdateRenewalDate sets the "renewal_date" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateRenewalDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateRenewalDate()
	})
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (u *PartnershipUpsertOne) ClearRenewalDate() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearRenewalDate()
	})
}

// SetBenefits sets the "benefits" field.
func (u *PartnershipUpsertOne) SetBenefits(v []string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetBenefits(v)
	})
}

// UpdateBenefits sets the "benefits" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateBenefits() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateBenefits()
	})
}

// SetDeliverables sets the "deliverables" field.
func (u *PartnershipUpsertOne) SetDeliverables(v []string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetDeliverables(v)
	})
}

// UpdateDeliverables sets the "deliverables" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateDeliverables() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateDeliverables()
	})
}

// SetRequirements sets the "requirements" field.
func (u *PartnershipUpsertOne) SetRequirements(v []string) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetRequirements(v)
	})
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateRequirements() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateRequirements()
	})
}

// SetLastContact sets the "last_contact" field.
func (u *PartnershipUpsertOne) SetLastContact(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetLastContact(v)
	})
}

// UpdateLastContact sets the "last_contact" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateLastContact() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateLastContact()
	})
}

// ClearLastContact clears the value of the "last_contact" field.
func (u *PartnershipUpsertOne) ClearLastContact() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearLastContact()
	})
}

// SetNextFollowUp sets the "next_follow_up" field.
func (u *PartnershipUpsertOne) SetNextFollowUp(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetNextFollowUp(v)
	})
}

// UpdateNextFollowUp sets the "next_follow_up" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateNextFollowUp() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateNextFollowUp()
	})
}

// ClearNextFollowUp clears the value of the "next_follow_up" field.
func (u *PartnershipUpsertOne) ClearNextFollowUp() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearNextFollowUp()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipUpsertOne) SetUpdatedAt(v time.Time) *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipUpsertOne) UpdateUpdatedAt() *PartnershipUpsertOne {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PartnershipUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PartnershipUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PartnershipCreateBulk is the builder for creating many Partnership entities in bulk.
type PartnershipCreateBulk struct {
	config
	err      error
	builders []*PartnershipCreate
	conflict []sql.ConflictOption
}

// Save creates the Partnership entities in the database.
func (_c *PartnershipCreateBulk) Save(ctx context.Context) ([]*Partnership, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Partnership, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnershipCreateBulk) SaveX(ctx context.Context) []*Partnership {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnershipCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnershipCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Partnership.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PartnershipUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *PartnershipCreateBulk) OnConflict(opts ...sql.ConflictOption) *PartnershipUpsertBulk {
	_c.conflict = opts
	return &PartnershipUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Partnership.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PartnershipCreateBulk) OnConflictColumns(columns ...string) *PartnershipUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PartnershipUpsertBulk{
		create: _c,
	}
}

// PartnershipUpsertBulk is the builder for "upsert"-ing
// a bulk of Partnership nodes.
type PartnershipUpsertBulk struct {
	create *PartnershipCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Partnership.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PartnershipUpsertBulk) UpdateNewValues() *PartnershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(partnership.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Partnership.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PartnershipUpsertBulk) Ignore() *PartnershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PartnershipUpsertBulk) DoNothing() *PartnershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PartnershipCreateBulk.OnConflict
// documentation for more info.
func (u *PartnershipUpsertBulk) Update(set func(*PartnershipUpsert)) *PartnershipUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PartnershipUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *PartnershipUpsertBulk) SetSlug(v string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateSlug() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateSlug()
	})
}

// SetName sets the "name" field.
func (u *PartnershipUpsertBulk) SetName(v map[string]string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateName() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *PartnershipUpsertBulk) SetType(v partnership.Type) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateType() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *PartnershipUpsertBulk) SetStatus(v partnership.Status) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateStatus() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *PartnershipUpsertBulk) SetDescription(v map[string]interface{}) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateDescription() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateDescription()
	})
}

// SetValue sets the "value" field.
func (u *PartnershipUpsertBulk) SetValue(v float64) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *PartnershipUpsertBulk) AddValue(v float64) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateValue() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *PartnershipUpsertBulk) ClearValue() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearValue()
	})
}

// SetCurrency sets the "currency" field.
func (u *PartnershipUpsertBulk) SetCurrency(v string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateCurrency() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateCurrency()
	})
}

// SetStartDate sets the "start_date" field.
func (u *PartnershipUpsertBulk) SetStartDate(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateStartDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *PartnershipUpsertBulk) ClearStartDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *PartnershipUpsertBulk) SetEndDate(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateEndDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *PartnershipUpsertBulk) ClearEndDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearEndDate()
	})
}

// SetRenewalDate sets the "renewal_date" field.
func (u *PartnershipUpsertBulk) SetRenewalDate(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetRenewalDate(v)
	})
}

// UpdateRenewalDate sets the "renewal_date" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateRenewalDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateRenewalDate()
	})
}

// ClearRenewalDate clears the value of the "renewal_date" field.
func (u *PartnershipUpsertBulk) ClearRenewalDate() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearRenewalDate()
	})
}

// SetBenefits sets the "benefits" field.
func (u *PartnershipUpsertBulk) SetBenefits(v []string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetBenefits(v)
	})
}

// UpdateBenefits sets the "benefits" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateBenefits() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateBenefits()
	})
}

// SetDeliverables sets the "deliverables" field.
func (u *PartnershipUpsertBulk) SetDeliverables(v []string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetDeliverables(v)
	})
}

// UpdateDeliverables sets the "deliverables" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateDeliverables() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateDeliverables()
	})
}

// SetRequirements sets the "requirements" field.
func (u *PartnershipUpsertBulk) SetRequirements(v []string) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetRequirements(v)
	})
}

// UpdateRequirements sets the "requirements" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateRequirements() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateRequirements()
	})
}

// SetLastContact sets the "last_contact" field.
func (u *PartnershipUpsertBulk) SetLastContact(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetLastContact(v)
	})
}

// UpdateLastContact sets the "last_contact" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateLastContact() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateLastContact()
	})
}

// ClearLastContact clears the value of the "last_contact" field.
func (u *PartnershipUpsertBulk) ClearLastContact() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearLastContact()
	})
}

// SetNextFollowUp sets the "next_follow_up" field.
func (u *PartnershipUpsertBulk) SetNextFollowUp(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetNextFollowUp(v)
	})
}

// UpdateNextFollowUp sets the "next_follow_up" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateNextFollowUp() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateNextFollowUp()
	})
}

// ClearNextFollowUp clears the value of the "next_follow_up" field.
func (u *PartnershipUpsertBulk) ClearNextFollowUp() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.ClearNextFollowUp()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PartnershipUpsertBulk) SetUpdatedAt(v time.Time) *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PartnershipUpsertBulk) UpdateUpdatedAt() *PartnershipUpsertBulk {
	return u.Update(func(s *PartnershipUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PartnershipUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PartnershipCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PartnershipCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PartnershipUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
