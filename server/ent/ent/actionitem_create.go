// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/actionitem"
	"awe/ent/ent/agendaitem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActionItemCreate is the builder for creating a ActionItem entity.
type ActionItemCreate struct {
	config
	mutation *ActionItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (_c *ActionItemCreate) SetDescription(v string) *ActionItemCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ActionItemCreate) SetOwnerID(v string) *ActionItemCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetDueDate sets the "due_date" field.
func (_c *ActionItemCreate) SetDueDate(v time.Time) *ActionItemCreate {
	_c.mutation.SetDueDate(v)
	return _c
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_c *ActionItemCreate) SetNillableDueDate(v *time.Time) *ActionItemCreate {
	if v != nil {
		_c.SetDueDate(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ActionItemCreate) SetStatus(v string) *ActionItemCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ActionItemCreate) SetNillableStatus(v *string) *ActionItemCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ActionItemCreate) SetCreatedAt(v time.Time) *ActionItemCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ActionItemCreate) SetNillableCreatedAt(v *time.Time) *ActionItemCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *ActionItemCreate) SetCompletedAt(v time.Time) *ActionItemCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *ActionItemCreate) SetNillableCompletedAt(v *time.Time) *ActionItemCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_c *ActionItemCreate) SetAgendaItemID(id int) *ActionItemCreate {
	_c.mutation.SetAgendaItemID(id)
	return _c
}

// SetNillableAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID if the given value is not nil.
func (_c *ActionItemCreate) SetNillableAgendaItemID(id *int) *ActionItemCreate {
	if id != nil {
		_c = _c.SetAgendaItemID(*id)
	}
	return _c
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_c *ActionItemCreate) SetAgendaItem(v *AgendaItem) *ActionItemCreate {
	return _c.SetAgendaItemID(v.ID)
}

// Mutation returns the ActionItemMutation object of the builder.
func (_c *ActionItemCreate) Mutation() *ActionItemMutation {
	return _c.mutation
}

// Save creates the ActionItem in the database.
func (_c *ActionItemCreate) Save(ctx context.Context) (*ActionItem, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ActionItemCreate) SaveX(ctx context.Context) *ActionItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ActionItemCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ActionItemCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ActionItemCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := actionitem.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := actionitem.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ActionItemCreate) check() error {
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ActionItem.description"`)}
	}
	if _, ok := _c.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "ActionItem.owner_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ActionItem.status"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ActionItem.created_at"`)}
	}
	return nil
}

func (_c *ActionItemCreate) sqlSave(ctx context.Context) (*ActionItem, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ActionItemCreate) createSpec() (*ActionItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ActionItem{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(actionitem.Table, sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(actionitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(actionitem.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := _c.mutation.DueDate(); ok {
		_spec.SetField(actionitem.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(actionitem.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(actionitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(actionitem.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := _c.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agenda_item_action_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionItem.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionItemUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (_c *ActionItemCreate) OnConflict(opts ...sql.ConflictOption) *ActionItemUpsertOne {
	_c.conflict = opts
	return &ActionItemUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ActionItemCreate) OnConflictColumns(columns ...string) *ActionItemUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ActionItemUpsertOne{
		create: _c,
	}
}

type (
	// ActionItemUpsertOne is the builder for "upsert"-ing
	//  one ActionItem node.
	ActionItemUpsertOne struct {
		create *ActionItemCreate
	}

	// ActionItemUpsert is the "OnConflict" setter.
	ActionItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ActionItemUpsert) SetDescription(v string) *ActionItemUpsert {
	u.Set(actionitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActionItemUpsert) UpdateDescription() *ActionItemUpsert {
	u.SetExcluded(actionitem.FieldDescription)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *ActionItemUpsert) SetOwnerID(v string) *ActionItemUpsert {
	u.Set(actionitem.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *ActionItemUpsert) UpdateOwnerID() *ActionItemUpsert {
	u.SetExcluded(actionitem.FieldOwnerID)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *ActionItemUpsert) SetDueDate(v time.Time) *ActionItemUpsert {
	u.Set(actionitem.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ActionItemUpsert) UpdateDueDate() *ActionItemUpsert {
	u.SetExcluded(actionitem.FieldDueDate)
	return u
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ActionItemUpsert) ClearDueDate() *ActionItemUpsert {
	u.SetNull(actionitem.FieldDueDate)
	return u
}

// SetStatus sets the "status" field.
func (u *ActionItemUpsert) SetStatus(v string) *ActionItemUpsert {
	u.Set(actionitem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActionItemUpsert) UpdateStatus() *ActionItemUpsert {
	u.SetExcluded(actionitem.FieldStatus)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *ActionItemUpsert) SetCompletedAt(v time.Time) *ActionItemUpsert {
	u.Set(actionitem.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *ActionItemUpsert) UpdateCompletedAt() *ActionItemUpsert {
	u.SetExcluded(actionitem.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *ActionItemUpsert) ClearCompletedAt() *ActionItemUpsert {
	u.SetNull(actionitem.FieldCompletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActionItemUpsertOne) UpdateNewValues() *ActionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(actionitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActionItemUpsertOne) Ignore() *ActionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionItemUpsertOne) DoNothing() *ActionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionItemCreate.OnConflict
// documentation for more info.
func (u *ActionItemUpsertOne) Update(set func(*ActionItemUpsert)) *ActionItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ActionItemUpsertOne) SetDescription(v string) *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActionItemUpsertOne) UpdateDescription() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateDescription()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *ActionItemUpsertOne) SetOwnerID(v string) *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *ActionItemUpsertOne) UpdateOwnerID() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateOwnerID()
	})
}

// SetDueDate sets the "due_date" field.
func (u *ActionItemUpsertOne) SetDueDate(v time.Time) *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ActionItemUpsertOne) UpdateDueDate() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ActionItemUpsertOne) ClearDueDate() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.ClearDueDate()
	})
}

// SetStatus sets the "status" field.
func (u *ActionItemUpsertOne) SetStatus(v string) *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActionItemUpsertOne) UpdateStatus() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateStatus()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *ActionItemUpsertOne) SetCompletedAt(v time.Time) *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *ActionItemUpsertOne) UpdateCompletedAt() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *ActionItemUpsertOne) ClearCompletedAt() *ActionItemUpsertOne {
	return u.Update(func(s *ActionItemUpsert) {
		s.ClearCompletedAt()
	})
}

// Exec executes the query.
func (u *ActionItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActionItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActionItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActionItemCreateBulk is the builder for creating many ActionItem entities in bulk.
type ActionItemCreateBulk struct {
	config
	err      error
	builders []*ActionItemCreate
	conflict []sql.ConflictOption
}

// Save creates the ActionItem entities in the database.
func (_c *ActionItemCreateBulk) Save(ctx context.Context) ([]*ActionItem, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ActionItem, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActionItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ActionItemCreateBulk) SaveX(ctx context.Context) []*ActionItem {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ActionItemCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ActionItemCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActionItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActionItemUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (_c *ActionItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActionItemUpsertBulk {
	_c.conflict = opts
	return &ActionItemUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ActionItemCreateBulk) OnConflictColumns(columns ...string) *ActionItemUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ActionItemUpsertBulk{
		create: _c,
	}
}

// ActionItemUpsertBulk is the builder for "upsert"-ing
// a bulk of ActionItem nodes.
type ActionItemUpsertBulk struct {
	create *ActionItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActionItemUpsertBulk) UpdateNewValues() *ActionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(actionitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActionItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActionItemUpsertBulk) Ignore() *ActionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActionItemUpsertBulk) DoNothing() *ActionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActionItemCreateBulk.OnConflict
// documentation for more info.
func (u *ActionItemUpsertBulk) Update(set func(*ActionItemUpsert)) *ActionItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActionItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ActionItemUpsertBulk) SetDescription(v string) *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActionItemUpsertBulk) UpdateDescription() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateDescription()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *ActionItemUpsertBulk) SetOwnerID(v string) *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *ActionItemUpsertBulk) UpdateOwnerID() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateOwnerID()
	})
}

// SetDueDate sets the "due_date" field.
func (u *ActionItemUpsertBulk) SetDueDate(v time.Time) *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ActionItemUpsertBulk) UpdateDueDate() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ActionItemUpsertBulk) ClearDueDate() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.ClearDueDate()
	})
}

// SetStatus sets the "status" field.
func (u *ActionItemUpsertBulk) SetStatus(v string) *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActionItemUpsertBulk) UpdateStatus() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateStatus()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *ActionItemUpsertBulk) SetCompletedAt(v time.Time) *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *ActionItemUpsertBulk) UpdateCompletedAt() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *ActionItemUpsertBulk) ClearCompletedAt() *ActionItemUpsertBulk {
	return u.Update(func(s *ActionItemUpsert) {
		s.ClearCompletedAt()
	})
}

// Exec executes the query.
func (u *ActionItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActionItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActionItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActionItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
