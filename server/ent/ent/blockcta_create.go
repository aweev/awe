// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockcta"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockCtaCreate is the builder for creating a BlockCta entity.
type BlockCtaCreate struct {
	config
	mutation *BlockCtaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockCtaCreate) SetInternalName(v string) *BlockCtaCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockCtaCreate) SetBadge(v map[string]string) *BlockCtaCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockCtaCreate) SetTitle(v map[string]string) *BlockCtaCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockCtaCreate) SetDescription(v map[string]string) *BlockCtaCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (_c *BlockCtaCreate) SetPrimaryButtonText(v map[string]string) *BlockCtaCreate {
	_c.mutation.SetPrimaryButtonText(v)
	return _c
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (_c *BlockCtaCreate) SetPrimaryButtonHref(v string) *BlockCtaCreate {
	_c.mutation.SetPrimaryButtonHref(v)
	return _c
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (_c *BlockCtaCreate) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaCreate {
	_c.mutation.SetPrimaryButtonStyle(v)
	return _c
}

// SetNillablePrimaryButtonStyle sets the "primary_button_style" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillablePrimaryButtonStyle(v *blockcta.PrimaryButtonStyle) *BlockCtaCreate {
	if v != nil {
		_c.SetPrimaryButtonStyle(*v)
	}
	return _c
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (_c *BlockCtaCreate) SetSecondaryButtonText(v map[string]string) *BlockCtaCreate {
	_c.mutation.SetSecondaryButtonText(v)
	return _c
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (_c *BlockCtaCreate) SetSecondaryButtonHref(v string) *BlockCtaCreate {
	_c.mutation.SetSecondaryButtonHref(v)
	return _c
}

// SetNillableSecondaryButtonHref sets the "secondary_button_href" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableSecondaryButtonHref(v *string) *BlockCtaCreate {
	if v != nil {
		_c.SetSecondaryButtonHref(*v)
	}
	return _c
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (_c *BlockCtaCreate) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaCreate {
	_c.mutation.SetSecondaryButtonStyle(v)
	return _c
}

// SetNillableSecondaryButtonStyle sets the "secondary_button_style" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableSecondaryButtonStyle(v *blockcta.SecondaryButtonStyle) *BlockCtaCreate {
	if v != nil {
		_c.SetSecondaryButtonStyle(*v)
	}
	return _c
}

// SetTextAlign sets the "text_align" field.
func (_c *BlockCtaCreate) SetTextAlign(v blockcta.TextAlign) *BlockCtaCreate {
	_c.mutation.SetTextAlign(v)
	return _c
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableTextAlign(v *blockcta.TextAlign) *BlockCtaCreate {
	if v != nil {
		_c.SetTextAlign(*v)
	}
	return _c
}

// SetColorScheme sets the "color_scheme" field.
func (_c *BlockCtaCreate) SetColorScheme(v blockcta.ColorScheme) *BlockCtaCreate {
	_c.mutation.SetColorScheme(v)
	return _c
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableColorScheme(v *blockcta.ColorScheme) *BlockCtaCreate {
	if v != nil {
		_c.SetColorScheme(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockCtaCreate) SetCreatedAt(v time.Time) *BlockCtaCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableCreatedAt(v *time.Time) *BlockCtaCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockCtaCreate) SetUpdatedAt(v time.Time) *BlockCtaCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockCtaCreate) SetNillableUpdatedAt(v *time.Time) *BlockCtaCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockCtaCreate) SetContentBlockID(id int) *BlockCtaCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockCtaCreate) SetContentBlock(v *ContentBlock) *BlockCtaCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockCtaMutation object of the builder.
func (_c *BlockCtaCreate) Mutation() *BlockCtaMutation {
	return _c.mutation
}

// Save creates the BlockCta in the database.
func (_c *BlockCtaCreate) Save(ctx context.Context) (*BlockCta, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockCtaCreate) SaveX(ctx context.Context) *BlockCta {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockCtaCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockCtaCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockCtaCreate) defaults() {
	if _, ok := _c.mutation.PrimaryButtonStyle(); !ok {
		v := blockcta.DefaultPrimaryButtonStyle
		_c.mutation.SetPrimaryButtonStyle(v)
	}
	if _, ok := _c.mutation.SecondaryButtonStyle(); !ok {
		v := blockcta.DefaultSecondaryButtonStyle
		_c.mutation.SetSecondaryButtonStyle(v)
	}
	if _, ok := _c.mutation.TextAlign(); !ok {
		v := blockcta.DefaultTextAlign
		_c.mutation.SetTextAlign(v)
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		v := blockcta.DefaultColorScheme
		_c.mutation.SetColorScheme(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockcta.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockcta.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockCtaCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockCta.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockCta.title"`)}
	}
	if _, ok := _c.mutation.PrimaryButtonText(); !ok {
		return &ValidationError{Name: "primary_button_text", err: errors.New(`ent: missing required field "BlockCta.primary_button_text"`)}
	}
	if _, ok := _c.mutation.PrimaryButtonHref(); !ok {
		return &ValidationError{Name: "primary_button_href", err: errors.New(`ent: missing required field "BlockCta.primary_button_href"`)}
	}
	if _, ok := _c.mutation.PrimaryButtonStyle(); !ok {
		return &ValidationError{Name: "primary_button_style", err: errors.New(`ent: missing required field "BlockCta.primary_button_style"`)}
	}
	if v, ok := _c.mutation.PrimaryButtonStyle(); ok {
		if err := blockcta.PrimaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "primary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.primary_button_style": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SecondaryButtonStyle(); !ok {
		return &ValidationError{Name: "secondary_button_style", err: errors.New(`ent: missing required field "BlockCta.secondary_button_style"`)}
	}
	if v, ok := _c.mutation.SecondaryButtonStyle(); ok {
		if err := blockcta.SecondaryButtonStyleValidator(v); err != nil {
			return &ValidationError{Name: "secondary_button_style", err: fmt.Errorf(`ent: validator failed for field "BlockCta.secondary_button_style": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TextAlign(); !ok {
		return &ValidationError{Name: "text_align", err: errors.New(`ent: missing required field "BlockCta.text_align"`)}
	}
	if v, ok := _c.mutation.TextAlign(); ok {
		if err := blockcta.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockCta.text_align": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		return &ValidationError{Name: "color_scheme", err: errors.New(`ent: missing required field "BlockCta.color_scheme"`)}
	}
	if v, ok := _c.mutation.ColorScheme(); ok {
		if err := blockcta.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockCta.color_scheme": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockCta.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockCta.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockCta.content_block"`)}
	}
	return nil
}

func (_c *BlockCtaCreate) sqlSave(ctx context.Context) (*BlockCta, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockCtaCreate) createSpec() (*BlockCta, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockCta{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockcta.Table, sqlgraph.NewFieldSpec(blockcta.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockcta.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blockcta.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockcta.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockcta.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.PrimaryButtonText(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonText, field.TypeJSON, value)
		_node.PrimaryButtonText = value
	}
	if value, ok := _c.mutation.PrimaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonHref, field.TypeString, value)
		_node.PrimaryButtonHref = value
	}
	if value, ok := _c.mutation.PrimaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldPrimaryButtonStyle, field.TypeEnum, value)
		_node.PrimaryButtonStyle = value
	}
	if value, ok := _c.mutation.SecondaryButtonText(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonText, field.TypeJSON, value)
		_node.SecondaryButtonText = value
	}
	if value, ok := _c.mutation.SecondaryButtonHref(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonHref, field.TypeString, value)
		_node.SecondaryButtonHref = value
	}
	if value, ok := _c.mutation.SecondaryButtonStyle(); ok {
		_spec.SetField(blockcta.FieldSecondaryButtonStyle, field.TypeEnum, value)
		_node.SecondaryButtonStyle = value
	}
	if value, ok := _c.mutation.TextAlign(); ok {
		_spec.SetField(blockcta.FieldTextAlign, field.TypeEnum, value)
		_node.TextAlign = value
	}
	if value, ok := _c.mutation.ColorScheme(); ok {
		_spec.SetField(blockcta.FieldColorScheme, field.TypeEnum, value)
		_node.ColorScheme = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockcta.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcta.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_cta = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockCta.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockCtaUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockCtaCreate) OnConflict(opts ...sql.ConflictOption) *BlockCtaUpsertOne {
	_c.conflict = opts
	return &BlockCtaUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockCtaCreate) OnConflictColumns(columns ...string) *BlockCtaUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockCtaUpsertOne{
		create: _c,
	}
}

type (
	// BlockCtaUpsertOne is the builder for "upsert"-ing
	//  one BlockCta node.
	BlockCtaUpsertOne struct {
		create *BlockCtaCreate
	}

	// BlockCtaUpsert is the "OnConflict" setter.
	BlockCtaUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockCtaUpsert) SetInternalName(v string) *BlockCtaUpsert {
	u.Set(blockcta.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateInternalName() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockCtaUpsert) SetBadge(v map[string]string) *BlockCtaUpsert {
	u.Set(blockcta.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateBadge() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockCtaUpsert) ClearBadge() *BlockCtaUpsert {
	u.SetNull(blockcta.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockCtaUpsert) SetTitle(v map[string]string) *BlockCtaUpsert {
	u.Set(blockcta.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateTitle() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockCtaUpsert) SetDescription(v map[string]string) *BlockCtaUpsert {
	u.Set(blockcta.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateDescription() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockCtaUpsert) ClearDescription() *BlockCtaUpsert {
	u.SetNull(blockcta.FieldDescription)
	return u
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (u *BlockCtaUpsert) SetPrimaryButtonText(v map[string]string) *BlockCtaUpsert {
	u.Set(blockcta.FieldPrimaryButtonText, v)
	return u
}

// UpdatePrimaryButtonText sets the "primary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdatePrimaryButtonText() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldPrimaryButtonText)
	return u
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (u *BlockCtaUpsert) SetPrimaryButtonHref(v string) *BlockCtaUpsert {
	u.Set(blockcta.FieldPrimaryButtonHref, v)
	return u
}

// UpdatePrimaryButtonHref sets the "primary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdatePrimaryButtonHref() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldPrimaryButtonHref)
	return u
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (u *BlockCtaUpsert) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaUpsert {
	u.Set(blockcta.FieldPrimaryButtonStyle, v)
	return u
}

// UpdatePrimaryButtonStyle sets the "primary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdatePrimaryButtonStyle() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldPrimaryButtonStyle)
	return u
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (u *BlockCtaUpsert) SetSecondaryButtonText(v map[string]string) *BlockCtaUpsert {
	u.Set(blockcta.FieldSecondaryButtonText, v)
	return u
}

// UpdateSecondaryButtonText sets the "secondary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateSecondaryButtonText() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldSecondaryButtonText)
	return u
}

// ClearSecondaryButtonText clears the value of the "secondary_button_text" field.
func (u *BlockCtaUpsert) ClearSecondaryButtonText() *BlockCtaUpsert {
	u.SetNull(blockcta.FieldSecondaryButtonText)
	return u
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (u *BlockCtaUpsert) SetSecondaryButtonHref(v string) *BlockCtaUpsert {
	u.Set(blockcta.FieldSecondaryButtonHref, v)
	return u
}

// UpdateSecondaryButtonHref sets the "secondary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateSecondaryButtonHref() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldSecondaryButtonHref)
	return u
}

// ClearSecondaryButtonHref clears the value of the "secondary_button_href" field.
func (u *BlockCtaUpsert) ClearSecondaryButtonHref() *BlockCtaUpsert {
	u.SetNull(blockcta.FieldSecondaryButtonHref)
	return u
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (u *BlockCtaUpsert) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaUpsert {
	u.Set(blockcta.FieldSecondaryButtonStyle, v)
	return u
}

// UpdateSecondaryButtonStyle sets the "secondary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateSecondaryButtonStyle() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldSecondaryButtonStyle)
	return u
}

// SetTextAlign sets the "text_align" field.
func (u *BlockCtaUpsert) SetTextAlign(v blockcta.TextAlign) *BlockCtaUpsert {
	u.Set(blockcta.FieldTextAlign, v)
	return u
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateTextAlign() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldTextAlign)
	return u
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockCtaUpsert) SetColorScheme(v blockcta.ColorScheme) *BlockCtaUpsert {
	u.Set(blockcta.FieldColorScheme, v)
	return u
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateColorScheme() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldColorScheme)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockCtaUpsert) SetUpdatedAt(v time.Time) *BlockCtaUpsert {
	u.Set(blockcta.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockCtaUpsert) UpdateUpdatedAt() *BlockCtaUpsert {
	u.SetExcluded(blockcta.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockCtaUpsertOne) UpdateNewValues() *BlockCtaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockcta.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockCtaUpsertOne) Ignore() *BlockCtaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockCtaUpsertOne) DoNothing() *BlockCtaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockCtaCreate.OnConflict
// documentation for more info.
func (u *BlockCtaUpsertOne) Update(set func(*BlockCtaUpsert)) *BlockCtaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockCtaUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockCtaUpsertOne) SetInternalName(v string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateInternalName() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockCtaUpsertOne) SetBadge(v map[string]string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateBadge() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockCtaUpsertOne) ClearBadge() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockCtaUpsertOne) SetTitle(v map[string]string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateTitle() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockCtaUpsertOne) SetDescription(v map[string]string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateDescription() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockCtaUpsertOne) ClearDescription() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearDescription()
	})
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (u *BlockCtaUpsertOne) SetPrimaryButtonText(v map[string]string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonText(v)
	})
}

// UpdatePrimaryButtonText sets the "primary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdatePrimaryButtonText() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonText()
	})
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (u *BlockCtaUpsertOne) SetPrimaryButtonHref(v string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonHref(v)
	})
}

// UpdatePrimaryButtonHref sets the "primary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdatePrimaryButtonHref() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonHref()
	})
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (u *BlockCtaUpsertOne) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonStyle(v)
	})
}

// UpdatePrimaryButtonStyle sets the "primary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdatePrimaryButtonStyle() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonStyle()
	})
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (u *BlockCtaUpsertOne) SetSecondaryButtonText(v map[string]string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonText(v)
	})
}

// UpdateSecondaryButtonText sets the "secondary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateSecondaryButtonText() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonText()
	})
}

// ClearSecondaryButtonText clears the value of the "secondary_button_text" field.
func (u *BlockCtaUpsertOne) ClearSecondaryButtonText() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearSecondaryButtonText()
	})
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (u *BlockCtaUpsertOne) SetSecondaryButtonHref(v string) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonHref(v)
	})
}

// UpdateSecondaryButtonHref sets the "secondary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateSecondaryButtonHref() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonHref()
	})
}

// ClearSecondaryButtonHref clears the value of the "secondary_button_href" field.
func (u *BlockCtaUpsertOne) ClearSecondaryButtonHref() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearSecondaryButtonHref()
	})
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (u *BlockCtaUpsertOne) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonStyle(v)
	})
}

// UpdateSecondaryButtonStyle sets the "secondary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateSecondaryButtonStyle() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonStyle()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockCtaUpsertOne) SetTextAlign(v blockcta.TextAlign) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateTextAlign() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockCtaUpsertOne) SetColorScheme(v blockcta.ColorScheme) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateColorScheme() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockCtaUpsertOne) SetUpdatedAt(v time.Time) *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockCtaUpsertOne) UpdateUpdatedAt() *BlockCtaUpsertOne {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockCtaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockCtaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockCtaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockCtaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockCtaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockCtaCreateBulk is the builder for creating many BlockCta entities in bulk.
type BlockCtaCreateBulk struct {
	config
	err      error
	builders []*BlockCtaCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockCta entities in the database.
func (_c *BlockCtaCreateBulk) Save(ctx context.Context) ([]*BlockCta, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockCta, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockCtaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockCtaCreateBulk) SaveX(ctx context.Context) []*BlockCta {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockCtaCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockCtaCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockCta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockCtaUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockCtaCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockCtaUpsertBulk {
	_c.conflict = opts
	return &BlockCtaUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockCtaCreateBulk) OnConflictColumns(columns ...string) *BlockCtaUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockCtaUpsertBulk{
		create: _c,
	}
}

// BlockCtaUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockCta nodes.
type BlockCtaUpsertBulk struct {
	create *BlockCtaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockCtaUpsertBulk) UpdateNewValues() *BlockCtaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockcta.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockCta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockCtaUpsertBulk) Ignore() *BlockCtaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockCtaUpsertBulk) DoNothing() *BlockCtaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockCtaCreateBulk.OnConflict
// documentation for more info.
func (u *BlockCtaUpsertBulk) Update(set func(*BlockCtaUpsert)) *BlockCtaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockCtaUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockCtaUpsertBulk) SetInternalName(v string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateInternalName() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockCtaUpsertBulk) SetBadge(v map[string]string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateBadge() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockCtaUpsertBulk) ClearBadge() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockCtaUpsertBulk) SetTitle(v map[string]string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateTitle() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockCtaUpsertBulk) SetDescription(v map[string]string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateDescription() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockCtaUpsertBulk) ClearDescription() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearDescription()
	})
}

// SetPrimaryButtonText sets the "primary_button_text" field.
func (u *BlockCtaUpsertBulk) SetPrimaryButtonText(v map[string]string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonText(v)
	})
}

// UpdatePrimaryButtonText sets the "primary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdatePrimaryButtonText() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonText()
	})
}

// SetPrimaryButtonHref sets the "primary_button_href" field.
func (u *BlockCtaUpsertBulk) SetPrimaryButtonHref(v string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonHref(v)
	})
}

// UpdatePrimaryButtonHref sets the "primary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdatePrimaryButtonHref() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonHref()
	})
}

// SetPrimaryButtonStyle sets the "primary_button_style" field.
func (u *BlockCtaUpsertBulk) SetPrimaryButtonStyle(v blockcta.PrimaryButtonStyle) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetPrimaryButtonStyle(v)
	})
}

// UpdatePrimaryButtonStyle sets the "primary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdatePrimaryButtonStyle() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdatePrimaryButtonStyle()
	})
}

// SetSecondaryButtonText sets the "secondary_button_text" field.
func (u *BlockCtaUpsertBulk) SetSecondaryButtonText(v map[string]string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonText(v)
	})
}

// UpdateSecondaryButtonText sets the "secondary_button_text" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateSecondaryButtonText() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonText()
	})
}

// ClearSecondaryButtonText clears the value of the "secondary_button_text" field.
func (u *BlockCtaUpsertBulk) ClearSecondaryButtonText() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearSecondaryButtonText()
	})
}

// SetSecondaryButtonHref sets the "secondary_button_href" field.
func (u *BlockCtaUpsertBulk) SetSecondaryButtonHref(v string) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonHref(v)
	})
}

// UpdateSecondaryButtonHref sets the "secondary_button_href" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateSecondaryButtonHref() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonHref()
	})
}

// ClearSecondaryButtonHref clears the value of the "secondary_button_href" field.
func (u *BlockCtaUpsertBulk) ClearSecondaryButtonHref() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.ClearSecondaryButtonHref()
	})
}

// SetSecondaryButtonStyle sets the "secondary_button_style" field.
func (u *BlockCtaUpsertBulk) SetSecondaryButtonStyle(v blockcta.SecondaryButtonStyle) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetSecondaryButtonStyle(v)
	})
}

// UpdateSecondaryButtonStyle sets the "secondary_button_style" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateSecondaryButtonStyle() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateSecondaryButtonStyle()
	})
}

// SetTextAlign sets the "text_align" field.
func (u *BlockCtaUpsertBulk) SetTextAlign(v blockcta.TextAlign) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetTextAlign(v)
	})
}

// UpdateTextAlign sets the "text_align" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateTextAlign() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateTextAlign()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockCtaUpsertBulk) SetColorScheme(v blockcta.ColorScheme) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateColorScheme() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockCtaUpsertBulk) SetUpdatedAt(v time.Time) *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockCtaUpsertBulk) UpdateUpdatedAt() *BlockCtaUpsertBulk {
	return u.Update(func(s *BlockCtaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockCtaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockCtaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockCtaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockCtaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
