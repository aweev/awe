// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/joblog"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *JobUpdate) SetType(v string) *JobUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *JobUpdate) SetNillableType(v *string) *JobUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *JobUpdate) SetStatus(v job.Status) *JobUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobUpdate) SetNillableStatus(v *job.Status) *JobUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *JobUpdate) SetPayload(v map[string]interface{}) *JobUpdate {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *JobUpdate) ClearPayload() *JobUpdate {
	_u.mutation.ClearPayload()
	return _u
}

// SetResult sets the "result" field.
func (_u *JobUpdate) SetResult(v map[string]interface{}) *JobUpdate {
	_u.mutation.SetResult(v)
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *JobUpdate) ClearResult() *JobUpdate {
	_u.mutation.ClearResult()
	return _u
}

// SetError sets the "error" field.
func (_u *JobUpdate) SetError(v string) *JobUpdate {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *JobUpdate) SetNillableError(v *string) *JobUpdate {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *JobUpdate) ClearError() *JobUpdate {
	_u.mutation.ClearError()
	return _u
}

// SetInngestRunID sets the "inngest_run_id" field.
func (_u *JobUpdate) SetInngestRunID(v string) *JobUpdate {
	_u.mutation.SetInngestRunID(v)
	return _u
}

// SetNillableInngestRunID sets the "inngest_run_id" field if the given value is not nil.
func (_u *JobUpdate) SetNillableInngestRunID(v *string) *JobUpdate {
	if v != nil {
		_u.SetInngestRunID(*v)
	}
	return _u
}

// ClearInngestRunID clears the value of the "inngest_run_id" field.
func (_u *JobUpdate) ClearInngestRunID() *JobUpdate {
	_u.mutation.ClearInngestRunID()
	return _u
}

// SetScheduledFor sets the "scheduled_for" field.
func (_u *JobUpdate) SetScheduledFor(v time.Time) *JobUpdate {
	_u.mutation.SetScheduledFor(v)
	return _u
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (_u *JobUpdate) SetNillableScheduledFor(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetScheduledFor(*v)
	}
	return _u
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (_u *JobUpdate) ClearScheduledFor() *JobUpdate {
	_u.mutation.ClearScheduledFor()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *JobUpdate) SetPriority(v int) *JobUpdate {
	_u.mutation.ResetPriority()
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *JobUpdate) SetNillablePriority(v *int) *JobUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// AddPriority adds value to the "priority" field.
func (_u *JobUpdate) AddPriority(v int) *JobUpdate {
	_u.mutation.AddPriority(v)
	return _u
}

// SetMaxRetries sets the "max_retries" field.
func (_u *JobUpdate) SetMaxRetries(v int) *JobUpdate {
	_u.mutation.ResetMaxRetries()
	_u.mutation.SetMaxRetries(v)
	return _u
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (_u *JobUpdate) SetNillableMaxRetries(v *int) *JobUpdate {
	if v != nil {
		_u.SetMaxRetries(*v)
	}
	return _u
}

// AddMaxRetries adds value to the "max_retries" field.
func (_u *JobUpdate) AddMaxRetries(v int) *JobUpdate {
	_u.mutation.AddMaxRetries(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobUpdate) SetUpdatedAt(v time.Time) *JobUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *JobUpdate) SetStartedAt(v time.Time) *JobUpdate {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *JobUpdate) SetNillableStartedAt(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *JobUpdate) ClearStartedAt() *JobUpdate {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *JobUpdate) SetCompletedAt(v time.Time) *JobUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *JobUpdate) SetNillableCompletedAt(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *JobUpdate) ClearCompletedAt() *JobUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *JobUpdate) SetMetadata(v map[string]interface{}) *JobUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *JobUpdate) ClearMetadata() *JobUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *JobUpdate) SetUserID(id int) *JobUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *JobUpdate) SetNillableUserID(id *int) *JobUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *JobUpdate) SetUser(v *User) *JobUpdate {
	return _u.SetUserID(v.ID)
}

// AddLogIDs adds the "logs" edge to the JobLog entity by IDs.
func (_u *JobUpdate) AddLogIDs(ids ...int) *JobUpdate {
	_u.mutation.AddLogIDs(ids...)
	return _u
}

// AddLogs adds the "logs" edges to the JobLog entity.
func (_u *JobUpdate) AddLogs(v ...*JobLog) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLogIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Job entity by IDs.
func (_u *JobUpdate) AddDependentIDs(ids ...int) *JobUpdate {
	_u.mutation.AddDependentIDs(ids...)
	return _u
}

// AddDependents adds the "dependents" edges to the Job entity.
func (_u *JobUpdate) AddDependents(v ...*Job) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDependentIDs(ids...)
}

// SetDependsOnID sets the "depends_on" edge to the Job entity by ID.
func (_u *JobUpdate) SetDependsOnID(id int) *JobUpdate {
	_u.mutation.SetDependsOnID(id)
	return _u
}

// SetNillableDependsOnID sets the "depends_on" edge to the Job entity by ID if the given value is not nil.
func (_u *JobUpdate) SetNillableDependsOnID(id *int) *JobUpdate {
	if id != nil {
		_u = _u.SetDependsOnID(*id)
	}
	return _u
}

// SetDependsOn sets the "depends_on" edge to the Job entity.
func (_u *JobUpdate) SetDependsOn(v *Job) *JobUpdate {
	return _u.SetDependsOnID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GeneratedReport entity by IDs.
func (_u *JobUpdate) AddReportIDs(ids ...int) *JobUpdate {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the GeneratedReport entity.
func (_u *JobUpdate) AddReports(v ...*GeneratedReport) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdate) Mutation() *JobMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *JobUpdate) ClearUser() *JobUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearLogs clears all "logs" edges to the JobLog entity.
func (_u *JobUpdate) ClearLogs() *JobUpdate {
	_u.mutation.ClearLogs()
	return _u
}

// RemoveLogIDs removes the "logs" edge to JobLog entities by IDs.
func (_u *JobUpdate) RemoveLogIDs(ids ...int) *JobUpdate {
	_u.mutation.RemoveLogIDs(ids...)
	return _u
}

// RemoveLogs removes "logs" edges to JobLog entities.
func (_u *JobUpdate) RemoveLogs(v ...*JobLog) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLogIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Job entity.
func (_u *JobUpdate) ClearDependents() *JobUpdate {
	_u.mutation.ClearDependents()
	return _u
}

// RemoveDependentIDs removes the "dependents" edge to Job entities by IDs.
func (_u *JobUpdate) RemoveDependentIDs(ids ...int) *JobUpdate {
	_u.mutation.RemoveDependentIDs(ids...)
	return _u
}

// RemoveDependents removes "dependents" edges to Job entities.
func (_u *JobUpdate) RemoveDependents(v ...*Job) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDependentIDs(ids...)
}

// ClearDependsOn clears the "depends_on" edge to the Job entity.
func (_u *JobUpdate) ClearDependsOn() *JobUpdate {
	_u.mutation.ClearDependsOn()
	return _u
}

// ClearReports clears all "reports" edges to the GeneratedReport entity.
func (_u *JobUpdate) ClearReports() *JobUpdate {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to GeneratedReport entities by IDs.
func (_u *JobUpdate) RemoveReportIDs(ids ...int) *JobUpdate {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to GeneratedReport entities.
func (_u *JobUpdate) RemoveReports(v ...*GeneratedReport) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (_u *JobUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(job.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(job.FieldPayload, field.TypeJSON)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(job.FieldResult, field.TypeJSON, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(job.FieldResult, field.TypeJSON)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(job.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(job.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.InngestRunID(); ok {
		_spec.SetField(job.FieldInngestRunID, field.TypeString, value)
	}
	if _u.mutation.InngestRunIDCleared() {
		_spec.ClearField(job.FieldInngestRunID, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduledFor(); ok {
		_spec.SetField(job.FieldScheduledFor, field.TypeTime, value)
	}
	if _u.mutation.ScheduledForCleared() {
		_spec.ClearField(job.FieldScheduledFor, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeInt, value)
	}
	if value, ok := _u.mutation.MaxRetries(); ok {
		_spec.SetField(job.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxRetries(); ok {
		_spec.AddField(job.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(job.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(job.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(job.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(job.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(job.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(job.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLogsIDs(); len(nodes) > 0 && !_u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !_u.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependsOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependsOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetType sets the "type" field.
func (_u *JobUpdateOne) SetType(v string) *JobUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableType(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *JobUpdateOne) SetStatus(v job.Status) *JobUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableStatus(v *job.Status) *JobUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *JobUpdateOne) SetPayload(v map[string]interface{}) *JobUpdateOne {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *JobUpdateOne) ClearPayload() *JobUpdateOne {
	_u.mutation.ClearPayload()
	return _u
}

// SetResult sets the "result" field.
func (_u *JobUpdateOne) SetResult(v map[string]interface{}) *JobUpdateOne {
	_u.mutation.SetResult(v)
	return _u
}

// ClearResult clears the value of the "result" field.
func (_u *JobUpdateOne) ClearResult() *JobUpdateOne {
	_u.mutation.ClearResult()
	return _u
}

// SetError sets the "error" field.
func (_u *JobUpdateOne) SetError(v string) *JobUpdateOne {
	_u.mutation.SetError(v)
	return _u
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableError(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetError(*v)
	}
	return _u
}

// ClearError clears the value of the "error" field.
func (_u *JobUpdateOne) ClearError() *JobUpdateOne {
	_u.mutation.ClearError()
	return _u
}

// SetInngestRunID sets the "inngest_run_id" field.
func (_u *JobUpdateOne) SetInngestRunID(v string) *JobUpdateOne {
	_u.mutation.SetInngestRunID(v)
	return _u
}

// SetNillableInngestRunID sets the "inngest_run_id" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableInngestRunID(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetInngestRunID(*v)
	}
	return _u
}

// ClearInngestRunID clears the value of the "inngest_run_id" field.
func (_u *JobUpdateOne) ClearInngestRunID() *JobUpdateOne {
	_u.mutation.ClearInngestRunID()
	return _u
}

// SetScheduledFor sets the "scheduled_for" field.
func (_u *JobUpdateOne) SetScheduledFor(v time.Time) *JobUpdateOne {
	_u.mutation.SetScheduledFor(v)
	return _u
}

// SetNillableScheduledFor sets the "scheduled_for" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableScheduledFor(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetScheduledFor(*v)
	}
	return _u
}

// ClearScheduledFor clears the value of the "scheduled_for" field.
func (_u *JobUpdateOne) ClearScheduledFor() *JobUpdateOne {
	_u.mutation.ClearScheduledFor()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *JobUpdateOne) SetPriority(v int) *JobUpdateOne {
	_u.mutation.ResetPriority()
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillablePriority(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// AddPriority adds value to the "priority" field.
func (_u *JobUpdateOne) AddPriority(v int) *JobUpdateOne {
	_u.mutation.AddPriority(v)
	return _u
}

// SetMaxRetries sets the "max_retries" field.
func (_u *JobUpdateOne) SetMaxRetries(v int) *JobUpdateOne {
	_u.mutation.ResetMaxRetries()
	_u.mutation.SetMaxRetries(v)
	return _u
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableMaxRetries(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetMaxRetries(*v)
	}
	return _u
}

// AddMaxRetries adds value to the "max_retries" field.
func (_u *JobUpdateOne) AddMaxRetries(v int) *JobUpdateOne {
	_u.mutation.AddMaxRetries(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobUpdateOne) SetUpdatedAt(v time.Time) *JobUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStartedAt sets the "started_at" field.
func (_u *JobUpdateOne) SetStartedAt(v time.Time) *JobUpdateOne {
	_u.mutation.SetStartedAt(v)
	return _u
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableStartedAt(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetStartedAt(*v)
	}
	return _u
}

// ClearStartedAt clears the value of the "started_at" field.
func (_u *JobUpdateOne) ClearStartedAt() *JobUpdateOne {
	_u.mutation.ClearStartedAt()
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *JobUpdateOne) SetCompletedAt(v time.Time) *JobUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableCompletedAt(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *JobUpdateOne) ClearCompletedAt() *JobUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *JobUpdateOne) SetMetadata(v map[string]interface{}) *JobUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *JobUpdateOne) ClearMetadata() *JobUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *JobUpdateOne) SetUserID(id int) *JobUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *JobUpdateOne) SetNillableUserID(id *int) *JobUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *JobUpdateOne) SetUser(v *User) *JobUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddLogIDs adds the "logs" edge to the JobLog entity by IDs.
func (_u *JobUpdateOne) AddLogIDs(ids ...int) *JobUpdateOne {
	_u.mutation.AddLogIDs(ids...)
	return _u
}

// AddLogs adds the "logs" edges to the JobLog entity.
func (_u *JobUpdateOne) AddLogs(v ...*JobLog) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLogIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Job entity by IDs.
func (_u *JobUpdateOne) AddDependentIDs(ids ...int) *JobUpdateOne {
	_u.mutation.AddDependentIDs(ids...)
	return _u
}

// AddDependents adds the "dependents" edges to the Job entity.
func (_u *JobUpdateOne) AddDependents(v ...*Job) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDependentIDs(ids...)
}

// SetDependsOnID sets the "depends_on" edge to the Job entity by ID.
func (_u *JobUpdateOne) SetDependsOnID(id int) *JobUpdateOne {
	_u.mutation.SetDependsOnID(id)
	return _u
}

// SetNillableDependsOnID sets the "depends_on" edge to the Job entity by ID if the given value is not nil.
func (_u *JobUpdateOne) SetNillableDependsOnID(id *int) *JobUpdateOne {
	if id != nil {
		_u = _u.SetDependsOnID(*id)
	}
	return _u
}

// SetDependsOn sets the "depends_on" edge to the Job entity.
func (_u *JobUpdateOne) SetDependsOn(v *Job) *JobUpdateOne {
	return _u.SetDependsOnID(v.ID)
}

// AddReportIDs adds the "reports" edge to the GeneratedReport entity by IDs.
func (_u *JobUpdateOne) AddReportIDs(ids ...int) *JobUpdateOne {
	_u.mutation.AddReportIDs(ids...)
	return _u
}

// AddReports adds the "reports" edges to the GeneratedReport entity.
func (_u *JobUpdateOne) AddReports(v ...*GeneratedReport) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdateOne) Mutation() *JobMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *JobUpdateOne) ClearUser() *JobUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearLogs clears all "logs" edges to the JobLog entity.
func (_u *JobUpdateOne) ClearLogs() *JobUpdateOne {
	_u.mutation.ClearLogs()
	return _u
}

// RemoveLogIDs removes the "logs" edge to JobLog entities by IDs.
func (_u *JobUpdateOne) RemoveLogIDs(ids ...int) *JobUpdateOne {
	_u.mutation.RemoveLogIDs(ids...)
	return _u
}

// RemoveLogs removes "logs" edges to JobLog entities.
func (_u *JobUpdateOne) RemoveLogs(v ...*JobLog) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLogIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Job entity.
func (_u *JobUpdateOne) ClearDependents() *JobUpdateOne {
	_u.mutation.ClearDependents()
	return _u
}

// RemoveDependentIDs removes the "dependents" edge to Job entities by IDs.
func (_u *JobUpdateOne) RemoveDependentIDs(ids ...int) *JobUpdateOne {
	_u.mutation.RemoveDependentIDs(ids...)
	return _u
}

// RemoveDependents removes "dependents" edges to Job entities.
func (_u *JobUpdateOne) RemoveDependents(v ...*Job) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDependentIDs(ids...)
}

// ClearDependsOn clears the "depends_on" edge to the Job entity.
func (_u *JobUpdateOne) ClearDependsOn() *JobUpdateOne {
	_u.mutation.ClearDependsOn()
	return _u
}

// ClearReports clears all "reports" edges to the GeneratedReport entity.
func (_u *JobUpdateOne) ClearReports() *JobUpdateOne {
	_u.mutation.ClearReports()
	return _u
}

// RemoveReportIDs removes the "reports" edge to GeneratedReport entities by IDs.
func (_u *JobUpdateOne) RemoveReportIDs(ids ...int) *JobUpdateOne {
	_u.mutation.RemoveReportIDs(ids...)
	return _u
}

// RemoveReports removes "reports" edges to GeneratedReport entities.
func (_u *JobUpdateOne) RemoveReports(v ...*GeneratedReport) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Job entity.
func (_u *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (_u *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(job.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(job.FieldPayload, field.TypeJSON)
	}
	if value, ok := _u.mutation.Result(); ok {
		_spec.SetField(job.FieldResult, field.TypeJSON, value)
	}
	if _u.mutation.ResultCleared() {
		_spec.ClearField(job.FieldResult, field.TypeJSON)
	}
	if value, ok := _u.mutation.Error(); ok {
		_spec.SetField(job.FieldError, field.TypeString, value)
	}
	if _u.mutation.ErrorCleared() {
		_spec.ClearField(job.FieldError, field.TypeString)
	}
	if value, ok := _u.mutation.InngestRunID(); ok {
		_spec.SetField(job.FieldInngestRunID, field.TypeString, value)
	}
	if _u.mutation.InngestRunIDCleared() {
		_spec.ClearField(job.FieldInngestRunID, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduledFor(); ok {
		_spec.SetField(job.FieldScheduledFor, field.TypeTime, value)
	}
	if _u.mutation.ScheduledForCleared() {
		_spec.ClearField(job.FieldScheduledFor, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeInt, value)
	}
	if value, ok := _u.mutation.MaxRetries(); ok {
		_spec.SetField(job.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxRetries(); ok {
		_spec.AddField(job.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.StartedAt(); ok {
		_spec.SetField(job.FieldStartedAt, field.TypeTime, value)
	}
	if _u.mutation.StartedAtCleared() {
		_spec.ClearField(job.FieldStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(job.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(job.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(job.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(job.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLogsIDs(); len(nodes) > 0 && !_u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !_u.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependsOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependsOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportsIDs(); len(nodes) > 0 && !_u.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
