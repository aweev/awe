// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipreport"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PartnershipReport is the model entity for the PartnershipReport schema.
type PartnershipReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReportPeriod holds the value of the "report_period" field.
	ReportPeriod string `json:"report_period,omitempty"`
	// GeneratedAt holds the value of the "generated_at" field.
	GeneratedAt time.Time `json:"generated_at,omitempty"`
	// GeneratedBy holds the value of the "generated_by" field.
	GeneratedBy string `json:"generated_by,omitempty"`
	// ImpactMetrics holds the value of the "impact_metrics" field.
	ImpactMetrics map[string]interface{} `json:"impact_metrics,omitempty"`
	// Outcomes holds the value of the "outcomes" field.
	Outcomes []string `json:"outcomes,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback []string `json:"feedback,omitempty"`
	// ReportURL holds the value of the "report_url" field.
	ReportURL string `json:"report_url,omitempty"`
	// PresentationURL holds the value of the "presentation_url" field.
	PresentationURL string `json:"presentation_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnershipReportQuery when eager-loading is set.
	Edges               PartnershipReportEdges `json:"edges"`
	partnership_reports *int
	selectValues        sql.SelectValues
}

// PartnershipReportEdges holds the relations/edges for other nodes in the graph.
type PartnershipReportEdges struct {
	// Partnership holds the value of the partnership edge.
	Partnership *Partnership `json:"partnership,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartnershipOrErr returns the Partnership value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnershipReportEdges) PartnershipOrErr() (*Partnership, error) {
	if e.Partnership != nil {
		return e.Partnership, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: partnership.Label}
	}
	return nil, &NotLoadedError{edge: "partnership"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartnershipReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partnershipreport.FieldImpactMetrics, partnershipreport.FieldOutcomes, partnershipreport.FieldFeedback:
			values[i] = new([]byte)
		case partnershipreport.FieldID:
			values[i] = new(sql.NullInt64)
		case partnershipreport.FieldReportPeriod, partnershipreport.FieldGeneratedBy, partnershipreport.FieldReportURL, partnershipreport.FieldPresentationURL:
			values[i] = new(sql.NullString)
		case partnershipreport.FieldGeneratedAt, partnershipreport.FieldCreatedAt, partnershipreport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case partnershipreport.ForeignKeys[0]: // partnership_reports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartnershipReport fields.
func (_m *PartnershipReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partnershipreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case partnershipreport.FieldReportPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_period", values[i])
			} else if value.Valid {
				_m.ReportPeriod = value.String
			}
		case partnershipreport.FieldGeneratedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field generated_at", values[i])
			} else if value.Valid {
				_m.GeneratedAt = value.Time
			}
		case partnershipreport.FieldGeneratedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field generated_by", values[i])
			} else if value.Valid {
				_m.GeneratedBy = value.String
			}
		case partnershipreport.FieldImpactMetrics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field impact_metrics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ImpactMetrics); err != nil {
					return fmt.Errorf("unmarshal field impact_metrics: %w", err)
				}
			}
		case partnershipreport.FieldOutcomes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field outcomes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Outcomes); err != nil {
					return fmt.Errorf("unmarshal field outcomes: %w", err)
				}
			}
		case partnershipreport.FieldFeedback:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Feedback); err != nil {
					return fmt.Errorf("unmarshal field feedback: %w", err)
				}
			}
		case partnershipreport.FieldReportURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_url", values[i])
			} else if value.Valid {
				_m.ReportURL = value.String
			}
		case partnershipreport.FieldPresentationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field presentation_url", values[i])
			} else if value.Valid {
				_m.PresentationURL = value.String
			}
		case partnershipreport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case partnershipreport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case partnershipreport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field partnership_reports", value)
			} else if value.Valid {
				_m.partnership_reports = new(int)
				*_m.partnership_reports = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PartnershipReport.
// This includes values selected through modifiers, order, etc.
func (_m *PartnershipReport) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPartnership queries the "partnership" edge of the PartnershipReport entity.
func (_m *PartnershipReport) QueryPartnership() *PartnershipQuery {
	return NewPartnershipReportClient(_m.config).QueryPartnership(_m)
}

// Update returns a builder for updating this PartnershipReport.
// Note that you need to call PartnershipReport.Unwrap() before calling this method if this PartnershipReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PartnershipReport) Update() *PartnershipReportUpdateOne {
	return NewPartnershipReportClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PartnershipReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PartnershipReport) Unwrap() *PartnershipReport {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartnershipReport is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PartnershipReport) String() string {
	var builder strings.Builder
	builder.WriteString("PartnershipReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("report_period=")
	builder.WriteString(_m.ReportPeriod)
	builder.WriteString(", ")
	builder.WriteString("generated_at=")
	builder.WriteString(_m.GeneratedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("generated_by=")
	builder.WriteString(_m.GeneratedBy)
	builder.WriteString(", ")
	builder.WriteString("impact_metrics=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImpactMetrics))
	builder.WriteString(", ")
	builder.WriteString("outcomes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Outcomes))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(fmt.Sprintf("%v", _m.Feedback))
	builder.WriteString(", ")
	builder.WriteString("report_url=")
	builder.WriteString(_m.ReportURL)
	builder.WriteString(", ")
	builder.WriteString("presentation_url=")
	builder.WriteString(_m.PresentationURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PartnershipReports is a parsable slice of PartnershipReport.
type PartnershipReports []*PartnershipReport
