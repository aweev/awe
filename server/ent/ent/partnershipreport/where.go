// Code generated by ent, DO NOT EDIT.

package partnershipreport

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldID, id))
}

// ReportPeriod applies equality check predicate on the "report_period" field. It's identical to ReportPeriodEQ.
func ReportPeriod(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldReportPeriod, v))
}

// GeneratedAt applies equality check predicate on the "generated_at" field. It's identical to GeneratedAtEQ.
func GeneratedAt(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldGeneratedAt, v))
}

// GeneratedBy applies equality check predicate on the "generated_by" field. It's identical to GeneratedByEQ.
func GeneratedBy(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldGeneratedBy, v))
}

// ReportURL applies equality check predicate on the "report_url" field. It's identical to ReportURLEQ.
func ReportURL(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldReportURL, v))
}

// PresentationURL applies equality check predicate on the "presentation_url" field. It's identical to PresentationURLEQ.
func PresentationURL(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldPresentationURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReportPeriodEQ applies the EQ predicate on the "report_period" field.
func ReportPeriodEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldReportPeriod, v))
}

// ReportPeriodNEQ applies the NEQ predicate on the "report_period" field.
func ReportPeriodNEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldReportPeriod, v))
}

// ReportPeriodIn applies the In predicate on the "report_period" field.
func ReportPeriodIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldReportPeriod, vs...))
}

// ReportPeriodNotIn applies the NotIn predicate on the "report_period" field.
func ReportPeriodNotIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldReportPeriod, vs...))
}

// ReportPeriodGT applies the GT predicate on the "report_period" field.
func ReportPeriodGT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldReportPeriod, v))
}

// ReportPeriodGTE applies the GTE predicate on the "report_period" field.
func ReportPeriodGTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldReportPeriod, v))
}

// ReportPeriodLT applies the LT predicate on the "report_period" field.
func ReportPeriodLT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldReportPeriod, v))
}

// ReportPeriodLTE applies the LTE predicate on the "report_period" field.
func ReportPeriodLTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldReportPeriod, v))
}

// ReportPeriodContains applies the Contains predicate on the "report_period" field.
func ReportPeriodContains(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContains(FieldReportPeriod, v))
}

// ReportPeriodHasPrefix applies the HasPrefix predicate on the "report_period" field.
func ReportPeriodHasPrefix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasPrefix(FieldReportPeriod, v))
}

// ReportPeriodHasSuffix applies the HasSuffix predicate on the "report_period" field.
func ReportPeriodHasSuffix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasSuffix(FieldReportPeriod, v))
}

// ReportPeriodEqualFold applies the EqualFold predicate on the "report_period" field.
func ReportPeriodEqualFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEqualFold(FieldReportPeriod, v))
}

// ReportPeriodContainsFold applies the ContainsFold predicate on the "report_period" field.
func ReportPeriodContainsFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContainsFold(FieldReportPeriod, v))
}

// GeneratedAtEQ applies the EQ predicate on the "generated_at" field.
func GeneratedAtEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldGeneratedAt, v))
}

// GeneratedAtNEQ applies the NEQ predicate on the "generated_at" field.
func GeneratedAtNEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldGeneratedAt, v))
}

// GeneratedAtIn applies the In predicate on the "generated_at" field.
func GeneratedAtIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldGeneratedAt, vs...))
}

// GeneratedAtNotIn applies the NotIn predicate on the "generated_at" field.
func GeneratedAtNotIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldGeneratedAt, vs...))
}

// GeneratedAtGT applies the GT predicate on the "generated_at" field.
func GeneratedAtGT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldGeneratedAt, v))
}

// GeneratedAtGTE applies the GTE predicate on the "generated_at" field.
func GeneratedAtGTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldGeneratedAt, v))
}

// GeneratedAtLT applies the LT predicate on the "generated_at" field.
func GeneratedAtLT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldGeneratedAt, v))
}

// GeneratedAtLTE applies the LTE predicate on the "generated_at" field.
func GeneratedAtLTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldGeneratedAt, v))
}

// GeneratedByEQ applies the EQ predicate on the "generated_by" field.
func GeneratedByEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldGeneratedBy, v))
}

// GeneratedByNEQ applies the NEQ predicate on the "generated_by" field.
func GeneratedByNEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldGeneratedBy, v))
}

// GeneratedByIn applies the In predicate on the "generated_by" field.
func GeneratedByIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldGeneratedBy, vs...))
}

// GeneratedByNotIn applies the NotIn predicate on the "generated_by" field.
func GeneratedByNotIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldGeneratedBy, vs...))
}

// GeneratedByGT applies the GT predicate on the "generated_by" field.
func GeneratedByGT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldGeneratedBy, v))
}

// GeneratedByGTE applies the GTE predicate on the "generated_by" field.
func GeneratedByGTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldGeneratedBy, v))
}

// GeneratedByLT applies the LT predicate on the "generated_by" field.
func GeneratedByLT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldGeneratedBy, v))
}

// GeneratedByLTE applies the LTE predicate on the "generated_by" field.
func GeneratedByLTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldGeneratedBy, v))
}

// GeneratedByContains applies the Contains predicate on the "generated_by" field.
func GeneratedByContains(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContains(FieldGeneratedBy, v))
}

// GeneratedByHasPrefix applies the HasPrefix predicate on the "generated_by" field.
func GeneratedByHasPrefix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasPrefix(FieldGeneratedBy, v))
}

// GeneratedByHasSuffix applies the HasSuffix predicate on the "generated_by" field.
func GeneratedByHasSuffix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasSuffix(FieldGeneratedBy, v))
}

// GeneratedByIsNil applies the IsNil predicate on the "generated_by" field.
func GeneratedByIsNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIsNull(FieldGeneratedBy))
}

// GeneratedByNotNil applies the NotNil predicate on the "generated_by" field.
func GeneratedByNotNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotNull(FieldGeneratedBy))
}

// GeneratedByEqualFold applies the EqualFold predicate on the "generated_by" field.
func GeneratedByEqualFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEqualFold(FieldGeneratedBy, v))
}

// GeneratedByContainsFold applies the ContainsFold predicate on the "generated_by" field.
func GeneratedByContainsFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContainsFold(FieldGeneratedBy, v))
}

// ReportURLEQ applies the EQ predicate on the "report_url" field.
func ReportURLEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldReportURL, v))
}

// ReportURLNEQ applies the NEQ predicate on the "report_url" field.
func ReportURLNEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldReportURL, v))
}

// ReportURLIn applies the In predicate on the "report_url" field.
func ReportURLIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldReportURL, vs...))
}

// ReportURLNotIn applies the NotIn predicate on the "report_url" field.
func ReportURLNotIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldReportURL, vs...))
}

// ReportURLGT applies the GT predicate on the "report_url" field.
func ReportURLGT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldReportURL, v))
}

// ReportURLGTE applies the GTE predicate on the "report_url" field.
func ReportURLGTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldReportURL, v))
}

// ReportURLLT applies the LT predicate on the "report_url" field.
func ReportURLLT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldReportURL, v))
}

// ReportURLLTE applies the LTE predicate on the "report_url" field.
func ReportURLLTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldReportURL, v))
}

// ReportURLContains applies the Contains predicate on the "report_url" field.
func ReportURLContains(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContains(FieldReportURL, v))
}

// ReportURLHasPrefix applies the HasPrefix predicate on the "report_url" field.
func ReportURLHasPrefix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasPrefix(FieldReportURL, v))
}

// ReportURLHasSuffix applies the HasSuffix predicate on the "report_url" field.
func ReportURLHasSuffix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasSuffix(FieldReportURL, v))
}

// ReportURLIsNil applies the IsNil predicate on the "report_url" field.
func ReportURLIsNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIsNull(FieldReportURL))
}

// ReportURLNotNil applies the NotNil predicate on the "report_url" field.
func ReportURLNotNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotNull(FieldReportURL))
}

// ReportURLEqualFold applies the EqualFold predicate on the "report_url" field.
func ReportURLEqualFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEqualFold(FieldReportURL, v))
}

// ReportURLContainsFold applies the ContainsFold predicate on the "report_url" field.
func ReportURLContainsFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContainsFold(FieldReportURL, v))
}

// PresentationURLEQ applies the EQ predicate on the "presentation_url" field.
func PresentationURLEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldPresentationURL, v))
}

// PresentationURLNEQ applies the NEQ predicate on the "presentation_url" field.
func PresentationURLNEQ(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldPresentationURL, v))
}

// PresentationURLIn applies the In predicate on the "presentation_url" field.
func PresentationURLIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldPresentationURL, vs...))
}

// PresentationURLNotIn applies the NotIn predicate on the "presentation_url" field.
func PresentationURLNotIn(vs ...string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldPresentationURL, vs...))
}

// PresentationURLGT applies the GT predicate on the "presentation_url" field.
func PresentationURLGT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldPresentationURL, v))
}

// PresentationURLGTE applies the GTE predicate on the "presentation_url" field.
func PresentationURLGTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldPresentationURL, v))
}

// PresentationURLLT applies the LT predicate on the "presentation_url" field.
func PresentationURLLT(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldPresentationURL, v))
}

// PresentationURLLTE applies the LTE predicate on the "presentation_url" field.
func PresentationURLLTE(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldPresentationURL, v))
}

// PresentationURLContains applies the Contains predicate on the "presentation_url" field.
func PresentationURLContains(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContains(FieldPresentationURL, v))
}

// PresentationURLHasPrefix applies the HasPrefix predicate on the "presentation_url" field.
func PresentationURLHasPrefix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasPrefix(FieldPresentationURL, v))
}

// PresentationURLHasSuffix applies the HasSuffix predicate on the "presentation_url" field.
func PresentationURLHasSuffix(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldHasSuffix(FieldPresentationURL, v))
}

// PresentationURLIsNil applies the IsNil predicate on the "presentation_url" field.
func PresentationURLIsNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIsNull(FieldPresentationURL))
}

// PresentationURLNotNil applies the NotNil predicate on the "presentation_url" field.
func PresentationURLNotNil() predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotNull(FieldPresentationURL))
}

// PresentationURLEqualFold applies the EqualFold predicate on the "presentation_url" field.
func PresentationURLEqualFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEqualFold(FieldPresentationURL, v))
}

// PresentationURLContainsFold applies the ContainsFold predicate on the "presentation_url" field.
func PresentationURLContainsFold(v string) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldContainsFold(FieldPresentationURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPartnership applies the HasEdge predicate on the "partnership" edge.
func HasPartnership() predicate.PartnershipReport {
	return predicate.PartnershipReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnershipWith applies the HasEdge predicate on the "partnership" edge with a given conditions (other predicates).
func HasPartnershipWith(preds ...predicate.Partnership) predicate.PartnershipReport {
	return predicate.PartnershipReport(func(s *sql.Selector) {
		step := newPartnershipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PartnershipReport) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PartnershipReport) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PartnershipReport) predicate.PartnershipReport {
	return predicate.PartnershipReport(sql.NotPredicates(p))
}
