// Code generated by ent, DO NOT EDIT.

package partnershipreport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the partnershipreport type in the database.
	Label = "partnership_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReportPeriod holds the string denoting the report_period field in the database.
	FieldReportPeriod = "report_period"
	// FieldGeneratedAt holds the string denoting the generated_at field in the database.
	FieldGeneratedAt = "generated_at"
	// FieldGeneratedBy holds the string denoting the generated_by field in the database.
	FieldGeneratedBy = "generated_by"
	// FieldImpactMetrics holds the string denoting the impact_metrics field in the database.
	FieldImpactMetrics = "impact_metrics"
	// FieldOutcomes holds the string denoting the outcomes field in the database.
	FieldOutcomes = "outcomes"
	// FieldFeedback holds the string denoting the feedback field in the database.
	FieldFeedback = "feedback"
	// FieldReportURL holds the string denoting the report_url field in the database.
	FieldReportURL = "report_url"
	// FieldPresentationURL holds the string denoting the presentation_url field in the database.
	FieldPresentationURL = "presentation_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePartnership holds the string denoting the partnership edge name in mutations.
	EdgePartnership = "partnership"
	// Table holds the table name of the partnershipreport in the database.
	Table = "partnership_reports"
	// PartnershipTable is the table that holds the partnership relation/edge.
	PartnershipTable = "partnership_reports"
	// PartnershipInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipInverseTable = "partnerships"
	// PartnershipColumn is the table column denoting the partnership relation/edge.
	PartnershipColumn = "partnership_reports"
)

// Columns holds all SQL columns for partnershipreport fields.
var Columns = []string{
	FieldID,
	FieldReportPeriod,
	FieldGeneratedAt,
	FieldGeneratedBy,
	FieldImpactMetrics,
	FieldOutcomes,
	FieldFeedback,
	FieldReportURL,
	FieldPresentationURL,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "partnership_reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partnership_reports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGeneratedAt holds the default value on creation for the "generated_at" field.
	DefaultGeneratedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PartnershipReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReportPeriod orders the results by the report_period field.
func ByReportPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportPeriod, opts...).ToFunc()
}

// ByGeneratedAt orders the results by the generated_at field.
func ByGeneratedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedAt, opts...).ToFunc()
}

// ByGeneratedBy orders the results by the generated_by field.
func ByGeneratedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedBy, opts...).ToFunc()
}

// ByReportURL orders the results by the report_url field.
func ByReportURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportURL, opts...).ToFunc()
}

// ByPresentationURL orders the results by the presentation_url field.
func ByPresentationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentationURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartnershipField orders the results by partnership field.
func ByPartnershipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipStep(), sql.OrderByField(field, opts...))
	}
}
func newPartnershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
	)
}
