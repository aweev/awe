// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockhero"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlockHeroUpdate is the builder for updating BlockHero entities.
type BlockHeroUpdate struct {
	config
	hooks    []Hook
	mutation *BlockHeroMutation
}

// Where appends a list predicates to the BlockHeroUpdate builder.
func (_u *BlockHeroUpdate) Where(ps ...predicate.BlockHero) *BlockHeroUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockHeroUpdate) SetInternalName(v string) *BlockHeroUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableInternalName(v *string) *BlockHeroUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockHeroUpdate) SetTitle(v map[string]string) *BlockHeroUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetSubtitle sets the "subtitle" field.
func (_u *BlockHeroUpdate) SetSubtitle(v map[string]string) *BlockHeroUpdate {
	_u.mutation.SetSubtitle(v)
	return _u
}

// ClearSubtitle clears the value of the "subtitle" field.
func (_u *BlockHeroUpdate) ClearSubtitle() *BlockHeroUpdate {
	_u.mutation.ClearSubtitle()
	return _u
}

// SetCtaButtons sets the "cta_buttons" field.
func (_u *BlockHeroUpdate) SetCtaButtons(v []map[string]interface{}) *BlockHeroUpdate {
	_u.mutation.SetCtaButtons(v)
	return _u
}

// AppendCtaButtons appends value to the "cta_buttons" field.
func (_u *BlockHeroUpdate) AppendCtaButtons(v []map[string]interface{}) *BlockHeroUpdate {
	_u.mutation.AppendCtaButtons(v)
	return _u
}

// ClearCtaButtons clears the value of the "cta_buttons" field.
func (_u *BlockHeroUpdate) ClearCtaButtons() *BlockHeroUpdate {
	_u.mutation.ClearCtaButtons()
	return _u
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (_u *BlockHeroUpdate) SetBackgroundImageURL(v string) *BlockHeroUpdate {
	_u.mutation.SetBackgroundImageURL(v)
	return _u
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableBackgroundImageURL(v *string) *BlockHeroUpdate {
	if v != nil {
		_u.SetBackgroundImageURL(*v)
	}
	return _u
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (_u *BlockHeroUpdate) ClearBackgroundImageURL() *BlockHeroUpdate {
	_u.mutation.ClearBackgroundImageURL()
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockHeroUpdate) SetBadge(v map[string]string) *BlockHeroUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockHeroUpdate) ClearBadge() *BlockHeroUpdate {
	_u.mutation.ClearBadge()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockHeroUpdate) SetDescription(v map[string]string) *BlockHeroUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockHeroUpdate) ClearDescription() *BlockHeroUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockHeroUpdate) SetTextAlign(v blockhero.TextAlign) *BlockHeroUpdate {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableTextAlign(v *blockhero.TextAlign) *BlockHeroUpdate {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockHeroUpdate) SetColorScheme(v blockhero.ColorScheme) *BlockHeroUpdate {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableColorScheme(v *blockhero.ColorScheme) *BlockHeroUpdate {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetMinHeight sets the "min_height" field.
func (_u *BlockHeroUpdate) SetMinHeight(v string) *BlockHeroUpdate {
	_u.mutation.SetMinHeight(v)
	return _u
}

// SetNillableMinHeight sets the "min_height" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableMinHeight(v *string) *BlockHeroUpdate {
	if v != nil {
		_u.SetMinHeight(*v)
	}
	return _u
}

// ClearMinHeight clears the value of the "min_height" field.
func (_u *BlockHeroUpdate) ClearMinHeight() *BlockHeroUpdate {
	_u.mutation.ClearMinHeight()
	return _u
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (_u *BlockHeroUpdate) SetBackgroundVideoURL(v string) *BlockHeroUpdate {
	_u.mutation.SetBackgroundVideoURL(v)
	return _u
}

// SetNillableBackgroundVideoURL sets the "background_video_url" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableBackgroundVideoURL(v *string) *BlockHeroUpdate {
	if v != nil {
		_u.SetBackgroundVideoURL(*v)
	}
	return _u
}

// ClearBackgroundVideoURL clears the value of the "background_video_url" field.
func (_u *BlockHeroUpdate) ClearBackgroundVideoURL() *BlockHeroUpdate {
	_u.mutation.ClearBackgroundVideoURL()
	return _u
}

// SetOverlayColor sets the "overlay_color" field.
func (_u *BlockHeroUpdate) SetOverlayColor(v string) *BlockHeroUpdate {
	_u.mutation.SetOverlayColor(v)
	return _u
}

// SetNillableOverlayColor sets the "overlay_color" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableOverlayColor(v *string) *BlockHeroUpdate {
	if v != nil {
		_u.SetOverlayColor(*v)
	}
	return _u
}

// ClearOverlayColor clears the value of the "overlay_color" field.
func (_u *BlockHeroUpdate) ClearOverlayColor() *BlockHeroUpdate {
	_u.mutation.ClearOverlayColor()
	return _u
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (_u *BlockHeroUpdate) SetOverlayOpacity(v float64) *BlockHeroUpdate {
	_u.mutation.ResetOverlayOpacity()
	_u.mutation.SetOverlayOpacity(v)
	return _u
}

// SetNillableOverlayOpacity sets the "overlay_opacity" field if the given value is not nil.
func (_u *BlockHeroUpdate) SetNillableOverlayOpacity(v *float64) *BlockHeroUpdate {
	if v != nil {
		_u.SetOverlayOpacity(*v)
	}
	return _u
}

// AddOverlayOpacity adds value to the "overlay_opacity" field.
func (_u *BlockHeroUpdate) AddOverlayOpacity(v float64) *BlockHeroUpdate {
	_u.mutation.AddOverlayOpacity(v)
	return _u
}

// ClearOverlayOpacity clears the value of the "overlay_opacity" field.
func (_u *BlockHeroUpdate) ClearOverlayOpacity() *BlockHeroUpdate {
	_u.mutation.ClearOverlayOpacity()
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockHeroUpdate) SetContentBlockID(id int) *BlockHeroUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockHeroUpdate) SetContentBlock(v *ContentBlock) *BlockHeroUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockHeroMutation object of the builder.
func (_u *BlockHeroUpdate) Mutation() *BlockHeroMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockHeroUpdate) ClearContentBlock() *BlockHeroUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockHeroUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockHeroUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockHeroUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockHeroUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockHeroUpdate) check() error {
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blockhero.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockHero.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockhero.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockHero.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockHero.content_block"`)
	}
	return nil
}

func (_u *BlockHeroUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockhero.Table, blockhero.Columns, sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockhero.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockhero.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Subtitle(); ok {
		_spec.SetField(blockhero.FieldSubtitle, field.TypeJSON, value)
	}
	if _u.mutation.SubtitleCleared() {
		_spec.ClearField(blockhero.FieldSubtitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.CtaButtons(); ok {
		_spec.SetField(blockhero.FieldCtaButtons, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCtaButtons(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockhero.FieldCtaButtons, value)
		})
	}
	if _u.mutation.CtaButtonsCleared() {
		_spec.ClearField(blockhero.FieldCtaButtons, field.TypeJSON)
	}
	if value, ok := _u.mutation.BackgroundImageURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundImageURL, field.TypeString, value)
	}
	if _u.mutation.BackgroundImageURLCleared() {
		_spec.ClearField(blockhero.FieldBackgroundImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockhero.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockhero.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockhero.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockhero.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blockhero.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockhero.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.MinHeight(); ok {
		_spec.SetField(blockhero.FieldMinHeight, field.TypeString, value)
	}
	if _u.mutation.MinHeightCleared() {
		_spec.ClearField(blockhero.FieldMinHeight, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundVideoURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundVideoURL, field.TypeString, value)
	}
	if _u.mutation.BackgroundVideoURLCleared() {
		_spec.ClearField(blockhero.FieldBackgroundVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.OverlayColor(); ok {
		_spec.SetField(blockhero.FieldOverlayColor, field.TypeString, value)
	}
	if _u.mutation.OverlayColorCleared() {
		_spec.ClearField(blockhero.FieldOverlayColor, field.TypeString)
	}
	if value, ok := _u.mutation.OverlayOpacity(); ok {
		_spec.SetField(blockhero.FieldOverlayOpacity, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedOverlayOpacity(); ok {
		_spec.AddField(blockhero.FieldOverlayOpacity, field.TypeFloat64, value)
	}
	if _u.mutation.OverlayOpacityCleared() {
		_spec.ClearField(blockhero.FieldOverlayOpacity, field.TypeFloat64)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockhero.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockHeroUpdateOne is the builder for updating a single BlockHero entity.
type BlockHeroUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockHeroMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockHeroUpdateOne) SetInternalName(v string) *BlockHeroUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableInternalName(v *string) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockHeroUpdateOne) SetTitle(v map[string]string) *BlockHeroUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetSubtitle sets the "subtitle" field.
func (_u *BlockHeroUpdateOne) SetSubtitle(v map[string]string) *BlockHeroUpdateOne {
	_u.mutation.SetSubtitle(v)
	return _u
}

// ClearSubtitle clears the value of the "subtitle" field.
func (_u *BlockHeroUpdateOne) ClearSubtitle() *BlockHeroUpdateOne {
	_u.mutation.ClearSubtitle()
	return _u
}

// SetCtaButtons sets the "cta_buttons" field.
func (_u *BlockHeroUpdateOne) SetCtaButtons(v []map[string]interface{}) *BlockHeroUpdateOne {
	_u.mutation.SetCtaButtons(v)
	return _u
}

// AppendCtaButtons appends value to the "cta_buttons" field.
func (_u *BlockHeroUpdateOne) AppendCtaButtons(v []map[string]interface{}) *BlockHeroUpdateOne {
	_u.mutation.AppendCtaButtons(v)
	return _u
}

// ClearCtaButtons clears the value of the "cta_buttons" field.
func (_u *BlockHeroUpdateOne) ClearCtaButtons() *BlockHeroUpdateOne {
	_u.mutation.ClearCtaButtons()
	return _u
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (_u *BlockHeroUpdateOne) SetBackgroundImageURL(v string) *BlockHeroUpdateOne {
	_u.mutation.SetBackgroundImageURL(v)
	return _u
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableBackgroundImageURL(v *string) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetBackgroundImageURL(*v)
	}
	return _u
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (_u *BlockHeroUpdateOne) ClearBackgroundImageURL() *BlockHeroUpdateOne {
	_u.mutation.ClearBackgroundImageURL()
	return _u
}

// SetBadge sets the "badge" field.
func (_u *BlockHeroUpdateOne) SetBadge(v map[string]string) *BlockHeroUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// ClearBadge clears the value of the "badge" field.
func (_u *BlockHeroUpdateOne) ClearBadge() *BlockHeroUpdateOne {
	_u.mutation.ClearBadge()
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockHeroUpdateOne) SetDescription(v map[string]string) *BlockHeroUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockHeroUpdateOne) ClearDescription() *BlockHeroUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTextAlign sets the "text_align" field.
func (_u *BlockHeroUpdateOne) SetTextAlign(v blockhero.TextAlign) *BlockHeroUpdateOne {
	_u.mutation.SetTextAlign(v)
	return _u
}

// SetNillableTextAlign sets the "text_align" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableTextAlign(v *blockhero.TextAlign) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetTextAlign(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockHeroUpdateOne) SetColorScheme(v blockhero.ColorScheme) *BlockHeroUpdateOne {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableColorScheme(v *blockhero.ColorScheme) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetMinHeight sets the "min_height" field.
func (_u *BlockHeroUpdateOne) SetMinHeight(v string) *BlockHeroUpdateOne {
	_u.mutation.SetMinHeight(v)
	return _u
}

// SetNillableMinHeight sets the "min_height" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableMinHeight(v *string) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetMinHeight(*v)
	}
	return _u
}

// ClearMinHeight clears the value of the "min_height" field.
func (_u *BlockHeroUpdateOne) ClearMinHeight() *BlockHeroUpdateOne {
	_u.mutation.ClearMinHeight()
	return _u
}

// SetBackgroundVideoURL sets the "background_video_url" field.
func (_u *BlockHeroUpdateOne) SetBackgroundVideoURL(v string) *BlockHeroUpdateOne {
	_u.mutation.SetBackgroundVideoURL(v)
	return _u
}

// SetNillableBackgroundVideoURL sets the "background_video_url" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableBackgroundVideoURL(v *string) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetBackgroundVideoURL(*v)
	}
	return _u
}

// ClearBackgroundVideoURL clears the value of the "background_video_url" field.
func (_u *BlockHeroUpdateOne) ClearBackgroundVideoURL() *BlockHeroUpdateOne {
	_u.mutation.ClearBackgroundVideoURL()
	return _u
}

// SetOverlayColor sets the "overlay_color" field.
func (_u *BlockHeroUpdateOne) SetOverlayColor(v string) *BlockHeroUpdateOne {
	_u.mutation.SetOverlayColor(v)
	return _u
}

// SetNillableOverlayColor sets the "overlay_color" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableOverlayColor(v *string) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetOverlayColor(*v)
	}
	return _u
}

// ClearOverlayColor clears the value of the "overlay_color" field.
func (_u *BlockHeroUpdateOne) ClearOverlayColor() *BlockHeroUpdateOne {
	_u.mutation.ClearOverlayColor()
	return _u
}

// SetOverlayOpacity sets the "overlay_opacity" field.
func (_u *BlockHeroUpdateOne) SetOverlayOpacity(v float64) *BlockHeroUpdateOne {
	_u.mutation.ResetOverlayOpacity()
	_u.mutation.SetOverlayOpacity(v)
	return _u
}

// SetNillableOverlayOpacity sets the "overlay_opacity" field if the given value is not nil.
func (_u *BlockHeroUpdateOne) SetNillableOverlayOpacity(v *float64) *BlockHeroUpdateOne {
	if v != nil {
		_u.SetOverlayOpacity(*v)
	}
	return _u
}

// AddOverlayOpacity adds value to the "overlay_opacity" field.
func (_u *BlockHeroUpdateOne) AddOverlayOpacity(v float64) *BlockHeroUpdateOne {
	_u.mutation.AddOverlayOpacity(v)
	return _u
}

// ClearOverlayOpacity clears the value of the "overlay_opacity" field.
func (_u *BlockHeroUpdateOne) ClearOverlayOpacity() *BlockHeroUpdateOne {
	_u.mutation.ClearOverlayOpacity()
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockHeroUpdateOne) SetContentBlockID(id int) *BlockHeroUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockHeroUpdateOne) SetContentBlock(v *ContentBlock) *BlockHeroUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockHeroMutation object of the builder.
func (_u *BlockHeroUpdateOne) Mutation() *BlockHeroMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockHeroUpdateOne) ClearContentBlock() *BlockHeroUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockHeroUpdate builder.
func (_u *BlockHeroUpdateOne) Where(ps ...predicate.BlockHero) *BlockHeroUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockHeroUpdateOne) Select(field string, fields ...string) *BlockHeroUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockHero entity.
func (_u *BlockHeroUpdateOne) Save(ctx context.Context) (*BlockHero, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockHeroUpdateOne) SaveX(ctx context.Context) *BlockHero {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockHeroUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockHeroUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockHeroUpdateOne) check() error {
	if v, ok := _u.mutation.TextAlign(); ok {
		if err := blockhero.TextAlignValidator(v); err != nil {
			return &ValidationError{Name: "text_align", err: fmt.Errorf(`ent: validator failed for field "BlockHero.text_align": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blockhero.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockHero.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockHero.content_block"`)
	}
	return nil
}

func (_u *BlockHeroUpdateOne) sqlSave(ctx context.Context) (_node *BlockHero, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockhero.Table, blockhero.Columns, sqlgraph.NewFieldSpec(blockhero.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockHero.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockhero.FieldID)
		for _, f := range fields {
			if !blockhero.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockhero.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blockhero.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blockhero.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Subtitle(); ok {
		_spec.SetField(blockhero.FieldSubtitle, field.TypeJSON, value)
	}
	if _u.mutation.SubtitleCleared() {
		_spec.ClearField(blockhero.FieldSubtitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.CtaButtons(); ok {
		_spec.SetField(blockhero.FieldCtaButtons, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCtaButtons(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blockhero.FieldCtaButtons, value)
		})
	}
	if _u.mutation.CtaButtonsCleared() {
		_spec.ClearField(blockhero.FieldCtaButtons, field.TypeJSON)
	}
	if value, ok := _u.mutation.BackgroundImageURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundImageURL, field.TypeString, value)
	}
	if _u.mutation.BackgroundImageURLCleared() {
		_spec.ClearField(blockhero.FieldBackgroundImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(blockhero.FieldBadge, field.TypeJSON, value)
	}
	if _u.mutation.BadgeCleared() {
		_spec.ClearField(blockhero.FieldBadge, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blockhero.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blockhero.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.TextAlign(); ok {
		_spec.SetField(blockhero.FieldTextAlign, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blockhero.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.MinHeight(); ok {
		_spec.SetField(blockhero.FieldMinHeight, field.TypeString, value)
	}
	if _u.mutation.MinHeightCleared() {
		_spec.ClearField(blockhero.FieldMinHeight, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundVideoURL(); ok {
		_spec.SetField(blockhero.FieldBackgroundVideoURL, field.TypeString, value)
	}
	if _u.mutation.BackgroundVideoURLCleared() {
		_spec.ClearField(blockhero.FieldBackgroundVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.OverlayColor(); ok {
		_spec.SetField(blockhero.FieldOverlayColor, field.TypeString, value)
	}
	if _u.mutation.OverlayColorCleared() {
		_spec.ClearField(blockhero.FieldOverlayColor, field.TypeString)
	}
	if value, ok := _u.mutation.OverlayOpacity(); ok {
		_spec.SetField(blockhero.FieldOverlayOpacity, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedOverlayOpacity(); ok {
		_spec.AddField(blockhero.FieldOverlayOpacity, field.TypeFloat64, value)
	}
	if _u.mutation.OverlayOpacityCleared() {
		_spec.ClearField(blockhero.FieldOverlayOpacity, field.TypeFloat64)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockHero{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockhero.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
