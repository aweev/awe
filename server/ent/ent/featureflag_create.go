// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/featureflag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeatureFlagCreate is the builder for creating a FeatureFlag entity.
type FeatureFlagCreate struct {
	config
	mutation *FeatureFlagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (_c *FeatureFlagCreate) SetDescription(v string) *FeatureFlagCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *FeatureFlagCreate) SetNillableDescription(v *string) *FeatureFlagCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *FeatureFlagCreate) SetIsActive(v bool) *FeatureFlagCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *FeatureFlagCreate) SetNillableIsActive(v *bool) *FeatureFlagCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (_c *FeatureFlagCreate) SetRolloutPercentage(v int) *FeatureFlagCreate {
	_c.mutation.SetRolloutPercentage(v)
	return _c
}

// SetNillableRolloutPercentage sets the "rollout_percentage" field if the given value is not nil.
func (_c *FeatureFlagCreate) SetNillableRolloutPercentage(v *int) *FeatureFlagCreate {
	if v != nil {
		_c.SetRolloutPercentage(*v)
	}
	return _c
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (_c *FeatureFlagCreate) SetAllowedUserIds(v []string) *FeatureFlagCreate {
	_c.mutation.SetAllowedUserIds(v)
	return _c
}

// SetAllowedRoles sets the "allowed_roles" field.
func (_c *FeatureFlagCreate) SetAllowedRoles(v []string) *FeatureFlagCreate {
	_c.mutation.SetAllowedRoles(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *FeatureFlagCreate) SetCreatedAt(v time.Time) *FeatureFlagCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *FeatureFlagCreate) SetNillableCreatedAt(v *time.Time) *FeatureFlagCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *FeatureFlagCreate) SetUpdatedAt(v time.Time) *FeatureFlagCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *FeatureFlagCreate) SetNillableUpdatedAt(v *time.Time) *FeatureFlagCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *FeatureFlagCreate) SetID(v string) *FeatureFlagCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the FeatureFlagMutation object of the builder.
func (_c *FeatureFlagCreate) Mutation() *FeatureFlagMutation {
	return _c.mutation
}

// Save creates the FeatureFlag in the database.
func (_c *FeatureFlagCreate) Save(ctx context.Context) (*FeatureFlag, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FeatureFlagCreate) SaveX(ctx context.Context) *FeatureFlag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FeatureFlagCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FeatureFlagCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FeatureFlagCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := featureflag.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.RolloutPercentage(); !ok {
		v := featureflag.DefaultRolloutPercentage
		_c.mutation.SetRolloutPercentage(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := featureflag.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := featureflag.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FeatureFlagCreate) check() error {
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "FeatureFlag.is_active"`)}
	}
	if _, ok := _c.mutation.RolloutPercentage(); !ok {
		return &ValidationError{Name: "rollout_percentage", err: errors.New(`ent: missing required field "FeatureFlag.rollout_percentage"`)}
	}
	if v, ok := _c.mutation.RolloutPercentage(); ok {
		if err := featureflag.RolloutPercentageValidator(v); err != nil {
			return &ValidationError{Name: "rollout_percentage", err: fmt.Errorf(`ent: validator failed for field "FeatureFlag.rollout_percentage": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AllowedUserIds(); !ok {
		return &ValidationError{Name: "allowed_user_ids", err: errors.New(`ent: missing required field "FeatureFlag.allowed_user_ids"`)}
	}
	if _, ok := _c.mutation.AllowedRoles(); !ok {
		return &ValidationError{Name: "allowed_roles", err: errors.New(`ent: missing required field "FeatureFlag.allowed_roles"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeatureFlag.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeatureFlag.updated_at"`)}
	}
	return nil
}

func (_c *FeatureFlagCreate) sqlSave(ctx context.Context) (*FeatureFlag, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FeatureFlag.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FeatureFlagCreate) createSpec() (*FeatureFlag, *sqlgraph.CreateSpec) {
	var (
		_node = &FeatureFlag{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(featureflag.Table, sqlgraph.NewFieldSpec(featureflag.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(featureflag.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(featureflag.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.RolloutPercentage(); ok {
		_spec.SetField(featureflag.FieldRolloutPercentage, field.TypeInt, value)
		_node.RolloutPercentage = value
	}
	if value, ok := _c.mutation.AllowedUserIds(); ok {
		_spec.SetField(featureflag.FieldAllowedUserIds, field.TypeJSON, value)
		_node.AllowedUserIds = value
	}
	if value, ok := _c.mutation.AllowedRoles(); ok {
		_spec.SetField(featureflag.FieldAllowedRoles, field.TypeJSON, value)
		_node.AllowedRoles = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(featureflag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(featureflag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeatureFlag.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeatureFlagUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (_c *FeatureFlagCreate) OnConflict(opts ...sql.ConflictOption) *FeatureFlagUpsertOne {
	_c.conflict = opts
	return &FeatureFlagUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FeatureFlagCreate) OnConflictColumns(columns ...string) *FeatureFlagUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FeatureFlagUpsertOne{
		create: _c,
	}
}

type (
	// FeatureFlagUpsertOne is the builder for "upsert"-ing
	//  one FeatureFlag node.
	FeatureFlagUpsertOne struct {
		create *FeatureFlagCreate
	}

	// FeatureFlagUpsert is the "OnConflict" setter.
	FeatureFlagUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *FeatureFlagUpsert) SetDescription(v string) *FeatureFlagUpsert {
	u.Set(featureflag.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateDescription() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *FeatureFlagUpsert) ClearDescription() *FeatureFlagUpsert {
	u.SetNull(featureflag.FieldDescription)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *FeatureFlagUpsert) SetIsActive(v bool) *FeatureFlagUpsert {
	u.Set(featureflag.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateIsActive() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldIsActive)
	return u
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (u *FeatureFlagUpsert) SetRolloutPercentage(v int) *FeatureFlagUpsert {
	u.Set(featureflag.FieldRolloutPercentage, v)
	return u
}

// UpdateRolloutPercentage sets the "rollout_percentage" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateRolloutPercentage() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldRolloutPercentage)
	return u
}

// AddRolloutPercentage adds v to the "rollout_percentage" field.
func (u *FeatureFlagUpsert) AddRolloutPercentage(v int) *FeatureFlagUpsert {
	u.Add(featureflag.FieldRolloutPercentage, v)
	return u
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (u *FeatureFlagUpsert) SetAllowedUserIds(v []string) *FeatureFlagUpsert {
	u.Set(featureflag.FieldAllowedUserIds, v)
	return u
}

// UpdateAllowedUserIds sets the "allowed_user_ids" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateAllowedUserIds() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldAllowedUserIds)
	return u
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *FeatureFlagUpsert) SetAllowedRoles(v []string) *FeatureFlagUpsert {
	u.Set(featureflag.FieldAllowedRoles, v)
	return u
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateAllowedRoles() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldAllowedRoles)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeatureFlagUpsert) SetUpdatedAt(v time.Time) *FeatureFlagUpsert {
	u.Set(featureflag.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeatureFlagUpsert) UpdateUpdatedAt() *FeatureFlagUpsert {
	u.SetExcluded(featureflag.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(featureflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeatureFlagUpsertOne) UpdateNewValues() *FeatureFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(featureflag.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(featureflag.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeatureFlagUpsertOne) Ignore() *FeatureFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeatureFlagUpsertOne) DoNothing() *FeatureFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeatureFlagCreate.OnConflict
// documentation for more info.
func (u *FeatureFlagUpsertOne) Update(set func(*FeatureFlagUpsert)) *FeatureFlagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeatureFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *FeatureFlagUpsertOne) SetDescription(v string) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateDescription() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FeatureFlagUpsertOne) ClearDescription() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.ClearDescription()
	})
}

// SetIsActive sets the "is_active" field.
func (u *FeatureFlagUpsertOne) SetIsActive(v bool) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateIsActive() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateIsActive()
	})
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (u *FeatureFlagUpsertOne) SetRolloutPercentage(v int) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetRolloutPercentage(v)
	})
}

// AddRolloutPercentage adds v to the "rollout_percentage" field.
func (u *FeatureFlagUpsertOne) AddRolloutPercentage(v int) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.AddRolloutPercentage(v)
	})
}

// UpdateRolloutPercentage sets the "rollout_percentage" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateRolloutPercentage() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateRolloutPercentage()
	})
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (u *FeatureFlagUpsertOne) SetAllowedUserIds(v []string) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetAllowedUserIds(v)
	})
}

// UpdateAllowedUserIds sets the "allowed_user_ids" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateAllowedUserIds() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateAllowedUserIds()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *FeatureFlagUpsertOne) SetAllowedRoles(v []string) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateAllowedRoles() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeatureFlagUpsertOne) SetUpdatedAt(v time.Time) *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeatureFlagUpsertOne) UpdateUpdatedAt() *FeatureFlagUpsertOne {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FeatureFlagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeatureFlagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeatureFlagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeatureFlagUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FeatureFlagUpsertOne.ID is not supported by MySQL driver. Use FeatureFlagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeatureFlagUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeatureFlagCreateBulk is the builder for creating many FeatureFlag entities in bulk.
type FeatureFlagCreateBulk struct {
	config
	err      error
	builders []*FeatureFlagCreate
	conflict []sql.ConflictOption
}

// Save creates the FeatureFlag entities in the database.
func (_c *FeatureFlagCreateBulk) Save(ctx context.Context) ([]*FeatureFlag, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*FeatureFlag, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeatureFlagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FeatureFlagCreateBulk) SaveX(ctx context.Context) []*FeatureFlag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FeatureFlagCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FeatureFlagCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeatureFlag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeatureFlagUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (_c *FeatureFlagCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeatureFlagUpsertBulk {
	_c.conflict = opts
	return &FeatureFlagUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *FeatureFlagCreateBulk) OnConflictColumns(columns ...string) *FeatureFlagUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &FeatureFlagUpsertBulk{
		create: _c,
	}
}

// FeatureFlagUpsertBulk is the builder for "upsert"-ing
// a bulk of FeatureFlag nodes.
type FeatureFlagUpsertBulk struct {
	create *FeatureFlagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(featureflag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FeatureFlagUpsertBulk) UpdateNewValues() *FeatureFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(featureflag.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(featureflag.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeatureFlag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeatureFlagUpsertBulk) Ignore() *FeatureFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeatureFlagUpsertBulk) DoNothing() *FeatureFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeatureFlagCreateBulk.OnConflict
// documentation for more info.
func (u *FeatureFlagUpsertBulk) Update(set func(*FeatureFlagUpsert)) *FeatureFlagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeatureFlagUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *FeatureFlagUpsertBulk) SetDescription(v string) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateDescription() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FeatureFlagUpsertBulk) ClearDescription() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.ClearDescription()
	})
}

// SetIsActive sets the "is_active" field.
func (u *FeatureFlagUpsertBulk) SetIsActive(v bool) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateIsActive() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateIsActive()
	})
}

// SetRolloutPercentage sets the "rollout_percentage" field.
func (u *FeatureFlagUpsertBulk) SetRolloutPercentage(v int) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetRolloutPercentage(v)
	})
}

// AddRolloutPercentage adds v to the "rollout_percentage" field.
func (u *FeatureFlagUpsertBulk) AddRolloutPercentage(v int) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.AddRolloutPercentage(v)
	})
}

// UpdateRolloutPercentage sets the "rollout_percentage" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateRolloutPercentage() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateRolloutPercentage()
	})
}

// SetAllowedUserIds sets the "allowed_user_ids" field.
func (u *FeatureFlagUpsertBulk) SetAllowedUserIds(v []string) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetAllowedUserIds(v)
	})
}

// UpdateAllowedUserIds sets the "allowed_user_ids" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateAllowedUserIds() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateAllowedUserIds()
	})
}

// SetAllowedRoles sets the "allowed_roles" field.
func (u *FeatureFlagUpsertBulk) SetAllowedRoles(v []string) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetAllowedRoles(v)
	})
}

// UpdateAllowedRoles sets the "allowed_roles" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateAllowedRoles() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateAllowedRoles()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeatureFlagUpsertBulk) SetUpdatedAt(v time.Time) *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeatureFlagUpsertBulk) UpdateUpdatedAt() *FeatureFlagUpsertBulk {
	return u.Update(func(s *FeatureFlagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FeatureFlagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeatureFlagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeatureFlagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeatureFlagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
