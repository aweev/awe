// Code generated by ent, DO NOT EDIT.

package blocktestimonials

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blocktestimonials type in the database.
	Label = "block_testimonials"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldBadge holds the string denoting the badge field in the database.
	FieldBadge = "badge"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLayout holds the string denoting the layout field in the database.
	FieldLayout = "layout"
	// FieldItemsPerRow holds the string denoting the items_per_row field in the database.
	FieldItemsPerRow = "items_per_row"
	// FieldAutoplay holds the string denoting the autoplay field in the database.
	FieldAutoplay = "autoplay"
	// FieldAutoplaySpeed holds the string denoting the autoplay_speed field in the database.
	FieldAutoplaySpeed = "autoplay_speed"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// EdgeTestimonials holds the string denoting the testimonials edge name in mutations.
	EdgeTestimonials = "testimonials"
	// Table holds the table name of the blocktestimonials in the database.
	Table = "block_testimonials"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_testimonials"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_testimonials"
	// TestimonialsTable is the table that holds the testimonials relation/edge.
	TestimonialsTable = "testimonial_items"
	// TestimonialsInverseTable is the table name for the TestimonialItem entity.
	// It exists in this package in order to avoid circular dependency with the "testimonialitem" package.
	TestimonialsInverseTable = "testimonial_items"
	// TestimonialsColumn is the table column denoting the testimonials relation/edge.
	TestimonialsColumn = "block_testimonials_testimonials"
)

// Columns holds all SQL columns for blocktestimonials fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldBadge,
	FieldTitle,
	FieldDescription,
	FieldLayout,
	FieldItemsPerRow,
	FieldAutoplay,
	FieldAutoplaySpeed,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_testimonials"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_testimonials",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLayout holds the default value on creation for the "layout" field.
	DefaultLayout string
	// DefaultItemsPerRow holds the default value on creation for the "items_per_row" field.
	DefaultItemsPerRow int
	// DefaultAutoplay holds the default value on creation for the "autoplay" field.
	DefaultAutoplay bool
	// DefaultAutoplaySpeed holds the default value on creation for the "autoplay_speed" field.
	DefaultAutoplaySpeed int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BlockTestimonials queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByLayout orders the results by the layout field.
func ByLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLayout, opts...).ToFunc()
}

// ByItemsPerRow orders the results by the items_per_row field.
func ByItemsPerRow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemsPerRow, opts...).ToFunc()
}

// ByAutoplay orders the results by the autoplay field.
func ByAutoplay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoplay, opts...).ToFunc()
}

// ByAutoplaySpeed orders the results by the autoplay_speed field.
func ByAutoplaySpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoplaySpeed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestimonialsCount orders the results by testimonials count.
func ByTestimonialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestimonialsStep(), opts...)
	}
}

// ByTestimonials orders the results by testimonials terms.
func ByTestimonials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestimonialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
func newTestimonialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestimonialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestimonialsTable, TestimonialsColumn),
	)
}
