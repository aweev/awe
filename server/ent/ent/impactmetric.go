// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/program"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ImpactMetric is the model entity for the ImpactMetric schema.
type ImpactMetric struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type impactmetric.Type `json:"type,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// TargetValue holds the value of the "target_value" field.
	TargetValue float64 `json:"target_value,omitempty"`
	// CurrentValue holds the value of the "current_value" field.
	CurrentValue float64 `json:"current_value,omitempty"`
	// TargetDate holds the value of the "target_date" field.
	TargetDate time.Time `json:"target_date,omitempty"`
	// CalculationMethod holds the value of the "calculation_method" field.
	CalculationMethod string `json:"calculation_method,omitempty"`
	// IsAutoCalculated holds the value of the "is_auto_calculated" field.
	IsAutoCalculated bool `json:"is_auto_calculated,omitempty"`
	// LastCalculated holds the value of the "last_calculated" field.
	LastCalculated time.Time `json:"last_calculated,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// ShowOnDashboard holds the value of the "show_on_dashboard" field.
	ShowOnDashboard bool `json:"show_on_dashboard,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImpactMetricQuery when eager-loading is set.
	Edges                  ImpactMetricEdges `json:"edges"`
	program_impact_metrics *int
	selectValues           sql.SelectValues
}

// ImpactMetricEdges holds the relations/edges for other nodes in the graph.
type ImpactMetricEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// DataPoints holds the value of the data_points edge.
	DataPoints []*ImpactDataPoint `json:"data_points,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImpactMetricEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// DataPointsOrErr returns the DataPoints value or an error if the edge
// was not loaded in eager-loading.
func (e ImpactMetricEdges) DataPointsOrErr() ([]*ImpactDataPoint, error) {
	if e.loadedTypes[1] {
		return e.DataPoints, nil
	}
	return nil, &NotLoadedError{edge: "data_points"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImpactMetric) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case impactmetric.FieldName:
			values[i] = new([]byte)
		case impactmetric.FieldIsAutoCalculated, impactmetric.FieldIsPublic, impactmetric.FieldShowOnDashboard:
			values[i] = new(sql.NullBool)
		case impactmetric.FieldTargetValue, impactmetric.FieldCurrentValue:
			values[i] = new(sql.NullFloat64)
		case impactmetric.FieldID, impactmetric.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case impactmetric.FieldType, impactmetric.FieldUnit, impactmetric.FieldCalculationMethod:
			values[i] = new(sql.NullString)
		case impactmetric.FieldTargetDate, impactmetric.FieldLastCalculated, impactmetric.FieldCreatedAt, impactmetric.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case impactmetric.ForeignKeys[0]: // program_impact_metrics
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImpactMetric fields.
func (_m *ImpactMetric) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case impactmetric.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case impactmetric.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case impactmetric.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = impactmetric.Type(value.String)
			}
		case impactmetric.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				_m.Unit = value.String
			}
		case impactmetric.FieldTargetValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field target_value", values[i])
			} else if value.Valid {
				_m.TargetValue = value.Float64
			}
		case impactmetric.FieldCurrentValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current_value", values[i])
			} else if value.Valid {
				_m.CurrentValue = value.Float64
			}
		case impactmetric.FieldTargetDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field target_date", values[i])
			} else if value.Valid {
				_m.TargetDate = value.Time
			}
		case impactmetric.FieldCalculationMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field calculation_method", values[i])
			} else if value.Valid {
				_m.CalculationMethod = value.String
			}
		case impactmetric.FieldIsAutoCalculated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_auto_calculated", values[i])
			} else if value.Valid {
				_m.IsAutoCalculated = value.Bool
			}
		case impactmetric.FieldLastCalculated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_calculated", values[i])
			} else if value.Valid {
				_m.LastCalculated = value.Time
			}
		case impactmetric.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				_m.DisplayOrder = int(value.Int64)
			}
		case impactmetric.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		case impactmetric.FieldShowOnDashboard:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_on_dashboard", values[i])
			} else if value.Valid {
				_m.ShowOnDashboard = value.Bool
			}
		case impactmetric.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case impactmetric.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case impactmetric.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_impact_metrics", value)
			} else if value.Valid {
				_m.program_impact_metrics = new(int)
				*_m.program_impact_metrics = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImpactMetric.
// This includes values selected through modifiers, order, etc.
func (_m *ImpactMetric) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the ImpactMetric entity.
func (_m *ImpactMetric) QueryProgram() *ProgramQuery {
	return NewImpactMetricClient(_m.config).QueryProgram(_m)
}

// QueryDataPoints queries the "data_points" edge of the ImpactMetric entity.
func (_m *ImpactMetric) QueryDataPoints() *ImpactDataPointQuery {
	return NewImpactMetricClient(_m.config).QueryDataPoints(_m)
}

// Update returns a builder for updating this ImpactMetric.
// Note that you need to call ImpactMetric.Unwrap() before calling this method if this ImpactMetric
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImpactMetric) Update() *ImpactMetricUpdateOne {
	return NewImpactMetricClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImpactMetric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImpactMetric) Unwrap() *ImpactMetric {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImpactMetric is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImpactMetric) String() string {
	var builder strings.Builder
	builder.WriteString("ImpactMetric(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(_m.Unit)
	builder.WriteString(", ")
	builder.WriteString("target_value=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetValue))
	builder.WriteString(", ")
	builder.WriteString("current_value=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentValue))
	builder.WriteString(", ")
	builder.WriteString("target_date=")
	builder.WriteString(_m.TargetDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("calculation_method=")
	builder.WriteString(_m.CalculationMethod)
	builder.WriteString(", ")
	builder.WriteString("is_auto_calculated=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsAutoCalculated))
	builder.WriteString(", ")
	builder.WriteString("last_calculated=")
	builder.WriteString(_m.LastCalculated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", _m.DisplayOrder))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("show_on_dashboard=")
	builder.WriteString(fmt.Sprintf("%v", _m.ShowOnDashboard))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ImpactMetrics is a parsable slice of ImpactMetric.
type ImpactMetrics []*ImpactMetric
