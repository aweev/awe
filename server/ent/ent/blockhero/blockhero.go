// Code generated by ent, DO NOT EDIT.

package blockhero

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockhero type in the database.
	Label = "block_hero"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldCtaButtons holds the string denoting the cta_buttons field in the database.
	FieldCtaButtons = "cta_buttons"
	// FieldBackgroundImageURL holds the string denoting the background_image_url field in the database.
	FieldBackgroundImageURL = "background_image_url"
	// FieldBadge holds the string denoting the badge field in the database.
	FieldBadge = "badge"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTextAlign holds the string denoting the text_align field in the database.
	FieldTextAlign = "text_align"
	// FieldColorScheme holds the string denoting the color_scheme field in the database.
	FieldColorScheme = "color_scheme"
	// FieldMinHeight holds the string denoting the min_height field in the database.
	FieldMinHeight = "min_height"
	// FieldBackgroundVideoURL holds the string denoting the background_video_url field in the database.
	FieldBackgroundVideoURL = "background_video_url"
	// FieldOverlayColor holds the string denoting the overlay_color field in the database.
	FieldOverlayColor = "overlay_color"
	// FieldOverlayOpacity holds the string denoting the overlay_opacity field in the database.
	FieldOverlayOpacity = "overlay_opacity"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// Table holds the table name of the blockhero in the database.
	Table = "block_heros"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_heros"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_hero"
)

// Columns holds all SQL columns for blockhero fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldTitle,
	FieldSubtitle,
	FieldCtaButtons,
	FieldBackgroundImageURL,
	FieldBadge,
	FieldDescription,
	FieldTextAlign,
	FieldColorScheme,
	FieldMinHeight,
	FieldBackgroundVideoURL,
	FieldOverlayColor,
	FieldOverlayOpacity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_heros"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_hero",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMinHeight holds the default value on creation for the "min_height" field.
	DefaultMinHeight string
	// DefaultOverlayOpacity holds the default value on creation for the "overlay_opacity" field.
	DefaultOverlayOpacity float64
)

// TextAlign defines the type for the "text_align" enum field.
type TextAlign string

// TextAlignLEFT is the default value of the TextAlign enum.
const DefaultTextAlign = TextAlignLEFT

// TextAlign values.
const (
	TextAlignLEFT    TextAlign = "LEFT"
	TextAlignCENTER  TextAlign = "CENTER"
	TextAlignRIGHT   TextAlign = "RIGHT"
	TextAlignJUSTIFY TextAlign = "JUSTIFY"
)

func (ta TextAlign) String() string {
	return string(ta)
}

// TextAlignValidator is a validator for the "text_align" field enum values. It is called by the builders before save.
func TextAlignValidator(ta TextAlign) error {
	switch ta {
	case TextAlignLEFT, TextAlignCENTER, TextAlignRIGHT, TextAlignJUSTIFY:
		return nil
	default:
		return fmt.Errorf("blockhero: invalid enum value for text_align field: %q", ta)
	}
}

// ColorScheme defines the type for the "color_scheme" enum field.
type ColorScheme string

// ColorSchemeDEFAULT is the default value of the ColorScheme enum.
const DefaultColorScheme = ColorSchemeDEFAULT

// ColorScheme values.
const (
	ColorSchemeDEFAULT   ColorScheme = "DEFAULT"
	ColorSchemePRIMARY   ColorScheme = "PRIMARY"
	ColorSchemeSECONDARY ColorScheme = "SECONDARY"
	ColorSchemeACCENT    ColorScheme = "ACCENT"
	ColorSchemeLIGHT     ColorScheme = "LIGHT"
	ColorSchemeDARK      ColorScheme = "DARK"
)

func (cs ColorScheme) String() string {
	return string(cs)
}

// ColorSchemeValidator is a validator for the "color_scheme" field enum values. It is called by the builders before save.
func ColorSchemeValidator(cs ColorScheme) error {
	switch cs {
	case ColorSchemeDEFAULT, ColorSchemePRIMARY, ColorSchemeSECONDARY, ColorSchemeACCENT, ColorSchemeLIGHT, ColorSchemeDARK:
		return nil
	default:
		return fmt.Errorf("blockhero: invalid enum value for color_scheme field: %q", cs)
	}
}

// OrderOption defines the ordering options for the BlockHero queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByBackgroundImageURL orders the results by the background_image_url field.
func ByBackgroundImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundImageURL, opts...).ToFunc()
}

// ByTextAlign orders the results by the text_align field.
func ByTextAlign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextAlign, opts...).ToFunc()
}

// ByColorScheme orders the results by the color_scheme field.
func ByColorScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColorScheme, opts...).ToFunc()
}

// ByMinHeight orders the results by the min_height field.
func ByMinHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinHeight, opts...).ToFunc()
}

// ByBackgroundVideoURL orders the results by the background_video_url field.
func ByBackgroundVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundVideoURL, opts...).ToFunc()
}

// ByOverlayColor orders the results by the overlay_color field.
func ByOverlayColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverlayColor, opts...).ToFunc()
}

// ByOverlayOpacity orders the results by the overlay_opacity field.
func ByOverlayOpacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverlayOpacity, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
