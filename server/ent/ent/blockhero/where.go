// Code generated by ent, DO NOT EDIT.

package blockhero

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldID, id))
}

// InternalName applies equality check predicate on the "internal_name" field. It's identical to InternalNameEQ.
func InternalName(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldInternalName, v))
}

// BackgroundImageURL applies equality check predicate on the "background_image_url" field. It's identical to BackgroundImageURLEQ.
func BackgroundImageURL(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldBackgroundImageURL, v))
}

// MinHeight applies equality check predicate on the "min_height" field. It's identical to MinHeightEQ.
func MinHeight(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldMinHeight, v))
}

// BackgroundVideoURL applies equality check predicate on the "background_video_url" field. It's identical to BackgroundVideoURLEQ.
func BackgroundVideoURL(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldBackgroundVideoURL, v))
}

// OverlayColor applies equality check predicate on the "overlay_color" field. It's identical to OverlayColorEQ.
func OverlayColor(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldOverlayColor, v))
}

// OverlayOpacity applies equality check predicate on the "overlay_opacity" field. It's identical to OverlayOpacityEQ.
func OverlayOpacity(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldOverlayOpacity, v))
}

// InternalNameEQ applies the EQ predicate on the "internal_name" field.
func InternalNameEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldInternalName, v))
}

// InternalNameNEQ applies the NEQ predicate on the "internal_name" field.
func InternalNameNEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldInternalName, v))
}

// InternalNameIn applies the In predicate on the "internal_name" field.
func InternalNameIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldInternalName, vs...))
}

// InternalNameNotIn applies the NotIn predicate on the "internal_name" field.
func InternalNameNotIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldInternalName, vs...))
}

// InternalNameGT applies the GT predicate on the "internal_name" field.
func InternalNameGT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldInternalName, v))
}

// InternalNameGTE applies the GTE predicate on the "internal_name" field.
func InternalNameGTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldInternalName, v))
}

// InternalNameLT applies the LT predicate on the "internal_name" field.
func InternalNameLT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldInternalName, v))
}

// InternalNameLTE applies the LTE predicate on the "internal_name" field.
func InternalNameLTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldInternalName, v))
}

// InternalNameContains applies the Contains predicate on the "internal_name" field.
func InternalNameContains(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContains(FieldInternalName, v))
}

// InternalNameHasPrefix applies the HasPrefix predicate on the "internal_name" field.
func InternalNameHasPrefix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasPrefix(FieldInternalName, v))
}

// InternalNameHasSuffix applies the HasSuffix predicate on the "internal_name" field.
func InternalNameHasSuffix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasSuffix(FieldInternalName, v))
}

// InternalNameEqualFold applies the EqualFold predicate on the "internal_name" field.
func InternalNameEqualFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEqualFold(FieldInternalName, v))
}

// InternalNameContainsFold applies the ContainsFold predicate on the "internal_name" field.
func InternalNameContainsFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContainsFold(FieldInternalName, v))
}

// SubtitleIsNil applies the IsNil predicate on the "subtitle" field.
func SubtitleIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldSubtitle))
}

// SubtitleNotNil applies the NotNil predicate on the "subtitle" field.
func SubtitleNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldSubtitle))
}

// CtaButtonsIsNil applies the IsNil predicate on the "cta_buttons" field.
func CtaButtonsIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldCtaButtons))
}

// CtaButtonsNotNil applies the NotNil predicate on the "cta_buttons" field.
func CtaButtonsNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldCtaButtons))
}

// BackgroundImageURLEQ applies the EQ predicate on the "background_image_url" field.
func BackgroundImageURLEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldBackgroundImageURL, v))
}

// BackgroundImageURLNEQ applies the NEQ predicate on the "background_image_url" field.
func BackgroundImageURLNEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldBackgroundImageURL, v))
}

// BackgroundImageURLIn applies the In predicate on the "background_image_url" field.
func BackgroundImageURLIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldBackgroundImageURL, vs...))
}

// BackgroundImageURLNotIn applies the NotIn predicate on the "background_image_url" field.
func BackgroundImageURLNotIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldBackgroundImageURL, vs...))
}

// BackgroundImageURLGT applies the GT predicate on the "background_image_url" field.
func BackgroundImageURLGT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldBackgroundImageURL, v))
}

// BackgroundImageURLGTE applies the GTE predicate on the "background_image_url" field.
func BackgroundImageURLGTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldBackgroundImageURL, v))
}

// BackgroundImageURLLT applies the LT predicate on the "background_image_url" field.
func BackgroundImageURLLT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldBackgroundImageURL, v))
}

// BackgroundImageURLLTE applies the LTE predicate on the "background_image_url" field.
func BackgroundImageURLLTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldBackgroundImageURL, v))
}

// BackgroundImageURLContains applies the Contains predicate on the "background_image_url" field.
func BackgroundImageURLContains(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContains(FieldBackgroundImageURL, v))
}

// BackgroundImageURLHasPrefix applies the HasPrefix predicate on the "background_image_url" field.
func BackgroundImageURLHasPrefix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasPrefix(FieldBackgroundImageURL, v))
}

// BackgroundImageURLHasSuffix applies the HasSuffix predicate on the "background_image_url" field.
func BackgroundImageURLHasSuffix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasSuffix(FieldBackgroundImageURL, v))
}

// BackgroundImageURLIsNil applies the IsNil predicate on the "background_image_url" field.
func BackgroundImageURLIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldBackgroundImageURL))
}

// BackgroundImageURLNotNil applies the NotNil predicate on the "background_image_url" field.
func BackgroundImageURLNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldBackgroundImageURL))
}

// BackgroundImageURLEqualFold applies the EqualFold predicate on the "background_image_url" field.
func BackgroundImageURLEqualFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEqualFold(FieldBackgroundImageURL, v))
}

// BackgroundImageURLContainsFold applies the ContainsFold predicate on the "background_image_url" field.
func BackgroundImageURLContainsFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContainsFold(FieldBackgroundImageURL, v))
}

// BadgeIsNil applies the IsNil predicate on the "badge" field.
func BadgeIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldBadge))
}

// BadgeNotNil applies the NotNil predicate on the "badge" field.
func BadgeNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldBadge))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldDescription))
}

// TextAlignEQ applies the EQ predicate on the "text_align" field.
func TextAlignEQ(v TextAlign) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldTextAlign, v))
}

// TextAlignNEQ applies the NEQ predicate on the "text_align" field.
func TextAlignNEQ(v TextAlign) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldTextAlign, v))
}

// TextAlignIn applies the In predicate on the "text_align" field.
func TextAlignIn(vs ...TextAlign) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldTextAlign, vs...))
}

// TextAlignNotIn applies the NotIn predicate on the "text_align" field.
func TextAlignNotIn(vs ...TextAlign) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldTextAlign, vs...))
}

// ColorSchemeEQ applies the EQ predicate on the "color_scheme" field.
func ColorSchemeEQ(v ColorScheme) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldColorScheme, v))
}

// ColorSchemeNEQ applies the NEQ predicate on the "color_scheme" field.
func ColorSchemeNEQ(v ColorScheme) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldColorScheme, v))
}

// ColorSchemeIn applies the In predicate on the "color_scheme" field.
func ColorSchemeIn(vs ...ColorScheme) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldColorScheme, vs...))
}

// ColorSchemeNotIn applies the NotIn predicate on the "color_scheme" field.
func ColorSchemeNotIn(vs ...ColorScheme) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldColorScheme, vs...))
}

// MinHeightEQ applies the EQ predicate on the "min_height" field.
func MinHeightEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldMinHeight, v))
}

// MinHeightNEQ applies the NEQ predicate on the "min_height" field.
func MinHeightNEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldMinHeight, v))
}

// MinHeightIn applies the In predicate on the "min_height" field.
func MinHeightIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldMinHeight, vs...))
}

// MinHeightNotIn applies the NotIn predicate on the "min_height" field.
func MinHeightNotIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldMinHeight, vs...))
}

// MinHeightGT applies the GT predicate on the "min_height" field.
func MinHeightGT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldMinHeight, v))
}

// MinHeightGTE applies the GTE predicate on the "min_height" field.
func MinHeightGTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldMinHeight, v))
}

// MinHeightLT applies the LT predicate on the "min_height" field.
func MinHeightLT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldMinHeight, v))
}

// MinHeightLTE applies the LTE predicate on the "min_height" field.
func MinHeightLTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldMinHeight, v))
}

// MinHeightContains applies the Contains predicate on the "min_height" field.
func MinHeightContains(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContains(FieldMinHeight, v))
}

// MinHeightHasPrefix applies the HasPrefix predicate on the "min_height" field.
func MinHeightHasPrefix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasPrefix(FieldMinHeight, v))
}

// MinHeightHasSuffix applies the HasSuffix predicate on the "min_height" field.
func MinHeightHasSuffix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasSuffix(FieldMinHeight, v))
}

// MinHeightIsNil applies the IsNil predicate on the "min_height" field.
func MinHeightIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldMinHeight))
}

// MinHeightNotNil applies the NotNil predicate on the "min_height" field.
func MinHeightNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldMinHeight))
}

// MinHeightEqualFold applies the EqualFold predicate on the "min_height" field.
func MinHeightEqualFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEqualFold(FieldMinHeight, v))
}

// MinHeightContainsFold applies the ContainsFold predicate on the "min_height" field.
func MinHeightContainsFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContainsFold(FieldMinHeight, v))
}

// BackgroundVideoURLEQ applies the EQ predicate on the "background_video_url" field.
func BackgroundVideoURLEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLNEQ applies the NEQ predicate on the "background_video_url" field.
func BackgroundVideoURLNEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLIn applies the In predicate on the "background_video_url" field.
func BackgroundVideoURLIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldBackgroundVideoURL, vs...))
}

// BackgroundVideoURLNotIn applies the NotIn predicate on the "background_video_url" field.
func BackgroundVideoURLNotIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldBackgroundVideoURL, vs...))
}

// BackgroundVideoURLGT applies the GT predicate on the "background_video_url" field.
func BackgroundVideoURLGT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLGTE applies the GTE predicate on the "background_video_url" field.
func BackgroundVideoURLGTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLLT applies the LT predicate on the "background_video_url" field.
func BackgroundVideoURLLT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLLTE applies the LTE predicate on the "background_video_url" field.
func BackgroundVideoURLLTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLContains applies the Contains predicate on the "background_video_url" field.
func BackgroundVideoURLContains(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContains(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLHasPrefix applies the HasPrefix predicate on the "background_video_url" field.
func BackgroundVideoURLHasPrefix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasPrefix(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLHasSuffix applies the HasSuffix predicate on the "background_video_url" field.
func BackgroundVideoURLHasSuffix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasSuffix(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLIsNil applies the IsNil predicate on the "background_video_url" field.
func BackgroundVideoURLIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldBackgroundVideoURL))
}

// BackgroundVideoURLNotNil applies the NotNil predicate on the "background_video_url" field.
func BackgroundVideoURLNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldBackgroundVideoURL))
}

// BackgroundVideoURLEqualFold applies the EqualFold predicate on the "background_video_url" field.
func BackgroundVideoURLEqualFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEqualFold(FieldBackgroundVideoURL, v))
}

// BackgroundVideoURLContainsFold applies the ContainsFold predicate on the "background_video_url" field.
func BackgroundVideoURLContainsFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContainsFold(FieldBackgroundVideoURL, v))
}

// OverlayColorEQ applies the EQ predicate on the "overlay_color" field.
func OverlayColorEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldOverlayColor, v))
}

// OverlayColorNEQ applies the NEQ predicate on the "overlay_color" field.
func OverlayColorNEQ(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldOverlayColor, v))
}

// OverlayColorIn applies the In predicate on the "overlay_color" field.
func OverlayColorIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldOverlayColor, vs...))
}

// OverlayColorNotIn applies the NotIn predicate on the "overlay_color" field.
func OverlayColorNotIn(vs ...string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldOverlayColor, vs...))
}

// OverlayColorGT applies the GT predicate on the "overlay_color" field.
func OverlayColorGT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldOverlayColor, v))
}

// OverlayColorGTE applies the GTE predicate on the "overlay_color" field.
func OverlayColorGTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldOverlayColor, v))
}

// OverlayColorLT applies the LT predicate on the "overlay_color" field.
func OverlayColorLT(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldOverlayColor, v))
}

// OverlayColorLTE applies the LTE predicate on the "overlay_color" field.
func OverlayColorLTE(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldOverlayColor, v))
}

// OverlayColorContains applies the Contains predicate on the "overlay_color" field.
func OverlayColorContains(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContains(FieldOverlayColor, v))
}

// OverlayColorHasPrefix applies the HasPrefix predicate on the "overlay_color" field.
func OverlayColorHasPrefix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasPrefix(FieldOverlayColor, v))
}

// OverlayColorHasSuffix applies the HasSuffix predicate on the "overlay_color" field.
func OverlayColorHasSuffix(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldHasSuffix(FieldOverlayColor, v))
}

// OverlayColorIsNil applies the IsNil predicate on the "overlay_color" field.
func OverlayColorIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldOverlayColor))
}

// OverlayColorNotNil applies the NotNil predicate on the "overlay_color" field.
func OverlayColorNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldOverlayColor))
}

// OverlayColorEqualFold applies the EqualFold predicate on the "overlay_color" field.
func OverlayColorEqualFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEqualFold(FieldOverlayColor, v))
}

// OverlayColorContainsFold applies the ContainsFold predicate on the "overlay_color" field.
func OverlayColorContainsFold(v string) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldContainsFold(FieldOverlayColor, v))
}

// OverlayOpacityEQ applies the EQ predicate on the "overlay_opacity" field.
func OverlayOpacityEQ(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldEQ(FieldOverlayOpacity, v))
}

// OverlayOpacityNEQ applies the NEQ predicate on the "overlay_opacity" field.
func OverlayOpacityNEQ(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNEQ(FieldOverlayOpacity, v))
}

// OverlayOpacityIn applies the In predicate on the "overlay_opacity" field.
func OverlayOpacityIn(vs ...float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIn(FieldOverlayOpacity, vs...))
}

// OverlayOpacityNotIn applies the NotIn predicate on the "overlay_opacity" field.
func OverlayOpacityNotIn(vs ...float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotIn(FieldOverlayOpacity, vs...))
}

// OverlayOpacityGT applies the GT predicate on the "overlay_opacity" field.
func OverlayOpacityGT(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGT(FieldOverlayOpacity, v))
}

// OverlayOpacityGTE applies the GTE predicate on the "overlay_opacity" field.
func OverlayOpacityGTE(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldGTE(FieldOverlayOpacity, v))
}

// OverlayOpacityLT applies the LT predicate on the "overlay_opacity" field.
func OverlayOpacityLT(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLT(FieldOverlayOpacity, v))
}

// OverlayOpacityLTE applies the LTE predicate on the "overlay_opacity" field.
func OverlayOpacityLTE(v float64) predicate.BlockHero {
	return predicate.BlockHero(sql.FieldLTE(FieldOverlayOpacity, v))
}

// OverlayOpacityIsNil applies the IsNil predicate on the "overlay_opacity" field.
func OverlayOpacityIsNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldIsNull(FieldOverlayOpacity))
}

// OverlayOpacityNotNil applies the NotNil predicate on the "overlay_opacity" field.
func OverlayOpacityNotNil() predicate.BlockHero {
	return predicate.BlockHero(sql.FieldNotNull(FieldOverlayOpacity))
}

// HasContentBlock applies the HasEdge predicate on the "content_block" edge.
func HasContentBlock() predicate.BlockHero {
	return predicate.BlockHero(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentBlockWith applies the HasEdge predicate on the "content_block" edge with a given conditions (other predicates).
func HasContentBlockWith(preds ...predicate.ContentBlock) predicate.BlockHero {
	return predicate.BlockHero(func(s *sql.Selector) {
		step := newContentBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockHero) predicate.BlockHero {
	return predicate.BlockHero(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockHero) predicate.BlockHero {
	return predicate.BlockHero(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockHero) predicate.BlockHero {
	return predicate.BlockHero(sql.NotPredicates(p))
}
