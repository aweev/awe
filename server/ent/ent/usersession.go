// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/user"
	"awe/ent/ent/usersession"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSession is the model entity for the UserSession schema.
type UserSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SessionToken holds the value of the "session_token" field.
	SessionToken string `json:"session_token,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastAccessed holds the value of the "last_accessed" field.
	LastAccessed time.Time `json:"last_accessed,omitempty"`
	// DeviceFingerprint holds the value of the "device_fingerprint" field.
	DeviceFingerprint string `json:"device_fingerprint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSessionQuery when eager-loading is set.
	Edges         UserSessionEdges `json:"edges"`
	user_sessions *int
	selectValues  sql.SelectValues
}

// UserSessionEdges holds the relations/edges for other nodes in the graph.
type UserSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID:
			values[i] = new(sql.NullInt64)
		case usersession.FieldSessionToken, usersession.FieldIPAddress, usersession.FieldUserAgent, usersession.FieldDeviceFingerprint:
			values[i] = new(sql.NullString)
		case usersession.FieldExpiresAt, usersession.FieldCreatedAt, usersession.FieldLastAccessed:
			values[i] = new(sql.NullTime)
		case usersession.ForeignKeys[0]: // user_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSession fields.
func (_m *UserSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case usersession.FieldSessionToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_token", values[i])
			} else if value.Valid {
				_m.SessionToken = value.String
			}
		case usersession.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case usersession.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case usersession.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case usersession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case usersession.FieldLastAccessed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_accessed", values[i])
			} else if value.Valid {
				_m.LastAccessed = value.Time
			}
		case usersession.FieldDeviceFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_fingerprint", values[i])
			} else if value.Valid {
				_m.DeviceFingerprint = value.String
			}
		case usersession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_sessions", value)
			} else if value.Valid {
				_m.user_sessions = new(int)
				*_m.user_sessions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSession.
// This includes values selected through modifiers, order, etc.
func (_m *UserSession) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserSession entity.
func (_m *UserSession) QueryUser() *UserQuery {
	return NewUserSessionClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this UserSession.
// Note that you need to call UserSession.Unwrap() before calling this method if this UserSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserSession) Update() *UserSessionUpdateOne {
	return NewUserSessionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserSession) Unwrap() *UserSession {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSession is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserSession) String() string {
	var builder strings.Builder
	builder.WriteString("UserSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("session_token=")
	builder.WriteString(_m.SessionToken)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_accessed=")
	builder.WriteString(_m.LastAccessed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_fingerprint=")
	builder.WriteString(_m.DeviceFingerprint)
	builder.WriteByte(')')
	return builder.String()
}

// UserSessions is a parsable slice of UserSession.
type UserSessions []*UserSession
