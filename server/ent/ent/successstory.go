// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/successstory"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SuccessStory is the model entity for the SuccessStory schema.
type SuccessStory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt map[string]string `json:"excerpt,omitempty"`
	// Content holds the value of the "content" field.
	Content map[string]interface{} `json:"content,omitempty"`
	// Quote holds the value of the "quote" field.
	Quote string `json:"quote,omitempty"`
	// Status holds the value of the "status" field.
	Status successstory.Status `json:"status,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SuccessStoryQuery when eager-loading is set.
	Edges                   SuccessStoryEdges `json:"edges"`
	program_success_stories *int
	user_success_stories    *int
	selectValues            sql.SelectValues
}

// SuccessStoryEdges holds the relations/edges for other nodes in the graph.
type SuccessStoryEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// Testimonials holds the value of the testimonials edge.
	Testimonials []*TestimonialItem `json:"testimonials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SuccessStoryEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SuccessStoryEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// TestimonialsOrErr returns the Testimonials value or an error if the edge
// was not loaded in eager-loading.
func (e SuccessStoryEdges) TestimonialsOrErr() ([]*TestimonialItem, error) {
	if e.loadedTypes[2] {
		return e.Testimonials, nil
	}
	return nil, &NotLoadedError{edge: "testimonials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SuccessStory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case successstory.FieldTitle, successstory.FieldExcerpt, successstory.FieldContent:
			values[i] = new([]byte)
		case successstory.FieldID:
			values[i] = new(sql.NullInt64)
		case successstory.FieldSlug, successstory.FieldQuote, successstory.FieldStatus, successstory.FieldImageURL:
			values[i] = new(sql.NullString)
		case successstory.FieldPublishedAt, successstory.FieldCreatedAt, successstory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case successstory.ForeignKeys[0]: // program_success_stories
			values[i] = new(sql.NullInt64)
		case successstory.ForeignKeys[1]: // user_success_stories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SuccessStory fields.
func (_m *SuccessStory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case successstory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case successstory.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case successstory.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case successstory.FieldExcerpt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Excerpt); err != nil {
					return fmt.Errorf("unmarshal field excerpt: %w", err)
				}
			}
		case successstory.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case successstory.FieldQuote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quote", values[i])
			} else if value.Valid {
				_m.Quote = value.String
			}
		case successstory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = successstory.Status(value.String)
			}
		case successstory.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				_m.PublishedAt = value.Time
			}
		case successstory.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case successstory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case successstory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case successstory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_success_stories", value)
			} else if value.Valid {
				_m.program_success_stories = new(int)
				*_m.program_success_stories = int(value.Int64)
			}
		case successstory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_success_stories", value)
			} else if value.Valid {
				_m.user_success_stories = new(int)
				*_m.user_success_stories = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SuccessStory.
// This includes values selected through modifiers, order, etc.
func (_m *SuccessStory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the SuccessStory entity.
func (_m *SuccessStory) QueryAuthor() *UserQuery {
	return NewSuccessStoryClient(_m.config).QueryAuthor(_m)
}

// QueryProgram queries the "program" edge of the SuccessStory entity.
func (_m *SuccessStory) QueryProgram() *ProgramQuery {
	return NewSuccessStoryClient(_m.config).QueryProgram(_m)
}

// QueryTestimonials queries the "testimonials" edge of the SuccessStory entity.
func (_m *SuccessStory) QueryTestimonials() *TestimonialItemQuery {
	return NewSuccessStoryClient(_m.config).QueryTestimonials(_m)
}

// Update returns a builder for updating this SuccessStory.
// Note that you need to call SuccessStory.Unwrap() before calling this method if this SuccessStory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SuccessStory) Update() *SuccessStoryUpdateOne {
	return NewSuccessStoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SuccessStory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SuccessStory) Unwrap() *SuccessStory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SuccessStory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SuccessStory) String() string {
	var builder strings.Builder
	builder.WriteString("SuccessStory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(fmt.Sprintf("%v", _m.Excerpt))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", _m.Content))
	builder.WriteString(", ")
	builder.WriteString("quote=")
	builder.WriteString(_m.Quote)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(_m.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SuccessStories is a parsable slice of SuccessStory.
type SuccessStories []*SuccessStory
