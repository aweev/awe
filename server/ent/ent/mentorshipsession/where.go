// Code generated by ent, DO NOT EDIT.

package mentorshipsession

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldID, id))
}

// ScheduledAt applies equality check predicate on the "scheduled_at" field. It's identical to ScheduledAtEQ.
func ScheduledAt(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldScheduledAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldDuration, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldFormat, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldStatus, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldNotes, v))
}

// MentorRating applies equality check predicate on the "mentor_rating" field. It's identical to MentorRatingEQ.
func MentorRating(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMentorRating, v))
}

// MenteeRating applies equality check predicate on the "mentee_rating" field. It's identical to MenteeRatingEQ.
func MenteeRating(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMenteeRating, v))
}

// MentorFeedback applies equality check predicate on the "mentor_feedback" field. It's identical to MentorFeedbackEQ.
func MentorFeedback(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMentorFeedback, v))
}

// MenteeFeedback applies equality check predicate on the "mentee_feedback" field. It's identical to MenteeFeedbackEQ.
func MenteeFeedback(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMenteeFeedback, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// ScheduledAtEQ applies the EQ predicate on the "scheduled_at" field.
func ScheduledAtEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldScheduledAt, v))
}

// ScheduledAtNEQ applies the NEQ predicate on the "scheduled_at" field.
func ScheduledAtNEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldScheduledAt, v))
}

// ScheduledAtIn applies the In predicate on the "scheduled_at" field.
func ScheduledAtIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldScheduledAt, vs...))
}

// ScheduledAtNotIn applies the NotIn predicate on the "scheduled_at" field.
func ScheduledAtNotIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldScheduledAt, vs...))
}

// ScheduledAtGT applies the GT predicate on the "scheduled_at" field.
func ScheduledAtGT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldScheduledAt, v))
}

// ScheduledAtGTE applies the GTE predicate on the "scheduled_at" field.
func ScheduledAtGTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldScheduledAt, v))
}

// ScheduledAtLT applies the LT predicate on the "scheduled_at" field.
func ScheduledAtLT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldScheduledAt, v))
}

// ScheduledAtLTE applies the LTE predicate on the "scheduled_at" field.
func ScheduledAtLTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldScheduledAt, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldDuration, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContainsFold(FieldFormat, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContainsFold(FieldStatus, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContainsFold(FieldNotes, v))
}

// ActionItemsIsNil applies the IsNil predicate on the "action_items" field.
func ActionItemsIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldActionItems))
}

// ActionItemsNotNil applies the NotNil predicate on the "action_items" field.
func ActionItemsNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldActionItems))
}

// MentorRatingEQ applies the EQ predicate on the "mentor_rating" field.
func MentorRatingEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMentorRating, v))
}

// MentorRatingNEQ applies the NEQ predicate on the "mentor_rating" field.
func MentorRatingNEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldMentorRating, v))
}

// MentorRatingIn applies the In predicate on the "mentor_rating" field.
func MentorRatingIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldMentorRating, vs...))
}

// MentorRatingNotIn applies the NotIn predicate on the "mentor_rating" field.
func MentorRatingNotIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldMentorRating, vs...))
}

// MentorRatingGT applies the GT predicate on the "mentor_rating" field.
func MentorRatingGT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldMentorRating, v))
}

// MentorRatingGTE applies the GTE predicate on the "mentor_rating" field.
func MentorRatingGTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldMentorRating, v))
}

// MentorRatingLT applies the LT predicate on the "mentor_rating" field.
func MentorRatingLT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldMentorRating, v))
}

// MentorRatingLTE applies the LTE predicate on the "mentor_rating" field.
func MentorRatingLTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldMentorRating, v))
}

// MentorRatingIsNil applies the IsNil predicate on the "mentor_rating" field.
func MentorRatingIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldMentorRating))
}

// MentorRatingNotNil applies the NotNil predicate on the "mentor_rating" field.
func MentorRatingNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldMentorRating))
}

// MenteeRatingEQ applies the EQ predicate on the "mentee_rating" field.
func MenteeRatingEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMenteeRating, v))
}

// MenteeRatingNEQ applies the NEQ predicate on the "mentee_rating" field.
func MenteeRatingNEQ(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldMenteeRating, v))
}

// MenteeRatingIn applies the In predicate on the "mentee_rating" field.
func MenteeRatingIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldMenteeRating, vs...))
}

// MenteeRatingNotIn applies the NotIn predicate on the "mentee_rating" field.
func MenteeRatingNotIn(vs ...int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldMenteeRating, vs...))
}

// MenteeRatingGT applies the GT predicate on the "mentee_rating" field.
func MenteeRatingGT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldMenteeRating, v))
}

// MenteeRatingGTE applies the GTE predicate on the "mentee_rating" field.
func MenteeRatingGTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldMenteeRating, v))
}

// MenteeRatingLT applies the LT predicate on the "mentee_rating" field.
func MenteeRatingLT(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldMenteeRating, v))
}

// MenteeRatingLTE applies the LTE predicate on the "mentee_rating" field.
func MenteeRatingLTE(v int) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldMenteeRating, v))
}

// MenteeRatingIsNil applies the IsNil predicate on the "mentee_rating" field.
func MenteeRatingIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldMenteeRating))
}

// MenteeRatingNotNil applies the NotNil predicate on the "mentee_rating" field.
func MenteeRatingNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldMenteeRating))
}

// MentorFeedbackEQ applies the EQ predicate on the "mentor_feedback" field.
func MentorFeedbackEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMentorFeedback, v))
}

// MentorFeedbackNEQ applies the NEQ predicate on the "mentor_feedback" field.
func MentorFeedbackNEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldMentorFeedback, v))
}

// MentorFeedbackIn applies the In predicate on the "mentor_feedback" field.
func MentorFeedbackIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldMentorFeedback, vs...))
}

// MentorFeedbackNotIn applies the NotIn predicate on the "mentor_feedback" field.
func MentorFeedbackNotIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldMentorFeedback, vs...))
}

// MentorFeedbackGT applies the GT predicate on the "mentor_feedback" field.
func MentorFeedbackGT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldMentorFeedback, v))
}

// MentorFeedbackGTE applies the GTE predicate on the "mentor_feedback" field.
func MentorFeedbackGTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldMentorFeedback, v))
}

// MentorFeedbackLT applies the LT predicate on the "mentor_feedback" field.
func MentorFeedbackLT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldMentorFeedback, v))
}

// MentorFeedbackLTE applies the LTE predicate on the "mentor_feedback" field.
func MentorFeedbackLTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldMentorFeedback, v))
}

// MentorFeedbackContains applies the Contains predicate on the "mentor_feedback" field.
func MentorFeedbackContains(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContains(FieldMentorFeedback, v))
}

// MentorFeedbackHasPrefix applies the HasPrefix predicate on the "mentor_feedback" field.
func MentorFeedbackHasPrefix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasPrefix(FieldMentorFeedback, v))
}

// MentorFeedbackHasSuffix applies the HasSuffix predicate on the "mentor_feedback" field.
func MentorFeedbackHasSuffix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasSuffix(FieldMentorFeedback, v))
}

// MentorFeedbackIsNil applies the IsNil predicate on the "mentor_feedback" field.
func MentorFeedbackIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldMentorFeedback))
}

// MentorFeedbackNotNil applies the NotNil predicate on the "mentor_feedback" field.
func MentorFeedbackNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldMentorFeedback))
}

// MentorFeedbackEqualFold applies the EqualFold predicate on the "mentor_feedback" field.
func MentorFeedbackEqualFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEqualFold(FieldMentorFeedback, v))
}

// MentorFeedbackContainsFold applies the ContainsFold predicate on the "mentor_feedback" field.
func MentorFeedbackContainsFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContainsFold(FieldMentorFeedback, v))
}

// MenteeFeedbackEQ applies the EQ predicate on the "mentee_feedback" field.
func MenteeFeedbackEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldMenteeFeedback, v))
}

// MenteeFeedbackNEQ applies the NEQ predicate on the "mentee_feedback" field.
func MenteeFeedbackNEQ(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldMenteeFeedback, v))
}

// MenteeFeedbackIn applies the In predicate on the "mentee_feedback" field.
func MenteeFeedbackIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldMenteeFeedback, vs...))
}

// MenteeFeedbackNotIn applies the NotIn predicate on the "mentee_feedback" field.
func MenteeFeedbackNotIn(vs ...string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldMenteeFeedback, vs...))
}

// MenteeFeedbackGT applies the GT predicate on the "mentee_feedback" field.
func MenteeFeedbackGT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldMenteeFeedback, v))
}

// MenteeFeedbackGTE applies the GTE predicate on the "mentee_feedback" field.
func MenteeFeedbackGTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldMenteeFeedback, v))
}

// MenteeFeedbackLT applies the LT predicate on the "mentee_feedback" field.
func MenteeFeedbackLT(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldMenteeFeedback, v))
}

// MenteeFeedbackLTE applies the LTE predicate on the "mentee_feedback" field.
func MenteeFeedbackLTE(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldMenteeFeedback, v))
}

// MenteeFeedbackContains applies the Contains predicate on the "mentee_feedback" field.
func MenteeFeedbackContains(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContains(FieldMenteeFeedback, v))
}

// MenteeFeedbackHasPrefix applies the HasPrefix predicate on the "mentee_feedback" field.
func MenteeFeedbackHasPrefix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasPrefix(FieldMenteeFeedback, v))
}

// MenteeFeedbackHasSuffix applies the HasSuffix predicate on the "mentee_feedback" field.
func MenteeFeedbackHasSuffix(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldHasSuffix(FieldMenteeFeedback, v))
}

// MenteeFeedbackIsNil applies the IsNil predicate on the "mentee_feedback" field.
func MenteeFeedbackIsNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIsNull(FieldMenteeFeedback))
}

// MenteeFeedbackNotNil applies the NotNil predicate on the "mentee_feedback" field.
func MenteeFeedbackNotNil() predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotNull(FieldMenteeFeedback))
}

// MenteeFeedbackEqualFold applies the EqualFold predicate on the "mentee_feedback" field.
func MenteeFeedbackEqualFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEqualFold(FieldMenteeFeedback, v))
}

// MenteeFeedbackContainsFold applies the ContainsFold predicate on the "mentee_feedback" field.
func MenteeFeedbackContainsFold(v string) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldContainsFold(FieldMenteeFeedback, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMentorshipRequest applies the HasEdge predicate on the "mentorship_request" edge.
func HasMentorshipRequest() predicate.MentorshipSession {
	return predicate.MentorshipSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MentorshipRequestTable, MentorshipRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentorshipRequestWith applies the HasEdge predicate on the "mentorship_request" edge with a given conditions (other predicates).
func HasMentorshipRequestWith(preds ...predicate.MentorshipRequest) predicate.MentorshipSession {
	return predicate.MentorshipSession(func(s *sql.Selector) {
		step := newMentorshipRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgenda applies the HasEdge predicate on the "agenda" edge.
func HasAgenda() predicate.MentorshipSession {
	return predicate.MentorshipSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AgendaTable, AgendaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgendaWith applies the HasEdge predicate on the "agenda" edge with a given conditions (other predicates).
func HasAgendaWith(preds ...predicate.Agenda) predicate.MentorshipSession {
	return predicate.MentorshipSession(func(s *sql.Selector) {
		step := newAgendaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MentorshipSession) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MentorshipSession) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MentorshipSession) predicate.MentorshipSession {
	return predicate.MentorshipSession(sql.NotPredicates(p))
}
