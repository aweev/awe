// Code generated by ent, DO NOT EDIT.

package mentorshipsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mentorshipsession type in the database.
	Label = "mentorship_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScheduledAt holds the string denoting the scheduled_at field in the database.
	FieldScheduledAt = "scheduled_at"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldActionItems holds the string denoting the action_items field in the database.
	FieldActionItems = "action_items"
	// FieldMentorRating holds the string denoting the mentor_rating field in the database.
	FieldMentorRating = "mentor_rating"
	// FieldMenteeRating holds the string denoting the mentee_rating field in the database.
	FieldMenteeRating = "mentee_rating"
	// FieldMentorFeedback holds the string denoting the mentor_feedback field in the database.
	FieldMentorFeedback = "mentor_feedback"
	// FieldMenteeFeedback holds the string denoting the mentee_feedback field in the database.
	FieldMenteeFeedback = "mentee_feedback"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMentorshipRequest holds the string denoting the mentorship_request edge name in mutations.
	EdgeMentorshipRequest = "mentorship_request"
	// EdgeAgenda holds the string denoting the agenda edge name in mutations.
	EdgeAgenda = "agenda"
	// Table holds the table name of the mentorshipsession in the database.
	Table = "mentorship_sessions"
	// MentorshipRequestTable is the table that holds the mentorship_request relation/edge.
	MentorshipRequestTable = "mentorship_sessions"
	// MentorshipRequestInverseTable is the table name for the MentorshipRequest entity.
	// It exists in this package in order to avoid circular dependency with the "mentorshiprequest" package.
	MentorshipRequestInverseTable = "mentorship_requests"
	// MentorshipRequestColumn is the table column denoting the mentorship_request relation/edge.
	MentorshipRequestColumn = "mentorship_request_sessions"
	// AgendaTable is the table that holds the agenda relation/edge.
	AgendaTable = "agendas"
	// AgendaInverseTable is the table name for the Agenda entity.
	// It exists in this package in order to avoid circular dependency with the "agenda" package.
	AgendaInverseTable = "agendas"
	// AgendaColumn is the table column denoting the agenda relation/edge.
	AgendaColumn = "mentorship_session_agenda"
)

// Columns holds all SQL columns for mentorshipsession fields.
var Columns = []string{
	FieldID,
	FieldScheduledAt,
	FieldDuration,
	FieldFormat,
	FieldStatus,
	FieldNotes,
	FieldActionItems,
	FieldMentorRating,
	FieldMenteeRating,
	FieldMentorFeedback,
	FieldMenteeFeedback,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "mentorship_sessions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mentorship_request_sessions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDuration holds the default value on creation for the "duration" field.
	DefaultDuration int
	// DefaultFormat holds the default value on creation for the "format" field.
	DefaultFormat string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// MentorRatingValidator is a validator for the "mentor_rating" field. It is called by the builders before save.
	MentorRatingValidator func(int) error
	// MenteeRatingValidator is a validator for the "mentee_rating" field. It is called by the builders before save.
	MenteeRatingValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the MentorshipSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScheduledAt orders the results by the scheduled_at field.
func ByScheduledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAt, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByMentorRating orders the results by the mentor_rating field.
func ByMentorRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMentorRating, opts...).ToFunc()
}

// ByMenteeRating orders the results by the mentee_rating field.
func ByMenteeRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenteeRating, opts...).ToFunc()
}

// ByMentorFeedback orders the results by the mentor_feedback field.
func ByMentorFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMentorFeedback, opts...).ToFunc()
}

// ByMenteeFeedback orders the results by the mentee_feedback field.
func ByMenteeFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenteeFeedback, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMentorshipRequestField orders the results by mentorship_request field.
func ByMentorshipRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorshipRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgendaField orders the results by agenda field.
func ByAgendaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgendaStep(), sql.OrderByField(field, opts...))
	}
}
func newMentorshipRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorshipRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MentorshipRequestTable, MentorshipRequestColumn),
	)
}
func newAgendaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgendaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AgendaTable, AgendaColumn),
	)
}
