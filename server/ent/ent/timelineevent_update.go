// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/predicate"
	"awe/ent/ent/timelineevent"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimelineEventUpdate is the builder for updating TimelineEvent entities.
type TimelineEventUpdate struct {
	config
	hooks    []Hook
	mutation *TimelineEventMutation
}

// Where appends a list predicates to the TimelineEventUpdate builder.
func (_u *TimelineEventUpdate) Where(ps ...predicate.TimelineEvent) *TimelineEventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOrder sets the "order" field.
func (_u *TimelineEventUpdate) SetOrder(v int) *TimelineEventUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TimelineEventUpdate) SetNillableOrder(v *int) *TimelineEventUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TimelineEventUpdate) AddOrder(v int) *TimelineEventUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *TimelineEventUpdate) SetDate(v string) *TimelineEventUpdate {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *TimelineEventUpdate) SetNillableDate(v *string) *TimelineEventUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *TimelineEventUpdate) SetTitle(v map[string]string) *TimelineEventUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *TimelineEventUpdate) SetDescription(v map[string]string) *TimelineEventUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TimelineEventUpdate) ClearDescription() *TimelineEventUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TimelineEventUpdate) SetImageURL(v string) *TimelineEventUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TimelineEventUpdate) SetNillableImageURL(v *string) *TimelineEventUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TimelineEventUpdate) ClearImageURL() *TimelineEventUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTimeline entity by ID.
func (_u *TimelineEventUpdate) SetBlockID(id int) *TimelineEventUpdate {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTimeline entity.
func (_u *TimelineEventUpdate) SetBlock(v *BlockTimeline) *TimelineEventUpdate {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TimelineEventMutation object of the builder.
func (_u *TimelineEventUpdate) Mutation() *TimelineEventMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTimeline entity.
func (_u *TimelineEventUpdate) ClearBlock() *TimelineEventUpdate {
	_u.mutation.ClearBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TimelineEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TimelineEventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TimelineEventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TimelineEventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TimelineEventUpdate) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TimelineEvent.block"`)
	}
	return nil
}

func (_u *TimelineEventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(timelineevent.Table, timelineevent.Columns, sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(timelineevent.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(timelineevent.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(timelineevent.FieldDate, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(timelineevent.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(timelineevent.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(timelineevent.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(timelineevent.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(timelineevent.FieldImageURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelineevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TimelineEventUpdateOne is the builder for updating a single TimelineEvent entity.
type TimelineEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimelineEventMutation
}

// SetOrder sets the "order" field.
func (_u *TimelineEventUpdateOne) SetOrder(v int) *TimelineEventUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *TimelineEventUpdateOne) SetNillableOrder(v *int) *TimelineEventUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *TimelineEventUpdateOne) AddOrder(v int) *TimelineEventUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *TimelineEventUpdateOne) SetDate(v string) *TimelineEventUpdateOne {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *TimelineEventUpdateOne) SetNillableDate(v *string) *TimelineEventUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *TimelineEventUpdateOne) SetTitle(v map[string]string) *TimelineEventUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *TimelineEventUpdateOne) SetDescription(v map[string]string) *TimelineEventUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TimelineEventUpdateOne) ClearDescription() *TimelineEventUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TimelineEventUpdateOne) SetImageURL(v string) *TimelineEventUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TimelineEventUpdateOne) SetNillableImageURL(v *string) *TimelineEventUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TimelineEventUpdateOne) ClearImageURL() *TimelineEventUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetBlockID sets the "block" edge to the BlockTimeline entity by ID.
func (_u *TimelineEventUpdateOne) SetBlockID(id int) *TimelineEventUpdateOne {
	_u.mutation.SetBlockID(id)
	return _u
}

// SetBlock sets the "block" edge to the BlockTimeline entity.
func (_u *TimelineEventUpdateOne) SetBlock(v *BlockTimeline) *TimelineEventUpdateOne {
	return _u.SetBlockID(v.ID)
}

// Mutation returns the TimelineEventMutation object of the builder.
func (_u *TimelineEventUpdateOne) Mutation() *TimelineEventMutation {
	return _u.mutation
}

// ClearBlock clears the "block" edge to the BlockTimeline entity.
func (_u *TimelineEventUpdateOne) ClearBlock() *TimelineEventUpdateOne {
	_u.mutation.ClearBlock()
	return _u
}

// Where appends a list predicates to the TimelineEventUpdate builder.
func (_u *TimelineEventUpdateOne) Where(ps ...predicate.TimelineEvent) *TimelineEventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TimelineEventUpdateOne) Select(field string, fields ...string) *TimelineEventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TimelineEvent entity.
func (_u *TimelineEventUpdateOne) Save(ctx context.Context) (*TimelineEvent, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TimelineEventUpdateOne) SaveX(ctx context.Context) *TimelineEvent {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TimelineEventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TimelineEventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TimelineEventUpdateOne) check() error {
	if _u.mutation.BlockCleared() && len(_u.mutation.BlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TimelineEvent.block"`)
	}
	return nil
}

func (_u *TimelineEventUpdateOne) sqlSave(ctx context.Context) (_node *TimelineEvent, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(timelineevent.Table, timelineevent.Columns, sqlgraph.NewFieldSpec(timelineevent.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimelineEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timelineevent.FieldID)
		for _, f := range fields {
			if !timelineevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timelineevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(timelineevent.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(timelineevent.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(timelineevent.FieldDate, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(timelineevent.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(timelineevent.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(timelineevent.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(timelineevent.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(timelineevent.FieldImageURL, field.TypeString)
	}
	if _u.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blocktimeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimelineEvent{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelineevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
