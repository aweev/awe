// Code generated by ent, DO NOT EDIT.

package teammember

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldName, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldImageURL, v))
}

// LinkedinURL applies equality check predicate on the "linkedin_url" field. It's identical to LinkedinURLEQ.
func LinkedinURL(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldLinkedinURL, v))
}

// TwitterURL applies equality check predicate on the "twitter_url" field. It's identical to TwitterURLEQ.
func TwitterURL(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldTwitterURL, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldEmail, v))
}

// DisplayOrder applies equality check predicate on the "display_order" field. It's identical to DisplayOrderEQ.
func DisplayOrder(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldDisplayOrder, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContainsFold(FieldName, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotNull(FieldBio))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContainsFold(FieldImageURL, v))
}

// LinkedinURLEQ applies the EQ predicate on the "linkedin_url" field.
func LinkedinURLEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldLinkedinURL, v))
}

// LinkedinURLNEQ applies the NEQ predicate on the "linkedin_url" field.
func LinkedinURLNEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldLinkedinURL, v))
}

// LinkedinURLIn applies the In predicate on the "linkedin_url" field.
func LinkedinURLIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldLinkedinURL, vs...))
}

// LinkedinURLNotIn applies the NotIn predicate on the "linkedin_url" field.
func LinkedinURLNotIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldLinkedinURL, vs...))
}

// LinkedinURLGT applies the GT predicate on the "linkedin_url" field.
func LinkedinURLGT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldLinkedinURL, v))
}

// LinkedinURLGTE applies the GTE predicate on the "linkedin_url" field.
func LinkedinURLGTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldLinkedinURL, v))
}

// LinkedinURLLT applies the LT predicate on the "linkedin_url" field.
func LinkedinURLLT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldLinkedinURL, v))
}

// LinkedinURLLTE applies the LTE predicate on the "linkedin_url" field.
func LinkedinURLLTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldLinkedinURL, v))
}

// LinkedinURLContains applies the Contains predicate on the "linkedin_url" field.
func LinkedinURLContains(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContains(FieldLinkedinURL, v))
}

// LinkedinURLHasPrefix applies the HasPrefix predicate on the "linkedin_url" field.
func LinkedinURLHasPrefix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasPrefix(FieldLinkedinURL, v))
}

// LinkedinURLHasSuffix applies the HasSuffix predicate on the "linkedin_url" field.
func LinkedinURLHasSuffix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasSuffix(FieldLinkedinURL, v))
}

// LinkedinURLIsNil applies the IsNil predicate on the "linkedin_url" field.
func LinkedinURLIsNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIsNull(FieldLinkedinURL))
}

// LinkedinURLNotNil applies the NotNil predicate on the "linkedin_url" field.
func LinkedinURLNotNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotNull(FieldLinkedinURL))
}

// LinkedinURLEqualFold applies the EqualFold predicate on the "linkedin_url" field.
func LinkedinURLEqualFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEqualFold(FieldLinkedinURL, v))
}

// LinkedinURLContainsFold applies the ContainsFold predicate on the "linkedin_url" field.
func LinkedinURLContainsFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContainsFold(FieldLinkedinURL, v))
}

// TwitterURLEQ applies the EQ predicate on the "twitter_url" field.
func TwitterURLEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldTwitterURL, v))
}

// TwitterURLNEQ applies the NEQ predicate on the "twitter_url" field.
func TwitterURLNEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldTwitterURL, v))
}

// TwitterURLIn applies the In predicate on the "twitter_url" field.
func TwitterURLIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldTwitterURL, vs...))
}

// TwitterURLNotIn applies the NotIn predicate on the "twitter_url" field.
func TwitterURLNotIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldTwitterURL, vs...))
}

// TwitterURLGT applies the GT predicate on the "twitter_url" field.
func TwitterURLGT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldTwitterURL, v))
}

// TwitterURLGTE applies the GTE predicate on the "twitter_url" field.
func TwitterURLGTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldTwitterURL, v))
}

// TwitterURLLT applies the LT predicate on the "twitter_url" field.
func TwitterURLLT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldTwitterURL, v))
}

// TwitterURLLTE applies the LTE predicate on the "twitter_url" field.
func TwitterURLLTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldTwitterURL, v))
}

// TwitterURLContains applies the Contains predicate on the "twitter_url" field.
func TwitterURLContains(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContains(FieldTwitterURL, v))
}

// TwitterURLHasPrefix applies the HasPrefix predicate on the "twitter_url" field.
func TwitterURLHasPrefix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasPrefix(FieldTwitterURL, v))
}

// TwitterURLHasSuffix applies the HasSuffix predicate on the "twitter_url" field.
func TwitterURLHasSuffix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasSuffix(FieldTwitterURL, v))
}

// TwitterURLIsNil applies the IsNil predicate on the "twitter_url" field.
func TwitterURLIsNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIsNull(FieldTwitterURL))
}

// TwitterURLNotNil applies the NotNil predicate on the "twitter_url" field.
func TwitterURLNotNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotNull(FieldTwitterURL))
}

// TwitterURLEqualFold applies the EqualFold predicate on the "twitter_url" field.
func TwitterURLEqualFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEqualFold(FieldTwitterURL, v))
}

// TwitterURLContainsFold applies the ContainsFold predicate on the "twitter_url" field.
func TwitterURLContainsFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContainsFold(FieldTwitterURL, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldContainsFold(FieldEmail, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldType, vs...))
}

// DisplayOrderEQ applies the EQ predicate on the "display_order" field.
func DisplayOrderEQ(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldDisplayOrder, v))
}

// DisplayOrderNEQ applies the NEQ predicate on the "display_order" field.
func DisplayOrderNEQ(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldDisplayOrder, v))
}

// DisplayOrderIn applies the In predicate on the "display_order" field.
func DisplayOrderIn(vs ...int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldDisplayOrder, vs...))
}

// DisplayOrderNotIn applies the NotIn predicate on the "display_order" field.
func DisplayOrderNotIn(vs ...int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldDisplayOrder, vs...))
}

// DisplayOrderGT applies the GT predicate on the "display_order" field.
func DisplayOrderGT(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldDisplayOrder, v))
}

// DisplayOrderGTE applies the GTE predicate on the "display_order" field.
func DisplayOrderGTE(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldDisplayOrder, v))
}

// DisplayOrderLT applies the LT predicate on the "display_order" field.
func DisplayOrderLT(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldDisplayOrder, v))
}

// DisplayOrderLTE applies the LTE predicate on the "display_order" field.
func DisplayOrderLTE(v int) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldDisplayOrder, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TeamMember {
	return predicate.TeamMember(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TeamMember {
	return predicate.TeamMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TeamMember {
	return predicate.TeamMember(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TeamMember) predicate.TeamMember {
	return predicate.TeamMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TeamMember) predicate.TeamMember {
	return predicate.TeamMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TeamMember) predicate.TeamMember {
	return predicate.TeamMember(sql.NotPredicates(p))
}
