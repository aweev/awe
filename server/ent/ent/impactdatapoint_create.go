// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImpactDataPointCreate is the builder for creating a ImpactDataPoint entity.
type ImpactDataPointCreate struct {
	config
	mutation *ImpactDataPointMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetValue sets the "value" field.
func (_c *ImpactDataPointCreate) SetValue(v float64) *ImpactDataPointCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetRecordedAt sets the "recorded_at" field.
func (_c *ImpactDataPointCreate) SetRecordedAt(v time.Time) *ImpactDataPointCreate {
	_c.mutation.SetRecordedAt(v)
	return _c
}

// SetNillableRecordedAt sets the "recorded_at" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableRecordedAt(v *time.Time) *ImpactDataPointCreate {
	if v != nil {
		_c.SetRecordedAt(*v)
	}
	return _c
}

// SetRecordedBy sets the "recorded_by" field.
func (_c *ImpactDataPointCreate) SetRecordedBy(v string) *ImpactDataPointCreate {
	_c.mutation.SetRecordedBy(v)
	return _c
}

// SetNillableRecordedBy sets the "recorded_by" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableRecordedBy(v *string) *ImpactDataPointCreate {
	if v != nil {
		_c.SetRecordedBy(*v)
	}
	return _c
}

// SetPeriod sets the "period" field.
func (_c *ImpactDataPointCreate) SetPeriod(v string) *ImpactDataPointCreate {
	_c.mutation.SetPeriod(v)
	return _c
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillablePeriod(v *string) *ImpactDataPointCreate {
	if v != nil {
		_c.SetPeriod(*v)
	}
	return _c
}

// SetNotes sets the "notes" field.
func (_c *ImpactDataPointCreate) SetNotes(v string) *ImpactDataPointCreate {
	_c.mutation.SetNotes(v)
	return _c
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableNotes(v *string) *ImpactDataPointCreate {
	if v != nil {
		_c.SetNotes(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *ImpactDataPointCreate) SetSource(v string) *ImpactDataPointCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableSource(v *string) *ImpactDataPointCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetIsVerified sets the "is_verified" field.
func (_c *ImpactDataPointCreate) SetIsVerified(v bool) *ImpactDataPointCreate {
	_c.mutation.SetIsVerified(v)
	return _c
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableIsVerified(v *bool) *ImpactDataPointCreate {
	if v != nil {
		_c.SetIsVerified(*v)
	}
	return _c
}

// SetVerifiedBy sets the "verified_by" field.
func (_c *ImpactDataPointCreate) SetVerifiedBy(v string) *ImpactDataPointCreate {
	_c.mutation.SetVerifiedBy(v)
	return _c
}

// SetNillableVerifiedBy sets the "verified_by" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableVerifiedBy(v *string) *ImpactDataPointCreate {
	if v != nil {
		_c.SetVerifiedBy(*v)
	}
	return _c
}

// SetVerifiedAt sets the "verified_at" field.
func (_c *ImpactDataPointCreate) SetVerifiedAt(v time.Time) *ImpactDataPointCreate {
	_c.mutation.SetVerifiedAt(v)
	return _c
}

// SetNillableVerifiedAt sets the "verified_at" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableVerifiedAt(v *time.Time) *ImpactDataPointCreate {
	if v != nil {
		_c.SetVerifiedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ImpactDataPointCreate) SetCreatedAt(v time.Time) *ImpactDataPointCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableCreatedAt(v *time.Time) *ImpactDataPointCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ImpactDataPointCreate) SetUpdatedAt(v time.Time) *ImpactDataPointCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ImpactDataPointCreate) SetNillableUpdatedAt(v *time.Time) *ImpactDataPointCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetMetricID sets the "metric" edge to the ImpactMetric entity by ID.
func (_c *ImpactDataPointCreate) SetMetricID(id int) *ImpactDataPointCreate {
	_c.mutation.SetMetricID(id)
	return _c
}

// SetMetric sets the "metric" edge to the ImpactMetric entity.
func (_c *ImpactDataPointCreate) SetMetric(v *ImpactMetric) *ImpactDataPointCreate {
	return _c.SetMetricID(v.ID)
}

// Mutation returns the ImpactDataPointMutation object of the builder.
func (_c *ImpactDataPointCreate) Mutation() *ImpactDataPointMutation {
	return _c.mutation
}

// Save creates the ImpactDataPoint in the database.
func (_c *ImpactDataPointCreate) Save(ctx context.Context) (*ImpactDataPoint, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ImpactDataPointCreate) SaveX(ctx context.Context) *ImpactDataPoint {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpactDataPointCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpactDataPointCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ImpactDataPointCreate) defaults() {
	if _, ok := _c.mutation.RecordedAt(); !ok {
		v := impactdatapoint.DefaultRecordedAt()
		_c.mutation.SetRecordedAt(v)
	}
	if _, ok := _c.mutation.IsVerified(); !ok {
		v := impactdatapoint.DefaultIsVerified
		_c.mutation.SetIsVerified(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := impactdatapoint.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := impactdatapoint.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ImpactDataPointCreate) check() error {
	if _, ok := _c.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "ImpactDataPoint.value"`)}
	}
	if _, ok := _c.mutation.RecordedAt(); !ok {
		return &ValidationError{Name: "recorded_at", err: errors.New(`ent: missing required field "ImpactDataPoint.recorded_at"`)}
	}
	if _, ok := _c.mutation.IsVerified(); !ok {
		return &ValidationError{Name: "is_verified", err: errors.New(`ent: missing required field "ImpactDataPoint.is_verified"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImpactDataPoint.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImpactDataPoint.updated_at"`)}
	}
	if len(_c.mutation.MetricIDs()) == 0 {
		return &ValidationError{Name: "metric", err: errors.New(`ent: missing required edge "ImpactDataPoint.metric"`)}
	}
	return nil
}

func (_c *ImpactDataPointCreate) sqlSave(ctx context.Context) (*ImpactDataPoint, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ImpactDataPointCreate) createSpec() (*ImpactDataPoint, *sqlgraph.CreateSpec) {
	var (
		_node = &ImpactDataPoint{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(impactdatapoint.Table, sqlgraph.NewFieldSpec(impactdatapoint.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(impactdatapoint.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := _c.mutation.RecordedAt(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedAt, field.TypeTime, value)
		_node.RecordedAt = value
	}
	if value, ok := _c.mutation.RecordedBy(); ok {
		_spec.SetField(impactdatapoint.FieldRecordedBy, field.TypeString, value)
		_node.RecordedBy = value
	}
	if value, ok := _c.mutation.Period(); ok {
		_spec.SetField(impactdatapoint.FieldPeriod, field.TypeString, value)
		_node.Period = value
	}
	if value, ok := _c.mutation.Notes(); ok {
		_spec.SetField(impactdatapoint.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(impactdatapoint.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := _c.mutation.IsVerified(); ok {
		_spec.SetField(impactdatapoint.FieldIsVerified, field.TypeBool, value)
		_node.IsVerified = value
	}
	if value, ok := _c.mutation.VerifiedBy(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedBy, field.TypeString, value)
		_node.VerifiedBy = value
	}
	if value, ok := _c.mutation.VerifiedAt(); ok {
		_spec.SetField(impactdatapoint.FieldVerifiedAt, field.TypeTime, value)
		_node.VerifiedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(impactdatapoint.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(impactdatapoint.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.impact_metric_data_points = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImpactDataPoint.Create().
//		SetValue(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImpactDataPointUpsert) {
//			SetValue(v+v).
//		}).
//		Exec(ctx)
func (_c *ImpactDataPointCreate) OnConflict(opts ...sql.ConflictOption) *ImpactDataPointUpsertOne {
	_c.conflict = opts
	return &ImpactDataPointUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ImpactDataPointCreate) OnConflictColumns(columns ...string) *ImpactDataPointUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ImpactDataPointUpsertOne{
		create: _c,
	}
}

type (
	// ImpactDataPointUpsertOne is the builder for "upsert"-ing
	//  one ImpactDataPoint node.
	ImpactDataPointUpsertOne struct {
		create *ImpactDataPointCreate
	}

	// ImpactDataPointUpsert is the "OnConflict" setter.
	ImpactDataPointUpsert struct {
		*sql.UpdateSet
	}
)

// SetValue sets the "value" field.
func (u *ImpactDataPointUpsert) SetValue(v float64) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateValue() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *ImpactDataPointUpsert) AddValue(v float64) *ImpactDataPointUpsert {
	u.Add(impactdatapoint.FieldValue, v)
	return u
}

// SetRecordedAt sets the "recorded_at" field.
func (u *ImpactDataPointUpsert) SetRecordedAt(v time.Time) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldRecordedAt, v)
	return u
}

// UpdateRecordedAt sets the "recorded_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateRecordedAt() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldRecordedAt)
	return u
}

// SetRecordedBy sets the "recorded_by" field.
func (u *ImpactDataPointUpsert) SetRecordedBy(v string) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldRecordedBy, v)
	return u
}

// UpdateRecordedBy sets the "recorded_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateRecordedBy() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldRecordedBy)
	return u
}

// ClearRecordedBy clears the value of the "recorded_by" field.
func (u *ImpactDataPointUpsert) ClearRecordedBy() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldRecordedBy)
	return u
}

// SetPeriod sets the "period" field.
func (u *ImpactDataPointUpsert) SetPeriod(v string) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldPeriod, v)
	return u
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdatePeriod() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldPeriod)
	return u
}

// ClearPeriod clears the value of the "period" field.
func (u *ImpactDataPointUpsert) ClearPeriod() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldPeriod)
	return u
}

// SetNotes sets the "notes" field.
func (u *ImpactDataPointUpsert) SetNotes(v string) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateNotes() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *ImpactDataPointUpsert) ClearNotes() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldNotes)
	return u
}

// SetSource sets the "source" field.
func (u *ImpactDataPointUpsert) SetSource(v string) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateSource() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *ImpactDataPointUpsert) ClearSource() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldSource)
	return u
}

// SetIsVerified sets the "is_verified" field.
func (u *ImpactDataPointUpsert) SetIsVerified(v bool) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldIsVerified, v)
	return u
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateIsVerified() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldIsVerified)
	return u
}

// SetVerifiedBy sets the "verified_by" field.
func (u *ImpactDataPointUpsert) SetVerifiedBy(v string) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldVerifiedBy, v)
	return u
}

// UpdateVerifiedBy sets the "verified_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateVerifiedBy() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldVerifiedBy)
	return u
}

// ClearVerifiedBy clears the value of the "verified_by" field.
func (u *ImpactDataPointUpsert) ClearVerifiedBy() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldVerifiedBy)
	return u
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ImpactDataPointUpsert) SetVerifiedAt(v time.Time) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldVerifiedAt, v)
	return u
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateVerifiedAt() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldVerifiedAt)
	return u
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ImpactDataPointUpsert) ClearVerifiedAt() *ImpactDataPointUpsert {
	u.SetNull(impactdatapoint.FieldVerifiedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactDataPointUpsert) SetUpdatedAt(v time.Time) *ImpactDataPointUpsert {
	u.Set(impactdatapoint.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsert) UpdateUpdatedAt() *ImpactDataPointUpsert {
	u.SetExcluded(impactdatapoint.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImpactDataPointUpsertOne) UpdateNewValues() *ImpactDataPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(impactdatapoint.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ImpactDataPointUpsertOne) Ignore() *ImpactDataPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImpactDataPointUpsertOne) DoNothing() *ImpactDataPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImpactDataPointCreate.OnConflict
// documentation for more info.
func (u *ImpactDataPointUpsertOne) Update(set func(*ImpactDataPointUpsert)) *ImpactDataPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImpactDataPointUpsert{UpdateSet: update})
	}))
	return u
}

// SetValue sets the "value" field.
func (u *ImpactDataPointUpsertOne) SetValue(v float64) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *ImpactDataPointUpsertOne) AddValue(v float64) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateValue() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateValue()
	})
}

// SetRecordedAt sets the "recorded_at" field.
func (u *ImpactDataPointUpsertOne) SetRecordedAt(v time.Time) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetRecordedAt(v)
	})
}

// UpdateRecordedAt sets the "recorded_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateRecordedAt() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateRecordedAt()
	})
}

// SetRecordedBy sets the "recorded_by" field.
func (u *ImpactDataPointUpsertOne) SetRecordedBy(v string) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetRecordedBy(v)
	})
}

// UpdateRecordedBy sets the "recorded_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateRecordedBy() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateRecordedBy()
	})
}

// ClearRecordedBy clears the value of the "recorded_by" field.
func (u *ImpactDataPointUpsertOne) ClearRecordedBy() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearRecordedBy()
	})
}

// SetPeriod sets the "period" field.
func (u *ImpactDataPointUpsertOne) SetPeriod(v string) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdatePeriod() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdatePeriod()
	})
}

// ClearPeriod clears the value of the "period" field.
func (u *ImpactDataPointUpsertOne) ClearPeriod() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearPeriod()
	})
}

// SetNotes sets the "notes" field.
func (u *ImpactDataPointUpsertOne) SetNotes(v string) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateNotes() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ImpactDataPointUpsertOne) ClearNotes() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearNotes()
	})
}

// SetSource sets the "source" field.
func (u *ImpactDataPointUpsertOne) SetSource(v string) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateSource() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ImpactDataPointUpsertOne) ClearSource() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearSource()
	})
}

// SetIsVerified sets the "is_verified" field.
func (u *ImpactDataPointUpsertOne) SetIsVerified(v bool) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetIsVerified(v)
	})
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateIsVerified() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateIsVerified()
	})
}

// SetVerifiedBy sets the "verified_by" field.
func (u *ImpactDataPointUpsertOne) SetVerifiedBy(v string) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetVerifiedBy(v)
	})
}

// UpdateVerifiedBy sets the "verified_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateVerifiedBy() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateVerifiedBy()
	})
}

// ClearVerifiedBy clears the value of the "verified_by" field.
func (u *ImpactDataPointUpsertOne) ClearVerifiedBy() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearVerifiedBy()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ImpactDataPointUpsertOne) SetVerifiedAt(v time.Time) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateVerifiedAt() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ImpactDataPointUpsertOne) ClearVerifiedAt() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearVerifiedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactDataPointUpsertOne) SetUpdatedAt(v time.Time) *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertOne) UpdateUpdatedAt() *ImpactDataPointUpsertOne {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ImpactDataPointUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImpactDataPointCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImpactDataPointUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ImpactDataPointUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ImpactDataPointUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ImpactDataPointCreateBulk is the builder for creating many ImpactDataPoint entities in bulk.
type ImpactDataPointCreateBulk struct {
	config
	err      error
	builders []*ImpactDataPointCreate
	conflict []sql.ConflictOption
}

// Save creates the ImpactDataPoint entities in the database.
func (_c *ImpactDataPointCreateBulk) Save(ctx context.Context) ([]*ImpactDataPoint, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ImpactDataPoint, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImpactDataPointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ImpactDataPointCreateBulk) SaveX(ctx context.Context) []*ImpactDataPoint {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpactDataPointCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpactDataPointCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ImpactDataPoint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ImpactDataPointUpsert) {
//			SetValue(v+v).
//		}).
//		Exec(ctx)
func (_c *ImpactDataPointCreateBulk) OnConflict(opts ...sql.ConflictOption) *ImpactDataPointUpsertBulk {
	_c.conflict = opts
	return &ImpactDataPointUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ImpactDataPointCreateBulk) OnConflictColumns(columns ...string) *ImpactDataPointUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ImpactDataPointUpsertBulk{
		create: _c,
	}
}

// ImpactDataPointUpsertBulk is the builder for "upsert"-ing
// a bulk of ImpactDataPoint nodes.
type ImpactDataPointUpsertBulk struct {
	create *ImpactDataPointCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ImpactDataPointUpsertBulk) UpdateNewValues() *ImpactDataPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(impactdatapoint.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ImpactDataPoint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ImpactDataPointUpsertBulk) Ignore() *ImpactDataPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ImpactDataPointUpsertBulk) DoNothing() *ImpactDataPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ImpactDataPointCreateBulk.OnConflict
// documentation for more info.
func (u *ImpactDataPointUpsertBulk) Update(set func(*ImpactDataPointUpsert)) *ImpactDataPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ImpactDataPointUpsert{UpdateSet: update})
	}))
	return u
}

// SetValue sets the "value" field.
func (u *ImpactDataPointUpsertBulk) SetValue(v float64) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *ImpactDataPointUpsertBulk) AddValue(v float64) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateValue() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateValue()
	})
}

// SetRecordedAt sets the "recorded_at" field.
func (u *ImpactDataPointUpsertBulk) SetRecordedAt(v time.Time) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetRecordedAt(v)
	})
}

// UpdateRecordedAt sets the "recorded_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateRecordedAt() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateRecordedAt()
	})
}

// SetRecordedBy sets the "recorded_by" field.
func (u *ImpactDataPointUpsertBulk) SetRecordedBy(v string) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetRecordedBy(v)
	})
}

// UpdateRecordedBy sets the "recorded_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateRecordedBy() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateRecordedBy()
	})
}

// ClearRecordedBy clears the value of the "recorded_by" field.
func (u *ImpactDataPointUpsertBulk) ClearRecordedBy() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearRecordedBy()
	})
}

// SetPeriod sets the "period" field.
func (u *ImpactDataPointUpsertBulk) SetPeriod(v string) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdatePeriod() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdatePeriod()
	})
}

// ClearPeriod clears the value of the "period" field.
func (u *ImpactDataPointUpsertBulk) ClearPeriod() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearPeriod()
	})
}

// SetNotes sets the "notes" field.
func (u *ImpactDataPointUpsertBulk) SetNotes(v string) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateNotes() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ImpactDataPointUpsertBulk) ClearNotes() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearNotes()
	})
}

// SetSource sets the "source" field.
func (u *ImpactDataPointUpsertBulk) SetSource(v string) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateSource() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *ImpactDataPointUpsertBulk) ClearSource() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearSource()
	})
}

// SetIsVerified sets the "is_verified" field.
func (u *ImpactDataPointUpsertBulk) SetIsVerified(v bool) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetIsVerified(v)
	})
}

// UpdateIsVerified sets the "is_verified" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateIsVerified() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateIsVerified()
	})
}

// SetVerifiedBy sets the "verified_by" field.
func (u *ImpactDataPointUpsertBulk) SetVerifiedBy(v string) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetVerifiedBy(v)
	})
}

// UpdateVerifiedBy sets the "verified_by" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateVerifiedBy() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateVerifiedBy()
	})
}

// ClearVerifiedBy clears the value of the "verified_by" field.
func (u *ImpactDataPointUpsertBulk) ClearVerifiedBy() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearVerifiedBy()
	})
}

// SetVerifiedAt sets the "verified_at" field.
func (u *ImpactDataPointUpsertBulk) SetVerifiedAt(v time.Time) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetVerifiedAt(v)
	})
}

// UpdateVerifiedAt sets the "verified_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateVerifiedAt() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateVerifiedAt()
	})
}

// ClearVerifiedAt clears the value of the "verified_at" field.
func (u *ImpactDataPointUpsertBulk) ClearVerifiedAt() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.ClearVerifiedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ImpactDataPointUpsertBulk) SetUpdatedAt(v time.Time) *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ImpactDataPointUpsertBulk) UpdateUpdatedAt() *ImpactDataPointUpsertBulk {
	return u.Update(func(s *ImpactDataPointUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ImpactDataPointUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ImpactDataPointCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ImpactDataPointCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ImpactDataPointUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
