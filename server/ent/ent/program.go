// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/programcategory"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Program is the model entity for the Program schema.
type Program struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// Tagline holds the value of the "tagline" field.
	Tagline map[string]string `json:"tagline,omitempty"`
	// Status holds the value of the "status" field.
	Status program.Status `json:"status,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// HeroImageURL holds the value of the "hero_image_url" field.
	HeroImageURL string `json:"hero_image_url,omitempty"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// VideoThumbnailURL holds the value of the "video_thumbnail_url" field.
	VideoThumbnailURL string `json:"video_thumbnail_url,omitempty"`
	// MediaGallery holds the value of the "media_gallery" field.
	MediaGallery []string `json:"media_gallery,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Metrics holds the value of the "metrics" field.
	Metrics []map[string]interface{} `json:"metrics,omitempty"`
	// Curriculum holds the value of the "curriculum" field.
	Curriculum []map[string]interface{} `json:"curriculum,omitempty"`
	// EligibilityCriteria holds the value of the "eligibility_criteria" field.
	EligibilityCriteria []map[string]interface{} `json:"eligibility_criteria,omitempty"`
	// ApplicationSteps holds the value of the "application_steps" field.
	ApplicationSteps []map[string]interface{} `json:"application_steps,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// ApplicationDeadline holds the value of the "application_deadline" field.
	ApplicationDeadline time.Time `json:"application_deadline,omitempty"`
	// Requirements holds the value of the "requirements" field.
	Requirements []string `json:"requirements,omitempty"`
	// MinAge holds the value of the "min_age" field.
	MinAge int `json:"min_age,omitempty"`
	// MaxAge holds the value of the "max_age" field.
	MaxAge int `json:"max_age,omitempty"`
	// RequiredDocs holds the value of the "required_docs" field.
	RequiredDocs []string `json:"required_docs,omitempty"`
	// Cost holds the value of the "cost" field.
	Cost float64 `json:"cost,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// Rules holds the value of the "rules" field.
	Rules []string `json:"rules,omitempty"`
	// Steps holds the value of the "steps" field.
	Steps []map[string]interface{} `json:"steps,omitempty"`
	// RequiredSkills holds the value of the "required_skills" field.
	RequiredSkills []string `json:"required_skills,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramQuery when eager-loading is set.
	Edges                     ProgramEdges `json:"edges"`
	program_category_programs *int
	user_created_programs     *int
	user_updated_programs     *int
	selectValues              sql.SelectValues
}

// ProgramEdges holds the relations/edges for other nodes in the graph.
type ProgramEdges struct {
	// Category holds the value of the category edge.
	Category *ProgramCategory `json:"category,omitempty"`
	// Enrolments holds the value of the enrolments edge.
	Enrolments []*ProgramEnrolment `json:"enrolments,omitempty"`
	// Participants holds the value of the participants edge.
	Participants []*ProgramParticipant `json:"participants,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updated_by,omitempty"`
	// ProgramCardItems holds the value of the program_card_items edge.
	ProgramCardItems []*ProgramCardItem `json:"program_card_items,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// SuccessStories holds the value of the success_stories edge.
	SuccessStories []*SuccessStory `json:"success_stories,omitempty"`
	// VolunteerOpportunities holds the value of the volunteer_opportunities edge.
	VolunteerOpportunities []*VolunteerOpportunity `json:"volunteer_opportunities,omitempty"`
	// FundraisingCampaigns holds the value of the fundraising_campaigns edge.
	FundraisingCampaigns []*FundraisingCampaign `json:"fundraising_campaigns,omitempty"`
	// Donations holds the value of the donations edge.
	Donations []*Donation `json:"donations,omitempty"`
	// Grants holds the value of the grants edge.
	Grants []*Grant `json:"grants,omitempty"`
	// SiteVisits holds the value of the site_visits edge.
	SiteVisits []*SiteVisit `json:"site_visits,omitempty"`
	// ImpactMetrics holds the value of the impact_metrics edge.
	ImpactMetrics []*ImpactMetric `json:"impact_metrics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramEdges) CategoryOrErr() (*ProgramCategory, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: programcategory.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// EnrolmentsOrErr returns the Enrolments value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) EnrolmentsOrErr() ([]*ProgramEnrolment, error) {
	if e.loadedTypes[1] {
		return e.Enrolments, nil
	}
	return nil, &NotLoadedError{edge: "enrolments"}
}

// ParticipantsOrErr returns the Participants value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) ParticipantsOrErr() ([]*ProgramParticipant, error) {
	if e.loadedTypes[2] {
		return e.Participants, nil
	}
	return nil, &NotLoadedError{edge: "participants"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramEdges) UpdatedByOrErr() (*User, error) {
	if e.UpdatedBy != nil {
		return e.UpdatedBy, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// ProgramCardItemsOrErr returns the ProgramCardItems value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) ProgramCardItemsOrErr() ([]*ProgramCardItem, error) {
	if e.loadedTypes[5] {
		return e.ProgramCardItems, nil
	}
	return nil, &NotLoadedError{edge: "program_card_items"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[6] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SuccessStoriesOrErr returns the SuccessStories value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) SuccessStoriesOrErr() ([]*SuccessStory, error) {
	if e.loadedTypes[7] {
		return e.SuccessStories, nil
	}
	return nil, &NotLoadedError{edge: "success_stories"}
}

// VolunteerOpportunitiesOrErr returns the VolunteerOpportunities value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) VolunteerOpportunitiesOrErr() ([]*VolunteerOpportunity, error) {
	if e.loadedTypes[8] {
		return e.VolunteerOpportunities, nil
	}
	return nil, &NotLoadedError{edge: "volunteer_opportunities"}
}

// FundraisingCampaignsOrErr returns the FundraisingCampaigns value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) FundraisingCampaignsOrErr() ([]*FundraisingCampaign, error) {
	if e.loadedTypes[9] {
		return e.FundraisingCampaigns, nil
	}
	return nil, &NotLoadedError{edge: "fundraising_campaigns"}
}

// DonationsOrErr returns the Donations value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) DonationsOrErr() ([]*Donation, error) {
	if e.loadedTypes[10] {
		return e.Donations, nil
	}
	return nil, &NotLoadedError{edge: "donations"}
}

// GrantsOrErr returns the Grants value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) GrantsOrErr() ([]*Grant, error) {
	if e.loadedTypes[11] {
		return e.Grants, nil
	}
	return nil, &NotLoadedError{edge: "grants"}
}

// SiteVisitsOrErr returns the SiteVisits value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) SiteVisitsOrErr() ([]*SiteVisit, error) {
	if e.loadedTypes[12] {
		return e.SiteVisits, nil
	}
	return nil, &NotLoadedError{edge: "site_visits"}
}

// ImpactMetricsOrErr returns the ImpactMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) ImpactMetricsOrErr() ([]*ImpactMetric, error) {
	if e.loadedTypes[13] {
		return e.ImpactMetrics, nil
	}
	return nil, &NotLoadedError{edge: "impact_metrics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Program) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case program.FieldName, program.FieldDescription, program.FieldTagline, program.FieldMediaGallery, program.FieldTags, program.FieldMetrics, program.FieldCurriculum, program.FieldEligibilityCriteria, program.FieldApplicationSteps, program.FieldRequirements, program.FieldRequiredDocs, program.FieldRules, program.FieldSteps, program.FieldRequiredSkills:
			values[i] = new([]byte)
		case program.FieldCost:
			values[i] = new(sql.NullFloat64)
		case program.FieldID, program.FieldCapacity, program.FieldMinAge, program.FieldMaxAge:
			values[i] = new(sql.NullInt64)
		case program.FieldSlug, program.FieldStatus, program.FieldHeroImageURL, program.FieldThumbnailURL, program.FieldVideoThumbnailURL, program.FieldDuration, program.FieldCurrency:
			values[i] = new(sql.NullString)
		case program.FieldStartDate, program.FieldEndDate, program.FieldApplicationDeadline, program.FieldCreatedAt, program.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case program.ForeignKeys[0]: // program_category_programs
			values[i] = new(sql.NullInt64)
		case program.ForeignKeys[1]: // user_created_programs
			values[i] = new(sql.NullInt64)
		case program.ForeignKeys[2]: // user_updated_programs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Program fields.
func (_m *Program) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case program.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case program.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case program.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case program.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case program.FieldTagline:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tagline", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tagline); err != nil {
					return fmt.Errorf("unmarshal field tagline: %w", err)
				}
			}
		case program.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = program.Status(value.String)
			}
		case program.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case program.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case program.FieldHeroImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hero_image_url", values[i])
			} else if value.Valid {
				_m.HeroImageURL = value.String
			}
		case program.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				_m.ThumbnailURL = value.String
			}
		case program.FieldVideoThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_thumbnail_url", values[i])
			} else if value.Valid {
				_m.VideoThumbnailURL = value.String
			}
		case program.FieldMediaGallery:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_gallery", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.MediaGallery); err != nil {
					return fmt.Errorf("unmarshal field media_gallery: %w", err)
				}
			}
		case program.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case program.FieldMetrics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metrics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metrics); err != nil {
					return fmt.Errorf("unmarshal field metrics: %w", err)
				}
			}
		case program.FieldCurriculum:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field curriculum", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Curriculum); err != nil {
					return fmt.Errorf("unmarshal field curriculum: %w", err)
				}
			}
		case program.FieldEligibilityCriteria:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field eligibility_criteria", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.EligibilityCriteria); err != nil {
					return fmt.Errorf("unmarshal field eligibility_criteria: %w", err)
				}
			}
		case program.FieldApplicationSteps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field application_steps", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ApplicationSteps); err != nil {
					return fmt.Errorf("unmarshal field application_steps: %w", err)
				}
			}
		case program.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = value.String
			}
		case program.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				_m.Capacity = int(value.Int64)
			}
		case program.FieldApplicationDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field application_deadline", values[i])
			} else if value.Valid {
				_m.ApplicationDeadline = value.Time
			}
		case program.FieldRequirements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field requirements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Requirements); err != nil {
					return fmt.Errorf("unmarshal field requirements: %w", err)
				}
			}
		case program.FieldMinAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_age", values[i])
			} else if value.Valid {
				_m.MinAge = int(value.Int64)
			}
		case program.FieldMaxAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_age", values[i])
			} else if value.Valid {
				_m.MaxAge = int(value.Int64)
			}
		case program.FieldRequiredDocs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field required_docs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RequiredDocs); err != nil {
					return fmt.Errorf("unmarshal field required_docs: %w", err)
				}
			}
		case program.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				_m.Cost = value.Float64
			}
		case program.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case program.FieldRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Rules); err != nil {
					return fmt.Errorf("unmarshal field rules: %w", err)
				}
			}
		case program.FieldSteps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field steps", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Steps); err != nil {
					return fmt.Errorf("unmarshal field steps: %w", err)
				}
			}
		case program.FieldRequiredSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field required_skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RequiredSkills); err != nil {
					return fmt.Errorf("unmarshal field required_skills: %w", err)
				}
			}
		case program.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case program.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case program.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_category_programs", value)
			} else if value.Valid {
				_m.program_category_programs = new(int)
				*_m.program_category_programs = int(value.Int64)
			}
		case program.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_programs", value)
			} else if value.Valid {
				_m.user_created_programs = new(int)
				*_m.user_created_programs = int(value.Int64)
			}
		case program.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_updated_programs", value)
			} else if value.Valid {
				_m.user_updated_programs = new(int)
				*_m.user_updated_programs = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Program.
// This includes values selected through modifiers, order, etc.
func (_m *Program) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the Program entity.
func (_m *Program) QueryCategory() *ProgramCategoryQuery {
	return NewProgramClient(_m.config).QueryCategory(_m)
}

// QueryEnrolments queries the "enrolments" edge of the Program entity.
func (_m *Program) QueryEnrolments() *ProgramEnrolmentQuery {
	return NewProgramClient(_m.config).QueryEnrolments(_m)
}

// QueryParticipants queries the "participants" edge of the Program entity.
func (_m *Program) QueryParticipants() *ProgramParticipantQuery {
	return NewProgramClient(_m.config).QueryParticipants(_m)
}

// QueryCreatedBy queries the "created_by" edge of the Program entity.
func (_m *Program) QueryCreatedBy() *UserQuery {
	return NewProgramClient(_m.config).QueryCreatedBy(_m)
}

// QueryUpdatedBy queries the "updated_by" edge of the Program entity.
func (_m *Program) QueryUpdatedBy() *UserQuery {
	return NewProgramClient(_m.config).QueryUpdatedBy(_m)
}

// QueryProgramCardItems queries the "program_card_items" edge of the Program entity.
func (_m *Program) QueryProgramCardItems() *ProgramCardItemQuery {
	return NewProgramClient(_m.config).QueryProgramCardItems(_m)
}

// QueryEvents queries the "events" edge of the Program entity.
func (_m *Program) QueryEvents() *EventQuery {
	return NewProgramClient(_m.config).QueryEvents(_m)
}

// QuerySuccessStories queries the "success_stories" edge of the Program entity.
func (_m *Program) QuerySuccessStories() *SuccessStoryQuery {
	return NewProgramClient(_m.config).QuerySuccessStories(_m)
}

// QueryVolunteerOpportunities queries the "volunteer_opportunities" edge of the Program entity.
func (_m *Program) QueryVolunteerOpportunities() *VolunteerOpportunityQuery {
	return NewProgramClient(_m.config).QueryVolunteerOpportunities(_m)
}

// QueryFundraisingCampaigns queries the "fundraising_campaigns" edge of the Program entity.
func (_m *Program) QueryFundraisingCampaigns() *FundraisingCampaignQuery {
	return NewProgramClient(_m.config).QueryFundraisingCampaigns(_m)
}

// QueryDonations queries the "donations" edge of the Program entity.
func (_m *Program) QueryDonations() *DonationQuery {
	return NewProgramClient(_m.config).QueryDonations(_m)
}

// QueryGrants queries the "grants" edge of the Program entity.
func (_m *Program) QueryGrants() *GrantQuery {
	return NewProgramClient(_m.config).QueryGrants(_m)
}

// QuerySiteVisits queries the "site_visits" edge of the Program entity.
func (_m *Program) QuerySiteVisits() *SiteVisitQuery {
	return NewProgramClient(_m.config).QuerySiteVisits(_m)
}

// QueryImpactMetrics queries the "impact_metrics" edge of the Program entity.
func (_m *Program) QueryImpactMetrics() *ImpactMetricQuery {
	return NewProgramClient(_m.config).QueryImpactMetrics(_m)
}

// Update returns a builder for updating this Program.
// Note that you need to call Program.Unwrap() before calling this method if this Program
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Program) Update() *ProgramUpdateOne {
	return NewProgramClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Program entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Program) Unwrap() *Program {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Program is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Program) String() string {
	var builder strings.Builder
	builder.WriteString("Program(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("tagline=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tagline))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hero_image_url=")
	builder.WriteString(_m.HeroImageURL)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(_m.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("video_thumbnail_url=")
	builder.WriteString(_m.VideoThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("media_gallery=")
	builder.WriteString(fmt.Sprintf("%v", _m.MediaGallery))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("metrics=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metrics))
	builder.WriteString(", ")
	builder.WriteString("curriculum=")
	builder.WriteString(fmt.Sprintf("%v", _m.Curriculum))
	builder.WriteString(", ")
	builder.WriteString("eligibility_criteria=")
	builder.WriteString(fmt.Sprintf("%v", _m.EligibilityCriteria))
	builder.WriteString(", ")
	builder.WriteString("application_steps=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApplicationSteps))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(_m.Duration)
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Capacity))
	builder.WriteString(", ")
	builder.WriteString("application_deadline=")
	builder.WriteString(_m.ApplicationDeadline.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("requirements=")
	builder.WriteString(fmt.Sprintf("%v", _m.Requirements))
	builder.WriteString(", ")
	builder.WriteString("min_age=")
	builder.WriteString(fmt.Sprintf("%v", _m.MinAge))
	builder.WriteString(", ")
	builder.WriteString("max_age=")
	builder.WriteString(fmt.Sprintf("%v", _m.MaxAge))
	builder.WriteString(", ")
	builder.WriteString("required_docs=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiredDocs))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", _m.Cost))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rules))
	builder.WriteString(", ")
	builder.WriteString("steps=")
	builder.WriteString(fmt.Sprintf("%v", _m.Steps))
	builder.WriteString(", ")
	builder.WriteString("required_skills=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiredSkills))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Programs is a parsable slice of Program.
type Programs []*Program
