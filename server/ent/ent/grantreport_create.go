// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GrantReportCreate is the builder for creating a GrantReport entity.
type GrantReportCreate struct {
	config
	mutation *GrantReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (_c *GrantReportCreate) SetTitle(v string) *GrantReportCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDueDate sets the "due_date" field.
func (_c *GrantReportCreate) SetDueDate(v time.Time) *GrantReportCreate {
	_c.mutation.SetDueDate(v)
	return _c
}

// SetSubmittedDate sets the "submitted_date" field.
func (_c *GrantReportCreate) SetSubmittedDate(v time.Time) *GrantReportCreate {
	_c.mutation.SetSubmittedDate(v)
	return _c
}

// SetNillableSubmittedDate sets the "submitted_date" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableSubmittedDate(v *time.Time) *GrantReportCreate {
	if v != nil {
		_c.SetSubmittedDate(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *GrantReportCreate) SetStatus(v grantreport.Status) *GrantReportCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableStatus(v *grantreport.Status) *GrantReportCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetDocumentURL sets the "document_url" field.
func (_c *GrantReportCreate) SetDocumentURL(v string) *GrantReportCreate {
	_c.mutation.SetDocumentURL(v)
	return _c
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableDocumentURL(v *string) *GrantReportCreate {
	if v != nil {
		_c.SetDocumentURL(*v)
	}
	return _c
}

// SetReportType sets the "report_type" field.
func (_c *GrantReportCreate) SetReportType(v string) *GrantReportCreate {
	_c.mutation.SetReportType(v)
	return _c
}

// SetNillableReportType sets the "report_type" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableReportType(v *string) *GrantReportCreate {
	if v != nil {
		_c.SetReportType(*v)
	}
	return _c
}

// SetReviewedBy sets the "reviewed_by" field.
func (_c *GrantReportCreate) SetReviewedBy(v string) *GrantReportCreate {
	_c.mutation.SetReviewedBy(v)
	return _c
}

// SetNillableReviewedBy sets the "reviewed_by" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableReviewedBy(v *string) *GrantReportCreate {
	if v != nil {
		_c.SetReviewedBy(*v)
	}
	return _c
}

// SetReviewedAt sets the "reviewed_at" field.
func (_c *GrantReportCreate) SetReviewedAt(v time.Time) *GrantReportCreate {
	_c.mutation.SetReviewedAt(v)
	return _c
}

// SetNillableReviewedAt sets the "reviewed_at" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableReviewedAt(v *time.Time) *GrantReportCreate {
	if v != nil {
		_c.SetReviewedAt(*v)
	}
	return _c
}

// SetFeedback sets the "feedback" field.
func (_c *GrantReportCreate) SetFeedback(v string) *GrantReportCreate {
	_c.mutation.SetFeedback(v)
	return _c
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableFeedback(v *string) *GrantReportCreate {
	if v != nil {
		_c.SetFeedback(*v)
	}
	return _c
}

// SetIsApproved sets the "is_approved" field.
func (_c *GrantReportCreate) SetIsApproved(v bool) *GrantReportCreate {
	_c.mutation.SetIsApproved(v)
	return _c
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableIsApproved(v *bool) *GrantReportCreate {
	if v != nil {
		_c.SetIsApproved(*v)
	}
	return _c
}

// SetNextDueDate sets the "next_due_date" field.
func (_c *GrantReportCreate) SetNextDueDate(v time.Time) *GrantReportCreate {
	_c.mutation.SetNextDueDate(v)
	return _c
}

// SetNillableNextDueDate sets the "next_due_date" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableNextDueDate(v *time.Time) *GrantReportCreate {
	if v != nil {
		_c.SetNextDueDate(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GrantReportCreate) SetCreatedAt(v time.Time) *GrantReportCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableCreatedAt(v *time.Time) *GrantReportCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GrantReportCreate) SetUpdatedAt(v time.Time) *GrantReportCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GrantReportCreate) SetNillableUpdatedAt(v *time.Time) *GrantReportCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetGrantID sets the "grant" edge to the Grant entity by ID.
func (_c *GrantReportCreate) SetGrantID(id int) *GrantReportCreate {
	_c.mutation.SetGrantID(id)
	return _c
}

// SetGrant sets the "grant" edge to the Grant entity.
func (_c *GrantReportCreate) SetGrant(v *Grant) *GrantReportCreate {
	return _c.SetGrantID(v.ID)
}

// Mutation returns the GrantReportMutation object of the builder.
func (_c *GrantReportCreate) Mutation() *GrantReportMutation {
	return _c.mutation
}

// Save creates the GrantReport in the database.
func (_c *GrantReportCreate) Save(ctx context.Context) (*GrantReport, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GrantReportCreate) SaveX(ctx context.Context) *GrantReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantReportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantReportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GrantReportCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := grantreport.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ReportType(); !ok {
		v := grantreport.DefaultReportType
		_c.mutation.SetReportType(v)
	}
	if _, ok := _c.mutation.IsApproved(); !ok {
		v := grantreport.DefaultIsApproved
		_c.mutation.SetIsApproved(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := grantreport.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := grantreport.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GrantReportCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "GrantReport.title"`)}
	}
	if _, ok := _c.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`ent: missing required field "GrantReport.due_date"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GrantReport.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := grantreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantReport.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ReportType(); !ok {
		return &ValidationError{Name: "report_type", err: errors.New(`ent: missing required field "GrantReport.report_type"`)}
	}
	if _, ok := _c.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "GrantReport.is_approved"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GrantReport.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GrantReport.updated_at"`)}
	}
	if len(_c.mutation.GrantIDs()) == 0 {
		return &ValidationError{Name: "grant", err: errors.New(`ent: missing required edge "GrantReport.grant"`)}
	}
	return nil
}

func (_c *GrantReportCreate) sqlSave(ctx context.Context) (*GrantReport, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GrantReportCreate) createSpec() (*GrantReport, *sqlgraph.CreateSpec) {
	var (
		_node = &GrantReport{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(grantreport.Table, sqlgraph.NewFieldSpec(grantreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(grantreport.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.DueDate(); ok {
		_spec.SetField(grantreport.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := _c.mutation.SubmittedDate(); ok {
		_spec.SetField(grantreport.FieldSubmittedDate, field.TypeTime, value)
		_node.SubmittedDate = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(grantreport.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.DocumentURL(); ok {
		_spec.SetField(grantreport.FieldDocumentURL, field.TypeString, value)
		_node.DocumentURL = value
	}
	if value, ok := _c.mutation.ReportType(); ok {
		_spec.SetField(grantreport.FieldReportType, field.TypeString, value)
		_node.ReportType = value
	}
	if value, ok := _c.mutation.ReviewedBy(); ok {
		_spec.SetField(grantreport.FieldReviewedBy, field.TypeString, value)
		_node.ReviewedBy = value
	}
	if value, ok := _c.mutation.ReviewedAt(); ok {
		_spec.SetField(grantreport.FieldReviewedAt, field.TypeTime, value)
		_node.ReviewedAt = value
	}
	if value, ok := _c.mutation.Feedback(); ok {
		_spec.SetField(grantreport.FieldFeedback, field.TypeString, value)
		_node.Feedback = value
	}
	if value, ok := _c.mutation.IsApproved(); ok {
		_spec.SetField(grantreport.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := _c.mutation.NextDueDate(); ok {
		_spec.SetField(grantreport.FieldNextDueDate, field.TypeTime, value)
		_node.NextDueDate = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(grantreport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(grantreport.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.GrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.grant_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GrantReport.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantReportUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantReportCreate) OnConflict(opts ...sql.ConflictOption) *GrantReportUpsertOne {
	_c.conflict = opts
	return &GrantReportUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantReportCreate) OnConflictColumns(columns ...string) *GrantReportUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantReportUpsertOne{
		create: _c,
	}
}

type (
	// GrantReportUpsertOne is the builder for "upsert"-ing
	//  one GrantReport node.
	GrantReportUpsertOne struct {
		create *GrantReportCreate
	}

	// GrantReportUpsert is the "OnConflict" setter.
	GrantReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *GrantReportUpsert) SetTitle(v string) *GrantReportUpsert {
	u.Set(grantreport.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateTitle() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldTitle)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *GrantReportUpsert) SetDueDate(v time.Time) *GrantReportUpsert {
	u.Set(grantreport.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateDueDate() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldDueDate)
	return u
}

// SetSubmittedDate sets the "submitted_date" field.
func (u *GrantReportUpsert) SetSubmittedDate(v time.Time) *GrantReportUpsert {
	u.Set(grantreport.FieldSubmittedDate, v)
	return u
}

// UpdateSubmittedDate sets the "submitted_date" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateSubmittedDate() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldSubmittedDate)
	return u
}

// ClearSubmittedDate clears the value of the "submitted_date" field.
func (u *GrantReportUpsert) ClearSubmittedDate() *GrantReportUpsert {
	u.SetNull(grantreport.FieldSubmittedDate)
	return u
}

// SetStatus sets the "status" field.
func (u *GrantReportUpsert) SetStatus(v grantreport.Status) *GrantReportUpsert {
	u.Set(grantreport.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateStatus() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldStatus)
	return u
}

// SetDocumentURL sets the "document_url" field.
func (u *GrantReportUpsert) SetDocumentURL(v string) *GrantReportUpsert {
	u.Set(grantreport.FieldDocumentURL, v)
	return u
}

// UpdateDocumentURL sets the "document_url" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateDocumentURL() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldDocumentURL)
	return u
}

// ClearDocumentURL clears the value of the "document_url" field.
func (u *GrantReportUpsert) ClearDocumentURL() *GrantReportUpsert {
	u.SetNull(grantreport.FieldDocumentURL)
	return u
}

// SetReportType sets the "report_type" field.
func (u *GrantReportUpsert) SetReportType(v string) *GrantReportUpsert {
	u.Set(grantreport.FieldReportType, v)
	return u
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateReportType() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldReportType)
	return u
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *GrantReportUpsert) SetReviewedBy(v string) *GrantReportUpsert {
	u.Set(grantreport.FieldReviewedBy, v)
	return u
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateReviewedBy() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldReviewedBy)
	return u
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *GrantReportUpsert) ClearReviewedBy() *GrantReportUpsert {
	u.SetNull(grantreport.FieldReviewedBy)
	return u
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *GrantReportUpsert) SetReviewedAt(v time.Time) *GrantReportUpsert {
	u.Set(grantreport.FieldReviewedAt, v)
	return u
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateReviewedAt() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldReviewedAt)
	return u
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *GrantReportUpsert) ClearReviewedAt() *GrantReportUpsert {
	u.SetNull(grantreport.FieldReviewedAt)
	return u
}

// SetFeedback sets the "feedback" field.
func (u *GrantReportUpsert) SetFeedback(v string) *GrantReportUpsert {
	u.Set(grantreport.FieldFeedback, v)
	return u
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateFeedback() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldFeedback)
	return u
}

// ClearFeedback clears the value of the "feedback" field.
func (u *GrantReportUpsert) ClearFeedback() *GrantReportUpsert {
	u.SetNull(grantreport.FieldFeedback)
	return u
}

// SetIsApproved sets the "is_approved" field.
func (u *GrantReportUpsert) SetIsApproved(v bool) *GrantReportUpsert {
	u.Set(grantreport.FieldIsApproved, v)
	return u
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateIsApproved() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldIsApproved)
	return u
}

// SetNextDueDate sets the "next_due_date" field.
func (u *GrantReportUpsert) SetNextDueDate(v time.Time) *GrantReportUpsert {
	u.Set(grantreport.FieldNextDueDate, v)
	return u
}

// UpdateNextDueDate sets the "next_due_date" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateNextDueDate() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldNextDueDate)
	return u
}

// ClearNextDueDate clears the value of the "next_due_date" field.
func (u *GrantReportUpsert) ClearNextDueDate() *GrantReportUpsert {
	u.SetNull(grantreport.FieldNextDueDate)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantReportUpsert) SetUpdatedAt(v time.Time) *GrantReportUpsert {
	u.Set(grantreport.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantReportUpsert) UpdateUpdatedAt() *GrantReportUpsert {
	u.SetExcluded(grantreport.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GrantReportUpsertOne) UpdateNewValues() *GrantReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(grantreport.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GrantReportUpsertOne) Ignore() *GrantReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantReportUpsertOne) DoNothing() *GrantReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantReportCreate.OnConflict
// documentation for more info.
func (u *GrantReportUpsertOne) Update(set func(*GrantReportUpsert)) *GrantReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *GrantReportUpsertOne) SetTitle(v string) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateTitle() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateTitle()
	})
}

// SetDueDate sets the "due_date" field.
func (u *GrantReportUpsertOne) SetDueDate(v time.Time) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateDueDate() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateDueDate()
	})
}

// SetSubmittedDate sets the "submitted_date" field.
func (u *GrantReportUpsertOne) SetSubmittedDate(v time.Time) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetSubmittedDate(v)
	})
}

// UpdateSubmittedDate sets the "submitted_date" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateSubmittedDate() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateSubmittedDate()
	})
}

// ClearSubmittedDate clears the value of the "submitted_date" field.
func (u *GrantReportUpsertOne) ClearSubmittedDate() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearSubmittedDate()
	})
}

// SetStatus sets the "status" field.
func (u *GrantReportUpsertOne) SetStatus(v grantreport.Status) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateStatus() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateStatus()
	})
}

// SetDocumentURL sets the "document_url" field.
func (u *GrantReportUpsertOne) SetDocumentURL(v string) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetDocumentURL(v)
	})
}

// UpdateDocumentURL sets the "document_url" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateDocumentURL() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateDocumentURL()
	})
}

// ClearDocumentURL clears the value of the "document_url" field.
func (u *GrantReportUpsertOne) ClearDocumentURL() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearDocumentURL()
	})
}

// SetReportType sets the "report_type" field.
func (u *GrantReportUpsertOne) SetReportType(v string) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReportType(v)
	})
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateReportType() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReportType()
	})
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *GrantReportUpsertOne) SetReviewedBy(v string) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReviewedBy(v)
	})
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateReviewedBy() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReviewedBy()
	})
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *GrantReportUpsertOne) ClearReviewedBy() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearReviewedBy()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *GrantReportUpsertOne) SetReviewedAt(v time.Time) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateReviewedAt() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *GrantReportUpsertOne) ClearReviewedAt() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearReviewedAt()
	})
}

// SetFeedback sets the "feedback" field.
func (u *GrantReportUpsertOne) SetFeedback(v string) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateFeedback() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *GrantReportUpsertOne) ClearFeedback() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearFeedback()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *GrantReportUpsertOne) SetIsApproved(v bool) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateIsApproved() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateIsApproved()
	})
}

// SetNextDueDate sets the "next_due_date" field.
func (u *GrantReportUpsertOne) SetNextDueDate(v time.Time) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetNextDueDate(v)
	})
}

// UpdateNextDueDate sets the "next_due_date" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateNextDueDate() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateNextDueDate()
	})
}

// ClearNextDueDate clears the value of the "next_due_date" field.
func (u *GrantReportUpsertOne) ClearNextDueDate() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearNextDueDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantReportUpsertOne) SetUpdatedAt(v time.Time) *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantReportUpsertOne) UpdateUpdatedAt() *GrantReportUpsertOne {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GrantReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GrantReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GrantReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GrantReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GrantReportCreateBulk is the builder for creating many GrantReport entities in bulk.
type GrantReportCreateBulk struct {
	config
	err      error
	builders []*GrantReportCreate
	conflict []sql.ConflictOption
}

// Save creates the GrantReport entities in the database.
func (_c *GrantReportCreateBulk) Save(ctx context.Context) ([]*GrantReport, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*GrantReport, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GrantReportCreateBulk) SaveX(ctx context.Context) []*GrantReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantReportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantReportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GrantReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GrantReportUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *GrantReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *GrantReportUpsertBulk {
	_c.conflict = opts
	return &GrantReportUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GrantReportCreateBulk) OnConflictColumns(columns ...string) *GrantReportUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GrantReportUpsertBulk{
		create: _c,
	}
}

// GrantReportUpsertBulk is the builder for "upsert"-ing
// a bulk of GrantReport nodes.
type GrantReportUpsertBulk struct {
	create *GrantReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GrantReportUpsertBulk) UpdateNewValues() *GrantReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(grantreport.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GrantReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GrantReportUpsertBulk) Ignore() *GrantReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GrantReportUpsertBulk) DoNothing() *GrantReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GrantReportCreateBulk.OnConflict
// documentation for more info.
func (u *GrantReportUpsertBulk) Update(set func(*GrantReportUpsert)) *GrantReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GrantReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *GrantReportUpsertBulk) SetTitle(v string) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateTitle() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateTitle()
	})
}

// SetDueDate sets the "due_date" field.
func (u *GrantReportUpsertBulk) SetDueDate(v time.Time) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateDueDate() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateDueDate()
	})
}

// SetSubmittedDate sets the "submitted_date" field.
func (u *GrantReportUpsertBulk) SetSubmittedDate(v time.Time) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetSubmittedDate(v)
	})
}

// UpdateSubmittedDate sets the "submitted_date" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateSubmittedDate() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateSubmittedDate()
	})
}

// ClearSubmittedDate clears the value of the "submitted_date" field.
func (u *GrantReportUpsertBulk) ClearSubmittedDate() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearSubmittedDate()
	})
}

// SetStatus sets the "status" field.
func (u *GrantReportUpsertBulk) SetStatus(v grantreport.Status) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateStatus() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateStatus()
	})
}

// SetDocumentURL sets the "document_url" field.
func (u *GrantReportUpsertBulk) SetDocumentURL(v string) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetDocumentURL(v)
	})
}

// UpdateDocumentURL sets the "document_url" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateDocumentURL() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateDocumentURL()
	})
}

// ClearDocumentURL clears the value of the "document_url" field.
func (u *GrantReportUpsertBulk) ClearDocumentURL() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearDocumentURL()
	})
}

// SetReportType sets the "report_type" field.
func (u *GrantReportUpsertBulk) SetReportType(v string) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReportType(v)
	})
}

// UpdateReportType sets the "report_type" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateReportType() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReportType()
	})
}

// SetReviewedBy sets the "reviewed_by" field.
func (u *GrantReportUpsertBulk) SetReviewedBy(v string) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReviewedBy(v)
	})
}

// UpdateReviewedBy sets the "reviewed_by" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateReviewedBy() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReviewedBy()
	})
}

// ClearReviewedBy clears the value of the "reviewed_by" field.
func (u *GrantReportUpsertBulk) ClearReviewedBy() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearReviewedBy()
	})
}

// SetReviewedAt sets the "reviewed_at" field.
func (u *GrantReportUpsertBulk) SetReviewedAt(v time.Time) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetReviewedAt(v)
	})
}

// UpdateReviewedAt sets the "reviewed_at" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateReviewedAt() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateReviewedAt()
	})
}

// ClearReviewedAt clears the value of the "reviewed_at" field.
func (u *GrantReportUpsertBulk) ClearReviewedAt() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearReviewedAt()
	})
}

// SetFeedback sets the "feedback" field.
func (u *GrantReportUpsertBulk) SetFeedback(v string) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetFeedback(v)
	})
}

// UpdateFeedback sets the "feedback" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateFeedback() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateFeedback()
	})
}

// ClearFeedback clears the value of the "feedback" field.
func (u *GrantReportUpsertBulk) ClearFeedback() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearFeedback()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *GrantReportUpsertBulk) SetIsApproved(v bool) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateIsApproved() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateIsApproved()
	})
}

// SetNextDueDate sets the "next_due_date" field.
func (u *GrantReportUpsertBulk) SetNextDueDate(v time.Time) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetNextDueDate(v)
	})
}

// UpdateNextDueDate sets the "next_due_date" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateNextDueDate() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateNextDueDate()
	})
}

// ClearNextDueDate clears the value of the "next_due_date" field.
func (u *GrantReportUpsertBulk) ClearNextDueDate() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.ClearNextDueDate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GrantReportUpsertBulk) SetUpdatedAt(v time.Time) *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GrantReportUpsertBulk) UpdateUpdatedAt() *GrantReportUpsertBulk {
	return u.Update(func(s *GrantReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *GrantReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GrantReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GrantReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GrantReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
