// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MentorshipRequest is the model entity for the MentorshipRequest schema.
type MentorshipRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status mentorshiprequest.Status `json:"status,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals []string `json:"goals,omitempty"`
	// Preferences holds the value of the "preferences" field.
	Preferences map[string]string `json:"preferences,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// MatchedAt holds the value of the "matched_at" field.
	MatchedAt time.Time `json:"matched_at,omitempty"`
	// MatchedBy holds the value of the "matched_by" field.
	MatchedBy string `json:"matched_by,omitempty"`
	// MatchReason holds the value of the "match_reason" field.
	MatchReason string `json:"match_reason,omitempty"`
	// SessionsCompleted holds the value of the "sessions_completed" field.
	SessionsCompleted int `json:"sessions_completed,omitempty"`
	// LastSessionDate holds the value of the "last_session_date" field.
	LastSessionDate time.Time `json:"last_session_date,omitempty"`
	// NextSessionDate holds the value of the "next_session_date" field.
	NextSessionDate time.Time `json:"next_session_date,omitempty"`
	// CompletionNotes holds the value of the "completion_notes" field.
	CompletionNotes string `json:"completion_notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MentorshipRequestQuery when eager-loading is set.
	Edges                      MentorshipRequestEdges `json:"edges"`
	user_mentorship_requests   *int
	user_mentorships_mentoring *int
	selectValues               sql.SelectValues
}

// MentorshipRequestEdges holds the relations/edges for other nodes in the graph.
type MentorshipRequestEdges struct {
	// Requester holds the value of the requester edge.
	Requester *User `json:"requester,omitempty"`
	// Mentor holds the value of the mentor edge.
	Mentor *User `json:"mentor,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*MentorshipSession `json:"sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MentorshipRequestEdges) RequesterOrErr() (*User, error) {
	if e.Requester != nil {
		return e.Requester, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// MentorOrErr returns the Mentor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MentorshipRequestEdges) MentorOrErr() (*User, error) {
	if e.Mentor != nil {
		return e.Mentor, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "mentor"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e MentorshipRequestEdges) SessionsOrErr() ([]*MentorshipSession, error) {
	if e.loadedTypes[2] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MentorshipRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mentorshiprequest.FieldGoals, mentorshiprequest.FieldPreferences:
			values[i] = new([]byte)
		case mentorshiprequest.FieldID, mentorshiprequest.FieldSessionsCompleted:
			values[i] = new(sql.NullInt64)
		case mentorshiprequest.FieldStatus, mentorshiprequest.FieldDuration, mentorshiprequest.FieldMatchedBy, mentorshiprequest.FieldMatchReason, mentorshiprequest.FieldCompletionNotes:
			values[i] = new(sql.NullString)
		case mentorshiprequest.FieldMatchedAt, mentorshiprequest.FieldLastSessionDate, mentorshiprequest.FieldNextSessionDate, mentorshiprequest.FieldCreatedAt, mentorshiprequest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case mentorshiprequest.ForeignKeys[0]: // user_mentorship_requests
			values[i] = new(sql.NullInt64)
		case mentorshiprequest.ForeignKeys[1]: // user_mentorships_mentoring
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MentorshipRequest fields.
func (_m *MentorshipRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mentorshiprequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case mentorshiprequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = mentorshiprequest.Status(value.String)
			}
		case mentorshiprequest.FieldGoals:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Goals); err != nil {
					return fmt.Errorf("unmarshal field goals: %w", err)
				}
			}
		case mentorshiprequest.FieldPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field preferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Preferences); err != nil {
					return fmt.Errorf("unmarshal field preferences: %w", err)
				}
			}
		case mentorshiprequest.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = value.String
			}
		case mentorshiprequest.FieldMatchedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field matched_at", values[i])
			} else if value.Valid {
				_m.MatchedAt = value.Time
			}
		case mentorshiprequest.FieldMatchedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field matched_by", values[i])
			} else if value.Valid {
				_m.MatchedBy = value.String
			}
		case mentorshiprequest.FieldMatchReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field match_reason", values[i])
			} else if value.Valid {
				_m.MatchReason = value.String
			}
		case mentorshiprequest.FieldSessionsCompleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sessions_completed", values[i])
			} else if value.Valid {
				_m.SessionsCompleted = int(value.Int64)
			}
		case mentorshiprequest.FieldLastSessionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_session_date", values[i])
			} else if value.Valid {
				_m.LastSessionDate = value.Time
			}
		case mentorshiprequest.FieldNextSessionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_session_date", values[i])
			} else if value.Valid {
				_m.NextSessionDate = value.Time
			}
		case mentorshiprequest.FieldCompletionNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field completion_notes", values[i])
			} else if value.Valid {
				_m.CompletionNotes = value.String
			}
		case mentorshiprequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case mentorshiprequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case mentorshiprequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_mentorship_requests", value)
			} else if value.Valid {
				_m.user_mentorship_requests = new(int)
				*_m.user_mentorship_requests = int(value.Int64)
			}
		case mentorshiprequest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_mentorships_mentoring", value)
			} else if value.Valid {
				_m.user_mentorships_mentoring = new(int)
				*_m.user_mentorships_mentoring = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MentorshipRequest.
// This includes values selected through modifiers, order, etc.
func (_m *MentorshipRequest) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRequester queries the "requester" edge of the MentorshipRequest entity.
func (_m *MentorshipRequest) QueryRequester() *UserQuery {
	return NewMentorshipRequestClient(_m.config).QueryRequester(_m)
}

// QueryMentor queries the "mentor" edge of the MentorshipRequest entity.
func (_m *MentorshipRequest) QueryMentor() *UserQuery {
	return NewMentorshipRequestClient(_m.config).QueryMentor(_m)
}

// QuerySessions queries the "sessions" edge of the MentorshipRequest entity.
func (_m *MentorshipRequest) QuerySessions() *MentorshipSessionQuery {
	return NewMentorshipRequestClient(_m.config).QuerySessions(_m)
}

// Update returns a builder for updating this MentorshipRequest.
// Note that you need to call MentorshipRequest.Unwrap() before calling this method if this MentorshipRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *MentorshipRequest) Update() *MentorshipRequestUpdateOne {
	return NewMentorshipRequestClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the MentorshipRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *MentorshipRequest) Unwrap() *MentorshipRequest {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: MentorshipRequest is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *MentorshipRequest) String() string {
	var builder strings.Builder
	builder.WriteString("MentorshipRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", _m.Goals))
	builder.WriteString(", ")
	builder.WriteString("preferences=")
	builder.WriteString(fmt.Sprintf("%v", _m.Preferences))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(_m.Duration)
	builder.WriteString(", ")
	builder.WriteString("matched_at=")
	builder.WriteString(_m.MatchedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("matched_by=")
	builder.WriteString(_m.MatchedBy)
	builder.WriteString(", ")
	builder.WriteString("match_reason=")
	builder.WriteString(_m.MatchReason)
	builder.WriteString(", ")
	builder.WriteString("sessions_completed=")
	builder.WriteString(fmt.Sprintf("%v", _m.SessionsCompleted))
	builder.WriteString(", ")
	builder.WriteString("last_session_date=")
	builder.WriteString(_m.LastSessionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("next_session_date=")
	builder.WriteString(_m.NextSessionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completion_notes=")
	builder.WriteString(_m.CompletionNotes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MentorshipRequests is a parsable slice of MentorshipRequest.
type MentorshipRequests []*MentorshipRequest
