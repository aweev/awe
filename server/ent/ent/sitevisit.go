// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/program"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SiteVisit is the model entity for the SiteVisit schema.
type SiteVisit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RequestedDate holds the value of the "requested_date" field.
	RequestedDate time.Time `json:"requested_date,omitempty"`
	// ScheduledDate holds the value of the "scheduled_date" field.
	ScheduledDate time.Time `json:"scheduled_date,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteVisitQuery when eager-loading is set.
	Edges               SiteVisitEdges `json:"edges"`
	program_site_visits *int
	user_site_visits    *int
	selectValues        sql.SelectValues
}

// SiteVisitEdges holds the relations/edges for other nodes in the graph.
type SiteVisitEdges struct {
	// Donor holds the value of the donor edge.
	Donor *User `json:"donor,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DonorOrErr returns the Donor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteVisitEdges) DonorOrErr() (*User, error) {
	if e.Donor != nil {
		return e.Donor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "donor"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteVisitEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SiteVisit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sitevisit.FieldID:
			values[i] = new(sql.NullInt64)
		case sitevisit.FieldStatus, sitevisit.FieldNotes:
			values[i] = new(sql.NullString)
		case sitevisit.FieldRequestedDate, sitevisit.FieldScheduledDate:
			values[i] = new(sql.NullTime)
		case sitevisit.ForeignKeys[0]: // program_site_visits
			values[i] = new(sql.NullInt64)
		case sitevisit.ForeignKeys[1]: // user_site_visits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SiteVisit fields.
func (_m *SiteVisit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sitevisit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case sitevisit.FieldRequestedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field requested_date", values[i])
			} else if value.Valid {
				_m.RequestedDate = value.Time
			}
		case sitevisit.FieldScheduledDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_date", values[i])
			} else if value.Valid {
				_m.ScheduledDate = value.Time
			}
		case sitevisit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case sitevisit.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				_m.Notes = value.String
			}
		case sitevisit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_site_visits", value)
			} else if value.Valid {
				_m.program_site_visits = new(int)
				*_m.program_site_visits = int(value.Int64)
			}
		case sitevisit.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_site_visits", value)
			} else if value.Valid {
				_m.user_site_visits = new(int)
				*_m.user_site_visits = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SiteVisit.
// This includes values selected through modifiers, order, etc.
func (_m *SiteVisit) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDonor queries the "donor" edge of the SiteVisit entity.
func (_m *SiteVisit) QueryDonor() *UserQuery {
	return NewSiteVisitClient(_m.config).QueryDonor(_m)
}

// QueryProgram queries the "program" edge of the SiteVisit entity.
func (_m *SiteVisit) QueryProgram() *ProgramQuery {
	return NewSiteVisitClient(_m.config).QueryProgram(_m)
}

// Update returns a builder for updating this SiteVisit.
// Note that you need to call SiteVisit.Unwrap() before calling this method if this SiteVisit
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SiteVisit) Update() *SiteVisitUpdateOne {
	return NewSiteVisitClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SiteVisit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SiteVisit) Unwrap() *SiteVisit {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SiteVisit is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SiteVisit) String() string {
	var builder strings.Builder
	builder.WriteString("SiteVisit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("requested_date=")
	builder.WriteString(_m.RequestedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scheduled_date=")
	builder.WriteString(_m.ScheduledDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(_m.Notes)
	builder.WriteByte(')')
	return builder.String()
}

// SiteVisits is a parsable slice of SiteVisit.
type SiteVisits []*SiteVisit
