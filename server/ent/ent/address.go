// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Street1 holds the value of the "street1" field.
	Street1 string `json:"street1,omitempty"`
	// Street2 holds the value of the "street2" field.
	Street2 string `json:"street2,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postal_code,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges        AddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// UserProfiles holds the value of the user_profiles edge.
	UserProfiles []*UserProfile `json:"user_profiles,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserProfilesOrErr returns the UserProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) UserProfilesOrErr() ([]*UserProfile, error) {
	if e.loadedTypes[0] {
		return e.UserProfiles, nil
	}
	return nil, &NotLoadedError{edge: "user_profiles"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			values[i] = new(sql.NullInt64)
		case address.FieldStreet1, address.FieldStreet2, address.FieldCity, address.FieldState, address.FieldPostalCode, address.FieldCountry:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (_m *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case address.FieldStreet1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street1", values[i])
			} else if value.Valid {
				_m.Street1 = value.String
			}
		case address.FieldStreet2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street2", values[i])
			} else if value.Valid {
				_m.Street2 = value.String
			}
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				_m.City = value.String
			}
		case address.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = value.String
			}
		case address.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				_m.PostalCode = value.String
			}
		case address.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				_m.Country = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (_m *Address) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserProfiles queries the "user_profiles" edge of the Address entity.
func (_m *Address) QueryUserProfiles() *UserProfileQuery {
	return NewAddressClient(_m.config).QueryUserProfiles(_m)
}

// QueryEvents queries the "events" edge of the Address entity.
func (_m *Address) QueryEvents() *EventQuery {
	return NewAddressClient(_m.config).QueryEvents(_m)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Address) Update() *AddressUpdateOne {
	return NewAddressClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Address) Unwrap() *Address {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("street1=")
	builder.WriteString(_m.Street1)
	builder.WriteString(", ")
	builder.WriteString("street2=")
	builder.WriteString(_m.Street2)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(_m.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(_m.State)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(_m.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(_m.Country)
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
