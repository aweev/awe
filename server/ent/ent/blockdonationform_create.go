// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockDonationFormCreate is the builder for creating a BlockDonationForm entity.
type BlockDonationFormCreate struct {
	config
	mutation *BlockDonationFormMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockDonationFormCreate) SetInternalName(v string) *BlockDonationFormCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockDonationFormCreate) SetTitle(v map[string]string) *BlockDonationFormCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockDonationFormCreate) SetDescription(v map[string]string) *BlockDonationFormCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (_c *BlockDonationFormCreate) SetShowAmountButtons(v bool) *BlockDonationFormCreate {
	_c.mutation.SetShowAmountButtons(v)
	return _c
}

// SetNillableShowAmountButtons sets the "show_amount_buttons" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableShowAmountButtons(v *bool) *BlockDonationFormCreate {
	if v != nil {
		_c.SetShowAmountButtons(*v)
	}
	return _c
}

// SetDefaultAmounts sets the "default_amounts" field.
func (_c *BlockDonationFormCreate) SetDefaultAmounts(v []int) *BlockDonationFormCreate {
	_c.mutation.SetDefaultAmounts(v)
	return _c
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (_c *BlockDonationFormCreate) SetAllowCustomAmount(v bool) *BlockDonationFormCreate {
	_c.mutation.SetAllowCustomAmount(v)
	return _c
}

// SetNillableAllowCustomAmount sets the "allow_custom_amount" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableAllowCustomAmount(v *bool) *BlockDonationFormCreate {
	if v != nil {
		_c.SetAllowCustomAmount(*v)
	}
	return _c
}

// SetShowRecurring sets the "show_recurring" field.
func (_c *BlockDonationFormCreate) SetShowRecurring(v bool) *BlockDonationFormCreate {
	_c.mutation.SetShowRecurring(v)
	return _c
}

// SetNillableShowRecurring sets the "show_recurring" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableShowRecurring(v *bool) *BlockDonationFormCreate {
	if v != nil {
		_c.SetShowRecurring(*v)
	}
	return _c
}

// SetColorScheme sets the "color_scheme" field.
func (_c *BlockDonationFormCreate) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormCreate {
	_c.mutation.SetColorScheme(v)
	return _c
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableColorScheme(v *blockdonationform.ColorScheme) *BlockDonationFormCreate {
	if v != nil {
		_c.SetColorScheme(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockDonationFormCreate) SetCreatedAt(v time.Time) *BlockDonationFormCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableCreatedAt(v *time.Time) *BlockDonationFormCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockDonationFormCreate) SetUpdatedAt(v time.Time) *BlockDonationFormCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockDonationFormCreate) SetNillableUpdatedAt(v *time.Time) *BlockDonationFormCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockDonationFormCreate) SetContentBlockID(id int) *BlockDonationFormCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockDonationFormCreate) SetContentBlock(v *ContentBlock) *BlockDonationFormCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockDonationFormMutation object of the builder.
func (_c *BlockDonationFormCreate) Mutation() *BlockDonationFormMutation {
	return _c.mutation
}

// Save creates the BlockDonationForm in the database.
func (_c *BlockDonationFormCreate) Save(ctx context.Context) (*BlockDonationForm, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockDonationFormCreate) SaveX(ctx context.Context) *BlockDonationForm {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockDonationFormCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockDonationFormCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockDonationFormCreate) defaults() {
	if _, ok := _c.mutation.ShowAmountButtons(); !ok {
		v := blockdonationform.DefaultShowAmountButtons
		_c.mutation.SetShowAmountButtons(v)
	}
	if _, ok := _c.mutation.AllowCustomAmount(); !ok {
		v := blockdonationform.DefaultAllowCustomAmount
		_c.mutation.SetAllowCustomAmount(v)
	}
	if _, ok := _c.mutation.ShowRecurring(); !ok {
		v := blockdonationform.DefaultShowRecurring
		_c.mutation.SetShowRecurring(v)
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		v := blockdonationform.DefaultColorScheme
		_c.mutation.SetColorScheme(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockdonationform.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockdonationform.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockDonationFormCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockDonationForm.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockDonationForm.title"`)}
	}
	if _, ok := _c.mutation.ShowAmountButtons(); !ok {
		return &ValidationError{Name: "show_amount_buttons", err: errors.New(`ent: missing required field "BlockDonationForm.show_amount_buttons"`)}
	}
	if _, ok := _c.mutation.DefaultAmounts(); !ok {
		return &ValidationError{Name: "default_amounts", err: errors.New(`ent: missing required field "BlockDonationForm.default_amounts"`)}
	}
	if _, ok := _c.mutation.AllowCustomAmount(); !ok {
		return &ValidationError{Name: "allow_custom_amount", err: errors.New(`ent: missing required field "BlockDonationForm.allow_custom_amount"`)}
	}
	if _, ok := _c.mutation.ShowRecurring(); !ok {
		return &ValidationError{Name: "show_recurring", err: errors.New(`ent: missing required field "BlockDonationForm.show_recurring"`)}
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		return &ValidationError{Name: "color_scheme", err: errors.New(`ent: missing required field "BlockDonationForm.color_scheme"`)}
	}
	if v, ok := _c.mutation.ColorScheme(); ok {
		if err := blockdonationform.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockDonationForm.color_scheme": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockDonationForm.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockDonationForm.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockDonationForm.content_block"`)}
	}
	return nil
}

func (_c *BlockDonationFormCreate) sqlSave(ctx context.Context) (*BlockDonationForm, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockDonationFormCreate) createSpec() (*BlockDonationForm, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockDonationForm{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockdonationform.Table, sqlgraph.NewFieldSpec(blockdonationform.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockdonationform.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockdonationform.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockdonationform.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ShowAmountButtons(); ok {
		_spec.SetField(blockdonationform.FieldShowAmountButtons, field.TypeBool, value)
		_node.ShowAmountButtons = value
	}
	if value, ok := _c.mutation.DefaultAmounts(); ok {
		_spec.SetField(blockdonationform.FieldDefaultAmounts, field.TypeJSON, value)
		_node.DefaultAmounts = value
	}
	if value, ok := _c.mutation.AllowCustomAmount(); ok {
		_spec.SetField(blockdonationform.FieldAllowCustomAmount, field.TypeBool, value)
		_node.AllowCustomAmount = value
	}
	if value, ok := _c.mutation.ShowRecurring(); ok {
		_spec.SetField(blockdonationform.FieldShowRecurring, field.TypeBool, value)
		_node.ShowRecurring = value
	}
	if value, ok := _c.mutation.ColorScheme(); ok {
		_spec.SetField(blockdonationform.FieldColorScheme, field.TypeEnum, value)
		_node.ColorScheme = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockdonationform.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockdonationform.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_donation_form = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockDonationForm.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockDonationFormUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockDonationFormCreate) OnConflict(opts ...sql.ConflictOption) *BlockDonationFormUpsertOne {
	_c.conflict = opts
	return &BlockDonationFormUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockDonationFormCreate) OnConflictColumns(columns ...string) *BlockDonationFormUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockDonationFormUpsertOne{
		create: _c,
	}
}

type (
	// BlockDonationFormUpsertOne is the builder for "upsert"-ing
	//  one BlockDonationForm node.
	BlockDonationFormUpsertOne struct {
		create *BlockDonationFormCreate
	}

	// BlockDonationFormUpsert is the "OnConflict" setter.
	BlockDonationFormUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockDonationFormUpsert) SetInternalName(v string) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateInternalName() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockDonationFormUpsert) SetTitle(v map[string]string) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateTitle() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockDonationFormUpsert) SetDescription(v map[string]string) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateDescription() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockDonationFormUpsert) ClearDescription() *BlockDonationFormUpsert {
	u.SetNull(blockdonationform.FieldDescription)
	return u
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (u *BlockDonationFormUpsert) SetShowAmountButtons(v bool) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldShowAmountButtons, v)
	return u
}

// UpdateShowAmountButtons sets the "show_amount_buttons" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateShowAmountButtons() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldShowAmountButtons)
	return u
}

// SetDefaultAmounts sets the "default_amounts" field.
func (u *BlockDonationFormUpsert) SetDefaultAmounts(v []int) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldDefaultAmounts, v)
	return u
}

// UpdateDefaultAmounts sets the "default_amounts" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateDefaultAmounts() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldDefaultAmounts)
	return u
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (u *BlockDonationFormUpsert) SetAllowCustomAmount(v bool) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldAllowCustomAmount, v)
	return u
}

// UpdateAllowCustomAmount sets the "allow_custom_amount" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateAllowCustomAmount() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldAllowCustomAmount)
	return u
}

// SetShowRecurring sets the "show_recurring" field.
func (u *BlockDonationFormUpsert) SetShowRecurring(v bool) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldShowRecurring, v)
	return u
}

// UpdateShowRecurring sets the "show_recurring" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateShowRecurring() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldShowRecurring)
	return u
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockDonationFormUpsert) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldColorScheme, v)
	return u
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateColorScheme() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldColorScheme)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDonationFormUpsert) SetUpdatedAt(v time.Time) *BlockDonationFormUpsert {
	u.Set(blockdonationform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDonationFormUpsert) UpdateUpdatedAt() *BlockDonationFormUpsert {
	u.SetExcluded(blockdonationform.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockDonationFormUpsertOne) UpdateNewValues() *BlockDonationFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockdonationform.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockDonationFormUpsertOne) Ignore() *BlockDonationFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockDonationFormUpsertOne) DoNothing() *BlockDonationFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockDonationFormCreate.OnConflict
// documentation for more info.
func (u *BlockDonationFormUpsertOne) Update(set func(*BlockDonationFormUpsert)) *BlockDonationFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockDonationFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockDonationFormUpsertOne) SetInternalName(v string) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateInternalName() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockDonationFormUpsertOne) SetTitle(v map[string]string) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateTitle() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockDonationFormUpsertOne) SetDescription(v map[string]string) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateDescription() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockDonationFormUpsertOne) ClearDescription() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.ClearDescription()
	})
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (u *BlockDonationFormUpsertOne) SetShowAmountButtons(v bool) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetShowAmountButtons(v)
	})
}

// UpdateShowAmountButtons sets the "show_amount_buttons" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateShowAmountButtons() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateShowAmountButtons()
	})
}

// SetDefaultAmounts sets the "default_amounts" field.
func (u *BlockDonationFormUpsertOne) SetDefaultAmounts(v []int) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetDefaultAmounts(v)
	})
}

// UpdateDefaultAmounts sets the "default_amounts" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateDefaultAmounts() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateDefaultAmounts()
	})
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (u *BlockDonationFormUpsertOne) SetAllowCustomAmount(v bool) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetAllowCustomAmount(v)
	})
}

// UpdateAllowCustomAmount sets the "allow_custom_amount" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateAllowCustomAmount() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateAllowCustomAmount()
	})
}

// SetShowRecurring sets the "show_recurring" field.
func (u *BlockDonationFormUpsertOne) SetShowRecurring(v bool) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetShowRecurring(v)
	})
}

// UpdateShowRecurring sets the "show_recurring" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateShowRecurring() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateShowRecurring()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockDonationFormUpsertOne) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateColorScheme() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDonationFormUpsertOne) SetUpdatedAt(v time.Time) *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDonationFormUpsertOne) UpdateUpdatedAt() *BlockDonationFormUpsertOne {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockDonationFormUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockDonationFormCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockDonationFormUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockDonationFormUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockDonationFormUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockDonationFormCreateBulk is the builder for creating many BlockDonationForm entities in bulk.
type BlockDonationFormCreateBulk struct {
	config
	err      error
	builders []*BlockDonationFormCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockDonationForm entities in the database.
func (_c *BlockDonationFormCreateBulk) Save(ctx context.Context) ([]*BlockDonationForm, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockDonationForm, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockDonationFormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockDonationFormCreateBulk) SaveX(ctx context.Context) []*BlockDonationForm {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockDonationFormCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockDonationFormCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockDonationForm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockDonationFormUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockDonationFormCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockDonationFormUpsertBulk {
	_c.conflict = opts
	return &BlockDonationFormUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockDonationFormCreateBulk) OnConflictColumns(columns ...string) *BlockDonationFormUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockDonationFormUpsertBulk{
		create: _c,
	}
}

// BlockDonationFormUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockDonationForm nodes.
type BlockDonationFormUpsertBulk struct {
	create *BlockDonationFormCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockDonationFormUpsertBulk) UpdateNewValues() *BlockDonationFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockdonationform.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockDonationForm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockDonationFormUpsertBulk) Ignore() *BlockDonationFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockDonationFormUpsertBulk) DoNothing() *BlockDonationFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockDonationFormCreateBulk.OnConflict
// documentation for more info.
func (u *BlockDonationFormUpsertBulk) Update(set func(*BlockDonationFormUpsert)) *BlockDonationFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockDonationFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockDonationFormUpsertBulk) SetInternalName(v string) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateInternalName() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockDonationFormUpsertBulk) SetTitle(v map[string]string) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateTitle() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockDonationFormUpsertBulk) SetDescription(v map[string]string) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateDescription() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockDonationFormUpsertBulk) ClearDescription() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.ClearDescription()
	})
}

// SetShowAmountButtons sets the "show_amount_buttons" field.
func (u *BlockDonationFormUpsertBulk) SetShowAmountButtons(v bool) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetShowAmountButtons(v)
	})
}

// UpdateShowAmountButtons sets the "show_amount_buttons" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateShowAmountButtons() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateShowAmountButtons()
	})
}

// SetDefaultAmounts sets the "default_amounts" field.
func (u *BlockDonationFormUpsertBulk) SetDefaultAmounts(v []int) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetDefaultAmounts(v)
	})
}

// UpdateDefaultAmounts sets the "default_amounts" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateDefaultAmounts() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateDefaultAmounts()
	})
}

// SetAllowCustomAmount sets the "allow_custom_amount" field.
func (u *BlockDonationFormUpsertBulk) SetAllowCustomAmount(v bool) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetAllowCustomAmount(v)
	})
}

// UpdateAllowCustomAmount sets the "allow_custom_amount" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateAllowCustomAmount() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateAllowCustomAmount()
	})
}

// SetShowRecurring sets the "show_recurring" field.
func (u *BlockDonationFormUpsertBulk) SetShowRecurring(v bool) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetShowRecurring(v)
	})
}

// UpdateShowRecurring sets the "show_recurring" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateShowRecurring() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateShowRecurring()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockDonationFormUpsertBulk) SetColorScheme(v blockdonationform.ColorScheme) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateColorScheme() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockDonationFormUpsertBulk) SetUpdatedAt(v time.Time) *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockDonationFormUpsertBulk) UpdateUpdatedAt() *BlockDonationFormUpsertBulk {
	return u.Update(func(s *BlockDonationFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockDonationFormUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockDonationFormCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockDonationFormCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockDonationFormUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
