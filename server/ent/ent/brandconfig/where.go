// Code generated by ent, DO NOT EDIT.

package brandconfig

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLTE(FieldID, id))
}

// Singleton applies equality check predicate on the "singleton" field. It's identical to SingletonEQ.
func Singleton(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldSingleton, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldName, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldLogoURL, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// SingletonEQ applies the EQ predicate on the "singleton" field.
func SingletonEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldSingleton, v))
}

// SingletonNEQ applies the NEQ predicate on the "singleton" field.
func SingletonNEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNEQ(FieldSingleton, v))
}

// SingletonIn applies the In predicate on the "singleton" field.
func SingletonIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIn(FieldSingleton, vs...))
}

// SingletonNotIn applies the NotIn predicate on the "singleton" field.
func SingletonNotIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotIn(FieldSingleton, vs...))
}

// SingletonGT applies the GT predicate on the "singleton" field.
func SingletonGT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGT(FieldSingleton, v))
}

// SingletonGTE applies the GTE predicate on the "singleton" field.
func SingletonGTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGTE(FieldSingleton, v))
}

// SingletonLT applies the LT predicate on the "singleton" field.
func SingletonLT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLT(FieldSingleton, v))
}

// SingletonLTE applies the LTE predicate on the "singleton" field.
func SingletonLTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLTE(FieldSingleton, v))
}

// SingletonContains applies the Contains predicate on the "singleton" field.
func SingletonContains(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContains(FieldSingleton, v))
}

// SingletonHasPrefix applies the HasPrefix predicate on the "singleton" field.
func SingletonHasPrefix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasPrefix(FieldSingleton, v))
}

// SingletonHasSuffix applies the HasSuffix predicate on the "singleton" field.
func SingletonHasSuffix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasSuffix(FieldSingleton, v))
}

// SingletonEqualFold applies the EqualFold predicate on the "singleton" field.
func SingletonEqualFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEqualFold(FieldSingleton, v))
}

// SingletonContainsFold applies the ContainsFold predicate on the "singleton" field.
func SingletonContainsFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContainsFold(FieldSingleton, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContainsFold(FieldName, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldContainsFold(FieldLogoURL, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BrandConfig {
	return predicate.BrandConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BrandConfig) predicate.BrandConfig {
	return predicate.BrandConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BrandConfig) predicate.BrandConfig {
	return predicate.BrandConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BrandConfig) predicate.BrandConfig {
	return predicate.BrandConfig(sql.NotPredicates(p))
}
