// Code generated by ent, DO NOT EDIT.

package brandconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the brandconfig type in the database.
	Label = "brand_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSingleton holds the string denoting the singleton field in the database.
	FieldSingleton = "singleton"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldColors holds the string denoting the colors field in the database.
	FieldColors = "colors"
	// FieldContact holds the string denoting the contact field in the database.
	FieldContact = "contact"
	// FieldSocial holds the string denoting the social field in the database.
	FieldSocial = "social"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the brandconfig in the database.
	Table = "brand_configs"
)

// Columns holds all SQL columns for brandconfig fields.
var Columns = []string{
	FieldID,
	FieldSingleton,
	FieldName,
	FieldLogoURL,
	FieldColors,
	FieldContact,
	FieldSocial,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BrandConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySingleton orders the results by the singleton field.
func BySingleton(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSingleton, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
