// Code generated by ent, DO NOT EDIT.

package analyticsdashboard

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldSlug, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldIsDefault, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldIsPublic, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldUpdatedAt, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotNull(FieldDescription))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldContainsFold(FieldSlug, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldIsDefault, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldIsPublic, v))
}

// SharedWithIsNil applies the IsNil predicate on the "shared_with" field.
func SharedWithIsNil() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIsNull(FieldSharedWith))
}

// SharedWithNotNil applies the NotNil predicate on the "shared_with" field.
func SharedWithNotNil() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotNull(FieldSharedWith))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWidgets applies the HasEdge predicate on the "widgets" edge.
func HasWidgets() predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WidgetsTable, WidgetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWidgetsWith applies the HasEdge predicate on the "widgets" edge with a given conditions (other predicates).
func HasWidgetsWith(preds ...predicate.DashboardWidget) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(func(s *sql.Selector) {
		step := newWidgetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnalyticsDashboard) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnalyticsDashboard) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnalyticsDashboard) predicate.AnalyticsDashboard {
	return predicate.AnalyticsDashboard(sql.NotPredicates(p))
}
