// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/analyticsevent"
	"awe/ent/ent/auditlog"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/document"
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/message"
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/teammember"
	"awe/ent/ent/token"
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"awe/ent/ent/userachievement"
	"awe/ent/ent/userconsent"
	"awe/ent/ent/useronboarding"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/usersession"
	"awe/ent/ent/volunteerapplication"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *UserUpdate) ClearUsername() *UserUpdate {
	_u.mutation.ClearUsername()
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *UserUpdate) SetHashedPassword(v string) *UserUpdate {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *UserUpdate) SetNillableHashedPassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (_u *UserUpdate) ClearHashedPassword() *UserUpdate {
	_u.mutation.ClearHashedPassword()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *UserUpdate) SetIsVerified(v bool) *UserUpdate {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsVerified(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdate) SetEmailVerified(v time.Time) *UserUpdate {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmailVerified(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (_u *UserUpdate) ClearEmailVerified() *UserUpdate {
	_u.mutation.ClearEmailVerified()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdate) SetLastLoginAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdate) ClearLastLoginAt() *UserUpdate {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdate) SetIsActive(v bool) *UserUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsActive(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (_u *UserUpdate) SetDeactivatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetDeactivatedAt(v)
	return _u
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeactivatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetDeactivatedAt(*v)
	}
	return _u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (_u *UserUpdate) ClearDeactivatedAt() *UserUpdate {
	_u.mutation.ClearDeactivatedAt()
	return _u
}

// SetLockedUntil sets the "locked_until" field.
func (_u *UserUpdate) SetLockedUntil(v time.Time) *UserUpdate {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLockedUntil(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (_u *UserUpdate) ClearLockedUntil() *UserUpdate {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (_u *UserUpdate) SetImpersonatingUserID(v string) *UserUpdate {
	_u.mutation.SetImpersonatingUserID(v)
	return _u
}

// SetNillableImpersonatingUserID sets the "impersonating_user_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableImpersonatingUserID(v *string) *UserUpdate {
	if v != nil {
		_u.SetImpersonatingUserID(*v)
	}
	return _u
}

// ClearImpersonatingUserID clears the value of the "impersonating_user_id" field.
func (_u *UserUpdate) ClearImpersonatingUserID() *UserUpdate {
	_u.mutation.ClearImpersonatingUserID()
	return _u
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (_u *UserUpdate) SetSecurityTimestamp(v time.Time) *UserUpdate {
	_u.mutation.SetSecurityTimestamp(v)
	return _u
}

// SetNillableSecurityTimestamp sets the "security_timestamp" field if the given value is not nil.
func (_u *UserUpdate) SetNillableSecurityTimestamp(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetSecurityTimestamp(*v)
	}
	return _u
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (_u *UserUpdate) SetPasswordResetRequired(v bool) *UserUpdate {
	_u.mutation.SetPasswordResetRequired(v)
	return _u
}

// SetNillablePasswordResetRequired sets the "password_reset_required" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePasswordResetRequired(v *bool) *UserUpdate {
	if v != nil {
		_u.SetPasswordResetRequired(*v)
	}
	return _u
}

// SetRoles sets the "roles" field.
func (_u *UserUpdate) SetRoles(v []string) *UserUpdate {
	_u.mutation.SetRoles(v)
	return _u
}

// AppendRoles appends value to the "roles" field.
func (_u *UserUpdate) AppendRoles(v []string) *UserUpdate {
	_u.mutation.AppendRoles(v)
	return _u
}

// SetMfaSecret sets the "mfa_secret" field.
func (_u *UserUpdate) SetMfaSecret(v string) *UserUpdate {
	_u.mutation.SetMfaSecret(v)
	return _u
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMfaSecret(v *string) *UserUpdate {
	if v != nil {
		_u.SetMfaSecret(*v)
	}
	return _u
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (_u *UserUpdate) ClearMfaSecret() *UserUpdate {
	_u.mutation.ClearMfaSecret()
	return _u
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (_u *UserUpdate) SetMfaEnabled(v bool) *UserUpdate {
	_u.mutation.SetMfaEnabled(v)
	return _u
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMfaEnabled(v *bool) *UserUpdate {
	if v != nil {
		_u.SetMfaEnabled(*v)
	}
	return _u
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (_u *UserUpdate) SetOnboardingStartedAt(v time.Time) *UserUpdate {
	_u.mutation.SetOnboardingStartedAt(v)
	return _u
}

// SetNillableOnboardingStartedAt sets the "onboarding_started_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingStartedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetOnboardingStartedAt(*v)
	}
	return _u
}

// ClearOnboardingStartedAt clears the value of the "onboarding_started_at" field.
func (_u *UserUpdate) ClearOnboardingStartedAt() *UserUpdate {
	_u.mutation.ClearOnboardingStartedAt()
	return _u
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (_u *UserUpdate) SetOnboardingCompletedAt(v time.Time) *UserUpdate {
	_u.mutation.SetOnboardingCompletedAt(v)
	return _u
}

// SetNillableOnboardingCompletedAt sets the "onboarding_completed_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingCompletedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetOnboardingCompletedAt(*v)
	}
	return _u
}

// ClearOnboardingCompletedAt clears the value of the "onboarding_completed_at" field.
func (_u *UserUpdate) ClearOnboardingCompletedAt() *UserUpdate {
	_u.mutation.ClearOnboardingCompletedAt()
	return _u
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (_u *UserUpdate) SetOnboardingSkipped(v bool) *UserUpdate {
	_u.mutation.SetOnboardingSkipped(v)
	return _u
}

// SetNillableOnboardingSkipped sets the "onboarding_skipped" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingSkipped(v *bool) *UserUpdate {
	if v != nil {
		_u.SetOnboardingSkipped(*v)
	}
	return _u
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (_u *UserUpdate) SetOnboardingVersion(v string) *UserUpdate {
	_u.mutation.SetOnboardingVersion(v)
	return _u
}

// SetNillableOnboardingVersion sets the "onboarding_version" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingVersion(v *string) *UserUpdate {
	if v != nil {
		_u.SetOnboardingVersion(*v)
	}
	return _u
}

// ClearOnboardingVersion clears the value of the "onboarding_version" field.
func (_u *UserUpdate) ClearOnboardingVersion() *UserUpdate {
	_u.mutation.ClearOnboardingVersion()
	return _u
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (_u *UserUpdate) SetOnboardingCompleted(v bool) *UserUpdate {
	_u.mutation.SetOnboardingCompleted(v)
	return _u
}

// SetNillableOnboardingCompleted sets the "onboarding_completed" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingCompleted(v *bool) *UserUpdate {
	if v != nil {
		_u.SetOnboardingCompleted(*v)
	}
	return _u
}

// SetPosition sets the "position" field.
func (_u *UserUpdate) SetPosition(v string) *UserUpdate {
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePosition(v *string) *UserUpdate {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// ClearPosition clears the value of the "position" field.
func (_u *UserUpdate) ClearPosition() *UserUpdate {
	_u.mutation.ClearPosition()
	return _u
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (_u *UserUpdate) SetAnalyticsProperties(v map[string]interface{}) *UserUpdate {
	_u.mutation.SetAnalyticsProperties(v)
	return _u
}

// ClearAnalyticsProperties clears the value of the "analytics_properties" field.
func (_u *UserUpdate) ClearAnalyticsProperties() *UserUpdate {
	_u.mutation.ClearAnalyticsProperties()
	return _u
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (_u *UserUpdate) SetProfileID(id int) *UserUpdate {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableProfileID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetProfileID(*id)
	}
	return _u
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (_u *UserUpdate) SetProfile(v *UserProfile) *UserUpdate {
	return _u.SetProfileID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (_u *UserUpdate) AddSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (_u *UserUpdate) AddSessions(v ...*UserSession) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (_u *UserUpdate) AddTokenIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTokenIDs(ids...)
	return _u
}

// AddTokens adds the "tokens" edges to the Token entity.
func (_u *UserUpdate) AddTokens(v ...*Token) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTokenIDs(ids...)
}

// AddTrustedDeviceIDs adds the "trusted_devices" edge to the TrustedDevice entity by IDs.
func (_u *UserUpdate) AddTrustedDeviceIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTrustedDeviceIDs(ids...)
	return _u
}

// AddTrustedDevices adds the "trusted_devices" edges to the TrustedDevice entity.
func (_u *UserUpdate) AddTrustedDevices(v ...*TrustedDevice) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustedDeviceIDs(ids...)
}

// AddPasswordHistoryIDs adds the "password_history" edge to the PasswordHistory entity by IDs.
func (_u *UserUpdate) AddPasswordHistoryIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPasswordHistoryIDs(ids...)
	return _u
}

// AddPasswordHistory adds the "password_history" edges to the PasswordHistory entity.
func (_u *UserUpdate) AddPasswordHistory(v ...*PasswordHistory) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPasswordHistoryIDs(ids...)
}

// SetTeamMemberID sets the "team_member" edge to the TeamMember entity by ID.
func (_u *UserUpdate) SetTeamMemberID(id int) *UserUpdate {
	_u.mutation.SetTeamMemberID(id)
	return _u
}

// SetNillableTeamMemberID sets the "team_member" edge to the TeamMember entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableTeamMemberID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetTeamMemberID(*id)
	}
	return _u
}

// SetTeamMember sets the "team_member" edge to the TeamMember entity.
func (_u *UserUpdate) SetTeamMember(v *TeamMember) *UserUpdate {
	return _u.SetTeamMemberID(v.ID)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (_u *UserUpdate) AddAuditLogIDs(ids ...int) *UserUpdate {
	_u.mutation.AddAuditLogIDs(ids...)
	return _u
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (_u *UserUpdate) AddAuditLogs(v ...*AuditLog) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuditLogIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_u *UserUpdate) AddJobIDs(ids ...int) *UserUpdate {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_u *UserUpdate) AddJobs(v ...*Job) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// AddDashboardIDs adds the "dashboards" edge to the AnalyticsDashboard entity by IDs.
func (_u *UserUpdate) AddDashboardIDs(ids ...int) *UserUpdate {
	_u.mutation.AddDashboardIDs(ids...)
	return _u
}

// AddDashboards adds the "dashboards" edges to the AnalyticsDashboard entity.
func (_u *UserUpdate) AddDashboards(v ...*AnalyticsDashboard) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDashboardIDs(ids...)
}

// AddAnalyticsEventIDs adds the "analytics_events" edge to the AnalyticsEvent entity by IDs.
func (_u *UserUpdate) AddAnalyticsEventIDs(ids ...int) *UserUpdate {
	_u.mutation.AddAnalyticsEventIDs(ids...)
	return _u
}

// AddAnalyticsEvents adds the "analytics_events" edges to the AnalyticsEvent entity.
func (_u *UserUpdate) AddAnalyticsEvents(v ...*AnalyticsEvent) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAnalyticsEventIDs(ids...)
}

// AddCreatedReportIDs adds the "created_reports" edge to the ReportDefinition entity by IDs.
func (_u *UserUpdate) AddCreatedReportIDs(ids ...int) *UserUpdate {
	_u.mutation.AddCreatedReportIDs(ids...)
	return _u
}

// AddCreatedReports adds the "created_reports" edges to the ReportDefinition entity.
func (_u *UserUpdate) AddCreatedReports(v ...*ReportDefinition) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedReportIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_u *UserUpdate) AddGeneratedReportIDs(ids ...int) *UserUpdate {
	_u.mutation.AddGeneratedReportIDs(ids...)
	return _u
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_u *UserUpdate) AddGeneratedReports(v ...*GeneratedReport) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGeneratedReportIDs(ids...)
}

// AddReportPermissionIDs adds the "report_permissions" edge to the ReportPermission entity by IDs.
func (_u *UserUpdate) AddReportPermissionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddReportPermissionIDs(ids...)
	return _u
}

// AddReportPermissions adds the "report_permissions" edges to the ReportPermission entity.
func (_u *UserUpdate) AddReportPermissions(v ...*ReportPermission) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportPermissionIDs(ids...)
}

// AddScheduledReportIDs adds the "scheduled_reports" edge to the ScheduledReport entity by IDs.
func (_u *UserUpdate) AddScheduledReportIDs(ids ...int) *UserUpdate {
	_u.mutation.AddScheduledReportIDs(ids...)
	return _u
}

// AddScheduledReports adds the "scheduled_reports" edges to the ScheduledReport entity.
func (_u *UserUpdate) AddScheduledReports(v ...*ScheduledReport) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledReportIDs(ids...)
}

// AddCreatedProgramIDs adds the "created_programs" edge to the Program entity by IDs.
func (_u *UserUpdate) AddCreatedProgramIDs(ids ...int) *UserUpdate {
	_u.mutation.AddCreatedProgramIDs(ids...)
	return _u
}

// AddCreatedPrograms adds the "created_programs" edges to the Program entity.
func (_u *UserUpdate) AddCreatedPrograms(v ...*Program) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedProgramIDs(ids...)
}

// AddUpdatedProgramIDs adds the "updated_programs" edge to the Program entity by IDs.
func (_u *UserUpdate) AddUpdatedProgramIDs(ids ...int) *UserUpdate {
	_u.mutation.AddUpdatedProgramIDs(ids...)
	return _u
}

// AddUpdatedPrograms adds the "updated_programs" edges to the Program entity.
func (_u *UserUpdate) AddUpdatedPrograms(v ...*Program) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUpdatedProgramIDs(ids...)
}

// AddProgramEnrolmentIDs adds the "program_enrolments" edge to the ProgramEnrolment entity by IDs.
func (_u *UserUpdate) AddProgramEnrolmentIDs(ids ...int) *UserUpdate {
	_u.mutation.AddProgramEnrolmentIDs(ids...)
	return _u
}

// AddProgramEnrolments adds the "program_enrolments" edges to the ProgramEnrolment entity.
func (_u *UserUpdate) AddProgramEnrolments(v ...*ProgramEnrolment) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramEnrolmentIDs(ids...)
}

// AddParticipantInIDs adds the "participant_in" edge to the ProgramParticipant entity by IDs.
func (_u *UserUpdate) AddParticipantInIDs(ids ...int) *UserUpdate {
	_u.mutation.AddParticipantInIDs(ids...)
	return _u
}

// AddParticipantIn adds the "participant_in" edges to the ProgramParticipant entity.
func (_u *UserUpdate) AddParticipantIn(v ...*ProgramParticipant) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantInIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_u *UserUpdate) AddSuccessStoryIDs(ids ...int) *UserUpdate {
	_u.mutation.AddSuccessStoryIDs(ids...)
	return _u
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_u *UserUpdate) AddSuccessStories(v ...*SuccessStory) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSuccessStoryIDs(ids...)
}

// AddNewsArticleIDs adds the "news_articles" edge to the NewsArticle entity by IDs.
func (_u *UserUpdate) AddNewsArticleIDs(ids ...int) *UserUpdate {
	_u.mutation.AddNewsArticleIDs(ids...)
	return _u
}

// AddNewsArticles adds the "news_articles" edges to the NewsArticle entity.
func (_u *UserUpdate) AddNewsArticles(v ...*NewsArticle) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNewsArticleIDs(ids...)
}

// AddCreatedEventIDs adds the "created_events" edge to the Event entity by IDs.
func (_u *UserUpdate) AddCreatedEventIDs(ids ...int) *UserUpdate {
	_u.mutation.AddCreatedEventIDs(ids...)
	return _u
}

// AddCreatedEvents adds the "created_events" edges to the Event entity.
func (_u *UserUpdate) AddCreatedEvents(v ...*Event) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedEventIDs(ids...)
}

// AddEventRegistrationIDs adds the "event_registrations" edge to the EventRegistration entity by IDs.
func (_u *UserUpdate) AddEventRegistrationIDs(ids ...int) *UserUpdate {
	_u.mutation.AddEventRegistrationIDs(ids...)
	return _u
}

// AddEventRegistrations adds the "event_registrations" edges to the EventRegistration entity.
func (_u *UserUpdate) AddEventRegistrations(v ...*EventRegistration) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventRegistrationIDs(ids...)
}

// AddMessagesSentIDs adds the "messages_sent" edge to the Message entity by IDs.
func (_u *UserUpdate) AddMessagesSentIDs(ids ...int) *UserUpdate {
	_u.mutation.AddMessagesSentIDs(ids...)
	return _u
}

// AddMessagesSent adds the "messages_sent" edges to the Message entity.
func (_u *UserUpdate) AddMessagesSent(v ...*Message) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessagesSentIDs(ids...)
}

// AddConversationLinkIDs adds the "conversation_links" edge to the ConversationParticipant entity by IDs.
func (_u *UserUpdate) AddConversationLinkIDs(ids ...int) *UserUpdate {
	_u.mutation.AddConversationLinkIDs(ids...)
	return _u
}

// AddConversationLinks adds the "conversation_links" edges to the ConversationParticipant entity.
func (_u *UserUpdate) AddConversationLinks(v ...*ConversationParticipant) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConversationLinkIDs(ids...)
}

// AddVolunteerApplicationIDs adds the "volunteer_applications" edge to the VolunteerApplication entity by IDs.
func (_u *UserUpdate) AddVolunteerApplicationIDs(ids ...int) *UserUpdate {
	_u.mutation.AddVolunteerApplicationIDs(ids...)
	return _u
}

// AddVolunteerApplications adds the "volunteer_applications" edges to the VolunteerApplication entity.
func (_u *UserUpdate) AddVolunteerApplications(v ...*VolunteerApplication) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVolunteerApplicationIDs(ids...)
}

// AddMentorshipRequestIDs adds the "mentorship_requests" edge to the MentorshipRequest entity by IDs.
func (_u *UserUpdate) AddMentorshipRequestIDs(ids ...int) *UserUpdate {
	_u.mutation.AddMentorshipRequestIDs(ids...)
	return _u
}

// AddMentorshipRequests adds the "mentorship_requests" edges to the MentorshipRequest entity.
func (_u *UserUpdate) AddMentorshipRequests(v ...*MentorshipRequest) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMentorshipRequestIDs(ids...)
}

// AddMentorshipsMentoringIDs adds the "mentorships_mentoring" edge to the MentorshipRequest entity by IDs.
func (_u *UserUpdate) AddMentorshipsMentoringIDs(ids ...int) *UserUpdate {
	_u.mutation.AddMentorshipsMentoringIDs(ids...)
	return _u
}

// AddMentorshipsMentoring adds the "mentorships_mentoring" edges to the MentorshipRequest entity.
func (_u *UserUpdate) AddMentorshipsMentoring(v ...*MentorshipRequest) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMentorshipsMentoringIDs(ids...)
}

// AddAchievementIDs adds the "achievements" edge to the UserAchievement entity by IDs.
func (_u *UserUpdate) AddAchievementIDs(ids ...int) *UserUpdate {
	_u.mutation.AddAchievementIDs(ids...)
	return _u
}

// AddAchievements adds the "achievements" edges to the UserAchievement entity.
func (_u *UserUpdate) AddAchievements(v ...*UserAchievement) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAchievementIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *UserUpdate) AddDonationIDs(ids ...int) *UserUpdate {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *UserUpdate) AddDonations(v ...*Donation) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_u *UserUpdate) AddOrganizationIDs(ids ...int) *UserUpdate {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_u *UserUpdate) AddOrganization(v ...*Organization) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddManagedPartnershipIDs adds the "managed_partnerships" edge to the Partnership entity by IDs.
func (_u *UserUpdate) AddManagedPartnershipIDs(ids ...int) *UserUpdate {
	_u.mutation.AddManagedPartnershipIDs(ids...)
	return _u
}

// AddManagedPartnerships adds the "managed_partnerships" edges to the Partnership entity.
func (_u *UserUpdate) AddManagedPartnerships(v ...*Partnership) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddManagedPartnershipIDs(ids...)
}

// AddPartnershipContactIDs adds the "partnership_contacts" edge to the Partnership entity by IDs.
func (_u *UserUpdate) AddPartnershipContactIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPartnershipContactIDs(ids...)
	return _u
}

// AddPartnershipContacts adds the "partnership_contacts" edges to the Partnership entity.
func (_u *UserUpdate) AddPartnershipContacts(v ...*Partnership) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnershipContactIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_u *UserUpdate) AddSiteVisitIDs(ids ...int) *UserUpdate {
	_u.mutation.AddSiteVisitIDs(ids...)
	return _u
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_u *UserUpdate) AddSiteVisits(v ...*SiteVisit) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteVisitIDs(ids...)
}

// AddDocumentUploadIDs adds the "document_uploads" edge to the Document entity by IDs.
func (_u *UserUpdate) AddDocumentUploadIDs(ids ...int) *UserUpdate {
	_u.mutation.AddDocumentUploadIDs(ids...)
	return _u
}

// AddDocumentUploads adds the "document_uploads" edges to the Document entity.
func (_u *UserUpdate) AddDocumentUploads(v ...*Document) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentUploadIDs(ids...)
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (_u *UserUpdate) AddActivityLogIDs(ids ...int) *UserUpdate {
	_u.mutation.AddActivityLogIDs(ids...)
	return _u
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (_u *UserUpdate) AddActivityLogs(v ...*ActivityLog) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActivityLogIDs(ids...)
}

// SetConsentsID sets the "consents" edge to the UserConsent entity by ID.
func (_u *UserUpdate) SetConsentsID(id int) *UserUpdate {
	_u.mutation.SetConsentsID(id)
	return _u
}

// SetNillableConsentsID sets the "consents" edge to the UserConsent entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableConsentsID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetConsentsID(*id)
	}
	return _u
}

// SetConsents sets the "consents" edge to the UserConsent entity.
func (_u *UserUpdate) SetConsents(v *UserConsent) *UserUpdate {
	return _u.SetConsentsID(v.ID)
}

// SetOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID.
func (_u *UserUpdate) SetOnboardingID(id int) *UserUpdate {
	_u.mutation.SetOnboardingID(id)
	return _u
}

// SetNillableOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableOnboardingID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetOnboardingID(*id)
	}
	return _u
}

// SetOnboarding sets the "onboarding" edge to the UserOnboarding entity.
func (_u *UserUpdate) SetOnboarding(v *UserOnboarding) *UserUpdate {
	return _u.SetOnboardingID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (_u *UserUpdate) ClearProfile() *UserUpdate {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (_u *UserUpdate) ClearSessions() *UserUpdate {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (_u *UserUpdate) RemoveSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (_u *UserUpdate) RemoveSessions(v ...*UserSession) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (_u *UserUpdate) ClearTokens() *UserUpdate {
	_u.mutation.ClearTokens()
	return _u
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (_u *UserUpdate) RemoveTokenIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTokenIDs(ids...)
	return _u
}

// RemoveTokens removes "tokens" edges to Token entities.
func (_u *UserUpdate) RemoveTokens(v ...*Token) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTokenIDs(ids...)
}

// ClearTrustedDevices clears all "trusted_devices" edges to the TrustedDevice entity.
func (_u *UserUpdate) ClearTrustedDevices() *UserUpdate {
	_u.mutation.ClearTrustedDevices()
	return _u
}

// RemoveTrustedDeviceIDs removes the "trusted_devices" edge to TrustedDevice entities by IDs.
func (_u *UserUpdate) RemoveTrustedDeviceIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTrustedDeviceIDs(ids...)
	return _u
}

// RemoveTrustedDevices removes "trusted_devices" edges to TrustedDevice entities.
func (_u *UserUpdate) RemoveTrustedDevices(v ...*TrustedDevice) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustedDeviceIDs(ids...)
}

// ClearPasswordHistory clears all "password_history" edges to the PasswordHistory entity.
func (_u *UserUpdate) ClearPasswordHistory() *UserUpdate {
	_u.mutation.ClearPasswordHistory()
	return _u
}

// RemovePasswordHistoryIDs removes the "password_history" edge to PasswordHistory entities by IDs.
func (_u *UserUpdate) RemovePasswordHistoryIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePasswordHistoryIDs(ids...)
	return _u
}

// RemovePasswordHistory removes "password_history" edges to PasswordHistory entities.
func (_u *UserUpdate) RemovePasswordHistory(v ...*PasswordHistory) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePasswordHistoryIDs(ids...)
}

// ClearTeamMember clears the "team_member" edge to the TeamMember entity.
func (_u *UserUpdate) ClearTeamMember() *UserUpdate {
	_u.mutation.ClearTeamMember()
	return _u
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (_u *UserUpdate) ClearAuditLogs() *UserUpdate {
	_u.mutation.ClearAuditLogs()
	return _u
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (_u *UserUpdate) RemoveAuditLogIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveAuditLogIDs(ids...)
	return _u
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (_u *UserUpdate) RemoveAuditLogs(v ...*AuditLog) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuditLogIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (_u *UserUpdate) ClearJobs() *UserUpdate {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (_u *UserUpdate) RemoveJobIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to Job entities.
func (_u *UserUpdate) RemoveJobs(v ...*Job) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// ClearDashboards clears all "dashboards" edges to the AnalyticsDashboard entity.
func (_u *UserUpdate) ClearDashboards() *UserUpdate {
	_u.mutation.ClearDashboards()
	return _u
}

// RemoveDashboardIDs removes the "dashboards" edge to AnalyticsDashboard entities by IDs.
func (_u *UserUpdate) RemoveDashboardIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveDashboardIDs(ids...)
	return _u
}

// RemoveDashboards removes "dashboards" edges to AnalyticsDashboard entities.
func (_u *UserUpdate) RemoveDashboards(v ...*AnalyticsDashboard) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDashboardIDs(ids...)
}

// ClearAnalyticsEvents clears all "analytics_events" edges to the AnalyticsEvent entity.
func (_u *UserUpdate) ClearAnalyticsEvents() *UserUpdate {
	_u.mutation.ClearAnalyticsEvents()
	return _u
}

// RemoveAnalyticsEventIDs removes the "analytics_events" edge to AnalyticsEvent entities by IDs.
func (_u *UserUpdate) RemoveAnalyticsEventIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveAnalyticsEventIDs(ids...)
	return _u
}

// RemoveAnalyticsEvents removes "analytics_events" edges to AnalyticsEvent entities.
func (_u *UserUpdate) RemoveAnalyticsEvents(v ...*AnalyticsEvent) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAnalyticsEventIDs(ids...)
}

// ClearCreatedReports clears all "created_reports" edges to the ReportDefinition entity.
func (_u *UserUpdate) ClearCreatedReports() *UserUpdate {
	_u.mutation.ClearCreatedReports()
	return _u
}

// RemoveCreatedReportIDs removes the "created_reports" edge to ReportDefinition entities by IDs.
func (_u *UserUpdate) RemoveCreatedReportIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveCreatedReportIDs(ids...)
	return _u
}

// RemoveCreatedReports removes "created_reports" edges to ReportDefinition entities.
func (_u *UserUpdate) RemoveCreatedReports(v ...*ReportDefinition) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedReportIDs(ids...)
}

// ClearGeneratedReports clears all "generated_reports" edges to the GeneratedReport entity.
func (_u *UserUpdate) ClearGeneratedReports() *UserUpdate {
	_u.mutation.ClearGeneratedReports()
	return _u
}

// RemoveGeneratedReportIDs removes the "generated_reports" edge to GeneratedReport entities by IDs.
func (_u *UserUpdate) RemoveGeneratedReportIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveGeneratedReportIDs(ids...)
	return _u
}

// RemoveGeneratedReports removes "generated_reports" edges to GeneratedReport entities.
func (_u *UserUpdate) RemoveGeneratedReports(v ...*GeneratedReport) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGeneratedReportIDs(ids...)
}

// ClearReportPermissions clears all "report_permissions" edges to the ReportPermission entity.
func (_u *UserUpdate) ClearReportPermissions() *UserUpdate {
	_u.mutation.ClearReportPermissions()
	return _u
}

// RemoveReportPermissionIDs removes the "report_permissions" edge to ReportPermission entities by IDs.
func (_u *UserUpdate) RemoveReportPermissionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveReportPermissionIDs(ids...)
	return _u
}

// RemoveReportPermissions removes "report_permissions" edges to ReportPermission entities.
func (_u *UserUpdate) RemoveReportPermissions(v ...*ReportPermission) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportPermissionIDs(ids...)
}

// ClearScheduledReports clears all "scheduled_reports" edges to the ScheduledReport entity.
func (_u *UserUpdate) ClearScheduledReports() *UserUpdate {
	_u.mutation.ClearScheduledReports()
	return _u
}

// RemoveScheduledReportIDs removes the "scheduled_reports" edge to ScheduledReport entities by IDs.
func (_u *UserUpdate) RemoveScheduledReportIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveScheduledReportIDs(ids...)
	return _u
}

// RemoveScheduledReports removes "scheduled_reports" edges to ScheduledReport entities.
func (_u *UserUpdate) RemoveScheduledReports(v ...*ScheduledReport) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledReportIDs(ids...)
}

// ClearCreatedPrograms clears all "created_programs" edges to the Program entity.
func (_u *UserUpdate) ClearCreatedPrograms() *UserUpdate {
	_u.mutation.ClearCreatedPrograms()
	return _u
}

// RemoveCreatedProgramIDs removes the "created_programs" edge to Program entities by IDs.
func (_u *UserUpdate) RemoveCreatedProgramIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveCreatedProgramIDs(ids...)
	return _u
}

// RemoveCreatedPrograms removes "created_programs" edges to Program entities.
func (_u *UserUpdate) RemoveCreatedPrograms(v ...*Program) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedProgramIDs(ids...)
}

// ClearUpdatedPrograms clears all "updated_programs" edges to the Program entity.
func (_u *UserUpdate) ClearUpdatedPrograms() *UserUpdate {
	_u.mutation.ClearUpdatedPrograms()
	return _u
}

// RemoveUpdatedProgramIDs removes the "updated_programs" edge to Program entities by IDs.
func (_u *UserUpdate) RemoveUpdatedProgramIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveUpdatedProgramIDs(ids...)
	return _u
}

// RemoveUpdatedPrograms removes "updated_programs" edges to Program entities.
func (_u *UserUpdate) RemoveUpdatedPrograms(v ...*Program) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUpdatedProgramIDs(ids...)
}

// ClearProgramEnrolments clears all "program_enrolments" edges to the ProgramEnrolment entity.
func (_u *UserUpdate) ClearProgramEnrolments() *UserUpdate {
	_u.mutation.ClearProgramEnrolments()
	return _u
}

// RemoveProgramEnrolmentIDs removes the "program_enrolments" edge to ProgramEnrolment entities by IDs.
func (_u *UserUpdate) RemoveProgramEnrolmentIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveProgramEnrolmentIDs(ids...)
	return _u
}

// RemoveProgramEnrolments removes "program_enrolments" edges to ProgramEnrolment entities.
func (_u *UserUpdate) RemoveProgramEnrolments(v ...*ProgramEnrolment) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramEnrolmentIDs(ids...)
}

// ClearParticipantIn clears all "participant_in" edges to the ProgramParticipant entity.
func (_u *UserUpdate) ClearParticipantIn() *UserUpdate {
	_u.mutation.ClearParticipantIn()
	return _u
}

// RemoveParticipantInIDs removes the "participant_in" edge to ProgramParticipant entities by IDs.
func (_u *UserUpdate) RemoveParticipantInIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveParticipantInIDs(ids...)
	return _u
}

// RemoveParticipantIn removes "participant_in" edges to ProgramParticipant entities.
func (_u *UserUpdate) RemoveParticipantIn(v ...*ProgramParticipant) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantInIDs(ids...)
}

// ClearSuccessStories clears all "success_stories" edges to the SuccessStory entity.
func (_u *UserUpdate) ClearSuccessStories() *UserUpdate {
	_u.mutation.ClearSuccessStories()
	return _u
}

// RemoveSuccessStoryIDs removes the "success_stories" edge to SuccessStory entities by IDs.
func (_u *UserUpdate) RemoveSuccessStoryIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveSuccessStoryIDs(ids...)
	return _u
}

// RemoveSuccessStories removes "success_stories" edges to SuccessStory entities.
func (_u *UserUpdate) RemoveSuccessStories(v ...*SuccessStory) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSuccessStoryIDs(ids...)
}

// ClearNewsArticles clears all "news_articles" edges to the NewsArticle entity.
func (_u *UserUpdate) ClearNewsArticles() *UserUpdate {
	_u.mutation.ClearNewsArticles()
	return _u
}

// RemoveNewsArticleIDs removes the "news_articles" edge to NewsArticle entities by IDs.
func (_u *UserUpdate) RemoveNewsArticleIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveNewsArticleIDs(ids...)
	return _u
}

// RemoveNewsArticles removes "news_articles" edges to NewsArticle entities.
func (_u *UserUpdate) RemoveNewsArticles(v ...*NewsArticle) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNewsArticleIDs(ids...)
}

// ClearCreatedEvents clears all "created_events" edges to the Event entity.
func (_u *UserUpdate) ClearCreatedEvents() *UserUpdate {
	_u.mutation.ClearCreatedEvents()
	return _u
}

// RemoveCreatedEventIDs removes the "created_events" edge to Event entities by IDs.
func (_u *UserUpdate) RemoveCreatedEventIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveCreatedEventIDs(ids...)
	return _u
}

// RemoveCreatedEvents removes "created_events" edges to Event entities.
func (_u *UserUpdate) RemoveCreatedEvents(v ...*Event) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedEventIDs(ids...)
}

// ClearEventRegistrations clears all "event_registrations" edges to the EventRegistration entity.
func (_u *UserUpdate) ClearEventRegistrations() *UserUpdate {
	_u.mutation.ClearEventRegistrations()
	return _u
}

// RemoveEventRegistrationIDs removes the "event_registrations" edge to EventRegistration entities by IDs.
func (_u *UserUpdate) RemoveEventRegistrationIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveEventRegistrationIDs(ids...)
	return _u
}

// RemoveEventRegistrations removes "event_registrations" edges to EventRegistration entities.
func (_u *UserUpdate) RemoveEventRegistrations(v ...*EventRegistration) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventRegistrationIDs(ids...)
}

// ClearMessagesSent clears all "messages_sent" edges to the Message entity.
func (_u *UserUpdate) ClearMessagesSent() *UserUpdate {
	_u.mutation.ClearMessagesSent()
	return _u
}

// RemoveMessagesSentIDs removes the "messages_sent" edge to Message entities by IDs.
func (_u *UserUpdate) RemoveMessagesSentIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveMessagesSentIDs(ids...)
	return _u
}

// RemoveMessagesSent removes "messages_sent" edges to Message entities.
func (_u *UserUpdate) RemoveMessagesSent(v ...*Message) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessagesSentIDs(ids...)
}

// ClearConversationLinks clears all "conversation_links" edges to the ConversationParticipant entity.
func (_u *UserUpdate) ClearConversationLinks() *UserUpdate {
	_u.mutation.ClearConversationLinks()
	return _u
}

// RemoveConversationLinkIDs removes the "conversation_links" edge to ConversationParticipant entities by IDs.
func (_u *UserUpdate) RemoveConversationLinkIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveConversationLinkIDs(ids...)
	return _u
}

// RemoveConversationLinks removes "conversation_links" edges to ConversationParticipant entities.
func (_u *UserUpdate) RemoveConversationLinks(v ...*ConversationParticipant) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConversationLinkIDs(ids...)
}

// ClearVolunteerApplications clears all "volunteer_applications" edges to the VolunteerApplication entity.
func (_u *UserUpdate) ClearVolunteerApplications() *UserUpdate {
	_u.mutation.ClearVolunteerApplications()
	return _u
}

// RemoveVolunteerApplicationIDs removes the "volunteer_applications" edge to VolunteerApplication entities by IDs.
func (_u *UserUpdate) RemoveVolunteerApplicationIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveVolunteerApplicationIDs(ids...)
	return _u
}

// RemoveVolunteerApplications removes "volunteer_applications" edges to VolunteerApplication entities.
func (_u *UserUpdate) RemoveVolunteerApplications(v ...*VolunteerApplication) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVolunteerApplicationIDs(ids...)
}

// ClearMentorshipRequests clears all "mentorship_requests" edges to the MentorshipRequest entity.
func (_u *UserUpdate) ClearMentorshipRequests() *UserUpdate {
	_u.mutation.ClearMentorshipRequests()
	return _u
}

// RemoveMentorshipRequestIDs removes the "mentorship_requests" edge to MentorshipRequest entities by IDs.
func (_u *UserUpdate) RemoveMentorshipRequestIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveMentorshipRequestIDs(ids...)
	return _u
}

// RemoveMentorshipRequests removes "mentorship_requests" edges to MentorshipRequest entities.
func (_u *UserUpdate) RemoveMentorshipRequests(v ...*MentorshipRequest) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMentorshipRequestIDs(ids...)
}

// ClearMentorshipsMentoring clears all "mentorships_mentoring" edges to the MentorshipRequest entity.
func (_u *UserUpdate) ClearMentorshipsMentoring() *UserUpdate {
	_u.mutation.ClearMentorshipsMentoring()
	return _u
}

// RemoveMentorshipsMentoringIDs removes the "mentorships_mentoring" edge to MentorshipRequest entities by IDs.
func (_u *UserUpdate) RemoveMentorshipsMentoringIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveMentorshipsMentoringIDs(ids...)
	return _u
}

// RemoveMentorshipsMentoring removes "mentorships_mentoring" edges to MentorshipRequest entities.
func (_u *UserUpdate) RemoveMentorshipsMentoring(v ...*MentorshipRequest) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMentorshipsMentoringIDs(ids...)
}

// ClearAchievements clears all "achievements" edges to the UserAchievement entity.
func (_u *UserUpdate) ClearAchievements() *UserUpdate {
	_u.mutation.ClearAchievements()
	return _u
}

// RemoveAchievementIDs removes the "achievements" edge to UserAchievement entities by IDs.
func (_u *UserUpdate) RemoveAchievementIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveAchievementIDs(ids...)
	return _u
}

// RemoveAchievements removes "achievements" edges to UserAchievement entities.
func (_u *UserUpdate) RemoveAchievements(v ...*UserAchievement) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAchievementIDs(ids...)
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *UserUpdate) ClearDonations() *UserUpdate {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *UserUpdate) RemoveDonationIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *UserUpdate) RemoveDonations(v ...*Donation) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (_u *UserUpdate) ClearOrganization() *UserUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (_u *UserUpdate) RemoveOrganizationIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (_u *UserUpdate) RemoveOrganization(v ...*Organization) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearManagedPartnerships clears all "managed_partnerships" edges to the Partnership entity.
func (_u *UserUpdate) ClearManagedPartnerships() *UserUpdate {
	_u.mutation.ClearManagedPartnerships()
	return _u
}

// RemoveManagedPartnershipIDs removes the "managed_partnerships" edge to Partnership entities by IDs.
func (_u *UserUpdate) RemoveManagedPartnershipIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveManagedPartnershipIDs(ids...)
	return _u
}

// RemoveManagedPartnerships removes "managed_partnerships" edges to Partnership entities.
func (_u *UserUpdate) RemoveManagedPartnerships(v ...*Partnership) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveManagedPartnershipIDs(ids...)
}

// ClearPartnershipContacts clears all "partnership_contacts" edges to the Partnership entity.
func (_u *UserUpdate) ClearPartnershipContacts() *UserUpdate {
	_u.mutation.ClearPartnershipContacts()
	return _u
}

// RemovePartnershipContactIDs removes the "partnership_contacts" edge to Partnership entities by IDs.
func (_u *UserUpdate) RemovePartnershipContactIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePartnershipContactIDs(ids...)
	return _u
}

// RemovePartnershipContacts removes "partnership_contacts" edges to Partnership entities.
func (_u *UserUpdate) RemovePartnershipContacts(v ...*Partnership) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnershipContactIDs(ids...)
}

// ClearSiteVisits clears all "site_visits" edges to the SiteVisit entity.
func (_u *UserUpdate) ClearSiteVisits() *UserUpdate {
	_u.mutation.ClearSiteVisits()
	return _u
}

// RemoveSiteVisitIDs removes the "site_visits" edge to SiteVisit entities by IDs.
func (_u *UserUpdate) RemoveSiteVisitIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveSiteVisitIDs(ids...)
	return _u
}

// RemoveSiteVisits removes "site_visits" edges to SiteVisit entities.
func (_u *UserUpdate) RemoveSiteVisits(v ...*SiteVisit) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteVisitIDs(ids...)
}

// ClearDocumentUploads clears all "document_uploads" edges to the Document entity.
func (_u *UserUpdate) ClearDocumentUploads() *UserUpdate {
	_u.mutation.ClearDocumentUploads()
	return _u
}

// RemoveDocumentUploadIDs removes the "document_uploads" edge to Document entities by IDs.
func (_u *UserUpdate) RemoveDocumentUploadIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveDocumentUploadIDs(ids...)
	return _u
}

// RemoveDocumentUploads removes "document_uploads" edges to Document entities.
func (_u *UserUpdate) RemoveDocumentUploads(v ...*Document) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentUploadIDs(ids...)
}

// ClearActivityLogs clears all "activity_logs" edges to the ActivityLog entity.
func (_u *UserUpdate) ClearActivityLogs() *UserUpdate {
	_u.mutation.ClearActivityLogs()
	return _u
}

// RemoveActivityLogIDs removes the "activity_logs" edge to ActivityLog entities by IDs.
func (_u *UserUpdate) RemoveActivityLogIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveActivityLogIDs(ids...)
	return _u
}

// RemoveActivityLogs removes "activity_logs" edges to ActivityLog entities.
func (_u *UserUpdate) RemoveActivityLogs(v ...*ActivityLog) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActivityLogIDs(ids...)
}

// ClearConsents clears the "consents" edge to the UserConsent entity.
func (_u *UserUpdate) ClearConsents() *UserUpdate {
	_u.mutation.ClearConsents()
	return _u
}

// ClearOnboarding clears the "onboarding" edge to the UserOnboarding entity.
func (_u *UserUpdate) ClearOnboarding() *UserUpdate {
	_u.mutation.ClearOnboarding()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.HashedPasswordCleared() {
		_spec.ClearField(user.FieldHashedPassword, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeTime, value)
	}
	if _u.mutation.EmailVerifiedCleared() {
		_spec.ClearField(user.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeactivatedAt(); ok {
		_spec.SetField(user.FieldDeactivatedAt, field.TypeTime, value)
	}
	if _u.mutation.DeactivatedAtCleared() {
		_spec.ClearField(user.FieldDeactivatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ImpersonatingUserID(); ok {
		_spec.SetField(user.FieldImpersonatingUserID, field.TypeString, value)
	}
	if _u.mutation.ImpersonatingUserIDCleared() {
		_spec.ClearField(user.FieldImpersonatingUserID, field.TypeString)
	}
	if value, ok := _u.mutation.SecurityTimestamp(); ok {
		_spec.SetField(user.FieldSecurityTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PasswordResetRequired(); ok {
		_spec.SetField(user.FieldPasswordResetRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if value, ok := _u.mutation.MfaSecret(); ok {
		_spec.SetField(user.FieldMfaSecret, field.TypeString, value)
	}
	if _u.mutation.MfaSecretCleared() {
		_spec.ClearField(user.FieldMfaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnboardingStartedAt(); ok {
		_spec.SetField(user.FieldOnboardingStartedAt, field.TypeTime, value)
	}
	if _u.mutation.OnboardingStartedAtCleared() {
		_spec.ClearField(user.FieldOnboardingStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.OnboardingCompletedAt(); ok {
		_spec.SetField(user.FieldOnboardingCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.OnboardingCompletedAtCleared() {
		_spec.ClearField(user.FieldOnboardingCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.OnboardingSkipped(); ok {
		_spec.SetField(user.FieldOnboardingSkipped, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnboardingVersion(); ok {
		_spec.SetField(user.FieldOnboardingVersion, field.TypeString, value)
	}
	if _u.mutation.OnboardingVersionCleared() {
		_spec.ClearField(user.FieldOnboardingVersion, field.TypeString)
	}
	if value, ok := _u.mutation.OnboardingCompleted(); ok {
		_spec.SetField(user.FieldOnboardingCompleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if _u.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := _u.mutation.AnalyticsProperties(); ok {
		_spec.SetField(user.FieldAnalyticsProperties, field.TypeJSON, value)
	}
	if _u.mutation.AnalyticsPropertiesCleared() {
		_spec.ClearField(user.FieldAnalyticsProperties, field.TypeJSON)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTokensIDs(); len(nodes) > 0 && !_u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustedDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustedDevicesIDs(); len(nodes) > 0 && !_u.mutation.TrustedDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustedDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PasswordHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPasswordHistoryIDs(); len(nodes) > 0 && !_u.mutation.PasswordHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PasswordHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeamMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeamMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !_u.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DashboardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDashboardsIDs(); len(nodes) > 0 && !_u.mutation.DashboardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DashboardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnalyticsEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAnalyticsEventsIDs(); len(nodes) > 0 && !_u.mutation.AnalyticsEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnalyticsEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedReportsIDs(); len(nodes) > 0 && !_u.mutation.CreatedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGeneratedReportsIDs(); len(nodes) > 0 && !_u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportPermissionsIDs(); len(nodes) > 0 && !_u.mutation.ReportPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledReportsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedProgramsIDs(); len(nodes) > 0 && !_u.mutation.CreatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UpdatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUpdatedProgramsIDs(); len(nodes) > 0 && !_u.mutation.UpdatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UpdatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramEnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramEnrolmentsIDs(); len(nodes) > 0 && !_u.mutation.ProgramEnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramEnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantInIDs(); len(nodes) > 0 && !_u.mutation.ParticipantInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSuccessStoriesIDs(); len(nodes) > 0 && !_u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NewsArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNewsArticlesIDs(); len(nodes) > 0 && !_u.mutation.NewsArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NewsArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedEventsIDs(); len(nodes) > 0 && !_u.mutation.CreatedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventRegistrationsIDs(); len(nodes) > 0 && !_u.mutation.EventRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesSentIDs(); len(nodes) > 0 && !_u.mutation.MessagesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesSentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConversationLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConversationLinksIDs(); len(nodes) > 0 && !_u.mutation.ConversationLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConversationLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVolunteerApplicationsIDs(); len(nodes) > 0 && !_u.mutation.VolunteerApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMentorshipRequestsIDs(); len(nodes) > 0 && !_u.mutation.MentorshipRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipsMentoringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMentorshipsMentoringIDs(); len(nodes) > 0 && !_u.mutation.MentorshipsMentoringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipsMentoringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAchievementsIDs(); len(nodes) > 0 && !_u.mutation.AchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !_u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ManagedPartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedManagedPartnershipsIDs(); len(nodes) > 0 && !_u.mutation.ManagedPartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ManagedPartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PartnershipContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnershipContactsIDs(); len(nodes) > 0 && !_u.mutation.PartnershipContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSiteVisitsIDs(); len(nodes) > 0 && !_u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentUploadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentUploadsIDs(); len(nodes) > 0 && !_u.mutation.DocumentUploadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentUploadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActivityLogsIDs(); len(nodes) > 0 && !_u.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConsentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconsent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConsentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconsent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OnboardingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OnboardingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *UserUpdateOne) ClearUsername() *UserUpdateOne {
	_u.mutation.ClearUsername()
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *UserUpdateOne) SetHashedPassword(v string) *UserUpdateOne {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableHashedPassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (_u *UserUpdateOne) ClearHashedPassword() *UserUpdateOne {
	_u.mutation.ClearHashedPassword()
	return _u
}

// SetIsVerified sets the "is_verified" field.
func (_u *UserUpdateOne) SetIsVerified(v bool) *UserUpdateOne {
	_u.mutation.SetIsVerified(v)
	return _u
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsVerified(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsVerified(*v)
	}
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdateOne) SetEmailVerified(v time.Time) *UserUpdateOne {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmailVerified(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (_u *UserUpdateOne) ClearEmailVerified() *UserUpdateOne {
	_u.mutation.ClearEmailVerified()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdateOne) SetLastLoginAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdateOne) SetIsActive(v bool) *UserUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsActive(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (_u *UserUpdateOne) SetDeactivatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetDeactivatedAt(v)
	return _u
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeactivatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetDeactivatedAt(*v)
	}
	return _u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (_u *UserUpdateOne) ClearDeactivatedAt() *UserUpdateOne {
	_u.mutation.ClearDeactivatedAt()
	return _u
}

// SetLockedUntil sets the "locked_until" field.
func (_u *UserUpdateOne) SetLockedUntil(v time.Time) *UserUpdateOne {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "locked_until" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLockedUntil(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "locked_until" field.
func (_u *UserUpdateOne) ClearLockedUntil() *UserUpdateOne {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetImpersonatingUserID sets the "impersonating_user_id" field.
func (_u *UserUpdateOne) SetImpersonatingUserID(v string) *UserUpdateOne {
	_u.mutation.SetImpersonatingUserID(v)
	return _u
}

// SetNillableImpersonatingUserID sets the "impersonating_user_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableImpersonatingUserID(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetImpersonatingUserID(*v)
	}
	return _u
}

// ClearImpersonatingUserID clears the value of the "impersonating_user_id" field.
func (_u *UserUpdateOne) ClearImpersonatingUserID() *UserUpdateOne {
	_u.mutation.ClearImpersonatingUserID()
	return _u
}

// SetSecurityTimestamp sets the "security_timestamp" field.
func (_u *UserUpdateOne) SetSecurityTimestamp(v time.Time) *UserUpdateOne {
	_u.mutation.SetSecurityTimestamp(v)
	return _u
}

// SetNillableSecurityTimestamp sets the "security_timestamp" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSecurityTimestamp(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetSecurityTimestamp(*v)
	}
	return _u
}

// SetPasswordResetRequired sets the "password_reset_required" field.
func (_u *UserUpdateOne) SetPasswordResetRequired(v bool) *UserUpdateOne {
	_u.mutation.SetPasswordResetRequired(v)
	return _u
}

// SetNillablePasswordResetRequired sets the "password_reset_required" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePasswordResetRequired(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetPasswordResetRequired(*v)
	}
	return _u
}

// SetRoles sets the "roles" field.
func (_u *UserUpdateOne) SetRoles(v []string) *UserUpdateOne {
	_u.mutation.SetRoles(v)
	return _u
}

// AppendRoles appends value to the "roles" field.
func (_u *UserUpdateOne) AppendRoles(v []string) *UserUpdateOne {
	_u.mutation.AppendRoles(v)
	return _u
}

// SetMfaSecret sets the "mfa_secret" field.
func (_u *UserUpdateOne) SetMfaSecret(v string) *UserUpdateOne {
	_u.mutation.SetMfaSecret(v)
	return _u
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMfaSecret(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMfaSecret(*v)
	}
	return _u
}

// ClearMfaSecret clears the value of the "mfa_secret" field.
func (_u *UserUpdateOne) ClearMfaSecret() *UserUpdateOne {
	_u.mutation.ClearMfaSecret()
	return _u
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (_u *UserUpdateOne) SetMfaEnabled(v bool) *UserUpdateOne {
	_u.mutation.SetMfaEnabled(v)
	return _u
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMfaEnabled(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetMfaEnabled(*v)
	}
	return _u
}

// SetOnboardingStartedAt sets the "onboarding_started_at" field.
func (_u *UserUpdateOne) SetOnboardingStartedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetOnboardingStartedAt(v)
	return _u
}

// SetNillableOnboardingStartedAt sets the "onboarding_started_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingStartedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetOnboardingStartedAt(*v)
	}
	return _u
}

// ClearOnboardingStartedAt clears the value of the "onboarding_started_at" field.
func (_u *UserUpdateOne) ClearOnboardingStartedAt() *UserUpdateOne {
	_u.mutation.ClearOnboardingStartedAt()
	return _u
}

// SetOnboardingCompletedAt sets the "onboarding_completed_at" field.
func (_u *UserUpdateOne) SetOnboardingCompletedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetOnboardingCompletedAt(v)
	return _u
}

// SetNillableOnboardingCompletedAt sets the "onboarding_completed_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingCompletedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetOnboardingCompletedAt(*v)
	}
	return _u
}

// ClearOnboardingCompletedAt clears the value of the "onboarding_completed_at" field.
func (_u *UserUpdateOne) ClearOnboardingCompletedAt() *UserUpdateOne {
	_u.mutation.ClearOnboardingCompletedAt()
	return _u
}

// SetOnboardingSkipped sets the "onboarding_skipped" field.
func (_u *UserUpdateOne) SetOnboardingSkipped(v bool) *UserUpdateOne {
	_u.mutation.SetOnboardingSkipped(v)
	return _u
}

// SetNillableOnboardingSkipped sets the "onboarding_skipped" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingSkipped(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetOnboardingSkipped(*v)
	}
	return _u
}

// SetOnboardingVersion sets the "onboarding_version" field.
func (_u *UserUpdateOne) SetOnboardingVersion(v string) *UserUpdateOne {
	_u.mutation.SetOnboardingVersion(v)
	return _u
}

// SetNillableOnboardingVersion sets the "onboarding_version" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingVersion(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetOnboardingVersion(*v)
	}
	return _u
}

// ClearOnboardingVersion clears the value of the "onboarding_version" field.
func (_u *UserUpdateOne) ClearOnboardingVersion() *UserUpdateOne {
	_u.mutation.ClearOnboardingVersion()
	return _u
}

// SetOnboardingCompleted sets the "onboarding_completed" field.
func (_u *UserUpdateOne) SetOnboardingCompleted(v bool) *UserUpdateOne {
	_u.mutation.SetOnboardingCompleted(v)
	return _u
}

// SetNillableOnboardingCompleted sets the "onboarding_completed" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingCompleted(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetOnboardingCompleted(*v)
	}
	return _u
}

// SetPosition sets the "position" field.
func (_u *UserUpdateOne) SetPosition(v string) *UserUpdateOne {
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePosition(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// ClearPosition clears the value of the "position" field.
func (_u *UserUpdateOne) ClearPosition() *UserUpdateOne {
	_u.mutation.ClearPosition()
	return _u
}

// SetAnalyticsProperties sets the "analytics_properties" field.
func (_u *UserUpdateOne) SetAnalyticsProperties(v map[string]interface{}) *UserUpdateOne {
	_u.mutation.SetAnalyticsProperties(v)
	return _u
}

// ClearAnalyticsProperties clears the value of the "analytics_properties" field.
func (_u *UserUpdateOne) ClearAnalyticsProperties() *UserUpdateOne {
	_u.mutation.ClearAnalyticsProperties()
	return _u
}

// SetProfileID sets the "profile" edge to the UserProfile entity by ID.
func (_u *UserUpdateOne) SetProfileID(id int) *UserUpdateOne {
	_u.mutation.SetProfileID(id)
	return _u
}

// SetNillableProfileID sets the "profile" edge to the UserProfile entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProfileID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetProfileID(*id)
	}
	return _u
}

// SetProfile sets the "profile" edge to the UserProfile entity.
func (_u *UserUpdateOne) SetProfile(v *UserProfile) *UserUpdateOne {
	return _u.SetProfileID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (_u *UserUpdateOne) AddSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (_u *UserUpdateOne) AddSessions(v ...*UserSession) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (_u *UserUpdateOne) AddTokenIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTokenIDs(ids...)
	return _u
}

// AddTokens adds the "tokens" edges to the Token entity.
func (_u *UserUpdateOne) AddTokens(v ...*Token) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTokenIDs(ids...)
}

// AddTrustedDeviceIDs adds the "trusted_devices" edge to the TrustedDevice entity by IDs.
func (_u *UserUpdateOne) AddTrustedDeviceIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTrustedDeviceIDs(ids...)
	return _u
}

// AddTrustedDevices adds the "trusted_devices" edges to the TrustedDevice entity.
func (_u *UserUpdateOne) AddTrustedDevices(v ...*TrustedDevice) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustedDeviceIDs(ids...)
}

// AddPasswordHistoryIDs adds the "password_history" edge to the PasswordHistory entity by IDs.
func (_u *UserUpdateOne) AddPasswordHistoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPasswordHistoryIDs(ids...)
	return _u
}

// AddPasswordHistory adds the "password_history" edges to the PasswordHistory entity.
func (_u *UserUpdateOne) AddPasswordHistory(v ...*PasswordHistory) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPasswordHistoryIDs(ids...)
}

// SetTeamMemberID sets the "team_member" edge to the TeamMember entity by ID.
func (_u *UserUpdateOne) SetTeamMemberID(id int) *UserUpdateOne {
	_u.mutation.SetTeamMemberID(id)
	return _u
}

// SetNillableTeamMemberID sets the "team_member" edge to the TeamMember entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTeamMemberID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetTeamMemberID(*id)
	}
	return _u
}

// SetTeamMember sets the "team_member" edge to the TeamMember entity.
func (_u *UserUpdateOne) SetTeamMember(v *TeamMember) *UserUpdateOne {
	return _u.SetTeamMemberID(v.ID)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (_u *UserUpdateOne) AddAuditLogIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddAuditLogIDs(ids...)
	return _u
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (_u *UserUpdateOne) AddAuditLogs(v ...*AuditLog) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAuditLogIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_u *UserUpdateOne) AddJobIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddJobIDs(ids...)
	return _u
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_u *UserUpdateOne) AddJobs(v ...*Job) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobIDs(ids...)
}

// AddDashboardIDs adds the "dashboards" edge to the AnalyticsDashboard entity by IDs.
func (_u *UserUpdateOne) AddDashboardIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddDashboardIDs(ids...)
	return _u
}

// AddDashboards adds the "dashboards" edges to the AnalyticsDashboard entity.
func (_u *UserUpdateOne) AddDashboards(v ...*AnalyticsDashboard) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDashboardIDs(ids...)
}

// AddAnalyticsEventIDs adds the "analytics_events" edge to the AnalyticsEvent entity by IDs.
func (_u *UserUpdateOne) AddAnalyticsEventIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddAnalyticsEventIDs(ids...)
	return _u
}

// AddAnalyticsEvents adds the "analytics_events" edges to the AnalyticsEvent entity.
func (_u *UserUpdateOne) AddAnalyticsEvents(v ...*AnalyticsEvent) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAnalyticsEventIDs(ids...)
}

// AddCreatedReportIDs adds the "created_reports" edge to the ReportDefinition entity by IDs.
func (_u *UserUpdateOne) AddCreatedReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddCreatedReportIDs(ids...)
	return _u
}

// AddCreatedReports adds the "created_reports" edges to the ReportDefinition entity.
func (_u *UserUpdateOne) AddCreatedReports(v ...*ReportDefinition) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedReportIDs(ids...)
}

// AddGeneratedReportIDs adds the "generated_reports" edge to the GeneratedReport entity by IDs.
func (_u *UserUpdateOne) AddGeneratedReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddGeneratedReportIDs(ids...)
	return _u
}

// AddGeneratedReports adds the "generated_reports" edges to the GeneratedReport entity.
func (_u *UserUpdateOne) AddGeneratedReports(v ...*GeneratedReport) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGeneratedReportIDs(ids...)
}

// AddReportPermissionIDs adds the "report_permissions" edge to the ReportPermission entity by IDs.
func (_u *UserUpdateOne) AddReportPermissionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddReportPermissionIDs(ids...)
	return _u
}

// AddReportPermissions adds the "report_permissions" edges to the ReportPermission entity.
func (_u *UserUpdateOne) AddReportPermissions(v ...*ReportPermission) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReportPermissionIDs(ids...)
}

// AddScheduledReportIDs adds the "scheduled_reports" edge to the ScheduledReport entity by IDs.
func (_u *UserUpdateOne) AddScheduledReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddScheduledReportIDs(ids...)
	return _u
}

// AddScheduledReports adds the "scheduled_reports" edges to the ScheduledReport entity.
func (_u *UserUpdateOne) AddScheduledReports(v ...*ScheduledReport) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledReportIDs(ids...)
}

// AddCreatedProgramIDs adds the "created_programs" edge to the Program entity by IDs.
func (_u *UserUpdateOne) AddCreatedProgramIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddCreatedProgramIDs(ids...)
	return _u
}

// AddCreatedPrograms adds the "created_programs" edges to the Program entity.
func (_u *UserUpdateOne) AddCreatedPrograms(v ...*Program) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedProgramIDs(ids...)
}

// AddUpdatedProgramIDs adds the "updated_programs" edge to the Program entity by IDs.
func (_u *UserUpdateOne) AddUpdatedProgramIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddUpdatedProgramIDs(ids...)
	return _u
}

// AddUpdatedPrograms adds the "updated_programs" edges to the Program entity.
func (_u *UserUpdateOne) AddUpdatedPrograms(v ...*Program) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUpdatedProgramIDs(ids...)
}

// AddProgramEnrolmentIDs adds the "program_enrolments" edge to the ProgramEnrolment entity by IDs.
func (_u *UserUpdateOne) AddProgramEnrolmentIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddProgramEnrolmentIDs(ids...)
	return _u
}

// AddProgramEnrolments adds the "program_enrolments" edges to the ProgramEnrolment entity.
func (_u *UserUpdateOne) AddProgramEnrolments(v ...*ProgramEnrolment) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramEnrolmentIDs(ids...)
}

// AddParticipantInIDs adds the "participant_in" edge to the ProgramParticipant entity by IDs.
func (_u *UserUpdateOne) AddParticipantInIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddParticipantInIDs(ids...)
	return _u
}

// AddParticipantIn adds the "participant_in" edges to the ProgramParticipant entity.
func (_u *UserUpdateOne) AddParticipantIn(v ...*ProgramParticipant) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantInIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_u *UserUpdateOne) AddSuccessStoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddSuccessStoryIDs(ids...)
	return _u
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_u *UserUpdateOne) AddSuccessStories(v ...*SuccessStory) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSuccessStoryIDs(ids...)
}

// AddNewsArticleIDs adds the "news_articles" edge to the NewsArticle entity by IDs.
func (_u *UserUpdateOne) AddNewsArticleIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddNewsArticleIDs(ids...)
	return _u
}

// AddNewsArticles adds the "news_articles" edges to the NewsArticle entity.
func (_u *UserUpdateOne) AddNewsArticles(v ...*NewsArticle) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNewsArticleIDs(ids...)
}

// AddCreatedEventIDs adds the "created_events" edge to the Event entity by IDs.
func (_u *UserUpdateOne) AddCreatedEventIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddCreatedEventIDs(ids...)
	return _u
}

// AddCreatedEvents adds the "created_events" edges to the Event entity.
func (_u *UserUpdateOne) AddCreatedEvents(v ...*Event) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCreatedEventIDs(ids...)
}

// AddEventRegistrationIDs adds the "event_registrations" edge to the EventRegistration entity by IDs.
func (_u *UserUpdateOne) AddEventRegistrationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddEventRegistrationIDs(ids...)
	return _u
}

// AddEventRegistrations adds the "event_registrations" edges to the EventRegistration entity.
func (_u *UserUpdateOne) AddEventRegistrations(v ...*EventRegistration) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventRegistrationIDs(ids...)
}

// AddMessagesSentIDs adds the "messages_sent" edge to the Message entity by IDs.
func (_u *UserUpdateOne) AddMessagesSentIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddMessagesSentIDs(ids...)
	return _u
}

// AddMessagesSent adds the "messages_sent" edges to the Message entity.
func (_u *UserUpdateOne) AddMessagesSent(v ...*Message) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessagesSentIDs(ids...)
}

// AddConversationLinkIDs adds the "conversation_links" edge to the ConversationParticipant entity by IDs.
func (_u *UserUpdateOne) AddConversationLinkIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddConversationLinkIDs(ids...)
	return _u
}

// AddConversationLinks adds the "conversation_links" edges to the ConversationParticipant entity.
func (_u *UserUpdateOne) AddConversationLinks(v ...*ConversationParticipant) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddConversationLinkIDs(ids...)
}

// AddVolunteerApplicationIDs adds the "volunteer_applications" edge to the VolunteerApplication entity by IDs.
func (_u *UserUpdateOne) AddVolunteerApplicationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddVolunteerApplicationIDs(ids...)
	return _u
}

// AddVolunteerApplications adds the "volunteer_applications" edges to the VolunteerApplication entity.
func (_u *UserUpdateOne) AddVolunteerApplications(v ...*VolunteerApplication) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVolunteerApplicationIDs(ids...)
}

// AddMentorshipRequestIDs adds the "mentorship_requests" edge to the MentorshipRequest entity by IDs.
func (_u *UserUpdateOne) AddMentorshipRequestIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddMentorshipRequestIDs(ids...)
	return _u
}

// AddMentorshipRequests adds the "mentorship_requests" edges to the MentorshipRequest entity.
func (_u *UserUpdateOne) AddMentorshipRequests(v ...*MentorshipRequest) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMentorshipRequestIDs(ids...)
}

// AddMentorshipsMentoringIDs adds the "mentorships_mentoring" edge to the MentorshipRequest entity by IDs.
func (_u *UserUpdateOne) AddMentorshipsMentoringIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddMentorshipsMentoringIDs(ids...)
	return _u
}

// AddMentorshipsMentoring adds the "mentorships_mentoring" edges to the MentorshipRequest entity.
func (_u *UserUpdateOne) AddMentorshipsMentoring(v ...*MentorshipRequest) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMentorshipsMentoringIDs(ids...)
}

// AddAchievementIDs adds the "achievements" edge to the UserAchievement entity by IDs.
func (_u *UserUpdateOne) AddAchievementIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddAchievementIDs(ids...)
	return _u
}

// AddAchievements adds the "achievements" edges to the UserAchievement entity.
func (_u *UserUpdateOne) AddAchievements(v ...*UserAchievement) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAchievementIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *UserUpdateOne) AddDonationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *UserUpdateOne) AddDonations(v ...*Donation) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_u *UserUpdateOne) AddOrganizationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_u *UserUpdateOne) AddOrganization(v ...*Organization) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddManagedPartnershipIDs adds the "managed_partnerships" edge to the Partnership entity by IDs.
func (_u *UserUpdateOne) AddManagedPartnershipIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddManagedPartnershipIDs(ids...)
	return _u
}

// AddManagedPartnerships adds the "managed_partnerships" edges to the Partnership entity.
func (_u *UserUpdateOne) AddManagedPartnerships(v ...*Partnership) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddManagedPartnershipIDs(ids...)
}

// AddPartnershipContactIDs adds the "partnership_contacts" edge to the Partnership entity by IDs.
func (_u *UserUpdateOne) AddPartnershipContactIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPartnershipContactIDs(ids...)
	return _u
}

// AddPartnershipContacts adds the "partnership_contacts" edges to the Partnership entity.
func (_u *UserUpdateOne) AddPartnershipContacts(v ...*Partnership) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnershipContactIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_u *UserUpdateOne) AddSiteVisitIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddSiteVisitIDs(ids...)
	return _u
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_u *UserUpdateOne) AddSiteVisits(v ...*SiteVisit) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteVisitIDs(ids...)
}

// AddDocumentUploadIDs adds the "document_uploads" edge to the Document entity by IDs.
func (_u *UserUpdateOne) AddDocumentUploadIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddDocumentUploadIDs(ids...)
	return _u
}

// AddDocumentUploads adds the "document_uploads" edges to the Document entity.
func (_u *UserUpdateOne) AddDocumentUploads(v ...*Document) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentUploadIDs(ids...)
}

// AddActivityLogIDs adds the "activity_logs" edge to the ActivityLog entity by IDs.
func (_u *UserUpdateOne) AddActivityLogIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddActivityLogIDs(ids...)
	return _u
}

// AddActivityLogs adds the "activity_logs" edges to the ActivityLog entity.
func (_u *UserUpdateOne) AddActivityLogs(v ...*ActivityLog) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActivityLogIDs(ids...)
}

// SetConsentsID sets the "consents" edge to the UserConsent entity by ID.
func (_u *UserUpdateOne) SetConsentsID(id int) *UserUpdateOne {
	_u.mutation.SetConsentsID(id)
	return _u
}

// SetNillableConsentsID sets the "consents" edge to the UserConsent entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableConsentsID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetConsentsID(*id)
	}
	return _u
}

// SetConsents sets the "consents" edge to the UserConsent entity.
func (_u *UserUpdateOne) SetConsents(v *UserConsent) *UserUpdateOne {
	return _u.SetConsentsID(v.ID)
}

// SetOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID.
func (_u *UserUpdateOne) SetOnboardingID(id int) *UserUpdateOne {
	_u.mutation.SetOnboardingID(id)
	return _u
}

// SetNillableOnboardingID sets the "onboarding" edge to the UserOnboarding entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOnboardingID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetOnboardingID(*id)
	}
	return _u
}

// SetOnboarding sets the "onboarding" edge to the UserOnboarding entity.
func (_u *UserUpdateOne) SetOnboarding(v *UserOnboarding) *UserUpdateOne {
	return _u.SetOnboardingID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearProfile clears the "profile" edge to the UserProfile entity.
func (_u *UserUpdateOne) ClearProfile() *UserUpdateOne {
	_u.mutation.ClearProfile()
	return _u
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (_u *UserUpdateOne) ClearSessions() *UserUpdateOne {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (_u *UserUpdateOne) RemoveSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (_u *UserUpdateOne) RemoveSessions(v ...*UserSession) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (_u *UserUpdateOne) ClearTokens() *UserUpdateOne {
	_u.mutation.ClearTokens()
	return _u
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (_u *UserUpdateOne) RemoveTokenIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTokenIDs(ids...)
	return _u
}

// RemoveTokens removes "tokens" edges to Token entities.
func (_u *UserUpdateOne) RemoveTokens(v ...*Token) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTokenIDs(ids...)
}

// ClearTrustedDevices clears all "trusted_devices" edges to the TrustedDevice entity.
func (_u *UserUpdateOne) ClearTrustedDevices() *UserUpdateOne {
	_u.mutation.ClearTrustedDevices()
	return _u
}

// RemoveTrustedDeviceIDs removes the "trusted_devices" edge to TrustedDevice entities by IDs.
func (_u *UserUpdateOne) RemoveTrustedDeviceIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTrustedDeviceIDs(ids...)
	return _u
}

// RemoveTrustedDevices removes "trusted_devices" edges to TrustedDevice entities.
func (_u *UserUpdateOne) RemoveTrustedDevices(v ...*TrustedDevice) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustedDeviceIDs(ids...)
}

// ClearPasswordHistory clears all "password_history" edges to the PasswordHistory entity.
func (_u *UserUpdateOne) ClearPasswordHistory() *UserUpdateOne {
	_u.mutation.ClearPasswordHistory()
	return _u
}

// RemovePasswordHistoryIDs removes the "password_history" edge to PasswordHistory entities by IDs.
func (_u *UserUpdateOne) RemovePasswordHistoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePasswordHistoryIDs(ids...)
	return _u
}

// RemovePasswordHistory removes "password_history" edges to PasswordHistory entities.
func (_u *UserUpdateOne) RemovePasswordHistory(v ...*PasswordHistory) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePasswordHistoryIDs(ids...)
}

// ClearTeamMember clears the "team_member" edge to the TeamMember entity.
func (_u *UserUpdateOne) ClearTeamMember() *UserUpdateOne {
	_u.mutation.ClearTeamMember()
	return _u
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (_u *UserUpdateOne) ClearAuditLogs() *UserUpdateOne {
	_u.mutation.ClearAuditLogs()
	return _u
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (_u *UserUpdateOne) RemoveAuditLogIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveAuditLogIDs(ids...)
	return _u
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (_u *UserUpdateOne) RemoveAuditLogs(v ...*AuditLog) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAuditLogIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (_u *UserUpdateOne) ClearJobs() *UserUpdateOne {
	_u.mutation.ClearJobs()
	return _u
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (_u *UserUpdateOne) RemoveJobIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveJobIDs(ids...)
	return _u
}

// RemoveJobs removes "jobs" edges to Job entities.
func (_u *UserUpdateOne) RemoveJobs(v ...*Job) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobIDs(ids...)
}

// ClearDashboards clears all "dashboards" edges to the AnalyticsDashboard entity.
func (_u *UserUpdateOne) ClearDashboards() *UserUpdateOne {
	_u.mutation.ClearDashboards()
	return _u
}

// RemoveDashboardIDs removes the "dashboards" edge to AnalyticsDashboard entities by IDs.
func (_u *UserUpdateOne) RemoveDashboardIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveDashboardIDs(ids...)
	return _u
}

// RemoveDashboards removes "dashboards" edges to AnalyticsDashboard entities.
func (_u *UserUpdateOne) RemoveDashboards(v ...*AnalyticsDashboard) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDashboardIDs(ids...)
}

// ClearAnalyticsEvents clears all "analytics_events" edges to the AnalyticsEvent entity.
func (_u *UserUpdateOne) ClearAnalyticsEvents() *UserUpdateOne {
	_u.mutation.ClearAnalyticsEvents()
	return _u
}

// RemoveAnalyticsEventIDs removes the "analytics_events" edge to AnalyticsEvent entities by IDs.
func (_u *UserUpdateOne) RemoveAnalyticsEventIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveAnalyticsEventIDs(ids...)
	return _u
}

// RemoveAnalyticsEvents removes "analytics_events" edges to AnalyticsEvent entities.
func (_u *UserUpdateOne) RemoveAnalyticsEvents(v ...*AnalyticsEvent) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAnalyticsEventIDs(ids...)
}

// ClearCreatedReports clears all "created_reports" edges to the ReportDefinition entity.
func (_u *UserUpdateOne) ClearCreatedReports() *UserUpdateOne {
	_u.mutation.ClearCreatedReports()
	return _u
}

// RemoveCreatedReportIDs removes the "created_reports" edge to ReportDefinition entities by IDs.
func (_u *UserUpdateOne) RemoveCreatedReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveCreatedReportIDs(ids...)
	return _u
}

// RemoveCreatedReports removes "created_reports" edges to ReportDefinition entities.
func (_u *UserUpdateOne) RemoveCreatedReports(v ...*ReportDefinition) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedReportIDs(ids...)
}

// ClearGeneratedReports clears all "generated_reports" edges to the GeneratedReport entity.
func (_u *UserUpdateOne) ClearGeneratedReports() *UserUpdateOne {
	_u.mutation.ClearGeneratedReports()
	return _u
}

// RemoveGeneratedReportIDs removes the "generated_reports" edge to GeneratedReport entities by IDs.
func (_u *UserUpdateOne) RemoveGeneratedReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveGeneratedReportIDs(ids...)
	return _u
}

// RemoveGeneratedReports removes "generated_reports" edges to GeneratedReport entities.
func (_u *UserUpdateOne) RemoveGeneratedReports(v ...*GeneratedReport) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGeneratedReportIDs(ids...)
}

// ClearReportPermissions clears all "report_permissions" edges to the ReportPermission entity.
func (_u *UserUpdateOne) ClearReportPermissions() *UserUpdateOne {
	_u.mutation.ClearReportPermissions()
	return _u
}

// RemoveReportPermissionIDs removes the "report_permissions" edge to ReportPermission entities by IDs.
func (_u *UserUpdateOne) RemoveReportPermissionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveReportPermissionIDs(ids...)
	return _u
}

// RemoveReportPermissions removes "report_permissions" edges to ReportPermission entities.
func (_u *UserUpdateOne) RemoveReportPermissions(v ...*ReportPermission) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReportPermissionIDs(ids...)
}

// ClearScheduledReports clears all "scheduled_reports" edges to the ScheduledReport entity.
func (_u *UserUpdateOne) ClearScheduledReports() *UserUpdateOne {
	_u.mutation.ClearScheduledReports()
	return _u
}

// RemoveScheduledReportIDs removes the "scheduled_reports" edge to ScheduledReport entities by IDs.
func (_u *UserUpdateOne) RemoveScheduledReportIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveScheduledReportIDs(ids...)
	return _u
}

// RemoveScheduledReports removes "scheduled_reports" edges to ScheduledReport entities.
func (_u *UserUpdateOne) RemoveScheduledReports(v ...*ScheduledReport) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledReportIDs(ids...)
}

// ClearCreatedPrograms clears all "created_programs" edges to the Program entity.
func (_u *UserUpdateOne) ClearCreatedPrograms() *UserUpdateOne {
	_u.mutation.ClearCreatedPrograms()
	return _u
}

// RemoveCreatedProgramIDs removes the "created_programs" edge to Program entities by IDs.
func (_u *UserUpdateOne) RemoveCreatedProgramIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveCreatedProgramIDs(ids...)
	return _u
}

// RemoveCreatedPrograms removes "created_programs" edges to Program entities.
func (_u *UserUpdateOne) RemoveCreatedPrograms(v ...*Program) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedProgramIDs(ids...)
}

// ClearUpdatedPrograms clears all "updated_programs" edges to the Program entity.
func (_u *UserUpdateOne) ClearUpdatedPrograms() *UserUpdateOne {
	_u.mutation.ClearUpdatedPrograms()
	return _u
}

// RemoveUpdatedProgramIDs removes the "updated_programs" edge to Program entities by IDs.
func (_u *UserUpdateOne) RemoveUpdatedProgramIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveUpdatedProgramIDs(ids...)
	return _u
}

// RemoveUpdatedPrograms removes "updated_programs" edges to Program entities.
func (_u *UserUpdateOne) RemoveUpdatedPrograms(v ...*Program) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUpdatedProgramIDs(ids...)
}

// ClearProgramEnrolments clears all "program_enrolments" edges to the ProgramEnrolment entity.
func (_u *UserUpdateOne) ClearProgramEnrolments() *UserUpdateOne {
	_u.mutation.ClearProgramEnrolments()
	return _u
}

// RemoveProgramEnrolmentIDs removes the "program_enrolments" edge to ProgramEnrolment entities by IDs.
func (_u *UserUpdateOne) RemoveProgramEnrolmentIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveProgramEnrolmentIDs(ids...)
	return _u
}

// RemoveProgramEnrolments removes "program_enrolments" edges to ProgramEnrolment entities.
func (_u *UserUpdateOne) RemoveProgramEnrolments(v ...*ProgramEnrolment) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramEnrolmentIDs(ids...)
}

// ClearParticipantIn clears all "participant_in" edges to the ProgramParticipant entity.
func (_u *UserUpdateOne) ClearParticipantIn() *UserUpdateOne {
	_u.mutation.ClearParticipantIn()
	return _u
}

// RemoveParticipantInIDs removes the "participant_in" edge to ProgramParticipant entities by IDs.
func (_u *UserUpdateOne) RemoveParticipantInIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveParticipantInIDs(ids...)
	return _u
}

// RemoveParticipantIn removes "participant_in" edges to ProgramParticipant entities.
func (_u *UserUpdateOne) RemoveParticipantIn(v ...*ProgramParticipant) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantInIDs(ids...)
}

// ClearSuccessStories clears all "success_stories" edges to the SuccessStory entity.
func (_u *UserUpdateOne) ClearSuccessStories() *UserUpdateOne {
	_u.mutation.ClearSuccessStories()
	return _u
}

// RemoveSuccessStoryIDs removes the "success_stories" edge to SuccessStory entities by IDs.
func (_u *UserUpdateOne) RemoveSuccessStoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveSuccessStoryIDs(ids...)
	return _u
}

// RemoveSuccessStories removes "success_stories" edges to SuccessStory entities.
func (_u *UserUpdateOne) RemoveSuccessStories(v ...*SuccessStory) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSuccessStoryIDs(ids...)
}

// ClearNewsArticles clears all "news_articles" edges to the NewsArticle entity.
func (_u *UserUpdateOne) ClearNewsArticles() *UserUpdateOne {
	_u.mutation.ClearNewsArticles()
	return _u
}

// RemoveNewsArticleIDs removes the "news_articles" edge to NewsArticle entities by IDs.
func (_u *UserUpdateOne) RemoveNewsArticleIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveNewsArticleIDs(ids...)
	return _u
}

// RemoveNewsArticles removes "news_articles" edges to NewsArticle entities.
func (_u *UserUpdateOne) RemoveNewsArticles(v ...*NewsArticle) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNewsArticleIDs(ids...)
}

// ClearCreatedEvents clears all "created_events" edges to the Event entity.
func (_u *UserUpdateOne) ClearCreatedEvents() *UserUpdateOne {
	_u.mutation.ClearCreatedEvents()
	return _u
}

// RemoveCreatedEventIDs removes the "created_events" edge to Event entities by IDs.
func (_u *UserUpdateOne) RemoveCreatedEventIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveCreatedEventIDs(ids...)
	return _u
}

// RemoveCreatedEvents removes "created_events" edges to Event entities.
func (_u *UserUpdateOne) RemoveCreatedEvents(v ...*Event) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCreatedEventIDs(ids...)
}

// ClearEventRegistrations clears all "event_registrations" edges to the EventRegistration entity.
func (_u *UserUpdateOne) ClearEventRegistrations() *UserUpdateOne {
	_u.mutation.ClearEventRegistrations()
	return _u
}

// RemoveEventRegistrationIDs removes the "event_registrations" edge to EventRegistration entities by IDs.
func (_u *UserUpdateOne) RemoveEventRegistrationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveEventRegistrationIDs(ids...)
	return _u
}

// RemoveEventRegistrations removes "event_registrations" edges to EventRegistration entities.
func (_u *UserUpdateOne) RemoveEventRegistrations(v ...*EventRegistration) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventRegistrationIDs(ids...)
}

// ClearMessagesSent clears all "messages_sent" edges to the Message entity.
func (_u *UserUpdateOne) ClearMessagesSent() *UserUpdateOne {
	_u.mutation.ClearMessagesSent()
	return _u
}

// RemoveMessagesSentIDs removes the "messages_sent" edge to Message entities by IDs.
func (_u *UserUpdateOne) RemoveMessagesSentIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveMessagesSentIDs(ids...)
	return _u
}

// RemoveMessagesSent removes "messages_sent" edges to Message entities.
func (_u *UserUpdateOne) RemoveMessagesSent(v ...*Message) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessagesSentIDs(ids...)
}

// ClearConversationLinks clears all "conversation_links" edges to the ConversationParticipant entity.
func (_u *UserUpdateOne) ClearConversationLinks() *UserUpdateOne {
	_u.mutation.ClearConversationLinks()
	return _u
}

// RemoveConversationLinkIDs removes the "conversation_links" edge to ConversationParticipant entities by IDs.
func (_u *UserUpdateOne) RemoveConversationLinkIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveConversationLinkIDs(ids...)
	return _u
}

// RemoveConversationLinks removes "conversation_links" edges to ConversationParticipant entities.
func (_u *UserUpdateOne) RemoveConversationLinks(v ...*ConversationParticipant) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveConversationLinkIDs(ids...)
}

// ClearVolunteerApplications clears all "volunteer_applications" edges to the VolunteerApplication entity.
func (_u *UserUpdateOne) ClearVolunteerApplications() *UserUpdateOne {
	_u.mutation.ClearVolunteerApplications()
	return _u
}

// RemoveVolunteerApplicationIDs removes the "volunteer_applications" edge to VolunteerApplication entities by IDs.
func (_u *UserUpdateOne) RemoveVolunteerApplicationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveVolunteerApplicationIDs(ids...)
	return _u
}

// RemoveVolunteerApplications removes "volunteer_applications" edges to VolunteerApplication entities.
func (_u *UserUpdateOne) RemoveVolunteerApplications(v ...*VolunteerApplication) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVolunteerApplicationIDs(ids...)
}

// ClearMentorshipRequests clears all "mentorship_requests" edges to the MentorshipRequest entity.
func (_u *UserUpdateOne) ClearMentorshipRequests() *UserUpdateOne {
	_u.mutation.ClearMentorshipRequests()
	return _u
}

// RemoveMentorshipRequestIDs removes the "mentorship_requests" edge to MentorshipRequest entities by IDs.
func (_u *UserUpdateOne) RemoveMentorshipRequestIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveMentorshipRequestIDs(ids...)
	return _u
}

// RemoveMentorshipRequests removes "mentorship_requests" edges to MentorshipRequest entities.
func (_u *UserUpdateOne) RemoveMentorshipRequests(v ...*MentorshipRequest) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMentorshipRequestIDs(ids...)
}

// ClearMentorshipsMentoring clears all "mentorships_mentoring" edges to the MentorshipRequest entity.
func (_u *UserUpdateOne) ClearMentorshipsMentoring() *UserUpdateOne {
	_u.mutation.ClearMentorshipsMentoring()
	return _u
}

// RemoveMentorshipsMentoringIDs removes the "mentorships_mentoring" edge to MentorshipRequest entities by IDs.
func (_u *UserUpdateOne) RemoveMentorshipsMentoringIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveMentorshipsMentoringIDs(ids...)
	return _u
}

// RemoveMentorshipsMentoring removes "mentorships_mentoring" edges to MentorshipRequest entities.
func (_u *UserUpdateOne) RemoveMentorshipsMentoring(v ...*MentorshipRequest) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMentorshipsMentoringIDs(ids...)
}

// ClearAchievements clears all "achievements" edges to the UserAchievement entity.
func (_u *UserUpdateOne) ClearAchievements() *UserUpdateOne {
	_u.mutation.ClearAchievements()
	return _u
}

// RemoveAchievementIDs removes the "achievements" edge to UserAchievement entities by IDs.
func (_u *UserUpdateOne) RemoveAchievementIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveAchievementIDs(ids...)
	return _u
}

// RemoveAchievements removes "achievements" edges to UserAchievement entities.
func (_u *UserUpdateOne) RemoveAchievements(v ...*UserAchievement) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAchievementIDs(ids...)
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *UserUpdateOne) ClearDonations() *UserUpdateOne {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *UserUpdateOne) RemoveDonationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *UserUpdateOne) RemoveDonations(v ...*Donation) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (_u *UserUpdateOne) ClearOrganization() *UserUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (_u *UserUpdateOne) RemoveOrganizationIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (_u *UserUpdateOne) RemoveOrganization(v ...*Organization) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearManagedPartnerships clears all "managed_partnerships" edges to the Partnership entity.
func (_u *UserUpdateOne) ClearManagedPartnerships() *UserUpdateOne {
	_u.mutation.ClearManagedPartnerships()
	return _u
}

// RemoveManagedPartnershipIDs removes the "managed_partnerships" edge to Partnership entities by IDs.
func (_u *UserUpdateOne) RemoveManagedPartnershipIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveManagedPartnershipIDs(ids...)
	return _u
}

// RemoveManagedPartnerships removes "managed_partnerships" edges to Partnership entities.
func (_u *UserUpdateOne) RemoveManagedPartnerships(v ...*Partnership) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveManagedPartnershipIDs(ids...)
}

// ClearPartnershipContacts clears all "partnership_contacts" edges to the Partnership entity.
func (_u *UserUpdateOne) ClearPartnershipContacts() *UserUpdateOne {
	_u.mutation.ClearPartnershipContacts()
	return _u
}

// RemovePartnershipContactIDs removes the "partnership_contacts" edge to Partnership entities by IDs.
func (_u *UserUpdateOne) RemovePartnershipContactIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePartnershipContactIDs(ids...)
	return _u
}

// RemovePartnershipContacts removes "partnership_contacts" edges to Partnership entities.
func (_u *UserUpdateOne) RemovePartnershipContacts(v ...*Partnership) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnershipContactIDs(ids...)
}

// ClearSiteVisits clears all "site_visits" edges to the SiteVisit entity.
func (_u *UserUpdateOne) ClearSiteVisits() *UserUpdateOne {
	_u.mutation.ClearSiteVisits()
	return _u
}

// RemoveSiteVisitIDs removes the "site_visits" edge to SiteVisit entities by IDs.
func (_u *UserUpdateOne) RemoveSiteVisitIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveSiteVisitIDs(ids...)
	return _u
}

// RemoveSiteVisits removes "site_visits" edges to SiteVisit entities.
func (_u *UserUpdateOne) RemoveSiteVisits(v ...*SiteVisit) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteVisitIDs(ids...)
}

// ClearDocumentUploads clears all "document_uploads" edges to the Document entity.
func (_u *UserUpdateOne) ClearDocumentUploads() *UserUpdateOne {
	_u.mutation.ClearDocumentUploads()
	return _u
}

// RemoveDocumentUploadIDs removes the "document_uploads" edge to Document entities by IDs.
func (_u *UserUpdateOne) RemoveDocumentUploadIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveDocumentUploadIDs(ids...)
	return _u
}

// RemoveDocumentUploads removes "document_uploads" edges to Document entities.
func (_u *UserUpdateOne) RemoveDocumentUploads(v ...*Document) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentUploadIDs(ids...)
}

// ClearActivityLogs clears all "activity_logs" edges to the ActivityLog entity.
func (_u *UserUpdateOne) ClearActivityLogs() *UserUpdateOne {
	_u.mutation.ClearActivityLogs()
	return _u
}

// RemoveActivityLogIDs removes the "activity_logs" edge to ActivityLog entities by IDs.
func (_u *UserUpdateOne) RemoveActivityLogIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveActivityLogIDs(ids...)
	return _u
}

// RemoveActivityLogs removes "activity_logs" edges to ActivityLog entities.
func (_u *UserUpdateOne) RemoveActivityLogs(v ...*ActivityLog) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActivityLogIDs(ids...)
}

// ClearConsents clears the "consents" edge to the UserConsent entity.
func (_u *UserUpdateOne) ClearConsents() *UserUpdateOne {
	_u.mutation.ClearConsents()
	return _u
}

// ClearOnboarding clears the "onboarding" edge to the UserOnboarding entity.
func (_u *UserUpdateOne) ClearOnboarding() *UserUpdateOne {
	_u.mutation.ClearOnboarding()
	return _u
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(user.FieldHashedPassword, field.TypeString, value)
	}
	if _u.mutation.HashedPasswordCleared() {
		_spec.ClearField(user.FieldHashedPassword, field.TypeString)
	}
	if value, ok := _u.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeTime, value)
	}
	if _u.mutation.EmailVerifiedCleared() {
		_spec.ClearField(user.FieldEmailVerified, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeactivatedAt(); ok {
		_spec.SetField(user.FieldDeactivatedAt, field.TypeTime, value)
	}
	if _u.mutation.DeactivatedAtCleared() {
		_spec.ClearField(user.FieldDeactivatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ImpersonatingUserID(); ok {
		_spec.SetField(user.FieldImpersonatingUserID, field.TypeString, value)
	}
	if _u.mutation.ImpersonatingUserIDCleared() {
		_spec.ClearField(user.FieldImpersonatingUserID, field.TypeString)
	}
	if value, ok := _u.mutation.SecurityTimestamp(); ok {
		_spec.SetField(user.FieldSecurityTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PasswordResetRequired(); ok {
		_spec.SetField(user.FieldPasswordResetRequired, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if value, ok := _u.mutation.MfaSecret(); ok {
		_spec.SetField(user.FieldMfaSecret, field.TypeString, value)
	}
	if _u.mutation.MfaSecretCleared() {
		_spec.ClearField(user.FieldMfaSecret, field.TypeString)
	}
	if value, ok := _u.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnboardingStartedAt(); ok {
		_spec.SetField(user.FieldOnboardingStartedAt, field.TypeTime, value)
	}
	if _u.mutation.OnboardingStartedAtCleared() {
		_spec.ClearField(user.FieldOnboardingStartedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.OnboardingCompletedAt(); ok {
		_spec.SetField(user.FieldOnboardingCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.OnboardingCompletedAtCleared() {
		_spec.ClearField(user.FieldOnboardingCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.OnboardingSkipped(); ok {
		_spec.SetField(user.FieldOnboardingSkipped, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnboardingVersion(); ok {
		_spec.SetField(user.FieldOnboardingVersion, field.TypeString, value)
	}
	if _u.mutation.OnboardingVersionCleared() {
		_spec.ClearField(user.FieldOnboardingVersion, field.TypeString)
	}
	if value, ok := _u.mutation.OnboardingCompleted(); ok {
		_spec.SetField(user.FieldOnboardingCompleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if _u.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := _u.mutation.AnalyticsProperties(); ok {
		_spec.SetField(user.FieldAnalyticsProperties, field.TypeJSON, value)
	}
	if _u.mutation.AnalyticsPropertiesCleared() {
		_spec.ClearField(user.FieldAnalyticsProperties, field.TypeJSON)
	}
	if _u.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTokensIDs(); len(nodes) > 0 && !_u.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustedDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustedDevicesIDs(); len(nodes) > 0 && !_u.mutation.TrustedDevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustedDevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trusteddevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PasswordHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPasswordHistoryIDs(); len(nodes) > 0 && !_u.mutation.PasswordHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PasswordHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeamMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeamMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !_u.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobsIDs(); len(nodes) > 0 && !_u.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DashboardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDashboardsIDs(); len(nodes) > 0 && !_u.mutation.DashboardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DashboardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AnalyticsEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAnalyticsEventsIDs(); len(nodes) > 0 && !_u.mutation.AnalyticsEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AnalyticsEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedReportsIDs(); len(nodes) > 0 && !_u.mutation.CreatedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGeneratedReportsIDs(); len(nodes) > 0 && !_u.mutation.GeneratedReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GeneratedReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReportPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedReportPermissionsIDs(); len(nodes) > 0 && !_u.mutation.ReportPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledReportsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedProgramsIDs(); len(nodes) > 0 && !_u.mutation.CreatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UpdatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUpdatedProgramsIDs(); len(nodes) > 0 && !_u.mutation.UpdatedProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UpdatedProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramEnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramEnrolmentsIDs(); len(nodes) > 0 && !_u.mutation.ProgramEnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramEnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantInIDs(); len(nodes) > 0 && !_u.mutation.ParticipantInCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantInIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSuccessStoriesIDs(); len(nodes) > 0 && !_u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NewsArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNewsArticlesIDs(); len(nodes) > 0 && !_u.mutation.NewsArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NewsArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCreatedEventsIDs(); len(nodes) > 0 && !_u.mutation.CreatedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventRegistrationsIDs(); len(nodes) > 0 && !_u.mutation.EventRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MessagesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessagesSentIDs(); len(nodes) > 0 && !_u.mutation.MessagesSentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessagesSentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConversationLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedConversationLinksIDs(); len(nodes) > 0 && !_u.mutation.ConversationLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConversationLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVolunteerApplicationsIDs(); len(nodes) > 0 && !_u.mutation.VolunteerApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerapplication.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMentorshipRequestsIDs(); len(nodes) > 0 && !_u.mutation.MentorshipRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorshipsMentoringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMentorshipsMentoringIDs(); len(nodes) > 0 && !_u.mutation.MentorshipsMentoringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorshipsMentoringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAchievementsIDs(); len(nodes) > 0 && !_u.mutation.AchievementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AchievementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userachievement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !_u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ManagedPartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedManagedPartnershipsIDs(); len(nodes) > 0 && !_u.mutation.ManagedPartnershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ManagedPartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PartnershipContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnershipContactsIDs(); len(nodes) > 0 && !_u.mutation.PartnershipContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSiteVisitsIDs(); len(nodes) > 0 && !_u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentUploadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentUploadsIDs(); len(nodes) > 0 && !_u.mutation.DocumentUploadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentUploadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActivityLogsIDs(); len(nodes) > 0 && !_u.mutation.ActivityLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActivityLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ConsentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconsent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ConsentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconsent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OnboardingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OnboardingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
