// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/badge"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Badge is the model entity for the Badge schema.
type Badge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Criteria holds the value of the "criteria" field.
	Criteria string `json:"criteria,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BadgeQuery when eager-loading is set.
	Edges        BadgeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BadgeEdges holds the relations/edges for other nodes in the graph.
type BadgeEdges struct {
	// UserAchievements holds the value of the user_achievements edge.
	UserAchievements []*UserAchievement `json:"user_achievements,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserAchievementsOrErr returns the UserAchievements value or an error if the edge
// was not loaded in eager-loading.
func (e BadgeEdges) UserAchievementsOrErr() ([]*UserAchievement, error) {
	if e.loadedTypes[0] {
		return e.UserAchievements, nil
	}
	return nil, &NotLoadedError{edge: "user_achievements"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Badge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case badge.FieldName, badge.FieldDescription:
			values[i] = new([]byte)
		case badge.FieldID:
			values[i] = new(sql.NullInt64)
		case badge.FieldImageURL, badge.FieldCriteria:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Badge fields.
func (_m *Badge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case badge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case badge.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case badge.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case badge.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case badge.FieldCriteria:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field criteria", values[i])
			} else if value.Valid {
				_m.Criteria = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Badge.
// This includes values selected through modifiers, order, etc.
func (_m *Badge) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserAchievements queries the "user_achievements" edge of the Badge entity.
func (_m *Badge) QueryUserAchievements() *UserAchievementQuery {
	return NewBadgeClient(_m.config).QueryUserAchievements(_m)
}

// Update returns a builder for updating this Badge.
// Note that you need to call Badge.Unwrap() before calling this method if this Badge
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Badge) Update() *BadgeUpdateOne {
	return NewBadgeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Badge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Badge) Unwrap() *Badge {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Badge is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Badge) String() string {
	var builder strings.Builder
	builder.WriteString("Badge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("criteria=")
	builder.WriteString(_m.Criteria)
	builder.WriteByte(')')
	return builder.String()
}

// Badges is a parsable slice of Badge.
type Badges []*Badge
