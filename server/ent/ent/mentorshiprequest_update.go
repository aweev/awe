// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MentorshipRequestUpdate is the builder for updating MentorshipRequest entities.
type MentorshipRequestUpdate struct {
	config
	hooks    []Hook
	mutation *MentorshipRequestMutation
}

// Where appends a list predicates to the MentorshipRequestUpdate builder.
func (_u *MentorshipRequestUpdate) Where(ps ...predicate.MentorshipRequest) *MentorshipRequestUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *MentorshipRequestUpdate) SetStatus(v mentorshiprequest.Status) *MentorshipRequestUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableStatus(v *mentorshiprequest.Status) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGoals sets the "goals" field.
func (_u *MentorshipRequestUpdate) SetGoals(v []string) *MentorshipRequestUpdate {
	_u.mutation.SetGoals(v)
	return _u
}

// AppendGoals appends value to the "goals" field.
func (_u *MentorshipRequestUpdate) AppendGoals(v []string) *MentorshipRequestUpdate {
	_u.mutation.AppendGoals(v)
	return _u
}

// SetPreferences sets the "preferences" field.
func (_u *MentorshipRequestUpdate) SetPreferences(v map[string]string) *MentorshipRequestUpdate {
	_u.mutation.SetPreferences(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MentorshipRequestUpdate) SetDuration(v string) *MentorshipRequestUpdate {
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableDuration(v *string) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// SetMatchedAt sets the "matched_at" field.
func (_u *MentorshipRequestUpdate) SetMatchedAt(v time.Time) *MentorshipRequestUpdate {
	_u.mutation.SetMatchedAt(v)
	return _u
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableMatchedAt(v *time.Time) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetMatchedAt(*v)
	}
	return _u
}

// ClearMatchedAt clears the value of the "matched_at" field.
func (_u *MentorshipRequestUpdate) ClearMatchedAt() *MentorshipRequestUpdate {
	_u.mutation.ClearMatchedAt()
	return _u
}

// SetMatchedBy sets the "matched_by" field.
func (_u *MentorshipRequestUpdate) SetMatchedBy(v string) *MentorshipRequestUpdate {
	_u.mutation.SetMatchedBy(v)
	return _u
}

// SetNillableMatchedBy sets the "matched_by" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableMatchedBy(v *string) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetMatchedBy(*v)
	}
	return _u
}

// ClearMatchedBy clears the value of the "matched_by" field.
func (_u *MentorshipRequestUpdate) ClearMatchedBy() *MentorshipRequestUpdate {
	_u.mutation.ClearMatchedBy()
	return _u
}

// SetMatchReason sets the "match_reason" field.
func (_u *MentorshipRequestUpdate) SetMatchReason(v string) *MentorshipRequestUpdate {
	_u.mutation.SetMatchReason(v)
	return _u
}

// SetNillableMatchReason sets the "match_reason" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableMatchReason(v *string) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetMatchReason(*v)
	}
	return _u
}

// ClearMatchReason clears the value of the "match_reason" field.
func (_u *MentorshipRequestUpdate) ClearMatchReason() *MentorshipRequestUpdate {
	_u.mutation.ClearMatchReason()
	return _u
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (_u *MentorshipRequestUpdate) SetSessionsCompleted(v int) *MentorshipRequestUpdate {
	_u.mutation.ResetSessionsCompleted()
	_u.mutation.SetSessionsCompleted(v)
	return _u
}

// SetNillableSessionsCompleted sets the "sessions_completed" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableSessionsCompleted(v *int) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetSessionsCompleted(*v)
	}
	return _u
}

// AddSessionsCompleted adds value to the "sessions_completed" field.
func (_u *MentorshipRequestUpdate) AddSessionsCompleted(v int) *MentorshipRequestUpdate {
	_u.mutation.AddSessionsCompleted(v)
	return _u
}

// SetLastSessionDate sets the "last_session_date" field.
func (_u *MentorshipRequestUpdate) SetLastSessionDate(v time.Time) *MentorshipRequestUpdate {
	_u.mutation.SetLastSessionDate(v)
	return _u
}

// SetNillableLastSessionDate sets the "last_session_date" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableLastSessionDate(v *time.Time) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetLastSessionDate(*v)
	}
	return _u
}

// ClearLastSessionDate clears the value of the "last_session_date" field.
func (_u *MentorshipRequestUpdate) ClearLastSessionDate() *MentorshipRequestUpdate {
	_u.mutation.ClearLastSessionDate()
	return _u
}

// SetNextSessionDate sets the "next_session_date" field.
func (_u *MentorshipRequestUpdate) SetNextSessionDate(v time.Time) *MentorshipRequestUpdate {
	_u.mutation.SetNextSessionDate(v)
	return _u
}

// SetNillableNextSessionDate sets the "next_session_date" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableNextSessionDate(v *time.Time) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetNextSessionDate(*v)
	}
	return _u
}

// ClearNextSessionDate clears the value of the "next_session_date" field.
func (_u *MentorshipRequestUpdate) ClearNextSessionDate() *MentorshipRequestUpdate {
	_u.mutation.ClearNextSessionDate()
	return _u
}

// SetCompletionNotes sets the "completion_notes" field.
func (_u *MentorshipRequestUpdate) SetCompletionNotes(v string) *MentorshipRequestUpdate {
	_u.mutation.SetCompletionNotes(v)
	return _u
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableCompletionNotes(v *string) *MentorshipRequestUpdate {
	if v != nil {
		_u.SetCompletionNotes(*v)
	}
	return _u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (_u *MentorshipRequestUpdate) ClearCompletionNotes() *MentorshipRequestUpdate {
	_u.mutation.ClearCompletionNotes()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MentorshipRequestUpdate) SetUpdatedAt(v time.Time) *MentorshipRequestUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetRequesterID sets the "requester" edge to the User entity by ID.
func (_u *MentorshipRequestUpdate) SetRequesterID(id int) *MentorshipRequestUpdate {
	_u.mutation.SetRequesterID(id)
	return _u
}

// SetRequester sets the "requester" edge to the User entity.
func (_u *MentorshipRequestUpdate) SetRequester(v *User) *MentorshipRequestUpdate {
	return _u.SetRequesterID(v.ID)
}

// SetMentorID sets the "mentor" edge to the User entity by ID.
func (_u *MentorshipRequestUpdate) SetMentorID(id int) *MentorshipRequestUpdate {
	_u.mutation.SetMentorID(id)
	return _u
}

// SetNillableMentorID sets the "mentor" edge to the User entity by ID if the given value is not nil.
func (_u *MentorshipRequestUpdate) SetNillableMentorID(id *int) *MentorshipRequestUpdate {
	if id != nil {
		_u = _u.SetMentorID(*id)
	}
	return _u
}

// SetMentor sets the "mentor" edge to the User entity.
func (_u *MentorshipRequestUpdate) SetMentor(v *User) *MentorshipRequestUpdate {
	return _u.SetMentorID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the MentorshipSession entity by IDs.
func (_u *MentorshipRequestUpdate) AddSessionIDs(ids ...int) *MentorshipRequestUpdate {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the MentorshipSession entity.
func (_u *MentorshipRequestUpdate) AddSessions(v ...*MentorshipSession) *MentorshipRequestUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// Mutation returns the MentorshipRequestMutation object of the builder.
func (_u *MentorshipRequestUpdate) Mutation() *MentorshipRequestMutation {
	return _u.mutation
}

// ClearRequester clears the "requester" edge to the User entity.
func (_u *MentorshipRequestUpdate) ClearRequester() *MentorshipRequestUpdate {
	_u.mutation.ClearRequester()
	return _u
}

// ClearMentor clears the "mentor" edge to the User entity.
func (_u *MentorshipRequestUpdate) ClearMentor() *MentorshipRequestUpdate {
	_u.mutation.ClearMentor()
	return _u
}

// ClearSessions clears all "sessions" edges to the MentorshipSession entity.
func (_u *MentorshipRequestUpdate) ClearSessions() *MentorshipRequestUpdate {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to MentorshipSession entities by IDs.
func (_u *MentorshipRequestUpdate) RemoveSessionIDs(ids ...int) *MentorshipRequestUpdate {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to MentorshipSession entities.
func (_u *MentorshipRequestUpdate) RemoveSessions(v ...*MentorshipSession) *MentorshipRequestUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MentorshipRequestUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MentorshipRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MentorshipRequestUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MentorshipRequestUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MentorshipRequestUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := mentorshiprequest.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MentorshipRequestUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := mentorshiprequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MentorshipRequest.status": %w`, err)}
		}
	}
	if _u.mutation.RequesterCleared() && len(_u.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MentorshipRequest.requester"`)
	}
	return nil
}

func (_u *MentorshipRequestUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentorshiprequest.Table, mentorshiprequest.Columns, sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(mentorshiprequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Goals(); ok {
		_spec.SetField(mentorshiprequest.FieldGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mentorshiprequest.FieldGoals, value)
		})
	}
	if value, ok := _u.mutation.Preferences(); ok {
		_spec.SetField(mentorshiprequest.FieldPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(mentorshiprequest.FieldDuration, field.TypeString, value)
	}
	if value, ok := _u.mutation.MatchedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedAt, field.TypeTime, value)
	}
	if _u.mutation.MatchedAtCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.MatchedBy(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedBy, field.TypeString, value)
	}
	if _u.mutation.MatchedByCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchedBy, field.TypeString)
	}
	if value, ok := _u.mutation.MatchReason(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchReason, field.TypeString, value)
	}
	if _u.mutation.MatchReasonCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchReason, field.TypeString)
	}
	if value, ok := _u.mutation.SessionsCompleted(); ok {
		_spec.SetField(mentorshiprequest.FieldSessionsCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSessionsCompleted(); ok {
		_spec.AddField(mentorshiprequest.FieldSessionsCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldLastSessionDate, field.TypeTime, value)
	}
	if _u.mutation.LastSessionDateCleared() {
		_spec.ClearField(mentorshiprequest.FieldLastSessionDate, field.TypeTime)
	}
	if value, ok := _u.mutation.NextSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldNextSessionDate, field.TypeTime, value)
	}
	if _u.mutation.NextSessionDateCleared() {
		_spec.ClearField(mentorshiprequest.FieldNextSessionDate, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletionNotes(); ok {
		_spec.SetField(mentorshiprequest.FieldCompletionNotes, field.TypeString, value)
	}
	if _u.mutation.CompletionNotesCleared() {
		_spec.ClearField(mentorshiprequest.FieldCompletionNotes, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshiprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MentorshipRequestUpdateOne is the builder for updating a single MentorshipRequest entity.
type MentorshipRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MentorshipRequestMutation
}

// SetStatus sets the "status" field.
func (_u *MentorshipRequestUpdateOne) SetStatus(v mentorshiprequest.Status) *MentorshipRequestUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableStatus(v *mentorshiprequest.Status) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGoals sets the "goals" field.
func (_u *MentorshipRequestUpdateOne) SetGoals(v []string) *MentorshipRequestUpdateOne {
	_u.mutation.SetGoals(v)
	return _u
}

// AppendGoals appends value to the "goals" field.
func (_u *MentorshipRequestUpdateOne) AppendGoals(v []string) *MentorshipRequestUpdateOne {
	_u.mutation.AppendGoals(v)
	return _u
}

// SetPreferences sets the "preferences" field.
func (_u *MentorshipRequestUpdateOne) SetPreferences(v map[string]string) *MentorshipRequestUpdateOne {
	_u.mutation.SetPreferences(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *MentorshipRequestUpdateOne) SetDuration(v string) *MentorshipRequestUpdateOne {
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableDuration(v *string) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// SetMatchedAt sets the "matched_at" field.
func (_u *MentorshipRequestUpdateOne) SetMatchedAt(v time.Time) *MentorshipRequestUpdateOne {
	_u.mutation.SetMatchedAt(v)
	return _u
}

// SetNillableMatchedAt sets the "matched_at" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableMatchedAt(v *time.Time) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetMatchedAt(*v)
	}
	return _u
}

// ClearMatchedAt clears the value of the "matched_at" field.
func (_u *MentorshipRequestUpdateOne) ClearMatchedAt() *MentorshipRequestUpdateOne {
	_u.mutation.ClearMatchedAt()
	return _u
}

// SetMatchedBy sets the "matched_by" field.
func (_u *MentorshipRequestUpdateOne) SetMatchedBy(v string) *MentorshipRequestUpdateOne {
	_u.mutation.SetMatchedBy(v)
	return _u
}

// SetNillableMatchedBy sets the "matched_by" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableMatchedBy(v *string) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetMatchedBy(*v)
	}
	return _u
}

// ClearMatchedBy clears the value of the "matched_by" field.
func (_u *MentorshipRequestUpdateOne) ClearMatchedBy() *MentorshipRequestUpdateOne {
	_u.mutation.ClearMatchedBy()
	return _u
}

// SetMatchReason sets the "match_reason" field.
func (_u *MentorshipRequestUpdateOne) SetMatchReason(v string) *MentorshipRequestUpdateOne {
	_u.mutation.SetMatchReason(v)
	return _u
}

// SetNillableMatchReason sets the "match_reason" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableMatchReason(v *string) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetMatchReason(*v)
	}
	return _u
}

// ClearMatchReason clears the value of the "match_reason" field.
func (_u *MentorshipRequestUpdateOne) ClearMatchReason() *MentorshipRequestUpdateOne {
	_u.mutation.ClearMatchReason()
	return _u
}

// SetSessionsCompleted sets the "sessions_completed" field.
func (_u *MentorshipRequestUpdateOne) SetSessionsCompleted(v int) *MentorshipRequestUpdateOne {
	_u.mutation.ResetSessionsCompleted()
	_u.mutation.SetSessionsCompleted(v)
	return _u
}

// SetNillableSessionsCompleted sets the "sessions_completed" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableSessionsCompleted(v *int) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetSessionsCompleted(*v)
	}
	return _u
}

// AddSessionsCompleted adds value to the "sessions_completed" field.
func (_u *MentorshipRequestUpdateOne) AddSessionsCompleted(v int) *MentorshipRequestUpdateOne {
	_u.mutation.AddSessionsCompleted(v)
	return _u
}

// SetLastSessionDate sets the "last_session_date" field.
func (_u *MentorshipRequestUpdateOne) SetLastSessionDate(v time.Time) *MentorshipRequestUpdateOne {
	_u.mutation.SetLastSessionDate(v)
	return _u
}

// SetNillableLastSessionDate sets the "last_session_date" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableLastSessionDate(v *time.Time) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetLastSessionDate(*v)
	}
	return _u
}

// ClearLastSessionDate clears the value of the "last_session_date" field.
func (_u *MentorshipRequestUpdateOne) ClearLastSessionDate() *MentorshipRequestUpdateOne {
	_u.mutation.ClearLastSessionDate()
	return _u
}

// SetNextSessionDate sets the "next_session_date" field.
func (_u *MentorshipRequestUpdateOne) SetNextSessionDate(v time.Time) *MentorshipRequestUpdateOne {
	_u.mutation.SetNextSessionDate(v)
	return _u
}

// SetNillableNextSessionDate sets the "next_session_date" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableNextSessionDate(v *time.Time) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetNextSessionDate(*v)
	}
	return _u
}

// ClearNextSessionDate clears the value of the "next_session_date" field.
func (_u *MentorshipRequestUpdateOne) ClearNextSessionDate() *MentorshipRequestUpdateOne {
	_u.mutation.ClearNextSessionDate()
	return _u
}

// SetCompletionNotes sets the "completion_notes" field.
func (_u *MentorshipRequestUpdateOne) SetCompletionNotes(v string) *MentorshipRequestUpdateOne {
	_u.mutation.SetCompletionNotes(v)
	return _u
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableCompletionNotes(v *string) *MentorshipRequestUpdateOne {
	if v != nil {
		_u.SetCompletionNotes(*v)
	}
	return _u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (_u *MentorshipRequestUpdateOne) ClearCompletionNotes() *MentorshipRequestUpdateOne {
	_u.mutation.ClearCompletionNotes()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MentorshipRequestUpdateOne) SetUpdatedAt(v time.Time) *MentorshipRequestUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetRequesterID sets the "requester" edge to the User entity by ID.
func (_u *MentorshipRequestUpdateOne) SetRequesterID(id int) *MentorshipRequestUpdateOne {
	_u.mutation.SetRequesterID(id)
	return _u
}

// SetRequester sets the "requester" edge to the User entity.
func (_u *MentorshipRequestUpdateOne) SetRequester(v *User) *MentorshipRequestUpdateOne {
	return _u.SetRequesterID(v.ID)
}

// SetMentorID sets the "mentor" edge to the User entity by ID.
func (_u *MentorshipRequestUpdateOne) SetMentorID(id int) *MentorshipRequestUpdateOne {
	_u.mutation.SetMentorID(id)
	return _u
}

// SetNillableMentorID sets the "mentor" edge to the User entity by ID if the given value is not nil.
func (_u *MentorshipRequestUpdateOne) SetNillableMentorID(id *int) *MentorshipRequestUpdateOne {
	if id != nil {
		_u = _u.SetMentorID(*id)
	}
	return _u
}

// SetMentor sets the "mentor" edge to the User entity.
func (_u *MentorshipRequestUpdateOne) SetMentor(v *User) *MentorshipRequestUpdateOne {
	return _u.SetMentorID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the MentorshipSession entity by IDs.
func (_u *MentorshipRequestUpdateOne) AddSessionIDs(ids ...int) *MentorshipRequestUpdateOne {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the MentorshipSession entity.
func (_u *MentorshipRequestUpdateOne) AddSessions(v ...*MentorshipSession) *MentorshipRequestUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// Mutation returns the MentorshipRequestMutation object of the builder.
func (_u *MentorshipRequestUpdateOne) Mutation() *MentorshipRequestMutation {
	return _u.mutation
}

// ClearRequester clears the "requester" edge to the User entity.
func (_u *MentorshipRequestUpdateOne) ClearRequester() *MentorshipRequestUpdateOne {
	_u.mutation.ClearRequester()
	return _u
}

// ClearMentor clears the "mentor" edge to the User entity.
func (_u *MentorshipRequestUpdateOne) ClearMentor() *MentorshipRequestUpdateOne {
	_u.mutation.ClearMentor()
	return _u
}

// ClearSessions clears all "sessions" edges to the MentorshipSession entity.
func (_u *MentorshipRequestUpdateOne) ClearSessions() *MentorshipRequestUpdateOne {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to MentorshipSession entities by IDs.
func (_u *MentorshipRequestUpdateOne) RemoveSessionIDs(ids ...int) *MentorshipRequestUpdateOne {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to MentorshipSession entities.
func (_u *MentorshipRequestUpdateOne) RemoveSessions(v ...*MentorshipSession) *MentorshipRequestUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the MentorshipRequestUpdate builder.
func (_u *MentorshipRequestUpdateOne) Where(ps ...predicate.MentorshipRequest) *MentorshipRequestUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MentorshipRequestUpdateOne) Select(field string, fields ...string) *MentorshipRequestUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MentorshipRequest entity.
func (_u *MentorshipRequestUpdateOne) Save(ctx context.Context) (*MentorshipRequest, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MentorshipRequestUpdateOne) SaveX(ctx context.Context) *MentorshipRequest {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MentorshipRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MentorshipRequestUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MentorshipRequestUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := mentorshiprequest.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MentorshipRequestUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := mentorshiprequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MentorshipRequest.status": %w`, err)}
		}
	}
	if _u.mutation.RequesterCleared() && len(_u.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MentorshipRequest.requester"`)
	}
	return nil
}

func (_u *MentorshipRequestUpdateOne) sqlSave(ctx context.Context) (_node *MentorshipRequest, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mentorshiprequest.Table, mentorshiprequest.Columns, sqlgraph.NewFieldSpec(mentorshiprequest.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MentorshipRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mentorshiprequest.FieldID)
		for _, f := range fields {
			if !mentorshiprequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mentorshiprequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(mentorshiprequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Goals(); ok {
		_spec.SetField(mentorshiprequest.FieldGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mentorshiprequest.FieldGoals, value)
		})
	}
	if value, ok := _u.mutation.Preferences(); ok {
		_spec.SetField(mentorshiprequest.FieldPreferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(mentorshiprequest.FieldDuration, field.TypeString, value)
	}
	if value, ok := _u.mutation.MatchedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedAt, field.TypeTime, value)
	}
	if _u.mutation.MatchedAtCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.MatchedBy(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchedBy, field.TypeString, value)
	}
	if _u.mutation.MatchedByCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchedBy, field.TypeString)
	}
	if value, ok := _u.mutation.MatchReason(); ok {
		_spec.SetField(mentorshiprequest.FieldMatchReason, field.TypeString, value)
	}
	if _u.mutation.MatchReasonCleared() {
		_spec.ClearField(mentorshiprequest.FieldMatchReason, field.TypeString)
	}
	if value, ok := _u.mutation.SessionsCompleted(); ok {
		_spec.SetField(mentorshiprequest.FieldSessionsCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSessionsCompleted(); ok {
		_spec.AddField(mentorshiprequest.FieldSessionsCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.LastSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldLastSessionDate, field.TypeTime, value)
	}
	if _u.mutation.LastSessionDateCleared() {
		_spec.ClearField(mentorshiprequest.FieldLastSessionDate, field.TypeTime)
	}
	if value, ok := _u.mutation.NextSessionDate(); ok {
		_spec.SetField(mentorshiprequest.FieldNextSessionDate, field.TypeTime, value)
	}
	if _u.mutation.NextSessionDateCleared() {
		_spec.ClearField(mentorshiprequest.FieldNextSessionDate, field.TypeTime)
	}
	if value, ok := _u.mutation.CompletionNotes(); ok {
		_spec.SetField(mentorshiprequest.FieldCompletionNotes, field.TypeString, value)
	}
	if _u.mutation.CompletionNotesCleared() {
		_spec.ClearField(mentorshiprequest.FieldCompletionNotes, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(mentorshiprequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MentorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MentorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mentorshipsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MentorshipRequest{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshiprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
