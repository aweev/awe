// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DonationUpdate is the builder for updating Donation entities.
type DonationUpdate struct {
	config
	hooks    []Hook
	mutation *DonationMutation
}

// Where appends a list predicates to the DonationUpdate builder.
func (_u *DonationUpdate) Where(ps ...predicate.Donation) *DonationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *DonationUpdate) SetAmount(v float64) *DonationUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableAmount(v *float64) *DonationUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *DonationUpdate) AddAmount(v float64) *DonationUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *DonationUpdate) SetCurrency(v string) *DonationUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableCurrency(v *string) *DonationUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetIsRecurring sets the "is_recurring" field.
func (_u *DonationUpdate) SetIsRecurring(v bool) *DonationUpdate {
	_u.mutation.SetIsRecurring(v)
	return _u
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableIsRecurring(v *bool) *DonationUpdate {
	if v != nil {
		_u.SetIsRecurring(*v)
	}
	return _u
}

// SetFrequency sets the "frequency" field.
func (_u *DonationUpdate) SetFrequency(v string) *DonationUpdate {
	_u.mutation.SetFrequency(v)
	return _u
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableFrequency(v *string) *DonationUpdate {
	if v != nil {
		_u.SetFrequency(*v)
	}
	return _u
}

// SetPaymentMethod sets the "payment_method" field.
func (_u *DonationUpdate) SetPaymentMethod(v string) *DonationUpdate {
	_u.mutation.SetPaymentMethod(v)
	return _u
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (_u *DonationUpdate) SetNillablePaymentMethod(v *string) *DonationUpdate {
	if v != nil {
		_u.SetPaymentMethod(*v)
	}
	return _u
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (_u *DonationUpdate) ClearPaymentMethod() *DonationUpdate {
	_u.mutation.ClearPaymentMethod()
	return _u
}

// SetPaymentID sets the "payment_id" field.
func (_u *DonationUpdate) SetPaymentID(v string) *DonationUpdate {
	_u.mutation.SetPaymentID(v)
	return _u
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (_u *DonationUpdate) SetNillablePaymentID(v *string) *DonationUpdate {
	if v != nil {
		_u.SetPaymentID(*v)
	}
	return _u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (_u *DonationUpdate) ClearPaymentID() *DonationUpdate {
	_u.mutation.ClearPaymentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DonationUpdate) SetStatus(v string) *DonationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableStatus(v *string) *DonationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetProcessedAt sets the "processed_at" field.
func (_u *DonationUpdate) SetProcessedAt(v time.Time) *DonationUpdate {
	_u.mutation.SetProcessedAt(v)
	return _u
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableProcessedAt(v *time.Time) *DonationUpdate {
	if v != nil {
		_u.SetProcessedAt(*v)
	}
	return _u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (_u *DonationUpdate) ClearProcessedAt() *DonationUpdate {
	_u.mutation.ClearProcessedAt()
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *DonationUpdate) SetAnonymous(v bool) *DonationUpdate {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableAnonymous(v *bool) *DonationUpdate {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (_u *DonationUpdate) SetPaymentGatewayRef(v string) *DonationUpdate {
	_u.mutation.SetPaymentGatewayRef(v)
	return _u
}

// SetNillablePaymentGatewayRef sets the "payment_gateway_ref" field if the given value is not nil.
func (_u *DonationUpdate) SetNillablePaymentGatewayRef(v *string) *DonationUpdate {
	if v != nil {
		_u.SetPaymentGatewayRef(*v)
	}
	return _u
}

// ClearPaymentGatewayRef clears the value of the "payment_gateway_ref" field.
func (_u *DonationUpdate) ClearPaymentGatewayRef() *DonationUpdate {
	_u.mutation.ClearPaymentGatewayRef()
	return _u
}

// SetDonorMessage sets the "donor_message" field.
func (_u *DonationUpdate) SetDonorMessage(v string) *DonationUpdate {
	_u.mutation.SetDonorMessage(v)
	return _u
}

// SetNillableDonorMessage sets the "donor_message" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableDonorMessage(v *string) *DonationUpdate {
	if v != nil {
		_u.SetDonorMessage(*v)
	}
	return _u
}

// ClearDonorMessage clears the value of the "donor_message" field.
func (_u *DonationUpdate) ClearDonorMessage() *DonationUpdate {
	_u.mutation.ClearDonorMessage()
	return _u
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (_u *DonationUpdate) SetTaxReceiptSent(v bool) *DonationUpdate {
	_u.mutation.SetTaxReceiptSent(v)
	return _u
}

// SetNillableTaxReceiptSent sets the "tax_receipt_sent" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableTaxReceiptSent(v *bool) *DonationUpdate {
	if v != nil {
		_u.SetTaxReceiptSent(*v)
	}
	return _u
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (_u *DonationUpdate) SetTaxReceiptSentAt(v time.Time) *DonationUpdate {
	_u.mutation.SetTaxReceiptSentAt(v)
	return _u
}

// SetNillableTaxReceiptSentAt sets the "tax_receipt_sent_at" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableTaxReceiptSentAt(v *time.Time) *DonationUpdate {
	if v != nil {
		_u.SetTaxReceiptSentAt(*v)
	}
	return _u
}

// ClearTaxReceiptSentAt clears the value of the "tax_receipt_sent_at" field.
func (_u *DonationUpdate) ClearTaxReceiptSentAt() *DonationUpdate {
	_u.mutation.ClearTaxReceiptSentAt()
	return _u
}

// SetRecurringInterval sets the "recurring_interval" field.
func (_u *DonationUpdate) SetRecurringInterval(v string) *DonationUpdate {
	_u.mutation.SetRecurringInterval(v)
	return _u
}

// SetNillableRecurringInterval sets the "recurring_interval" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableRecurringInterval(v *string) *DonationUpdate {
	if v != nil {
		_u.SetRecurringInterval(*v)
	}
	return _u
}

// ClearRecurringInterval clears the value of the "recurring_interval" field.
func (_u *DonationUpdate) ClearRecurringInterval() *DonationUpdate {
	_u.mutation.ClearRecurringInterval()
	return _u
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (_u *DonationUpdate) SetNextPaymentDate(v time.Time) *DonationUpdate {
	_u.mutation.SetNextPaymentDate(v)
	return _u
}

// SetNillableNextPaymentDate sets the "next_payment_date" field if the given value is not nil.
func (_u *DonationUpdate) SetNillableNextPaymentDate(v *time.Time) *DonationUpdate {
	if v != nil {
		_u.SetNextPaymentDate(*v)
	}
	return _u
}

// ClearNextPaymentDate clears the value of the "next_payment_date" field.
func (_u *DonationUpdate) ClearNextPaymentDate() *DonationUpdate {
	_u.mutation.ClearNextPaymentDate()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *DonationUpdate) SetMetadata(v map[string]interface{}) *DonationUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *DonationUpdate) ClearMetadata() *DonationUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DonationUpdate) SetUpdatedAt(v time.Time) *DonationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_u *DonationUpdate) SetDonorID(id int) *DonationUpdate {
	_u.mutation.SetDonorID(id)
	return _u
}

// SetDonor sets the "donor" edge to the User entity.
func (_u *DonationUpdate) SetDonor(v *User) *DonationUpdate {
	return _u.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *DonationUpdate) SetProgramID(id int) *DonationUpdate {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *DonationUpdate) SetNillableProgramID(id *int) *DonationUpdate {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *DonationUpdate) SetProgram(v *Program) *DonationUpdate {
	return _u.SetProgramID(v.ID)
}

// SetCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID.
func (_u *DonationUpdate) SetCampaignID(id int) *DonationUpdate {
	_u.mutation.SetCampaignID(id)
	return _u
}

// SetNillableCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_u *DonationUpdate) SetNillableCampaignID(id *int) *DonationUpdate {
	if id != nil {
		_u = _u.SetCampaignID(*id)
	}
	return _u
}

// SetCampaign sets the "campaign" edge to the FundraisingCampaign entity.
func (_u *DonationUpdate) SetCampaign(v *FundraisingCampaign) *DonationUpdate {
	return _u.SetCampaignID(v.ID)
}

// Mutation returns the DonationMutation object of the builder.
func (_u *DonationUpdate) Mutation() *DonationMutation {
	return _u.mutation
}

// ClearDonor clears the "donor" edge to the User entity.
func (_u *DonationUpdate) ClearDonor() *DonationUpdate {
	_u.mutation.ClearDonor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *DonationUpdate) ClearProgram() *DonationUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// ClearCampaign clears the "campaign" edge to the FundraisingCampaign entity.
func (_u *DonationUpdate) ClearCampaign() *DonationUpdate {
	_u.mutation.ClearCampaign()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DonationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DonationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DonationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DonationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DonationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := donation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DonationUpdate) check() error {
	if _u.mutation.DonorCleared() && len(_u.mutation.DonorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Donation.donor"`)
	}
	return nil
}

func (_u *DonationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(donation.Table, donation.Columns, sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(donation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(donation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(donation.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsRecurring(); ok {
		_spec.SetField(donation.FieldIsRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Frequency(); ok {
		_spec.SetField(donation.FieldFrequency, field.TypeString, value)
	}
	if value, ok := _u.mutation.PaymentMethod(); ok {
		_spec.SetField(donation.FieldPaymentMethod, field.TypeString, value)
	}
	if _u.mutation.PaymentMethodCleared() {
		_spec.ClearField(donation.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentID(); ok {
		_spec.SetField(donation.FieldPaymentID, field.TypeString, value)
	}
	if _u.mutation.PaymentIDCleared() {
		_spec.ClearField(donation.FieldPaymentID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(donation.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProcessedAt(); ok {
		_spec.SetField(donation.FieldProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.ProcessedAtCleared() {
		_spec.ClearField(donation.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(donation.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PaymentGatewayRef(); ok {
		_spec.SetField(donation.FieldPaymentGatewayRef, field.TypeString, value)
	}
	if _u.mutation.PaymentGatewayRefCleared() {
		_spec.ClearField(donation.FieldPaymentGatewayRef, field.TypeString)
	}
	if value, ok := _u.mutation.DonorMessage(); ok {
		_spec.SetField(donation.FieldDonorMessage, field.TypeString, value)
	}
	if _u.mutation.DonorMessageCleared() {
		_spec.ClearField(donation.FieldDonorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.TaxReceiptSent(); ok {
		_spec.SetField(donation.FieldTaxReceiptSent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TaxReceiptSentAt(); ok {
		_spec.SetField(donation.FieldTaxReceiptSentAt, field.TypeTime, value)
	}
	if _u.mutation.TaxReceiptSentAtCleared() {
		_spec.ClearField(donation.FieldTaxReceiptSentAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RecurringInterval(); ok {
		_spec.SetField(donation.FieldRecurringInterval, field.TypeString, value)
	}
	if _u.mutation.RecurringIntervalCleared() {
		_spec.ClearField(donation.FieldRecurringInterval, field.TypeString)
	}
	if value, ok := _u.mutation.NextPaymentDate(); ok {
		_spec.SetField(donation.FieldNextPaymentDate, field.TypeTime, value)
	}
	if _u.mutation.NextPaymentDateCleared() {
		_spec.ClearField(donation.FieldNextPaymentDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(donation.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(donation.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(donation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{donation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DonationUpdateOne is the builder for updating a single Donation entity.
type DonationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DonationMutation
}

// SetAmount sets the "amount" field.
func (_u *DonationUpdateOne) SetAmount(v float64) *DonationUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableAmount(v *float64) *DonationUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *DonationUpdateOne) AddAmount(v float64) *DonationUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *DonationUpdateOne) SetCurrency(v string) *DonationUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableCurrency(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetIsRecurring sets the "is_recurring" field.
func (_u *DonationUpdateOne) SetIsRecurring(v bool) *DonationUpdateOne {
	_u.mutation.SetIsRecurring(v)
	return _u
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableIsRecurring(v *bool) *DonationUpdateOne {
	if v != nil {
		_u.SetIsRecurring(*v)
	}
	return _u
}

// SetFrequency sets the "frequency" field.
func (_u *DonationUpdateOne) SetFrequency(v string) *DonationUpdateOne {
	_u.mutation.SetFrequency(v)
	return _u
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableFrequency(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetFrequency(*v)
	}
	return _u
}

// SetPaymentMethod sets the "payment_method" field.
func (_u *DonationUpdateOne) SetPaymentMethod(v string) *DonationUpdateOne {
	_u.mutation.SetPaymentMethod(v)
	return _u
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillablePaymentMethod(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetPaymentMethod(*v)
	}
	return _u
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (_u *DonationUpdateOne) ClearPaymentMethod() *DonationUpdateOne {
	_u.mutation.ClearPaymentMethod()
	return _u
}

// SetPaymentID sets the "payment_id" field.
func (_u *DonationUpdateOne) SetPaymentID(v string) *DonationUpdateOne {
	_u.mutation.SetPaymentID(v)
	return _u
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillablePaymentID(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetPaymentID(*v)
	}
	return _u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (_u *DonationUpdateOne) ClearPaymentID() *DonationUpdateOne {
	_u.mutation.ClearPaymentID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DonationUpdateOne) SetStatus(v string) *DonationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableStatus(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetProcessedAt sets the "processed_at" field.
func (_u *DonationUpdateOne) SetProcessedAt(v time.Time) *DonationUpdateOne {
	_u.mutation.SetProcessedAt(v)
	return _u
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableProcessedAt(v *time.Time) *DonationUpdateOne {
	if v != nil {
		_u.SetProcessedAt(*v)
	}
	return _u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (_u *DonationUpdateOne) ClearProcessedAt() *DonationUpdateOne {
	_u.mutation.ClearProcessedAt()
	return _u
}

// SetAnonymous sets the "anonymous" field.
func (_u *DonationUpdateOne) SetAnonymous(v bool) *DonationUpdateOne {
	_u.mutation.SetAnonymous(v)
	return _u
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableAnonymous(v *bool) *DonationUpdateOne {
	if v != nil {
		_u.SetAnonymous(*v)
	}
	return _u
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (_u *DonationUpdateOne) SetPaymentGatewayRef(v string) *DonationUpdateOne {
	_u.mutation.SetPaymentGatewayRef(v)
	return _u
}

// SetNillablePaymentGatewayRef sets the "payment_gateway_ref" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillablePaymentGatewayRef(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetPaymentGatewayRef(*v)
	}
	return _u
}

// ClearPaymentGatewayRef clears the value of the "payment_gateway_ref" field.
func (_u *DonationUpdateOne) ClearPaymentGatewayRef() *DonationUpdateOne {
	_u.mutation.ClearPaymentGatewayRef()
	return _u
}

// SetDonorMessage sets the "donor_message" field.
func (_u *DonationUpdateOne) SetDonorMessage(v string) *DonationUpdateOne {
	_u.mutation.SetDonorMessage(v)
	return _u
}

// SetNillableDonorMessage sets the "donor_message" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableDonorMessage(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetDonorMessage(*v)
	}
	return _u
}

// ClearDonorMessage clears the value of the "donor_message" field.
func (_u *DonationUpdateOne) ClearDonorMessage() *DonationUpdateOne {
	_u.mutation.ClearDonorMessage()
	return _u
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (_u *DonationUpdateOne) SetTaxReceiptSent(v bool) *DonationUpdateOne {
	_u.mutation.SetTaxReceiptSent(v)
	return _u
}

// SetNillableTaxReceiptSent sets the "tax_receipt_sent" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableTaxReceiptSent(v *bool) *DonationUpdateOne {
	if v != nil {
		_u.SetTaxReceiptSent(*v)
	}
	return _u
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (_u *DonationUpdateOne) SetTaxReceiptSentAt(v time.Time) *DonationUpdateOne {
	_u.mutation.SetTaxReceiptSentAt(v)
	return _u
}

// SetNillableTaxReceiptSentAt sets the "tax_receipt_sent_at" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableTaxReceiptSentAt(v *time.Time) *DonationUpdateOne {
	if v != nil {
		_u.SetTaxReceiptSentAt(*v)
	}
	return _u
}

// ClearTaxReceiptSentAt clears the value of the "tax_receipt_sent_at" field.
func (_u *DonationUpdateOne) ClearTaxReceiptSentAt() *DonationUpdateOne {
	_u.mutation.ClearTaxReceiptSentAt()
	return _u
}

// SetRecurringInterval sets the "recurring_interval" field.
func (_u *DonationUpdateOne) SetRecurringInterval(v string) *DonationUpdateOne {
	_u.mutation.SetRecurringInterval(v)
	return _u
}

// SetNillableRecurringInterval sets the "recurring_interval" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableRecurringInterval(v *string) *DonationUpdateOne {
	if v != nil {
		_u.SetRecurringInterval(*v)
	}
	return _u
}

// ClearRecurringInterval clears the value of the "recurring_interval" field.
func (_u *DonationUpdateOne) ClearRecurringInterval() *DonationUpdateOne {
	_u.mutation.ClearRecurringInterval()
	return _u
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (_u *DonationUpdateOne) SetNextPaymentDate(v time.Time) *DonationUpdateOne {
	_u.mutation.SetNextPaymentDate(v)
	return _u
}

// SetNillableNextPaymentDate sets the "next_payment_date" field if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableNextPaymentDate(v *time.Time) *DonationUpdateOne {
	if v != nil {
		_u.SetNextPaymentDate(*v)
	}
	return _u
}

// ClearNextPaymentDate clears the value of the "next_payment_date" field.
func (_u *DonationUpdateOne) ClearNextPaymentDate() *DonationUpdateOne {
	_u.mutation.ClearNextPaymentDate()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *DonationUpdateOne) SetMetadata(v map[string]interface{}) *DonationUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *DonationUpdateOne) ClearMetadata() *DonationUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DonationUpdateOne) SetUpdatedAt(v time.Time) *DonationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_u *DonationUpdateOne) SetDonorID(id int) *DonationUpdateOne {
	_u.mutation.SetDonorID(id)
	return _u
}

// SetDonor sets the "donor" edge to the User entity.
func (_u *DonationUpdateOne) SetDonor(v *User) *DonationUpdateOne {
	return _u.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_u *DonationUpdateOne) SetProgramID(id int) *DonationUpdateOne {
	_u.mutation.SetProgramID(id)
	return _u
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableProgramID(id *int) *DonationUpdateOne {
	if id != nil {
		_u = _u.SetProgramID(*id)
	}
	return _u
}

// SetProgram sets the "program" edge to the Program entity.
func (_u *DonationUpdateOne) SetProgram(v *Program) *DonationUpdateOne {
	return _u.SetProgramID(v.ID)
}

// SetCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID.
func (_u *DonationUpdateOne) SetCampaignID(id int) *DonationUpdateOne {
	_u.mutation.SetCampaignID(id)
	return _u
}

// SetNillableCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_u *DonationUpdateOne) SetNillableCampaignID(id *int) *DonationUpdateOne {
	if id != nil {
		_u = _u.SetCampaignID(*id)
	}
	return _u
}

// SetCampaign sets the "campaign" edge to the FundraisingCampaign entity.
func (_u *DonationUpdateOne) SetCampaign(v *FundraisingCampaign) *DonationUpdateOne {
	return _u.SetCampaignID(v.ID)
}

// Mutation returns the DonationMutation object of the builder.
func (_u *DonationUpdateOne) Mutation() *DonationMutation {
	return _u.mutation
}

// ClearDonor clears the "donor" edge to the User entity.
func (_u *DonationUpdateOne) ClearDonor() *DonationUpdateOne {
	_u.mutation.ClearDonor()
	return _u
}

// ClearProgram clears the "program" edge to the Program entity.
func (_u *DonationUpdateOne) ClearProgram() *DonationUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// ClearCampaign clears the "campaign" edge to the FundraisingCampaign entity.
func (_u *DonationUpdateOne) ClearCampaign() *DonationUpdateOne {
	_u.mutation.ClearCampaign()
	return _u
}

// Where appends a list predicates to the DonationUpdate builder.
func (_u *DonationUpdateOne) Where(ps ...predicate.Donation) *DonationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DonationUpdateOne) Select(field string, fields ...string) *DonationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Donation entity.
func (_u *DonationUpdateOne) Save(ctx context.Context) (*Donation, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DonationUpdateOne) SaveX(ctx context.Context) *Donation {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DonationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DonationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DonationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := donation.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DonationUpdateOne) check() error {
	if _u.mutation.DonorCleared() && len(_u.mutation.DonorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Donation.donor"`)
	}
	return nil
}

func (_u *DonationUpdateOne) sqlSave(ctx context.Context) (_node *Donation, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(donation.Table, donation.Columns, sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Donation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, donation.FieldID)
		for _, f := range fields {
			if !donation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != donation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(donation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(donation.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(donation.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsRecurring(); ok {
		_spec.SetField(donation.FieldIsRecurring, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Frequency(); ok {
		_spec.SetField(donation.FieldFrequency, field.TypeString, value)
	}
	if value, ok := _u.mutation.PaymentMethod(); ok {
		_spec.SetField(donation.FieldPaymentMethod, field.TypeString, value)
	}
	if _u.mutation.PaymentMethodCleared() {
		_spec.ClearField(donation.FieldPaymentMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentID(); ok {
		_spec.SetField(donation.FieldPaymentID, field.TypeString, value)
	}
	if _u.mutation.PaymentIDCleared() {
		_spec.ClearField(donation.FieldPaymentID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(donation.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProcessedAt(); ok {
		_spec.SetField(donation.FieldProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.ProcessedAtCleared() {
		_spec.ClearField(donation.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Anonymous(); ok {
		_spec.SetField(donation.FieldAnonymous, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PaymentGatewayRef(); ok {
		_spec.SetField(donation.FieldPaymentGatewayRef, field.TypeString, value)
	}
	if _u.mutation.PaymentGatewayRefCleared() {
		_spec.ClearField(donation.FieldPaymentGatewayRef, field.TypeString)
	}
	if value, ok := _u.mutation.DonorMessage(); ok {
		_spec.SetField(donation.FieldDonorMessage, field.TypeString, value)
	}
	if _u.mutation.DonorMessageCleared() {
		_spec.ClearField(donation.FieldDonorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.TaxReceiptSent(); ok {
		_spec.SetField(donation.FieldTaxReceiptSent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TaxReceiptSentAt(); ok {
		_spec.SetField(donation.FieldTaxReceiptSentAt, field.TypeTime, value)
	}
	if _u.mutation.TaxReceiptSentAtCleared() {
		_spec.ClearField(donation.FieldTaxReceiptSentAt, field.TypeTime)
	}
	if value, ok := _u.mutation.RecurringInterval(); ok {
		_spec.SetField(donation.FieldRecurringInterval, field.TypeString, value)
	}
	if _u.mutation.RecurringIntervalCleared() {
		_spec.ClearField(donation.FieldRecurringInterval, field.TypeString)
	}
	if value, ok := _u.mutation.NextPaymentDate(); ok {
		_spec.SetField(donation.FieldNextPaymentDate, field.TypeTime, value)
	}
	if _u.mutation.NextPaymentDateCleared() {
		_spec.ClearField(donation.FieldNextPaymentDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(donation.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(donation.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(donation.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DonorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CampaignCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Donation{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{donation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
