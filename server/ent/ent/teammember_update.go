// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/teammember"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamMemberUpdate is the builder for updating TeamMember entities.
type TeamMemberUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMemberMutation
}

// Where appends a list predicates to the TeamMemberUpdate builder.
func (_u *TeamMemberUpdate) Where(ps ...predicate.TeamMember) *TeamMemberUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *TeamMemberUpdate) SetName(v string) *TeamMemberUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableName(v *string) *TeamMemberUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *TeamMemberUpdate) SetTitle(v map[string]string) *TeamMemberUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetBio sets the "bio" field.
func (_u *TeamMemberUpdate) SetBio(v map[string]string) *TeamMemberUpdate {
	_u.mutation.SetBio(v)
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *TeamMemberUpdate) ClearBio() *TeamMemberUpdate {
	_u.mutation.ClearBio()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TeamMemberUpdate) SetImageURL(v string) *TeamMemberUpdate {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableImageURL(v *string) *TeamMemberUpdate {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TeamMemberUpdate) ClearImageURL() *TeamMemberUpdate {
	_u.mutation.ClearImageURL()
	return _u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_u *TeamMemberUpdate) SetLinkedinURL(v string) *TeamMemberUpdate {
	_u.mutation.SetLinkedinURL(v)
	return _u
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableLinkedinURL(v *string) *TeamMemberUpdate {
	if v != nil {
		_u.SetLinkedinURL(*v)
	}
	return _u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (_u *TeamMemberUpdate) ClearLinkedinURL() *TeamMemberUpdate {
	_u.mutation.ClearLinkedinURL()
	return _u
}

// SetTwitterURL sets the "twitter_url" field.
func (_u *TeamMemberUpdate) SetTwitterURL(v string) *TeamMemberUpdate {
	_u.mutation.SetTwitterURL(v)
	return _u
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableTwitterURL(v *string) *TeamMemberUpdate {
	if v != nil {
		_u.SetTwitterURL(*v)
	}
	return _u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (_u *TeamMemberUpdate) ClearTwitterURL() *TeamMemberUpdate {
	_u.mutation.ClearTwitterURL()
	return _u
}

// SetEmail sets the "email" field.
func (_u *TeamMemberUpdate) SetEmail(v string) *TeamMemberUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableEmail(v *string) *TeamMemberUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *TeamMemberUpdate) ClearEmail() *TeamMemberUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetType sets the "type" field.
func (_u *TeamMemberUpdate) SetType(v teammember.Type) *TeamMemberUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableType(v *teammember.Type) *TeamMemberUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *TeamMemberUpdate) SetDisplayOrder(v int) *TeamMemberUpdate {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableDisplayOrder(v *int) *TeamMemberUpdate {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *TeamMemberUpdate) AddDisplayOrder(v int) *TeamMemberUpdate {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *TeamMemberUpdate) SetIsActive(v bool) *TeamMemberUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableIsActive(v *bool) *TeamMemberUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TeamMemberUpdate) SetUpdatedAt(v time.Time) *TeamMemberUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *TeamMemberUpdate) SetUserID(id int) *TeamMemberUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *TeamMemberUpdate) SetNillableUserID(id *int) *TeamMemberUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TeamMemberUpdate) SetUser(v *User) *TeamMemberUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TeamMemberMutation object of the builder.
func (_u *TeamMemberUpdate) Mutation() *TeamMemberMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TeamMemberUpdate) ClearUser() *TeamMemberUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TeamMemberUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeamMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TeamMemberUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeamMemberUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TeamMemberUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := teammember.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeamMemberUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := teammember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TeamMember.type": %w`, err)}
		}
	}
	return nil
}

func (_u *TeamMemberUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teammember.Table, teammember.Columns, sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teammember.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(teammember.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(teammember.FieldBio, field.TypeJSON, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(teammember.FieldBio, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(teammember.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(teammember.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.LinkedinURL(); ok {
		_spec.SetField(teammember.FieldLinkedinURL, field.TypeString, value)
	}
	if _u.mutation.LinkedinURLCleared() {
		_spec.ClearField(teammember.FieldLinkedinURL, field.TypeString)
	}
	if value, ok := _u.mutation.TwitterURL(); ok {
		_spec.SetField(teammember.FieldTwitterURL, field.TypeString, value)
	}
	if _u.mutation.TwitterURLCleared() {
		_spec.ClearField(teammember.FieldTwitterURL, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(teammember.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(teammember.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(teammember.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(teammember.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(teammember.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(teammember.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(teammember.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TeamMemberUpdateOne is the builder for updating a single TeamMember entity.
type TeamMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMemberMutation
}

// SetName sets the "name" field.
func (_u *TeamMemberUpdateOne) SetName(v string) *TeamMemberUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableName(v *string) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *TeamMemberUpdateOne) SetTitle(v map[string]string) *TeamMemberUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetBio sets the "bio" field.
func (_u *TeamMemberUpdateOne) SetBio(v map[string]string) *TeamMemberUpdateOne {
	_u.mutation.SetBio(v)
	return _u
}

// ClearBio clears the value of the "bio" field.
func (_u *TeamMemberUpdateOne) ClearBio() *TeamMemberUpdateOne {
	_u.mutation.ClearBio()
	return _u
}

// SetImageURL sets the "image_url" field.
func (_u *TeamMemberUpdateOne) SetImageURL(v string) *TeamMemberUpdateOne {
	_u.mutation.SetImageURL(v)
	return _u
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableImageURL(v *string) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetImageURL(*v)
	}
	return _u
}

// ClearImageURL clears the value of the "image_url" field.
func (_u *TeamMemberUpdateOne) ClearImageURL() *TeamMemberUpdateOne {
	_u.mutation.ClearImageURL()
	return _u
}

// SetLinkedinURL sets the "linkedin_url" field.
func (_u *TeamMemberUpdateOne) SetLinkedinURL(v string) *TeamMemberUpdateOne {
	_u.mutation.SetLinkedinURL(v)
	return _u
}

// SetNillableLinkedinURL sets the "linkedin_url" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableLinkedinURL(v *string) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetLinkedinURL(*v)
	}
	return _u
}

// ClearLinkedinURL clears the value of the "linkedin_url" field.
func (_u *TeamMemberUpdateOne) ClearLinkedinURL() *TeamMemberUpdateOne {
	_u.mutation.ClearLinkedinURL()
	return _u
}

// SetTwitterURL sets the "twitter_url" field.
func (_u *TeamMemberUpdateOne) SetTwitterURL(v string) *TeamMemberUpdateOne {
	_u.mutation.SetTwitterURL(v)
	return _u
}

// SetNillableTwitterURL sets the "twitter_url" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableTwitterURL(v *string) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetTwitterURL(*v)
	}
	return _u
}

// ClearTwitterURL clears the value of the "twitter_url" field.
func (_u *TeamMemberUpdateOne) ClearTwitterURL() *TeamMemberUpdateOne {
	_u.mutation.ClearTwitterURL()
	return _u
}

// SetEmail sets the "email" field.
func (_u *TeamMemberUpdateOne) SetEmail(v string) *TeamMemberUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableEmail(v *string) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *TeamMemberUpdateOne) ClearEmail() *TeamMemberUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetType sets the "type" field.
func (_u *TeamMemberUpdateOne) SetType(v teammember.Type) *TeamMemberUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableType(v *teammember.Type) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *TeamMemberUpdateOne) SetDisplayOrder(v int) *TeamMemberUpdateOne {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableDisplayOrder(v *int) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *TeamMemberUpdateOne) AddDisplayOrder(v int) *TeamMemberUpdateOne {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *TeamMemberUpdateOne) SetIsActive(v bool) *TeamMemberUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableIsActive(v *bool) *TeamMemberUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TeamMemberUpdateOne) SetUpdatedAt(v time.Time) *TeamMemberUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *TeamMemberUpdateOne) SetUserID(id int) *TeamMemberUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *TeamMemberUpdateOne) SetNillableUserID(id *int) *TeamMemberUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TeamMemberUpdateOne) SetUser(v *User) *TeamMemberUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TeamMemberMutation object of the builder.
func (_u *TeamMemberUpdateOne) Mutation() *TeamMemberMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TeamMemberUpdateOne) ClearUser() *TeamMemberUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the TeamMemberUpdate builder.
func (_u *TeamMemberUpdateOne) Where(ps ...predicate.TeamMember) *TeamMemberUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TeamMemberUpdateOne) Select(field string, fields ...string) *TeamMemberUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TeamMember entity.
func (_u *TeamMemberUpdateOne) Save(ctx context.Context) (*TeamMember, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TeamMemberUpdateOne) SaveX(ctx context.Context) *TeamMember {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TeamMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TeamMemberUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TeamMemberUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := teammember.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TeamMemberUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := teammember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TeamMember.type": %w`, err)}
		}
	}
	return nil
}

func (_u *TeamMemberUpdateOne) sqlSave(ctx context.Context) (_node *TeamMember, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teammember.Table, teammember.Columns, sqlgraph.NewFieldSpec(teammember.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammember.FieldID)
		for _, f := range fields {
			if !teammember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(teammember.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(teammember.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Bio(); ok {
		_spec.SetField(teammember.FieldBio, field.TypeJSON, value)
	}
	if _u.mutation.BioCleared() {
		_spec.ClearField(teammember.FieldBio, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImageURL(); ok {
		_spec.SetField(teammember.FieldImageURL, field.TypeString, value)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(teammember.FieldImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.LinkedinURL(); ok {
		_spec.SetField(teammember.FieldLinkedinURL, field.TypeString, value)
	}
	if _u.mutation.LinkedinURLCleared() {
		_spec.ClearField(teammember.FieldLinkedinURL, field.TypeString)
	}
	if value, ok := _u.mutation.TwitterURL(); ok {
		_spec.SetField(teammember.FieldTwitterURL, field.TypeString, value)
	}
	if _u.mutation.TwitterURLCleared() {
		_spec.ClearField(teammember.FieldTwitterURL, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(teammember.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(teammember.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(teammember.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(teammember.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(teammember.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(teammember.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(teammember.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamMember{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
