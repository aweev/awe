// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportPermissionUpdate is the builder for updating ReportPermission entities.
type ReportPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *ReportPermissionMutation
}

// Where appends a list predicates to the ReportPermissionUpdate builder.
func (_u *ReportPermissionUpdate) Where(ps ...predicate.ReportPermission) *ReportPermissionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRoleID sets the "role_id" field.
func (_u *ReportPermissionUpdate) SetRoleID(v string) *ReportPermissionUpdate {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableRoleID(v *string) *ReportPermissionUpdate {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// ClearRoleID clears the value of the "role_id" field.
func (_u *ReportPermissionUpdate) ClearRoleID() *ReportPermissionUpdate {
	_u.mutation.ClearRoleID()
	return _u
}

// SetCanView sets the "can_view" field.
func (_u *ReportPermissionUpdate) SetCanView(v bool) *ReportPermissionUpdate {
	_u.mutation.SetCanView(v)
	return _u
}

// SetNillableCanView sets the "can_view" field if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableCanView(v *bool) *ReportPermissionUpdate {
	if v != nil {
		_u.SetCanView(*v)
	}
	return _u
}

// SetCanEdit sets the "can_edit" field.
func (_u *ReportPermissionUpdate) SetCanEdit(v bool) *ReportPermissionUpdate {
	_u.mutation.SetCanEdit(v)
	return _u
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableCanEdit(v *bool) *ReportPermissionUpdate {
	if v != nil {
		_u.SetCanEdit(*v)
	}
	return _u
}

// SetCanDelete sets the "can_delete" field.
func (_u *ReportPermissionUpdate) SetCanDelete(v bool) *ReportPermissionUpdate {
	_u.mutation.SetCanDelete(v)
	return _u
}

// SetNillableCanDelete sets the "can_delete" field if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableCanDelete(v *bool) *ReportPermissionUpdate {
	if v != nil {
		_u.SetCanDelete(*v)
	}
	return _u
}

// SetCanSchedule sets the "can_schedule" field.
func (_u *ReportPermissionUpdate) SetCanSchedule(v bool) *ReportPermissionUpdate {
	_u.mutation.SetCanSchedule(v)
	return _u
}

// SetNillableCanSchedule sets the "can_schedule" field if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableCanSchedule(v *bool) *ReportPermissionUpdate {
	if v != nil {
		_u.SetCanSchedule(*v)
	}
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *ReportPermissionUpdate) SetReportDefinitionID(id int) *ReportPermissionUpdate {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *ReportPermissionUpdate) SetReportDefinition(v *ReportDefinition) *ReportPermissionUpdate {
	return _u.SetReportDefinitionID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ReportPermissionUpdate) SetUserID(id int) *ReportPermissionUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *ReportPermissionUpdate) SetNillableUserID(id *int) *ReportPermissionUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ReportPermissionUpdate) SetUser(v *User) *ReportPermissionUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ReportPermissionMutation object of the builder.
func (_u *ReportPermissionUpdate) Mutation() *ReportPermissionMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *ReportPermissionUpdate) ClearReportDefinition() *ReportPermissionUpdate {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ReportPermissionUpdate) ClearUser() *ReportPermissionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ReportPermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReportPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ReportPermissionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReportPermissionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReportPermissionUpdate) check() error {
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReportPermission.report_definition"`)
	}
	return nil
}

func (_u *ReportPermissionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportpermission.Table, reportpermission.Columns, sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(reportpermission.FieldRoleID, field.TypeString, value)
	}
	if _u.mutation.RoleIDCleared() {
		_spec.ClearField(reportpermission.FieldRoleID, field.TypeString)
	}
	if value, ok := _u.mutation.CanView(); ok {
		_spec.SetField(reportpermission.FieldCanView, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanEdit(); ok {
		_spec.SetField(reportpermission.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanDelete(); ok {
		_spec.SetField(reportpermission.FieldCanDelete, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanSchedule(); ok {
		_spec.SetField(reportpermission.FieldCanSchedule, field.TypeBool, value)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ReportPermissionUpdateOne is the builder for updating a single ReportPermission entity.
type ReportPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportPermissionMutation
}

// SetRoleID sets the "role_id" field.
func (_u *ReportPermissionUpdateOne) SetRoleID(v string) *ReportPermissionUpdateOne {
	_u.mutation.SetRoleID(v)
	return _u
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableRoleID(v *string) *ReportPermissionUpdateOne {
	if v != nil {
		_u.SetRoleID(*v)
	}
	return _u
}

// ClearRoleID clears the value of the "role_id" field.
func (_u *ReportPermissionUpdateOne) ClearRoleID() *ReportPermissionUpdateOne {
	_u.mutation.ClearRoleID()
	return _u
}

// SetCanView sets the "can_view" field.
func (_u *ReportPermissionUpdateOne) SetCanView(v bool) *ReportPermissionUpdateOne {
	_u.mutation.SetCanView(v)
	return _u
}

// SetNillableCanView sets the "can_view" field if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableCanView(v *bool) *ReportPermissionUpdateOne {
	if v != nil {
		_u.SetCanView(*v)
	}
	return _u
}

// SetCanEdit sets the "can_edit" field.
func (_u *ReportPermissionUpdateOne) SetCanEdit(v bool) *ReportPermissionUpdateOne {
	_u.mutation.SetCanEdit(v)
	return _u
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableCanEdit(v *bool) *ReportPermissionUpdateOne {
	if v != nil {
		_u.SetCanEdit(*v)
	}
	return _u
}

// SetCanDelete sets the "can_delete" field.
func (_u *ReportPermissionUpdateOne) SetCanDelete(v bool) *ReportPermissionUpdateOne {
	_u.mutation.SetCanDelete(v)
	return _u
}

// SetNillableCanDelete sets the "can_delete" field if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableCanDelete(v *bool) *ReportPermissionUpdateOne {
	if v != nil {
		_u.SetCanDelete(*v)
	}
	return _u
}

// SetCanSchedule sets the "can_schedule" field.
func (_u *ReportPermissionUpdateOne) SetCanSchedule(v bool) *ReportPermissionUpdateOne {
	_u.mutation.SetCanSchedule(v)
	return _u
}

// SetNillableCanSchedule sets the "can_schedule" field if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableCanSchedule(v *bool) *ReportPermissionUpdateOne {
	if v != nil {
		_u.SetCanSchedule(*v)
	}
	return _u
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_u *ReportPermissionUpdateOne) SetReportDefinitionID(id int) *ReportPermissionUpdateOne {
	_u.mutation.SetReportDefinitionID(id)
	return _u
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_u *ReportPermissionUpdateOne) SetReportDefinition(v *ReportDefinition) *ReportPermissionUpdateOne {
	return _u.SetReportDefinitionID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ReportPermissionUpdateOne) SetUserID(id int) *ReportPermissionUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *ReportPermissionUpdateOne) SetNillableUserID(id *int) *ReportPermissionUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ReportPermissionUpdateOne) SetUser(v *User) *ReportPermissionUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ReportPermissionMutation object of the builder.
func (_u *ReportPermissionUpdateOne) Mutation() *ReportPermissionMutation {
	return _u.mutation
}

// ClearReportDefinition clears the "report_definition" edge to the ReportDefinition entity.
func (_u *ReportPermissionUpdateOne) ClearReportDefinition() *ReportPermissionUpdateOne {
	_u.mutation.ClearReportDefinition()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ReportPermissionUpdateOne) ClearUser() *ReportPermissionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ReportPermissionUpdate builder.
func (_u *ReportPermissionUpdateOne) Where(ps ...predicate.ReportPermission) *ReportPermissionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ReportPermissionUpdateOne) Select(field string, fields ...string) *ReportPermissionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ReportPermission entity.
func (_u *ReportPermissionUpdateOne) Save(ctx context.Context) (*ReportPermission, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReportPermissionUpdateOne) SaveX(ctx context.Context) *ReportPermission {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ReportPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReportPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ReportPermissionUpdateOne) check() error {
	if _u.mutation.ReportDefinitionCleared() && len(_u.mutation.ReportDefinitionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReportPermission.report_definition"`)
	}
	return nil
}

func (_u *ReportPermissionUpdateOne) sqlSave(ctx context.Context) (_node *ReportPermission, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reportpermission.Table, reportpermission.Columns, sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reportpermission.FieldID)
		for _, f := range fields {
			if !reportpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reportpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RoleID(); ok {
		_spec.SetField(reportpermission.FieldRoleID, field.TypeString, value)
	}
	if _u.mutation.RoleIDCleared() {
		_spec.ClearField(reportpermission.FieldRoleID, field.TypeString)
	}
	if value, ok := _u.mutation.CanView(); ok {
		_spec.SetField(reportpermission.FieldCanView, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanEdit(); ok {
		_spec.SetField(reportpermission.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanDelete(); ok {
		_spec.SetField(reportpermission.FieldCanDelete, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CanSchedule(); ok {
		_spec.SetField(reportpermission.FieldCanSchedule, field.TypeBool, value)
	}
	if _u.mutation.ReportDefinitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportPermission{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reportpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
