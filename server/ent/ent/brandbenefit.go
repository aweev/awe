// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/partnership"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BrandBenefit is the model entity for the BrandBenefit schema.
type BrandBenefit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BrandBenefitQuery when eager-loading is set.
	Edges                      BrandBenefitEdges `json:"edges"`
	partnership_brand_benefits *int
	selectValues               sql.SelectValues
}

// BrandBenefitEdges holds the relations/edges for other nodes in the graph.
type BrandBenefitEdges struct {
	// Partnership holds the value of the partnership edge.
	Partnership *Partnership `json:"partnership,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartnershipOrErr returns the Partnership value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BrandBenefitEdges) PartnershipOrErr() (*Partnership, error) {
	if e.Partnership != nil {
		return e.Partnership, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: partnership.Label}
	}
	return nil, &NotLoadedError{edge: "partnership"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BrandBenefit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case brandbenefit.FieldValue:
			values[i] = new(sql.NullFloat64)
		case brandbenefit.FieldID:
			values[i] = new(sql.NullInt64)
		case brandbenefit.FieldType, brandbenefit.FieldDescription, brandbenefit.FieldURL:
			values[i] = new(sql.NullString)
		case brandbenefit.FieldDate:
			values[i] = new(sql.NullTime)
		case brandbenefit.ForeignKeys[0]: // partnership_brand_benefits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BrandBenefit fields.
func (_m *BrandBenefit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case brandbenefit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case brandbenefit.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case brandbenefit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case brandbenefit.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case brandbenefit.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				_m.Date = value.Time
			}
		case brandbenefit.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.Float64
			}
		case brandbenefit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field partnership_brand_benefits", value)
			} else if value.Valid {
				_m.partnership_brand_benefits = new(int)
				*_m.partnership_brand_benefits = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the BrandBenefit.
// This includes values selected through modifiers, order, etc.
func (_m *BrandBenefit) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPartnership queries the "partnership" edge of the BrandBenefit entity.
func (_m *BrandBenefit) QueryPartnership() *PartnershipQuery {
	return NewBrandBenefitClient(_m.config).QueryPartnership(_m)
}

// Update returns a builder for updating this BrandBenefit.
// Note that you need to call BrandBenefit.Unwrap() before calling this method if this BrandBenefit
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BrandBenefit) Update() *BrandBenefitUpdateOne {
	return NewBrandBenefitClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BrandBenefit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BrandBenefit) Unwrap() *BrandBenefit {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BrandBenefit is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BrandBenefit) String() string {
	var builder strings.Builder
	builder.WriteString("BrandBenefit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(_m.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", _m.Value))
	builder.WriteByte(')')
	return builder.String()
}

// BrandBenefits is a parsable slice of BrandBenefit.
type BrandBenefits []*BrandBenefit
