// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsArticleUpdate is the builder for updating NewsArticle entities.
type NewsArticleUpdate struct {
	config
	hooks    []Hook
	mutation *NewsArticleMutation
}

// Where appends a list predicates to the NewsArticleUpdate builder.
func (_u *NewsArticleUpdate) Where(ps ...predicate.NewsArticle) *NewsArticleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *NewsArticleUpdate) SetSlug(v string) *NewsArticleUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *NewsArticleUpdate) SetNillableSlug(v *string) *NewsArticleUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *NewsArticleUpdate) SetTitle(v map[string]string) *NewsArticleUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *NewsArticleUpdate) SetContent(v map[string]interface{}) *NewsArticleUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetExcerpt sets the "excerpt" field.
func (_u *NewsArticleUpdate) SetExcerpt(v map[string]string) *NewsArticleUpdate {
	_u.mutation.SetExcerpt(v)
	return _u
}

// ClearExcerpt clears the value of the "excerpt" field.
func (_u *NewsArticleUpdate) ClearExcerpt() *NewsArticleUpdate {
	_u.mutation.ClearExcerpt()
	return _u
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (_u *NewsArticleUpdate) SetFeaturedImageURL(v string) *NewsArticleUpdate {
	_u.mutation.SetFeaturedImageURL(v)
	return _u
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (_u *NewsArticleUpdate) SetNillableFeaturedImageURL(v *string) *NewsArticleUpdate {
	if v != nil {
		_u.SetFeaturedImageURL(*v)
	}
	return _u
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (_u *NewsArticleUpdate) ClearFeaturedImageURL() *NewsArticleUpdate {
	_u.mutation.ClearFeaturedImageURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *NewsArticleUpdate) SetStatus(v newsarticle.Status) *NewsArticleUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *NewsArticleUpdate) SetNillableStatus(v *newsarticle.Status) *NewsArticleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *NewsArticleUpdate) SetPublishedAt(v time.Time) *NewsArticleUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *NewsArticleUpdate) SetNillablePublishedAt(v *time.Time) *NewsArticleUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *NewsArticleUpdate) ClearPublishedAt() *NewsArticleUpdate {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NewsArticleUpdate) SetUpdatedAt(v time.Time) *NewsArticleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_u *NewsArticleUpdate) SetAuthorID(id int) *NewsArticleUpdate {
	_u.mutation.SetAuthorID(id)
	return _u
}

// SetAuthor sets the "author" edge to the User entity.
func (_u *NewsArticleUpdate) SetAuthor(v *User) *NewsArticleUpdate {
	return _u.SetAuthorID(v.ID)
}

// Mutation returns the NewsArticleMutation object of the builder.
func (_u *NewsArticleUpdate) Mutation() *NewsArticleMutation {
	return _u.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (_u *NewsArticleUpdate) ClearAuthor() *NewsArticleUpdate {
	_u.mutation.ClearAuthor()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NewsArticleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NewsArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NewsArticleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NewsArticleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NewsArticleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := newsarticle.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NewsArticleUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := newsarticle.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NewsArticle.status": %w`, err)}
		}
	}
	if _u.mutation.AuthorCleared() && len(_u.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NewsArticle.author"`)
	}
	return nil
}

func (_u *NewsArticleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(newsarticle.Table, newsarticle.Columns, sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(newsarticle.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(newsarticle.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(newsarticle.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Excerpt(); ok {
		_spec.SetField(newsarticle.FieldExcerpt, field.TypeJSON, value)
	}
	if _u.mutation.ExcerptCleared() {
		_spec.ClearField(newsarticle.FieldExcerpt, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeaturedImageURL(); ok {
		_spec.SetField(newsarticle.FieldFeaturedImageURL, field.TypeString, value)
	}
	if _u.mutation.FeaturedImageURLCleared() {
		_spec.ClearField(newsarticle.FieldFeaturedImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(newsarticle.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(newsarticle.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(newsarticle.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(newsarticle.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newsarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NewsArticleUpdateOne is the builder for updating a single NewsArticle entity.
type NewsArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsArticleMutation
}

// SetSlug sets the "slug" field.
func (_u *NewsArticleUpdateOne) SetSlug(v string) *NewsArticleUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *NewsArticleUpdateOne) SetNillableSlug(v *string) *NewsArticleUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *NewsArticleUpdateOne) SetTitle(v map[string]string) *NewsArticleUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *NewsArticleUpdateOne) SetContent(v map[string]interface{}) *NewsArticleUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetExcerpt sets the "excerpt" field.
func (_u *NewsArticleUpdateOne) SetExcerpt(v map[string]string) *NewsArticleUpdateOne {
	_u.mutation.SetExcerpt(v)
	return _u
}

// ClearExcerpt clears the value of the "excerpt" field.
func (_u *NewsArticleUpdateOne) ClearExcerpt() *NewsArticleUpdateOne {
	_u.mutation.ClearExcerpt()
	return _u
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (_u *NewsArticleUpdateOne) SetFeaturedImageURL(v string) *NewsArticleUpdateOne {
	_u.mutation.SetFeaturedImageURL(v)
	return _u
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (_u *NewsArticleUpdateOne) SetNillableFeaturedImageURL(v *string) *NewsArticleUpdateOne {
	if v != nil {
		_u.SetFeaturedImageURL(*v)
	}
	return _u
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (_u *NewsArticleUpdateOne) ClearFeaturedImageURL() *NewsArticleUpdateOne {
	_u.mutation.ClearFeaturedImageURL()
	return _u
}

// SetStatus sets the "status" field.
func (_u *NewsArticleUpdateOne) SetStatus(v newsarticle.Status) *NewsArticleUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *NewsArticleUpdateOne) SetNillableStatus(v *newsarticle.Status) *NewsArticleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *NewsArticleUpdateOne) SetPublishedAt(v time.Time) *NewsArticleUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *NewsArticleUpdateOne) SetNillablePublishedAt(v *time.Time) *NewsArticleUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *NewsArticleUpdateOne) ClearPublishedAt() *NewsArticleUpdateOne {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NewsArticleUpdateOne) SetUpdatedAt(v time.Time) *NewsArticleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_u *NewsArticleUpdateOne) SetAuthorID(id int) *NewsArticleUpdateOne {
	_u.mutation.SetAuthorID(id)
	return _u
}

// SetAuthor sets the "author" edge to the User entity.
func (_u *NewsArticleUpdateOne) SetAuthor(v *User) *NewsArticleUpdateOne {
	return _u.SetAuthorID(v.ID)
}

// Mutation returns the NewsArticleMutation object of the builder.
func (_u *NewsArticleUpdateOne) Mutation() *NewsArticleMutation {
	return _u.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (_u *NewsArticleUpdateOne) ClearAuthor() *NewsArticleUpdateOne {
	_u.mutation.ClearAuthor()
	return _u
}

// Where appends a list predicates to the NewsArticleUpdate builder.
func (_u *NewsArticleUpdateOne) Where(ps ...predicate.NewsArticle) *NewsArticleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NewsArticleUpdateOne) Select(field string, fields ...string) *NewsArticleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NewsArticle entity.
func (_u *NewsArticleUpdateOne) Save(ctx context.Context) (*NewsArticle, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NewsArticleUpdateOne) SaveX(ctx context.Context) *NewsArticle {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NewsArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NewsArticleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NewsArticleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := newsarticle.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NewsArticleUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := newsarticle.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NewsArticle.status": %w`, err)}
		}
	}
	if _u.mutation.AuthorCleared() && len(_u.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "NewsArticle.author"`)
	}
	return nil
}

func (_u *NewsArticleUpdateOne) sqlSave(ctx context.Context) (_node *NewsArticle, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(newsarticle.Table, newsarticle.Columns, sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NewsArticle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newsarticle.FieldID)
		for _, f := range fields {
			if !newsarticle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != newsarticle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(newsarticle.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(newsarticle.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(newsarticle.FieldContent, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Excerpt(); ok {
		_spec.SetField(newsarticle.FieldExcerpt, field.TypeJSON, value)
	}
	if _u.mutation.ExcerptCleared() {
		_spec.ClearField(newsarticle.FieldExcerpt, field.TypeJSON)
	}
	if value, ok := _u.mutation.FeaturedImageURL(); ok {
		_spec.SetField(newsarticle.FieldFeaturedImageURL, field.TypeString, value)
	}
	if _u.mutation.FeaturedImageURLCleared() {
		_spec.ClearField(newsarticle.FieldFeaturedImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(newsarticle.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(newsarticle.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(newsarticle.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(newsarticle.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NewsArticle{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newsarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
