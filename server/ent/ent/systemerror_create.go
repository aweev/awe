// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/systemerror"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemErrorCreate is the builder for creating a SystemError entity.
type SystemErrorCreate struct {
	config
	mutation *SystemErrorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTimestamp sets the "timestamp" field.
func (_c *SystemErrorCreate) SetTimestamp(v time.Time) *SystemErrorCreate {
	_c.mutation.SetTimestamp(v)
	return _c
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableTimestamp(v *time.Time) *SystemErrorCreate {
	if v != nil {
		_c.SetTimestamp(*v)
	}
	return _c
}

// SetMessage sets the "message" field.
func (_c *SystemErrorCreate) SetMessage(v string) *SystemErrorCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetName sets the "name" field.
func (_c *SystemErrorCreate) SetName(v string) *SystemErrorCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetStack sets the "stack" field.
func (_c *SystemErrorCreate) SetStack(v string) *SystemErrorCreate {
	_c.mutation.SetStack(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SystemErrorCreate) SetMetadata(v map[string]interface{}) *SystemErrorCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *SystemErrorCreate) SetUserID(v string) *SystemErrorCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableUserID(v *string) *SystemErrorCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetContext sets the "context" field.
func (_c *SystemErrorCreate) SetContext(v string) *SystemErrorCreate {
	_c.mutation.SetContext(v)
	return _c
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableContext(v *string) *SystemErrorCreate {
	if v != nil {
		_c.SetContext(*v)
	}
	return _c
}

// SetIsResolved sets the "is_resolved" field.
func (_c *SystemErrorCreate) SetIsResolved(v bool) *SystemErrorCreate {
	_c.mutation.SetIsResolved(v)
	return _c
}

// SetNillableIsResolved sets the "is_resolved" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableIsResolved(v *bool) *SystemErrorCreate {
	if v != nil {
		_c.SetIsResolved(*v)
	}
	return _c
}

// SetResolvedAt sets the "resolved_at" field.
func (_c *SystemErrorCreate) SetResolvedAt(v time.Time) *SystemErrorCreate {
	_c.mutation.SetResolvedAt(v)
	return _c
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableResolvedAt(v *time.Time) *SystemErrorCreate {
	if v != nil {
		_c.SetResolvedAt(*v)
	}
	return _c
}

// SetResolvedBy sets the "resolved_by" field.
func (_c *SystemErrorCreate) SetResolvedBy(v string) *SystemErrorCreate {
	_c.mutation.SetResolvedBy(v)
	return _c
}

// SetNillableResolvedBy sets the "resolved_by" field if the given value is not nil.
func (_c *SystemErrorCreate) SetNillableResolvedBy(v *string) *SystemErrorCreate {
	if v != nil {
		_c.SetResolvedBy(*v)
	}
	return _c
}

// Mutation returns the SystemErrorMutation object of the builder.
func (_c *SystemErrorCreate) Mutation() *SystemErrorMutation {
	return _c.mutation
}

// Save creates the SystemError in the database.
func (_c *SystemErrorCreate) Save(ctx context.Context) (*SystemError, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SystemErrorCreate) SaveX(ctx context.Context) *SystemError {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemErrorCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemErrorCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SystemErrorCreate) defaults() {
	if _, ok := _c.mutation.Timestamp(); !ok {
		v := systemerror.DefaultTimestamp()
		_c.mutation.SetTimestamp(v)
	}
	if _, ok := _c.mutation.IsResolved(); !ok {
		v := systemerror.DefaultIsResolved
		_c.mutation.SetIsResolved(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SystemErrorCreate) check() error {
	if _, ok := _c.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "SystemError.timestamp"`)}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "SystemError.message"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SystemError.name"`)}
	}
	if _, ok := _c.mutation.Stack(); !ok {
		return &ValidationError{Name: "stack", err: errors.New(`ent: missing required field "SystemError.stack"`)}
	}
	if _, ok := _c.mutation.IsResolved(); !ok {
		return &ValidationError{Name: "is_resolved", err: errors.New(`ent: missing required field "SystemError.is_resolved"`)}
	}
	return nil
}

func (_c *SystemErrorCreate) sqlSave(ctx context.Context) (*SystemError, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SystemErrorCreate) createSpec() (*SystemError, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemError{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(systemerror.Table, sqlgraph.NewFieldSpec(systemerror.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Timestamp(); ok {
		_spec.SetField(systemerror.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(systemerror.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(systemerror.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Stack(); ok {
		_spec.SetField(systemerror.FieldStack, field.TypeString, value)
		_node.Stack = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(systemerror.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(systemerror.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Context(); ok {
		_spec.SetField(systemerror.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	if value, ok := _c.mutation.IsResolved(); ok {
		_spec.SetField(systemerror.FieldIsResolved, field.TypeBool, value)
		_node.IsResolved = value
	}
	if value, ok := _c.mutation.ResolvedAt(); ok {
		_spec.SetField(systemerror.FieldResolvedAt, field.TypeTime, value)
		_node.ResolvedAt = value
	}
	if value, ok := _c.mutation.ResolvedBy(); ok {
		_spec.SetField(systemerror.FieldResolvedBy, field.TypeString, value)
		_node.ResolvedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemError.Create().
//		SetTimestamp(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemErrorUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemErrorCreate) OnConflict(opts ...sql.ConflictOption) *SystemErrorUpsertOne {
	_c.conflict = opts
	return &SystemErrorUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemErrorCreate) OnConflictColumns(columns ...string) *SystemErrorUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemErrorUpsertOne{
		create: _c,
	}
}

type (
	// SystemErrorUpsertOne is the builder for "upsert"-ing
	//  one SystemError node.
	SystemErrorUpsertOne struct {
		create *SystemErrorCreate
	}

	// SystemErrorUpsert is the "OnConflict" setter.
	SystemErrorUpsert struct {
		*sql.UpdateSet
	}
)

// SetTimestamp sets the "timestamp" field.
func (u *SystemErrorUpsert) SetTimestamp(v time.Time) *SystemErrorUpsert {
	u.Set(systemerror.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateTimestamp() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldTimestamp)
	return u
}

// SetMessage sets the "message" field.
func (u *SystemErrorUpsert) SetMessage(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateMessage() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldMessage)
	return u
}

// SetName sets the "name" field.
func (u *SystemErrorUpsert) SetName(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateName() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldName)
	return u
}

// SetStack sets the "stack" field.
func (u *SystemErrorUpsert) SetStack(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldStack, v)
	return u
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateStack() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldStack)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *SystemErrorUpsert) SetMetadata(v map[string]interface{}) *SystemErrorUpsert {
	u.Set(systemerror.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateMetadata() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemErrorUpsert) ClearMetadata() *SystemErrorUpsert {
	u.SetNull(systemerror.FieldMetadata)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SystemErrorUpsert) SetUserID(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateUserID() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemErrorUpsert) ClearUserID() *SystemErrorUpsert {
	u.SetNull(systemerror.FieldUserID)
	return u
}

// SetContext sets the "context" field.
func (u *SystemErrorUpsert) SetContext(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldContext, v)
	return u
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateContext() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldContext)
	return u
}

// ClearContext clears the value of the "context" field.
func (u *SystemErrorUpsert) ClearContext() *SystemErrorUpsert {
	u.SetNull(systemerror.FieldContext)
	return u
}

// SetIsResolved sets the "is_resolved" field.
func (u *SystemErrorUpsert) SetIsResolved(v bool) *SystemErrorUpsert {
	u.Set(systemerror.FieldIsResolved, v)
	return u
}

// UpdateIsResolved sets the "is_resolved" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateIsResolved() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldIsResolved)
	return u
}

// SetResolvedAt sets the "resolved_at" field.
func (u *SystemErrorUpsert) SetResolvedAt(v time.Time) *SystemErrorUpsert {
	u.Set(systemerror.FieldResolvedAt, v)
	return u
}

// UpdateResolvedAt sets the "resolved_at" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateResolvedAt() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldResolvedAt)
	return u
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (u *SystemErrorUpsert) ClearResolvedAt() *SystemErrorUpsert {
	u.SetNull(systemerror.FieldResolvedAt)
	return u
}

// SetResolvedBy sets the "resolved_by" field.
func (u *SystemErrorUpsert) SetResolvedBy(v string) *SystemErrorUpsert {
	u.Set(systemerror.FieldResolvedBy, v)
	return u
}

// UpdateResolvedBy sets the "resolved_by" field to the value that was provided on create.
func (u *SystemErrorUpsert) UpdateResolvedBy() *SystemErrorUpsert {
	u.SetExcluded(systemerror.FieldResolvedBy)
	return u
}

// ClearResolvedBy clears the value of the "resolved_by" field.
func (u *SystemErrorUpsert) ClearResolvedBy() *SystemErrorUpsert {
	u.SetNull(systemerror.FieldResolvedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SystemError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemErrorUpsertOne) UpdateNewValues() *SystemErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemError.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SystemErrorUpsertOne) Ignore() *SystemErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemErrorUpsertOne) DoNothing() *SystemErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemErrorCreate.OnConflict
// documentation for more info.
func (u *SystemErrorUpsertOne) Update(set func(*SystemErrorUpsert)) *SystemErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *SystemErrorUpsertOne) SetTimestamp(v time.Time) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateTimestamp() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateTimestamp()
	})
}

// SetMessage sets the "message" field.
func (u *SystemErrorUpsertOne) SetMessage(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateMessage() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateMessage()
	})
}

// SetName sets the "name" field.
func (u *SystemErrorUpsertOne) SetName(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateName() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateName()
	})
}

// SetStack sets the "stack" field.
func (u *SystemErrorUpsertOne) SetStack(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetStack(v)
	})
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateStack() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateStack()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SystemErrorUpsertOne) SetMetadata(v map[string]interface{}) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateMetadata() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemErrorUpsertOne) ClearMetadata() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearMetadata()
	})
}

// SetUserID sets the "user_id" field.
func (u *SystemErrorUpsertOne) SetUserID(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateUserID() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemErrorUpsertOne) ClearUserID() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearUserID()
	})
}

// SetContext sets the "context" field.
func (u *SystemErrorUpsertOne) SetContext(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateContext() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateContext()
	})
}

// ClearContext clears the value of the "context" field.
func (u *SystemErrorUpsertOne) ClearContext() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearContext()
	})
}

// SetIsResolved sets the "is_resolved" field.
func (u *SystemErrorUpsertOne) SetIsResolved(v bool) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetIsResolved(v)
	})
}

// UpdateIsResolved sets the "is_resolved" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateIsResolved() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateIsResolved()
	})
}

// SetResolvedAt sets the "resolved_at" field.
func (u *SystemErrorUpsertOne) SetResolvedAt(v time.Time) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetResolvedAt(v)
	})
}

// UpdateResolvedAt sets the "resolved_at" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateResolvedAt() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateResolvedAt()
	})
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (u *SystemErrorUpsertOne) ClearResolvedAt() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearResolvedAt()
	})
}

// SetResolvedBy sets the "resolved_by" field.
func (u *SystemErrorUpsertOne) SetResolvedBy(v string) *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetResolvedBy(v)
	})
}

// UpdateResolvedBy sets the "resolved_by" field to the value that was provided on create.
func (u *SystemErrorUpsertOne) UpdateResolvedBy() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateResolvedBy()
	})
}

// ClearResolvedBy clears the value of the "resolved_by" field.
func (u *SystemErrorUpsertOne) ClearResolvedBy() *SystemErrorUpsertOne {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearResolvedBy()
	})
}

// Exec executes the query.
func (u *SystemErrorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemErrorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemErrorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemErrorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemErrorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemErrorCreateBulk is the builder for creating many SystemError entities in bulk.
type SystemErrorCreateBulk struct {
	config
	err      error
	builders []*SystemErrorCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemError entities in the database.
func (_c *SystemErrorCreateBulk) Save(ctx context.Context) ([]*SystemError, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*SystemError, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemErrorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SystemErrorCreateBulk) SaveX(ctx context.Context) []*SystemError {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SystemErrorCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SystemErrorCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemError.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemErrorUpsert) {
//			SetTimestamp(v+v).
//		}).
//		Exec(ctx)
func (_c *SystemErrorCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemErrorUpsertBulk {
	_c.conflict = opts
	return &SystemErrorUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SystemErrorCreateBulk) OnConflictColumns(columns ...string) *SystemErrorUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SystemErrorUpsertBulk{
		create: _c,
	}
}

// SystemErrorUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemError nodes.
type SystemErrorUpsertBulk struct {
	create *SystemErrorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SystemErrorUpsertBulk) UpdateNewValues() *SystemErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemError.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SystemErrorUpsertBulk) Ignore() *SystemErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemErrorUpsertBulk) DoNothing() *SystemErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemErrorCreateBulk.OnConflict
// documentation for more info.
func (u *SystemErrorUpsertBulk) Update(set func(*SystemErrorUpsert)) *SystemErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *SystemErrorUpsertBulk) SetTimestamp(v time.Time) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateTimestamp() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateTimestamp()
	})
}

// SetMessage sets the "message" field.
func (u *SystemErrorUpsertBulk) SetMessage(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateMessage() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateMessage()
	})
}

// SetName sets the "name" field.
func (u *SystemErrorUpsertBulk) SetName(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateName() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateName()
	})
}

// SetStack sets the "stack" field.
func (u *SystemErrorUpsertBulk) SetStack(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetStack(v)
	})
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateStack() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateStack()
	})
}

// SetMetadata sets the "metadata" field.
func (u *SystemErrorUpsertBulk) SetMetadata(v map[string]interface{}) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateMetadata() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *SystemErrorUpsertBulk) ClearMetadata() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearMetadata()
	})
}

// SetUserID sets the "user_id" field.
func (u *SystemErrorUpsertBulk) SetUserID(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateUserID() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *SystemErrorUpsertBulk) ClearUserID() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearUserID()
	})
}

// SetContext sets the "context" field.
func (u *SystemErrorUpsertBulk) SetContext(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateContext() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateContext()
	})
}

// ClearContext clears the value of the "context" field.
func (u *SystemErrorUpsertBulk) ClearContext() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearContext()
	})
}

// SetIsResolved sets the "is_resolved" field.
func (u *SystemErrorUpsertBulk) SetIsResolved(v bool) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetIsResolved(v)
	})
}

// UpdateIsResolved sets the "is_resolved" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateIsResolved() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateIsResolved()
	})
}

// SetResolvedAt sets the "resolved_at" field.
func (u *SystemErrorUpsertBulk) SetResolvedAt(v time.Time) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetResolvedAt(v)
	})
}

// UpdateResolvedAt sets the "resolved_at" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateResolvedAt() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateResolvedAt()
	})
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (u *SystemErrorUpsertBulk) ClearResolvedAt() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearResolvedAt()
	})
}

// SetResolvedBy sets the "resolved_by" field.
func (u *SystemErrorUpsertBulk) SetResolvedBy(v string) *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.SetResolvedBy(v)
	})
}

// UpdateResolvedBy sets the "resolved_by" field to the value that was provided on create.
func (u *SystemErrorUpsertBulk) UpdateResolvedBy() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.UpdateResolvedBy()
	})
}

// ClearResolvedBy clears the value of the "resolved_by" field.
func (u *SystemErrorUpsertBulk) ClearResolvedBy() *SystemErrorUpsertBulk {
	return u.Update(func(s *SystemErrorUpsert) {
		s.ClearResolvedBy()
	})
}

// Exec executes the query.
func (u *SystemErrorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemErrorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemErrorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemErrorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
