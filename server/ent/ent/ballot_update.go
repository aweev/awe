// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/ballot"
	"awe/ent/ent/predicate"
	"awe/ent/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BallotUpdate is the builder for updating Ballot entities.
type BallotUpdate struct {
	config
	hooks    []Hook
	mutation *BallotMutation
}

// Where appends a list predicates to the BallotUpdate builder.
func (_u *BallotUpdate) Where(ps ...predicate.Ballot) *BallotUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetVoterID sets the "voter_id" field.
func (_u *BallotUpdate) SetVoterID(v string) *BallotUpdate {
	_u.mutation.SetVoterID(v)
	return _u
}

// SetNillableVoterID sets the "voter_id" field if the given value is not nil.
func (_u *BallotUpdate) SetNillableVoterID(v *string) *BallotUpdate {
	if v != nil {
		_u.SetVoterID(*v)
	}
	return _u
}

// SetChoice sets the "choice" field.
func (_u *BallotUpdate) SetChoice(v string) *BallotUpdate {
	_u.mutation.SetChoice(v)
	return _u
}

// SetNillableChoice sets the "choice" field if the given value is not nil.
func (_u *BallotUpdate) SetNillableChoice(v *string) *BallotUpdate {
	if v != nil {
		_u.SetChoice(*v)
	}
	return _u
}

// SetCastAt sets the "cast_at" field.
func (_u *BallotUpdate) SetCastAt(v time.Time) *BallotUpdate {
	_u.mutation.SetCastAt(v)
	return _u
}

// SetNillableCastAt sets the "cast_at" field if the given value is not nil.
func (_u *BallotUpdate) SetNillableCastAt(v *time.Time) *BallotUpdate {
	if v != nil {
		_u.SetCastAt(*v)
	}
	return _u
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *BallotUpdate) SetVoteID(id int) *BallotUpdate {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *BallotUpdate) SetVote(v *Vote) *BallotUpdate {
	return _u.SetVoteID(v.ID)
}

// Mutation returns the BallotMutation object of the builder.
func (_u *BallotUpdate) Mutation() *BallotMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *BallotUpdate) ClearVote() *BallotUpdate {
	_u.mutation.ClearVote()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BallotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BallotUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BallotUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BallotUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BallotUpdate) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ballot.vote"`)
	}
	return nil
}

func (_u *BallotUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ballot.Table, ballot.Columns, sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoterID(); ok {
		_spec.SetField(ballot.FieldVoterID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Choice(); ok {
		_spec.SetField(ballot.FieldChoice, field.TypeString, value)
	}
	if value, ok := _u.mutation.CastAt(); ok {
		_spec.SetField(ballot.FieldCastAt, field.TypeTime, value)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ballot.VoteTable,
			Columns: []string{ballot.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ballot.VoteTable,
			Columns: []string{ballot.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ballot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BallotUpdateOne is the builder for updating a single Ballot entity.
type BallotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BallotMutation
}

// SetVoterID sets the "voter_id" field.
func (_u *BallotUpdateOne) SetVoterID(v string) *BallotUpdateOne {
	_u.mutation.SetVoterID(v)
	return _u
}

// SetNillableVoterID sets the "voter_id" field if the given value is not nil.
func (_u *BallotUpdateOne) SetNillableVoterID(v *string) *BallotUpdateOne {
	if v != nil {
		_u.SetVoterID(*v)
	}
	return _u
}

// SetChoice sets the "choice" field.
func (_u *BallotUpdateOne) SetChoice(v string) *BallotUpdateOne {
	_u.mutation.SetChoice(v)
	return _u
}

// SetNillableChoice sets the "choice" field if the given value is not nil.
func (_u *BallotUpdateOne) SetNillableChoice(v *string) *BallotUpdateOne {
	if v != nil {
		_u.SetChoice(*v)
	}
	return _u
}

// SetCastAt sets the "cast_at" field.
func (_u *BallotUpdateOne) SetCastAt(v time.Time) *BallotUpdateOne {
	_u.mutation.SetCastAt(v)
	return _u
}

// SetNillableCastAt sets the "cast_at" field if the given value is not nil.
func (_u *BallotUpdateOne) SetNillableCastAt(v *time.Time) *BallotUpdateOne {
	if v != nil {
		_u.SetCastAt(*v)
	}
	return _u
}

// SetVoteID sets the "vote" edge to the Vote entity by ID.
func (_u *BallotUpdateOne) SetVoteID(id int) *BallotUpdateOne {
	_u.mutation.SetVoteID(id)
	return _u
}

// SetVote sets the "vote" edge to the Vote entity.
func (_u *BallotUpdateOne) SetVote(v *Vote) *BallotUpdateOne {
	return _u.SetVoteID(v.ID)
}

// Mutation returns the BallotMutation object of the builder.
func (_u *BallotUpdateOne) Mutation() *BallotMutation {
	return _u.mutation
}

// ClearVote clears the "vote" edge to the Vote entity.
func (_u *BallotUpdateOne) ClearVote() *BallotUpdateOne {
	_u.mutation.ClearVote()
	return _u
}

// Where appends a list predicates to the BallotUpdate builder.
func (_u *BallotUpdateOne) Where(ps ...predicate.Ballot) *BallotUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BallotUpdateOne) Select(field string, fields ...string) *BallotUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Ballot entity.
func (_u *BallotUpdateOne) Save(ctx context.Context) (*Ballot, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BallotUpdateOne) SaveX(ctx context.Context) *Ballot {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BallotUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BallotUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BallotUpdateOne) check() error {
	if _u.mutation.VoteCleared() && len(_u.mutation.VoteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ballot.vote"`)
	}
	return nil
}

func (_u *BallotUpdateOne) sqlSave(ctx context.Context) (_node *Ballot, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ballot.Table, ballot.Columns, sqlgraph.NewFieldSpec(ballot.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ballot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ballot.FieldID)
		for _, f := range fields {
			if !ballot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ballot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoterID(); ok {
		_spec.SetField(ballot.FieldVoterID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Choice(); ok {
		_spec.SetField(ballot.FieldChoice, field.TypeString, value)
	}
	if value, ok := _u.mutation.CastAt(); ok {
		_spec.SetField(ballot.FieldCastAt, field.TypeTime, value)
	}
	if _u.mutation.VoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ballot.VoteTable,
			Columns: []string{ballot.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ballot.VoteTable,
			Columns: []string{ballot.VoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ballot{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ballot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
