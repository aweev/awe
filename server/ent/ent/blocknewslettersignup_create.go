// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockNewsletterSignupCreate is the builder for creating a BlockNewsletterSignup entity.
type BlockNewsletterSignupCreate struct {
	config
	mutation *BlockNewsletterSignupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockNewsletterSignupCreate) SetInternalName(v string) *BlockNewsletterSignupCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockNewsletterSignupCreate) SetTitle(v map[string]string) *BlockNewsletterSignupCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockNewsletterSignupCreate) SetDescription(v map[string]string) *BlockNewsletterSignupCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetButtonText sets the "button_text" field.
func (_c *BlockNewsletterSignupCreate) SetButtonText(v map[string]string) *BlockNewsletterSignupCreate {
	_c.mutation.SetButtonText(v)
	return _c
}

// SetShowNameField sets the "show_name_field" field.
func (_c *BlockNewsletterSignupCreate) SetShowNameField(v bool) *BlockNewsletterSignupCreate {
	_c.mutation.SetShowNameField(v)
	return _c
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_c *BlockNewsletterSignupCreate) SetNillableShowNameField(v *bool) *BlockNewsletterSignupCreate {
	if v != nil {
		_c.SetShowNameField(*v)
	}
	return _c
}

// SetPlaceholder sets the "placeholder" field.
func (_c *BlockNewsletterSignupCreate) SetPlaceholder(v map[string]string) *BlockNewsletterSignupCreate {
	_c.mutation.SetPlaceholder(v)
	return _c
}

// SetLayout sets the "layout" field.
func (_c *BlockNewsletterSignupCreate) SetLayout(v string) *BlockNewsletterSignupCreate {
	_c.mutation.SetLayout(v)
	return _c
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_c *BlockNewsletterSignupCreate) SetNillableLayout(v *string) *BlockNewsletterSignupCreate {
	if v != nil {
		_c.SetLayout(*v)
	}
	return _c
}

// SetColorScheme sets the "color_scheme" field.
func (_c *BlockNewsletterSignupCreate) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupCreate {
	_c.mutation.SetColorScheme(v)
	return _c
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_c *BlockNewsletterSignupCreate) SetNillableColorScheme(v *blocknewslettersignup.ColorScheme) *BlockNewsletterSignupCreate {
	if v != nil {
		_c.SetColorScheme(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockNewsletterSignupCreate) SetCreatedAt(v time.Time) *BlockNewsletterSignupCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockNewsletterSignupCreate) SetNillableCreatedAt(v *time.Time) *BlockNewsletterSignupCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockNewsletterSignupCreate) SetUpdatedAt(v time.Time) *BlockNewsletterSignupCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockNewsletterSignupCreate) SetNillableUpdatedAt(v *time.Time) *BlockNewsletterSignupCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockNewsletterSignupCreate) SetContentBlockID(id int) *BlockNewsletterSignupCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockNewsletterSignupCreate) SetContentBlock(v *ContentBlock) *BlockNewsletterSignupCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockNewsletterSignupMutation object of the builder.
func (_c *BlockNewsletterSignupCreate) Mutation() *BlockNewsletterSignupMutation {
	return _c.mutation
}

// Save creates the BlockNewsletterSignup in the database.
func (_c *BlockNewsletterSignupCreate) Save(ctx context.Context) (*BlockNewsletterSignup, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockNewsletterSignupCreate) SaveX(ctx context.Context) *BlockNewsletterSignup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockNewsletterSignupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockNewsletterSignupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockNewsletterSignupCreate) defaults() {
	if _, ok := _c.mutation.ShowNameField(); !ok {
		v := blocknewslettersignup.DefaultShowNameField
		_c.mutation.SetShowNameField(v)
	}
	if _, ok := _c.mutation.Layout(); !ok {
		v := blocknewslettersignup.DefaultLayout
		_c.mutation.SetLayout(v)
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		v := blocknewslettersignup.DefaultColorScheme
		_c.mutation.SetColorScheme(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blocknewslettersignup.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blocknewslettersignup.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockNewsletterSignupCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockNewsletterSignup.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockNewsletterSignup.title"`)}
	}
	if _, ok := _c.mutation.ButtonText(); !ok {
		return &ValidationError{Name: "button_text", err: errors.New(`ent: missing required field "BlockNewsletterSignup.button_text"`)}
	}
	if _, ok := _c.mutation.ShowNameField(); !ok {
		return &ValidationError{Name: "show_name_field", err: errors.New(`ent: missing required field "BlockNewsletterSignup.show_name_field"`)}
	}
	if _, ok := _c.mutation.Placeholder(); !ok {
		return &ValidationError{Name: "placeholder", err: errors.New(`ent: missing required field "BlockNewsletterSignup.placeholder"`)}
	}
	if _, ok := _c.mutation.Layout(); !ok {
		return &ValidationError{Name: "layout", err: errors.New(`ent: missing required field "BlockNewsletterSignup.layout"`)}
	}
	if _, ok := _c.mutation.ColorScheme(); !ok {
		return &ValidationError{Name: "color_scheme", err: errors.New(`ent: missing required field "BlockNewsletterSignup.color_scheme"`)}
	}
	if v, ok := _c.mutation.ColorScheme(); ok {
		if err := blocknewslettersignup.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockNewsletterSignup.color_scheme": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockNewsletterSignup.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockNewsletterSignup.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockNewsletterSignup.content_block"`)}
	}
	return nil
}

func (_c *BlockNewsletterSignupCreate) sqlSave(ctx context.Context) (*BlockNewsletterSignup, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockNewsletterSignupCreate) createSpec() (*BlockNewsletterSignup, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockNewsletterSignup{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blocknewslettersignup.Table, sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blocknewslettersignup.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blocknewslettersignup.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blocknewslettersignup.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ButtonText(); ok {
		_spec.SetField(blocknewslettersignup.FieldButtonText, field.TypeJSON, value)
		_node.ButtonText = value
	}
	if value, ok := _c.mutation.ShowNameField(); ok {
		_spec.SetField(blocknewslettersignup.FieldShowNameField, field.TypeBool, value)
		_node.ShowNameField = value
	}
	if value, ok := _c.mutation.Placeholder(); ok {
		_spec.SetField(blocknewslettersignup.FieldPlaceholder, field.TypeJSON, value)
		_node.Placeholder = value
	}
	if value, ok := _c.mutation.Layout(); ok {
		_spec.SetField(blocknewslettersignup.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := _c.mutation.ColorScheme(); ok {
		_spec.SetField(blocknewslettersignup.FieldColorScheme, field.TypeEnum, value)
		_node.ColorScheme = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blocknewslettersignup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blocknewslettersignup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_newsletter_signup = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockNewsletterSignup.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockNewsletterSignupUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockNewsletterSignupCreate) OnConflict(opts ...sql.ConflictOption) *BlockNewsletterSignupUpsertOne {
	_c.conflict = opts
	return &BlockNewsletterSignupUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockNewsletterSignupCreate) OnConflictColumns(columns ...string) *BlockNewsletterSignupUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockNewsletterSignupUpsertOne{
		create: _c,
	}
}

type (
	// BlockNewsletterSignupUpsertOne is the builder for "upsert"-ing
	//  one BlockNewsletterSignup node.
	BlockNewsletterSignupUpsertOne struct {
		create *BlockNewsletterSignupCreate
	}

	// BlockNewsletterSignupUpsert is the "OnConflict" setter.
	BlockNewsletterSignupUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockNewsletterSignupUpsert) SetInternalName(v string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateInternalName() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockNewsletterSignupUpsert) SetTitle(v map[string]string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateTitle() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockNewsletterSignupUpsert) SetDescription(v map[string]string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateDescription() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNewsletterSignupUpsert) ClearDescription() *BlockNewsletterSignupUpsert {
	u.SetNull(blocknewslettersignup.FieldDescription)
	return u
}

// SetButtonText sets the "button_text" field.
func (u *BlockNewsletterSignupUpsert) SetButtonText(v map[string]string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldButtonText, v)
	return u
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateButtonText() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldButtonText)
	return u
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockNewsletterSignupUpsert) SetShowNameField(v bool) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldShowNameField, v)
	return u
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateShowNameField() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldShowNameField)
	return u
}

// SetPlaceholder sets the "placeholder" field.
func (u *BlockNewsletterSignupUpsert) SetPlaceholder(v map[string]string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldPlaceholder, v)
	return u
}

// UpdatePlaceholder sets the "placeholder" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdatePlaceholder() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldPlaceholder)
	return u
}

// SetLayout sets the "layout" field.
func (u *BlockNewsletterSignupUpsert) SetLayout(v string) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldLayout, v)
	return u
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateLayout() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldLayout)
	return u
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockNewsletterSignupUpsert) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldColorScheme, v)
	return u
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateColorScheme() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldColorScheme)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNewsletterSignupUpsert) SetUpdatedAt(v time.Time) *BlockNewsletterSignupUpsert {
	u.Set(blocknewslettersignup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsert) UpdateUpdatedAt() *BlockNewsletterSignupUpsert {
	u.SetExcluded(blocknewslettersignup.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockNewsletterSignupUpsertOne) UpdateNewValues() *BlockNewsletterSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blocknewslettersignup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockNewsletterSignupUpsertOne) Ignore() *BlockNewsletterSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockNewsletterSignupUpsertOne) DoNothing() *BlockNewsletterSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockNewsletterSignupCreate.OnConflict
// documentation for more info.
func (u *BlockNewsletterSignupUpsertOne) Update(set func(*BlockNewsletterSignupUpsert)) *BlockNewsletterSignupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockNewsletterSignupUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockNewsletterSignupUpsertOne) SetInternalName(v string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateInternalName() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockNewsletterSignupUpsertOne) SetTitle(v map[string]string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateTitle() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockNewsletterSignupUpsertOne) SetDescription(v map[string]string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateDescription() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNewsletterSignupUpsertOne) ClearDescription() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.ClearDescription()
	})
}

// SetButtonText sets the "button_text" field.
func (u *BlockNewsletterSignupUpsertOne) SetButtonText(v map[string]string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetButtonText(v)
	})
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateButtonText() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateButtonText()
	})
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockNewsletterSignupUpsertOne) SetShowNameField(v bool) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetShowNameField(v)
	})
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateShowNameField() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateShowNameField()
	})
}

// SetPlaceholder sets the "placeholder" field.
func (u *BlockNewsletterSignupUpsertOne) SetPlaceholder(v map[string]string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetPlaceholder(v)
	})
}

// UpdatePlaceholder sets the "placeholder" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdatePlaceholder() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdatePlaceholder()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockNewsletterSignupUpsertOne) SetLayout(v string) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateLayout() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateLayout()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockNewsletterSignupUpsertOne) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateColorScheme() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNewsletterSignupUpsertOne) SetUpdatedAt(v time.Time) *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertOne) UpdateUpdatedAt() *BlockNewsletterSignupUpsertOne {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockNewsletterSignupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockNewsletterSignupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockNewsletterSignupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockNewsletterSignupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockNewsletterSignupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockNewsletterSignupCreateBulk is the builder for creating many BlockNewsletterSignup entities in bulk.
type BlockNewsletterSignupCreateBulk struct {
	config
	err      error
	builders []*BlockNewsletterSignupCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockNewsletterSignup entities in the database.
func (_c *BlockNewsletterSignupCreateBulk) Save(ctx context.Context) ([]*BlockNewsletterSignup, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockNewsletterSignup, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockNewsletterSignupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockNewsletterSignupCreateBulk) SaveX(ctx context.Context) []*BlockNewsletterSignup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockNewsletterSignupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockNewsletterSignupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockNewsletterSignup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockNewsletterSignupUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockNewsletterSignupCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockNewsletterSignupUpsertBulk {
	_c.conflict = opts
	return &BlockNewsletterSignupUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockNewsletterSignupCreateBulk) OnConflictColumns(columns ...string) *BlockNewsletterSignupUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockNewsletterSignupUpsertBulk{
		create: _c,
	}
}

// BlockNewsletterSignupUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockNewsletterSignup nodes.
type BlockNewsletterSignupUpsertBulk struct {
	create *BlockNewsletterSignupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockNewsletterSignupUpsertBulk) UpdateNewValues() *BlockNewsletterSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blocknewslettersignup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockNewsletterSignup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockNewsletterSignupUpsertBulk) Ignore() *BlockNewsletterSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockNewsletterSignupUpsertBulk) DoNothing() *BlockNewsletterSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockNewsletterSignupCreateBulk.OnConflict
// documentation for more info.
func (u *BlockNewsletterSignupUpsertBulk) Update(set func(*BlockNewsletterSignupUpsert)) *BlockNewsletterSignupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockNewsletterSignupUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockNewsletterSignupUpsertBulk) SetInternalName(v string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateInternalName() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockNewsletterSignupUpsertBulk) SetTitle(v map[string]string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateTitle() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockNewsletterSignupUpsertBulk) SetDescription(v map[string]string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateDescription() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockNewsletterSignupUpsertBulk) ClearDescription() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.ClearDescription()
	})
}

// SetButtonText sets the "button_text" field.
func (u *BlockNewsletterSignupUpsertBulk) SetButtonText(v map[string]string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetButtonText(v)
	})
}

// UpdateButtonText sets the "button_text" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateButtonText() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateButtonText()
	})
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockNewsletterSignupUpsertBulk) SetShowNameField(v bool) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetShowNameField(v)
	})
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateShowNameField() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateShowNameField()
	})
}

// SetPlaceholder sets the "placeholder" field.
func (u *BlockNewsletterSignupUpsertBulk) SetPlaceholder(v map[string]string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetPlaceholder(v)
	})
}

// UpdatePlaceholder sets the "placeholder" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdatePlaceholder() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdatePlaceholder()
	})
}

// SetLayout sets the "layout" field.
func (u *BlockNewsletterSignupUpsertBulk) SetLayout(v string) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetLayout(v)
	})
}

// UpdateLayout sets the "layout" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateLayout() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateLayout()
	})
}

// SetColorScheme sets the "color_scheme" field.
func (u *BlockNewsletterSignupUpsertBulk) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetColorScheme(v)
	})
}

// UpdateColorScheme sets the "color_scheme" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateColorScheme() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateColorScheme()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockNewsletterSignupUpsertBulk) SetUpdatedAt(v time.Time) *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockNewsletterSignupUpsertBulk) UpdateUpdatedAt() *BlockNewsletterSignupUpsertBulk {
	return u.Update(func(s *BlockNewsletterSignupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockNewsletterSignupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockNewsletterSignupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockNewsletterSignupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockNewsletterSignupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
