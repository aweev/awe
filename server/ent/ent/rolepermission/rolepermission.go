// Code generated by ent, DO NOT EDIT.

package rolepermission

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rolepermission type in the database.
	Label = "role_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgePermission holds the string denoting the permission edge name in mutations.
	EdgePermission = "permission"
	// Table holds the table name of the rolepermission in the database.
	Table = "role_permissions"
	// PermissionTable is the table that holds the permission relation/edge.
	PermissionTable = "role_permissions"
	// PermissionInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionInverseTable = "permissions"
	// PermissionColumn is the table column denoting the permission relation/edge.
	PermissionColumn = "permission_roles"
)

// Columns holds all SQL columns for rolepermission fields.
var Columns = []string{
	FieldID,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "role_permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"permission_roles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleSUPER_ADMIN            Role = "SUPER_ADMIN"
	RoleEXECUTIVE_DIRECTOR     Role = "EXECUTIVE_DIRECTOR"
	RolePROGRAM_MANAGER        Role = "PROGRAM_MANAGER"
	RoleCONTENT_MANAGER        Role = "CONTENT_MANAGER"
	RoleFINANCE_MANAGER        Role = "FINANCE_MANAGER"
	RoleVOLUNTEER_COORDINATOR  Role = "VOLUNTEER_COORDINATOR"
	RoleDATA_ANALYST           Role = "DATA_ANALYST"
	RoleBOARD_MEMBER           Role = "BOARD_MEMBER"
	RoleACTIVE_VOLUNTEER       Role = "ACTIVE_VOLUNTEER"
	RolePROGRAM_ALUMNI         Role = "PROGRAM_ALUMNI"
	RoleCORPORATE_PARTNER      Role = "CORPORATE_PARTNER"
	RoleINDIVIDUAL_MAJOR_DONOR Role = "INDIVIDUAL_MAJOR_DONOR"
	RoleINSTITUTIONAL_PARTNER  Role = "INSTITUTIONAL_PARTNER"
	RolePROGRAM_MENTOR         Role = "PROGRAM_MENTOR"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSUPER_ADMIN, RoleEXECUTIVE_DIRECTOR, RolePROGRAM_MANAGER, RoleCONTENT_MANAGER, RoleFINANCE_MANAGER, RoleVOLUNTEER_COORDINATOR, RoleDATA_ANALYST, RoleBOARD_MEMBER, RoleACTIVE_VOLUNTEER, RolePROGRAM_ALUMNI, RoleCORPORATE_PARTNER, RoleINDIVIDUAL_MAJOR_DONOR, RoleINSTITUTIONAL_PARTNER, RolePROGRAM_MENTOR:
		return nil
	default:
		return fmt.Errorf("rolepermission: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the RolePermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByPermissionField orders the results by permission field.
func ByPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionStep(), sql.OrderByField(field, opts...))
	}
}
func newPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PermissionTable, PermissionColumn),
	)
}
