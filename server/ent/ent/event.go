// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/agenda"
	"awe/ent/ent/event"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// Status holds the value of the "status" field.
	Status event.Status `json:"status,omitempty"`
	// IsVirtual holds the value of the "is_virtual" field.
	IsVirtual bool `json:"is_virtual,omitempty"`
	// MeetingURL holds the value of the "meeting_url" field.
	MeetingURL string `json:"meeting_url,omitempty"`
	// RegistrationRequired holds the value of the "registration_required" field.
	RegistrationRequired bool `json:"registration_required,omitempty"`
	// RegistrationDeadline holds the value of the "registration_deadline" field.
	RegistrationDeadline time.Time `json:"registration_deadline,omitempty"`
	// RequiresApproval holds the value of the "requires_approval" field.
	RequiresApproval bool `json:"requires_approval,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// CorporateVolunteerFriendly holds the value of the "corporate_volunteer_friendly" field.
	CorporateVolunteerFriendly bool `json:"corporate_volunteer_friendly,omitempty"`
	// AlumniOnly holds the value of the "alumni_only" field.
	AlumniOnly bool `json:"alumni_only,omitempty"`
	// MajorDonorOnly holds the value of the "major_donor_only" field.
	MajorDonorOnly bool `json:"major_donor_only,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges               EventEdges `json:"edges"`
	address_events      *int
	event_location      *int
	program_events      *int
	user_created_events *int
	selectValues        sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// Registrations holds the value of the registrations edge.
	Registrations []*EventRegistration `json:"registrations,omitempty"`
	// Agenda holds the value of the agenda edge.
	Agenda *Agenda `json:"agenda,omitempty"`
	// Location holds the value of the location edge.
	Location *Address `json:"location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// RegistrationsOrErr returns the Registrations value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) RegistrationsOrErr() ([]*EventRegistration, error) {
	if e.loadedTypes[2] {
		return e.Registrations, nil
	}
	return nil, &NotLoadedError{edge: "registrations"}
}

// AgendaOrErr returns the Agenda value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) AgendaOrErr() (*Agenda, error) {
	if e.Agenda != nil {
		return e.Agenda, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: agenda.Label}
	}
	return nil, &NotLoadedError{edge: "agenda"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) LocationOrErr() (*Address, error) {
	if e.Location != nil {
		return e.Location, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldTitle, event.FieldDescription, event.FieldTags:
			values[i] = new([]byte)
		case event.FieldIsVirtual, event.FieldRegistrationRequired, event.FieldRequiresApproval, event.FieldCorporateVolunteerFriendly, event.FieldAlumniOnly, event.FieldMajorDonorOnly:
			values[i] = new(sql.NullBool)
		case event.FieldID, event.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case event.FieldEventType, event.FieldStatus, event.FieldMeetingURL, event.FieldImageURL:
			values[i] = new(sql.NullString)
		case event.FieldStartDate, event.FieldEndDate, event.FieldRegistrationDeadline, event.FieldCreatedAt, event.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case event.ForeignKeys[0]: // address_events
			values[i] = new(sql.NullInt64)
		case event.ForeignKeys[1]: // event_location
			values[i] = new(sql.NullInt64)
		case event.ForeignKeys[2]: // program_events
			values[i] = new(sql.NullInt64)
		case event.ForeignKeys[3]: // user_created_events
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (_m *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case event.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case event.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case event.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = value.String
			}
		case event.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case event.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case event.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				_m.Capacity = int(value.Int64)
			}
		case event.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = event.Status(value.String)
			}
		case event.FieldIsVirtual:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_virtual", values[i])
			} else if value.Valid {
				_m.IsVirtual = value.Bool
			}
		case event.FieldMeetingURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meeting_url", values[i])
			} else if value.Valid {
				_m.MeetingURL = value.String
			}
		case event.FieldRegistrationRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field registration_required", values[i])
			} else if value.Valid {
				_m.RegistrationRequired = value.Bool
			}
		case event.FieldRegistrationDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registration_deadline", values[i])
			} else if value.Valid {
				_m.RegistrationDeadline = value.Time
			}
		case event.FieldRequiresApproval:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_approval", values[i])
			} else if value.Valid {
				_m.RequiresApproval = value.Bool
			}
		case event.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case event.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case event.FieldCorporateVolunteerFriendly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field corporate_volunteer_friendly", values[i])
			} else if value.Valid {
				_m.CorporateVolunteerFriendly = value.Bool
			}
		case event.FieldAlumniOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field alumni_only", values[i])
			} else if value.Valid {
				_m.AlumniOnly = value.Bool
			}
		case event.FieldMajorDonorOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field major_donor_only", values[i])
			} else if value.Valid {
				_m.MajorDonorOnly = value.Bool
			}
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field address_events", value)
			} else if value.Valid {
				_m.address_events = new(int)
				*_m.address_events = int(value.Int64)
			}
		case event.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_location", value)
			} else if value.Valid {
				_m.event_location = new(int)
				*_m.event_location = int(value.Int64)
			}
		case event.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_events", value)
			} else if value.Valid {
				_m.program_events = new(int)
				*_m.program_events = int(value.Int64)
			}
		case event.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_events", value)
			} else if value.Valid {
				_m.user_created_events = new(int)
				*_m.user_created_events = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (_m *Event) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProgram queries the "program" edge of the Event entity.
func (_m *Event) QueryProgram() *ProgramQuery {
	return NewEventClient(_m.config).QueryProgram(_m)
}

// QueryCreatedBy queries the "created_by" edge of the Event entity.
func (_m *Event) QueryCreatedBy() *UserQuery {
	return NewEventClient(_m.config).QueryCreatedBy(_m)
}

// QueryRegistrations queries the "registrations" edge of the Event entity.
func (_m *Event) QueryRegistrations() *EventRegistrationQuery {
	return NewEventClient(_m.config).QueryRegistrations(_m)
}

// QueryAgenda queries the "agenda" edge of the Event entity.
func (_m *Event) QueryAgenda() *AgendaQuery {
	return NewEventClient(_m.config).QueryAgenda(_m)
}

// QueryLocation queries the "location" edge of the Event entity.
func (_m *Event) QueryLocation() *AddressQuery {
	return NewEventClient(_m.config).QueryLocation(_m)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Event) Update() *EventUpdateOne {
	return NewEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Event) Unwrap() *Event {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(_m.EventType)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Capacity))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("is_virtual=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsVirtual))
	builder.WriteString(", ")
	builder.WriteString("meeting_url=")
	builder.WriteString(_m.MeetingURL)
	builder.WriteString(", ")
	builder.WriteString("registration_required=")
	builder.WriteString(fmt.Sprintf("%v", _m.RegistrationRequired))
	builder.WriteString(", ")
	builder.WriteString("registration_deadline=")
	builder.WriteString(_m.RegistrationDeadline.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("requires_approval=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiresApproval))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("corporate_volunteer_friendly=")
	builder.WriteString(fmt.Sprintf("%v", _m.CorporateVolunteerFriendly))
	builder.WriteString(", ")
	builder.WriteString("alumni_only=")
	builder.WriteString(fmt.Sprintf("%v", _m.AlumniOnly))
	builder.WriteString(", ")
	builder.WriteString("major_donor_only=")
	builder.WriteString(fmt.Sprintf("%v", _m.MajorDonorOnly))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
