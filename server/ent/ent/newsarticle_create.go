// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsArticleCreate is the builder for creating a NewsArticle entity.
type NewsArticleCreate struct {
	config
	mutation *NewsArticleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSlug sets the "slug" field.
func (_c *NewsArticleCreate) SetSlug(v string) *NewsArticleCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *NewsArticleCreate) SetTitle(v map[string]string) *NewsArticleCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *NewsArticleCreate) SetContent(v map[string]interface{}) *NewsArticleCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetExcerpt sets the "excerpt" field.
func (_c *NewsArticleCreate) SetExcerpt(v map[string]string) *NewsArticleCreate {
	_c.mutation.SetExcerpt(v)
	return _c
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (_c *NewsArticleCreate) SetFeaturedImageURL(v string) *NewsArticleCreate {
	_c.mutation.SetFeaturedImageURL(v)
	return _c
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (_c *NewsArticleCreate) SetNillableFeaturedImageURL(v *string) *NewsArticleCreate {
	if v != nil {
		_c.SetFeaturedImageURL(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *NewsArticleCreate) SetStatus(v newsarticle.Status) *NewsArticleCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *NewsArticleCreate) SetNillableStatus(v *newsarticle.Status) *NewsArticleCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPublishedAt sets the "published_at" field.
func (_c *NewsArticleCreate) SetPublishedAt(v time.Time) *NewsArticleCreate {
	_c.mutation.SetPublishedAt(v)
	return _c
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_c *NewsArticleCreate) SetNillablePublishedAt(v *time.Time) *NewsArticleCreate {
	if v != nil {
		_c.SetPublishedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *NewsArticleCreate) SetCreatedAt(v time.Time) *NewsArticleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NewsArticleCreate) SetNillableCreatedAt(v *time.Time) *NewsArticleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NewsArticleCreate) SetUpdatedAt(v time.Time) *NewsArticleCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NewsArticleCreate) SetNillableUpdatedAt(v *time.Time) *NewsArticleCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (_c *NewsArticleCreate) SetAuthorID(id int) *NewsArticleCreate {
	_c.mutation.SetAuthorID(id)
	return _c
}

// SetAuthor sets the "author" edge to the User entity.
func (_c *NewsArticleCreate) SetAuthor(v *User) *NewsArticleCreate {
	return _c.SetAuthorID(v.ID)
}

// Mutation returns the NewsArticleMutation object of the builder.
func (_c *NewsArticleCreate) Mutation() *NewsArticleMutation {
	return _c.mutation
}

// Save creates the NewsArticle in the database.
func (_c *NewsArticleCreate) Save(ctx context.Context) (*NewsArticle, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NewsArticleCreate) SaveX(ctx context.Context) *NewsArticle {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NewsArticleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NewsArticleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NewsArticleCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := newsarticle.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := newsarticle.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := newsarticle.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NewsArticleCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "NewsArticle.slug"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "NewsArticle.title"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "NewsArticle.content"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "NewsArticle.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := newsarticle.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "NewsArticle.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NewsArticle.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NewsArticle.updated_at"`)}
	}
	if len(_c.mutation.AuthorIDs()) == 0 {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "NewsArticle.author"`)}
	}
	return nil
}

func (_c *NewsArticleCreate) sqlSave(ctx context.Context) (*NewsArticle, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NewsArticleCreate) createSpec() (*NewsArticle, *sqlgraph.CreateSpec) {
	var (
		_node = &NewsArticle{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(newsarticle.Table, sqlgraph.NewFieldSpec(newsarticle.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(newsarticle.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(newsarticle.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(newsarticle.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.Excerpt(); ok {
		_spec.SetField(newsarticle.FieldExcerpt, field.TypeJSON, value)
		_node.Excerpt = value
	}
	if value, ok := _c.mutation.FeaturedImageURL(); ok {
		_spec.SetField(newsarticle.FieldFeaturedImageURL, field.TypeString, value)
		_node.FeaturedImageURL = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(newsarticle.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.PublishedAt(); ok {
		_spec.SetField(newsarticle.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(newsarticle.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(newsarticle.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_news_articles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NewsArticle.Create().
//		SetSlug(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NewsArticleUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *NewsArticleCreate) OnConflict(opts ...sql.ConflictOption) *NewsArticleUpsertOne {
	_c.conflict = opts
	return &NewsArticleUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NewsArticleCreate) OnConflictColumns(columns ...string) *NewsArticleUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NewsArticleUpsertOne{
		create: _c,
	}
}

type (
	// NewsArticleUpsertOne is the builder for "upsert"-ing
	//  one NewsArticle node.
	NewsArticleUpsertOne struct {
		create *NewsArticleCreate
	}

	// NewsArticleUpsert is the "OnConflict" setter.
	NewsArticleUpsert struct {
		*sql.UpdateSet
	}
)

// SetSlug sets the "slug" field.
func (u *NewsArticleUpsert) SetSlug(v string) *NewsArticleUpsert {
	u.Set(newsarticle.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateSlug() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldSlug)
	return u
}

// SetTitle sets the "title" field.
func (u *NewsArticleUpsert) SetTitle(v map[string]string) *NewsArticleUpsert {
	u.Set(newsarticle.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateTitle() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *NewsArticleUpsert) SetContent(v map[string]interface{}) *NewsArticleUpsert {
	u.Set(newsarticle.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateContent() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldContent)
	return u
}

// SetExcerpt sets the "excerpt" field.
func (u *NewsArticleUpsert) SetExcerpt(v map[string]string) *NewsArticleUpsert {
	u.Set(newsarticle.FieldExcerpt, v)
	return u
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateExcerpt() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldExcerpt)
	return u
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *NewsArticleUpsert) ClearExcerpt() *NewsArticleUpsert {
	u.SetNull(newsarticle.FieldExcerpt)
	return u
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (u *NewsArticleUpsert) SetFeaturedImageURL(v string) *NewsArticleUpsert {
	u.Set(newsarticle.FieldFeaturedImageURL, v)
	return u
}

// UpdateFeaturedImageURL sets the "featured_image_url" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateFeaturedImageURL() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldFeaturedImageURL)
	return u
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (u *NewsArticleUpsert) ClearFeaturedImageURL() *NewsArticleUpsert {
	u.SetNull(newsarticle.FieldFeaturedImageURL)
	return u
}

// SetStatus sets the "status" field.
func (u *NewsArticleUpsert) SetStatus(v newsarticle.Status) *NewsArticleUpsert {
	u.Set(newsarticle.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateStatus() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldStatus)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *NewsArticleUpsert) SetPublishedAt(v time.Time) *NewsArticleUpsert {
	u.Set(newsarticle.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdatePublishedAt() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldPublishedAt)
	return u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *NewsArticleUpsert) ClearPublishedAt() *NewsArticleUpsert {
	u.SetNull(newsarticle.FieldPublishedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NewsArticleUpsert) SetUpdatedAt(v time.Time) *NewsArticleUpsert {
	u.Set(newsarticle.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NewsArticleUpsert) UpdateUpdatedAt() *NewsArticleUpsert {
	u.SetExcluded(newsarticle.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NewsArticleUpsertOne) UpdateNewValues() *NewsArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(newsarticle.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NewsArticleUpsertOne) Ignore() *NewsArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NewsArticleUpsertOne) DoNothing() *NewsArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NewsArticleCreate.OnConflict
// documentation for more info.
func (u *NewsArticleUpsertOne) Update(set func(*NewsArticleUpsert)) *NewsArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NewsArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *NewsArticleUpsertOne) SetSlug(v string) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateSlug() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *NewsArticleUpsertOne) SetTitle(v map[string]string) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateTitle() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *NewsArticleUpsertOne) SetContent(v map[string]interface{}) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateContent() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateContent()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *NewsArticleUpsertOne) SetExcerpt(v map[string]string) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateExcerpt() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *NewsArticleUpsertOne) ClearExcerpt() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearExcerpt()
	})
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (u *NewsArticleUpsertOne) SetFeaturedImageURL(v string) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetFeaturedImageURL(v)
	})
}

// UpdateFeaturedImageURL sets the "featured_image_url" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateFeaturedImageURL() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateFeaturedImageURL()
	})
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (u *NewsArticleUpsertOne) ClearFeaturedImageURL() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearFeaturedImageURL()
	})
}

// SetStatus sets the "status" field.
func (u *NewsArticleUpsertOne) SetStatus(v newsarticle.Status) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateStatus() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *NewsArticleUpsertOne) SetPublishedAt(v time.Time) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdatePublishedAt() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *NewsArticleUpsertOne) ClearPublishedAt() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearPublishedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NewsArticleUpsertOne) SetUpdatedAt(v time.Time) *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NewsArticleUpsertOne) UpdateUpdatedAt() *NewsArticleUpsertOne {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NewsArticleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NewsArticleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NewsArticleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NewsArticleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NewsArticleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NewsArticleCreateBulk is the builder for creating many NewsArticle entities in bulk.
type NewsArticleCreateBulk struct {
	config
	err      error
	builders []*NewsArticleCreate
	conflict []sql.ConflictOption
}

// Save creates the NewsArticle entities in the database.
func (_c *NewsArticleCreateBulk) Save(ctx context.Context) ([]*NewsArticle, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NewsArticle, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NewsArticleCreateBulk) SaveX(ctx context.Context) []*NewsArticle {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NewsArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NewsArticleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NewsArticle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NewsArticleUpsert) {
//			SetSlug(v+v).
//		}).
//		Exec(ctx)
func (_c *NewsArticleCreateBulk) OnConflict(opts ...sql.ConflictOption) *NewsArticleUpsertBulk {
	_c.conflict = opts
	return &NewsArticleUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NewsArticleCreateBulk) OnConflictColumns(columns ...string) *NewsArticleUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NewsArticleUpsertBulk{
		create: _c,
	}
}

// NewsArticleUpsertBulk is the builder for "upsert"-ing
// a bulk of NewsArticle nodes.
type NewsArticleUpsertBulk struct {
	create *NewsArticleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NewsArticleUpsertBulk) UpdateNewValues() *NewsArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(newsarticle.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NewsArticle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NewsArticleUpsertBulk) Ignore() *NewsArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NewsArticleUpsertBulk) DoNothing() *NewsArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NewsArticleCreateBulk.OnConflict
// documentation for more info.
func (u *NewsArticleUpsertBulk) Update(set func(*NewsArticleUpsert)) *NewsArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NewsArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSlug sets the "slug" field.
func (u *NewsArticleUpsertBulk) SetSlug(v string) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateSlug() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateSlug()
	})
}

// SetTitle sets the "title" field.
func (u *NewsArticleUpsertBulk) SetTitle(v map[string]string) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateTitle() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *NewsArticleUpsertBulk) SetContent(v map[string]interface{}) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateContent() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateContent()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *NewsArticleUpsertBulk) SetExcerpt(v map[string]string) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateExcerpt() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *NewsArticleUpsertBulk) ClearExcerpt() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearExcerpt()
	})
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (u *NewsArticleUpsertBulk) SetFeaturedImageURL(v string) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetFeaturedImageURL(v)
	})
}

// UpdateFeaturedImageURL sets the "featured_image_url" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateFeaturedImageURL() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateFeaturedImageURL()
	})
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (u *NewsArticleUpsertBulk) ClearFeaturedImageURL() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearFeaturedImageURL()
	})
}

// SetStatus sets the "status" field.
func (u *NewsArticleUpsertBulk) SetStatus(v newsarticle.Status) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateStatus() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *NewsArticleUpsertBulk) SetPublishedAt(v time.Time) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdatePublishedAt() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *NewsArticleUpsertBulk) ClearPublishedAt() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.ClearPublishedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NewsArticleUpsertBulk) SetUpdatedAt(v time.Time) *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NewsArticleUpsertBulk) UpdateUpdatedAt() *NewsArticleUpsertBulk {
	return u.Update(func(s *NewsArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *NewsArticleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NewsArticleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NewsArticleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NewsArticleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
