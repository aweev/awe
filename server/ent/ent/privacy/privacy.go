// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"awe/ent/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AccordionItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccordionItemQueryRuleFunc func(context.Context, *ent.AccordionItemQuery) error

// EvalQuery return f(ctx, q).
func (f AccordionItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccordionItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccordionItemQuery", q)
}

// The AccordionItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccordionItemMutationRuleFunc func(context.Context, *ent.AccordionItemMutation) error

// EvalMutation calls f(ctx, m).
func (f AccordionItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccordionItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccordionItemMutation", m)
}

// The ActionItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActionItemQueryRuleFunc func(context.Context, *ent.ActionItemQuery) error

// EvalQuery return f(ctx, q).
func (f ActionItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActionItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActionItemQuery", q)
}

// The ActionItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActionItemMutationRuleFunc func(context.Context, *ent.ActionItemMutation) error

// EvalMutation calls f(ctx, m).
func (f ActionItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActionItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActionItemMutation", m)
}

// The ActivityLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActivityLogQueryRuleFunc func(context.Context, *ent.ActivityLogQuery) error

// EvalQuery return f(ctx, q).
func (f ActivityLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivityLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActivityLogQuery", q)
}

// The ActivityLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActivityLogMutationRuleFunc func(context.Context, *ent.ActivityLogMutation) error

// EvalMutation calls f(ctx, m).
func (f ActivityLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActivityLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActivityLogMutation", m)
}

// The AddressQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AddressQueryRuleFunc func(context.Context, *ent.AddressQuery) error

// EvalQuery return f(ctx, q).
func (f AddressQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AddressQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AddressQuery", q)
}

// The AddressMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AddressMutationRuleFunc func(context.Context, *ent.AddressMutation) error

// EvalMutation calls f(ctx, m).
func (f AddressMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AddressMutation", m)
}

// The AgendaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AgendaQueryRuleFunc func(context.Context, *ent.AgendaQuery) error

// EvalQuery return f(ctx, q).
func (f AgendaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AgendaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AgendaQuery", q)
}

// The AgendaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AgendaMutationRuleFunc func(context.Context, *ent.AgendaMutation) error

// EvalMutation calls f(ctx, m).
func (f AgendaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AgendaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AgendaMutation", m)
}

// The AgendaItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AgendaItemQueryRuleFunc func(context.Context, *ent.AgendaItemQuery) error

// EvalQuery return f(ctx, q).
func (f AgendaItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AgendaItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AgendaItemQuery", q)
}

// The AgendaItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AgendaItemMutationRuleFunc func(context.Context, *ent.AgendaItemMutation) error

// EvalMutation calls f(ctx, m).
func (f AgendaItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AgendaItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AgendaItemMutation", m)
}

// The AnalyticsDashboardQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AnalyticsDashboardQueryRuleFunc func(context.Context, *ent.AnalyticsDashboardQuery) error

// EvalQuery return f(ctx, q).
func (f AnalyticsDashboardQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AnalyticsDashboardQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AnalyticsDashboardQuery", q)
}

// The AnalyticsDashboardMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AnalyticsDashboardMutationRuleFunc func(context.Context, *ent.AnalyticsDashboardMutation) error

// EvalMutation calls f(ctx, m).
func (f AnalyticsDashboardMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AnalyticsDashboardMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AnalyticsDashboardMutation", m)
}

// The AnalyticsEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AnalyticsEventQueryRuleFunc func(context.Context, *ent.AnalyticsEventQuery) error

// EvalQuery return f(ctx, q).
func (f AnalyticsEventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AnalyticsEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AnalyticsEventQuery", q)
}

// The AnalyticsEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AnalyticsEventMutationRuleFunc func(context.Context, *ent.AnalyticsEventMutation) error

// EvalMutation calls f(ctx, m).
func (f AnalyticsEventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AnalyticsEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AnalyticsEventMutation", m)
}

// The AppSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppSettingQueryRuleFunc func(context.Context, *ent.AppSettingQuery) error

// EvalQuery return f(ctx, q).
func (f AppSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppSettingQuery", q)
}

// The AppSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppSettingMutationRuleFunc func(context.Context, *ent.AppSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppSettingMutation", m)
}

// The AuditLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuditLogQueryRuleFunc func(context.Context, *ent.AuditLogQuery) error

// EvalQuery return f(ctx, q).
func (f AuditLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuditLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AuditLogQuery", q)
}

// The AuditLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuditLogMutationRuleFunc func(context.Context, *ent.AuditLogMutation) error

// EvalMutation calls f(ctx, m).
func (f AuditLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AuditLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AuditLogMutation", m)
}

// The BadgeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BadgeQueryRuleFunc func(context.Context, *ent.BadgeQuery) error

// EvalQuery return f(ctx, q).
func (f BadgeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BadgeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BadgeQuery", q)
}

// The BadgeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BadgeMutationRuleFunc func(context.Context, *ent.BadgeMutation) error

// EvalMutation calls f(ctx, m).
func (f BadgeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BadgeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BadgeMutation", m)
}

// The BallotQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BallotQueryRuleFunc func(context.Context, *ent.BallotQuery) error

// EvalQuery return f(ctx, q).
func (f BallotQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BallotQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BallotQuery", q)
}

// The BallotMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BallotMutationRuleFunc func(context.Context, *ent.BallotMutation) error

// EvalMutation calls f(ctx, m).
func (f BallotMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BallotMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BallotMutation", m)
}

// The BlockAccordionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockAccordionQueryRuleFunc func(context.Context, *ent.BlockAccordionQuery) error

// EvalQuery return f(ctx, q).
func (f BlockAccordionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockAccordionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockAccordionQuery", q)
}

// The BlockAccordionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockAccordionMutationRuleFunc func(context.Context, *ent.BlockAccordionMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockAccordionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockAccordionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockAccordionMutation", m)
}

// The BlockContactFormQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockContactFormQueryRuleFunc func(context.Context, *ent.BlockContactFormQuery) error

// EvalQuery return f(ctx, q).
func (f BlockContactFormQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockContactFormQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockContactFormQuery", q)
}

// The BlockContactFormMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockContactFormMutationRuleFunc func(context.Context, *ent.BlockContactFormMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockContactFormMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockContactFormMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockContactFormMutation", m)
}

// The BlockCtaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockCtaQueryRuleFunc func(context.Context, *ent.BlockCtaQuery) error

// EvalQuery return f(ctx, q).
func (f BlockCtaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockCtaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockCtaQuery", q)
}

// The BlockCtaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockCtaMutationRuleFunc func(context.Context, *ent.BlockCtaMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockCtaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockCtaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockCtaMutation", m)
}

// The BlockDividerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockDividerQueryRuleFunc func(context.Context, *ent.BlockDividerQuery) error

// EvalQuery return f(ctx, q).
func (f BlockDividerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockDividerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockDividerQuery", q)
}

// The BlockDividerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockDividerMutationRuleFunc func(context.Context, *ent.BlockDividerMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockDividerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockDividerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockDividerMutation", m)
}

// The BlockDonationFormQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockDonationFormQueryRuleFunc func(context.Context, *ent.BlockDonationFormQuery) error

// EvalQuery return f(ctx, q).
func (f BlockDonationFormQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockDonationFormQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockDonationFormQuery", q)
}

// The BlockDonationFormMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockDonationFormMutationRuleFunc func(context.Context, *ent.BlockDonationFormMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockDonationFormMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockDonationFormMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockDonationFormMutation", m)
}

// The BlockFaqQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockFaqQueryRuleFunc func(context.Context, *ent.BlockFaqQuery) error

// EvalQuery return f(ctx, q).
func (f BlockFaqQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockFaqQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockFaqQuery", q)
}

// The BlockFaqMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockFaqMutationRuleFunc func(context.Context, *ent.BlockFaqMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockFaqMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockFaqMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockFaqMutation", m)
}

// The BlockGalleryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockGalleryQueryRuleFunc func(context.Context, *ent.BlockGalleryQuery) error

// EvalQuery return f(ctx, q).
func (f BlockGalleryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockGalleryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockGalleryQuery", q)
}

// The BlockGalleryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockGalleryMutationRuleFunc func(context.Context, *ent.BlockGalleryMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockGalleryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockGalleryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockGalleryMutation", m)
}

// The BlockHeroQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockHeroQueryRuleFunc func(context.Context, *ent.BlockHeroQuery) error

// EvalQuery return f(ctx, q).
func (f BlockHeroQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockHeroQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockHeroQuery", q)
}

// The BlockHeroMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockHeroMutationRuleFunc func(context.Context, *ent.BlockHeroMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockHeroMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockHeroMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockHeroMutation", m)
}

// The BlockMapQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockMapQueryRuleFunc func(context.Context, *ent.BlockMapQuery) error

// EvalQuery return f(ctx, q).
func (f BlockMapQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockMapQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockMapQuery", q)
}

// The BlockMapMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockMapMutationRuleFunc func(context.Context, *ent.BlockMapMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockMapMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockMapMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockMapMutation", m)
}

// The BlockNewsletterSignupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockNewsletterSignupQueryRuleFunc func(context.Context, *ent.BlockNewsletterSignupQuery) error

// EvalQuery return f(ctx, q).
func (f BlockNewsletterSignupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockNewsletterSignupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockNewsletterSignupQuery", q)
}

// The BlockNewsletterSignupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockNewsletterSignupMutationRuleFunc func(context.Context, *ent.BlockNewsletterSignupMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockNewsletterSignupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockNewsletterSignupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockNewsletterSignupMutation", m)
}

// The BlockPartnerLogosQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockPartnerLogosQueryRuleFunc func(context.Context, *ent.BlockPartnerLogosQuery) error

// EvalQuery return f(ctx, q).
func (f BlockPartnerLogosQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockPartnerLogosQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockPartnerLogosQuery", q)
}

// The BlockPartnerLogosMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockPartnerLogosMutationRuleFunc func(context.Context, *ent.BlockPartnerLogosMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockPartnerLogosMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockPartnerLogosMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockPartnerLogosMutation", m)
}

// The BlockProgramCardsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockProgramCardsQueryRuleFunc func(context.Context, *ent.BlockProgramCardsQuery) error

// EvalQuery return f(ctx, q).
func (f BlockProgramCardsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockProgramCardsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockProgramCardsQuery", q)
}

// The BlockProgramCardsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockProgramCardsMutationRuleFunc func(context.Context, *ent.BlockProgramCardsMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockProgramCardsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockProgramCardsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockProgramCardsMutation", m)
}

// The BlockStatsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockStatsQueryRuleFunc func(context.Context, *ent.BlockStatsQuery) error

// EvalQuery return f(ctx, q).
func (f BlockStatsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockStatsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockStatsQuery", q)
}

// The BlockStatsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockStatsMutationRuleFunc func(context.Context, *ent.BlockStatsMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockStatsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockStatsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockStatsMutation", m)
}

// The BlockSuccessStoriesQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockSuccessStoriesQueryRuleFunc func(context.Context, *ent.BlockSuccessStoriesQuery) error

// EvalQuery return f(ctx, q).
func (f BlockSuccessStoriesQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockSuccessStoriesQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockSuccessStoriesQuery", q)
}

// The BlockSuccessStoriesMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockSuccessStoriesMutationRuleFunc func(context.Context, *ent.BlockSuccessStoriesMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockSuccessStoriesMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockSuccessStoriesMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockSuccessStoriesMutation", m)
}

// The BlockTabsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockTabsQueryRuleFunc func(context.Context, *ent.BlockTabsQuery) error

// EvalQuery return f(ctx, q).
func (f BlockTabsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockTabsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockTabsQuery", q)
}

// The BlockTabsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockTabsMutationRuleFunc func(context.Context, *ent.BlockTabsMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockTabsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockTabsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockTabsMutation", m)
}

// The BlockTeamGridQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockTeamGridQueryRuleFunc func(context.Context, *ent.BlockTeamGridQuery) error

// EvalQuery return f(ctx, q).
func (f BlockTeamGridQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockTeamGridQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockTeamGridQuery", q)
}

// The BlockTeamGridMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockTeamGridMutationRuleFunc func(context.Context, *ent.BlockTeamGridMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockTeamGridMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockTeamGridMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockTeamGridMutation", m)
}

// The BlockTestimonialsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockTestimonialsQueryRuleFunc func(context.Context, *ent.BlockTestimonialsQuery) error

// EvalQuery return f(ctx, q).
func (f BlockTestimonialsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockTestimonialsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockTestimonialsQuery", q)
}

// The BlockTestimonialsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockTestimonialsMutationRuleFunc func(context.Context, *ent.BlockTestimonialsMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockTestimonialsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockTestimonialsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockTestimonialsMutation", m)
}

// The BlockTextContentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockTextContentQueryRuleFunc func(context.Context, *ent.BlockTextContentQuery) error

// EvalQuery return f(ctx, q).
func (f BlockTextContentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockTextContentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockTextContentQuery", q)
}

// The BlockTextContentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockTextContentMutationRuleFunc func(context.Context, *ent.BlockTextContentMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockTextContentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockTextContentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockTextContentMutation", m)
}

// The BlockTimelineQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockTimelineQueryRuleFunc func(context.Context, *ent.BlockTimelineQuery) error

// EvalQuery return f(ctx, q).
func (f BlockTimelineQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockTimelineQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockTimelineQuery", q)
}

// The BlockTimelineMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockTimelineMutationRuleFunc func(context.Context, *ent.BlockTimelineMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockTimelineMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockTimelineMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockTimelineMutation", m)
}

// The BlockVideoEmbedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockVideoEmbedQueryRuleFunc func(context.Context, *ent.BlockVideoEmbedQuery) error

// EvalQuery return f(ctx, q).
func (f BlockVideoEmbedQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockVideoEmbedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockVideoEmbedQuery", q)
}

// The BlockVideoEmbedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockVideoEmbedMutationRuleFunc func(context.Context, *ent.BlockVideoEmbedMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockVideoEmbedMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockVideoEmbedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockVideoEmbedMutation", m)
}

// The BlockVolunteerSignupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockVolunteerSignupQueryRuleFunc func(context.Context, *ent.BlockVolunteerSignupQuery) error

// EvalQuery return f(ctx, q).
func (f BlockVolunteerSignupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockVolunteerSignupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockVolunteerSignupQuery", q)
}

// The BlockVolunteerSignupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockVolunteerSignupMutationRuleFunc func(context.Context, *ent.BlockVolunteerSignupMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockVolunteerSignupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockVolunteerSignupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockVolunteerSignupMutation", m)
}

// The BrandBenefitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BrandBenefitQueryRuleFunc func(context.Context, *ent.BrandBenefitQuery) error

// EvalQuery return f(ctx, q).
func (f BrandBenefitQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BrandBenefitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BrandBenefitQuery", q)
}

// The BrandBenefitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BrandBenefitMutationRuleFunc func(context.Context, *ent.BrandBenefitMutation) error

// EvalMutation calls f(ctx, m).
func (f BrandBenefitMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BrandBenefitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BrandBenefitMutation", m)
}

// The BrandConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BrandConfigQueryRuleFunc func(context.Context, *ent.BrandConfigQuery) error

// EvalQuery return f(ctx, q).
func (f BrandConfigQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BrandConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BrandConfigQuery", q)
}

// The BrandConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BrandConfigMutationRuleFunc func(context.Context, *ent.BrandConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f BrandConfigMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BrandConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BrandConfigMutation", m)
}

// The ContentBlockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContentBlockQueryRuleFunc func(context.Context, *ent.ContentBlockQuery) error

// EvalQuery return f(ctx, q).
func (f ContentBlockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ContentBlockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ContentBlockQuery", q)
}

// The ContentBlockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContentBlockMutationRuleFunc func(context.Context, *ent.ContentBlockMutation) error

// EvalMutation calls f(ctx, m).
func (f ContentBlockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ContentBlockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ContentBlockMutation", m)
}

// The ConversationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConversationQueryRuleFunc func(context.Context, *ent.ConversationQuery) error

// EvalQuery return f(ctx, q).
func (f ConversationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConversationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConversationQuery", q)
}

// The ConversationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConversationMutationRuleFunc func(context.Context, *ent.ConversationMutation) error

// EvalMutation calls f(ctx, m).
func (f ConversationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConversationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConversationMutation", m)
}

// The ConversationParticipantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConversationParticipantQueryRuleFunc func(context.Context, *ent.ConversationParticipantQuery) error

// EvalQuery return f(ctx, q).
func (f ConversationParticipantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConversationParticipantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConversationParticipantQuery", q)
}

// The ConversationParticipantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConversationParticipantMutationRuleFunc func(context.Context, *ent.ConversationParticipantMutation) error

// EvalMutation calls f(ctx, m).
func (f ConversationParticipantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConversationParticipantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConversationParticipantMutation", m)
}

// The DashboardWidgetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DashboardWidgetQueryRuleFunc func(context.Context, *ent.DashboardWidgetQuery) error

// EvalQuery return f(ctx, q).
func (f DashboardWidgetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DashboardWidgetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DashboardWidgetQuery", q)
}

// The DashboardWidgetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DashboardWidgetMutationRuleFunc func(context.Context, *ent.DashboardWidgetMutation) error

// EvalMutation calls f(ctx, m).
func (f DashboardWidgetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DashboardWidgetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DashboardWidgetMutation", m)
}

// The DocumentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentQueryRuleFunc func(context.Context, *ent.DocumentQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentQuery", q)
}

// The DocumentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentMutationRuleFunc func(context.Context, *ent.DocumentMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentMutation", m)
}

// The DocumentCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentCategoryQueryRuleFunc func(context.Context, *ent.DocumentCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentCategoryQuery", q)
}

// The DocumentCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentCategoryMutationRuleFunc func(context.Context, *ent.DocumentCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentCategoryMutation", m)
}

// The DonationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DonationQueryRuleFunc func(context.Context, *ent.DonationQuery) error

// EvalQuery return f(ctx, q).
func (f DonationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DonationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DonationQuery", q)
}

// The DonationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DonationMutationRuleFunc func(context.Context, *ent.DonationMutation) error

// EvalMutation calls f(ctx, m).
func (f DonationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DonationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DonationMutation", m)
}

// The EventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventQueryRuleFunc func(context.Context, *ent.EventQuery) error

// EvalQuery return f(ctx, q).
func (f EventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventQuery", q)
}

// The EventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventMutationRuleFunc func(context.Context, *ent.EventMutation) error

// EvalMutation calls f(ctx, m).
func (f EventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventMutation", m)
}

// The EventRegistrationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventRegistrationQueryRuleFunc func(context.Context, *ent.EventRegistrationQuery) error

// EvalQuery return f(ctx, q).
func (f EventRegistrationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventRegistrationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventRegistrationQuery", q)
}

// The EventRegistrationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventRegistrationMutationRuleFunc func(context.Context, *ent.EventRegistrationMutation) error

// EvalMutation calls f(ctx, m).
func (f EventRegistrationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventRegistrationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventRegistrationMutation", m)
}

// The FaqItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FaqItemQueryRuleFunc func(context.Context, *ent.FaqItemQuery) error

// EvalQuery return f(ctx, q).
func (f FaqItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FaqItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FaqItemQuery", q)
}

// The FaqItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FaqItemMutationRuleFunc func(context.Context, *ent.FaqItemMutation) error

// EvalMutation calls f(ctx, m).
func (f FaqItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FaqItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FaqItemMutation", m)
}

// The FeatureFlagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeatureFlagQueryRuleFunc func(context.Context, *ent.FeatureFlagQuery) error

// EvalQuery return f(ctx, q).
func (f FeatureFlagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeatureFlagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeatureFlagQuery", q)
}

// The FeatureFlagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeatureFlagMutationRuleFunc func(context.Context, *ent.FeatureFlagMutation) error

// EvalMutation calls f(ctx, m).
func (f FeatureFlagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeatureFlagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeatureFlagMutation", m)
}

// The FundraisingCampaignQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FundraisingCampaignQueryRuleFunc func(context.Context, *ent.FundraisingCampaignQuery) error

// EvalQuery return f(ctx, q).
func (f FundraisingCampaignQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FundraisingCampaignQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FundraisingCampaignQuery", q)
}

// The FundraisingCampaignMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FundraisingCampaignMutationRuleFunc func(context.Context, *ent.FundraisingCampaignMutation) error

// EvalMutation calls f(ctx, m).
func (f FundraisingCampaignMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FundraisingCampaignMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FundraisingCampaignMutation", m)
}

// The GalleryImageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GalleryImageQueryRuleFunc func(context.Context, *ent.GalleryImageQuery) error

// EvalQuery return f(ctx, q).
func (f GalleryImageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GalleryImageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GalleryImageQuery", q)
}

// The GalleryImageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GalleryImageMutationRuleFunc func(context.Context, *ent.GalleryImageMutation) error

// EvalMutation calls f(ctx, m).
func (f GalleryImageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GalleryImageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GalleryImageMutation", m)
}

// The GeneratedReportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GeneratedReportQueryRuleFunc func(context.Context, *ent.GeneratedReportQuery) error

// EvalQuery return f(ctx, q).
func (f GeneratedReportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GeneratedReportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GeneratedReportQuery", q)
}

// The GeneratedReportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GeneratedReportMutationRuleFunc func(context.Context, *ent.GeneratedReportMutation) error

// EvalMutation calls f(ctx, m).
func (f GeneratedReportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GeneratedReportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GeneratedReportMutation", m)
}

// The GrantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GrantQueryRuleFunc func(context.Context, *ent.GrantQuery) error

// EvalQuery return f(ctx, q).
func (f GrantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GrantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GrantQuery", q)
}

// The GrantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GrantMutationRuleFunc func(context.Context, *ent.GrantMutation) error

// EvalMutation calls f(ctx, m).
func (f GrantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GrantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GrantMutation", m)
}

// The GrantReportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GrantReportQueryRuleFunc func(context.Context, *ent.GrantReportQuery) error

// EvalQuery return f(ctx, q).
func (f GrantReportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GrantReportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GrantReportQuery", q)
}

// The GrantReportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GrantReportMutationRuleFunc func(context.Context, *ent.GrantReportMutation) error

// EvalMutation calls f(ctx, m).
func (f GrantReportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GrantReportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GrantReportMutation", m)
}

// The ImpactDataPointQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ImpactDataPointQueryRuleFunc func(context.Context, *ent.ImpactDataPointQuery) error

// EvalQuery return f(ctx, q).
func (f ImpactDataPointQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ImpactDataPointQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ImpactDataPointQuery", q)
}

// The ImpactDataPointMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ImpactDataPointMutationRuleFunc func(context.Context, *ent.ImpactDataPointMutation) error

// EvalMutation calls f(ctx, m).
func (f ImpactDataPointMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ImpactDataPointMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ImpactDataPointMutation", m)
}

// The ImpactMetricQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ImpactMetricQueryRuleFunc func(context.Context, *ent.ImpactMetricQuery) error

// EvalQuery return f(ctx, q).
func (f ImpactMetricQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ImpactMetricQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ImpactMetricQuery", q)
}

// The ImpactMetricMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ImpactMetricMutationRuleFunc func(context.Context, *ent.ImpactMetricMutation) error

// EvalMutation calls f(ctx, m).
func (f ImpactMetricMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ImpactMetricMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ImpactMetricMutation", m)
}

// The JobQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type JobQueryRuleFunc func(context.Context, *ent.JobQuery) error

// EvalQuery return f(ctx, q).
func (f JobQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.JobQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.JobQuery", q)
}

// The JobMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type JobMutationRuleFunc func(context.Context, *ent.JobMutation) error

// EvalMutation calls f(ctx, m).
func (f JobMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.JobMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.JobMutation", m)
}

// The JobLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type JobLogQueryRuleFunc func(context.Context, *ent.JobLogQuery) error

// EvalQuery return f(ctx, q).
func (f JobLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.JobLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.JobLogQuery", q)
}

// The JobLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type JobLogMutationRuleFunc func(context.Context, *ent.JobLogMutation) error

// EvalMutation calls f(ctx, m).
func (f JobLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.JobLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.JobLogMutation", m)
}

// The MentorshipRequestQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MentorshipRequestQueryRuleFunc func(context.Context, *ent.MentorshipRequestQuery) error

// EvalQuery return f(ctx, q).
func (f MentorshipRequestQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MentorshipRequestQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MentorshipRequestQuery", q)
}

// The MentorshipRequestMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MentorshipRequestMutationRuleFunc func(context.Context, *ent.MentorshipRequestMutation) error

// EvalMutation calls f(ctx, m).
func (f MentorshipRequestMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MentorshipRequestMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MentorshipRequestMutation", m)
}

// The MentorshipSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MentorshipSessionQueryRuleFunc func(context.Context, *ent.MentorshipSessionQuery) error

// EvalQuery return f(ctx, q).
func (f MentorshipSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MentorshipSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MentorshipSessionQuery", q)
}

// The MentorshipSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MentorshipSessionMutationRuleFunc func(context.Context, *ent.MentorshipSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f MentorshipSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MentorshipSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MentorshipSessionMutation", m)
}

// The MessageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MessageQueryRuleFunc func(context.Context, *ent.MessageQuery) error

// EvalQuery return f(ctx, q).
func (f MessageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MessageQuery", q)
}

// The MessageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MessageMutationRuleFunc func(context.Context, *ent.MessageMutation) error

// EvalMutation calls f(ctx, m).
func (f MessageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MessageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MessageMutation", m)
}

// The NewsArticleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NewsArticleQueryRuleFunc func(context.Context, *ent.NewsArticleQuery) error

// EvalQuery return f(ctx, q).
func (f NewsArticleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NewsArticleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.NewsArticleQuery", q)
}

// The NewsArticleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NewsArticleMutationRuleFunc func(context.Context, *ent.NewsArticleMutation) error

// EvalMutation calls f(ctx, m).
func (f NewsArticleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.NewsArticleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.NewsArticleMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *ent.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *ent.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationMutation", m)
}

// The PageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PageQueryRuleFunc func(context.Context, *ent.PageQuery) error

// EvalQuery return f(ctx, q).
func (f PageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PageQuery", q)
}

// The PageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PageMutationRuleFunc func(context.Context, *ent.PageMutation) error

// EvalMutation calls f(ctx, m).
func (f PageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PageMutation", m)
}

// The PartnerLogoItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PartnerLogoItemQueryRuleFunc func(context.Context, *ent.PartnerLogoItemQuery) error

// EvalQuery return f(ctx, q).
func (f PartnerLogoItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartnerLogoItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PartnerLogoItemQuery", q)
}

// The PartnerLogoItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PartnerLogoItemMutationRuleFunc func(context.Context, *ent.PartnerLogoItemMutation) error

// EvalMutation calls f(ctx, m).
func (f PartnerLogoItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PartnerLogoItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PartnerLogoItemMutation", m)
}

// The PartnershipQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PartnershipQueryRuleFunc func(context.Context, *ent.PartnershipQuery) error

// EvalQuery return f(ctx, q).
func (f PartnershipQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartnershipQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PartnershipQuery", q)
}

// The PartnershipMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PartnershipMutationRuleFunc func(context.Context, *ent.PartnershipMutation) error

// EvalMutation calls f(ctx, m).
func (f PartnershipMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PartnershipMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PartnershipMutation", m)
}

// The PartnershipInteractionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PartnershipInteractionQueryRuleFunc func(context.Context, *ent.PartnershipInteractionQuery) error

// EvalQuery return f(ctx, q).
func (f PartnershipInteractionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartnershipInteractionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PartnershipInteractionQuery", q)
}

// The PartnershipInteractionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PartnershipInteractionMutationRuleFunc func(context.Context, *ent.PartnershipInteractionMutation) error

// EvalMutation calls f(ctx, m).
func (f PartnershipInteractionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PartnershipInteractionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PartnershipInteractionMutation", m)
}

// The PartnershipRenewalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PartnershipRenewalQueryRuleFunc func(context.Context, *ent.PartnershipRenewalQuery) error

// EvalQuery return f(ctx, q).
func (f PartnershipRenewalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartnershipRenewalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PartnershipRenewalQuery", q)
}

// The PartnershipRenewalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PartnershipRenewalMutationRuleFunc func(context.Context, *ent.PartnershipRenewalMutation) error

// EvalMutation calls f(ctx, m).
func (f PartnershipRenewalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PartnershipRenewalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PartnershipRenewalMutation", m)
}

// The PartnershipReportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PartnershipReportQueryRuleFunc func(context.Context, *ent.PartnershipReportQuery) error

// EvalQuery return f(ctx, q).
func (f PartnershipReportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PartnershipReportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PartnershipReportQuery", q)
}

// The PartnershipReportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PartnershipReportMutationRuleFunc func(context.Context, *ent.PartnershipReportMutation) error

// EvalMutation calls f(ctx, m).
func (f PartnershipReportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PartnershipReportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PartnershipReportMutation", m)
}

// The PasswordHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PasswordHistoryQueryRuleFunc func(context.Context, *ent.PasswordHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f PasswordHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PasswordHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PasswordHistoryQuery", q)
}

// The PasswordHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PasswordHistoryMutationRuleFunc func(context.Context, *ent.PasswordHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f PasswordHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PasswordHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PasswordHistoryMutation", m)
}

// The PermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PermissionQueryRuleFunc func(context.Context, *ent.PermissionQuery) error

// EvalQuery return f(ctx, q).
func (f PermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PermissionQuery", q)
}

// The PermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PermissionMutationRuleFunc func(context.Context, *ent.PermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f PermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PermissionMutation", m)
}

// The ProgramQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramQueryRuleFunc func(context.Context, *ent.ProgramQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProgramQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProgramQuery", q)
}

// The ProgramMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramMutationRuleFunc func(context.Context, *ent.ProgramMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProgramMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProgramMutation", m)
}

// The ProgramCardItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramCardItemQueryRuleFunc func(context.Context, *ent.ProgramCardItemQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramCardItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProgramCardItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProgramCardItemQuery", q)
}

// The ProgramCardItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramCardItemMutationRuleFunc func(context.Context, *ent.ProgramCardItemMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramCardItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProgramCardItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProgramCardItemMutation", m)
}

// The ProgramCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramCategoryQueryRuleFunc func(context.Context, *ent.ProgramCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProgramCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProgramCategoryQuery", q)
}

// The ProgramCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramCategoryMutationRuleFunc func(context.Context, *ent.ProgramCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProgramCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProgramCategoryMutation", m)
}

// The ProgramEnrolmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramEnrolmentQueryRuleFunc func(context.Context, *ent.ProgramEnrolmentQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramEnrolmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProgramEnrolmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProgramEnrolmentQuery", q)
}

// The ProgramEnrolmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramEnrolmentMutationRuleFunc func(context.Context, *ent.ProgramEnrolmentMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramEnrolmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProgramEnrolmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProgramEnrolmentMutation", m)
}

// The ProgramParticipantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProgramParticipantQueryRuleFunc func(context.Context, *ent.ProgramParticipantQuery) error

// EvalQuery return f(ctx, q).
func (f ProgramParticipantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProgramParticipantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProgramParticipantQuery", q)
}

// The ProgramParticipantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProgramParticipantMutationRuleFunc func(context.Context, *ent.ProgramParticipantMutation) error

// EvalMutation calls f(ctx, m).
func (f ProgramParticipantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProgramParticipantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProgramParticipantMutation", m)
}

// The ReportDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReportDefinitionQueryRuleFunc func(context.Context, *ent.ReportDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f ReportDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReportDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReportDefinitionQuery", q)
}

// The ReportDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReportDefinitionMutationRuleFunc func(context.Context, *ent.ReportDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f ReportDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReportDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReportDefinitionMutation", m)
}

// The ReportPermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReportPermissionQueryRuleFunc func(context.Context, *ent.ReportPermissionQuery) error

// EvalQuery return f(ctx, q).
func (f ReportPermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReportPermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReportPermissionQuery", q)
}

// The ReportPermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReportPermissionMutationRuleFunc func(context.Context, *ent.ReportPermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f ReportPermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReportPermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReportPermissionMutation", m)
}

// The RolePermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RolePermissionQueryRuleFunc func(context.Context, *ent.RolePermissionQuery) error

// EvalQuery return f(ctx, q).
func (f RolePermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RolePermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RolePermissionQuery", q)
}

// The RolePermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RolePermissionMutationRuleFunc func(context.Context, *ent.RolePermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f RolePermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RolePermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RolePermissionMutation", m)
}

// The ScheduledReportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ScheduledReportQueryRuleFunc func(context.Context, *ent.ScheduledReportQuery) error

// EvalQuery return f(ctx, q).
func (f ScheduledReportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ScheduledReportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ScheduledReportQuery", q)
}

// The ScheduledReportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ScheduledReportMutationRuleFunc func(context.Context, *ent.ScheduledReportMutation) error

// EvalMutation calls f(ctx, m).
func (f ScheduledReportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ScheduledReportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ScheduledReportMutation", m)
}

// The SeoConfigQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SeoConfigQueryRuleFunc func(context.Context, *ent.SeoConfigQuery) error

// EvalQuery return f(ctx, q).
func (f SeoConfigQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeoConfigQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SeoConfigQuery", q)
}

// The SeoConfigMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SeoConfigMutationRuleFunc func(context.Context, *ent.SeoConfigMutation) error

// EvalMutation calls f(ctx, m).
func (f SeoConfigMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SeoConfigMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SeoConfigMutation", m)
}

// The SiteVisitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SiteVisitQueryRuleFunc func(context.Context, *ent.SiteVisitQuery) error

// EvalQuery return f(ctx, q).
func (f SiteVisitQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SiteVisitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SiteVisitQuery", q)
}

// The SiteVisitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SiteVisitMutationRuleFunc func(context.Context, *ent.SiteVisitMutation) error

// EvalMutation calls f(ctx, m).
func (f SiteVisitMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SiteVisitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SiteVisitMutation", m)
}

// The SkillQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SkillQueryRuleFunc func(context.Context, *ent.SkillQuery) error

// EvalQuery return f(ctx, q).
func (f SkillQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SkillQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SkillQuery", q)
}

// The SkillMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SkillMutationRuleFunc func(context.Context, *ent.SkillMutation) error

// EvalMutation calls f(ctx, m).
func (f SkillMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SkillMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SkillMutation", m)
}

// The StatItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatItemQueryRuleFunc func(context.Context, *ent.StatItemQuery) error

// EvalQuery return f(ctx, q).
func (f StatItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StatItemQuery", q)
}

// The StatItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatItemMutationRuleFunc func(context.Context, *ent.StatItemMutation) error

// EvalMutation calls f(ctx, m).
func (f StatItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StatItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StatItemMutation", m)
}

// The SuccessStoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SuccessStoryQueryRuleFunc func(context.Context, *ent.SuccessStoryQuery) error

// EvalQuery return f(ctx, q).
func (f SuccessStoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SuccessStoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SuccessStoryQuery", q)
}

// The SuccessStoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SuccessStoryMutationRuleFunc func(context.Context, *ent.SuccessStoryMutation) error

// EvalMutation calls f(ctx, m).
func (f SuccessStoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SuccessStoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SuccessStoryMutation", m)
}

// The SystemErrorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemErrorQueryRuleFunc func(context.Context, *ent.SystemErrorQuery) error

// EvalQuery return f(ctx, q).
func (f SystemErrorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemErrorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemErrorQuery", q)
}

// The SystemErrorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemErrorMutationRuleFunc func(context.Context, *ent.SystemErrorMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemErrorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemErrorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemErrorMutation", m)
}

// The SystemLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemLogQueryRuleFunc func(context.Context, *ent.SystemLogQuery) error

// EvalQuery return f(ctx, q).
func (f SystemLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemLogQuery", q)
}

// The SystemLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemLogMutationRuleFunc func(context.Context, *ent.SystemLogMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemLogMutation", m)
}

// The TabItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TabItemQueryRuleFunc func(context.Context, *ent.TabItemQuery) error

// EvalQuery return f(ctx, q).
func (f TabItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TabItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TabItemQuery", q)
}

// The TabItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TabItemMutationRuleFunc func(context.Context, *ent.TabItemMutation) error

// EvalMutation calls f(ctx, m).
func (f TabItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TabItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TabItemMutation", m)
}

// The TeamMemberQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TeamMemberQueryRuleFunc func(context.Context, *ent.TeamMemberQuery) error

// EvalQuery return f(ctx, q).
func (f TeamMemberQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamMemberQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TeamMemberQuery", q)
}

// The TeamMemberMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TeamMemberMutationRuleFunc func(context.Context, *ent.TeamMemberMutation) error

// EvalMutation calls f(ctx, m).
func (f TeamMemberMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TeamMemberMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TeamMemberMutation", m)
}

// The TeamMemberItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TeamMemberItemQueryRuleFunc func(context.Context, *ent.TeamMemberItemQuery) error

// EvalQuery return f(ctx, q).
func (f TeamMemberItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamMemberItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TeamMemberItemQuery", q)
}

// The TeamMemberItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TeamMemberItemMutationRuleFunc func(context.Context, *ent.TeamMemberItemMutation) error

// EvalMutation calls f(ctx, m).
func (f TeamMemberItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TeamMemberItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TeamMemberItemMutation", m)
}

// The TestimonialItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TestimonialItemQueryRuleFunc func(context.Context, *ent.TestimonialItemQuery) error

// EvalQuery return f(ctx, q).
func (f TestimonialItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TestimonialItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TestimonialItemQuery", q)
}

// The TestimonialItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TestimonialItemMutationRuleFunc func(context.Context, *ent.TestimonialItemMutation) error

// EvalMutation calls f(ctx, m).
func (f TestimonialItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TestimonialItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TestimonialItemMutation", m)
}

// The TimelineEventQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TimelineEventQueryRuleFunc func(context.Context, *ent.TimelineEventQuery) error

// EvalQuery return f(ctx, q).
func (f TimelineEventQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TimelineEventQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TimelineEventQuery", q)
}

// The TimelineEventMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TimelineEventMutationRuleFunc func(context.Context, *ent.TimelineEventMutation) error

// EvalMutation calls f(ctx, m).
func (f TimelineEventMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TimelineEventMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TimelineEventMutation", m)
}

// The TokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TokenQueryRuleFunc func(context.Context, *ent.TokenQuery) error

// EvalQuery return f(ctx, q).
func (f TokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TokenQuery", q)
}

// The TokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TokenMutationRuleFunc func(context.Context, *ent.TokenMutation) error

// EvalMutation calls f(ctx, m).
func (f TokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TokenMutation", m)
}

// The TrustedDeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TrustedDeviceQueryRuleFunc func(context.Context, *ent.TrustedDeviceQuery) error

// EvalQuery return f(ctx, q).
func (f TrustedDeviceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TrustedDeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TrustedDeviceQuery", q)
}

// The TrustedDeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TrustedDeviceMutationRuleFunc func(context.Context, *ent.TrustedDeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f TrustedDeviceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TrustedDeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TrustedDeviceMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserAchievementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserAchievementQueryRuleFunc func(context.Context, *ent.UserAchievementQuery) error

// EvalQuery return f(ctx, q).
func (f UserAchievementQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserAchievementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserAchievementQuery", q)
}

// The UserAchievementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserAchievementMutationRuleFunc func(context.Context, *ent.UserAchievementMutation) error

// EvalMutation calls f(ctx, m).
func (f UserAchievementMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserAchievementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserAchievementMutation", m)
}

// The UserConsentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserConsentQueryRuleFunc func(context.Context, *ent.UserConsentQuery) error

// EvalQuery return f(ctx, q).
func (f UserConsentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserConsentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserConsentQuery", q)
}

// The UserConsentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserConsentMutationRuleFunc func(context.Context, *ent.UserConsentMutation) error

// EvalMutation calls f(ctx, m).
func (f UserConsentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserConsentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserConsentMutation", m)
}

// The UserOnboardingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserOnboardingQueryRuleFunc func(context.Context, *ent.UserOnboardingQuery) error

// EvalQuery return f(ctx, q).
func (f UserOnboardingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserOnboardingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserOnboardingQuery", q)
}

// The UserOnboardingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserOnboardingMutationRuleFunc func(context.Context, *ent.UserOnboardingMutation) error

// EvalMutation calls f(ctx, m).
func (f UserOnboardingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserOnboardingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserOnboardingMutation", m)
}

// The UserProfileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserProfileQueryRuleFunc func(context.Context, *ent.UserProfileQuery) error

// EvalQuery return f(ctx, q).
func (f UserProfileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserProfileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserProfileQuery", q)
}

// The UserProfileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserProfileMutationRuleFunc func(context.Context, *ent.UserProfileMutation) error

// EvalMutation calls f(ctx, m).
func (f UserProfileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserProfileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserProfileMutation", m)
}

// The UserSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSessionQueryRuleFunc func(context.Context, *ent.UserSessionQuery) error

// EvalQuery return f(ctx, q).
func (f UserSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserSessionQuery", q)
}

// The UserSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSessionMutationRuleFunc func(context.Context, *ent.UserSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserSessionMutation", m)
}

// The UserSkillQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSkillQueryRuleFunc func(context.Context, *ent.UserSkillQuery) error

// EvalQuery return f(ctx, q).
func (f UserSkillQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSkillQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserSkillQuery", q)
}

// The UserSkillMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSkillMutationRuleFunc func(context.Context, *ent.UserSkillMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSkillMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserSkillMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserSkillMutation", m)
}

// The VolunteerApplicationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VolunteerApplicationQueryRuleFunc func(context.Context, *ent.VolunteerApplicationQuery) error

// EvalQuery return f(ctx, q).
func (f VolunteerApplicationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VolunteerApplicationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VolunteerApplicationQuery", q)
}

// The VolunteerApplicationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VolunteerApplicationMutationRuleFunc func(context.Context, *ent.VolunteerApplicationMutation) error

// EvalMutation calls f(ctx, m).
func (f VolunteerApplicationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VolunteerApplicationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VolunteerApplicationMutation", m)
}

// The VolunteerAssignmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VolunteerAssignmentQueryRuleFunc func(context.Context, *ent.VolunteerAssignmentQuery) error

// EvalQuery return f(ctx, q).
func (f VolunteerAssignmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VolunteerAssignmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VolunteerAssignmentQuery", q)
}

// The VolunteerAssignmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VolunteerAssignmentMutationRuleFunc func(context.Context, *ent.VolunteerAssignmentMutation) error

// EvalMutation calls f(ctx, m).
func (f VolunteerAssignmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VolunteerAssignmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VolunteerAssignmentMutation", m)
}

// The VolunteerOpportunityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VolunteerOpportunityQueryRuleFunc func(context.Context, *ent.VolunteerOpportunityQuery) error

// EvalQuery return f(ctx, q).
func (f VolunteerOpportunityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VolunteerOpportunityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VolunteerOpportunityQuery", q)
}

// The VolunteerOpportunityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VolunteerOpportunityMutationRuleFunc func(context.Context, *ent.VolunteerOpportunityMutation) error

// EvalMutation calls f(ctx, m).
func (f VolunteerOpportunityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VolunteerOpportunityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VolunteerOpportunityMutation", m)
}

// The VoteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VoteQueryRuleFunc func(context.Context, *ent.VoteQuery) error

// EvalQuery return f(ctx, q).
func (f VoteQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VoteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VoteQuery", q)
}

// The VoteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VoteMutationRuleFunc func(context.Context, *ent.VoteMutation) error

// EvalMutation calls f(ctx, m).
func (f VoteMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VoteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VoteMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AccordionItemQuery:
		return q.Filter(), nil
	case *ent.ActionItemQuery:
		return q.Filter(), nil
	case *ent.ActivityLogQuery:
		return q.Filter(), nil
	case *ent.AddressQuery:
		return q.Filter(), nil
	case *ent.AgendaQuery:
		return q.Filter(), nil
	case *ent.AgendaItemQuery:
		return q.Filter(), nil
	case *ent.AnalyticsDashboardQuery:
		return q.Filter(), nil
	case *ent.AnalyticsEventQuery:
		return q.Filter(), nil
	case *ent.AppSettingQuery:
		return q.Filter(), nil
	case *ent.AuditLogQuery:
		return q.Filter(), nil
	case *ent.BadgeQuery:
		return q.Filter(), nil
	case *ent.BallotQuery:
		return q.Filter(), nil
	case *ent.BlockAccordionQuery:
		return q.Filter(), nil
	case *ent.BlockContactFormQuery:
		return q.Filter(), nil
	case *ent.BlockCtaQuery:
		return q.Filter(), nil
	case *ent.BlockDividerQuery:
		return q.Filter(), nil
	case *ent.BlockDonationFormQuery:
		return q.Filter(), nil
	case *ent.BlockFaqQuery:
		return q.Filter(), nil
	case *ent.BlockGalleryQuery:
		return q.Filter(), nil
	case *ent.BlockHeroQuery:
		return q.Filter(), nil
	case *ent.BlockMapQuery:
		return q.Filter(), nil
	case *ent.BlockNewsletterSignupQuery:
		return q.Filter(), nil
	case *ent.BlockPartnerLogosQuery:
		return q.Filter(), nil
	case *ent.BlockProgramCardsQuery:
		return q.Filter(), nil
	case *ent.BlockStatsQuery:
		return q.Filter(), nil
	case *ent.BlockSuccessStoriesQuery:
		return q.Filter(), nil
	case *ent.BlockTabsQuery:
		return q.Filter(), nil
	case *ent.BlockTeamGridQuery:
		return q.Filter(), nil
	case *ent.BlockTestimonialsQuery:
		return q.Filter(), nil
	case *ent.BlockTextContentQuery:
		return q.Filter(), nil
	case *ent.BlockTimelineQuery:
		return q.Filter(), nil
	case *ent.BlockVideoEmbedQuery:
		return q.Filter(), nil
	case *ent.BlockVolunteerSignupQuery:
		return q.Filter(), nil
	case *ent.BrandBenefitQuery:
		return q.Filter(), nil
	case *ent.BrandConfigQuery:
		return q.Filter(), nil
	case *ent.ContentBlockQuery:
		return q.Filter(), nil
	case *ent.ConversationQuery:
		return q.Filter(), nil
	case *ent.ConversationParticipantQuery:
		return q.Filter(), nil
	case *ent.DashboardWidgetQuery:
		return q.Filter(), nil
	case *ent.DocumentQuery:
		return q.Filter(), nil
	case *ent.DocumentCategoryQuery:
		return q.Filter(), nil
	case *ent.DonationQuery:
		return q.Filter(), nil
	case *ent.EventQuery:
		return q.Filter(), nil
	case *ent.EventRegistrationQuery:
		return q.Filter(), nil
	case *ent.FaqItemQuery:
		return q.Filter(), nil
	case *ent.FeatureFlagQuery:
		return q.Filter(), nil
	case *ent.FundraisingCampaignQuery:
		return q.Filter(), nil
	case *ent.GalleryImageQuery:
		return q.Filter(), nil
	case *ent.GeneratedReportQuery:
		return q.Filter(), nil
	case *ent.GrantQuery:
		return q.Filter(), nil
	case *ent.GrantReportQuery:
		return q.Filter(), nil
	case *ent.ImpactDataPointQuery:
		return q.Filter(), nil
	case *ent.ImpactMetricQuery:
		return q.Filter(), nil
	case *ent.JobQuery:
		return q.Filter(), nil
	case *ent.JobLogQuery:
		return q.Filter(), nil
	case *ent.MentorshipRequestQuery:
		return q.Filter(), nil
	case *ent.MentorshipSessionQuery:
		return q.Filter(), nil
	case *ent.MessageQuery:
		return q.Filter(), nil
	case *ent.NewsArticleQuery:
		return q.Filter(), nil
	case *ent.OrganizationQuery:
		return q.Filter(), nil
	case *ent.PageQuery:
		return q.Filter(), nil
	case *ent.PartnerLogoItemQuery:
		return q.Filter(), nil
	case *ent.PartnershipQuery:
		return q.Filter(), nil
	case *ent.PartnershipInteractionQuery:
		return q.Filter(), nil
	case *ent.PartnershipRenewalQuery:
		return q.Filter(), nil
	case *ent.PartnershipReportQuery:
		return q.Filter(), nil
	case *ent.PasswordHistoryQuery:
		return q.Filter(), nil
	case *ent.PermissionQuery:
		return q.Filter(), nil
	case *ent.ProgramQuery:
		return q.Filter(), nil
	case *ent.ProgramCardItemQuery:
		return q.Filter(), nil
	case *ent.ProgramCategoryQuery:
		return q.Filter(), nil
	case *ent.ProgramEnrolmentQuery:
		return q.Filter(), nil
	case *ent.ProgramParticipantQuery:
		return q.Filter(), nil
	case *ent.ReportDefinitionQuery:
		return q.Filter(), nil
	case *ent.ReportPermissionQuery:
		return q.Filter(), nil
	case *ent.RolePermissionQuery:
		return q.Filter(), nil
	case *ent.ScheduledReportQuery:
		return q.Filter(), nil
	case *ent.SeoConfigQuery:
		return q.Filter(), nil
	case *ent.SiteVisitQuery:
		return q.Filter(), nil
	case *ent.SkillQuery:
		return q.Filter(), nil
	case *ent.StatItemQuery:
		return q.Filter(), nil
	case *ent.SuccessStoryQuery:
		return q.Filter(), nil
	case *ent.SystemErrorQuery:
		return q.Filter(), nil
	case *ent.SystemLogQuery:
		return q.Filter(), nil
	case *ent.TabItemQuery:
		return q.Filter(), nil
	case *ent.TeamMemberQuery:
		return q.Filter(), nil
	case *ent.TeamMemberItemQuery:
		return q.Filter(), nil
	case *ent.TestimonialItemQuery:
		return q.Filter(), nil
	case *ent.TimelineEventQuery:
		return q.Filter(), nil
	case *ent.TokenQuery:
		return q.Filter(), nil
	case *ent.TrustedDeviceQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.UserAchievementQuery:
		return q.Filter(), nil
	case *ent.UserConsentQuery:
		return q.Filter(), nil
	case *ent.UserOnboardingQuery:
		return q.Filter(), nil
	case *ent.UserProfileQuery:
		return q.Filter(), nil
	case *ent.UserSessionQuery:
		return q.Filter(), nil
	case *ent.UserSkillQuery:
		return q.Filter(), nil
	case *ent.VolunteerApplicationQuery:
		return q.Filter(), nil
	case *ent.VolunteerAssignmentQuery:
		return q.Filter(), nil
	case *ent.VolunteerOpportunityQuery:
		return q.Filter(), nil
	case *ent.VoteQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AccordionItemMutation:
		return m.Filter(), nil
	case *ent.ActionItemMutation:
		return m.Filter(), nil
	case *ent.ActivityLogMutation:
		return m.Filter(), nil
	case *ent.AddressMutation:
		return m.Filter(), nil
	case *ent.AgendaMutation:
		return m.Filter(), nil
	case *ent.AgendaItemMutation:
		return m.Filter(), nil
	case *ent.AnalyticsDashboardMutation:
		return m.Filter(), nil
	case *ent.AnalyticsEventMutation:
		return m.Filter(), nil
	case *ent.AppSettingMutation:
		return m.Filter(), nil
	case *ent.AuditLogMutation:
		return m.Filter(), nil
	case *ent.BadgeMutation:
		return m.Filter(), nil
	case *ent.BallotMutation:
		return m.Filter(), nil
	case *ent.BlockAccordionMutation:
		return m.Filter(), nil
	case *ent.BlockContactFormMutation:
		return m.Filter(), nil
	case *ent.BlockCtaMutation:
		return m.Filter(), nil
	case *ent.BlockDividerMutation:
		return m.Filter(), nil
	case *ent.BlockDonationFormMutation:
		return m.Filter(), nil
	case *ent.BlockFaqMutation:
		return m.Filter(), nil
	case *ent.BlockGalleryMutation:
		return m.Filter(), nil
	case *ent.BlockHeroMutation:
		return m.Filter(), nil
	case *ent.BlockMapMutation:
		return m.Filter(), nil
	case *ent.BlockNewsletterSignupMutation:
		return m.Filter(), nil
	case *ent.BlockPartnerLogosMutation:
		return m.Filter(), nil
	case *ent.BlockProgramCardsMutation:
		return m.Filter(), nil
	case *ent.BlockStatsMutation:
		return m.Filter(), nil
	case *ent.BlockSuccessStoriesMutation:
		return m.Filter(), nil
	case *ent.BlockTabsMutation:
		return m.Filter(), nil
	case *ent.BlockTeamGridMutation:
		return m.Filter(), nil
	case *ent.BlockTestimonialsMutation:
		return m.Filter(), nil
	case *ent.BlockTextContentMutation:
		return m.Filter(), nil
	case *ent.BlockTimelineMutation:
		return m.Filter(), nil
	case *ent.BlockVideoEmbedMutation:
		return m.Filter(), nil
	case *ent.BlockVolunteerSignupMutation:
		return m.Filter(), nil
	case *ent.BrandBenefitMutation:
		return m.Filter(), nil
	case *ent.BrandConfigMutation:
		return m.Filter(), nil
	case *ent.ContentBlockMutation:
		return m.Filter(), nil
	case *ent.ConversationMutation:
		return m.Filter(), nil
	case *ent.ConversationParticipantMutation:
		return m.Filter(), nil
	case *ent.DashboardWidgetMutation:
		return m.Filter(), nil
	case *ent.DocumentMutation:
		return m.Filter(), nil
	case *ent.DocumentCategoryMutation:
		return m.Filter(), nil
	case *ent.DonationMutation:
		return m.Filter(), nil
	case *ent.EventMutation:
		return m.Filter(), nil
	case *ent.EventRegistrationMutation:
		return m.Filter(), nil
	case *ent.FaqItemMutation:
		return m.Filter(), nil
	case *ent.FeatureFlagMutation:
		return m.Filter(), nil
	case *ent.FundraisingCampaignMutation:
		return m.Filter(), nil
	case *ent.GalleryImageMutation:
		return m.Filter(), nil
	case *ent.GeneratedReportMutation:
		return m.Filter(), nil
	case *ent.GrantMutation:
		return m.Filter(), nil
	case *ent.GrantReportMutation:
		return m.Filter(), nil
	case *ent.ImpactDataPointMutation:
		return m.Filter(), nil
	case *ent.ImpactMetricMutation:
		return m.Filter(), nil
	case *ent.JobMutation:
		return m.Filter(), nil
	case *ent.JobLogMutation:
		return m.Filter(), nil
	case *ent.MentorshipRequestMutation:
		return m.Filter(), nil
	case *ent.MentorshipSessionMutation:
		return m.Filter(), nil
	case *ent.MessageMutation:
		return m.Filter(), nil
	case *ent.NewsArticleMutation:
		return m.Filter(), nil
	case *ent.OrganizationMutation:
		return m.Filter(), nil
	case *ent.PageMutation:
		return m.Filter(), nil
	case *ent.PartnerLogoItemMutation:
		return m.Filter(), nil
	case *ent.PartnershipMutation:
		return m.Filter(), nil
	case *ent.PartnershipInteractionMutation:
		return m.Filter(), nil
	case *ent.PartnershipRenewalMutation:
		return m.Filter(), nil
	case *ent.PartnershipReportMutation:
		return m.Filter(), nil
	case *ent.PasswordHistoryMutation:
		return m.Filter(), nil
	case *ent.PermissionMutation:
		return m.Filter(), nil
	case *ent.ProgramMutation:
		return m.Filter(), nil
	case *ent.ProgramCardItemMutation:
		return m.Filter(), nil
	case *ent.ProgramCategoryMutation:
		return m.Filter(), nil
	case *ent.ProgramEnrolmentMutation:
		return m.Filter(), nil
	case *ent.ProgramParticipantMutation:
		return m.Filter(), nil
	case *ent.ReportDefinitionMutation:
		return m.Filter(), nil
	case *ent.ReportPermissionMutation:
		return m.Filter(), nil
	case *ent.RolePermissionMutation:
		return m.Filter(), nil
	case *ent.ScheduledReportMutation:
		return m.Filter(), nil
	case *ent.SeoConfigMutation:
		return m.Filter(), nil
	case *ent.SiteVisitMutation:
		return m.Filter(), nil
	case *ent.SkillMutation:
		return m.Filter(), nil
	case *ent.StatItemMutation:
		return m.Filter(), nil
	case *ent.SuccessStoryMutation:
		return m.Filter(), nil
	case *ent.SystemErrorMutation:
		return m.Filter(), nil
	case *ent.SystemLogMutation:
		return m.Filter(), nil
	case *ent.TabItemMutation:
		return m.Filter(), nil
	case *ent.TeamMemberMutation:
		return m.Filter(), nil
	case *ent.TeamMemberItemMutation:
		return m.Filter(), nil
	case *ent.TestimonialItemMutation:
		return m.Filter(), nil
	case *ent.TimelineEventMutation:
		return m.Filter(), nil
	case *ent.TokenMutation:
		return m.Filter(), nil
	case *ent.TrustedDeviceMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.UserAchievementMutation:
		return m.Filter(), nil
	case *ent.UserConsentMutation:
		return m.Filter(), nil
	case *ent.UserOnboardingMutation:
		return m.Filter(), nil
	case *ent.UserProfileMutation:
		return m.Filter(), nil
	case *ent.UserSessionMutation:
		return m.Filter(), nil
	case *ent.UserSkillMutation:
		return m.Filter(), nil
	case *ent.VolunteerApplicationMutation:
		return m.Filter(), nil
	case *ent.VolunteerAssignmentMutation:
		return m.Filter(), nil
	case *ent.VolunteerOpportunityMutation:
		return m.Filter(), nil
	case *ent.VoteMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
