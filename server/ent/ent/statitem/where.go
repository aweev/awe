// Code generated by ent, DO NOT EDIT.

package statitem

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StatItem {
	return predicate.StatItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StatItem {
	return predicate.StatItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StatItem {
	return predicate.StatItem(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldOrder, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldValue, v))
}

// IconName applies equality check predicate on the "icon_name" field. It's identical to IconNameEQ.
func IconName(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldIconName, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldColor, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.StatItem {
	return predicate.StatItem(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.StatItem {
	return predicate.StatItem(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.StatItem {
	return predicate.StatItem(sql.FieldLTE(FieldOrder, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContainsFold(FieldValue, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldNotNull(FieldDescription))
}

// IconNameEQ applies the EQ predicate on the "icon_name" field.
func IconNameEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldIconName, v))
}

// IconNameNEQ applies the NEQ predicate on the "icon_name" field.
func IconNameNEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNEQ(FieldIconName, v))
}

// IconNameIn applies the In predicate on the "icon_name" field.
func IconNameIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldIn(FieldIconName, vs...))
}

// IconNameNotIn applies the NotIn predicate on the "icon_name" field.
func IconNameNotIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNotIn(FieldIconName, vs...))
}

// IconNameGT applies the GT predicate on the "icon_name" field.
func IconNameGT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGT(FieldIconName, v))
}

// IconNameGTE applies the GTE predicate on the "icon_name" field.
func IconNameGTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGTE(FieldIconName, v))
}

// IconNameLT applies the LT predicate on the "icon_name" field.
func IconNameLT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLT(FieldIconName, v))
}

// IconNameLTE applies the LTE predicate on the "icon_name" field.
func IconNameLTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLTE(FieldIconName, v))
}

// IconNameContains applies the Contains predicate on the "icon_name" field.
func IconNameContains(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContains(FieldIconName, v))
}

// IconNameHasPrefix applies the HasPrefix predicate on the "icon_name" field.
func IconNameHasPrefix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasPrefix(FieldIconName, v))
}

// IconNameHasSuffix applies the HasSuffix predicate on the "icon_name" field.
func IconNameHasSuffix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasSuffix(FieldIconName, v))
}

// IconNameIsNil applies the IsNil predicate on the "icon_name" field.
func IconNameIsNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldIsNull(FieldIconName))
}

// IconNameNotNil applies the NotNil predicate on the "icon_name" field.
func IconNameNotNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldNotNull(FieldIconName))
}

// IconNameEqualFold applies the EqualFold predicate on the "icon_name" field.
func IconNameEqualFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEqualFold(FieldIconName, v))
}

// IconNameContainsFold applies the ContainsFold predicate on the "icon_name" field.
func IconNameContainsFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContainsFold(FieldIconName, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.StatItem {
	return predicate.StatItem(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.StatItem {
	return predicate.StatItem(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.StatItem {
	return predicate.StatItem(sql.FieldContainsFold(FieldColor, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.StatItem {
	return predicate.StatItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.BlockStats) predicate.StatItem {
	return predicate.StatItem(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StatItem) predicate.StatItem {
	return predicate.StatItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StatItem) predicate.StatItem {
	return predicate.StatItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StatItem) predicate.StatItem {
	return predicate.StatItem(sql.NotPredicates(p))
}
