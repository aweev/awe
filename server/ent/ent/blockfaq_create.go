// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/faqitem"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockFaqCreate is the builder for creating a BlockFaq entity.
type BlockFaqCreate struct {
	config
	mutation *BlockFaqMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockFaqCreate) SetInternalName(v string) *BlockFaqCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetBadge sets the "badge" field.
func (_c *BlockFaqCreate) SetBadge(v map[string]string) *BlockFaqCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockFaqCreate) SetTitle(v map[string]string) *BlockFaqCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockFaqCreate) SetDescription(v map[string]string) *BlockFaqCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (_c *BlockFaqCreate) SetAllowMultipleOpen(v bool) *BlockFaqCreate {
	_c.mutation.SetAllowMultipleOpen(v)
	return _c
}

// SetNillableAllowMultipleOpen sets the "allow_multiple_open" field if the given value is not nil.
func (_c *BlockFaqCreate) SetNillableAllowMultipleOpen(v *bool) *BlockFaqCreate {
	if v != nil {
		_c.SetAllowMultipleOpen(*v)
	}
	return _c
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (_c *BlockFaqCreate) SetDefaultOpenFirst(v bool) *BlockFaqCreate {
	_c.mutation.SetDefaultOpenFirst(v)
	return _c
}

// SetNillableDefaultOpenFirst sets the "default_open_first" field if the given value is not nil.
func (_c *BlockFaqCreate) SetNillableDefaultOpenFirst(v *bool) *BlockFaqCreate {
	if v != nil {
		_c.SetDefaultOpenFirst(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockFaqCreate) SetCreatedAt(v time.Time) *BlockFaqCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockFaqCreate) SetNillableCreatedAt(v *time.Time) *BlockFaqCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockFaqCreate) SetUpdatedAt(v time.Time) *BlockFaqCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockFaqCreate) SetNillableUpdatedAt(v *time.Time) *BlockFaqCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockFaqCreate) SetContentBlockID(id int) *BlockFaqCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockFaqCreate) SetContentBlock(v *ContentBlock) *BlockFaqCreate {
	return _c.SetContentBlockID(v.ID)
}

// AddItemIDs adds the "items" edge to the FaqItem entity by IDs.
func (_c *BlockFaqCreate) AddItemIDs(ids ...int) *BlockFaqCreate {
	_c.mutation.AddItemIDs(ids...)
	return _c
}

// AddItems adds the "items" edges to the FaqItem entity.
func (_c *BlockFaqCreate) AddItems(v ...*FaqItem) *BlockFaqCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddItemIDs(ids...)
}

// Mutation returns the BlockFaqMutation object of the builder.
func (_c *BlockFaqCreate) Mutation() *BlockFaqMutation {
	return _c.mutation
}

// Save creates the BlockFaq in the database.
func (_c *BlockFaqCreate) Save(ctx context.Context) (*BlockFaq, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockFaqCreate) SaveX(ctx context.Context) *BlockFaq {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockFaqCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockFaqCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockFaqCreate) defaults() {
	if _, ok := _c.mutation.AllowMultipleOpen(); !ok {
		v := blockfaq.DefaultAllowMultipleOpen
		_c.mutation.SetAllowMultipleOpen(v)
	}
	if _, ok := _c.mutation.DefaultOpenFirst(); !ok {
		v := blockfaq.DefaultDefaultOpenFirst
		_c.mutation.SetDefaultOpenFirst(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockfaq.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockfaq.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockFaqCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockFaq.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockFaq.title"`)}
	}
	if _, ok := _c.mutation.AllowMultipleOpen(); !ok {
		return &ValidationError{Name: "allow_multiple_open", err: errors.New(`ent: missing required field "BlockFaq.allow_multiple_open"`)}
	}
	if _, ok := _c.mutation.DefaultOpenFirst(); !ok {
		return &ValidationError{Name: "default_open_first", err: errors.New(`ent: missing required field "BlockFaq.default_open_first"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockFaq.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockFaq.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockFaq.content_block"`)}
	}
	return nil
}

func (_c *BlockFaqCreate) sqlSave(ctx context.Context) (*BlockFaq, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockFaqCreate) createSpec() (*BlockFaq, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockFaq{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockfaq.Table, sqlgraph.NewFieldSpec(blockfaq.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockfaq.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(blockfaq.FieldBadge, field.TypeJSON, value)
		_node.Badge = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockfaq.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockfaq.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.AllowMultipleOpen(); ok {
		_spec.SetField(blockfaq.FieldAllowMultipleOpen, field.TypeBool, value)
		_node.AllowMultipleOpen = value
	}
	if value, ok := _c.mutation.DefaultOpenFirst(); ok {
		_spec.SetField(blockfaq.FieldDefaultOpenFirst, field.TypeBool, value)
		_node.DefaultOpenFirst = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockfaq.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockfaq.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_faq = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(faqitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockFaq.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockFaqUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockFaqCreate) OnConflict(opts ...sql.ConflictOption) *BlockFaqUpsertOne {
	_c.conflict = opts
	return &BlockFaqUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockFaqCreate) OnConflictColumns(columns ...string) *BlockFaqUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockFaqUpsertOne{
		create: _c,
	}
}

type (
	// BlockFaqUpsertOne is the builder for "upsert"-ing
	//  one BlockFaq node.
	BlockFaqUpsertOne struct {
		create *BlockFaqCreate
	}

	// BlockFaqUpsert is the "OnConflict" setter.
	BlockFaqUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockFaqUpsert) SetInternalName(v string) *BlockFaqUpsert {
	u.Set(blockfaq.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateInternalName() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldInternalName)
	return u
}

// SetBadge sets the "badge" field.
func (u *BlockFaqUpsert) SetBadge(v map[string]string) *BlockFaqUpsert {
	u.Set(blockfaq.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateBadge() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldBadge)
	return u
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockFaqUpsert) ClearBadge() *BlockFaqUpsert {
	u.SetNull(blockfaq.FieldBadge)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockFaqUpsert) SetTitle(v map[string]string) *BlockFaqUpsert {
	u.Set(blockfaq.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateTitle() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockFaqUpsert) SetDescription(v map[string]string) *BlockFaqUpsert {
	u.Set(blockfaq.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateDescription() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockFaqUpsert) ClearDescription() *BlockFaqUpsert {
	u.SetNull(blockfaq.FieldDescription)
	return u
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (u *BlockFaqUpsert) SetAllowMultipleOpen(v bool) *BlockFaqUpsert {
	u.Set(blockfaq.FieldAllowMultipleOpen, v)
	return u
}

// UpdateAllowMultipleOpen sets the "allow_multiple_open" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateAllowMultipleOpen() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldAllowMultipleOpen)
	return u
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (u *BlockFaqUpsert) SetDefaultOpenFirst(v bool) *BlockFaqUpsert {
	u.Set(blockfaq.FieldDefaultOpenFirst, v)
	return u
}

// UpdateDefaultOpenFirst sets the "default_open_first" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateDefaultOpenFirst() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldDefaultOpenFirst)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockFaqUpsert) SetUpdatedAt(v time.Time) *BlockFaqUpsert {
	u.Set(blockfaq.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockFaqUpsert) UpdateUpdatedAt() *BlockFaqUpsert {
	u.SetExcluded(blockfaq.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockFaqUpsertOne) UpdateNewValues() *BlockFaqUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockfaq.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockFaqUpsertOne) Ignore() *BlockFaqUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockFaqUpsertOne) DoNothing() *BlockFaqUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockFaqCreate.OnConflict
// documentation for more info.
func (u *BlockFaqUpsertOne) Update(set func(*BlockFaqUpsert)) *BlockFaqUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockFaqUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockFaqUpsertOne) SetInternalName(v string) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateInternalName() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockFaqUpsertOne) SetBadge(v map[string]string) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateBadge() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockFaqUpsertOne) ClearBadge() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockFaqUpsertOne) SetTitle(v map[string]string) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateTitle() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockFaqUpsertOne) SetDescription(v map[string]string) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateDescription() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockFaqUpsertOne) ClearDescription() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.ClearDescription()
	})
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (u *BlockFaqUpsertOne) SetAllowMultipleOpen(v bool) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetAllowMultipleOpen(v)
	})
}

// UpdateAllowMultipleOpen sets the "allow_multiple_open" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateAllowMultipleOpen() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateAllowMultipleOpen()
	})
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (u *BlockFaqUpsertOne) SetDefaultOpenFirst(v bool) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetDefaultOpenFirst(v)
	})
}

// UpdateDefaultOpenFirst sets the "default_open_first" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateDefaultOpenFirst() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateDefaultOpenFirst()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockFaqUpsertOne) SetUpdatedAt(v time.Time) *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockFaqUpsertOne) UpdateUpdatedAt() *BlockFaqUpsertOne {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockFaqUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockFaqCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockFaqUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockFaqUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockFaqUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockFaqCreateBulk is the builder for creating many BlockFaq entities in bulk.
type BlockFaqCreateBulk struct {
	config
	err      error
	builders []*BlockFaqCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockFaq entities in the database.
func (_c *BlockFaqCreateBulk) Save(ctx context.Context) ([]*BlockFaq, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockFaq, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockFaqMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockFaqCreateBulk) SaveX(ctx context.Context) []*BlockFaq {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockFaqCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockFaqCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockFaq.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockFaqUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockFaqCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockFaqUpsertBulk {
	_c.conflict = opts
	return &BlockFaqUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockFaqCreateBulk) OnConflictColumns(columns ...string) *BlockFaqUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockFaqUpsertBulk{
		create: _c,
	}
}

// BlockFaqUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockFaq nodes.
type BlockFaqUpsertBulk struct {
	create *BlockFaqCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockFaqUpsertBulk) UpdateNewValues() *BlockFaqUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockfaq.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockFaq.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockFaqUpsertBulk) Ignore() *BlockFaqUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockFaqUpsertBulk) DoNothing() *BlockFaqUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockFaqCreateBulk.OnConflict
// documentation for more info.
func (u *BlockFaqUpsertBulk) Update(set func(*BlockFaqUpsert)) *BlockFaqUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockFaqUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockFaqUpsertBulk) SetInternalName(v string) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateInternalName() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateInternalName()
	})
}

// SetBadge sets the "badge" field.
func (u *BlockFaqUpsertBulk) SetBadge(v map[string]string) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateBadge() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateBadge()
	})
}

// ClearBadge clears the value of the "badge" field.
func (u *BlockFaqUpsertBulk) ClearBadge() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.ClearBadge()
	})
}

// SetTitle sets the "title" field.
func (u *BlockFaqUpsertBulk) SetTitle(v map[string]string) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateTitle() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockFaqUpsertBulk) SetDescription(v map[string]string) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateDescription() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockFaqUpsertBulk) ClearDescription() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.ClearDescription()
	})
}

// SetAllowMultipleOpen sets the "allow_multiple_open" field.
func (u *BlockFaqUpsertBulk) SetAllowMultipleOpen(v bool) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetAllowMultipleOpen(v)
	})
}

// UpdateAllowMultipleOpen sets the "allow_multiple_open" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateAllowMultipleOpen() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateAllowMultipleOpen()
	})
}

// SetDefaultOpenFirst sets the "default_open_first" field.
func (u *BlockFaqUpsertBulk) SetDefaultOpenFirst(v bool) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetDefaultOpenFirst(v)
	})
}

// UpdateDefaultOpenFirst sets the "default_open_first" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateDefaultOpenFirst() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateDefaultOpenFirst()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockFaqUpsertBulk) SetUpdatedAt(v time.Time) *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockFaqUpsertBulk) UpdateUpdatedAt() *BlockFaqUpsertBulk {
	return u.Update(func(s *BlockFaqUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockFaqUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockFaqCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockFaqCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockFaqUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
