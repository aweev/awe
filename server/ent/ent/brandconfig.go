// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/brandconfig"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BrandConfig is the model entity for the BrandConfig schema.
type BrandConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Singleton holds the value of the "singleton" field.
	Singleton string `json:"singleton,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Colors holds the value of the "colors" field.
	Colors map[string]string `json:"colors,omitempty"`
	// Contact holds the value of the "contact" field.
	Contact map[string]string `json:"contact,omitempty"`
	// Social holds the value of the "social" field.
	Social map[string]string `json:"social,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BrandConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case brandconfig.FieldColors, brandconfig.FieldContact, brandconfig.FieldSocial:
			values[i] = new([]byte)
		case brandconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case brandconfig.FieldSingleton, brandconfig.FieldName, brandconfig.FieldLogoURL:
			values[i] = new(sql.NullString)
		case brandconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BrandConfig fields.
func (_m *BrandConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case brandconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case brandconfig.FieldSingleton:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field singleton", values[i])
			} else if value.Valid {
				_m.Singleton = value.String
			}
		case brandconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case brandconfig.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				_m.LogoURL = value.String
			}
		case brandconfig.FieldColors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field colors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Colors); err != nil {
					return fmt.Errorf("unmarshal field colors: %w", err)
				}
			}
		case brandconfig.FieldContact:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Contact); err != nil {
					return fmt.Errorf("unmarshal field contact: %w", err)
				}
			}
		case brandconfig.FieldSocial:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field social", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Social); err != nil {
					return fmt.Errorf("unmarshal field social: %w", err)
				}
			}
		case brandconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BrandConfig.
// This includes values selected through modifiers, order, etc.
func (_m *BrandConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this BrandConfig.
// Note that you need to call BrandConfig.Unwrap() before calling this method if this BrandConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BrandConfig) Update() *BrandConfigUpdateOne {
	return NewBrandConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BrandConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BrandConfig) Unwrap() *BrandConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BrandConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BrandConfig) String() string {
	var builder strings.Builder
	builder.WriteString("BrandConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("singleton=")
	builder.WriteString(_m.Singleton)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(_m.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("colors=")
	builder.WriteString(fmt.Sprintf("%v", _m.Colors))
	builder.WriteString(", ")
	builder.WriteString("contact=")
	builder.WriteString(fmt.Sprintf("%v", _m.Contact))
	builder.WriteString(", ")
	builder.WriteString("social=")
	builder.WriteString(fmt.Sprintf("%v", _m.Social))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BrandConfigs is a parsable slice of BrandConfig.
type BrandConfigs []*BrandConfig
