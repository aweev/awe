// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/auditlog"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuditLogQuery when eager-loading is set.
	Edges           AuditLogEdges `json:"edges"`
	audit_log_actor *int
	user_audit_logs *int
	selectValues    sql.SelectValues
}

// AuditLogEdges holds the relations/edges for other nodes in the graph.
type AuditLogEdges struct {
	// Actor holds the value of the actor edge.
	Actor *User `json:"actor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActorOrErr returns the Actor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuditLogEdges) ActorOrErr() (*User, error) {
	if e.Actor != nil {
		return e.Actor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "actor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldMeta:
			values[i] = new([]byte)
		case auditlog.FieldID:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldAction, auditlog.FieldEntityID, auditlog.FieldEntityType:
			values[i] = new(sql.NullString)
		case auditlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case auditlog.ForeignKeys[0]: // audit_log_actor
			values[i] = new(sql.NullInt64)
		case auditlog.ForeignKeys[1]: // user_audit_logs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (_m *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case auditlog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = value.String
			}
		case auditlog.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		case auditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case auditlog.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				_m.EntityID = value.String
			}
		case auditlog.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				_m.EntityType = value.String
			}
		case auditlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field audit_log_actor", value)
			} else if value.Valid {
				_m.audit_log_actor = new(int)
				*_m.audit_log_actor = int(value.Int64)
			}
		case auditlog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_audit_logs", value)
			} else if value.Valid {
				_m.user_audit_logs = new(int)
				*_m.user_audit_logs = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (_m *AuditLog) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryActor queries the "actor" edge of the AuditLog entity.
func (_m *AuditLog) QueryActor() *UserQuery {
	return NewAuditLogClient(_m.config).QueryActor(_m)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AuditLog) Unwrap() *AuditLog {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("action=")
	builder.WriteString(_m.Action)
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", _m.Meta))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(_m.EntityID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(_m.EntityType)
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
