// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershiprenewal"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnershipRenewalUpdate is the builder for updating PartnershipRenewal entities.
type PartnershipRenewalUpdate struct {
	config
	hooks    []Hook
	mutation *PartnershipRenewalMutation
}

// Where appends a list predicates to the PartnershipRenewalUpdate builder.
func (_u *PartnershipRenewalUpdate) Where(ps ...predicate.PartnershipRenewal) *PartnershipRenewalUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPreviousEndDate sets the "previous_end_date" field.
func (_u *PartnershipRenewalUpdate) SetPreviousEndDate(v time.Time) *PartnershipRenewalUpdate {
	_u.mutation.SetPreviousEndDate(v)
	return _u
}

// SetNillablePreviousEndDate sets the "previous_end_date" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillablePreviousEndDate(v *time.Time) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetPreviousEndDate(*v)
	}
	return _u
}

// SetNewEndDate sets the "new_end_date" field.
func (_u *PartnershipRenewalUpdate) SetNewEndDate(v time.Time) *PartnershipRenewalUpdate {
	_u.mutation.SetNewEndDate(v)
	return _u
}

// SetNillableNewEndDate sets the "new_end_date" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillableNewEndDate(v *time.Time) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetNewEndDate(*v)
	}
	return _u
}

// SetRenewalValue sets the "renewal_value" field.
func (_u *PartnershipRenewalUpdate) SetRenewalValue(v float64) *PartnershipRenewalUpdate {
	_u.mutation.ResetRenewalValue()
	_u.mutation.SetRenewalValue(v)
	return _u
}

// SetNillableRenewalValue sets the "renewal_value" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillableRenewalValue(v *float64) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetRenewalValue(*v)
	}
	return _u
}

// AddRenewalValue adds value to the "renewal_value" field.
func (_u *PartnershipRenewalUpdate) AddRenewalValue(v float64) *PartnershipRenewalUpdate {
	_u.mutation.AddRenewalValue(v)
	return _u
}

// ClearRenewalValue clears the value of the "renewal_value" field.
func (_u *PartnershipRenewalUpdate) ClearRenewalValue() *PartnershipRenewalUpdate {
	_u.mutation.ClearRenewalValue()
	return _u
}

// SetRenewalTerms sets the "renewal_terms" field.
func (_u *PartnershipRenewalUpdate) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalUpdate {
	_u.mutation.SetRenewalTerms(v)
	return _u
}

// ClearRenewalTerms clears the value of the "renewal_terms" field.
func (_u *PartnershipRenewalUpdate) ClearRenewalTerms() *PartnershipRenewalUpdate {
	_u.mutation.ClearRenewalTerms()
	return _u
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (_u *PartnershipRenewalUpdate) SetNegotiatedBy(v string) *PartnershipRenewalUpdate {
	_u.mutation.SetNegotiatedBy(v)
	return _u
}

// SetNillableNegotiatedBy sets the "negotiated_by" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillableNegotiatedBy(v *string) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetNegotiatedBy(*v)
	}
	return _u
}

// ClearNegotiatedBy clears the value of the "negotiated_by" field.
func (_u *PartnershipRenewalUpdate) ClearNegotiatedBy() *PartnershipRenewalUpdate {
	_u.mutation.ClearNegotiatedBy()
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *PartnershipRenewalUpdate) SetApprovedBy(v string) *PartnershipRenewalUpdate {
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillableApprovedBy(v *string) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *PartnershipRenewalUpdate) ClearApprovedBy() *PartnershipRenewalUpdate {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *PartnershipRenewalUpdate) SetApprovedAt(v time.Time) *PartnershipRenewalUpdate {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *PartnershipRenewalUpdate) SetNillableApprovedAt(v *time.Time) *PartnershipRenewalUpdate {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *PartnershipRenewalUpdate) ClearApprovedAt() *PartnershipRenewalUpdate {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipRenewalUpdate) SetUpdatedAt(v time.Time) *PartnershipRenewalUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipRenewalUpdate) SetPartnershipID(id int) *PartnershipRenewalUpdate {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipRenewalUpdate) SetPartnership(v *Partnership) *PartnershipRenewalUpdate {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipRenewalMutation object of the builder.
func (_u *PartnershipRenewalUpdate) Mutation() *PartnershipRenewalMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipRenewalUpdate) ClearPartnership() *PartnershipRenewalUpdate {
	_u.mutation.ClearPartnership()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnershipRenewalUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipRenewalUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnershipRenewalUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipRenewalUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipRenewalUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershiprenewal.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipRenewalUpdate) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipRenewal.partnership"`)
	}
	return nil
}

func (_u *PartnershipRenewalUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershiprenewal.Table, partnershiprenewal.Columns, sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PreviousEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldPreviousEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NewEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldNewEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalValue(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRenewalValue(); ok {
		_spec.AddField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64, value)
	}
	if _u.mutation.RenewalValueCleared() {
		_spec.ClearField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.RenewalTerms(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalTerms, field.TypeJSON, value)
	}
	if _u.mutation.RenewalTermsCleared() {
		_spec.ClearField(partnershiprenewal.FieldRenewalTerms, field.TypeJSON)
	}
	if value, ok := _u.mutation.NegotiatedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldNegotiatedBy, field.TypeString, value)
	}
	if _u.mutation.NegotiatedByCleared() {
		_spec.ClearField(partnershiprenewal.FieldNegotiatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedBy, field.TypeString, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(partnershiprenewal.FieldApprovedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(partnershiprenewal.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershiprenewal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnershipRenewalUpdateOne is the builder for updating a single PartnershipRenewal entity.
type PartnershipRenewalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnershipRenewalMutation
}

// SetPreviousEndDate sets the "previous_end_date" field.
func (_u *PartnershipRenewalUpdateOne) SetPreviousEndDate(v time.Time) *PartnershipRenewalUpdateOne {
	_u.mutation.SetPreviousEndDate(v)
	return _u
}

// SetNillablePreviousEndDate sets the "previous_end_date" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillablePreviousEndDate(v *time.Time) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetPreviousEndDate(*v)
	}
	return _u
}

// SetNewEndDate sets the "new_end_date" field.
func (_u *PartnershipRenewalUpdateOne) SetNewEndDate(v time.Time) *PartnershipRenewalUpdateOne {
	_u.mutation.SetNewEndDate(v)
	return _u
}

// SetNillableNewEndDate sets the "new_end_date" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillableNewEndDate(v *time.Time) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetNewEndDate(*v)
	}
	return _u
}

// SetRenewalValue sets the "renewal_value" field.
func (_u *PartnershipRenewalUpdateOne) SetRenewalValue(v float64) *PartnershipRenewalUpdateOne {
	_u.mutation.ResetRenewalValue()
	_u.mutation.SetRenewalValue(v)
	return _u
}

// SetNillableRenewalValue sets the "renewal_value" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillableRenewalValue(v *float64) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetRenewalValue(*v)
	}
	return _u
}

// AddRenewalValue adds value to the "renewal_value" field.
func (_u *PartnershipRenewalUpdateOne) AddRenewalValue(v float64) *PartnershipRenewalUpdateOne {
	_u.mutation.AddRenewalValue(v)
	return _u
}

// ClearRenewalValue clears the value of the "renewal_value" field.
func (_u *PartnershipRenewalUpdateOne) ClearRenewalValue() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearRenewalValue()
	return _u
}

// SetRenewalTerms sets the "renewal_terms" field.
func (_u *PartnershipRenewalUpdateOne) SetRenewalTerms(v map[string]interface{}) *PartnershipRenewalUpdateOne {
	_u.mutation.SetRenewalTerms(v)
	return _u
}

// ClearRenewalTerms clears the value of the "renewal_terms" field.
func (_u *PartnershipRenewalUpdateOne) ClearRenewalTerms() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearRenewalTerms()
	return _u
}

// SetNegotiatedBy sets the "negotiated_by" field.
func (_u *PartnershipRenewalUpdateOne) SetNegotiatedBy(v string) *PartnershipRenewalUpdateOne {
	_u.mutation.SetNegotiatedBy(v)
	return _u
}

// SetNillableNegotiatedBy sets the "negotiated_by" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillableNegotiatedBy(v *string) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetNegotiatedBy(*v)
	}
	return _u
}

// ClearNegotiatedBy clears the value of the "negotiated_by" field.
func (_u *PartnershipRenewalUpdateOne) ClearNegotiatedBy() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearNegotiatedBy()
	return _u
}

// SetApprovedBy sets the "approved_by" field.
func (_u *PartnershipRenewalUpdateOne) SetApprovedBy(v string) *PartnershipRenewalUpdateOne {
	_u.mutation.SetApprovedBy(v)
	return _u
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillableApprovedBy(v *string) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetApprovedBy(*v)
	}
	return _u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (_u *PartnershipRenewalUpdateOne) ClearApprovedBy() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearApprovedBy()
	return _u
}

// SetApprovedAt sets the "approved_at" field.
func (_u *PartnershipRenewalUpdateOne) SetApprovedAt(v time.Time) *PartnershipRenewalUpdateOne {
	_u.mutation.SetApprovedAt(v)
	return _u
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (_u *PartnershipRenewalUpdateOne) SetNillableApprovedAt(v *time.Time) *PartnershipRenewalUpdateOne {
	if v != nil {
		_u.SetApprovedAt(*v)
	}
	return _u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (_u *PartnershipRenewalUpdateOne) ClearApprovedAt() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearApprovedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnershipRenewalUpdateOne) SetUpdatedAt(v time.Time) *PartnershipRenewalUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPartnershipID sets the "partnership" edge to the Partnership entity by ID.
func (_u *PartnershipRenewalUpdateOne) SetPartnershipID(id int) *PartnershipRenewalUpdateOne {
	_u.mutation.SetPartnershipID(id)
	return _u
}

// SetPartnership sets the "partnership" edge to the Partnership entity.
func (_u *PartnershipRenewalUpdateOne) SetPartnership(v *Partnership) *PartnershipRenewalUpdateOne {
	return _u.SetPartnershipID(v.ID)
}

// Mutation returns the PartnershipRenewalMutation object of the builder.
func (_u *PartnershipRenewalUpdateOne) Mutation() *PartnershipRenewalMutation {
	return _u.mutation
}

// ClearPartnership clears the "partnership" edge to the Partnership entity.
func (_u *PartnershipRenewalUpdateOne) ClearPartnership() *PartnershipRenewalUpdateOne {
	_u.mutation.ClearPartnership()
	return _u
}

// Where appends a list predicates to the PartnershipRenewalUpdate builder.
func (_u *PartnershipRenewalUpdateOne) Where(ps ...predicate.PartnershipRenewal) *PartnershipRenewalUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnershipRenewalUpdateOne) Select(field string, fields ...string) *PartnershipRenewalUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PartnershipRenewal entity.
func (_u *PartnershipRenewalUpdateOne) Save(ctx context.Context) (*PartnershipRenewal, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnershipRenewalUpdateOne) SaveX(ctx context.Context) *PartnershipRenewal {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnershipRenewalUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnershipRenewalUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnershipRenewalUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partnershiprenewal.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnershipRenewalUpdateOne) check() error {
	if _u.mutation.PartnershipCleared() && len(_u.mutation.PartnershipIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PartnershipRenewal.partnership"`)
	}
	return nil
}

func (_u *PartnershipRenewalUpdateOne) sqlSave(ctx context.Context) (_node *PartnershipRenewal, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partnershiprenewal.Table, partnershiprenewal.Columns, sqlgraph.NewFieldSpec(partnershiprenewal.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PartnershipRenewal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partnershiprenewal.FieldID)
		for _, f := range fields {
			if !partnershiprenewal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partnershiprenewal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PreviousEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldPreviousEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NewEndDate(); ok {
		_spec.SetField(partnershiprenewal.FieldNewEndDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenewalValue(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRenewalValue(); ok {
		_spec.AddField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64, value)
	}
	if _u.mutation.RenewalValueCleared() {
		_spec.ClearField(partnershiprenewal.FieldRenewalValue, field.TypeFloat64)
	}
	if value, ok := _u.mutation.RenewalTerms(); ok {
		_spec.SetField(partnershiprenewal.FieldRenewalTerms, field.TypeJSON, value)
	}
	if _u.mutation.RenewalTermsCleared() {
		_spec.ClearField(partnershiprenewal.FieldRenewalTerms, field.TypeJSON)
	}
	if value, ok := _u.mutation.NegotiatedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldNegotiatedBy, field.TypeString, value)
	}
	if _u.mutation.NegotiatedByCleared() {
		_spec.ClearField(partnershiprenewal.FieldNegotiatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedBy(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedBy, field.TypeString, value)
	}
	if _u.mutation.ApprovedByCleared() {
		_spec.ClearField(partnershiprenewal.FieldApprovedBy, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldApprovedAt, field.TypeTime, value)
	}
	if _u.mutation.ApprovedAtCleared() {
		_spec.ClearField(partnershiprenewal.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partnershiprenewal.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PartnershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PartnershipRenewal{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partnershiprenewal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
