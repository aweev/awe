// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockaccordion"
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/blockcta"
	"awe/ent/ent/blockdivider"
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/blockhero"
	"awe/ent/ent/blockmap"
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/blockstats"
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/blocktabs"
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/blockvolunteersignup"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/page"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContentBlock is the model entity for the ContentBlock schema.
type ContentBlock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// BlockType holds the value of the "block_type" field.
	BlockType contentblock.BlockType `json:"block_type,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]interface{} `json:"config,omitempty"`
	// IsVisible holds the value of the "is_visible" field.
	IsVisible bool `json:"is_visible,omitempty"`
	// HideOnMobile holds the value of the "hide_on_mobile" field.
	HideOnMobile bool `json:"hide_on_mobile,omitempty"`
	// HideOnTablet holds the value of the "hide_on_tablet" field.
	HideOnTablet bool `json:"hide_on_tablet,omitempty"`
	// HideOnDesktop holds the value of the "hide_on_desktop" field.
	HideOnDesktop bool `json:"hide_on_desktop,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContentBlockQuery when eager-loading is set.
	Edges        ContentBlockEdges `json:"edges"`
	page_blocks  *int
	selectValues sql.SelectValues
}

// ContentBlockEdges holds the relations/edges for other nodes in the graph.
type ContentBlockEdges struct {
	// Page holds the value of the page edge.
	Page *Page `json:"page,omitempty"`
	// BlockHero holds the value of the block_hero edge.
	BlockHero *BlockHero `json:"block_hero,omitempty"`
	// BlockTextContent holds the value of the block_text_content edge.
	BlockTextContent *BlockTextContent `json:"block_text_content,omitempty"`
	// BlockFaq holds the value of the block_faq edge.
	BlockFaq *BlockFaq `json:"block_faq,omitempty"`
	// BlockCta holds the value of the block_cta edge.
	BlockCta *BlockCta `json:"block_cta,omitempty"`
	// BlockTestimonials holds the value of the block_testimonials edge.
	BlockTestimonials *BlockTestimonials `json:"block_testimonials,omitempty"`
	// BlockStats holds the value of the block_stats edge.
	BlockStats *BlockStats `json:"block_stats,omitempty"`
	// BlockGallery holds the value of the block_gallery edge.
	BlockGallery *BlockGallery `json:"block_gallery,omitempty"`
	// BlockProgramCards holds the value of the block_program_cards edge.
	BlockProgramCards *BlockProgramCards `json:"block_program_cards,omitempty"`
	// BlockSuccessStories holds the value of the block_success_stories edge.
	BlockSuccessStories *BlockSuccessStories `json:"block_success_stories,omitempty"`
	// BlockDonationForm holds the value of the block_donation_form edge.
	BlockDonationForm *BlockDonationForm `json:"block_donation_form,omitempty"`
	// BlockVolunteerSignup holds the value of the block_volunteer_signup edge.
	BlockVolunteerSignup *BlockVolunteerSignup `json:"block_volunteer_signup,omitempty"`
	// BlockNewsletterSignup holds the value of the block_newsletter_signup edge.
	BlockNewsletterSignup *BlockNewsletterSignup `json:"block_newsletter_signup,omitempty"`
	// BlockPartnerLogos holds the value of the block_partner_logos edge.
	BlockPartnerLogos *BlockPartnerLogos `json:"block_partner_logos,omitempty"`
	// BlockTeamGrid holds the value of the block_team_grid edge.
	BlockTeamGrid *BlockTeamGrid `json:"block_team_grid,omitempty"`
	// BlockTimeline holds the value of the block_timeline edge.
	BlockTimeline *BlockTimeline `json:"block_timeline,omitempty"`
	// BlockContactForm holds the value of the block_contact_form edge.
	BlockContactForm *BlockContactForm `json:"block_contact_form,omitempty"`
	// BlockVideoEmbed holds the value of the block_video_embed edge.
	BlockVideoEmbed *BlockVideoEmbed `json:"block_video_embed,omitempty"`
	// BlockMap holds the value of the block_map edge.
	BlockMap *BlockMap `json:"block_map,omitempty"`
	// BlockAccordion holds the value of the block_accordion edge.
	BlockAccordion *BlockAccordion `json:"block_accordion,omitempty"`
	// BlockTabs holds the value of the block_tabs edge.
	BlockTabs *BlockTabs `json:"block_tabs,omitempty"`
	// BlockDivider holds the value of the block_divider edge.
	BlockDivider *BlockDivider `json:"block_divider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [22]bool
}

// PageOrErr returns the Page value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) PageOrErr() (*Page, error) {
	if e.Page != nil {
		return e.Page, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: page.Label}
	}
	return nil, &NotLoadedError{edge: "page"}
}

// BlockHeroOrErr returns the BlockHero value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockHeroOrErr() (*BlockHero, error) {
	if e.BlockHero != nil {
		return e.BlockHero, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: blockhero.Label}
	}
	return nil, &NotLoadedError{edge: "block_hero"}
}

// BlockTextContentOrErr returns the BlockTextContent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockTextContentOrErr() (*BlockTextContent, error) {
	if e.BlockTextContent != nil {
		return e.BlockTextContent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: blocktextcontent.Label}
	}
	return nil, &NotLoadedError{edge: "block_text_content"}
}

// BlockFaqOrErr returns the BlockFaq value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockFaqOrErr() (*BlockFaq, error) {
	if e.BlockFaq != nil {
		return e.BlockFaq, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: blockfaq.Label}
	}
	return nil, &NotLoadedError{edge: "block_faq"}
}

// BlockCtaOrErr returns the BlockCta value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockCtaOrErr() (*BlockCta, error) {
	if e.BlockCta != nil {
		return e.BlockCta, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: blockcta.Label}
	}
	return nil, &NotLoadedError{edge: "block_cta"}
}

// BlockTestimonialsOrErr returns the BlockTestimonials value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockTestimonialsOrErr() (*BlockTestimonials, error) {
	if e.BlockTestimonials != nil {
		return e.BlockTestimonials, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: blocktestimonials.Label}
	}
	return nil, &NotLoadedError{edge: "block_testimonials"}
}

// BlockStatsOrErr returns the BlockStats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockStatsOrErr() (*BlockStats, error) {
	if e.BlockStats != nil {
		return e.BlockStats, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: blockstats.Label}
	}
	return nil, &NotLoadedError{edge: "block_stats"}
}

// BlockGalleryOrErr returns the BlockGallery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockGalleryOrErr() (*BlockGallery, error) {
	if e.BlockGallery != nil {
		return e.BlockGallery, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: blockgallery.Label}
	}
	return nil, &NotLoadedError{edge: "block_gallery"}
}

// BlockProgramCardsOrErr returns the BlockProgramCards value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockProgramCardsOrErr() (*BlockProgramCards, error) {
	if e.BlockProgramCards != nil {
		return e.BlockProgramCards, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: blockprogramcards.Label}
	}
	return nil, &NotLoadedError{edge: "block_program_cards"}
}

// BlockSuccessStoriesOrErr returns the BlockSuccessStories value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockSuccessStoriesOrErr() (*BlockSuccessStories, error) {
	if e.BlockSuccessStories != nil {
		return e.BlockSuccessStories, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: blocksuccessstories.Label}
	}
	return nil, &NotLoadedError{edge: "block_success_stories"}
}

// BlockDonationFormOrErr returns the BlockDonationForm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockDonationFormOrErr() (*BlockDonationForm, error) {
	if e.BlockDonationForm != nil {
		return e.BlockDonationForm, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: blockdonationform.Label}
	}
	return nil, &NotLoadedError{edge: "block_donation_form"}
}

// BlockVolunteerSignupOrErr returns the BlockVolunteerSignup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockVolunteerSignupOrErr() (*BlockVolunteerSignup, error) {
	if e.BlockVolunteerSignup != nil {
		return e.BlockVolunteerSignup, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: blockvolunteersignup.Label}
	}
	return nil, &NotLoadedError{edge: "block_volunteer_signup"}
}

// BlockNewsletterSignupOrErr returns the BlockNewsletterSignup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockNewsletterSignupOrErr() (*BlockNewsletterSignup, error) {
	if e.BlockNewsletterSignup != nil {
		return e.BlockNewsletterSignup, nil
	} else if e.loadedTypes[12] {
		return nil, &NotFoundError{label: blocknewslettersignup.Label}
	}
	return nil, &NotLoadedError{edge: "block_newsletter_signup"}
}

// BlockPartnerLogosOrErr returns the BlockPartnerLogos value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockPartnerLogosOrErr() (*BlockPartnerLogos, error) {
	if e.BlockPartnerLogos != nil {
		return e.BlockPartnerLogos, nil
	} else if e.loadedTypes[13] {
		return nil, &NotFoundError{label: blockpartnerlogos.Label}
	}
	return nil, &NotLoadedError{edge: "block_partner_logos"}
}

// BlockTeamGridOrErr returns the BlockTeamGrid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockTeamGridOrErr() (*BlockTeamGrid, error) {
	if e.BlockTeamGrid != nil {
		return e.BlockTeamGrid, nil
	} else if e.loadedTypes[14] {
		return nil, &NotFoundError{label: blockteamgrid.Label}
	}
	return nil, &NotLoadedError{edge: "block_team_grid"}
}

// BlockTimelineOrErr returns the BlockTimeline value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockTimelineOrErr() (*BlockTimeline, error) {
	if e.BlockTimeline != nil {
		return e.BlockTimeline, nil
	} else if e.loadedTypes[15] {
		return nil, &NotFoundError{label: blocktimeline.Label}
	}
	return nil, &NotLoadedError{edge: "block_timeline"}
}

// BlockContactFormOrErr returns the BlockContactForm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockContactFormOrErr() (*BlockContactForm, error) {
	if e.BlockContactForm != nil {
		return e.BlockContactForm, nil
	} else if e.loadedTypes[16] {
		return nil, &NotFoundError{label: blockcontactform.Label}
	}
	return nil, &NotLoadedError{edge: "block_contact_form"}
}

// BlockVideoEmbedOrErr returns the BlockVideoEmbed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockVideoEmbedOrErr() (*BlockVideoEmbed, error) {
	if e.BlockVideoEmbed != nil {
		return e.BlockVideoEmbed, nil
	} else if e.loadedTypes[17] {
		return nil, &NotFoundError{label: blockvideoembed.Label}
	}
	return nil, &NotLoadedError{edge: "block_video_embed"}
}

// BlockMapOrErr returns the BlockMap value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockMapOrErr() (*BlockMap, error) {
	if e.BlockMap != nil {
		return e.BlockMap, nil
	} else if e.loadedTypes[18] {
		return nil, &NotFoundError{label: blockmap.Label}
	}
	return nil, &NotLoadedError{edge: "block_map"}
}

// BlockAccordionOrErr returns the BlockAccordion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockAccordionOrErr() (*BlockAccordion, error) {
	if e.BlockAccordion != nil {
		return e.BlockAccordion, nil
	} else if e.loadedTypes[19] {
		return nil, &NotFoundError{label: blockaccordion.Label}
	}
	return nil, &NotLoadedError{edge: "block_accordion"}
}

// BlockTabsOrErr returns the BlockTabs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockTabsOrErr() (*BlockTabs, error) {
	if e.BlockTabs != nil {
		return e.BlockTabs, nil
	} else if e.loadedTypes[20] {
		return nil, &NotFoundError{label: blocktabs.Label}
	}
	return nil, &NotLoadedError{edge: "block_tabs"}
}

// BlockDividerOrErr returns the BlockDivider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentBlockEdges) BlockDividerOrErr() (*BlockDivider, error) {
	if e.BlockDivider != nil {
		return e.BlockDivider, nil
	} else if e.loadedTypes[21] {
		return nil, &NotFoundError{label: blockdivider.Label}
	}
	return nil, &NotLoadedError{edge: "block_divider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContentBlock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contentblock.FieldConfig:
			values[i] = new([]byte)
		case contentblock.FieldIsVisible, contentblock.FieldHideOnMobile, contentblock.FieldHideOnTablet, contentblock.FieldHideOnDesktop:
			values[i] = new(sql.NullBool)
		case contentblock.FieldID, contentblock.FieldOrder:
			values[i] = new(sql.NullInt64)
		case contentblock.FieldBlockType:
			values[i] = new(sql.NullString)
		case contentblock.FieldCreatedAt, contentblock.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case contentblock.ForeignKeys[0]: // page_blocks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContentBlock fields.
func (_m *ContentBlock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contentblock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case contentblock.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case contentblock.FieldBlockType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block_type", values[i])
			} else if value.Valid {
				_m.BlockType = contentblock.BlockType(value.String)
			}
		case contentblock.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case contentblock.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				_m.IsVisible = value.Bool
			}
		case contentblock.FieldHideOnMobile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_on_mobile", values[i])
			} else if value.Valid {
				_m.HideOnMobile = value.Bool
			}
		case contentblock.FieldHideOnTablet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_on_tablet", values[i])
			} else if value.Valid {
				_m.HideOnTablet = value.Bool
			}
		case contentblock.FieldHideOnDesktop:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hide_on_desktop", values[i])
			} else if value.Valid {
				_m.HideOnDesktop = value.Bool
			}
		case contentblock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case contentblock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case contentblock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field page_blocks", value)
			} else if value.Valid {
				_m.page_blocks = new(int)
				*_m.page_blocks = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContentBlock.
// This includes values selected through modifiers, order, etc.
func (_m *ContentBlock) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPage queries the "page" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryPage() *PageQuery {
	return NewContentBlockClient(_m.config).QueryPage(_m)
}

// QueryBlockHero queries the "block_hero" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockHero() *BlockHeroQuery {
	return NewContentBlockClient(_m.config).QueryBlockHero(_m)
}

// QueryBlockTextContent queries the "block_text_content" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockTextContent() *BlockTextContentQuery {
	return NewContentBlockClient(_m.config).QueryBlockTextContent(_m)
}

// QueryBlockFaq queries the "block_faq" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockFaq() *BlockFaqQuery {
	return NewContentBlockClient(_m.config).QueryBlockFaq(_m)
}

// QueryBlockCta queries the "block_cta" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockCta() *BlockCtaQuery {
	return NewContentBlockClient(_m.config).QueryBlockCta(_m)
}

// QueryBlockTestimonials queries the "block_testimonials" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockTestimonials() *BlockTestimonialsQuery {
	return NewContentBlockClient(_m.config).QueryBlockTestimonials(_m)
}

// QueryBlockStats queries the "block_stats" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockStats() *BlockStatsQuery {
	return NewContentBlockClient(_m.config).QueryBlockStats(_m)
}

// QueryBlockGallery queries the "block_gallery" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockGallery() *BlockGalleryQuery {
	return NewContentBlockClient(_m.config).QueryBlockGallery(_m)
}

// QueryBlockProgramCards queries the "block_program_cards" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockProgramCards() *BlockProgramCardsQuery {
	return NewContentBlockClient(_m.config).QueryBlockProgramCards(_m)
}

// QueryBlockSuccessStories queries the "block_success_stories" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockSuccessStories() *BlockSuccessStoriesQuery {
	return NewContentBlockClient(_m.config).QueryBlockSuccessStories(_m)
}

// QueryBlockDonationForm queries the "block_donation_form" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockDonationForm() *BlockDonationFormQuery {
	return NewContentBlockClient(_m.config).QueryBlockDonationForm(_m)
}

// QueryBlockVolunteerSignup queries the "block_volunteer_signup" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockVolunteerSignup() *BlockVolunteerSignupQuery {
	return NewContentBlockClient(_m.config).QueryBlockVolunteerSignup(_m)
}

// QueryBlockNewsletterSignup queries the "block_newsletter_signup" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockNewsletterSignup() *BlockNewsletterSignupQuery {
	return NewContentBlockClient(_m.config).QueryBlockNewsletterSignup(_m)
}

// QueryBlockPartnerLogos queries the "block_partner_logos" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockPartnerLogos() *BlockPartnerLogosQuery {
	return NewContentBlockClient(_m.config).QueryBlockPartnerLogos(_m)
}

// QueryBlockTeamGrid queries the "block_team_grid" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockTeamGrid() *BlockTeamGridQuery {
	return NewContentBlockClient(_m.config).QueryBlockTeamGrid(_m)
}

// QueryBlockTimeline queries the "block_timeline" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockTimeline() *BlockTimelineQuery {
	return NewContentBlockClient(_m.config).QueryBlockTimeline(_m)
}

// QueryBlockContactForm queries the "block_contact_form" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockContactForm() *BlockContactFormQuery {
	return NewContentBlockClient(_m.config).QueryBlockContactForm(_m)
}

// QueryBlockVideoEmbed queries the "block_video_embed" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockVideoEmbed() *BlockVideoEmbedQuery {
	return NewContentBlockClient(_m.config).QueryBlockVideoEmbed(_m)
}

// QueryBlockMap queries the "block_map" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockMap() *BlockMapQuery {
	return NewContentBlockClient(_m.config).QueryBlockMap(_m)
}

// QueryBlockAccordion queries the "block_accordion" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockAccordion() *BlockAccordionQuery {
	return NewContentBlockClient(_m.config).QueryBlockAccordion(_m)
}

// QueryBlockTabs queries the "block_tabs" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockTabs() *BlockTabsQuery {
	return NewContentBlockClient(_m.config).QueryBlockTabs(_m)
}

// QueryBlockDivider queries the "block_divider" edge of the ContentBlock entity.
func (_m *ContentBlock) QueryBlockDivider() *BlockDividerQuery {
	return NewContentBlockClient(_m.config).QueryBlockDivider(_m)
}

// Update returns a builder for updating this ContentBlock.
// Note that you need to call ContentBlock.Unwrap() before calling this method if this ContentBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ContentBlock) Update() *ContentBlockUpdateOne {
	return NewContentBlockClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ContentBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ContentBlock) Unwrap() *ContentBlock {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContentBlock is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ContentBlock) String() string {
	var builder strings.Builder
	builder.WriteString("ContentBlock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("block_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.BlockType))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", _m.Config))
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsVisible))
	builder.WriteString(", ")
	builder.WriteString("hide_on_mobile=")
	builder.WriteString(fmt.Sprintf("%v", _m.HideOnMobile))
	builder.WriteString(", ")
	builder.WriteString("hide_on_tablet=")
	builder.WriteString(fmt.Sprintf("%v", _m.HideOnTablet))
	builder.WriteString(", ")
	builder.WriteString("hide_on_desktop=")
	builder.WriteString(fmt.Sprintf("%v", _m.HideOnDesktop))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ContentBlocks is a parsable slice of ContentBlock.
type ContentBlocks []*ContentBlock
