// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/timelineevent"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TimelineEvent is the model entity for the TimelineEvent schema.
type TimelineEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimelineEventQuery when eager-loading is set.
	Edges                 TimelineEventEdges `json:"edges"`
	block_timeline_events *int
	selectValues          sql.SelectValues
}

// TimelineEventEdges holds the relations/edges for other nodes in the graph.
type TimelineEventEdges struct {
	// Block holds the value of the block edge.
	Block *BlockTimeline `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimelineEventEdges) BlockOrErr() (*BlockTimeline, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blocktimeline.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimelineEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timelineevent.FieldTitle, timelineevent.FieldDescription:
			values[i] = new([]byte)
		case timelineevent.FieldID, timelineevent.FieldOrder:
			values[i] = new(sql.NullInt64)
		case timelineevent.FieldDate, timelineevent.FieldImageURL:
			values[i] = new(sql.NullString)
		case timelineevent.ForeignKeys[0]: // block_timeline_events
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimelineEvent fields.
func (_m *TimelineEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timelineevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case timelineevent.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case timelineevent.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				_m.Date = value.String
			}
		case timelineevent.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case timelineevent.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case timelineevent.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case timelineevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_timeline_events", value)
			} else if value.Valid {
				_m.block_timeline_events = new(int)
				*_m.block_timeline_events = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TimelineEvent.
// This includes values selected through modifiers, order, etc.
func (_m *TimelineEvent) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the TimelineEvent entity.
func (_m *TimelineEvent) QueryBlock() *BlockTimelineQuery {
	return NewTimelineEventClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this TimelineEvent.
// Note that you need to call TimelineEvent.Unwrap() before calling this method if this TimelineEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TimelineEvent) Update() *TimelineEventUpdateOne {
	return NewTimelineEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TimelineEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TimelineEvent) Unwrap() *TimelineEvent {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimelineEvent is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TimelineEvent) String() string {
	var builder strings.Builder
	builder.WriteString("TimelineEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(_m.Date)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteByte(')')
	return builder.String()
}

// TimelineEvents is a parsable slice of TimelineEvent.
type TimelineEvents []*TimelineEvent
