// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/user"
	"awe/ent/ent/useronboarding"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOnboardingCreate is the builder for creating a UserOnboarding entity.
type UserOnboardingCreate struct {
	config
	mutation *UserOnboardingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsCompleted sets the "is_completed" field.
func (_c *UserOnboardingCreate) SetIsCompleted(v bool) *UserOnboardingCreate {
	_c.mutation.SetIsCompleted(v)
	return _c
}

// SetNillableIsCompleted sets the "is_completed" field if the given value is not nil.
func (_c *UserOnboardingCreate) SetNillableIsCompleted(v *bool) *UserOnboardingCreate {
	if v != nil {
		_c.SetIsCompleted(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *UserOnboardingCreate) SetCompletedAt(v time.Time) *UserOnboardingCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *UserOnboardingCreate) SetNillableCompletedAt(v *time.Time) *UserOnboardingCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetSteps sets the "steps" field.
func (_c *UserOnboardingCreate) SetSteps(v map[string]interface{}) *UserOnboardingCreate {
	_c.mutation.SetSteps(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserOnboardingCreate) SetCreatedAt(v time.Time) *UserOnboardingCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserOnboardingCreate) SetNillableCreatedAt(v *time.Time) *UserOnboardingCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserOnboardingCreate) SetUpdatedAt(v time.Time) *UserOnboardingCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserOnboardingCreate) SetNillableUpdatedAt(v *time.Time) *UserOnboardingCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserOnboardingCreate) SetUserID(id int) *UserOnboardingCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserOnboardingCreate) SetUser(v *User) *UserOnboardingCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the UserOnboardingMutation object of the builder.
func (_c *UserOnboardingCreate) Mutation() *UserOnboardingMutation {
	return _c.mutation
}

// Save creates the UserOnboarding in the database.
func (_c *UserOnboardingCreate) Save(ctx context.Context) (*UserOnboarding, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserOnboardingCreate) SaveX(ctx context.Context) *UserOnboarding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserOnboardingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserOnboardingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserOnboardingCreate) defaults() {
	if _, ok := _c.mutation.IsCompleted(); !ok {
		v := useronboarding.DefaultIsCompleted
		_c.mutation.SetIsCompleted(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := useronboarding.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := useronboarding.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserOnboardingCreate) check() error {
	if _, ok := _c.mutation.IsCompleted(); !ok {
		return &ValidationError{Name: "is_completed", err: errors.New(`ent: missing required field "UserOnboarding.is_completed"`)}
	}
	if _, ok := _c.mutation.Steps(); !ok {
		return &ValidationError{Name: "steps", err: errors.New(`ent: missing required field "UserOnboarding.steps"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserOnboarding.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserOnboarding.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserOnboarding.user"`)}
	}
	return nil
}

func (_c *UserOnboardingCreate) sqlSave(ctx context.Context) (*UserOnboarding, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserOnboardingCreate) createSpec() (*UserOnboarding, *sqlgraph.CreateSpec) {
	var (
		_node = &UserOnboarding{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(useronboarding.Table, sqlgraph.NewFieldSpec(useronboarding.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.IsCompleted(); ok {
		_spec.SetField(useronboarding.FieldIsCompleted, field.TypeBool, value)
		_node.IsCompleted = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(useronboarding.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := _c.mutation.Steps(); ok {
		_spec.SetField(useronboarding.FieldSteps, field.TypeJSON, value)
		_node.Steps = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(useronboarding.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(useronboarding.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   useronboarding.UserTable,
			Columns: []string{useronboarding.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_onboarding = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserOnboarding.Create().
//		SetIsCompleted(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserOnboardingUpsert) {
//			SetIsCompleted(v+v).
//		}).
//		Exec(ctx)
func (_c *UserOnboardingCreate) OnConflict(opts ...sql.ConflictOption) *UserOnboardingUpsertOne {
	_c.conflict = opts
	return &UserOnboardingUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserOnboardingCreate) OnConflictColumns(columns ...string) *UserOnboardingUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserOnboardingUpsertOne{
		create: _c,
	}
}

type (
	// UserOnboardingUpsertOne is the builder for "upsert"-ing
	//  one UserOnboarding node.
	UserOnboardingUpsertOne struct {
		create *UserOnboardingCreate
	}

	// UserOnboardingUpsert is the "OnConflict" setter.
	UserOnboardingUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsCompleted sets the "is_completed" field.
func (u *UserOnboardingUpsert) SetIsCompleted(v bool) *UserOnboardingUpsert {
	u.Set(useronboarding.FieldIsCompleted, v)
	return u
}

// UpdateIsCompleted sets the "is_completed" field to the value that was provided on create.
func (u *UserOnboardingUpsert) UpdateIsCompleted() *UserOnboardingUpsert {
	u.SetExcluded(useronboarding.FieldIsCompleted)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *UserOnboardingUpsert) SetCompletedAt(v time.Time) *UserOnboardingUpsert {
	u.Set(useronboarding.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UserOnboardingUpsert) UpdateCompletedAt() *UserOnboardingUpsert {
	u.SetExcluded(useronboarding.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UserOnboardingUpsert) ClearCompletedAt() *UserOnboardingUpsert {
	u.SetNull(useronboarding.FieldCompletedAt)
	return u
}

// SetSteps sets the "steps" field.
func (u *UserOnboardingUpsert) SetSteps(v map[string]interface{}) *UserOnboardingUpsert {
	u.Set(useronboarding.FieldSteps, v)
	return u
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *UserOnboardingUpsert) UpdateSteps() *UserOnboardingUpsert {
	u.SetExcluded(useronboarding.FieldSteps)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserOnboardingUpsert) SetUpdatedAt(v time.Time) *UserOnboardingUpsert {
	u.Set(useronboarding.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserOnboardingUpsert) UpdateUpdatedAt() *UserOnboardingUpsert {
	u.SetExcluded(useronboarding.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserOnboardingUpsertOne) UpdateNewValues() *UserOnboardingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(useronboarding.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserOnboardingUpsertOne) Ignore() *UserOnboardingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserOnboardingUpsertOne) DoNothing() *UserOnboardingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserOnboardingCreate.OnConflict
// documentation for more info.
func (u *UserOnboardingUpsertOne) Update(set func(*UserOnboardingUpsert)) *UserOnboardingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserOnboardingUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsCompleted sets the "is_completed" field.
func (u *UserOnboardingUpsertOne) SetIsCompleted(v bool) *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetIsCompleted(v)
	})
}

// UpdateIsCompleted sets the "is_completed" field to the value that was provided on create.
func (u *UserOnboardingUpsertOne) UpdateIsCompleted() *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateIsCompleted()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *UserOnboardingUpsertOne) SetCompletedAt(v time.Time) *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UserOnboardingUpsertOne) UpdateCompletedAt() *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UserOnboardingUpsertOne) ClearCompletedAt() *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.ClearCompletedAt()
	})
}

// SetSteps sets the "steps" field.
func (u *UserOnboardingUpsertOne) SetSteps(v map[string]interface{}) *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *UserOnboardingUpsertOne) UpdateSteps() *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateSteps()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserOnboardingUpsertOne) SetUpdatedAt(v time.Time) *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserOnboardingUpsertOne) UpdateUpdatedAt() *UserOnboardingUpsertOne {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserOnboardingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserOnboardingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserOnboardingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserOnboardingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserOnboardingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserOnboardingCreateBulk is the builder for creating many UserOnboarding entities in bulk.
type UserOnboardingCreateBulk struct {
	config
	err      error
	builders []*UserOnboardingCreate
	conflict []sql.ConflictOption
}

// Save creates the UserOnboarding entities in the database.
func (_c *UserOnboardingCreateBulk) Save(ctx context.Context) ([]*UserOnboarding, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserOnboarding, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserOnboardingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserOnboardingCreateBulk) SaveX(ctx context.Context) []*UserOnboarding {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserOnboardingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserOnboardingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserOnboarding.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserOnboardingUpsert) {
//			SetIsCompleted(v+v).
//		}).
//		Exec(ctx)
func (_c *UserOnboardingCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserOnboardingUpsertBulk {
	_c.conflict = opts
	return &UserOnboardingUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserOnboardingCreateBulk) OnConflictColumns(columns ...string) *UserOnboardingUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserOnboardingUpsertBulk{
		create: _c,
	}
}

// UserOnboardingUpsertBulk is the builder for "upsert"-ing
// a bulk of UserOnboarding nodes.
type UserOnboardingUpsertBulk struct {
	create *UserOnboardingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserOnboardingUpsertBulk) UpdateNewValues() *UserOnboardingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(useronboarding.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserOnboarding.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserOnboardingUpsertBulk) Ignore() *UserOnboardingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserOnboardingUpsertBulk) DoNothing() *UserOnboardingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserOnboardingCreateBulk.OnConflict
// documentation for more info.
func (u *UserOnboardingUpsertBulk) Update(set func(*UserOnboardingUpsert)) *UserOnboardingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserOnboardingUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsCompleted sets the "is_completed" field.
func (u *UserOnboardingUpsertBulk) SetIsCompleted(v bool) *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetIsCompleted(v)
	})
}

// UpdateIsCompleted sets the "is_completed" field to the value that was provided on create.
func (u *UserOnboardingUpsertBulk) UpdateIsCompleted() *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateIsCompleted()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *UserOnboardingUpsertBulk) SetCompletedAt(v time.Time) *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *UserOnboardingUpsertBulk) UpdateCompletedAt() *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *UserOnboardingUpsertBulk) ClearCompletedAt() *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.ClearCompletedAt()
	})
}

// SetSteps sets the "steps" field.
func (u *UserOnboardingUpsertBulk) SetSteps(v map[string]interface{}) *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *UserOnboardingUpsertBulk) UpdateSteps() *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateSteps()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserOnboardingUpsertBulk) SetUpdatedAt(v time.Time) *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserOnboardingUpsertBulk) UpdateUpdatedAt() *UserOnboardingUpsertBulk {
	return u.Update(func(s *UserOnboardingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserOnboardingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserOnboardingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserOnboardingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserOnboardingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
