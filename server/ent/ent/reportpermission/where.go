// Code generated by ent, DO NOT EDIT.

package reportpermission

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLTE(FieldID, id))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldRoleID, v))
}

// CanView applies equality check predicate on the "can_view" field. It's identical to CanViewEQ.
func CanView(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanView, v))
}

// CanEdit applies equality check predicate on the "can_edit" field. It's identical to CanEditEQ.
func CanEdit(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanEdit, v))
}

// CanDelete applies equality check predicate on the "can_delete" field. It's identical to CanDeleteEQ.
func CanDelete(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanDelete, v))
}

// CanSchedule applies equality check predicate on the "can_schedule" field. It's identical to CanScheduleEQ.
func CanSchedule(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanSchedule, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCreatedAt, v))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldContains(FieldRoleID, v))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldHasPrefix(FieldRoleID, v))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldHasSuffix(FieldRoleID, v))
}

// RoleIDIsNil applies the IsNil predicate on the "role_id" field.
func RoleIDIsNil() predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldIsNull(FieldRoleID))
}

// RoleIDNotNil applies the NotNil predicate on the "role_id" field.
func RoleIDNotNil() predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNotNull(FieldRoleID))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEqualFold(FieldRoleID, v))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v string) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldContainsFold(FieldRoleID, v))
}

// CanViewEQ applies the EQ predicate on the "can_view" field.
func CanViewEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanView, v))
}

// CanViewNEQ applies the NEQ predicate on the "can_view" field.
func CanViewNEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldCanView, v))
}

// CanEditEQ applies the EQ predicate on the "can_edit" field.
func CanEditEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanEdit, v))
}

// CanEditNEQ applies the NEQ predicate on the "can_edit" field.
func CanEditNEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldCanEdit, v))
}

// CanDeleteEQ applies the EQ predicate on the "can_delete" field.
func CanDeleteEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanDelete, v))
}

// CanDeleteNEQ applies the NEQ predicate on the "can_delete" field.
func CanDeleteNEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldCanDelete, v))
}

// CanScheduleEQ applies the EQ predicate on the "can_schedule" field.
func CanScheduleEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCanSchedule, v))
}

// CanScheduleNEQ applies the NEQ predicate on the "can_schedule" field.
func CanScheduleNEQ(v bool) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldCanSchedule, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReportPermission {
	return predicate.ReportPermission(sql.FieldLTE(FieldCreatedAt, v))
}

// HasReportDefinition applies the HasEdge predicate on the "report_definition" edge.
func HasReportDefinition() predicate.ReportPermission {
	return predicate.ReportPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportDefinitionWith applies the HasEdge predicate on the "report_definition" edge with a given conditions (other predicates).
func HasReportDefinitionWith(preds ...predicate.ReportDefinition) predicate.ReportPermission {
	return predicate.ReportPermission(func(s *sql.Selector) {
		step := newReportDefinitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ReportPermission {
	return predicate.ReportPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ReportPermission {
	return predicate.ReportPermission(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReportPermission) predicate.ReportPermission {
	return predicate.ReportPermission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReportPermission) predicate.ReportPermission {
	return predicate.ReportPermission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReportPermission) predicate.ReportPermission {
	return predicate.ReportPermission(sql.NotPredicates(p))
}
