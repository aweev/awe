// Code generated by ent, DO NOT EDIT.

package reportpermission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reportpermission type in the database.
	Label = "report_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldCanView holds the string denoting the can_view field in the database.
	FieldCanView = "can_view"
	// FieldCanEdit holds the string denoting the can_edit field in the database.
	FieldCanEdit = "can_edit"
	// FieldCanDelete holds the string denoting the can_delete field in the database.
	FieldCanDelete = "can_delete"
	// FieldCanSchedule holds the string denoting the can_schedule field in the database.
	FieldCanSchedule = "can_schedule"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeReportDefinition holds the string denoting the report_definition edge name in mutations.
	EdgeReportDefinition = "report_definition"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the reportpermission in the database.
	Table = "report_permissions"
	// ReportDefinitionTable is the table that holds the report_definition relation/edge.
	ReportDefinitionTable = "report_permissions"
	// ReportDefinitionInverseTable is the table name for the ReportDefinition entity.
	// It exists in this package in order to avoid circular dependency with the "reportdefinition" package.
	ReportDefinitionInverseTable = "report_definitions"
	// ReportDefinitionColumn is the table column denoting the report_definition relation/edge.
	ReportDefinitionColumn = "report_definition_permissions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "report_permissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_report_permissions"
)

// Columns holds all SQL columns for reportpermission fields.
var Columns = []string{
	FieldID,
	FieldRoleID,
	FieldCanView,
	FieldCanEdit,
	FieldCanDelete,
	FieldCanSchedule,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "report_permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"report_definition_permissions",
	"user_report_permissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCanView holds the default value on creation for the "can_view" field.
	DefaultCanView bool
	// DefaultCanEdit holds the default value on creation for the "can_edit" field.
	DefaultCanEdit bool
	// DefaultCanDelete holds the default value on creation for the "can_delete" field.
	DefaultCanDelete bool
	// DefaultCanSchedule holds the default value on creation for the "can_schedule" field.
	DefaultCanSchedule bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ReportPermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByCanView orders the results by the can_view field.
func ByCanView(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanView, opts...).ToFunc()
}

// ByCanEdit orders the results by the can_edit field.
func ByCanEdit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanEdit, opts...).ToFunc()
}

// ByCanDelete orders the results by the can_delete field.
func ByCanDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanDelete, opts...).ToFunc()
}

// ByCanSchedule orders the results by the can_schedule field.
func ByCanSchedule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanSchedule, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByReportDefinitionField orders the results by report_definition field.
func ByReportDefinitionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportDefinitionStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newReportDefinitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportDefinitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReportDefinitionTable, ReportDefinitionColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
