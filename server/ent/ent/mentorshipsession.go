// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/agenda"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MentorshipSession is the model entity for the MentorshipSession schema.
type MentorshipSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScheduledAt holds the value of the "scheduled_at" field.
	ScheduledAt time.Time `json:"scheduled_at,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// ActionItems holds the value of the "action_items" field.
	ActionItems []string `json:"action_items,omitempty"`
	// MentorRating holds the value of the "mentor_rating" field.
	MentorRating int `json:"mentor_rating,omitempty"`
	// MenteeRating holds the value of the "mentee_rating" field.
	MenteeRating int `json:"mentee_rating,omitempty"`
	// MentorFeedback holds the value of the "mentor_feedback" field.
	MentorFeedback string `json:"mentor_feedback,omitempty"`
	// MenteeFeedback holds the value of the "mentee_feedback" field.
	MenteeFeedback string `json:"mentee_feedback,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MentorshipSessionQuery when eager-loading is set.
	Edges                       MentorshipSessionEdges `json:"edges"`
	mentorship_request_sessions *int
	selectValues                sql.SelectValues
}

// MentorshipSessionEdges holds the relations/edges for other nodes in the graph.
type MentorshipSessionEdges struct {
	// MentorshipRequest holds the value of the mentorship_request edge.
	MentorshipRequest *MentorshipRequest `json:"mentorship_request,omitempty"`
	// Agenda holds the value of the agenda edge.
	Agenda *Agenda `json:"agenda,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MentorshipRequestOrErr returns the MentorshipRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MentorshipSessionEdges) MentorshipRequestOrErr() (*MentorshipRequest, error) {
	if e.MentorshipRequest != nil {
		return e.MentorshipRequest, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: mentorshiprequest.Label}
	}
	return nil, &NotLoadedError{edge: "mentorship_request"}
}

// AgendaOrErr returns the Agenda value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MentorshipSessionEdges) AgendaOrErr() (*Agenda, error) {
	if e.Agenda != nil {
		return e.Agenda, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: agenda.Label}
	}
	return nil, &NotLoadedError{edge: "agenda"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MentorshipSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mentorshipsession.FieldActionItems:
			values[i] = new([]byte)
		case mentorshipsession.FieldID, mentorshipsession.FieldDuration, mentorshipsession.FieldMentorRating, mentorshipsession.FieldMenteeRating:
			values[i] = new(sql.NullInt64)
		case mentorshipsession.FieldFormat, mentorshipsession.FieldStatus, mentorshipsession.FieldNotes, mentorshipsession.FieldMentorFeedback, mentorshipsession.FieldMenteeFeedback:
			values[i] = new(sql.NullString)
		case mentorshipsession.FieldScheduledAt, mentorshipsession.FieldCreatedAt, mentorshipsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case mentorshipsession.ForeignKeys[0]: // mentorship_request_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MentorshipSession fields.
func (_m *MentorshipSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mentorshipsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case mentorshipsession.FieldScheduledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_at", values[i])
			} else if value.Valid {
				_m.ScheduledAt = value.Time
			}
		case mentorshipsession.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				_m.Duration = int(value.Int64)
			}
		case mentorshipsession.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				_m.Format = value.String
			}
		case mentorshipsession.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case mentorshipsession.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				_m.Notes = value.String
			}
		case mentorshipsession.FieldActionItems:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field action_items", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ActionItems); err != nil {
					return fmt.Errorf("unmarshal field action_items: %w", err)
				}
			}
		case mentorshipsession.FieldMentorRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mentor_rating", values[i])
			} else if value.Valid {
				_m.MentorRating = int(value.Int64)
			}
		case mentorshipsession.FieldMenteeRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mentee_rating", values[i])
			} else if value.Valid {
				_m.MenteeRating = int(value.Int64)
			}
		case mentorshipsession.FieldMentorFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mentor_feedback", values[i])
			} else if value.Valid {
				_m.MentorFeedback = value.String
			}
		case mentorshipsession.FieldMenteeFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mentee_feedback", values[i])
			} else if value.Valid {
				_m.MenteeFeedback = value.String
			}
		case mentorshipsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case mentorshipsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case mentorshipsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mentorship_request_sessions", value)
			} else if value.Valid {
				_m.mentorship_request_sessions = new(int)
				*_m.mentorship_request_sessions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MentorshipSession.
// This includes values selected through modifiers, order, etc.
func (_m *MentorshipSession) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryMentorshipRequest queries the "mentorship_request" edge of the MentorshipSession entity.
func (_m *MentorshipSession) QueryMentorshipRequest() *MentorshipRequestQuery {
	return NewMentorshipSessionClient(_m.config).QueryMentorshipRequest(_m)
}

// QueryAgenda queries the "agenda" edge of the MentorshipSession entity.
func (_m *MentorshipSession) QueryAgenda() *AgendaQuery {
	return NewMentorshipSessionClient(_m.config).QueryAgenda(_m)
}

// Update returns a builder for updating this MentorshipSession.
// Note that you need to call MentorshipSession.Unwrap() before calling this method if this MentorshipSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *MentorshipSession) Update() *MentorshipSessionUpdateOne {
	return NewMentorshipSessionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the MentorshipSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *MentorshipSession) Unwrap() *MentorshipSession {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: MentorshipSession is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *MentorshipSession) String() string {
	var builder strings.Builder
	builder.WriteString("MentorshipSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("scheduled_at=")
	builder.WriteString(_m.ScheduledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", _m.Duration))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(_m.Format)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(_m.Notes)
	builder.WriteString(", ")
	builder.WriteString("action_items=")
	builder.WriteString(fmt.Sprintf("%v", _m.ActionItems))
	builder.WriteString(", ")
	builder.WriteString("mentor_rating=")
	builder.WriteString(fmt.Sprintf("%v", _m.MentorRating))
	builder.WriteString(", ")
	builder.WriteString("mentee_rating=")
	builder.WriteString(fmt.Sprintf("%v", _m.MenteeRating))
	builder.WriteString(", ")
	builder.WriteString("mentor_feedback=")
	builder.WriteString(_m.MentorFeedback)
	builder.WriteString(", ")
	builder.WriteString("mentee_feedback=")
	builder.WriteString(_m.MenteeFeedback)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MentorshipSessions is a parsable slice of MentorshipSession.
type MentorshipSessions []*MentorshipSession
