// Code generated by ent, DO NOT EDIT.

package donation

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldCurrency, v))
}

// IsRecurring applies equality check predicate on the "is_recurring" field. It's identical to IsRecurringEQ.
func IsRecurring(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldIsRecurring, v))
}

// Frequency applies equality check predicate on the "frequency" field. It's identical to FrequencyEQ.
func Frequency(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldFrequency, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldStatus, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldProcessedAt, v))
}

// Anonymous applies equality check predicate on the "anonymous" field. It's identical to AnonymousEQ.
func Anonymous(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldAnonymous, v))
}

// PaymentGatewayRef applies equality check predicate on the "payment_gateway_ref" field. It's identical to PaymentGatewayRefEQ.
func PaymentGatewayRef(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentGatewayRef, v))
}

// DonorMessage applies equality check predicate on the "donor_message" field. It's identical to DonorMessageEQ.
func DonorMessage(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldDonorMessage, v))
}

// TaxReceiptSent applies equality check predicate on the "tax_receipt_sent" field. It's identical to TaxReceiptSentEQ.
func TaxReceiptSent(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldTaxReceiptSent, v))
}

// TaxReceiptSentAt applies equality check predicate on the "tax_receipt_sent_at" field. It's identical to TaxReceiptSentAtEQ.
func TaxReceiptSentAt(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldTaxReceiptSentAt, v))
}

// RecurringInterval applies equality check predicate on the "recurring_interval" field. It's identical to RecurringIntervalEQ.
func RecurringInterval(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldRecurringInterval, v))
}

// NextPaymentDate applies equality check predicate on the "next_payment_date" field. It's identical to NextPaymentDateEQ.
func NextPaymentDate(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldNextPaymentDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldCurrency, v))
}

// IsRecurringEQ applies the EQ predicate on the "is_recurring" field.
func IsRecurringEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldIsRecurring, v))
}

// IsRecurringNEQ applies the NEQ predicate on the "is_recurring" field.
func IsRecurringNEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldIsRecurring, v))
}

// FrequencyEQ applies the EQ predicate on the "frequency" field.
func FrequencyEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldFrequency, v))
}

// FrequencyNEQ applies the NEQ predicate on the "frequency" field.
func FrequencyNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldFrequency, v))
}

// FrequencyIn applies the In predicate on the "frequency" field.
func FrequencyIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldFrequency, vs...))
}

// FrequencyNotIn applies the NotIn predicate on the "frequency" field.
func FrequencyNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldFrequency, vs...))
}

// FrequencyGT applies the GT predicate on the "frequency" field.
func FrequencyGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldFrequency, v))
}

// FrequencyGTE applies the GTE predicate on the "frequency" field.
func FrequencyGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldFrequency, v))
}

// FrequencyLT applies the LT predicate on the "frequency" field.
func FrequencyLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldFrequency, v))
}

// FrequencyLTE applies the LTE predicate on the "frequency" field.
func FrequencyLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldFrequency, v))
}

// FrequencyContains applies the Contains predicate on the "frequency" field.
func FrequencyContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldFrequency, v))
}

// FrequencyHasPrefix applies the HasPrefix predicate on the "frequency" field.
func FrequencyHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldFrequency, v))
}

// FrequencyHasSuffix applies the HasSuffix predicate on the "frequency" field.
func FrequencyHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldFrequency, v))
}

// FrequencyEqualFold applies the EqualFold predicate on the "frequency" field.
func FrequencyEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldFrequency, v))
}

// FrequencyContainsFold applies the ContainsFold predicate on the "frequency" field.
func FrequencyContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldFrequency, v))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodIsNil applies the IsNil predicate on the "payment_method" field.
func PaymentMethodIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldPaymentMethod))
}

// PaymentMethodNotNil applies the NotNil predicate on the "payment_method" field.
func PaymentMethodNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldPaymentMethod))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDContains applies the Contains predicate on the "payment_id" field.
func PaymentIDContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldPaymentID, v))
}

// PaymentIDHasPrefix applies the HasPrefix predicate on the "payment_id" field.
func PaymentIDHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldPaymentID, v))
}

// PaymentIDHasSuffix applies the HasSuffix predicate on the "payment_id" field.
func PaymentIDHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldPaymentID, v))
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldPaymentID))
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldPaymentID))
}

// PaymentIDEqualFold applies the EqualFold predicate on the "payment_id" field.
func PaymentIDEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldPaymentID, v))
}

// PaymentIDContainsFold applies the ContainsFold predicate on the "payment_id" field.
func PaymentIDContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldPaymentID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldStatus, v))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldProcessedAt))
}

// AnonymousEQ applies the EQ predicate on the "anonymous" field.
func AnonymousEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldAnonymous, v))
}

// AnonymousNEQ applies the NEQ predicate on the "anonymous" field.
func AnonymousNEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldAnonymous, v))
}

// PaymentGatewayRefEQ applies the EQ predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefNEQ applies the NEQ predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefIn applies the In predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldPaymentGatewayRef, vs...))
}

// PaymentGatewayRefNotIn applies the NotIn predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldPaymentGatewayRef, vs...))
}

// PaymentGatewayRefGT applies the GT predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefGTE applies the GTE predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefLT applies the LT predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefLTE applies the LTE predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefContains applies the Contains predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefHasPrefix applies the HasPrefix predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefHasSuffix applies the HasSuffix predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefIsNil applies the IsNil predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldPaymentGatewayRef))
}

// PaymentGatewayRefNotNil applies the NotNil predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldPaymentGatewayRef))
}

// PaymentGatewayRefEqualFold applies the EqualFold predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldPaymentGatewayRef, v))
}

// PaymentGatewayRefContainsFold applies the ContainsFold predicate on the "payment_gateway_ref" field.
func PaymentGatewayRefContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldPaymentGatewayRef, v))
}

// DonorMessageEQ applies the EQ predicate on the "donor_message" field.
func DonorMessageEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldDonorMessage, v))
}

// DonorMessageNEQ applies the NEQ predicate on the "donor_message" field.
func DonorMessageNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldDonorMessage, v))
}

// DonorMessageIn applies the In predicate on the "donor_message" field.
func DonorMessageIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldDonorMessage, vs...))
}

// DonorMessageNotIn applies the NotIn predicate on the "donor_message" field.
func DonorMessageNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldDonorMessage, vs...))
}

// DonorMessageGT applies the GT predicate on the "donor_message" field.
func DonorMessageGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldDonorMessage, v))
}

// DonorMessageGTE applies the GTE predicate on the "donor_message" field.
func DonorMessageGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldDonorMessage, v))
}

// DonorMessageLT applies the LT predicate on the "donor_message" field.
func DonorMessageLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldDonorMessage, v))
}

// DonorMessageLTE applies the LTE predicate on the "donor_message" field.
func DonorMessageLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldDonorMessage, v))
}

// DonorMessageContains applies the Contains predicate on the "donor_message" field.
func DonorMessageContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldDonorMessage, v))
}

// DonorMessageHasPrefix applies the HasPrefix predicate on the "donor_message" field.
func DonorMessageHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldDonorMessage, v))
}

// DonorMessageHasSuffix applies the HasSuffix predicate on the "donor_message" field.
func DonorMessageHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldDonorMessage, v))
}

// DonorMessageIsNil applies the IsNil predicate on the "donor_message" field.
func DonorMessageIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldDonorMessage))
}

// DonorMessageNotNil applies the NotNil predicate on the "donor_message" field.
func DonorMessageNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldDonorMessage))
}

// DonorMessageEqualFold applies the EqualFold predicate on the "donor_message" field.
func DonorMessageEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldDonorMessage, v))
}

// DonorMessageContainsFold applies the ContainsFold predicate on the "donor_message" field.
func DonorMessageContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldDonorMessage, v))
}

// TaxReceiptSentEQ applies the EQ predicate on the "tax_receipt_sent" field.
func TaxReceiptSentEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldTaxReceiptSent, v))
}

// TaxReceiptSentNEQ applies the NEQ predicate on the "tax_receipt_sent" field.
func TaxReceiptSentNEQ(v bool) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldTaxReceiptSent, v))
}

// TaxReceiptSentAtEQ applies the EQ predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtNEQ applies the NEQ predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtNEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtIn applies the In predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldTaxReceiptSentAt, vs...))
}

// TaxReceiptSentAtNotIn applies the NotIn predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtNotIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldTaxReceiptSentAt, vs...))
}

// TaxReceiptSentAtGT applies the GT predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtGT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtGTE applies the GTE predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtGTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtLT applies the LT predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtLT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtLTE applies the LTE predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtLTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldTaxReceiptSentAt, v))
}

// TaxReceiptSentAtIsNil applies the IsNil predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldTaxReceiptSentAt))
}

// TaxReceiptSentAtNotNil applies the NotNil predicate on the "tax_receipt_sent_at" field.
func TaxReceiptSentAtNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldTaxReceiptSentAt))
}

// RecurringIntervalEQ applies the EQ predicate on the "recurring_interval" field.
func RecurringIntervalEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldRecurringInterval, v))
}

// RecurringIntervalNEQ applies the NEQ predicate on the "recurring_interval" field.
func RecurringIntervalNEQ(v string) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldRecurringInterval, v))
}

// RecurringIntervalIn applies the In predicate on the "recurring_interval" field.
func RecurringIntervalIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldRecurringInterval, vs...))
}

// RecurringIntervalNotIn applies the NotIn predicate on the "recurring_interval" field.
func RecurringIntervalNotIn(vs ...string) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldRecurringInterval, vs...))
}

// RecurringIntervalGT applies the GT predicate on the "recurring_interval" field.
func RecurringIntervalGT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldRecurringInterval, v))
}

// RecurringIntervalGTE applies the GTE predicate on the "recurring_interval" field.
func RecurringIntervalGTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldRecurringInterval, v))
}

// RecurringIntervalLT applies the LT predicate on the "recurring_interval" field.
func RecurringIntervalLT(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldRecurringInterval, v))
}

// RecurringIntervalLTE applies the LTE predicate on the "recurring_interval" field.
func RecurringIntervalLTE(v string) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldRecurringInterval, v))
}

// RecurringIntervalContains applies the Contains predicate on the "recurring_interval" field.
func RecurringIntervalContains(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContains(FieldRecurringInterval, v))
}

// RecurringIntervalHasPrefix applies the HasPrefix predicate on the "recurring_interval" field.
func RecurringIntervalHasPrefix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasPrefix(FieldRecurringInterval, v))
}

// RecurringIntervalHasSuffix applies the HasSuffix predicate on the "recurring_interval" field.
func RecurringIntervalHasSuffix(v string) predicate.Donation {
	return predicate.Donation(sql.FieldHasSuffix(FieldRecurringInterval, v))
}

// RecurringIntervalIsNil applies the IsNil predicate on the "recurring_interval" field.
func RecurringIntervalIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldRecurringInterval))
}

// RecurringIntervalNotNil applies the NotNil predicate on the "recurring_interval" field.
func RecurringIntervalNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldRecurringInterval))
}

// RecurringIntervalEqualFold applies the EqualFold predicate on the "recurring_interval" field.
func RecurringIntervalEqualFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldEqualFold(FieldRecurringInterval, v))
}

// RecurringIntervalContainsFold applies the ContainsFold predicate on the "recurring_interval" field.
func RecurringIntervalContainsFold(v string) predicate.Donation {
	return predicate.Donation(sql.FieldContainsFold(FieldRecurringInterval, v))
}

// NextPaymentDateEQ applies the EQ predicate on the "next_payment_date" field.
func NextPaymentDateEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldNextPaymentDate, v))
}

// NextPaymentDateNEQ applies the NEQ predicate on the "next_payment_date" field.
func NextPaymentDateNEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldNextPaymentDate, v))
}

// NextPaymentDateIn applies the In predicate on the "next_payment_date" field.
func NextPaymentDateIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldNextPaymentDate, vs...))
}

// NextPaymentDateNotIn applies the NotIn predicate on the "next_payment_date" field.
func NextPaymentDateNotIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldNextPaymentDate, vs...))
}

// NextPaymentDateGT applies the GT predicate on the "next_payment_date" field.
func NextPaymentDateGT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldNextPaymentDate, v))
}

// NextPaymentDateGTE applies the GTE predicate on the "next_payment_date" field.
func NextPaymentDateGTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldNextPaymentDate, v))
}

// NextPaymentDateLT applies the LT predicate on the "next_payment_date" field.
func NextPaymentDateLT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldNextPaymentDate, v))
}

// NextPaymentDateLTE applies the LTE predicate on the "next_payment_date" field.
func NextPaymentDateLTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldNextPaymentDate, v))
}

// NextPaymentDateIsNil applies the IsNil predicate on the "next_payment_date" field.
func NextPaymentDateIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldNextPaymentDate))
}

// NextPaymentDateNotNil applies the NotNil predicate on the "next_payment_date" field.
func NextPaymentDateNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldNextPaymentDate))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Donation {
	return predicate.Donation(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Donation {
	return predicate.Donation(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Donation {
	return predicate.Donation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDonor applies the HasEdge predicate on the "donor" edge.
func HasDonor() predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonorWith applies the HasEdge predicate on the "donor" edge with a given conditions (other predicates).
func HasDonorWith(preds ...predicate.User) predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := newDonorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCampaign applies the HasEdge predicate on the "campaign" edge.
func HasCampaign() predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCampaignWith applies the HasEdge predicate on the "campaign" edge with a given conditions (other predicates).
func HasCampaignWith(preds ...predicate.FundraisingCampaign) predicate.Donation {
	return predicate.Donation(func(s *sql.Selector) {
		step := newCampaignStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Donation) predicate.Donation {
	return predicate.Donation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Donation) predicate.Donation {
	return predicate.Donation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Donation) predicate.Donation {
	return predicate.Donation(sql.NotPredicates(p))
}
