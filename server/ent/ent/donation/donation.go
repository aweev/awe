// Code generated by ent, DO NOT EDIT.

package donation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the donation type in the database.
	Label = "donation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldIsRecurring holds the string denoting the is_recurring field in the database.
	FieldIsRecurring = "is_recurring"
	// FieldFrequency holds the string denoting the frequency field in the database.
	FieldFrequency = "frequency"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// FieldPaymentGatewayRef holds the string denoting the payment_gateway_ref field in the database.
	FieldPaymentGatewayRef = "payment_gateway_ref"
	// FieldDonorMessage holds the string denoting the donor_message field in the database.
	FieldDonorMessage = "donor_message"
	// FieldTaxReceiptSent holds the string denoting the tax_receipt_sent field in the database.
	FieldTaxReceiptSent = "tax_receipt_sent"
	// FieldTaxReceiptSentAt holds the string denoting the tax_receipt_sent_at field in the database.
	FieldTaxReceiptSentAt = "tax_receipt_sent_at"
	// FieldRecurringInterval holds the string denoting the recurring_interval field in the database.
	FieldRecurringInterval = "recurring_interval"
	// FieldNextPaymentDate holds the string denoting the next_payment_date field in the database.
	FieldNextPaymentDate = "next_payment_date"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDonor holds the string denoting the donor edge name in mutations.
	EdgeDonor = "donor"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeCampaign holds the string denoting the campaign edge name in mutations.
	EdgeCampaign = "campaign"
	// Table holds the table name of the donation in the database.
	Table = "donations"
	// DonorTable is the table that holds the donor relation/edge.
	DonorTable = "donations"
	// DonorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DonorInverseTable = "users"
	// DonorColumn is the table column denoting the donor relation/edge.
	DonorColumn = "user_donations"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "donations"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_donations"
	// CampaignTable is the table that holds the campaign relation/edge.
	CampaignTable = "donations"
	// CampaignInverseTable is the table name for the FundraisingCampaign entity.
	// It exists in this package in order to avoid circular dependency with the "fundraisingcampaign" package.
	CampaignInverseTable = "fundraising_campaigns"
	// CampaignColumn is the table column denoting the campaign relation/edge.
	CampaignColumn = "fundraising_campaign_donations"
)

// Columns holds all SQL columns for donation fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldCurrency,
	FieldIsRecurring,
	FieldFrequency,
	FieldPaymentMethod,
	FieldPaymentID,
	FieldStatus,
	FieldProcessedAt,
	FieldAnonymous,
	FieldPaymentGatewayRef,
	FieldDonorMessage,
	FieldTaxReceiptSent,
	FieldTaxReceiptSentAt,
	FieldRecurringInterval,
	FieldNextPaymentDate,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "donations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fundraising_campaign_donations",
	"program_donations",
	"user_donations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// DefaultIsRecurring holds the default value on creation for the "is_recurring" field.
	DefaultIsRecurring bool
	// DefaultFrequency holds the default value on creation for the "frequency" field.
	DefaultFrequency string
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
	// DefaultTaxReceiptSent holds the default value on creation for the "tax_receipt_sent" field.
	DefaultTaxReceiptSent bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Donation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByIsRecurring orders the results by the is_recurring field.
func ByIsRecurring(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRecurring, opts...).ToFunc()
}

// ByFrequency orders the results by the frequency field.
func ByFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrequency, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByAnonymous orders the results by the anonymous field.
func ByAnonymous(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnonymous, opts...).ToFunc()
}

// ByPaymentGatewayRef orders the results by the payment_gateway_ref field.
func ByPaymentGatewayRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentGatewayRef, opts...).ToFunc()
}

// ByDonorMessage orders the results by the donor_message field.
func ByDonorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDonorMessage, opts...).ToFunc()
}

// ByTaxReceiptSent orders the results by the tax_receipt_sent field.
func ByTaxReceiptSent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxReceiptSent, opts...).ToFunc()
}

// ByTaxReceiptSentAt orders the results by the tax_receipt_sent_at field.
func ByTaxReceiptSentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxReceiptSentAt, opts...).ToFunc()
}

// ByRecurringInterval orders the results by the recurring_interval field.
func ByRecurringInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecurringInterval, opts...).ToFunc()
}

// ByNextPaymentDate orders the results by the next_payment_date field.
func ByNextPaymentDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextPaymentDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDonorField orders the results by donor field.
func ByDonorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDonorStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByCampaignField orders the results by campaign field.
func ByCampaignField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCampaignStep(), sql.OrderByField(field, opts...))
	}
}
func newDonorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DonorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newCampaignStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CampaignInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CampaignTable, CampaignColumn),
	)
}
