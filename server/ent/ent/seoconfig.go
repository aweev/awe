// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/page"
	"awe/ent/ent/seoconfig"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SeoConfig is the model entity for the SeoConfig schema.
type SeoConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MetaTitle holds the value of the "meta_title" field.
	MetaTitle map[string]string `json:"meta_title,omitempty"`
	// MetaDescription holds the value of the "meta_description" field.
	MetaDescription map[string]string `json:"meta_description,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords map[string][]string `json:"keywords,omitempty"`
	// OgTitle holds the value of the "og_title" field.
	OgTitle map[string]string `json:"og_title,omitempty"`
	// OgDescription holds the value of the "og_description" field.
	OgDescription map[string]string `json:"og_description,omitempty"`
	// OgImageURL holds the value of the "og_image_url" field.
	OgImageURL string `json:"og_image_url,omitempty"`
	// OgType holds the value of the "og_type" field.
	OgType string `json:"og_type,omitempty"`
	// TwitterCard holds the value of the "twitter_card" field.
	TwitterCard string `json:"twitter_card,omitempty"`
	// TwitterTitle holds the value of the "twitter_title" field.
	TwitterTitle map[string]string `json:"twitter_title,omitempty"`
	// TwitterDescription holds the value of the "twitter_description" field.
	TwitterDescription map[string]string `json:"twitter_description,omitempty"`
	// TwitterImageURL holds the value of the "twitter_image_url" field.
	TwitterImageURL string `json:"twitter_image_url,omitempty"`
	// CanonicalURL holds the value of the "canonical_url" field.
	CanonicalURL string `json:"canonical_url,omitempty"`
	// Noindex holds the value of the "noindex" field.
	Noindex bool `json:"noindex,omitempty"`
	// Nofollow holds the value of the "nofollow" field.
	Nofollow bool `json:"nofollow,omitempty"`
	// StructuredData holds the value of the "structured_data" field.
	StructuredData map[string]interface{} `json:"structured_data,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeoConfigQuery when eager-loading is set.
	Edges        SeoConfigEdges `json:"edges"`
	page_seo     *int
	selectValues sql.SelectValues
}

// SeoConfigEdges holds the relations/edges for other nodes in the graph.
type SeoConfigEdges struct {
	// Page holds the value of the page edge.
	Page *Page `json:"page,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PageOrErr returns the Page value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeoConfigEdges) PageOrErr() (*Page, error) {
	if e.Page != nil {
		return e.Page, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: page.Label}
	}
	return nil, &NotLoadedError{edge: "page"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeoConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seoconfig.FieldMetaTitle, seoconfig.FieldMetaDescription, seoconfig.FieldKeywords, seoconfig.FieldOgTitle, seoconfig.FieldOgDescription, seoconfig.FieldTwitterTitle, seoconfig.FieldTwitterDescription, seoconfig.FieldStructuredData:
			values[i] = new([]byte)
		case seoconfig.FieldNoindex, seoconfig.FieldNofollow:
			values[i] = new(sql.NullBool)
		case seoconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case seoconfig.FieldOgImageURL, seoconfig.FieldOgType, seoconfig.FieldTwitterCard, seoconfig.FieldTwitterImageURL, seoconfig.FieldCanonicalURL:
			values[i] = new(sql.NullString)
		case seoconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case seoconfig.ForeignKeys[0]: // page_seo
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeoConfig fields.
func (_m *SeoConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seoconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case seoconfig.FieldMetaTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta_title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.MetaTitle); err != nil {
					return fmt.Errorf("unmarshal field meta_title: %w", err)
				}
			}
		case seoconfig.FieldMetaDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta_description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.MetaDescription); err != nil {
					return fmt.Errorf("unmarshal field meta_description: %w", err)
				}
			}
		case seoconfig.FieldKeywords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Keywords); err != nil {
					return fmt.Errorf("unmarshal field keywords: %w", err)
				}
			}
		case seoconfig.FieldOgTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field og_title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.OgTitle); err != nil {
					return fmt.Errorf("unmarshal field og_title: %w", err)
				}
			}
		case seoconfig.FieldOgDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field og_description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.OgDescription); err != nil {
					return fmt.Errorf("unmarshal field og_description: %w", err)
				}
			}
		case seoconfig.FieldOgImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_image_url", values[i])
			} else if value.Valid {
				_m.OgImageURL = value.String
			}
		case seoconfig.FieldOgType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field og_type", values[i])
			} else if value.Valid {
				_m.OgType = value.String
			}
		case seoconfig.FieldTwitterCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_card", values[i])
			} else if value.Valid {
				_m.TwitterCard = value.String
			}
		case seoconfig.FieldTwitterTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TwitterTitle); err != nil {
					return fmt.Errorf("unmarshal field twitter_title: %w", err)
				}
			}
		case seoconfig.FieldTwitterDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TwitterDescription); err != nil {
					return fmt.Errorf("unmarshal field twitter_description: %w", err)
				}
			}
		case seoconfig.FieldTwitterImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_image_url", values[i])
			} else if value.Valid {
				_m.TwitterImageURL = value.String
			}
		case seoconfig.FieldCanonicalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field canonical_url", values[i])
			} else if value.Valid {
				_m.CanonicalURL = value.String
			}
		case seoconfig.FieldNoindex:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field noindex", values[i])
			} else if value.Valid {
				_m.Noindex = value.Bool
			}
		case seoconfig.FieldNofollow:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field nofollow", values[i])
			} else if value.Valid {
				_m.Nofollow = value.Bool
			}
		case seoconfig.FieldStructuredData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field structured_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.StructuredData); err != nil {
					return fmt.Errorf("unmarshal field structured_data: %w", err)
				}
			}
		case seoconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case seoconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field page_seo", value)
			} else if value.Valid {
				_m.page_seo = new(int)
				*_m.page_seo = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeoConfig.
// This includes values selected through modifiers, order, etc.
func (_m *SeoConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPage queries the "page" edge of the SeoConfig entity.
func (_m *SeoConfig) QueryPage() *PageQuery {
	return NewSeoConfigClient(_m.config).QueryPage(_m)
}

// Update returns a builder for updating this SeoConfig.
// Note that you need to call SeoConfig.Unwrap() before calling this method if this SeoConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SeoConfig) Update() *SeoConfigUpdateOne {
	return NewSeoConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SeoConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SeoConfig) Unwrap() *SeoConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeoConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SeoConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SeoConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("meta_title=")
	builder.WriteString(fmt.Sprintf("%v", _m.MetaTitle))
	builder.WriteString(", ")
	builder.WriteString("meta_description=")
	builder.WriteString(fmt.Sprintf("%v", _m.MetaDescription))
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(fmt.Sprintf("%v", _m.Keywords))
	builder.WriteString(", ")
	builder.WriteString("og_title=")
	builder.WriteString(fmt.Sprintf("%v", _m.OgTitle))
	builder.WriteString(", ")
	builder.WriteString("og_description=")
	builder.WriteString(fmt.Sprintf("%v", _m.OgDescription))
	builder.WriteString(", ")
	builder.WriteString("og_image_url=")
	builder.WriteString(_m.OgImageURL)
	builder.WriteString(", ")
	builder.WriteString("og_type=")
	builder.WriteString(_m.OgType)
	builder.WriteString(", ")
	builder.WriteString("twitter_card=")
	builder.WriteString(_m.TwitterCard)
	builder.WriteString(", ")
	builder.WriteString("twitter_title=")
	builder.WriteString(fmt.Sprintf("%v", _m.TwitterTitle))
	builder.WriteString(", ")
	builder.WriteString("twitter_description=")
	builder.WriteString(fmt.Sprintf("%v", _m.TwitterDescription))
	builder.WriteString(", ")
	builder.WriteString("twitter_image_url=")
	builder.WriteString(_m.TwitterImageURL)
	builder.WriteString(", ")
	builder.WriteString("canonical_url=")
	builder.WriteString(_m.CanonicalURL)
	builder.WriteString(", ")
	builder.WriteString("noindex=")
	builder.WriteString(fmt.Sprintf("%v", _m.Noindex))
	builder.WriteString(", ")
	builder.WriteString("nofollow=")
	builder.WriteString(fmt.Sprintf("%v", _m.Nofollow))
	builder.WriteString(", ")
	builder.WriteString("structured_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.StructuredData))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SeoConfigs is a parsable slice of SeoConfig.
type SeoConfigs []*SeoConfig
