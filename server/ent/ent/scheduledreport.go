// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScheduledReport is the model entity for the ScheduledReport schema.
type ScheduledReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Frequency holds the value of the "frequency" field.
	Frequency string `json:"frequency,omitempty"`
	// DayOfWeek holds the value of the "day_of_week" field.
	DayOfWeek int `json:"day_of_week,omitempty"`
	// DayOfMonth holds the value of the "day_of_month" field.
	DayOfMonth int `json:"day_of_month,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// Recipients holds the value of the "recipients" field.
	Recipients []map[string]interface{} `json:"recipients,omitempty"`
	// Format holds the value of the "format" field.
	Format scheduledreport.Format `json:"format,omitempty"`
	// Parameters holds the value of the "parameters" field.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// LastRunAt holds the value of the "last_run_at" field.
	LastRunAt time.Time `json:"last_run_at,omitempty"`
	// NextRunAt holds the value of the "next_run_at" field.
	NextRunAt time.Time `json:"next_run_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledReportQuery when eager-loading is set.
	Edges                       ScheduledReportEdges `json:"edges"`
	report_definition_schedules *int
	user_scheduled_reports      *int
	selectValues                sql.SelectValues
}

// ScheduledReportEdges holds the relations/edges for other nodes in the graph.
type ScheduledReportEdges struct {
	// ReportDefinition holds the value of the report_definition edge.
	ReportDefinition *ReportDefinition `json:"report_definition,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReportDefinitionOrErr returns the ReportDefinition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledReportEdges) ReportDefinitionOrErr() (*ReportDefinition, error) {
	if e.ReportDefinition != nil {
		return e.ReportDefinition, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: reportdefinition.Label}
	}
	return nil, &NotLoadedError{edge: "report_definition"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledReportEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledreport.FieldRecipients, scheduledreport.FieldParameters:
			values[i] = new([]byte)
		case scheduledreport.FieldIsActive:
			values[i] = new(sql.NullBool)
		case scheduledreport.FieldID, scheduledreport.FieldDayOfWeek, scheduledreport.FieldDayOfMonth:
			values[i] = new(sql.NullInt64)
		case scheduledreport.FieldFrequency, scheduledreport.FieldTime, scheduledreport.FieldTimezone, scheduledreport.FieldFormat:
			values[i] = new(sql.NullString)
		case scheduledreport.FieldLastRunAt, scheduledreport.FieldNextRunAt, scheduledreport.FieldCreatedAt, scheduledreport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case scheduledreport.ForeignKeys[0]: // report_definition_schedules
			values[i] = new(sql.NullInt64)
		case scheduledreport.ForeignKeys[1]: // user_scheduled_reports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledReport fields.
func (_m *ScheduledReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case scheduledreport.FieldFrequency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field frequency", values[i])
			} else if value.Valid {
				_m.Frequency = value.String
			}
		case scheduledreport.FieldDayOfWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day_of_week", values[i])
			} else if value.Valid {
				_m.DayOfWeek = int(value.Int64)
			}
		case scheduledreport.FieldDayOfMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day_of_month", values[i])
			} else if value.Valid {
				_m.DayOfMonth = int(value.Int64)
			}
		case scheduledreport.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				_m.Time = value.String
			}
		case scheduledreport.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				_m.Timezone = value.String
			}
		case scheduledreport.FieldRecipients:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field recipients", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Recipients); err != nil {
					return fmt.Errorf("unmarshal field recipients: %w", err)
				}
			}
		case scheduledreport.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				_m.Format = scheduledreport.Format(value.String)
			}
		case scheduledreport.FieldParameters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Parameters); err != nil {
					return fmt.Errorf("unmarshal field parameters: %w", err)
				}
			}
		case scheduledreport.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case scheduledreport.FieldLastRunAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_at", values[i])
			} else if value.Valid {
				_m.LastRunAt = value.Time
			}
		case scheduledreport.FieldNextRunAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_run_at", values[i])
			} else if value.Valid {
				_m.NextRunAt = value.Time
			}
		case scheduledreport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case scheduledreport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case scheduledreport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field report_definition_schedules", value)
			} else if value.Valid {
				_m.report_definition_schedules = new(int)
				*_m.report_definition_schedules = int(value.Int64)
			}
		case scheduledreport.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_scheduled_reports", value)
			} else if value.Valid {
				_m.user_scheduled_reports = new(int)
				*_m.user_scheduled_reports = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledReport.
// This includes values selected through modifiers, order, etc.
func (_m *ScheduledReport) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryReportDefinition queries the "report_definition" edge of the ScheduledReport entity.
func (_m *ScheduledReport) QueryReportDefinition() *ReportDefinitionQuery {
	return NewScheduledReportClient(_m.config).QueryReportDefinition(_m)
}

// QueryCreator queries the "creator" edge of the ScheduledReport entity.
func (_m *ScheduledReport) QueryCreator() *UserQuery {
	return NewScheduledReportClient(_m.config).QueryCreator(_m)
}

// Update returns a builder for updating this ScheduledReport.
// Note that you need to call ScheduledReport.Unwrap() before calling this method if this ScheduledReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ScheduledReport) Update() *ScheduledReportUpdateOne {
	return NewScheduledReportClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ScheduledReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ScheduledReport) Unwrap() *ScheduledReport {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduledReport is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ScheduledReport) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("frequency=")
	builder.WriteString(_m.Frequency)
	builder.WriteString(", ")
	builder.WriteString("day_of_week=")
	builder.WriteString(fmt.Sprintf("%v", _m.DayOfWeek))
	builder.WriteString(", ")
	builder.WriteString("day_of_month=")
	builder.WriteString(fmt.Sprintf("%v", _m.DayOfMonth))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(_m.Time)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(_m.Timezone)
	builder.WriteString(", ")
	builder.WriteString("recipients=")
	builder.WriteString(fmt.Sprintf("%v", _m.Recipients))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", _m.Format))
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(fmt.Sprintf("%v", _m.Parameters))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("last_run_at=")
	builder.WriteString(_m.LastRunAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("next_run_at=")
	builder.WriteString(_m.NextRunAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledReports is a parsable slice of ScheduledReport.
type ScheduledReports []*ScheduledReport
