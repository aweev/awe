// Code generated by ent, DO NOT EDIT.

package eventregistration

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventregistration type in the database.
	Label = "event_registration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAttendanceStatus holds the string denoting the attendance_status field in the database.
	FieldAttendanceStatus = "attendance_status"
	// FieldRegistrationData holds the string denoting the registration_data field in the database.
	FieldRegistrationData = "registration_data"
	// FieldFeedback holds the string denoting the feedback field in the database.
	FieldFeedback = "feedback"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the eventregistration in the database.
	Table = "event_registrations"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "event_registrations"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_registrations"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "event_registrations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_event_registrations"
)

// Columns holds all SQL columns for eventregistration fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldAttendanceStatus,
	FieldRegistrationData,
	FieldFeedback,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_registrations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_registrations",
	"user_event_registrations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusCONFIRMED is the default value of the Status enum.
const DefaultStatus = StatusCONFIRMED

// Status values.
const (
	StatusCONFIRMED  Status = "CONFIRMED"
	StatusWAITLISTED Status = "WAITLISTED"
	StatusCANCELLED  Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusCONFIRMED, StatusWAITLISTED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("eventregistration: invalid enum value for status field: %q", s)
	}
}

// AttendanceStatus defines the type for the "attendance_status" enum field.
type AttendanceStatus string

// AttendanceStatusREGISTERED is the default value of the AttendanceStatus enum.
const DefaultAttendanceStatus = AttendanceStatusREGISTERED

// AttendanceStatus values.
const (
	AttendanceStatusREGISTERED AttendanceStatus = "REGISTERED"
	AttendanceStatusATTENDED   AttendanceStatus = "ATTENDED"
	AttendanceStatusNO_SHOW    AttendanceStatus = "NO_SHOW"
)

func (as AttendanceStatus) String() string {
	return string(as)
}

// AttendanceStatusValidator is a validator for the "attendance_status" field enum values. It is called by the builders before save.
func AttendanceStatusValidator(as AttendanceStatus) error {
	switch as {
	case AttendanceStatusREGISTERED, AttendanceStatusATTENDED, AttendanceStatusNO_SHOW:
		return nil
	default:
		return fmt.Errorf("eventregistration: invalid enum value for attendance_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the EventRegistration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAttendanceStatus orders the results by the attendance_status field.
func ByAttendanceStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendanceStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
