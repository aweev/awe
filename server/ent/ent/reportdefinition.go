// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReportDefinition is the model entity for the ReportDefinition schema.
type ReportDefinition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Type holds the value of the "type" field.
	Type reportdefinition.Type `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Query holds the value of the "query" field.
	Query map[string]interface{} `json:"query,omitempty"`
	// Parameters holds the value of the "parameters" field.
	Parameters []map[string]interface{} `json:"parameters,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportDefinitionQuery when eager-loading is set.
	Edges                ReportDefinitionEdges `json:"edges"`
	user_created_reports *int
	selectValues         sql.SelectValues
}

// ReportDefinitionEdges holds the relations/edges for other nodes in the graph.
type ReportDefinitionEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*ReportPermission `json:"permissions,omitempty"`
	// GeneratedReports holds the value of the generated_reports edge.
	GeneratedReports []*GeneratedReport `json:"generated_reports,omitempty"`
	// Schedules holds the value of the schedules edge.
	Schedules []*ScheduledReport `json:"schedules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportDefinitionEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e ReportDefinitionEdges) PermissionsOrErr() ([]*ReportPermission, error) {
	if e.loadedTypes[1] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// GeneratedReportsOrErr returns the GeneratedReports value or an error if the edge
// was not loaded in eager-loading.
func (e ReportDefinitionEdges) GeneratedReportsOrErr() ([]*GeneratedReport, error) {
	if e.loadedTypes[2] {
		return e.GeneratedReports, nil
	}
	return nil, &NotLoadedError{edge: "generated_reports"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e ReportDefinitionEdges) SchedulesOrErr() ([]*ScheduledReport, error) {
	if e.loadedTypes[3] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportDefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reportdefinition.FieldQuery, reportdefinition.FieldParameters:
			values[i] = new([]byte)
		case reportdefinition.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case reportdefinition.FieldID:
			values[i] = new(sql.NullInt64)
		case reportdefinition.FieldName, reportdefinition.FieldSlug, reportdefinition.FieldType, reportdefinition.FieldDescription:
			values[i] = new(sql.NullString)
		case reportdefinition.FieldCreatedAt, reportdefinition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reportdefinition.ForeignKeys[0]: // user_created_reports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportDefinition fields.
func (_m *ReportDefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reportdefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case reportdefinition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case reportdefinition.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case reportdefinition.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = reportdefinition.Type(value.String)
			}
		case reportdefinition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case reportdefinition.FieldQuery:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Query); err != nil {
					return fmt.Errorf("unmarshal field query: %w", err)
				}
			}
		case reportdefinition.FieldParameters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Parameters); err != nil {
					return fmt.Errorf("unmarshal field parameters: %w", err)
				}
			}
		case reportdefinition.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				_m.IsPublic = value.Bool
			}
		case reportdefinition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case reportdefinition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case reportdefinition.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_reports", value)
			} else if value.Valid {
				_m.user_created_reports = new(int)
				*_m.user_created_reports = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportDefinition.
// This includes values selected through modifiers, order, etc.
func (_m *ReportDefinition) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the ReportDefinition entity.
func (_m *ReportDefinition) QueryCreator() *UserQuery {
	return NewReportDefinitionClient(_m.config).QueryCreator(_m)
}

// QueryPermissions queries the "permissions" edge of the ReportDefinition entity.
func (_m *ReportDefinition) QueryPermissions() *ReportPermissionQuery {
	return NewReportDefinitionClient(_m.config).QueryPermissions(_m)
}

// QueryGeneratedReports queries the "generated_reports" edge of the ReportDefinition entity.
func (_m *ReportDefinition) QueryGeneratedReports() *GeneratedReportQuery {
	return NewReportDefinitionClient(_m.config).QueryGeneratedReports(_m)
}

// QuerySchedules queries the "schedules" edge of the ReportDefinition entity.
func (_m *ReportDefinition) QuerySchedules() *ScheduledReportQuery {
	return NewReportDefinitionClient(_m.config).QuerySchedules(_m)
}

// Update returns a builder for updating this ReportDefinition.
// Note that you need to call ReportDefinition.Unwrap() before calling this method if this ReportDefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ReportDefinition) Update() *ReportDefinitionUpdateOne {
	return NewReportDefinitionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ReportDefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ReportDefinition) Unwrap() *ReportDefinition {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportDefinition is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ReportDefinition) String() string {
	var builder strings.Builder
	builder.WriteString("ReportDefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(fmt.Sprintf("%v", _m.Query))
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(fmt.Sprintf("%v", _m.Parameters))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ReportDefinitions is a parsable slice of ReportDefinition.
type ReportDefinitions []*ReportDefinition
