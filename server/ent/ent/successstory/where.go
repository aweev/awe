// Code generated by ent, DO NOT EDIT.

package successstory

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldID, id))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldSlug, v))
}

// Quote applies equality check predicate on the "quote" field. It's identical to QuoteEQ.
func Quote(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldQuote, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldPublishedAt, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldImageURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldUpdatedAt, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContainsFold(FieldSlug, v))
}

// QuoteEQ applies the EQ predicate on the "quote" field.
func QuoteEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldQuote, v))
}

// QuoteNEQ applies the NEQ predicate on the "quote" field.
func QuoteNEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldQuote, v))
}

// QuoteIn applies the In predicate on the "quote" field.
func QuoteIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldQuote, vs...))
}

// QuoteNotIn applies the NotIn predicate on the "quote" field.
func QuoteNotIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldQuote, vs...))
}

// QuoteGT applies the GT predicate on the "quote" field.
func QuoteGT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldQuote, v))
}

// QuoteGTE applies the GTE predicate on the "quote" field.
func QuoteGTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldQuote, v))
}

// QuoteLT applies the LT predicate on the "quote" field.
func QuoteLT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldQuote, v))
}

// QuoteLTE applies the LTE predicate on the "quote" field.
func QuoteLTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldQuote, v))
}

// QuoteContains applies the Contains predicate on the "quote" field.
func QuoteContains(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContains(FieldQuote, v))
}

// QuoteHasPrefix applies the HasPrefix predicate on the "quote" field.
func QuoteHasPrefix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasPrefix(FieldQuote, v))
}

// QuoteHasSuffix applies the HasSuffix predicate on the "quote" field.
func QuoteHasSuffix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasSuffix(FieldQuote, v))
}

// QuoteEqualFold applies the EqualFold predicate on the "quote" field.
func QuoteEqualFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEqualFold(FieldQuote, v))
}

// QuoteContainsFold applies the ContainsFold predicate on the "quote" field.
func QuoteContainsFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContainsFold(FieldQuote, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldStatus, vs...))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotNull(FieldPublishedAt))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldContainsFold(FieldImageURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SuccessStory {
	return predicate.SuccessStory(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestimonials applies the HasEdge predicate on the "testimonials" edge.
func HasTestimonials() predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestimonialsTable, TestimonialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestimonialsWith applies the HasEdge predicate on the "testimonials" edge with a given conditions (other predicates).
func HasTestimonialsWith(preds ...predicate.TestimonialItem) predicate.SuccessStory {
	return predicate.SuccessStory(func(s *sql.Selector) {
		step := newTestimonialsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SuccessStory) predicate.SuccessStory {
	return predicate.SuccessStory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SuccessStory) predicate.SuccessStory {
	return predicate.SuccessStory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SuccessStory) predicate.SuccessStory {
	return predicate.SuccessStory(sql.NotPredicates(p))
}
