// Code generated by ent, DO NOT EDIT.

package sitevisit

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLTE(FieldID, id))
}

// RequestedDate applies equality check predicate on the "requested_date" field. It's identical to RequestedDateEQ.
func RequestedDate(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldRequestedDate, v))
}

// ScheduledDate applies equality check predicate on the "scheduled_date" field. It's identical to ScheduledDateEQ.
func ScheduledDate(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldScheduledDate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldStatus, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldNotes, v))
}

// RequestedDateEQ applies the EQ predicate on the "requested_date" field.
func RequestedDateEQ(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldRequestedDate, v))
}

// RequestedDateNEQ applies the NEQ predicate on the "requested_date" field.
func RequestedDateNEQ(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNEQ(FieldRequestedDate, v))
}

// RequestedDateIn applies the In predicate on the "requested_date" field.
func RequestedDateIn(vs ...time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIn(FieldRequestedDate, vs...))
}

// RequestedDateNotIn applies the NotIn predicate on the "requested_date" field.
func RequestedDateNotIn(vs ...time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotIn(FieldRequestedDate, vs...))
}

// RequestedDateGT applies the GT predicate on the "requested_date" field.
func RequestedDateGT(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGT(FieldRequestedDate, v))
}

// RequestedDateGTE applies the GTE predicate on the "requested_date" field.
func RequestedDateGTE(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGTE(FieldRequestedDate, v))
}

// RequestedDateLT applies the LT predicate on the "requested_date" field.
func RequestedDateLT(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLT(FieldRequestedDate, v))
}

// RequestedDateLTE applies the LTE predicate on the "requested_date" field.
func RequestedDateLTE(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLTE(FieldRequestedDate, v))
}

// ScheduledDateEQ applies the EQ predicate on the "scheduled_date" field.
func ScheduledDateEQ(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldScheduledDate, v))
}

// ScheduledDateNEQ applies the NEQ predicate on the "scheduled_date" field.
func ScheduledDateNEQ(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNEQ(FieldScheduledDate, v))
}

// ScheduledDateIn applies the In predicate on the "scheduled_date" field.
func ScheduledDateIn(vs ...time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIn(FieldScheduledDate, vs...))
}

// ScheduledDateNotIn applies the NotIn predicate on the "scheduled_date" field.
func ScheduledDateNotIn(vs ...time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotIn(FieldScheduledDate, vs...))
}

// ScheduledDateGT applies the GT predicate on the "scheduled_date" field.
func ScheduledDateGT(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGT(FieldScheduledDate, v))
}

// ScheduledDateGTE applies the GTE predicate on the "scheduled_date" field.
func ScheduledDateGTE(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGTE(FieldScheduledDate, v))
}

// ScheduledDateLT applies the LT predicate on the "scheduled_date" field.
func ScheduledDateLT(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLT(FieldScheduledDate, v))
}

// ScheduledDateLTE applies the LTE predicate on the "scheduled_date" field.
func ScheduledDateLTE(v time.Time) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLTE(FieldScheduledDate, v))
}

// ScheduledDateIsNil applies the IsNil predicate on the "scheduled_date" field.
func ScheduledDateIsNil() predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIsNull(FieldScheduledDate))
}

// ScheduledDateNotNil applies the NotNil predicate on the "scheduled_date" field.
func ScheduledDateNotNil() predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotNull(FieldScheduledDate))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldContainsFold(FieldStatus, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.SiteVisit {
	return predicate.SiteVisit(sql.FieldContainsFold(FieldNotes, v))
}

// HasDonor applies the HasEdge predicate on the "donor" edge.
func HasDonor() predicate.SiteVisit {
	return predicate.SiteVisit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonorWith applies the HasEdge predicate on the "donor" edge with a given conditions (other predicates).
func HasDonorWith(preds ...predicate.User) predicate.SiteVisit {
	return predicate.SiteVisit(func(s *sql.Selector) {
		step := newDonorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.SiteVisit {
	return predicate.SiteVisit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.SiteVisit {
	return predicate.SiteVisit(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SiteVisit) predicate.SiteVisit {
	return predicate.SiteVisit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SiteVisit) predicate.SiteVisit {
	return predicate.SiteVisit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SiteVisit) predicate.SiteVisit {
	return predicate.SiteVisit(sql.NotPredicates(p))
}
