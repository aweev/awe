// Code generated by ent, DO NOT EDIT.

package sitevisit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sitevisit type in the database.
	Label = "site_visit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestedDate holds the string denoting the requested_date field in the database.
	FieldRequestedDate = "requested_date"
	// FieldScheduledDate holds the string denoting the scheduled_date field in the database.
	FieldScheduledDate = "scheduled_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeDonor holds the string denoting the donor edge name in mutations.
	EdgeDonor = "donor"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// Table holds the table name of the sitevisit in the database.
	Table = "site_visits"
	// DonorTable is the table that holds the donor relation/edge.
	DonorTable = "site_visits"
	// DonorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DonorInverseTable = "users"
	// DonorColumn is the table column denoting the donor relation/edge.
	DonorColumn = "user_site_visits"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "site_visits"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_site_visits"
)

// Columns holds all SQL columns for sitevisit fields.
var Columns = []string{
	FieldID,
	FieldRequestedDate,
	FieldScheduledDate,
	FieldStatus,
	FieldNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "site_visits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"program_site_visits",
	"user_site_visits",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the SiteVisit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestedDate orders the results by the requested_date field.
func ByRequestedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestedDate, opts...).ToFunc()
}

// ByScheduledDate orders the results by the scheduled_date field.
func ByScheduledDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByDonorField orders the results by donor field.
func ByDonorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDonorStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}
func newDonorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DonorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DonorTable, DonorColumn),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
