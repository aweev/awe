// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCategoryUpdate is the builder for updating DocumentCategory entities.
type DocumentCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentCategoryMutation
}

// Where appends a list predicates to the DocumentCategoryUpdate builder.
func (_u *DocumentCategoryUpdate) Where(ps ...predicate.DocumentCategory) *DocumentCategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *DocumentCategoryUpdate) SetName(v map[string]string) *DocumentCategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *DocumentCategoryUpdate) SetDescription(v map[string]string) *DocumentCategoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DocumentCategoryUpdate) ClearDescription() *DocumentCategoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *DocumentCategoryUpdate) SetSlug(v string) *DocumentCategoryUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *DocumentCategoryUpdate) SetNillableSlug(v *string) *DocumentCategoryUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *DocumentCategoryUpdate) SetDisplayOrder(v int) *DocumentCategoryUpdate {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *DocumentCategoryUpdate) SetNillableDisplayOrder(v *int) *DocumentCategoryUpdate {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *DocumentCategoryUpdate) AddDisplayOrder(v int) *DocumentCategoryUpdate {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *DocumentCategoryUpdate) SetIsActive(v bool) *DocumentCategoryUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *DocumentCategoryUpdate) SetNillableIsActive(v *bool) *DocumentCategoryUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DocumentCategoryUpdate) SetUpdatedAt(v time.Time) *DocumentCategoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddChildIDs adds the "children" edge to the DocumentCategory entity by IDs.
func (_u *DocumentCategoryUpdate) AddChildIDs(ids ...int) *DocumentCategoryUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the DocumentCategory entity.
func (_u *DocumentCategoryUpdate) AddChildren(v ...*DocumentCategory) *DocumentCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the DocumentCategory entity by ID.
func (_u *DocumentCategoryUpdate) SetParentID(id int) *DocumentCategoryUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_u *DocumentCategoryUpdate) SetNillableParentID(id *int) *DocumentCategoryUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the DocumentCategory entity.
func (_u *DocumentCategoryUpdate) SetParent(v *DocumentCategory) *DocumentCategoryUpdate {
	return _u.SetParentID(v.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (_u *DocumentCategoryUpdate) AddDocumentIDs(ids ...int) *DocumentCategoryUpdate {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the Document entity.
func (_u *DocumentCategoryUpdate) AddDocuments(v ...*Document) *DocumentCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// Mutation returns the DocumentCategoryMutation object of the builder.
func (_u *DocumentCategoryUpdate) Mutation() *DocumentCategoryMutation {
	return _u.mutation
}

// ClearChildren clears all "children" edges to the DocumentCategory entity.
func (_u *DocumentCategoryUpdate) ClearChildren() *DocumentCategoryUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to DocumentCategory entities by IDs.
func (_u *DocumentCategoryUpdate) RemoveChildIDs(ids ...int) *DocumentCategoryUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to DocumentCategory entities.
func (_u *DocumentCategoryUpdate) RemoveChildren(v ...*DocumentCategory) *DocumentCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the DocumentCategory entity.
func (_u *DocumentCategoryUpdate) ClearParent() *DocumentCategoryUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (_u *DocumentCategoryUpdate) ClearDocuments() *DocumentCategoryUpdate {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (_u *DocumentCategoryUpdate) RemoveDocumentIDs(ids ...int) *DocumentCategoryUpdate {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to Document entities.
func (_u *DocumentCategoryUpdate) RemoveDocuments(v ...*Document) *DocumentCategoryUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DocumentCategoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DocumentCategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentCategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DocumentCategoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := documentcategory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DocumentCategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(documentcategory.Table, documentcategory.Columns, sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(documentcategory.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(documentcategory.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(documentcategory.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(documentcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(documentcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(documentcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(documentcategory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(documentcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DocumentCategoryUpdateOne is the builder for updating a single DocumentCategory entity.
type DocumentCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentCategoryMutation
}

// SetName sets the "name" field.
func (_u *DocumentCategoryUpdateOne) SetName(v map[string]string) *DocumentCategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *DocumentCategoryUpdateOne) SetDescription(v map[string]string) *DocumentCategoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DocumentCategoryUpdateOne) ClearDescription() *DocumentCategoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetSlug sets the "slug" field.
func (_u *DocumentCategoryUpdateOne) SetSlug(v string) *DocumentCategoryUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *DocumentCategoryUpdateOne) SetNillableSlug(v *string) *DocumentCategoryUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *DocumentCategoryUpdateOne) SetDisplayOrder(v int) *DocumentCategoryUpdateOne {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *DocumentCategoryUpdateOne) SetNillableDisplayOrder(v *int) *DocumentCategoryUpdateOne {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *DocumentCategoryUpdateOne) AddDisplayOrder(v int) *DocumentCategoryUpdateOne {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *DocumentCategoryUpdateOne) SetIsActive(v bool) *DocumentCategoryUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *DocumentCategoryUpdateOne) SetNillableIsActive(v *bool) *DocumentCategoryUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DocumentCategoryUpdateOne) SetUpdatedAt(v time.Time) *DocumentCategoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddChildIDs adds the "children" edge to the DocumentCategory entity by IDs.
func (_u *DocumentCategoryUpdateOne) AddChildIDs(ids ...int) *DocumentCategoryUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the DocumentCategory entity.
func (_u *DocumentCategoryUpdateOne) AddChildren(v ...*DocumentCategory) *DocumentCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the DocumentCategory entity by ID.
func (_u *DocumentCategoryUpdateOne) SetParentID(id int) *DocumentCategoryUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the DocumentCategory entity by ID if the given value is not nil.
func (_u *DocumentCategoryUpdateOne) SetNillableParentID(id *int) *DocumentCategoryUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the DocumentCategory entity.
func (_u *DocumentCategoryUpdateOne) SetParent(v *DocumentCategory) *DocumentCategoryUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (_u *DocumentCategoryUpdateOne) AddDocumentIDs(ids ...int) *DocumentCategoryUpdateOne {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the Document entity.
func (_u *DocumentCategoryUpdateOne) AddDocuments(v ...*Document) *DocumentCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// Mutation returns the DocumentCategoryMutation object of the builder.
func (_u *DocumentCategoryUpdateOne) Mutation() *DocumentCategoryMutation {
	return _u.mutation
}

// ClearChildren clears all "children" edges to the DocumentCategory entity.
func (_u *DocumentCategoryUpdateOne) ClearChildren() *DocumentCategoryUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to DocumentCategory entities by IDs.
func (_u *DocumentCategoryUpdateOne) RemoveChildIDs(ids ...int) *DocumentCategoryUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to DocumentCategory entities.
func (_u *DocumentCategoryUpdateOne) RemoveChildren(v ...*DocumentCategory) *DocumentCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the DocumentCategory entity.
func (_u *DocumentCategoryUpdateOne) ClearParent() *DocumentCategoryUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (_u *DocumentCategoryUpdateOne) ClearDocuments() *DocumentCategoryUpdateOne {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (_u *DocumentCategoryUpdateOne) RemoveDocumentIDs(ids ...int) *DocumentCategoryUpdateOne {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to Document entities.
func (_u *DocumentCategoryUpdateOne) RemoveDocuments(v ...*Document) *DocumentCategoryUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// Where appends a list predicates to the DocumentCategoryUpdate builder.
func (_u *DocumentCategoryUpdateOne) Where(ps ...predicate.DocumentCategory) *DocumentCategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DocumentCategoryUpdateOne) Select(field string, fields ...string) *DocumentCategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DocumentCategory entity.
func (_u *DocumentCategoryUpdateOne) Save(ctx context.Context) (*DocumentCategory, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentCategoryUpdateOne) SaveX(ctx context.Context) *DocumentCategory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DocumentCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DocumentCategoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := documentcategory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DocumentCategoryUpdateOne) sqlSave(ctx context.Context) (_node *DocumentCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(documentcategory.Table, documentcategory.Columns, sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DocumentCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentcategory.FieldID)
		for _, f := range fields {
			if !documentcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != documentcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(documentcategory.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(documentcategory.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(documentcategory.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(documentcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(documentcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(documentcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(documentcategory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(documentcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DocumentCategory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
