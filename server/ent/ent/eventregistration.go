// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventRegistration is the model entity for the EventRegistration schema.
type EventRegistration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status eventregistration.Status `json:"status,omitempty"`
	// AttendanceStatus holds the value of the "attendance_status" field.
	AttendanceStatus eventregistration.AttendanceStatus `json:"attendance_status,omitempty"`
	// RegistrationData holds the value of the "registration_data" field.
	RegistrationData map[string]interface{} `json:"registration_data,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback map[string]interface{} `json:"feedback,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventRegistrationQuery when eager-loading is set.
	Edges                    EventRegistrationEdges `json:"edges"`
	event_registrations      *int
	user_event_registrations *int
	selectValues             sql.SelectValues
}

// EventRegistrationEdges holds the relations/edges for other nodes in the graph.
type EventRegistrationEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventRegistrationEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventRegistrationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventRegistration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventregistration.FieldRegistrationData, eventregistration.FieldFeedback:
			values[i] = new([]byte)
		case eventregistration.FieldID:
			values[i] = new(sql.NullInt64)
		case eventregistration.FieldStatus, eventregistration.FieldAttendanceStatus:
			values[i] = new(sql.NullString)
		case eventregistration.FieldCreatedAt, eventregistration.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case eventregistration.ForeignKeys[0]: // event_registrations
			values[i] = new(sql.NullInt64)
		case eventregistration.ForeignKeys[1]: // user_event_registrations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventRegistration fields.
func (_m *EventRegistration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventregistration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case eventregistration.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = eventregistration.Status(value.String)
			}
		case eventregistration.FieldAttendanceStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attendance_status", values[i])
			} else if value.Valid {
				_m.AttendanceStatus = eventregistration.AttendanceStatus(value.String)
			}
		case eventregistration.FieldRegistrationData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field registration_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.RegistrationData); err != nil {
					return fmt.Errorf("unmarshal field registration_data: %w", err)
				}
			}
		case eventregistration.FieldFeedback:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Feedback); err != nil {
					return fmt.Errorf("unmarshal field feedback: %w", err)
				}
			}
		case eventregistration.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case eventregistration.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case eventregistration.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_registrations", value)
			} else if value.Valid {
				_m.event_registrations = new(int)
				*_m.event_registrations = int(value.Int64)
			}
		case eventregistration.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_event_registrations", value)
			} else if value.Valid {
				_m.user_event_registrations = new(int)
				*_m.user_event_registrations = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventRegistration.
// This includes values selected through modifiers, order, etc.
func (_m *EventRegistration) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventRegistration entity.
func (_m *EventRegistration) QueryEvent() *EventQuery {
	return NewEventRegistrationClient(_m.config).QueryEvent(_m)
}

// QueryUser queries the "user" edge of the EventRegistration entity.
func (_m *EventRegistration) QueryUser() *UserQuery {
	return NewEventRegistrationClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this EventRegistration.
// Note that you need to call EventRegistration.Unwrap() before calling this method if this EventRegistration
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *EventRegistration) Update() *EventRegistrationUpdateOne {
	return NewEventRegistrationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the EventRegistration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *EventRegistration) Unwrap() *EventRegistration {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventRegistration is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *EventRegistration) String() string {
	var builder strings.Builder
	builder.WriteString("EventRegistration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("attendance_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.AttendanceStatus))
	builder.WriteString(", ")
	builder.WriteString("registration_data=")
	builder.WriteString(fmt.Sprintf("%v", _m.RegistrationData))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(fmt.Sprintf("%v", _m.Feedback))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventRegistrations is a parsable slice of EventRegistration.
type EventRegistrations []*EventRegistration
