// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/address"
	"awe/ent/ent/user"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/userskill"
	"awe/ent/ent/volunteerassignment"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserProfileCreate is the builder for creating a UserProfile entity.
type UserProfileCreate struct {
	config
	mutation *UserProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirstName sets the "first_name" field.
func (_c *UserProfileCreate) SetFirstName(v string) *UserProfileCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableFirstName(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetFirstName(*v)
	}
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *UserProfileCreate) SetLastName(v string) *UserProfileCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableLastName(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetLastName(*v)
	}
	return _c
}

// SetAvatarURL sets the "avatar_url" field.
func (_c *UserProfileCreate) SetAvatarURL(v string) *UserProfileCreate {
	_c.mutation.SetAvatarURL(v)
	return _c
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableAvatarURL(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetAvatarURL(*v)
	}
	return _c
}

// SetBio sets the "bio" field.
func (_c *UserProfileCreate) SetBio(v string) *UserProfileCreate {
	_c.mutation.SetBio(v)
	return _c
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableBio(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetBio(*v)
	}
	return _c
}

// SetPhone sets the "phone" field.
func (_c *UserProfileCreate) SetPhone(v string) *UserProfileCreate {
	_c.mutation.SetPhone(v)
	return _c
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillablePhone(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetPhone(*v)
	}
	return _c
}

// SetJobTitle sets the "job_title" field.
func (_c *UserProfileCreate) SetJobTitle(v string) *UserProfileCreate {
	_c.mutation.SetJobTitle(v)
	return _c
}

// SetNillableJobTitle sets the "job_title" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableJobTitle(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetJobTitle(*v)
	}
	return _c
}

// SetCompany sets the "company" field.
func (_c *UserProfileCreate) SetCompany(v string) *UserProfileCreate {
	_c.mutation.SetCompany(v)
	return _c
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableCompany(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetCompany(*v)
	}
	return _c
}

// SetLinkedin sets the "linkedin" field.
func (_c *UserProfileCreate) SetLinkedin(v string) *UserProfileCreate {
	_c.mutation.SetLinkedin(v)
	return _c
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableLinkedin(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetLinkedin(*v)
	}
	return _c
}

// SetTwitter sets the "twitter" field.
func (_c *UserProfileCreate) SetTwitter(v string) *UserProfileCreate {
	_c.mutation.SetTwitter(v)
	return _c
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableTwitter(v *string) *UserProfileCreate {
	if v != nil {
		_c.SetTwitter(*v)
	}
	return _c
}

// SetInterests sets the "interests" field.
func (_c *UserProfileCreate) SetInterests(v []string) *UserProfileCreate {
	_c.mutation.SetInterests(v)
	return _c
}

// SetCompletedPct sets the "completed_pct" field.
func (_c *UserProfileCreate) SetCompletedPct(v int) *UserProfileCreate {
	_c.mutation.SetCompletedPct(v)
	return _c
}

// SetNillableCompletedPct sets the "completed_pct" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableCompletedPct(v *int) *UserProfileCreate {
	if v != nil {
		_c.SetCompletedPct(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserProfileCreate) SetCreatedAt(v time.Time) *UserProfileCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableCreatedAt(v *time.Time) *UserProfileCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserProfileCreate) SetUpdatedAt(v time.Time) *UserProfileCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserProfileCreate) SetNillableUpdatedAt(v *time.Time) *UserProfileCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserProfileCreate) SetUserID(id int) *UserProfileCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserProfileCreate) SetUser(v *User) *UserProfileCreate {
	return _c.SetUserID(v.ID)
}

// AddAssignmentIDs adds the "assignments" edge to the VolunteerAssignment entity by IDs.
func (_c *UserProfileCreate) AddAssignmentIDs(ids ...int) *UserProfileCreate {
	_c.mutation.AddAssignmentIDs(ids...)
	return _c
}

// AddAssignments adds the "assignments" edges to the VolunteerAssignment entity.
func (_c *UserProfileCreate) AddAssignments(v ...*VolunteerAssignment) *UserProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssignmentIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the UserSkill entity by IDs.
func (_c *UserProfileCreate) AddSkillIDs(ids ...int) *UserProfileCreate {
	_c.mutation.AddSkillIDs(ids...)
	return _c
}

// AddSkills adds the "skills" edges to the UserSkill entity.
func (_c *UserProfileCreate) AddSkills(v ...*UserSkill) *UserProfileCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSkillIDs(ids...)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (_c *UserProfileCreate) SetAddressID(id int) *UserProfileCreate {
	_c.mutation.SetAddressID(id)
	return _c
}

// SetAddress sets the "address" edge to the Address entity.
func (_c *UserProfileCreate) SetAddress(v *Address) *UserProfileCreate {
	return _c.SetAddressID(v.ID)
}

// Mutation returns the UserProfileMutation object of the builder.
func (_c *UserProfileCreate) Mutation() *UserProfileMutation {
	return _c.mutation
}

// Save creates the UserProfile in the database.
func (_c *UserProfileCreate) Save(ctx context.Context) (*UserProfile, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserProfileCreate) SaveX(ctx context.Context) *UserProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserProfileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserProfileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserProfileCreate) defaults() {
	if _, ok := _c.mutation.CompletedPct(); !ok {
		v := userprofile.DefaultCompletedPct
		_c.mutation.SetCompletedPct(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := userprofile.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := userprofile.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserProfileCreate) check() error {
	if v, ok := _c.mutation.Bio(); ok {
		if err := userprofile.BioValidator(v); err != nil {
			return &ValidationError{Name: "bio", err: fmt.Errorf(`ent: validator failed for field "UserProfile.bio": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Interests(); !ok {
		return &ValidationError{Name: "interests", err: errors.New(`ent: missing required field "UserProfile.interests"`)}
	}
	if _, ok := _c.mutation.CompletedPct(); !ok {
		return &ValidationError{Name: "completed_pct", err: errors.New(`ent: missing required field "UserProfile.completed_pct"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserProfile.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserProfile.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserProfile.user"`)}
	}
	if len(_c.mutation.AddressIDs()) == 0 {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required edge "UserProfile.address"`)}
	}
	return nil
}

func (_c *UserProfileCreate) sqlSave(ctx context.Context) (*UserProfile, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserProfileCreate) createSpec() (*UserProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &UserProfile{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(userprofile.Table, sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(userprofile.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(userprofile.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.AvatarURL(); ok {
		_spec.SetField(userprofile.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := _c.mutation.Bio(); ok {
		_spec.SetField(userprofile.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := _c.mutation.Phone(); ok {
		_spec.SetField(userprofile.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := _c.mutation.JobTitle(); ok {
		_spec.SetField(userprofile.FieldJobTitle, field.TypeString, value)
		_node.JobTitle = value
	}
	if value, ok := _c.mutation.Company(); ok {
		_spec.SetField(userprofile.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := _c.mutation.Linkedin(); ok {
		_spec.SetField(userprofile.FieldLinkedin, field.TypeString, value)
		_node.Linkedin = value
	}
	if value, ok := _c.mutation.Twitter(); ok {
		_spec.SetField(userprofile.FieldTwitter, field.TypeString, value)
		_node.Twitter = value
	}
	if value, ok := _c.mutation.Interests(); ok {
		_spec.SetField(userprofile.FieldInterests, field.TypeJSON, value)
		_node.Interests = value
	}
	if value, ok := _c.mutation.CompletedPct(); ok {
		_spec.SetField(userprofile.FieldCompletedPct, field.TypeInt, value)
		_node.CompletedPct = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(userprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(userprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profile = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profile_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProfile.Create().
//		SetFirstName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProfileUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
func (_c *UserProfileCreate) OnConflict(opts ...sql.ConflictOption) *UserProfileUpsertOne {
	_c.conflict = opts
	return &UserProfileUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserProfileCreate) OnConflictColumns(columns ...string) *UserProfileUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserProfileUpsertOne{
		create: _c,
	}
}

type (
	// UserProfileUpsertOne is the builder for "upsert"-ing
	//  one UserProfile node.
	UserProfileUpsertOne struct {
		create *UserProfileCreate
	}

	// UserProfileUpsert is the "OnConflict" setter.
	UserProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirstName sets the "first_name" field.
func (u *UserProfileUpsert) SetFirstName(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateFirstName() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserProfileUpsert) ClearFirstName() *UserProfileUpsert {
	u.SetNull(userprofile.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *UserProfileUpsert) SetLastName(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateLastName() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserProfileUpsert) ClearLastName() *UserProfileUpsert {
	u.SetNull(userprofile.FieldLastName)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserProfileUpsert) SetAvatarURL(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateAvatarURL() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldAvatarURL)
	return u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserProfileUpsert) ClearAvatarURL() *UserProfileUpsert {
	u.SetNull(userprofile.FieldAvatarURL)
	return u
}

// SetBio sets the "bio" field.
func (u *UserProfileUpsert) SetBio(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldBio, v)
	return u
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateBio() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldBio)
	return u
}

// ClearBio clears the value of the "bio" field.
func (u *UserProfileUpsert) ClearBio() *UserProfileUpsert {
	u.SetNull(userprofile.FieldBio)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserProfileUpsert) SetPhone(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdatePhone() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *UserProfileUpsert) ClearPhone() *UserProfileUpsert {
	u.SetNull(userprofile.FieldPhone)
	return u
}

// SetJobTitle sets the "job_title" field.
func (u *UserProfileUpsert) SetJobTitle(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldJobTitle, v)
	return u
}

// UpdateJobTitle sets the "job_title" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateJobTitle() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldJobTitle)
	return u
}

// ClearJobTitle clears the value of the "job_title" field.
func (u *UserProfileUpsert) ClearJobTitle() *UserProfileUpsert {
	u.SetNull(userprofile.FieldJobTitle)
	return u
}

// SetCompany sets the "company" field.
func (u *UserProfileUpsert) SetCompany(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateCompany() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *UserProfileUpsert) ClearCompany() *UserProfileUpsert {
	u.SetNull(userprofile.FieldCompany)
	return u
}

// SetLinkedin sets the "linkedin" field.
func (u *UserProfileUpsert) SetLinkedin(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldLinkedin, v)
	return u
}

// UpdateLinkedin sets the "linkedin" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateLinkedin() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldLinkedin)
	return u
}

// ClearLinkedin clears the value of the "linkedin" field.
func (u *UserProfileUpsert) ClearLinkedin() *UserProfileUpsert {
	u.SetNull(userprofile.FieldLinkedin)
	return u
}

// SetTwitter sets the "twitter" field.
func (u *UserProfileUpsert) SetTwitter(v string) *UserProfileUpsert {
	u.Set(userprofile.FieldTwitter, v)
	return u
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateTwitter() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldTwitter)
	return u
}

// ClearTwitter clears the value of the "twitter" field.
func (u *UserProfileUpsert) ClearTwitter() *UserProfileUpsert {
	u.SetNull(userprofile.FieldTwitter)
	return u
}

// SetInterests sets the "interests" field.
func (u *UserProfileUpsert) SetInterests(v []string) *UserProfileUpsert {
	u.Set(userprofile.FieldInterests, v)
	return u
}

// UpdateInterests sets the "interests" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateInterests() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldInterests)
	return u
}

// SetCompletedPct sets the "completed_pct" field.
func (u *UserProfileUpsert) SetCompletedPct(v int) *UserProfileUpsert {
	u.Set(userprofile.FieldCompletedPct, v)
	return u
}

// UpdateCompletedPct sets the "completed_pct" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateCompletedPct() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldCompletedPct)
	return u
}

// AddCompletedPct adds v to the "completed_pct" field.
func (u *UserProfileUpsert) AddCompletedPct(v int) *UserProfileUpsert {
	u.Add(userprofile.FieldCompletedPct, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProfileUpsert) SetUpdatedAt(v time.Time) *UserProfileUpsert {
	u.Set(userprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProfileUpsert) UpdateUpdatedAt() *UserProfileUpsert {
	u.SetExcluded(userprofile.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserProfileUpsertOne) UpdateNewValues() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userprofile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserProfileUpsertOne) Ignore() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProfileUpsertOne) DoNothing() *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProfileCreate.OnConflict
// documentation for more info.
func (u *UserProfileUpsertOne) Update(set func(*UserProfileUpsert)) *UserProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserProfileUpsertOne) SetFirstName(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateFirstName() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserProfileUpsertOne) ClearFirstName() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserProfileUpsertOne) SetLastName(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateLastName() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserProfileUpsertOne) ClearLastName() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearLastName()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserProfileUpsertOne) SetAvatarURL(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateAvatarURL() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserProfileUpsertOne) ClearAvatarURL() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearAvatarURL()
	})
}

// SetBio sets the "bio" field.
func (u *UserProfileUpsertOne) SetBio(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateBio() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserProfileUpsertOne) ClearBio() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearBio()
	})
}

// SetPhone sets the "phone" field.
func (u *UserProfileUpsertOne) SetPhone(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdatePhone() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserProfileUpsertOne) ClearPhone() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearPhone()
	})
}

// SetJobTitle sets the "job_title" field.
func (u *UserProfileUpsertOne) SetJobTitle(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetJobTitle(v)
	})
}

// UpdateJobTitle sets the "job_title" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateJobTitle() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateJobTitle()
	})
}

// ClearJobTitle clears the value of the "job_title" field.
func (u *UserProfileUpsertOne) ClearJobTitle() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearJobTitle()
	})
}

// SetCompany sets the "company" field.
func (u *UserProfileUpsertOne) SetCompany(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateCompany() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *UserProfileUpsertOne) ClearCompany() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearCompany()
	})
}

// SetLinkedin sets the "linkedin" field.
func (u *UserProfileUpsertOne) SetLinkedin(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLinkedin(v)
	})
}

// UpdateLinkedin sets the "linkedin" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateLinkedin() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLinkedin()
	})
}

// ClearLinkedin clears the value of the "linkedin" field.
func (u *UserProfileUpsertOne) ClearLinkedin() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearLinkedin()
	})
}

// SetTwitter sets the "twitter" field.
func (u *UserProfileUpsertOne) SetTwitter(v string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetTwitter(v)
	})
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateTwitter() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateTwitter()
	})
}

// ClearTwitter clears the value of the "twitter" field.
func (u *UserProfileUpsertOne) ClearTwitter() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearTwitter()
	})
}

// SetInterests sets the "interests" field.
func (u *UserProfileUpsertOne) SetInterests(v []string) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetInterests(v)
	})
}

// UpdateInterests sets the "interests" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateInterests() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateInterests()
	})
}

// SetCompletedPct sets the "completed_pct" field.
func (u *UserProfileUpsertOne) SetCompletedPct(v int) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetCompletedPct(v)
	})
}

// AddCompletedPct adds v to the "completed_pct" field.
func (u *UserProfileUpsertOne) AddCompletedPct(v int) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.AddCompletedPct(v)
	})
}

// UpdateCompletedPct sets the "completed_pct" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateCompletedPct() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateCompletedPct()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProfileUpsertOne) SetUpdatedAt(v time.Time) *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProfileUpsertOne) UpdateUpdatedAt() *UserProfileUpsertOne {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserProfileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserProfileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserProfileCreateBulk is the builder for creating many UserProfile entities in bulk.
type UserProfileCreateBulk struct {
	config
	err      error
	builders []*UserProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the UserProfile entities in the database.
func (_c *UserProfileCreateBulk) Save(ctx context.Context) ([]*UserProfile, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserProfile, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserProfileCreateBulk) SaveX(ctx context.Context) []*UserProfile {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserProfileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserProfileUpsert) {
//			SetFirstName(v+v).
//		}).
//		Exec(ctx)
func (_c *UserProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserProfileUpsertBulk {
	_c.conflict = opts
	return &UserProfileUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserProfileCreateBulk) OnConflictColumns(columns ...string) *UserProfileUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserProfileUpsertBulk{
		create: _c,
	}
}

// UserProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of UserProfile nodes.
type UserProfileUpsertBulk struct {
	create *UserProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserProfileUpsertBulk) UpdateNewValues() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userprofile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserProfileUpsertBulk) Ignore() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserProfileUpsertBulk) DoNothing() *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserProfileCreateBulk.OnConflict
// documentation for more info.
func (u *UserProfileUpsertBulk) Update(set func(*UserProfileUpsert)) *UserProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstName sets the "first_name" field.
func (u *UserProfileUpsertBulk) SetFirstName(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateFirstName() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *UserProfileUpsertBulk) ClearFirstName() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *UserProfileUpsertBulk) SetLastName(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateLastName() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *UserProfileUpsertBulk) ClearLastName() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearLastName()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserProfileUpsertBulk) SetAvatarURL(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateAvatarURL() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserProfileUpsertBulk) ClearAvatarURL() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearAvatarURL()
	})
}

// SetBio sets the "bio" field.
func (u *UserProfileUpsertBulk) SetBio(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetBio(v)
	})
}

// UpdateBio sets the "bio" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateBio() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateBio()
	})
}

// ClearBio clears the value of the "bio" field.
func (u *UserProfileUpsertBulk) ClearBio() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearBio()
	})
}

// SetPhone sets the "phone" field.
func (u *UserProfileUpsertBulk) SetPhone(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdatePhone() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserProfileUpsertBulk) ClearPhone() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearPhone()
	})
}

// SetJobTitle sets the "job_title" field.
func (u *UserProfileUpsertBulk) SetJobTitle(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetJobTitle(v)
	})
}

// UpdateJobTitle sets the "job_title" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateJobTitle() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateJobTitle()
	})
}

// ClearJobTitle clears the value of the "job_title" field.
func (u *UserProfileUpsertBulk) ClearJobTitle() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearJobTitle()
	})
}

// SetCompany sets the "company" field.
func (u *UserProfileUpsertBulk) SetCompany(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateCompany() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *UserProfileUpsertBulk) ClearCompany() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearCompany()
	})
}

// SetLinkedin sets the "linkedin" field.
func (u *UserProfileUpsertBulk) SetLinkedin(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetLinkedin(v)
	})
}

// UpdateLinkedin sets the "linkedin" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateLinkedin() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateLinkedin()
	})
}

// ClearLinkedin clears the value of the "linkedin" field.
func (u *UserProfileUpsertBulk) ClearLinkedin() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearLinkedin()
	})
}

// SetTwitter sets the "twitter" field.
func (u *UserProfileUpsertBulk) SetTwitter(v string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetTwitter(v)
	})
}

// UpdateTwitter sets the "twitter" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateTwitter() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateTwitter()
	})
}

// ClearTwitter clears the value of the "twitter" field.
func (u *UserProfileUpsertBulk) ClearTwitter() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.ClearTwitter()
	})
}

// SetInterests sets the "interests" field.
func (u *UserProfileUpsertBulk) SetInterests(v []string) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetInterests(v)
	})
}

// UpdateInterests sets the "interests" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateInterests() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateInterests()
	})
}

// SetCompletedPct sets the "completed_pct" field.
func (u *UserProfileUpsertBulk) SetCompletedPct(v int) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetCompletedPct(v)
	})
}

// AddCompletedPct adds v to the "completed_pct" field.
func (u *UserProfileUpsertBulk) AddCompletedPct(v int) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.AddCompletedPct(v)
	})
}

// UpdateCompletedPct sets the "completed_pct" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateCompletedPct() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateCompletedPct()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserProfileUpsertBulk) SetUpdatedAt(v time.Time) *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserProfileUpsertBulk) UpdateUpdatedAt() *UserProfileUpsertBulk {
	return u.Update(func(s *UserProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
