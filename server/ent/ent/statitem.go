// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockstats"
	"awe/ent/ent/statitem"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StatItem is the model entity for the StatItem schema.
type StatItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Label holds the value of the "label" field.
	Label map[string]string `json:"label,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// IconName holds the value of the "icon_name" field.
	IconName string `json:"icon_name,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatItemQuery when eager-loading is set.
	Edges             StatItemEdges `json:"edges"`
	block_stats_stats *int
	selectValues      sql.SelectValues
}

// StatItemEdges holds the relations/edges for other nodes in the graph.
type StatItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockStats `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatItemEdges) BlockOrErr() (*BlockStats, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockstats.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statitem.FieldLabel, statitem.FieldDescription:
			values[i] = new([]byte)
		case statitem.FieldID, statitem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case statitem.FieldValue, statitem.FieldIconName, statitem.FieldColor:
			values[i] = new(sql.NullString)
		case statitem.ForeignKeys[0]: // block_stats_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatItem fields.
func (_m *StatItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case statitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case statitem.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.String
			}
		case statitem.FieldLabel:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Label); err != nil {
					return fmt.Errorf("unmarshal field label: %w", err)
				}
			}
		case statitem.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case statitem.FieldIconName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_name", values[i])
			} else if value.Valid {
				_m.IconName = value.String
			}
		case statitem.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case statitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_stats_stats", value)
			} else if value.Valid {
				_m.block_stats_stats = new(int)
				*_m.block_stats_stats = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the StatItem.
// This includes values selected through modifiers, order, etc.
func (_m *StatItem) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the StatItem entity.
func (_m *StatItem) QueryBlock() *BlockStatsQuery {
	return NewStatItemClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this StatItem.
// Note that you need to call StatItem.Unwrap() before calling this method if this StatItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *StatItem) Update() *StatItemUpdateOne {
	return NewStatItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the StatItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *StatItem) Unwrap() *StatItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *StatItem) String() string {
	var builder strings.Builder
	builder.WriteString("StatItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(_m.Value)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(fmt.Sprintf("%v", _m.Label))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("icon_name=")
	builder.WriteString(_m.IconName)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteByte(')')
	return builder.String()
}

// StatItems is a parsable slice of StatItem.
type StatItems []*StatItem
