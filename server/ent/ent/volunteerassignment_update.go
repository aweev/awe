// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VolunteerAssignmentUpdate is the builder for updating VolunteerAssignment entities.
type VolunteerAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *VolunteerAssignmentMutation
}

// Where appends a list predicates to the VolunteerAssignmentUpdate builder.
func (_u *VolunteerAssignmentUpdate) Where(ps ...predicate.VolunteerAssignment) *VolunteerAssignmentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *VolunteerAssignmentUpdate) SetStatus(v string) *VolunteerAssignmentUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableStatus(v *string) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *VolunteerAssignmentUpdate) SetStartDate(v time.Time) *VolunteerAssignmentUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableStartDate(v *time.Time) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *VolunteerAssignmentUpdate) SetEndDate(v time.Time) *VolunteerAssignmentUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableEndDate(v *time.Time) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *VolunteerAssignmentUpdate) ClearEndDate() *VolunteerAssignmentUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetHoursCompleted sets the "hours_completed" field.
func (_u *VolunteerAssignmentUpdate) SetHoursCompleted(v int) *VolunteerAssignmentUpdate {
	_u.mutation.ResetHoursCompleted()
	_u.mutation.SetHoursCompleted(v)
	return _u
}

// SetNillableHoursCompleted sets the "hours_completed" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableHoursCompleted(v *int) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetHoursCompleted(*v)
	}
	return _u
}

// AddHoursCompleted adds value to the "hours_completed" field.
func (_u *VolunteerAssignmentUpdate) AddHoursCompleted(v int) *VolunteerAssignmentUpdate {
	_u.mutation.AddHoursCompleted(v)
	return _u
}

// SetHoursCommitted sets the "hours_committed" field.
func (_u *VolunteerAssignmentUpdate) SetHoursCommitted(v int) *VolunteerAssignmentUpdate {
	_u.mutation.ResetHoursCommitted()
	_u.mutation.SetHoursCommitted(v)
	return _u
}

// SetNillableHoursCommitted sets the "hours_committed" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableHoursCommitted(v *int) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetHoursCommitted(*v)
	}
	return _u
}

// AddHoursCommitted adds value to the "hours_committed" field.
func (_u *VolunteerAssignmentUpdate) AddHoursCommitted(v int) *VolunteerAssignmentUpdate {
	_u.mutation.AddHoursCommitted(v)
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *VolunteerAssignmentUpdate) SetFeedback(v string) *VolunteerAssignmentUpdate {
	_u.mutation.SetFeedback(v)
	return _u
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableFeedback(v *string) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetFeedback(*v)
	}
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *VolunteerAssignmentUpdate) ClearFeedback() *VolunteerAssignmentUpdate {
	_u.mutation.ClearFeedback()
	return _u
}

// SetRating sets the "rating" field.
func (_u *VolunteerAssignmentUpdate) SetRating(v int) *VolunteerAssignmentUpdate {
	_u.mutation.ResetRating()
	_u.mutation.SetRating(v)
	return _u
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableRating(v *int) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetRating(*v)
	}
	return _u
}

// AddRating adds value to the "rating" field.
func (_u *VolunteerAssignmentUpdate) AddRating(v int) *VolunteerAssignmentUpdate {
	_u.mutation.AddRating(v)
	return _u
}

// ClearRating clears the value of the "rating" field.
func (_u *VolunteerAssignmentUpdate) ClearRating() *VolunteerAssignmentUpdate {
	_u.mutation.ClearRating()
	return _u
}

// SetCompletionNotes sets the "completion_notes" field.
func (_u *VolunteerAssignmentUpdate) SetCompletionNotes(v string) *VolunteerAssignmentUpdate {
	_u.mutation.SetCompletionNotes(v)
	return _u
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdate) SetNillableCompletionNotes(v *string) *VolunteerAssignmentUpdate {
	if v != nil {
		_u.SetCompletionNotes(*v)
	}
	return _u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (_u *VolunteerAssignmentUpdate) ClearCompletionNotes() *VolunteerAssignmentUpdate {
	_u.mutation.ClearCompletionNotes()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerAssignmentUpdate) SetUpdatedAt(v time.Time) *VolunteerAssignmentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOpportunityID sets the "opportunity" edge to the VolunteerOpportunity entity by ID.
func (_u *VolunteerAssignmentUpdate) SetOpportunityID(id int) *VolunteerAssignmentUpdate {
	_u.mutation.SetOpportunityID(id)
	return _u
}

// SetOpportunity sets the "opportunity" edge to the VolunteerOpportunity entity.
func (_u *VolunteerAssignmentUpdate) SetOpportunity(v *VolunteerOpportunity) *VolunteerAssignmentUpdate {
	return _u.SetOpportunityID(v.ID)
}

// SetVolunteerID sets the "volunteer" edge to the UserProfile entity by ID.
func (_u *VolunteerAssignmentUpdate) SetVolunteerID(id int) *VolunteerAssignmentUpdate {
	_u.mutation.SetVolunteerID(id)
	return _u
}

// SetVolunteer sets the "volunteer" edge to the UserProfile entity.
func (_u *VolunteerAssignmentUpdate) SetVolunteer(v *UserProfile) *VolunteerAssignmentUpdate {
	return _u.SetVolunteerID(v.ID)
}

// Mutation returns the VolunteerAssignmentMutation object of the builder.
func (_u *VolunteerAssignmentUpdate) Mutation() *VolunteerAssignmentMutation {
	return _u.mutation
}

// ClearOpportunity clears the "opportunity" edge to the VolunteerOpportunity entity.
func (_u *VolunteerAssignmentUpdate) ClearOpportunity() *VolunteerAssignmentUpdate {
	_u.mutation.ClearOpportunity()
	return _u
}

// ClearVolunteer clears the "volunteer" edge to the UserProfile entity.
func (_u *VolunteerAssignmentUpdate) ClearVolunteer() *VolunteerAssignmentUpdate {
	_u.mutation.ClearVolunteer()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VolunteerAssignmentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VolunteerAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerAssignmentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerAssignmentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteerassignment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerAssignmentUpdate) check() error {
	if v, ok := _u.mutation.Rating(); ok {
		if err := volunteerassignment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "VolunteerAssignment.rating": %w`, err)}
		}
	}
	if _u.mutation.OpportunityCleared() && len(_u.mutation.OpportunityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerAssignment.opportunity"`)
	}
	if _u.mutation.VolunteerCleared() && len(_u.mutation.VolunteerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerAssignment.volunteer"`)
	}
	return nil
}

func (_u *VolunteerAssignmentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteerassignment.Table, volunteerassignment.Columns, sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(volunteerassignment.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(volunteerassignment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(volunteerassignment.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(volunteerassignment.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.HoursCompleted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoursCompleted(); ok {
		_spec.AddField(volunteerassignment.FieldHoursCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.HoursCommitted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCommitted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoursCommitted(); ok {
		_spec.AddField(volunteerassignment.FieldHoursCommitted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(volunteerassignment.FieldFeedback, field.TypeString, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(volunteerassignment.FieldFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.Rating(); ok {
		_spec.SetField(volunteerassignment.FieldRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRating(); ok {
		_spec.AddField(volunteerassignment.FieldRating, field.TypeInt, value)
	}
	if _u.mutation.RatingCleared() {
		_spec.ClearField(volunteerassignment.FieldRating, field.TypeInt)
	}
	if value, ok := _u.mutation.CompletionNotes(); ok {
		_spec.SetField(volunteerassignment.FieldCompletionNotes, field.TypeString, value)
	}
	if _u.mutation.CompletionNotesCleared() {
		_spec.ClearField(volunteerassignment.FieldCompletionNotes, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerassignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OpportunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OpportunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteerassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VolunteerAssignmentUpdateOne is the builder for updating a single VolunteerAssignment entity.
type VolunteerAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VolunteerAssignmentMutation
}

// SetStatus sets the "status" field.
func (_u *VolunteerAssignmentUpdateOne) SetStatus(v string) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableStatus(v *string) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *VolunteerAssignmentUpdateOne) SetStartDate(v time.Time) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableStartDate(v *time.Time) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *VolunteerAssignmentUpdateOne) SetEndDate(v time.Time) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableEndDate(v *time.Time) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *VolunteerAssignmentUpdateOne) ClearEndDate() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetHoursCompleted sets the "hours_completed" field.
func (_u *VolunteerAssignmentUpdateOne) SetHoursCompleted(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.ResetHoursCompleted()
	_u.mutation.SetHoursCompleted(v)
	return _u
}

// SetNillableHoursCompleted sets the "hours_completed" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableHoursCompleted(v *int) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetHoursCompleted(*v)
	}
	return _u
}

// AddHoursCompleted adds value to the "hours_completed" field.
func (_u *VolunteerAssignmentUpdateOne) AddHoursCompleted(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.AddHoursCompleted(v)
	return _u
}

// SetHoursCommitted sets the "hours_committed" field.
func (_u *VolunteerAssignmentUpdateOne) SetHoursCommitted(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.ResetHoursCommitted()
	_u.mutation.SetHoursCommitted(v)
	return _u
}

// SetNillableHoursCommitted sets the "hours_committed" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableHoursCommitted(v *int) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetHoursCommitted(*v)
	}
	return _u
}

// AddHoursCommitted adds value to the "hours_committed" field.
func (_u *VolunteerAssignmentUpdateOne) AddHoursCommitted(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.AddHoursCommitted(v)
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *VolunteerAssignmentUpdateOne) SetFeedback(v string) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetFeedback(v)
	return _u
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableFeedback(v *string) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetFeedback(*v)
	}
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *VolunteerAssignmentUpdateOne) ClearFeedback() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearFeedback()
	return _u
}

// SetRating sets the "rating" field.
func (_u *VolunteerAssignmentUpdateOne) SetRating(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.ResetRating()
	_u.mutation.SetRating(v)
	return _u
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableRating(v *int) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetRating(*v)
	}
	return _u
}

// AddRating adds value to the "rating" field.
func (_u *VolunteerAssignmentUpdateOne) AddRating(v int) *VolunteerAssignmentUpdateOne {
	_u.mutation.AddRating(v)
	return _u
}

// ClearRating clears the value of the "rating" field.
func (_u *VolunteerAssignmentUpdateOne) ClearRating() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearRating()
	return _u
}

// SetCompletionNotes sets the "completion_notes" field.
func (_u *VolunteerAssignmentUpdateOne) SetCompletionNotes(v string) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetCompletionNotes(v)
	return _u
}

// SetNillableCompletionNotes sets the "completion_notes" field if the given value is not nil.
func (_u *VolunteerAssignmentUpdateOne) SetNillableCompletionNotes(v *string) *VolunteerAssignmentUpdateOne {
	if v != nil {
		_u.SetCompletionNotes(*v)
	}
	return _u
}

// ClearCompletionNotes clears the value of the "completion_notes" field.
func (_u *VolunteerAssignmentUpdateOne) ClearCompletionNotes() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearCompletionNotes()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VolunteerAssignmentUpdateOne) SetUpdatedAt(v time.Time) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetOpportunityID sets the "opportunity" edge to the VolunteerOpportunity entity by ID.
func (_u *VolunteerAssignmentUpdateOne) SetOpportunityID(id int) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetOpportunityID(id)
	return _u
}

// SetOpportunity sets the "opportunity" edge to the VolunteerOpportunity entity.
func (_u *VolunteerAssignmentUpdateOne) SetOpportunity(v *VolunteerOpportunity) *VolunteerAssignmentUpdateOne {
	return _u.SetOpportunityID(v.ID)
}

// SetVolunteerID sets the "volunteer" edge to the UserProfile entity by ID.
func (_u *VolunteerAssignmentUpdateOne) SetVolunteerID(id int) *VolunteerAssignmentUpdateOne {
	_u.mutation.SetVolunteerID(id)
	return _u
}

// SetVolunteer sets the "volunteer" edge to the UserProfile entity.
func (_u *VolunteerAssignmentUpdateOne) SetVolunteer(v *UserProfile) *VolunteerAssignmentUpdateOne {
	return _u.SetVolunteerID(v.ID)
}

// Mutation returns the VolunteerAssignmentMutation object of the builder.
func (_u *VolunteerAssignmentUpdateOne) Mutation() *VolunteerAssignmentMutation {
	return _u.mutation
}

// ClearOpportunity clears the "opportunity" edge to the VolunteerOpportunity entity.
func (_u *VolunteerAssignmentUpdateOne) ClearOpportunity() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearOpportunity()
	return _u
}

// ClearVolunteer clears the "volunteer" edge to the UserProfile entity.
func (_u *VolunteerAssignmentUpdateOne) ClearVolunteer() *VolunteerAssignmentUpdateOne {
	_u.mutation.ClearVolunteer()
	return _u
}

// Where appends a list predicates to the VolunteerAssignmentUpdate builder.
func (_u *VolunteerAssignmentUpdateOne) Where(ps ...predicate.VolunteerAssignment) *VolunteerAssignmentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VolunteerAssignmentUpdateOne) Select(field string, fields ...string) *VolunteerAssignmentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated VolunteerAssignment entity.
func (_u *VolunteerAssignmentUpdateOne) Save(ctx context.Context) (*VolunteerAssignment, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VolunteerAssignmentUpdateOne) SaveX(ctx context.Context) *VolunteerAssignment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VolunteerAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VolunteerAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VolunteerAssignmentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := volunteerassignment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VolunteerAssignmentUpdateOne) check() error {
	if v, ok := _u.mutation.Rating(); ok {
		if err := volunteerassignment.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "VolunteerAssignment.rating": %w`, err)}
		}
	}
	if _u.mutation.OpportunityCleared() && len(_u.mutation.OpportunityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerAssignment.opportunity"`)
	}
	if _u.mutation.VolunteerCleared() && len(_u.mutation.VolunteerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VolunteerAssignment.volunteer"`)
	}
	return nil
}

func (_u *VolunteerAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *VolunteerAssignment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(volunteerassignment.Table, volunteerassignment.Columns, sqlgraph.NewFieldSpec(volunteerassignment.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VolunteerAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, volunteerassignment.FieldID)
		for _, f := range fields {
			if !volunteerassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != volunteerassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(volunteerassignment.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(volunteerassignment.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(volunteerassignment.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(volunteerassignment.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.HoursCompleted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoursCompleted(); ok {
		_spec.AddField(volunteerassignment.FieldHoursCompleted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.HoursCommitted(); ok {
		_spec.SetField(volunteerassignment.FieldHoursCommitted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedHoursCommitted(); ok {
		_spec.AddField(volunteerassignment.FieldHoursCommitted, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(volunteerassignment.FieldFeedback, field.TypeString, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(volunteerassignment.FieldFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.Rating(); ok {
		_spec.SetField(volunteerassignment.FieldRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRating(); ok {
		_spec.AddField(volunteerassignment.FieldRating, field.TypeInt, value)
	}
	if _u.mutation.RatingCleared() {
		_spec.ClearField(volunteerassignment.FieldRating, field.TypeInt)
	}
	if value, ok := _u.mutation.CompletionNotes(); ok {
		_spec.SetField(volunteerassignment.FieldCompletionNotes, field.TypeString, value)
	}
	if _u.mutation.CompletionNotesCleared() {
		_spec.ClearField(volunteerassignment.FieldCompletionNotes, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(volunteerassignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OpportunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OpportunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VolunteerAssignment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteerassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
