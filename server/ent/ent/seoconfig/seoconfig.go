// Code generated by ent, DO NOT EDIT.

package seoconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the seoconfig type in the database.
	Label = "seo_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMetaTitle holds the string denoting the meta_title field in the database.
	FieldMetaTitle = "meta_title"
	// FieldMetaDescription holds the string denoting the meta_description field in the database.
	FieldMetaDescription = "meta_description"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldOgTitle holds the string denoting the og_title field in the database.
	FieldOgTitle = "og_title"
	// FieldOgDescription holds the string denoting the og_description field in the database.
	FieldOgDescription = "og_description"
	// FieldOgImageURL holds the string denoting the og_image_url field in the database.
	FieldOgImageURL = "og_image_url"
	// FieldOgType holds the string denoting the og_type field in the database.
	FieldOgType = "og_type"
	// FieldTwitterCard holds the string denoting the twitter_card field in the database.
	FieldTwitterCard = "twitter_card"
	// FieldTwitterTitle holds the string denoting the twitter_title field in the database.
	FieldTwitterTitle = "twitter_title"
	// FieldTwitterDescription holds the string denoting the twitter_description field in the database.
	FieldTwitterDescription = "twitter_description"
	// FieldTwitterImageURL holds the string denoting the twitter_image_url field in the database.
	FieldTwitterImageURL = "twitter_image_url"
	// FieldCanonicalURL holds the string denoting the canonical_url field in the database.
	FieldCanonicalURL = "canonical_url"
	// FieldNoindex holds the string denoting the noindex field in the database.
	FieldNoindex = "noindex"
	// FieldNofollow holds the string denoting the nofollow field in the database.
	FieldNofollow = "nofollow"
	// FieldStructuredData holds the string denoting the structured_data field in the database.
	FieldStructuredData = "structured_data"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePage holds the string denoting the page edge name in mutations.
	EdgePage = "page"
	// Table holds the table name of the seoconfig in the database.
	Table = "seo_configs"
	// PageTable is the table that holds the page relation/edge.
	PageTable = "seo_configs"
	// PageInverseTable is the table name for the Page entity.
	// It exists in this package in order to avoid circular dependency with the "page" package.
	PageInverseTable = "pages"
	// PageColumn is the table column denoting the page relation/edge.
	PageColumn = "page_seo"
)

// Columns holds all SQL columns for seoconfig fields.
var Columns = []string{
	FieldID,
	FieldMetaTitle,
	FieldMetaDescription,
	FieldKeywords,
	FieldOgTitle,
	FieldOgDescription,
	FieldOgImageURL,
	FieldOgType,
	FieldTwitterCard,
	FieldTwitterTitle,
	FieldTwitterDescription,
	FieldTwitterImageURL,
	FieldCanonicalURL,
	FieldNoindex,
	FieldNofollow,
	FieldStructuredData,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seo_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"page_seo",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOgType holds the default value on creation for the "og_type" field.
	DefaultOgType string
	// DefaultTwitterCard holds the default value on creation for the "twitter_card" field.
	DefaultTwitterCard string
	// DefaultNoindex holds the default value on creation for the "noindex" field.
	DefaultNoindex bool
	// DefaultNofollow holds the default value on creation for the "nofollow" field.
	DefaultNofollow bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SeoConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOgImageURL orders the results by the og_image_url field.
func ByOgImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOgImageURL, opts...).ToFunc()
}

// ByOgType orders the results by the og_type field.
func ByOgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOgType, opts...).ToFunc()
}

// ByTwitterCard orders the results by the twitter_card field.
func ByTwitterCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitterCard, opts...).ToFunc()
}

// ByTwitterImageURL orders the results by the twitter_image_url field.
func ByTwitterImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitterImageURL, opts...).ToFunc()
}

// ByCanonicalURL orders the results by the canonical_url field.
func ByCanonicalURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanonicalURL, opts...).ToFunc()
}

// ByNoindex orders the results by the noindex field.
func ByNoindex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoindex, opts...).ToFunc()
}

// ByNofollow orders the results by the nofollow field.
func ByNofollow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNofollow, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPageField orders the results by page field.
func ByPageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPageStep(), sql.OrderByField(field, opts...))
	}
}
func newPageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PageTable, PageColumn),
	)
}
