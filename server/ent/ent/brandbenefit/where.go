// Code generated by ent, DO NOT EDIT.

package brandbenefit

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldDescription, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldURL, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldDate, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldValue, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContainsFold(FieldDescription, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldContainsFold(FieldURL, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldDate, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldLTE(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.FieldNotNull(FieldValue))
}

// HasPartnership applies the HasEdge predicate on the "partnership" edge.
func HasPartnership() predicate.BrandBenefit {
	return predicate.BrandBenefit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnershipWith applies the HasEdge predicate on the "partnership" edge with a given conditions (other predicates).
func HasPartnershipWith(preds ...predicate.Partnership) predicate.BrandBenefit {
	return predicate.BrandBenefit(func(s *sql.Selector) {
		step := newPartnershipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BrandBenefit) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BrandBenefit) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BrandBenefit) predicate.BrandBenefit {
	return predicate.BrandBenefit(sql.NotPredicates(p))
}
