// Code generated by ent, DO NOT EDIT.

package brandbenefit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the brandbenefit type in the database.
	Label = "brand_benefit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgePartnership holds the string denoting the partnership edge name in mutations.
	EdgePartnership = "partnership"
	// Table holds the table name of the brandbenefit in the database.
	Table = "brand_benefits"
	// PartnershipTable is the table that holds the partnership relation/edge.
	PartnershipTable = "brand_benefits"
	// PartnershipInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipInverseTable = "partnerships"
	// PartnershipColumn is the table column denoting the partnership relation/edge.
	PartnershipColumn = "partnership_brand_benefits"
)

// Columns holds all SQL columns for brandbenefit fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDescription,
	FieldURL,
	FieldDate,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "brand_benefits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"partnership_brand_benefits",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BrandBenefit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByPartnershipField orders the results by partnership field.
func ByPartnershipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipStep(), sql.OrderByField(field, opts...))
	}
}
func newPartnershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PartnershipTable, PartnershipColumn),
	)
}
