// Code generated by ent, DO NOT EDIT.

package programparticipant

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldStatus, v))
}

// EnrollmentDate applies equality check predicate on the "enrollment_date" field. It's identical to EnrollmentDateEQ.
func EnrollmentDate(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldEnrollmentDate, v))
}

// CompletionDate applies equality check predicate on the "completion_date" field. It's identical to CompletionDateEQ.
func CompletionDate(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldCompletionDate, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldContainsFold(FieldStatus, v))
}

// EnrollmentDateEQ applies the EQ predicate on the "enrollment_date" field.
func EnrollmentDateEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldEnrollmentDate, v))
}

// EnrollmentDateNEQ applies the NEQ predicate on the "enrollment_date" field.
func EnrollmentDateNEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldEnrollmentDate, v))
}

// EnrollmentDateIn applies the In predicate on the "enrollment_date" field.
func EnrollmentDateIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldEnrollmentDate, vs...))
}

// EnrollmentDateNotIn applies the NotIn predicate on the "enrollment_date" field.
func EnrollmentDateNotIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldEnrollmentDate, vs...))
}

// EnrollmentDateGT applies the GT predicate on the "enrollment_date" field.
func EnrollmentDateGT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldEnrollmentDate, v))
}

// EnrollmentDateGTE applies the GTE predicate on the "enrollment_date" field.
func EnrollmentDateGTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldEnrollmentDate, v))
}

// EnrollmentDateLT applies the LT predicate on the "enrollment_date" field.
func EnrollmentDateLT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldEnrollmentDate, v))
}

// EnrollmentDateLTE applies the LTE predicate on the "enrollment_date" field.
func EnrollmentDateLTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldEnrollmentDate, v))
}

// CompletionDateEQ applies the EQ predicate on the "completion_date" field.
func CompletionDateEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldCompletionDate, v))
}

// CompletionDateNEQ applies the NEQ predicate on the "completion_date" field.
func CompletionDateNEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldCompletionDate, v))
}

// CompletionDateIn applies the In predicate on the "completion_date" field.
func CompletionDateIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldCompletionDate, vs...))
}

// CompletionDateNotIn applies the NotIn predicate on the "completion_date" field.
func CompletionDateNotIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldCompletionDate, vs...))
}

// CompletionDateGT applies the GT predicate on the "completion_date" field.
func CompletionDateGT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldCompletionDate, v))
}

// CompletionDateGTE applies the GTE predicate on the "completion_date" field.
func CompletionDateGTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldCompletionDate, v))
}

// CompletionDateLT applies the LT predicate on the "completion_date" field.
func CompletionDateLT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldCompletionDate, v))
}

// CompletionDateLTE applies the LTE predicate on the "completion_date" field.
func CompletionDateLTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldCompletionDate, v))
}

// CompletionDateIsNil applies the IsNil predicate on the "completion_date" field.
func CompletionDateIsNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIsNull(FieldCompletionDate))
}

// CompletionDateNotNil applies the NotNil predicate on the "completion_date" field.
func CompletionDateNotNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotNull(FieldCompletionDate))
}

// OutcomesIsNil applies the IsNil predicate on the "outcomes" field.
func OutcomesIsNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIsNull(FieldOutcomes))
}

// OutcomesNotNil applies the NotNil predicate on the "outcomes" field.
func OutcomesNotNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotNull(FieldOutcomes))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ProgramParticipant {
	return predicate.ProgramParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProgramParticipant) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProgramParticipant) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProgramParticipant) predicate.ProgramParticipant {
	return predicate.ProgramParticipant(sql.NotPredicates(p))
}
