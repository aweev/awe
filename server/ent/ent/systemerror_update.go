// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/predicate"
	"awe/ent/ent/systemerror"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemErrorUpdate is the builder for updating SystemError entities.
type SystemErrorUpdate struct {
	config
	hooks    []Hook
	mutation *SystemErrorMutation
}

// Where appends a list predicates to the SystemErrorUpdate builder.
func (_u *SystemErrorUpdate) Where(ps ...predicate.SystemError) *SystemErrorUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTimestamp sets the "timestamp" field.
func (_u *SystemErrorUpdate) SetTimestamp(v time.Time) *SystemErrorUpdate {
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableTimestamp(v *time.Time) *SystemErrorUpdate {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *SystemErrorUpdate) SetMessage(v string) *SystemErrorUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableMessage(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SystemErrorUpdate) SetName(v string) *SystemErrorUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableName(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStack sets the "stack" field.
func (_u *SystemErrorUpdate) SetStack(v string) *SystemErrorUpdate {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableStack(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SystemErrorUpdate) SetMetadata(v map[string]interface{}) *SystemErrorUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SystemErrorUpdate) ClearMetadata() *SystemErrorUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *SystemErrorUpdate) SetUserID(v string) *SystemErrorUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableUserID(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *SystemErrorUpdate) ClearUserID() *SystemErrorUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetContext sets the "context" field.
func (_u *SystemErrorUpdate) SetContext(v string) *SystemErrorUpdate {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableContext(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SystemErrorUpdate) ClearContext() *SystemErrorUpdate {
	_u.mutation.ClearContext()
	return _u
}

// SetIsResolved sets the "is_resolved" field.
func (_u *SystemErrorUpdate) SetIsResolved(v bool) *SystemErrorUpdate {
	_u.mutation.SetIsResolved(v)
	return _u
}

// SetNillableIsResolved sets the "is_resolved" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableIsResolved(v *bool) *SystemErrorUpdate {
	if v != nil {
		_u.SetIsResolved(*v)
	}
	return _u
}

// SetResolvedAt sets the "resolved_at" field.
func (_u *SystemErrorUpdate) SetResolvedAt(v time.Time) *SystemErrorUpdate {
	_u.mutation.SetResolvedAt(v)
	return _u
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableResolvedAt(v *time.Time) *SystemErrorUpdate {
	if v != nil {
		_u.SetResolvedAt(*v)
	}
	return _u
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (_u *SystemErrorUpdate) ClearResolvedAt() *SystemErrorUpdate {
	_u.mutation.ClearResolvedAt()
	return _u
}

// SetResolvedBy sets the "resolved_by" field.
func (_u *SystemErrorUpdate) SetResolvedBy(v string) *SystemErrorUpdate {
	_u.mutation.SetResolvedBy(v)
	return _u
}

// SetNillableResolvedBy sets the "resolved_by" field if the given value is not nil.
func (_u *SystemErrorUpdate) SetNillableResolvedBy(v *string) *SystemErrorUpdate {
	if v != nil {
		_u.SetResolvedBy(*v)
	}
	return _u
}

// ClearResolvedBy clears the value of the "resolved_by" field.
func (_u *SystemErrorUpdate) ClearResolvedBy() *SystemErrorUpdate {
	_u.mutation.ClearResolvedBy()
	return _u
}

// Mutation returns the SystemErrorMutation object of the builder.
func (_u *SystemErrorUpdate) Mutation() *SystemErrorMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SystemErrorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemErrorUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SystemErrorUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemErrorUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SystemErrorUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemerror.Table, systemerror.Columns, sqlgraph.NewFieldSpec(systemerror.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(systemerror.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(systemerror.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(systemerror.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(systemerror.FieldStack, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(systemerror.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(systemerror.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(systemerror.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(systemerror.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(systemerror.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(systemerror.FieldContext, field.TypeString)
	}
	if value, ok := _u.mutation.IsResolved(); ok {
		_spec.SetField(systemerror.FieldIsResolved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ResolvedAt(); ok {
		_spec.SetField(systemerror.FieldResolvedAt, field.TypeTime, value)
	}
	if _u.mutation.ResolvedAtCleared() {
		_spec.ClearField(systemerror.FieldResolvedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ResolvedBy(); ok {
		_spec.SetField(systemerror.FieldResolvedBy, field.TypeString, value)
	}
	if _u.mutation.ResolvedByCleared() {
		_spec.ClearField(systemerror.FieldResolvedBy, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemerror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SystemErrorUpdateOne is the builder for updating a single SystemError entity.
type SystemErrorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemErrorMutation
}

// SetTimestamp sets the "timestamp" field.
func (_u *SystemErrorUpdateOne) SetTimestamp(v time.Time) *SystemErrorUpdateOne {
	_u.mutation.SetTimestamp(v)
	return _u
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableTimestamp(v *time.Time) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetTimestamp(*v)
	}
	return _u
}

// SetMessage sets the "message" field.
func (_u *SystemErrorUpdateOne) SetMessage(v string) *SystemErrorUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableMessage(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SystemErrorUpdateOne) SetName(v string) *SystemErrorUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableName(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStack sets the "stack" field.
func (_u *SystemErrorUpdateOne) SetStack(v string) *SystemErrorUpdateOne {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableStack(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SystemErrorUpdateOne) SetMetadata(v map[string]interface{}) *SystemErrorUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SystemErrorUpdateOne) ClearMetadata() *SystemErrorUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *SystemErrorUpdateOne) SetUserID(v string) *SystemErrorUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableUserID(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *SystemErrorUpdateOne) ClearUserID() *SystemErrorUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetContext sets the "context" field.
func (_u *SystemErrorUpdateOne) SetContext(v string) *SystemErrorUpdateOne {
	_u.mutation.SetContext(v)
	return _u
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableContext(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetContext(*v)
	}
	return _u
}

// ClearContext clears the value of the "context" field.
func (_u *SystemErrorUpdateOne) ClearContext() *SystemErrorUpdateOne {
	_u.mutation.ClearContext()
	return _u
}

// SetIsResolved sets the "is_resolved" field.
func (_u *SystemErrorUpdateOne) SetIsResolved(v bool) *SystemErrorUpdateOne {
	_u.mutation.SetIsResolved(v)
	return _u
}

// SetNillableIsResolved sets the "is_resolved" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableIsResolved(v *bool) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetIsResolved(*v)
	}
	return _u
}

// SetResolvedAt sets the "resolved_at" field.
func (_u *SystemErrorUpdateOne) SetResolvedAt(v time.Time) *SystemErrorUpdateOne {
	_u.mutation.SetResolvedAt(v)
	return _u
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableResolvedAt(v *time.Time) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetResolvedAt(*v)
	}
	return _u
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (_u *SystemErrorUpdateOne) ClearResolvedAt() *SystemErrorUpdateOne {
	_u.mutation.ClearResolvedAt()
	return _u
}

// SetResolvedBy sets the "resolved_by" field.
func (_u *SystemErrorUpdateOne) SetResolvedBy(v string) *SystemErrorUpdateOne {
	_u.mutation.SetResolvedBy(v)
	return _u
}

// SetNillableResolvedBy sets the "resolved_by" field if the given value is not nil.
func (_u *SystemErrorUpdateOne) SetNillableResolvedBy(v *string) *SystemErrorUpdateOne {
	if v != nil {
		_u.SetResolvedBy(*v)
	}
	return _u
}

// ClearResolvedBy clears the value of the "resolved_by" field.
func (_u *SystemErrorUpdateOne) ClearResolvedBy() *SystemErrorUpdateOne {
	_u.mutation.ClearResolvedBy()
	return _u
}

// Mutation returns the SystemErrorMutation object of the builder.
func (_u *SystemErrorUpdateOne) Mutation() *SystemErrorMutation {
	return _u.mutation
}

// Where appends a list predicates to the SystemErrorUpdate builder.
func (_u *SystemErrorUpdateOne) Where(ps ...predicate.SystemError) *SystemErrorUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SystemErrorUpdateOne) Select(field string, fields ...string) *SystemErrorUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SystemError entity.
func (_u *SystemErrorUpdateOne) Save(ctx context.Context) (*SystemError, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SystemErrorUpdateOne) SaveX(ctx context.Context) *SystemError {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SystemErrorUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SystemErrorUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SystemErrorUpdateOne) sqlSave(ctx context.Context) (_node *SystemError, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemerror.Table, systemerror.Columns, sqlgraph.NewFieldSpec(systemerror.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemError.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemerror.FieldID)
		for _, f := range fields {
			if !systemerror.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemerror.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Timestamp(); ok {
		_spec.SetField(systemerror.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(systemerror.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(systemerror.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(systemerror.FieldStack, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(systemerror.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(systemerror.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(systemerror.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(systemerror.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.Context(); ok {
		_spec.SetField(systemerror.FieldContext, field.TypeString, value)
	}
	if _u.mutation.ContextCleared() {
		_spec.ClearField(systemerror.FieldContext, field.TypeString)
	}
	if value, ok := _u.mutation.IsResolved(); ok {
		_spec.SetField(systemerror.FieldIsResolved, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ResolvedAt(); ok {
		_spec.SetField(systemerror.FieldResolvedAt, field.TypeTime, value)
	}
	if _u.mutation.ResolvedAtCleared() {
		_spec.ClearField(systemerror.FieldResolvedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ResolvedBy(); ok {
		_spec.SetField(systemerror.FieldResolvedBy, field.TypeString, value)
	}
	if _u.mutation.ResolvedByCleared() {
		_spec.ClearField(systemerror.FieldResolvedBy, field.TypeString)
	}
	_node = &SystemError{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemerror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
