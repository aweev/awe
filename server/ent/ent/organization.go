// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/organization"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Industry holds the value of the "industry" field.
	Industry string `json:"industry,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// ContactEmail holds the value of the "contact_email" field.
	ContactEmail string `json:"contact_email,omitempty"`
	// ContactPhone holds the value of the "contact_phone" field.
	ContactPhone string `json:"contact_phone,omitempty"`
	// Address holds the value of the "address" field.
	Address map[string]string `json:"address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges             OrganizationEdges `json:"edges"`
	user_organization *int
	selectValues      sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Partnerships holds the value of the partnerships edge.
	Partnerships []*Partnership `json:"partnerships,omitempty"`
	// Grants holds the value of the grants edge.
	Grants []*Grant `json:"grants,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PartnershipsOrErr returns the Partnerships value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) PartnershipsOrErr() ([]*Partnership, error) {
	if e.loadedTypes[0] {
		return e.Partnerships, nil
	}
	return nil, &NotLoadedError{edge: "partnerships"}
}

// GrantsOrErr returns the Grants value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) GrantsOrErr() ([]*Grant, error) {
	if e.loadedTypes[1] {
		return e.Grants, nil
	}
	return nil, &NotLoadedError{edge: "grants"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldAddress:
			values[i] = new([]byte)
		case organization.FieldID:
			values[i] = new(sql.NullInt64)
		case organization.FieldName, organization.FieldWebsite, organization.FieldLogoURL, organization.FieldDescription, organization.FieldIndustry, organization.FieldSize, organization.FieldContactEmail, organization.FieldContactPhone:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt, organization.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case organization.ForeignKeys[0]: // user_organization
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (_m *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case organization.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				_m.Website = value.String
			}
		case organization.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				_m.LogoURL = value.String
			}
		case organization.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case organization.FieldIndustry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				_m.Industry = value.String
			}
		case organization.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				_m.Size = value.String
			}
		case organization.FieldContactEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_email", values[i])
			} else if value.Valid {
				_m.ContactEmail = value.String
			}
		case organization.FieldContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_phone", values[i])
			} else if value.Valid {
				_m.ContactPhone = value.String
			}
		case organization.FieldAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Address); err != nil {
					return fmt.Errorf("unmarshal field address: %w", err)
				}
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case organization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case organization.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_organization", value)
			} else if value.Valid {
				_m.user_organization = new(int)
				*_m.user_organization = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (_m *Organization) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPartnerships queries the "partnerships" edge of the Organization entity.
func (_m *Organization) QueryPartnerships() *PartnershipQuery {
	return NewOrganizationClient(_m.config).QueryPartnerships(_m)
}

// QueryGrants queries the "grants" edge of the Organization entity.
func (_m *Organization) QueryGrants() *GrantQuery {
	return NewOrganizationClient(_m.config).QueryGrants(_m)
}

// QueryUser queries the "user" edge of the Organization entity.
func (_m *Organization) QueryUser() *UserQuery {
	return NewOrganizationClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Organization) Unwrap() *Organization {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(_m.Website)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(_m.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("industry=")
	builder.WriteString(_m.Industry)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(_m.Size)
	builder.WriteString(", ")
	builder.WriteString("contact_email=")
	builder.WriteString(_m.ContactEmail)
	builder.WriteString(", ")
	builder.WriteString("contact_phone=")
	builder.WriteString(_m.ContactPhone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(fmt.Sprintf("%v", _m.Address))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
