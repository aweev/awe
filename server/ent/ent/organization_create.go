// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/organization"
	"awe/ent/ent/partnership"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *OrganizationCreate) SetName(v string) *OrganizationCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetWebsite sets the "website" field.
func (_c *OrganizationCreate) SetWebsite(v string) *OrganizationCreate {
	_c.mutation.SetWebsite(v)
	return _c
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableWebsite(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetWebsite(*v)
	}
	return _c
}

// SetLogoURL sets the "logo_url" field.
func (_c *OrganizationCreate) SetLogoURL(v string) *OrganizationCreate {
	_c.mutation.SetLogoURL(v)
	return _c
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableLogoURL(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetLogoURL(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *OrganizationCreate) SetDescription(v string) *OrganizationCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDescription(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetIndustry sets the "industry" field.
func (_c *OrganizationCreate) SetIndustry(v string) *OrganizationCreate {
	_c.mutation.SetIndustry(v)
	return _c
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableIndustry(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetIndustry(*v)
	}
	return _c
}

// SetSize sets the "size" field.
func (_c *OrganizationCreate) SetSize(v string) *OrganizationCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableSize(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetSize(*v)
	}
	return _c
}

// SetContactEmail sets the "contact_email" field.
func (_c *OrganizationCreate) SetContactEmail(v string) *OrganizationCreate {
	_c.mutation.SetContactEmail(v)
	return _c
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableContactEmail(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetContactEmail(*v)
	}
	return _c
}

// SetContactPhone sets the "contact_phone" field.
func (_c *OrganizationCreate) SetContactPhone(v string) *OrganizationCreate {
	_c.mutation.SetContactPhone(v)
	return _c
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableContactPhone(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetContactPhone(*v)
	}
	return _c
}

// SetAddress sets the "address" field.
func (_c *OrganizationCreate) SetAddress(v map[string]string) *OrganizationCreate {
	_c.mutation.SetAddress(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrganizationCreate) SetCreatedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreatedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrganizationCreate) SetUpdatedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUpdatedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddPartnershipIDs adds the "partnerships" edge to the Partnership entity by IDs.
func (_c *OrganizationCreate) AddPartnershipIDs(ids ...int) *OrganizationCreate {
	_c.mutation.AddPartnershipIDs(ids...)
	return _c
}

// AddPartnerships adds the "partnerships" edges to the Partnership entity.
func (_c *OrganizationCreate) AddPartnerships(v ...*Partnership) *OrganizationCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPartnershipIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_c *OrganizationCreate) AddGrantIDs(ids ...int) *OrganizationCreate {
	_c.mutation.AddGrantIDs(ids...)
	return _c
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_c *OrganizationCreate) AddGrants(v ...*Grant) *OrganizationCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGrantIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *OrganizationCreate) SetUserID(id int) *OrganizationCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUserID(id *int) *OrganizationCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *OrganizationCreate) SetUser(v *User) *OrganizationCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_c *OrganizationCreate) Mutation() *OrganizationMutation {
	return _c.mutation
}

// Save creates the Organization in the database.
func (_c *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrganizationCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := organization.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := organization.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrganizationCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Organization.name"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Organization.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Organization.updated_at"`)}
	}
	return nil
}

func (_c *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := _c.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Industry(); ok {
		_spec.SetField(organization.FieldIndustry, field.TypeString, value)
		_node.Industry = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(organization.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.ContactEmail(); ok {
		_spec.SetField(organization.FieldContactEmail, field.TypeString, value)
		_node.ContactEmail = value
	}
	if value, ok := _c.mutation.ContactPhone(); ok {
		_spec.SetField(organization.FieldContactPhone, field.TypeString, value)
		_node.ContactPhone = value
	}
	if value, ok := _c.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeJSON, value)
		_node.Address = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.PartnershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(partnership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_organization = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *OrganizationCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertOne {
	_c.conflict = opts
	return &OrganizationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrganizationCreate) OnConflictColumns(columns ...string) *OrganizationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertOne{
		create: _c,
	}
}

type (
	// OrganizationUpsertOne is the builder for "upsert"-ing
	//  one Organization node.
	OrganizationUpsertOne struct {
		create *OrganizationCreate
	}

	// OrganizationUpsert is the "OnConflict" setter.
	OrganizationUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *OrganizationUpsert) SetName(v string) *OrganizationUpsert {
	u.Set(organization.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateName() *OrganizationUpsert {
	u.SetExcluded(organization.FieldName)
	return u
}

// SetWebsite sets the "website" field.
func (u *OrganizationUpsert) SetWebsite(v string) *OrganizationUpsert {
	u.Set(organization.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateWebsite() *OrganizationUpsert {
	u.SetExcluded(organization.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *OrganizationUpsert) ClearWebsite() *OrganizationUpsert {
	u.SetNull(organization.FieldWebsite)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsert) SetLogoURL(v string) *OrganizationUpsert {
	u.Set(organization.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateLogoURL() *OrganizationUpsert {
	u.SetExcluded(organization.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsert) ClearLogoURL() *OrganizationUpsert {
	u.SetNull(organization.FieldLogoURL)
	return u
}

// SetDescription sets the "description" field.
func (u *OrganizationUpsert) SetDescription(v string) *OrganizationUpsert {
	u.Set(organization.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateDescription() *OrganizationUpsert {
	u.SetExcluded(organization.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *OrganizationUpsert) ClearDescription() *OrganizationUpsert {
	u.SetNull(organization.FieldDescription)
	return u
}

// SetIndustry sets the "industry" field.
func (u *OrganizationUpsert) SetIndustry(v string) *OrganizationUpsert {
	u.Set(organization.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateIndustry() *OrganizationUpsert {
	u.SetExcluded(organization.FieldIndustry)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *OrganizationUpsert) ClearIndustry() *OrganizationUpsert {
	u.SetNull(organization.FieldIndustry)
	return u
}

// SetSize sets the "size" field.
func (u *OrganizationUpsert) SetSize(v string) *OrganizationUpsert {
	u.Set(organization.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateSize() *OrganizationUpsert {
	u.SetExcluded(organization.FieldSize)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *OrganizationUpsert) ClearSize() *OrganizationUpsert {
	u.SetNull(organization.FieldSize)
	return u
}

// SetContactEmail sets the "contact_email" field.
func (u *OrganizationUpsert) SetContactEmail(v string) *OrganizationUpsert {
	u.Set(organization.FieldContactEmail, v)
	return u
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateContactEmail() *OrganizationUpsert {
	u.SetExcluded(organization.FieldContactEmail)
	return u
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *OrganizationUpsert) ClearContactEmail() *OrganizationUpsert {
	u.SetNull(organization.FieldContactEmail)
	return u
}

// SetContactPhone sets the "contact_phone" field.
func (u *OrganizationUpsert) SetContactPhone(v string) *OrganizationUpsert {
	u.Set(organization.FieldContactPhone, v)
	return u
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateContactPhone() *OrganizationUpsert {
	u.SetExcluded(organization.FieldContactPhone)
	return u
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (u *OrganizationUpsert) ClearContactPhone() *OrganizationUpsert {
	u.SetNull(organization.FieldContactPhone)
	return u
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsert) SetAddress(v map[string]string) *OrganizationUpsert {
	u.Set(organization.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateAddress() *OrganizationUpsert {
	u.SetExcluded(organization.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsert) ClearAddress() *OrganizationUpsert {
	u.SetNull(organization.FieldAddress)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsert) SetUpdatedAt(v time.Time) *OrganizationUpsert {
	u.Set(organization.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsert) UpdateUpdatedAt() *OrganizationUpsert {
	u.SetExcluded(organization.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertOne) UpdateNewValues() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(organization.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationUpsertOne) Ignore() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertOne) DoNothing() *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreate.OnConflict
// documentation for more info.
func (u *OrganizationUpsertOne) Update(set func(*OrganizationUpsert)) *OrganizationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OrganizationUpsertOne) SetName(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateName() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// SetWebsite sets the "website" field.
func (u *OrganizationUpsertOne) SetWebsite(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateWebsite() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *OrganizationUpsertOne) ClearWebsite() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearWebsite()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsertOne) SetLogoURL(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateLogoURL() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsertOne) ClearLogoURL() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearLogoURL()
	})
}

// SetDescription sets the "description" field.
func (u *OrganizationUpsertOne) SetDescription(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateDescription() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *OrganizationUpsertOne) ClearDescription() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDescription()
	})
}

// SetIndustry sets the "industry" field.
func (u *OrganizationUpsertOne) SetIndustry(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateIndustry() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *OrganizationUpsertOne) ClearIndustry() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *OrganizationUpsertOne) SetSize(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateSize() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *OrganizationUpsertOne) ClearSize() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSize()
	})
}

// SetContactEmail sets the "contact_email" field.
func (u *OrganizationUpsertOne) SetContactEmail(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetContactEmail(v)
	})
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateContactEmail() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateContactEmail()
	})
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *OrganizationUpsertOne) ClearContactEmail() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearContactEmail()
	})
}

// SetContactPhone sets the "contact_phone" field.
func (u *OrganizationUpsertOne) SetContactPhone(v string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetContactPhone(v)
	})
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateContactPhone() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateContactPhone()
	})
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (u *OrganizationUpsertOne) ClearContactPhone() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearContactPhone()
	})
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsertOne) SetAddress(v map[string]string) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateAddress() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsertOne) ClearAddress() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAddress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsertOne) SetUpdatedAt(v time.Time) *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsertOne) UpdateUpdatedAt() *OrganizationUpsertOne {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	err      error
	builders []*OrganizationCreate
	conflict []sql.ConflictOption
}

// Save creates the Organization entities in the database.
func (_c *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Organization, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Organization.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *OrganizationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationUpsertBulk {
	_c.conflict = opts
	return &OrganizationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *OrganizationCreateBulk) OnConflictColumns(columns ...string) *OrganizationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &OrganizationUpsertBulk{
		create: _c,
	}
}

// OrganizationUpsertBulk is the builder for "upsert"-ing
// a bulk of Organization nodes.
type OrganizationUpsertBulk struct {
	create *OrganizationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) UpdateNewValues() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(organization.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Organization.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationUpsertBulk) Ignore() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationUpsertBulk) DoNothing() *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationUpsertBulk) Update(set func(*OrganizationUpsert)) *OrganizationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *OrganizationUpsertBulk) SetName(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateName() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateName()
	})
}

// SetWebsite sets the "website" field.
func (u *OrganizationUpsertBulk) SetWebsite(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateWebsite() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *OrganizationUpsertBulk) ClearWebsite() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearWebsite()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *OrganizationUpsertBulk) SetLogoURL(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateLogoURL() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *OrganizationUpsertBulk) ClearLogoURL() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearLogoURL()
	})
}

// SetDescription sets the "description" field.
func (u *OrganizationUpsertBulk) SetDescription(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateDescription() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *OrganizationUpsertBulk) ClearDescription() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearDescription()
	})
}

// SetIndustry sets the "industry" field.
func (u *OrganizationUpsertBulk) SetIndustry(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateIndustry() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *OrganizationUpsertBulk) ClearIndustry() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *OrganizationUpsertBulk) SetSize(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateSize() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *OrganizationUpsertBulk) ClearSize() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearSize()
	})
}

// SetContactEmail sets the "contact_email" field.
func (u *OrganizationUpsertBulk) SetContactEmail(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetContactEmail(v)
	})
}

// UpdateContactEmail sets the "contact_email" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateContactEmail() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateContactEmail()
	})
}

// ClearContactEmail clears the value of the "contact_email" field.
func (u *OrganizationUpsertBulk) ClearContactEmail() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearContactEmail()
	})
}

// SetContactPhone sets the "contact_phone" field.
func (u *OrganizationUpsertBulk) SetContactPhone(v string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetContactPhone(v)
	})
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateContactPhone() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateContactPhone()
	})
}

// ClearContactPhone clears the value of the "contact_phone" field.
func (u *OrganizationUpsertBulk) ClearContactPhone() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearContactPhone()
	})
}

// SetAddress sets the "address" field.
func (u *OrganizationUpsertBulk) SetAddress(v map[string]string) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateAddress() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *OrganizationUpsertBulk) ClearAddress() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.ClearAddress()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrganizationUpsertBulk) SetUpdatedAt(v time.Time) *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrganizationUpsertBulk) UpdateUpdatedAt() *OrganizationUpsertBulk {
	return u.Update(func(s *OrganizationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *OrganizationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
