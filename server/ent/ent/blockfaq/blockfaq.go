// Code generated by ent, DO NOT EDIT.

package blockfaq

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockfaq type in the database.
	Label = "block_faq"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInternalName holds the string denoting the internal_name field in the database.
	FieldInternalName = "internal_name"
	// FieldBadge holds the string denoting the badge field in the database.
	FieldBadge = "badge"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAllowMultipleOpen holds the string denoting the allow_multiple_open field in the database.
	FieldAllowMultipleOpen = "allow_multiple_open"
	// FieldDefaultOpenFirst holds the string denoting the default_open_first field in the database.
	FieldDefaultOpenFirst = "default_open_first"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContentBlock holds the string denoting the content_block edge name in mutations.
	EdgeContentBlock = "content_block"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// Table holds the table name of the blockfaq in the database.
	Table = "block_faqs"
	// ContentBlockTable is the table that holds the content_block relation/edge.
	ContentBlockTable = "block_faqs"
	// ContentBlockInverseTable is the table name for the ContentBlock entity.
	// It exists in this package in order to avoid circular dependency with the "contentblock" package.
	ContentBlockInverseTable = "content_blocks"
	// ContentBlockColumn is the table column denoting the content_block relation/edge.
	ContentBlockColumn = "content_block_block_faq"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "faq_items"
	// ItemsInverseTable is the table name for the FaqItem entity.
	// It exists in this package in order to avoid circular dependency with the "faqitem" package.
	ItemsInverseTable = "faq_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "block_faq_items"
)

// Columns holds all SQL columns for blockfaq fields.
var Columns = []string{
	FieldID,
	FieldInternalName,
	FieldBadge,
	FieldTitle,
	FieldDescription,
	FieldAllowMultipleOpen,
	FieldDefaultOpenFirst,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "block_faqs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"content_block_block_faq",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAllowMultipleOpen holds the default value on creation for the "allow_multiple_open" field.
	DefaultAllowMultipleOpen bool
	// DefaultDefaultOpenFirst holds the default value on creation for the "default_open_first" field.
	DefaultDefaultOpenFirst bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BlockFaq queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInternalName orders the results by the internal_name field.
func ByInternalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalName, opts...).ToFunc()
}

// ByAllowMultipleOpen orders the results by the allow_multiple_open field.
func ByAllowMultipleOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowMultipleOpen, opts...).ToFunc()
}

// ByDefaultOpenFirst orders the results by the default_open_first field.
func ByDefaultOpenFirst(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultOpenFirst, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContentBlockField orders the results by content_block field.
func ByContentBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentBlockStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContentBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentBlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentBlockTable, ContentBlockColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ItemsTable, ItemsColumn),
	)
}
