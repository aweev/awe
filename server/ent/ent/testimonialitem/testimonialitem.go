// Code generated by ent, DO NOT EDIT.

package testimonialitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testimonialitem type in the database.
	Label = "testimonial_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldQuote holds the string denoting the quote field in the database.
	FieldQuote = "quote"
	// FieldAuthorName holds the string denoting the author_name field in the database.
	FieldAuthorName = "author_name"
	// FieldAuthorRole holds the string denoting the author_role field in the database.
	FieldAuthorRole = "author_role"
	// FieldAuthorImageURL holds the string denoting the author_image_url field in the database.
	FieldAuthorImageURL = "author_image_url"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// EdgeSuccessStory holds the string denoting the success_story edge name in mutations.
	EdgeSuccessStory = "success_story"
	// Table holds the table name of the testimonialitem in the database.
	Table = "testimonial_items"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "testimonial_items"
	// BlockInverseTable is the table name for the BlockTestimonials entity.
	// It exists in this package in order to avoid circular dependency with the "blocktestimonials" package.
	BlockInverseTable = "block_testimonials"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "block_testimonials_testimonials"
	// SuccessStoryTable is the table that holds the success_story relation/edge.
	SuccessStoryTable = "testimonial_items"
	// SuccessStoryInverseTable is the table name for the SuccessStory entity.
	// It exists in this package in order to avoid circular dependency with the "successstory" package.
	SuccessStoryInverseTable = "success_stories"
	// SuccessStoryColumn is the table column denoting the success_story relation/edge.
	SuccessStoryColumn = "testimonial_item_success_story"
)

// Columns holds all SQL columns for testimonialitem fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldQuote,
	FieldAuthorName,
	FieldAuthorRole,
	FieldAuthorImageURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "testimonial_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_testimonials_testimonials",
	"success_story_testimonials",
	"testimonial_item_success_story",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TestimonialItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByAuthorName orders the results by the author_name field.
func ByAuthorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorName, opts...).ToFunc()
}

// ByAuthorImageURL orders the results by the author_image_url field.
func ByAuthorImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorImageURL, opts...).ToFunc()
}

// ByBlockField orders the results by block field.
func ByBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), sql.OrderByField(field, opts...))
	}
}

// BySuccessStoryField orders the results by success_story field.
func BySuccessStoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuccessStoryStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
	)
}
func newSuccessStoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuccessStoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SuccessStoryTable, SuccessStoryColumn),
	)
}
