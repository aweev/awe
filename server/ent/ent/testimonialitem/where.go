// Code generated by ent, DO NOT EDIT.

package testimonialitem

import (
	"awe/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLTE(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldOrder, v))
}

// AuthorName applies equality check predicate on the "author_name" field. It's identical to AuthorNameEQ.
func AuthorName(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorImageURL applies equality check predicate on the "author_image_url" field. It's identical to AuthorImageURLEQ.
func AuthorImageURL(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldAuthorImageURL, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLTE(FieldOrder, v))
}

// AuthorNameEQ applies the EQ predicate on the "author_name" field.
func AuthorNameEQ(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorNameNEQ applies the NEQ predicate on the "author_name" field.
func AuthorNameNEQ(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNEQ(FieldAuthorName, v))
}

// AuthorNameIn applies the In predicate on the "author_name" field.
func AuthorNameIn(vs ...string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldIn(FieldAuthorName, vs...))
}

// AuthorNameNotIn applies the NotIn predicate on the "author_name" field.
func AuthorNameNotIn(vs ...string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNotIn(FieldAuthorName, vs...))
}

// AuthorNameGT applies the GT predicate on the "author_name" field.
func AuthorNameGT(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGT(FieldAuthorName, v))
}

// AuthorNameGTE applies the GTE predicate on the "author_name" field.
func AuthorNameGTE(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGTE(FieldAuthorName, v))
}

// AuthorNameLT applies the LT predicate on the "author_name" field.
func AuthorNameLT(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLT(FieldAuthorName, v))
}

// AuthorNameLTE applies the LTE predicate on the "author_name" field.
func AuthorNameLTE(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLTE(FieldAuthorName, v))
}

// AuthorNameContains applies the Contains predicate on the "author_name" field.
func AuthorNameContains(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldContains(FieldAuthorName, v))
}

// AuthorNameHasPrefix applies the HasPrefix predicate on the "author_name" field.
func AuthorNameHasPrefix(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldHasPrefix(FieldAuthorName, v))
}

// AuthorNameHasSuffix applies the HasSuffix predicate on the "author_name" field.
func AuthorNameHasSuffix(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldHasSuffix(FieldAuthorName, v))
}

// AuthorNameEqualFold applies the EqualFold predicate on the "author_name" field.
func AuthorNameEqualFold(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEqualFold(FieldAuthorName, v))
}

// AuthorNameContainsFold applies the ContainsFold predicate on the "author_name" field.
func AuthorNameContainsFold(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldContainsFold(FieldAuthorName, v))
}

// AuthorImageURLEQ applies the EQ predicate on the "author_image_url" field.
func AuthorImageURLEQ(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEQ(FieldAuthorImageURL, v))
}

// AuthorImageURLNEQ applies the NEQ predicate on the "author_image_url" field.
func AuthorImageURLNEQ(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNEQ(FieldAuthorImageURL, v))
}

// AuthorImageURLIn applies the In predicate on the "author_image_url" field.
func AuthorImageURLIn(vs ...string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldIn(FieldAuthorImageURL, vs...))
}

// AuthorImageURLNotIn applies the NotIn predicate on the "author_image_url" field.
func AuthorImageURLNotIn(vs ...string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNotIn(FieldAuthorImageURL, vs...))
}

// AuthorImageURLGT applies the GT predicate on the "author_image_url" field.
func AuthorImageURLGT(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGT(FieldAuthorImageURL, v))
}

// AuthorImageURLGTE applies the GTE predicate on the "author_image_url" field.
func AuthorImageURLGTE(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldGTE(FieldAuthorImageURL, v))
}

// AuthorImageURLLT applies the LT predicate on the "author_image_url" field.
func AuthorImageURLLT(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLT(FieldAuthorImageURL, v))
}

// AuthorImageURLLTE applies the LTE predicate on the "author_image_url" field.
func AuthorImageURLLTE(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldLTE(FieldAuthorImageURL, v))
}

// AuthorImageURLContains applies the Contains predicate on the "author_image_url" field.
func AuthorImageURLContains(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldContains(FieldAuthorImageURL, v))
}

// AuthorImageURLHasPrefix applies the HasPrefix predicate on the "author_image_url" field.
func AuthorImageURLHasPrefix(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldHasPrefix(FieldAuthorImageURL, v))
}

// AuthorImageURLHasSuffix applies the HasSuffix predicate on the "author_image_url" field.
func AuthorImageURLHasSuffix(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldHasSuffix(FieldAuthorImageURL, v))
}

// AuthorImageURLIsNil applies the IsNil predicate on the "author_image_url" field.
func AuthorImageURLIsNil() predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldIsNull(FieldAuthorImageURL))
}

// AuthorImageURLNotNil applies the NotNil predicate on the "author_image_url" field.
func AuthorImageURLNotNil() predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldNotNull(FieldAuthorImageURL))
}

// AuthorImageURLEqualFold applies the EqualFold predicate on the "author_image_url" field.
func AuthorImageURLEqualFold(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldEqualFold(FieldAuthorImageURL, v))
}

// AuthorImageURLContainsFold applies the ContainsFold predicate on the "author_image_url" field.
func AuthorImageURLContainsFold(v string) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.FieldContainsFold(FieldAuthorImageURL, v))
}

// HasBlock applies the HasEdge predicate on the "block" edge.
func HasBlock() predicate.TestimonialItem {
	return predicate.TestimonialItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockWith applies the HasEdge predicate on the "block" edge with a given conditions (other predicates).
func HasBlockWith(preds ...predicate.BlockTestimonials) predicate.TestimonialItem {
	return predicate.TestimonialItem(func(s *sql.Selector) {
		step := newBlockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuccessStory applies the HasEdge predicate on the "success_story" edge.
func HasSuccessStory() predicate.TestimonialItem {
	return predicate.TestimonialItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SuccessStoryTable, SuccessStoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuccessStoryWith applies the HasEdge predicate on the "success_story" edge with a given conditions (other predicates).
func HasSuccessStoryWith(preds ...predicate.SuccessStory) predicate.TestimonialItem {
	return predicate.TestimonialItem(func(s *sql.Selector) {
		step := newSuccessStoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestimonialItem) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestimonialItem) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestimonialItem) predicate.TestimonialItem {
	return predicate.TestimonialItem(sql.NotPredicates(p))
}
