// Code generated by ent, DO NOT EDIT.

package userprofile

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldLastName, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldAvatarURL, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBio, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldPhone, v))
}

// JobTitle applies equality check predicate on the "job_title" field. It's identical to JobTitleEQ.
func JobTitle(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldJobTitle, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCompany, v))
}

// Linkedin applies equality check predicate on the "linkedin" field. It's identical to LinkedinEQ.
func Linkedin(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldLinkedin, v))
}

// Twitter applies equality check predicate on the "twitter" field. It's identical to TwitterEQ.
func Twitter(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldTwitter, v))
}

// CompletedPct applies equality check predicate on the "completed_pct" field. It's identical to CompletedPctEQ.
func CompletedPct(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCompletedPct, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldLastName, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldAvatarURL, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldBio, v))
}

// BioIsNil applies the IsNil predicate on the "bio" field.
func BioIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldBio))
}

// BioNotNil applies the NotNil predicate on the "bio" field.
func BioNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldBio))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldBio, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldPhone, v))
}

// JobTitleEQ applies the EQ predicate on the "job_title" field.
func JobTitleEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldJobTitle, v))
}

// JobTitleNEQ applies the NEQ predicate on the "job_title" field.
func JobTitleNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldJobTitle, v))
}

// JobTitleIn applies the In predicate on the "job_title" field.
func JobTitleIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldJobTitle, vs...))
}

// JobTitleNotIn applies the NotIn predicate on the "job_title" field.
func JobTitleNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldJobTitle, vs...))
}

// JobTitleGT applies the GT predicate on the "job_title" field.
func JobTitleGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldJobTitle, v))
}

// JobTitleGTE applies the GTE predicate on the "job_title" field.
func JobTitleGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldJobTitle, v))
}

// JobTitleLT applies the LT predicate on the "job_title" field.
func JobTitleLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldJobTitle, v))
}

// JobTitleLTE applies the LTE predicate on the "job_title" field.
func JobTitleLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldJobTitle, v))
}

// JobTitleContains applies the Contains predicate on the "job_title" field.
func JobTitleContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldJobTitle, v))
}

// JobTitleHasPrefix applies the HasPrefix predicate on the "job_title" field.
func JobTitleHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldJobTitle, v))
}

// JobTitleHasSuffix applies the HasSuffix predicate on the "job_title" field.
func JobTitleHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldJobTitle, v))
}

// JobTitleIsNil applies the IsNil predicate on the "job_title" field.
func JobTitleIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldJobTitle))
}

// JobTitleNotNil applies the NotNil predicate on the "job_title" field.
func JobTitleNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldJobTitle))
}

// JobTitleEqualFold applies the EqualFold predicate on the "job_title" field.
func JobTitleEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldJobTitle, v))
}

// JobTitleContainsFold applies the ContainsFold predicate on the "job_title" field.
func JobTitleContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldJobTitle, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldCompany, v))
}

// LinkedinEQ applies the EQ predicate on the "linkedin" field.
func LinkedinEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldLinkedin, v))
}

// LinkedinNEQ applies the NEQ predicate on the "linkedin" field.
func LinkedinNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldLinkedin, v))
}

// LinkedinIn applies the In predicate on the "linkedin" field.
func LinkedinIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldLinkedin, vs...))
}

// LinkedinNotIn applies the NotIn predicate on the "linkedin" field.
func LinkedinNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldLinkedin, vs...))
}

// LinkedinGT applies the GT predicate on the "linkedin" field.
func LinkedinGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldLinkedin, v))
}

// LinkedinGTE applies the GTE predicate on the "linkedin" field.
func LinkedinGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldLinkedin, v))
}

// LinkedinLT applies the LT predicate on the "linkedin" field.
func LinkedinLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldLinkedin, v))
}

// LinkedinLTE applies the LTE predicate on the "linkedin" field.
func LinkedinLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldLinkedin, v))
}

// LinkedinContains applies the Contains predicate on the "linkedin" field.
func LinkedinContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldLinkedin, v))
}

// LinkedinHasPrefix applies the HasPrefix predicate on the "linkedin" field.
func LinkedinHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldLinkedin, v))
}

// LinkedinHasSuffix applies the HasSuffix predicate on the "linkedin" field.
func LinkedinHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldLinkedin, v))
}

// LinkedinIsNil applies the IsNil predicate on the "linkedin" field.
func LinkedinIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldLinkedin))
}

// LinkedinNotNil applies the NotNil predicate on the "linkedin" field.
func LinkedinNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldLinkedin))
}

// LinkedinEqualFold applies the EqualFold predicate on the "linkedin" field.
func LinkedinEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldLinkedin, v))
}

// LinkedinContainsFold applies the ContainsFold predicate on the "linkedin" field.
func LinkedinContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldLinkedin, v))
}

// TwitterEQ applies the EQ predicate on the "twitter" field.
func TwitterEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldTwitter, v))
}

// TwitterNEQ applies the NEQ predicate on the "twitter" field.
func TwitterNEQ(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldTwitter, v))
}

// TwitterIn applies the In predicate on the "twitter" field.
func TwitterIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldTwitter, vs...))
}

// TwitterNotIn applies the NotIn predicate on the "twitter" field.
func TwitterNotIn(vs ...string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldTwitter, vs...))
}

// TwitterGT applies the GT predicate on the "twitter" field.
func TwitterGT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldTwitter, v))
}

// TwitterGTE applies the GTE predicate on the "twitter" field.
func TwitterGTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldTwitter, v))
}

// TwitterLT applies the LT predicate on the "twitter" field.
func TwitterLT(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldTwitter, v))
}

// TwitterLTE applies the LTE predicate on the "twitter" field.
func TwitterLTE(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldTwitter, v))
}

// TwitterContains applies the Contains predicate on the "twitter" field.
func TwitterContains(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContains(FieldTwitter, v))
}

// TwitterHasPrefix applies the HasPrefix predicate on the "twitter" field.
func TwitterHasPrefix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasPrefix(FieldTwitter, v))
}

// TwitterHasSuffix applies the HasSuffix predicate on the "twitter" field.
func TwitterHasSuffix(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldHasSuffix(FieldTwitter, v))
}

// TwitterIsNil applies the IsNil predicate on the "twitter" field.
func TwitterIsNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIsNull(FieldTwitter))
}

// TwitterNotNil applies the NotNil predicate on the "twitter" field.
func TwitterNotNil() predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotNull(FieldTwitter))
}

// TwitterEqualFold applies the EqualFold predicate on the "twitter" field.
func TwitterEqualFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEqualFold(FieldTwitter, v))
}

// TwitterContainsFold applies the ContainsFold predicate on the "twitter" field.
func TwitterContainsFold(v string) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldContainsFold(FieldTwitter, v))
}

// CompletedPctEQ applies the EQ predicate on the "completed_pct" field.
func CompletedPctEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCompletedPct, v))
}

// CompletedPctNEQ applies the NEQ predicate on the "completed_pct" field.
func CompletedPctNEQ(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldCompletedPct, v))
}

// CompletedPctIn applies the In predicate on the "completed_pct" field.
func CompletedPctIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldCompletedPct, vs...))
}

// CompletedPctNotIn applies the NotIn predicate on the "completed_pct" field.
func CompletedPctNotIn(vs ...int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldCompletedPct, vs...))
}

// CompletedPctGT applies the GT predicate on the "completed_pct" field.
func CompletedPctGT(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldCompletedPct, v))
}

// CompletedPctGTE applies the GTE predicate on the "completed_pct" field.
func CompletedPctGTE(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldCompletedPct, v))
}

// CompletedPctLT applies the LT predicate on the "completed_pct" field.
func CompletedPctLT(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldCompletedPct, v))
}

// CompletedPctLTE applies the LTE predicate on the "completed_pct" field.
func CompletedPctLTE(v int) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldCompletedPct, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserProfile {
	return predicate.UserProfile(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssignments applies the HasEdge predicate on the "assignments" edge.
func HasAssignments() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssignmentsTable, AssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentsWith applies the HasEdge predicate on the "assignments" edge with a given conditions (other predicates).
func HasAssignmentsWith(preds ...predicate.VolunteerAssignment) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkills applies the HasEdge predicate on the "skills" edge.
func HasSkills() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillsWith applies the HasEdge predicate on the "skills" edge with a given conditions (other predicates).
func HasSkillsWith(preds ...predicate.UserSkill) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newSkillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Address) predicate.UserProfile {
	return predicate.UserProfile(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserProfile) predicate.UserProfile {
	return predicate.UserProfile(sql.NotPredicates(p))
}
