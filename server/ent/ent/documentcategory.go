// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/documentcategory"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DocumentCategory is the model entity for the DocumentCategory schema.
type DocumentCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name map[string]string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentCategoryQuery when eager-loading is set.
	Edges                    DocumentCategoryEdges `json:"edges"`
	document_category_parent *int
	selectValues             sql.SelectValues
}

// DocumentCategoryEdges holds the relations/edges for other nodes in the graph.
type DocumentCategoryEdges struct {
	// Children holds the value of the children edge.
	Children []*DocumentCategory `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *DocumentCategory `json:"parent,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentCategoryEdges) ChildrenOrErr() ([]*DocumentCategory, error) {
	if e.loadedTypes[0] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentCategoryEdges) ParentOrErr() (*DocumentCategory, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: documentcategory.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentCategoryEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[2] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case documentcategory.FieldName, documentcategory.FieldDescription:
			values[i] = new([]byte)
		case documentcategory.FieldIsActive:
			values[i] = new(sql.NullBool)
		case documentcategory.FieldID, documentcategory.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case documentcategory.FieldSlug:
			values[i] = new(sql.NullString)
		case documentcategory.FieldCreatedAt, documentcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case documentcategory.ForeignKeys[0]: // document_category_parent
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentCategory fields.
func (_m *DocumentCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case documentcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case documentcategory.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case documentcategory.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case documentcategory.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case documentcategory.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				_m.DisplayOrder = int(value.Int64)
			}
		case documentcategory.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case documentcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case documentcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case documentcategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field document_category_parent", value)
			} else if value.Valid {
				_m.document_category_parent = new(int)
				*_m.document_category_parent = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DocumentCategory.
// This includes values selected through modifiers, order, etc.
func (_m *DocumentCategory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChildren queries the "children" edge of the DocumentCategory entity.
func (_m *DocumentCategory) QueryChildren() *DocumentCategoryQuery {
	return NewDocumentCategoryClient(_m.config).QueryChildren(_m)
}

// QueryParent queries the "parent" edge of the DocumentCategory entity.
func (_m *DocumentCategory) QueryParent() *DocumentCategoryQuery {
	return NewDocumentCategoryClient(_m.config).QueryParent(_m)
}

// QueryDocuments queries the "documents" edge of the DocumentCategory entity.
func (_m *DocumentCategory) QueryDocuments() *DocumentQuery {
	return NewDocumentCategoryClient(_m.config).QueryDocuments(_m)
}

// Update returns a builder for updating this DocumentCategory.
// Note that you need to call DocumentCategory.Unwrap() before calling this method if this DocumentCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DocumentCategory) Update() *DocumentCategoryUpdateOne {
	return NewDocumentCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DocumentCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DocumentCategory) Unwrap() *DocumentCategory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DocumentCategory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DocumentCategory) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", _m.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", _m.DisplayOrder))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DocumentCategories is a parsable slice of DocumentCategory.
type DocumentCategories []*DocumentCategory
