// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/dashboardwidget"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DashboardWidgetCreate is the builder for creating a DashboardWidget entity.
type DashboardWidgetCreate struct {
	config
	mutation *DashboardWidgetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (_c *DashboardWidgetCreate) SetTitle(v map[string]string) *DashboardWidgetCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetType sets the "type" field.
func (_c *DashboardWidgetCreate) SetType(v string) *DashboardWidgetCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetConfig sets the "config" field.
func (_c *DashboardWidgetCreate) SetConfig(v map[string]interface{}) *DashboardWidgetCreate {
	_c.mutation.SetConfig(v)
	return _c
}

// SetDataSource sets the "data_source" field.
func (_c *DashboardWidgetCreate) SetDataSource(v string) *DashboardWidgetCreate {
	_c.mutation.SetDataSource(v)
	return _c
}

// SetQuery sets the "query" field.
func (_c *DashboardWidgetCreate) SetQuery(v map[string]interface{}) *DashboardWidgetCreate {
	_c.mutation.SetQuery(v)
	return _c
}

// SetOrder sets the "order" field.
func (_c *DashboardWidgetCreate) SetOrder(v int) *DashboardWidgetCreate {
	_c.mutation.SetOrder(v)
	return _c
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_c *DashboardWidgetCreate) SetNillableOrder(v *int) *DashboardWidgetCreate {
	if v != nil {
		_c.SetOrder(*v)
	}
	return _c
}

// SetPosition sets the "position" field.
func (_c *DashboardWidgetCreate) SetPosition(v map[string]int) *DashboardWidgetCreate {
	_c.mutation.SetPosition(v)
	return _c
}

// SetIsVisible sets the "is_visible" field.
func (_c *DashboardWidgetCreate) SetIsVisible(v bool) *DashboardWidgetCreate {
	_c.mutation.SetIsVisible(v)
	return _c
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_c *DashboardWidgetCreate) SetNillableIsVisible(v *bool) *DashboardWidgetCreate {
	if v != nil {
		_c.SetIsVisible(*v)
	}
	return _c
}

// SetRefreshRate sets the "refresh_rate" field.
func (_c *DashboardWidgetCreate) SetRefreshRate(v int) *DashboardWidgetCreate {
	_c.mutation.SetRefreshRate(v)
	return _c
}

// SetNillableRefreshRate sets the "refresh_rate" field if the given value is not nil.
func (_c *DashboardWidgetCreate) SetNillableRefreshRate(v *int) *DashboardWidgetCreate {
	if v != nil {
		_c.SetRefreshRate(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DashboardWidgetCreate) SetCreatedAt(v time.Time) *DashboardWidgetCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DashboardWidgetCreate) SetNillableCreatedAt(v *time.Time) *DashboardWidgetCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DashboardWidgetCreate) SetUpdatedAt(v time.Time) *DashboardWidgetCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DashboardWidgetCreate) SetNillableUpdatedAt(v *time.Time) *DashboardWidgetCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDashboardID sets the "dashboard" edge to the AnalyticsDashboard entity by ID.
func (_c *DashboardWidgetCreate) SetDashboardID(id int) *DashboardWidgetCreate {
	_c.mutation.SetDashboardID(id)
	return _c
}

// SetDashboard sets the "dashboard" edge to the AnalyticsDashboard entity.
func (_c *DashboardWidgetCreate) SetDashboard(v *AnalyticsDashboard) *DashboardWidgetCreate {
	return _c.SetDashboardID(v.ID)
}

// Mutation returns the DashboardWidgetMutation object of the builder.
func (_c *DashboardWidgetCreate) Mutation() *DashboardWidgetMutation {
	return _c.mutation
}

// Save creates the DashboardWidget in the database.
func (_c *DashboardWidgetCreate) Save(ctx context.Context) (*DashboardWidget, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DashboardWidgetCreate) SaveX(ctx context.Context) *DashboardWidget {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DashboardWidgetCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DashboardWidgetCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DashboardWidgetCreate) defaults() {
	if _, ok := _c.mutation.Order(); !ok {
		v := dashboardwidget.DefaultOrder
		_c.mutation.SetOrder(v)
	}
	if _, ok := _c.mutation.IsVisible(); !ok {
		v := dashboardwidget.DefaultIsVisible
		_c.mutation.SetIsVisible(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := dashboardwidget.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := dashboardwidget.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DashboardWidgetCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "DashboardWidget.title"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DashboardWidget.type"`)}
	}
	if _, ok := _c.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "DashboardWidget.config"`)}
	}
	if _, ok := _c.mutation.DataSource(); !ok {
		return &ValidationError{Name: "data_source", err: errors.New(`ent: missing required field "DashboardWidget.data_source"`)}
	}
	if _, ok := _c.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "DashboardWidget.order"`)}
	}
	if _, ok := _c.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "DashboardWidget.position"`)}
	}
	if _, ok := _c.mutation.IsVisible(); !ok {
		return &ValidationError{Name: "is_visible", err: errors.New(`ent: missing required field "DashboardWidget.is_visible"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DashboardWidget.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DashboardWidget.updated_at"`)}
	}
	if len(_c.mutation.DashboardIDs()) == 0 {
		return &ValidationError{Name: "dashboard", err: errors.New(`ent: missing required edge "DashboardWidget.dashboard"`)}
	}
	return nil
}

func (_c *DashboardWidgetCreate) sqlSave(ctx context.Context) (*DashboardWidget, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DashboardWidgetCreate) createSpec() (*DashboardWidget, *sqlgraph.CreateSpec) {
	var (
		_node = &DashboardWidget{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dashboardwidget.Table, sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(dashboardwidget.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(dashboardwidget.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Config(); ok {
		_spec.SetField(dashboardwidget.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if value, ok := _c.mutation.DataSource(); ok {
		_spec.SetField(dashboardwidget.FieldDataSource, field.TypeString, value)
		_node.DataSource = value
	}
	if value, ok := _c.mutation.Query(); ok {
		_spec.SetField(dashboardwidget.FieldQuery, field.TypeJSON, value)
		_node.Query = value
	}
	if value, ok := _c.mutation.Order(); ok {
		_spec.SetField(dashboardwidget.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := _c.mutation.Position(); ok {
		_spec.SetField(dashboardwidget.FieldPosition, field.TypeJSON, value)
		_node.Position = value
	}
	if value, ok := _c.mutation.IsVisible(); ok {
		_spec.SetField(dashboardwidget.FieldIsVisible, field.TypeBool, value)
		_node.IsVisible = value
	}
	if value, ok := _c.mutation.RefreshRate(); ok {
		_spec.SetField(dashboardwidget.FieldRefreshRate, field.TypeInt, value)
		_node.RefreshRate = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dashboardwidget.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dashboardwidget.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.DashboardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.analytics_dashboard_widgets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DashboardWidget.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DashboardWidgetUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *DashboardWidgetCreate) OnConflict(opts ...sql.ConflictOption) *DashboardWidgetUpsertOne {
	_c.conflict = opts
	return &DashboardWidgetUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DashboardWidgetCreate) OnConflictColumns(columns ...string) *DashboardWidgetUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DashboardWidgetUpsertOne{
		create: _c,
	}
}

type (
	// DashboardWidgetUpsertOne is the builder for "upsert"-ing
	//  one DashboardWidget node.
	DashboardWidgetUpsertOne struct {
		create *DashboardWidgetCreate
	}

	// DashboardWidgetUpsert is the "OnConflict" setter.
	DashboardWidgetUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *DashboardWidgetUpsert) SetTitle(v map[string]string) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateTitle() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldTitle)
	return u
}

// SetType sets the "type" field.
func (u *DashboardWidgetUpsert) SetType(v string) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateType() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldType)
	return u
}

// SetConfig sets the "config" field.
func (u *DashboardWidgetUpsert) SetConfig(v map[string]interface{}) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateConfig() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldConfig)
	return u
}

// SetDataSource sets the "data_source" field.
func (u *DashboardWidgetUpsert) SetDataSource(v string) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldDataSource, v)
	return u
}

// UpdateDataSource sets the "data_source" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateDataSource() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldDataSource)
	return u
}

// SetQuery sets the "query" field.
func (u *DashboardWidgetUpsert) SetQuery(v map[string]interface{}) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateQuery() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldQuery)
	return u
}

// ClearQuery clears the value of the "query" field.
func (u *DashboardWidgetUpsert) ClearQuery() *DashboardWidgetUpsert {
	u.SetNull(dashboardwidget.FieldQuery)
	return u
}

// SetOrder sets the "order" field.
func (u *DashboardWidgetUpsert) SetOrder(v int) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateOrder() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *DashboardWidgetUpsert) AddOrder(v int) *DashboardWidgetUpsert {
	u.Add(dashboardwidget.FieldOrder, v)
	return u
}

// SetPosition sets the "position" field.
func (u *DashboardWidgetUpsert) SetPosition(v map[string]int) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdatePosition() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldPosition)
	return u
}

// SetIsVisible sets the "is_visible" field.
func (u *DashboardWidgetUpsert) SetIsVisible(v bool) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldIsVisible, v)
	return u
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateIsVisible() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldIsVisible)
	return u
}

// SetRefreshRate sets the "refresh_rate" field.
func (u *DashboardWidgetUpsert) SetRefreshRate(v int) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldRefreshRate, v)
	return u
}

// UpdateRefreshRate sets the "refresh_rate" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateRefreshRate() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldRefreshRate)
	return u
}

// AddRefreshRate adds v to the "refresh_rate" field.
func (u *DashboardWidgetUpsert) AddRefreshRate(v int) *DashboardWidgetUpsert {
	u.Add(dashboardwidget.FieldRefreshRate, v)
	return u
}

// ClearRefreshRate clears the value of the "refresh_rate" field.
func (u *DashboardWidgetUpsert) ClearRefreshRate() *DashboardWidgetUpsert {
	u.SetNull(dashboardwidget.FieldRefreshRate)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DashboardWidgetUpsert) SetUpdatedAt(v time.Time) *DashboardWidgetUpsert {
	u.Set(dashboardwidget.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DashboardWidgetUpsert) UpdateUpdatedAt() *DashboardWidgetUpsert {
	u.SetExcluded(dashboardwidget.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DashboardWidgetUpsertOne) UpdateNewValues() *DashboardWidgetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dashboardwidget.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DashboardWidgetUpsertOne) Ignore() *DashboardWidgetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DashboardWidgetUpsertOne) DoNothing() *DashboardWidgetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DashboardWidgetCreate.OnConflict
// documentation for more info.
func (u *DashboardWidgetUpsertOne) Update(set func(*DashboardWidgetUpsert)) *DashboardWidgetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DashboardWidgetUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *DashboardWidgetUpsertOne) SetTitle(v map[string]string) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateTitle() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateTitle()
	})
}

// SetType sets the "type" field.
func (u *DashboardWidgetUpsertOne) SetType(v string) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateType() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateType()
	})
}

// SetConfig sets the "config" field.
func (u *DashboardWidgetUpsertOne) SetConfig(v map[string]interface{}) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateConfig() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateConfig()
	})
}

// SetDataSource sets the "data_source" field.
func (u *DashboardWidgetUpsertOne) SetDataSource(v string) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetDataSource(v)
	})
}

// UpdateDataSource sets the "data_source" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateDataSource() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateDataSource()
	})
}

// SetQuery sets the "query" field.
func (u *DashboardWidgetUpsertOne) SetQuery(v map[string]interface{}) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateQuery() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *DashboardWidgetUpsertOne) ClearQuery() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.ClearQuery()
	})
}

// SetOrder sets the "order" field.
func (u *DashboardWidgetUpsertOne) SetOrder(v int) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *DashboardWidgetUpsertOne) AddOrder(v int) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateOrder() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateOrder()
	})
}

// SetPosition sets the "position" field.
func (u *DashboardWidgetUpsertOne) SetPosition(v map[string]int) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdatePosition() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdatePosition()
	})
}

// SetIsVisible sets the "is_visible" field.
func (u *DashboardWidgetUpsertOne) SetIsVisible(v bool) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetIsVisible(v)
	})
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateIsVisible() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateIsVisible()
	})
}

// SetRefreshRate sets the "refresh_rate" field.
func (u *DashboardWidgetUpsertOne) SetRefreshRate(v int) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetRefreshRate(v)
	})
}

// AddRefreshRate adds v to the "refresh_rate" field.
func (u *DashboardWidgetUpsertOne) AddRefreshRate(v int) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.AddRefreshRate(v)
	})
}

// UpdateRefreshRate sets the "refresh_rate" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateRefreshRate() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateRefreshRate()
	})
}

// ClearRefreshRate clears the value of the "refresh_rate" field.
func (u *DashboardWidgetUpsertOne) ClearRefreshRate() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.ClearRefreshRate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DashboardWidgetUpsertOne) SetUpdatedAt(v time.Time) *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DashboardWidgetUpsertOne) UpdateUpdatedAt() *DashboardWidgetUpsertOne {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DashboardWidgetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DashboardWidgetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DashboardWidgetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DashboardWidgetUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DashboardWidgetUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DashboardWidgetCreateBulk is the builder for creating many DashboardWidget entities in bulk.
type DashboardWidgetCreateBulk struct {
	config
	err      error
	builders []*DashboardWidgetCreate
	conflict []sql.ConflictOption
}

// Save creates the DashboardWidget entities in the database.
func (_c *DashboardWidgetCreateBulk) Save(ctx context.Context) ([]*DashboardWidget, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DashboardWidget, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DashboardWidgetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DashboardWidgetCreateBulk) SaveX(ctx context.Context) []*DashboardWidget {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DashboardWidgetCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DashboardWidgetCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DashboardWidget.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DashboardWidgetUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (_c *DashboardWidgetCreateBulk) OnConflict(opts ...sql.ConflictOption) *DashboardWidgetUpsertBulk {
	_c.conflict = opts
	return &DashboardWidgetUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DashboardWidgetCreateBulk) OnConflictColumns(columns ...string) *DashboardWidgetUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DashboardWidgetUpsertBulk{
		create: _c,
	}
}

// DashboardWidgetUpsertBulk is the builder for "upsert"-ing
// a bulk of DashboardWidget nodes.
type DashboardWidgetUpsertBulk struct {
	create *DashboardWidgetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DashboardWidgetUpsertBulk) UpdateNewValues() *DashboardWidgetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dashboardwidget.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DashboardWidget.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DashboardWidgetUpsertBulk) Ignore() *DashboardWidgetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DashboardWidgetUpsertBulk) DoNothing() *DashboardWidgetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DashboardWidgetCreateBulk.OnConflict
// documentation for more info.
func (u *DashboardWidgetUpsertBulk) Update(set func(*DashboardWidgetUpsert)) *DashboardWidgetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DashboardWidgetUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *DashboardWidgetUpsertBulk) SetTitle(v map[string]string) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateTitle() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateTitle()
	})
}

// SetType sets the "type" field.
func (u *DashboardWidgetUpsertBulk) SetType(v string) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateType() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateType()
	})
}

// SetConfig sets the "config" field.
func (u *DashboardWidgetUpsertBulk) SetConfig(v map[string]interface{}) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateConfig() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateConfig()
	})
}

// SetDataSource sets the "data_source" field.
func (u *DashboardWidgetUpsertBulk) SetDataSource(v string) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetDataSource(v)
	})
}

// UpdateDataSource sets the "data_source" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateDataSource() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateDataSource()
	})
}

// SetQuery sets the "query" field.
func (u *DashboardWidgetUpsertBulk) SetQuery(v map[string]interface{}) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateQuery() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *DashboardWidgetUpsertBulk) ClearQuery() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.ClearQuery()
	})
}

// SetOrder sets the "order" field.
func (u *DashboardWidgetUpsertBulk) SetOrder(v int) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *DashboardWidgetUpsertBulk) AddOrder(v int) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateOrder() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateOrder()
	})
}

// SetPosition sets the "position" field.
func (u *DashboardWidgetUpsertBulk) SetPosition(v map[string]int) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdatePosition() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdatePosition()
	})
}

// SetIsVisible sets the "is_visible" field.
func (u *DashboardWidgetUpsertBulk) SetIsVisible(v bool) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetIsVisible(v)
	})
}

// UpdateIsVisible sets the "is_visible" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateIsVisible() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateIsVisible()
	})
}

// SetRefreshRate sets the "refresh_rate" field.
func (u *DashboardWidgetUpsertBulk) SetRefreshRate(v int) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetRefreshRate(v)
	})
}

// AddRefreshRate adds v to the "refresh_rate" field.
func (u *DashboardWidgetUpsertBulk) AddRefreshRate(v int) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.AddRefreshRate(v)
	})
}

// UpdateRefreshRate sets the "refresh_rate" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateRefreshRate() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateRefreshRate()
	})
}

// ClearRefreshRate clears the value of the "refresh_rate" field.
func (u *DashboardWidgetUpsertBulk) ClearRefreshRate() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.ClearRefreshRate()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DashboardWidgetUpsertBulk) SetUpdatedAt(v time.Time) *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DashboardWidgetUpsertBulk) UpdateUpdatedAt() *DashboardWidgetUpsertBulk {
	return u.Update(func(s *DashboardWidgetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DashboardWidgetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DashboardWidgetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DashboardWidgetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DashboardWidgetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
