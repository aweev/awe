// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportPermissionCreate is the builder for creating a ReportPermission entity.
type ReportPermissionCreate struct {
	config
	mutation *ReportPermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRoleID sets the "role_id" field.
func (_c *ReportPermissionCreate) SetRoleID(v string) *ReportPermissionCreate {
	_c.mutation.SetRoleID(v)
	return _c
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableRoleID(v *string) *ReportPermissionCreate {
	if v != nil {
		_c.SetRoleID(*v)
	}
	return _c
}

// SetCanView sets the "can_view" field.
func (_c *ReportPermissionCreate) SetCanView(v bool) *ReportPermissionCreate {
	_c.mutation.SetCanView(v)
	return _c
}

// SetNillableCanView sets the "can_view" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableCanView(v *bool) *ReportPermissionCreate {
	if v != nil {
		_c.SetCanView(*v)
	}
	return _c
}

// SetCanEdit sets the "can_edit" field.
func (_c *ReportPermissionCreate) SetCanEdit(v bool) *ReportPermissionCreate {
	_c.mutation.SetCanEdit(v)
	return _c
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableCanEdit(v *bool) *ReportPermissionCreate {
	if v != nil {
		_c.SetCanEdit(*v)
	}
	return _c
}

// SetCanDelete sets the "can_delete" field.
func (_c *ReportPermissionCreate) SetCanDelete(v bool) *ReportPermissionCreate {
	_c.mutation.SetCanDelete(v)
	return _c
}

// SetNillableCanDelete sets the "can_delete" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableCanDelete(v *bool) *ReportPermissionCreate {
	if v != nil {
		_c.SetCanDelete(*v)
	}
	return _c
}

// SetCanSchedule sets the "can_schedule" field.
func (_c *ReportPermissionCreate) SetCanSchedule(v bool) *ReportPermissionCreate {
	_c.mutation.SetCanSchedule(v)
	return _c
}

// SetNillableCanSchedule sets the "can_schedule" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableCanSchedule(v *bool) *ReportPermissionCreate {
	if v != nil {
		_c.SetCanSchedule(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ReportPermissionCreate) SetCreatedAt(v time.Time) *ReportPermissionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableCreatedAt(v *time.Time) *ReportPermissionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_c *ReportPermissionCreate) SetReportDefinitionID(id int) *ReportPermissionCreate {
	_c.mutation.SetReportDefinitionID(id)
	return _c
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_c *ReportPermissionCreate) SetReportDefinition(v *ReportDefinition) *ReportPermissionCreate {
	return _c.SetReportDefinitionID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *ReportPermissionCreate) SetUserID(id int) *ReportPermissionCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *ReportPermissionCreate) SetNillableUserID(id *int) *ReportPermissionCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *ReportPermissionCreate) SetUser(v *User) *ReportPermissionCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the ReportPermissionMutation object of the builder.
func (_c *ReportPermissionCreate) Mutation() *ReportPermissionMutation {
	return _c.mutation
}

// Save creates the ReportPermission in the database.
func (_c *ReportPermissionCreate) Save(ctx context.Context) (*ReportPermission, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ReportPermissionCreate) SaveX(ctx context.Context) *ReportPermission {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportPermissionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportPermissionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ReportPermissionCreate) defaults() {
	if _, ok := _c.mutation.CanView(); !ok {
		v := reportpermission.DefaultCanView
		_c.mutation.SetCanView(v)
	}
	if _, ok := _c.mutation.CanEdit(); !ok {
		v := reportpermission.DefaultCanEdit
		_c.mutation.SetCanEdit(v)
	}
	if _, ok := _c.mutation.CanDelete(); !ok {
		v := reportpermission.DefaultCanDelete
		_c.mutation.SetCanDelete(v)
	}
	if _, ok := _c.mutation.CanSchedule(); !ok {
		v := reportpermission.DefaultCanSchedule
		_c.mutation.SetCanSchedule(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := reportpermission.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ReportPermissionCreate) check() error {
	if _, ok := _c.mutation.CanView(); !ok {
		return &ValidationError{Name: "can_view", err: errors.New(`ent: missing required field "ReportPermission.can_view"`)}
	}
	if _, ok := _c.mutation.CanEdit(); !ok {
		return &ValidationError{Name: "can_edit", err: errors.New(`ent: missing required field "ReportPermission.can_edit"`)}
	}
	if _, ok := _c.mutation.CanDelete(); !ok {
		return &ValidationError{Name: "can_delete", err: errors.New(`ent: missing required field "ReportPermission.can_delete"`)}
	}
	if _, ok := _c.mutation.CanSchedule(); !ok {
		return &ValidationError{Name: "can_schedule", err: errors.New(`ent: missing required field "ReportPermission.can_schedule"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReportPermission.created_at"`)}
	}
	if len(_c.mutation.ReportDefinitionIDs()) == 0 {
		return &ValidationError{Name: "report_definition", err: errors.New(`ent: missing required edge "ReportPermission.report_definition"`)}
	}
	return nil
}

func (_c *ReportPermissionCreate) sqlSave(ctx context.Context) (*ReportPermission, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ReportPermissionCreate) createSpec() (*ReportPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportPermission{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(reportpermission.Table, sqlgraph.NewFieldSpec(reportpermission.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.RoleID(); ok {
		_spec.SetField(reportpermission.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	if value, ok := _c.mutation.CanView(); ok {
		_spec.SetField(reportpermission.FieldCanView, field.TypeBool, value)
		_node.CanView = value
	}
	if value, ok := _c.mutation.CanEdit(); ok {
		_spec.SetField(reportpermission.FieldCanEdit, field.TypeBool, value)
		_node.CanEdit = value
	}
	if value, ok := _c.mutation.CanDelete(); ok {
		_spec.SetField(reportpermission.FieldCanDelete, field.TypeBool, value)
		_node.CanDelete = value
	}
	if value, ok := _c.mutation.CanSchedule(); ok {
		_spec.SetField(reportpermission.FieldCanSchedule, field.TypeBool, value)
		_node.CanSchedule = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(reportpermission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_definition_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_report_permissions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReportPermission.Create().
//		SetRoleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReportPermissionUpsert) {
//			SetRoleID(v+v).
//		}).
//		Exec(ctx)
func (_c *ReportPermissionCreate) OnConflict(opts ...sql.ConflictOption) *ReportPermissionUpsertOne {
	_c.conflict = opts
	return &ReportPermissionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ReportPermissionCreate) OnConflictColumns(columns ...string) *ReportPermissionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ReportPermissionUpsertOne{
		create: _c,
	}
}

type (
	// ReportPermissionUpsertOne is the builder for "upsert"-ing
	//  one ReportPermission node.
	ReportPermissionUpsertOne struct {
		create *ReportPermissionCreate
	}

	// ReportPermissionUpsert is the "OnConflict" setter.
	ReportPermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetRoleID sets the "role_id" field.
func (u *ReportPermissionUpsert) SetRoleID(v string) *ReportPermissionUpsert {
	u.Set(reportpermission.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *ReportPermissionUpsert) UpdateRoleID() *ReportPermissionUpsert {
	u.SetExcluded(reportpermission.FieldRoleID)
	return u
}

// ClearRoleID clears the value of the "role_id" field.
func (u *ReportPermissionUpsert) ClearRoleID() *ReportPermissionUpsert {
	u.SetNull(reportpermission.FieldRoleID)
	return u
}

// SetCanView sets the "can_view" field.
func (u *ReportPermissionUpsert) SetCanView(v bool) *ReportPermissionUpsert {
	u.Set(reportpermission.FieldCanView, v)
	return u
}

// UpdateCanView sets the "can_view" field to the value that was provided on create.
func (u *ReportPermissionUpsert) UpdateCanView() *ReportPermissionUpsert {
	u.SetExcluded(reportpermission.FieldCanView)
	return u
}

// SetCanEdit sets the "can_edit" field.
func (u *ReportPermissionUpsert) SetCanEdit(v bool) *ReportPermissionUpsert {
	u.Set(reportpermission.FieldCanEdit, v)
	return u
}

// UpdateCanEdit sets the "can_edit" field to the value that was provided on create.
func (u *ReportPermissionUpsert) UpdateCanEdit() *ReportPermissionUpsert {
	u.SetExcluded(reportpermission.FieldCanEdit)
	return u
}

// SetCanDelete sets the "can_delete" field.
func (u *ReportPermissionUpsert) SetCanDelete(v bool) *ReportPermissionUpsert {
	u.Set(reportpermission.FieldCanDelete, v)
	return u
}

// UpdateCanDelete sets the "can_delete" field to the value that was provided on create.
func (u *ReportPermissionUpsert) UpdateCanDelete() *ReportPermissionUpsert {
	u.SetExcluded(reportpermission.FieldCanDelete)
	return u
}

// SetCanSchedule sets the "can_schedule" field.
func (u *ReportPermissionUpsert) SetCanSchedule(v bool) *ReportPermissionUpsert {
	u.Set(reportpermission.FieldCanSchedule, v)
	return u
}

// UpdateCanSchedule sets the "can_schedule" field to the value that was provided on create.
func (u *ReportPermissionUpsert) UpdateCanSchedule() *ReportPermissionUpsert {
	u.SetExcluded(reportpermission.FieldCanSchedule)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReportPermissionUpsertOne) UpdateNewValues() *ReportPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(reportpermission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReportPermissionUpsertOne) Ignore() *ReportPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReportPermissionUpsertOne) DoNothing() *ReportPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReportPermissionCreate.OnConflict
// documentation for more info.
func (u *ReportPermissionUpsertOne) Update(set func(*ReportPermissionUpsert)) *ReportPermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReportPermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoleID sets the "role_id" field.
func (u *ReportPermissionUpsertOne) SetRoleID(v string) *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *ReportPermissionUpsertOne) UpdateRoleID() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *ReportPermissionUpsertOne) ClearRoleID() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.ClearRoleID()
	})
}

// SetCanView sets the "can_view" field.
func (u *ReportPermissionUpsertOne) SetCanView(v bool) *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanView(v)
	})
}

// UpdateCanView sets the "can_view" field to the value that was provided on create.
func (u *ReportPermissionUpsertOne) UpdateCanView() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanView()
	})
}

// SetCanEdit sets the "can_edit" field.
func (u *ReportPermissionUpsertOne) SetCanEdit(v bool) *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanEdit(v)
	})
}

// UpdateCanEdit sets the "can_edit" field to the value that was provided on create.
func (u *ReportPermissionUpsertOne) UpdateCanEdit() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanEdit()
	})
}

// SetCanDelete sets the "can_delete" field.
func (u *ReportPermissionUpsertOne) SetCanDelete(v bool) *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanDelete(v)
	})
}

// UpdateCanDelete sets the "can_delete" field to the value that was provided on create.
func (u *ReportPermissionUpsertOne) UpdateCanDelete() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanDelete()
	})
}

// SetCanSchedule sets the "can_schedule" field.
func (u *ReportPermissionUpsertOne) SetCanSchedule(v bool) *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanSchedule(v)
	})
}

// UpdateCanSchedule sets the "can_schedule" field to the value that was provided on create.
func (u *ReportPermissionUpsertOne) UpdateCanSchedule() *ReportPermissionUpsertOne {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanSchedule()
	})
}

// Exec executes the query.
func (u *ReportPermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReportPermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReportPermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReportPermissionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReportPermissionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReportPermissionCreateBulk is the builder for creating many ReportPermission entities in bulk.
type ReportPermissionCreateBulk struct {
	config
	err      error
	builders []*ReportPermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the ReportPermission entities in the database.
func (_c *ReportPermissionCreateBulk) Save(ctx context.Context) ([]*ReportPermission, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ReportPermission, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ReportPermissionCreateBulk) SaveX(ctx context.Context) []*ReportPermission {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ReportPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ReportPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReportPermission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReportPermissionUpsert) {
//			SetRoleID(v+v).
//		}).
//		Exec(ctx)
func (_c *ReportPermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReportPermissionUpsertBulk {
	_c.conflict = opts
	return &ReportPermissionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ReportPermissionCreateBulk) OnConflictColumns(columns ...string) *ReportPermissionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ReportPermissionUpsertBulk{
		create: _c,
	}
}

// ReportPermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of ReportPermission nodes.
type ReportPermissionUpsertBulk struct {
	create *ReportPermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReportPermissionUpsertBulk) UpdateNewValues() *ReportPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(reportpermission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReportPermission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReportPermissionUpsertBulk) Ignore() *ReportPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReportPermissionUpsertBulk) DoNothing() *ReportPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReportPermissionCreateBulk.OnConflict
// documentation for more info.
func (u *ReportPermissionUpsertBulk) Update(set func(*ReportPermissionUpsert)) *ReportPermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReportPermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoleID sets the "role_id" field.
func (u *ReportPermissionUpsertBulk) SetRoleID(v string) *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *ReportPermissionUpsertBulk) UpdateRoleID() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *ReportPermissionUpsertBulk) ClearRoleID() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.ClearRoleID()
	})
}

// SetCanView sets the "can_view" field.
func (u *ReportPermissionUpsertBulk) SetCanView(v bool) *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanView(v)
	})
}

// UpdateCanView sets the "can_view" field to the value that was provided on create.
func (u *ReportPermissionUpsertBulk) UpdateCanView() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanView()
	})
}

// SetCanEdit sets the "can_edit" field.
func (u *ReportPermissionUpsertBulk) SetCanEdit(v bool) *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanEdit(v)
	})
}

// UpdateCanEdit sets the "can_edit" field to the value that was provided on create.
func (u *ReportPermissionUpsertBulk) UpdateCanEdit() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanEdit()
	})
}

// SetCanDelete sets the "can_delete" field.
func (u *ReportPermissionUpsertBulk) SetCanDelete(v bool) *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanDelete(v)
	})
}

// UpdateCanDelete sets the "can_delete" field to the value that was provided on create.
func (u *ReportPermissionUpsertBulk) UpdateCanDelete() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanDelete()
	})
}

// SetCanSchedule sets the "can_schedule" field.
func (u *ReportPermissionUpsertBulk) SetCanSchedule(v bool) *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.SetCanSchedule(v)
	})
}

// UpdateCanSchedule sets the "can_schedule" field to the value that was provided on create.
func (u *ReportPermissionUpsertBulk) UpdateCanSchedule() *ReportPermissionUpsertBulk {
	return u.Update(func(s *ReportPermissionUpsert) {
		s.UpdateCanSchedule()
	})
}

// Exec executes the query.
func (u *ReportPermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReportPermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReportPermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReportPermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
