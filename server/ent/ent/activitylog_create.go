// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/activitylog"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityLogCreate is the builder for creating a ActivityLog entity.
type ActivityLogCreate struct {
	config
	mutation *ActivityLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (_c *ActivityLogCreate) SetType(v activitylog.Type) *ActivityLogCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ActivityLogCreate) SetTitle(v string) *ActivityLogCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ActivityLogCreate) SetDescription(v string) *ActivityLogCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableDescription(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetLinkHref sets the "link_href" field.
func (_c *ActivityLogCreate) SetLinkHref(v string) *ActivityLogCreate {
	_c.mutation.SetLinkHref(v)
	return _c
}

// SetNillableLinkHref sets the "link_href" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableLinkHref(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetLinkHref(*v)
	}
	return _c
}

// SetEntityType sets the "entity_type" field.
func (_c *ActivityLogCreate) SetEntityType(v string) *ActivityLogCreate {
	_c.mutation.SetEntityType(v)
	return _c
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableEntityType(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetEntityType(*v)
	}
	return _c
}

// SetEntityID sets the "entity_id" field.
func (_c *ActivityLogCreate) SetEntityID(v string) *ActivityLogCreate {
	_c.mutation.SetEntityID(v)
	return _c
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableEntityID(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetEntityID(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *ActivityLogCreate) SetMetadata(v map[string]interface{}) *ActivityLogCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *ActivityLogCreate) SetIPAddress(v string) *ActivityLogCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableIPAddress(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *ActivityLogCreate) SetUserAgent(v string) *ActivityLogCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableUserAgent(v *string) *ActivityLogCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ActivityLogCreate) SetCreatedAt(v time.Time) *ActivityLogCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableCreatedAt(v *time.Time) *ActivityLogCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetActorID sets the "actor" edge to the User entity by ID.
func (_c *ActivityLogCreate) SetActorID(id int) *ActivityLogCreate {
	_c.mutation.SetActorID(id)
	return _c
}

// SetNillableActorID sets the "actor" edge to the User entity by ID if the given value is not nil.
func (_c *ActivityLogCreate) SetNillableActorID(id *int) *ActivityLogCreate {
	if id != nil {
		_c = _c.SetActorID(*id)
	}
	return _c
}

// SetActor sets the "actor" edge to the User entity.
func (_c *ActivityLogCreate) SetActor(v *User) *ActivityLogCreate {
	return _c.SetActorID(v.ID)
}

// Mutation returns the ActivityLogMutation object of the builder.
func (_c *ActivityLogCreate) Mutation() *ActivityLogMutation {
	return _c.mutation
}

// Save creates the ActivityLog in the database.
func (_c *ActivityLogCreate) Save(ctx context.Context) (*ActivityLog, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ActivityLogCreate) SaveX(ctx context.Context) *ActivityLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ActivityLogCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ActivityLogCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ActivityLogCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := activitylog.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ActivityLogCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ActivityLog.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := activitylog.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ActivityLog.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ActivityLog.title"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ActivityLog.created_at"`)}
	}
	return nil
}

func (_c *ActivityLogCreate) sqlSave(ctx context.Context) (*ActivityLog, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ActivityLogCreate) createSpec() (*ActivityLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityLog{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(activitylog.Table, sqlgraph.NewFieldSpec(activitylog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(activitylog.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(activitylog.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(activitylog.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.LinkHref(); ok {
		_spec.SetField(activitylog.FieldLinkHref, field.TypeString, value)
		_node.LinkHref = value
	}
	if value, ok := _c.mutation.EntityType(); ok {
		_spec.SetField(activitylog.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := _c.mutation.EntityID(); ok {
		_spec.SetField(activitylog.FieldEntityID, field.TypeString, value)
		_node.EntityID = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(activitylog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(activitylog.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(activitylog.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(activitylog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_activity_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActivityLog.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityLogUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *ActivityLogCreate) OnConflict(opts ...sql.ConflictOption) *ActivityLogUpsertOne {
	_c.conflict = opts
	return &ActivityLogUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ActivityLogCreate) OnConflictColumns(columns ...string) *ActivityLogUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ActivityLogUpsertOne{
		create: _c,
	}
}

type (
	// ActivityLogUpsertOne is the builder for "upsert"-ing
	//  one ActivityLog node.
	ActivityLogUpsertOne struct {
		create *ActivityLogCreate
	}

	// ActivityLogUpsert is the "OnConflict" setter.
	ActivityLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *ActivityLogUpsert) SetType(v activitylog.Type) *ActivityLogUpsert {
	u.Set(activitylog.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateType() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldType)
	return u
}

// SetTitle sets the "title" field.
func (u *ActivityLogUpsert) SetTitle(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateTitle() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *ActivityLogUpsert) SetDescription(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateDescription() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ActivityLogUpsert) ClearDescription() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldDescription)
	return u
}

// SetLinkHref sets the "link_href" field.
func (u *ActivityLogUpsert) SetLinkHref(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldLinkHref, v)
	return u
}

// UpdateLinkHref sets the "link_href" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateLinkHref() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldLinkHref)
	return u
}

// ClearLinkHref clears the value of the "link_href" field.
func (u *ActivityLogUpsert) ClearLinkHref() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldLinkHref)
	return u
}

// SetEntityType sets the "entity_type" field.
func (u *ActivityLogUpsert) SetEntityType(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldEntityType, v)
	return u
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateEntityType() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldEntityType)
	return u
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *ActivityLogUpsert) ClearEntityType() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldEntityType)
	return u
}

// SetEntityID sets the "entity_id" field.
func (u *ActivityLogUpsert) SetEntityID(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldEntityID, v)
	return u
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateEntityID() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldEntityID)
	return u
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *ActivityLogUpsert) ClearEntityID() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldEntityID)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ActivityLogUpsert) SetMetadata(v map[string]interface{}) *ActivityLogUpsert {
	u.Set(activitylog.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateMetadata() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityLogUpsert) ClearMetadata() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldMetadata)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityLogUpsert) SetIPAddress(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateIPAddress() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityLogUpsert) ClearIPAddress() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityLogUpsert) SetUserAgent(v string) *ActivityLogUpsert {
	u.Set(activitylog.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateUserAgent() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityLogUpsert) ClearUserAgent() *ActivityLogUpsert {
	u.SetNull(activitylog.FieldUserAgent)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityLogUpsert) SetCreatedAt(v time.Time) *ActivityLogUpsert {
	u.Set(activitylog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityLogUpsert) UpdateCreatedAt() *ActivityLogUpsert {
	u.SetExcluded(activitylog.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActivityLogUpsertOne) UpdateNewValues() *ActivityLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityLogUpsertOne) Ignore() *ActivityLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityLogUpsertOne) DoNothing() *ActivityLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityLogCreate.OnConflict
// documentation for more info.
func (u *ActivityLogUpsertOne) Update(set func(*ActivityLogUpsert)) *ActivityLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ActivityLogUpsertOne) SetType(v activitylog.Type) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateType() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *ActivityLogUpsertOne) SetTitle(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateTitle() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *ActivityLogUpsertOne) SetDescription(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateDescription() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ActivityLogUpsertOne) ClearDescription() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearDescription()
	})
}

// SetLinkHref sets the "link_href" field.
func (u *ActivityLogUpsertOne) SetLinkHref(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetLinkHref(v)
	})
}

// UpdateLinkHref sets the "link_href" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateLinkHref() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateLinkHref()
	})
}

// ClearLinkHref clears the value of the "link_href" field.
func (u *ActivityLogUpsertOne) ClearLinkHref() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearLinkHref()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *ActivityLogUpsertOne) SetEntityType(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateEntityType() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *ActivityLogUpsertOne) ClearEntityType() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearEntityType()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *ActivityLogUpsertOne) SetEntityID(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateEntityID() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateEntityID()
	})
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *ActivityLogUpsertOne) ClearEntityID() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearEntityID()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ActivityLogUpsertOne) SetMetadata(v map[string]interface{}) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateMetadata() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityLogUpsertOne) ClearMetadata() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearMetadata()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityLogUpsertOne) SetIPAddress(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateIPAddress() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityLogUpsertOne) ClearIPAddress() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityLogUpsertOne) SetUserAgent(v string) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateUserAgent() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityLogUpsertOne) ClearUserAgent() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearUserAgent()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityLogUpsertOne) SetCreatedAt(v time.Time) *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityLogUpsertOne) UpdateCreatedAt() *ActivityLogUpsertOne {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ActivityLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityLogCreateBulk is the builder for creating many ActivityLog entities in bulk.
type ActivityLogCreateBulk struct {
	config
	err      error
	builders []*ActivityLogCreate
	conflict []sql.ConflictOption
}

// Save creates the ActivityLog entities in the database.
func (_c *ActivityLogCreateBulk) Save(ctx context.Context) ([]*ActivityLog, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ActivityLog, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ActivityLogCreateBulk) SaveX(ctx context.Context) []*ActivityLog {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ActivityLogCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ActivityLogCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActivityLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityLogUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *ActivityLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityLogUpsertBulk {
	_c.conflict = opts
	return &ActivityLogUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ActivityLogCreateBulk) OnConflictColumns(columns ...string) *ActivityLogUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ActivityLogUpsertBulk{
		create: _c,
	}
}

// ActivityLogUpsertBulk is the builder for "upsert"-ing
// a bulk of ActivityLog nodes.
type ActivityLogUpsertBulk struct {
	create *ActivityLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActivityLogUpsertBulk) UpdateNewValues() *ActivityLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActivityLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityLogUpsertBulk) Ignore() *ActivityLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityLogUpsertBulk) DoNothing() *ActivityLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityLogCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityLogUpsertBulk) Update(set func(*ActivityLogUpsert)) *ActivityLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *ActivityLogUpsertBulk) SetType(v activitylog.Type) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateType() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *ActivityLogUpsertBulk) SetTitle(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateTitle() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *ActivityLogUpsertBulk) SetDescription(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateDescription() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ActivityLogUpsertBulk) ClearDescription() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearDescription()
	})
}

// SetLinkHref sets the "link_href" field.
func (u *ActivityLogUpsertBulk) SetLinkHref(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetLinkHref(v)
	})
}

// UpdateLinkHref sets the "link_href" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateLinkHref() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateLinkHref()
	})
}

// ClearLinkHref clears the value of the "link_href" field.
func (u *ActivityLogUpsertBulk) ClearLinkHref() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearLinkHref()
	})
}

// SetEntityType sets the "entity_type" field.
func (u *ActivityLogUpsertBulk) SetEntityType(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateEntityType() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateEntityType()
	})
}

// ClearEntityType clears the value of the "entity_type" field.
func (u *ActivityLogUpsertBulk) ClearEntityType() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearEntityType()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *ActivityLogUpsertBulk) SetEntityID(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateEntityID() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateEntityID()
	})
}

// ClearEntityID clears the value of the "entity_id" field.
func (u *ActivityLogUpsertBulk) ClearEntityID() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearEntityID()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ActivityLogUpsertBulk) SetMetadata(v map[string]interface{}) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateMetadata() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *ActivityLogUpsertBulk) ClearMetadata() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearMetadata()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *ActivityLogUpsertBulk) SetIPAddress(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateIPAddress() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *ActivityLogUpsertBulk) ClearIPAddress() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *ActivityLogUpsertBulk) SetUserAgent(v string) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateUserAgent() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *ActivityLogUpsertBulk) ClearUserAgent() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.ClearUserAgent()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ActivityLogUpsertBulk) SetCreatedAt(v time.Time) *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ActivityLogUpsertBulk) UpdateCreatedAt() *ActivityLogUpsertBulk {
	return u.Update(func(s *ActivityLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ActivityLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
