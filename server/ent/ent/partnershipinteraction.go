// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PartnershipInteraction is the model entity for the PartnershipInteraction schema.
type PartnershipInteraction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InteractionType holds the value of the "interaction_type" field.
	InteractionType string `json:"interaction_type,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// InteractedAt holds the value of the "interacted_at" field.
	InteractedAt time.Time `json:"interacted_at,omitempty"`
	// Attendees holds the value of the "attendees" field.
	Attendees []string `json:"attendees,omitempty"`
	// FollowUpRequired holds the value of the "follow_up_required" field.
	FollowUpRequired bool `json:"follow_up_required,omitempty"`
	// FollowUpDate holds the value of the "follow_up_date" field.
	FollowUpDate time.Time `json:"follow_up_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnershipInteractionQuery when eager-loading is set.
	Edges                    PartnershipInteractionEdges `json:"edges"`
	partnership_interactions *int
	selectValues             sql.SelectValues
}

// PartnershipInteractionEdges holds the relations/edges for other nodes in the graph.
type PartnershipInteractionEdges struct {
	// Partnership holds the value of the partnership edge.
	Partnership *Partnership `json:"partnership,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartnershipOrErr returns the Partnership value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnershipInteractionEdges) PartnershipOrErr() (*Partnership, error) {
	if e.Partnership != nil {
		return e.Partnership, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: partnership.Label}
	}
	return nil, &NotLoadedError{edge: "partnership"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartnershipInteraction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partnershipinteraction.FieldAttendees:
			values[i] = new([]byte)
		case partnershipinteraction.FieldFollowUpRequired:
			values[i] = new(sql.NullBool)
		case partnershipinteraction.FieldID:
			values[i] = new(sql.NullInt64)
		case partnershipinteraction.FieldInteractionType, partnershipinteraction.FieldSubject, partnershipinteraction.FieldSummary:
			values[i] = new(sql.NullString)
		case partnershipinteraction.FieldInteractedAt, partnershipinteraction.FieldFollowUpDate, partnershipinteraction.FieldCreatedAt, partnershipinteraction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case partnershipinteraction.ForeignKeys[0]: // partnership_interactions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartnershipInteraction fields.
func (_m *PartnershipInteraction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partnershipinteraction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case partnershipinteraction.FieldInteractionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interaction_type", values[i])
			} else if value.Valid {
				_m.InteractionType = value.String
			}
		case partnershipinteraction.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				_m.Subject = value.String
			}
		case partnershipinteraction.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				_m.Summary = value.String
			}
		case partnershipinteraction.FieldInteractedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field interacted_at", values[i])
			} else if value.Valid {
				_m.InteractedAt = value.Time
			}
		case partnershipinteraction.FieldAttendees:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attendees", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Attendees); err != nil {
					return fmt.Errorf("unmarshal field attendees: %w", err)
				}
			}
		case partnershipinteraction.FieldFollowUpRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field follow_up_required", values[i])
			} else if value.Valid {
				_m.FollowUpRequired = value.Bool
			}
		case partnershipinteraction.FieldFollowUpDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field follow_up_date", values[i])
			} else if value.Valid {
				_m.FollowUpDate = value.Time
			}
		case partnershipinteraction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case partnershipinteraction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case partnershipinteraction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field partnership_interactions", value)
			} else if value.Valid {
				_m.partnership_interactions = new(int)
				*_m.partnership_interactions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PartnershipInteraction.
// This includes values selected through modifiers, order, etc.
func (_m *PartnershipInteraction) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPartnership queries the "partnership" edge of the PartnershipInteraction entity.
func (_m *PartnershipInteraction) QueryPartnership() *PartnershipQuery {
	return NewPartnershipInteractionClient(_m.config).QueryPartnership(_m)
}

// Update returns a builder for updating this PartnershipInteraction.
// Note that you need to call PartnershipInteraction.Unwrap() before calling this method if this PartnershipInteraction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PartnershipInteraction) Update() *PartnershipInteractionUpdateOne {
	return NewPartnershipInteractionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PartnershipInteraction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PartnershipInteraction) Unwrap() *PartnershipInteraction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartnershipInteraction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PartnershipInteraction) String() string {
	var builder strings.Builder
	builder.WriteString("PartnershipInteraction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("interaction_type=")
	builder.WriteString(_m.InteractionType)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(_m.Subject)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(_m.Summary)
	builder.WriteString(", ")
	builder.WriteString("interacted_at=")
	builder.WriteString(_m.InteractedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attendees=")
	builder.WriteString(fmt.Sprintf("%v", _m.Attendees))
	builder.WriteString(", ")
	builder.WriteString("follow_up_required=")
	builder.WriteString(fmt.Sprintf("%v", _m.FollowUpRequired))
	builder.WriteString(", ")
	builder.WriteString("follow_up_date=")
	builder.WriteString(_m.FollowUpDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PartnershipInteractions is a parsable slice of PartnershipInteraction.
type PartnershipInteractions []*PartnershipInteraction
