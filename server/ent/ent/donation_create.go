// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DonationCreate is the builder for creating a Donation entity.
type DonationCreate struct {
	config
	mutation *DonationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAmount sets the "amount" field.
func (_c *DonationCreate) SetAmount(v float64) *DonationCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *DonationCreate) SetCurrency(v string) *DonationCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *DonationCreate) SetNillableCurrency(v *string) *DonationCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetIsRecurring sets the "is_recurring" field.
func (_c *DonationCreate) SetIsRecurring(v bool) *DonationCreate {
	_c.mutation.SetIsRecurring(v)
	return _c
}

// SetNillableIsRecurring sets the "is_recurring" field if the given value is not nil.
func (_c *DonationCreate) SetNillableIsRecurring(v *bool) *DonationCreate {
	if v != nil {
		_c.SetIsRecurring(*v)
	}
	return _c
}

// SetFrequency sets the "frequency" field.
func (_c *DonationCreate) SetFrequency(v string) *DonationCreate {
	_c.mutation.SetFrequency(v)
	return _c
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (_c *DonationCreate) SetNillableFrequency(v *string) *DonationCreate {
	if v != nil {
		_c.SetFrequency(*v)
	}
	return _c
}

// SetPaymentMethod sets the "payment_method" field.
func (_c *DonationCreate) SetPaymentMethod(v string) *DonationCreate {
	_c.mutation.SetPaymentMethod(v)
	return _c
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (_c *DonationCreate) SetNillablePaymentMethod(v *string) *DonationCreate {
	if v != nil {
		_c.SetPaymentMethod(*v)
	}
	return _c
}

// SetPaymentID sets the "payment_id" field.
func (_c *DonationCreate) SetPaymentID(v string) *DonationCreate {
	_c.mutation.SetPaymentID(v)
	return _c
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (_c *DonationCreate) SetNillablePaymentID(v *string) *DonationCreate {
	if v != nil {
		_c.SetPaymentID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *DonationCreate) SetStatus(v string) *DonationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetProcessedAt sets the "processed_at" field.
func (_c *DonationCreate) SetProcessedAt(v time.Time) *DonationCreate {
	_c.mutation.SetProcessedAt(v)
	return _c
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_c *DonationCreate) SetNillableProcessedAt(v *time.Time) *DonationCreate {
	if v != nil {
		_c.SetProcessedAt(*v)
	}
	return _c
}

// SetAnonymous sets the "anonymous" field.
func (_c *DonationCreate) SetAnonymous(v bool) *DonationCreate {
	_c.mutation.SetAnonymous(v)
	return _c
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (_c *DonationCreate) SetNillableAnonymous(v *bool) *DonationCreate {
	if v != nil {
		_c.SetAnonymous(*v)
	}
	return _c
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (_c *DonationCreate) SetPaymentGatewayRef(v string) *DonationCreate {
	_c.mutation.SetPaymentGatewayRef(v)
	return _c
}

// SetNillablePaymentGatewayRef sets the "payment_gateway_ref" field if the given value is not nil.
func (_c *DonationCreate) SetNillablePaymentGatewayRef(v *string) *DonationCreate {
	if v != nil {
		_c.SetPaymentGatewayRef(*v)
	}
	return _c
}

// SetDonorMessage sets the "donor_message" field.
func (_c *DonationCreate) SetDonorMessage(v string) *DonationCreate {
	_c.mutation.SetDonorMessage(v)
	return _c
}

// SetNillableDonorMessage sets the "donor_message" field if the given value is not nil.
func (_c *DonationCreate) SetNillableDonorMessage(v *string) *DonationCreate {
	if v != nil {
		_c.SetDonorMessage(*v)
	}
	return _c
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (_c *DonationCreate) SetTaxReceiptSent(v bool) *DonationCreate {
	_c.mutation.SetTaxReceiptSent(v)
	return _c
}

// SetNillableTaxReceiptSent sets the "tax_receipt_sent" field if the given value is not nil.
func (_c *DonationCreate) SetNillableTaxReceiptSent(v *bool) *DonationCreate {
	if v != nil {
		_c.SetTaxReceiptSent(*v)
	}
	return _c
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (_c *DonationCreate) SetTaxReceiptSentAt(v time.Time) *DonationCreate {
	_c.mutation.SetTaxReceiptSentAt(v)
	return _c
}

// SetNillableTaxReceiptSentAt sets the "tax_receipt_sent_at" field if the given value is not nil.
func (_c *DonationCreate) SetNillableTaxReceiptSentAt(v *time.Time) *DonationCreate {
	if v != nil {
		_c.SetTaxReceiptSentAt(*v)
	}
	return _c
}

// SetRecurringInterval sets the "recurring_interval" field.
func (_c *DonationCreate) SetRecurringInterval(v string) *DonationCreate {
	_c.mutation.SetRecurringInterval(v)
	return _c
}

// SetNillableRecurringInterval sets the "recurring_interval" field if the given value is not nil.
func (_c *DonationCreate) SetNillableRecurringInterval(v *string) *DonationCreate {
	if v != nil {
		_c.SetRecurringInterval(*v)
	}
	return _c
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (_c *DonationCreate) SetNextPaymentDate(v time.Time) *DonationCreate {
	_c.mutation.SetNextPaymentDate(v)
	return _c
}

// SetNillableNextPaymentDate sets the "next_payment_date" field if the given value is not nil.
func (_c *DonationCreate) SetNillableNextPaymentDate(v *time.Time) *DonationCreate {
	if v != nil {
		_c.SetNextPaymentDate(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *DonationCreate) SetMetadata(v map[string]interface{}) *DonationCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DonationCreate) SetCreatedAt(v time.Time) *DonationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DonationCreate) SetNillableCreatedAt(v *time.Time) *DonationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DonationCreate) SetUpdatedAt(v time.Time) *DonationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DonationCreate) SetNillableUpdatedAt(v *time.Time) *DonationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDonorID sets the "donor" edge to the User entity by ID.
func (_c *DonationCreate) SetDonorID(id int) *DonationCreate {
	_c.mutation.SetDonorID(id)
	return _c
}

// SetDonor sets the "donor" edge to the User entity.
func (_c *DonationCreate) SetDonor(v *User) *DonationCreate {
	return _c.SetDonorID(v.ID)
}

// SetProgramID sets the "program" edge to the Program entity by ID.
func (_c *DonationCreate) SetProgramID(id int) *DonationCreate {
	_c.mutation.SetProgramID(id)
	return _c
}

// SetNillableProgramID sets the "program" edge to the Program entity by ID if the given value is not nil.
func (_c *DonationCreate) SetNillableProgramID(id *int) *DonationCreate {
	if id != nil {
		_c = _c.SetProgramID(*id)
	}
	return _c
}

// SetProgram sets the "program" edge to the Program entity.
func (_c *DonationCreate) SetProgram(v *Program) *DonationCreate {
	return _c.SetProgramID(v.ID)
}

// SetCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID.
func (_c *DonationCreate) SetCampaignID(id int) *DonationCreate {
	_c.mutation.SetCampaignID(id)
	return _c
}

// SetNillableCampaignID sets the "campaign" edge to the FundraisingCampaign entity by ID if the given value is not nil.
func (_c *DonationCreate) SetNillableCampaignID(id *int) *DonationCreate {
	if id != nil {
		_c = _c.SetCampaignID(*id)
	}
	return _c
}

// SetCampaign sets the "campaign" edge to the FundraisingCampaign entity.
func (_c *DonationCreate) SetCampaign(v *FundraisingCampaign) *DonationCreate {
	return _c.SetCampaignID(v.ID)
}

// Mutation returns the DonationMutation object of the builder.
func (_c *DonationCreate) Mutation() *DonationMutation {
	return _c.mutation
}

// Save creates the Donation in the database.
func (_c *DonationCreate) Save(ctx context.Context) (*Donation, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DonationCreate) SaveX(ctx context.Context) *Donation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DonationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DonationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DonationCreate) defaults() {
	if _, ok := _c.mutation.Currency(); !ok {
		v := donation.DefaultCurrency
		_c.mutation.SetCurrency(v)
	}
	if _, ok := _c.mutation.IsRecurring(); !ok {
		v := donation.DefaultIsRecurring
		_c.mutation.SetIsRecurring(v)
	}
	if _, ok := _c.mutation.Frequency(); !ok {
		v := donation.DefaultFrequency
		_c.mutation.SetFrequency(v)
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		v := donation.DefaultAnonymous
		_c.mutation.SetAnonymous(v)
	}
	if _, ok := _c.mutation.TaxReceiptSent(); !ok {
		v := donation.DefaultTaxReceiptSent
		_c.mutation.SetTaxReceiptSent(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := donation.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := donation.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DonationCreate) check() error {
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Donation.amount"`)}
	}
	if _, ok := _c.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "Donation.currency"`)}
	}
	if _, ok := _c.mutation.IsRecurring(); !ok {
		return &ValidationError{Name: "is_recurring", err: errors.New(`ent: missing required field "Donation.is_recurring"`)}
	}
	if _, ok := _c.mutation.Frequency(); !ok {
		return &ValidationError{Name: "frequency", err: errors.New(`ent: missing required field "Donation.frequency"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Donation.status"`)}
	}
	if _, ok := _c.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New(`ent: missing required field "Donation.anonymous"`)}
	}
	if _, ok := _c.mutation.TaxReceiptSent(); !ok {
		return &ValidationError{Name: "tax_receipt_sent", err: errors.New(`ent: missing required field "Donation.tax_receipt_sent"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Donation.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Donation.updated_at"`)}
	}
	if len(_c.mutation.DonorIDs()) == 0 {
		return &ValidationError{Name: "donor", err: errors.New(`ent: missing required edge "Donation.donor"`)}
	}
	return nil
}

func (_c *DonationCreate) sqlSave(ctx context.Context) (*Donation, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DonationCreate) createSpec() (*Donation, *sqlgraph.CreateSpec) {
	var (
		_node = &Donation{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(donation.Table, sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(donation.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(donation.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.IsRecurring(); ok {
		_spec.SetField(donation.FieldIsRecurring, field.TypeBool, value)
		_node.IsRecurring = value
	}
	if value, ok := _c.mutation.Frequency(); ok {
		_spec.SetField(donation.FieldFrequency, field.TypeString, value)
		_node.Frequency = value
	}
	if value, ok := _c.mutation.PaymentMethod(); ok {
		_spec.SetField(donation.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := _c.mutation.PaymentID(); ok {
		_spec.SetField(donation.FieldPaymentID, field.TypeString, value)
		_node.PaymentID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(donation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ProcessedAt(); ok {
		_spec.SetField(donation.FieldProcessedAt, field.TypeTime, value)
		_node.ProcessedAt = value
	}
	if value, ok := _c.mutation.Anonymous(); ok {
		_spec.SetField(donation.FieldAnonymous, field.TypeBool, value)
		_node.Anonymous = value
	}
	if value, ok := _c.mutation.PaymentGatewayRef(); ok {
		_spec.SetField(donation.FieldPaymentGatewayRef, field.TypeString, value)
		_node.PaymentGatewayRef = value
	}
	if value, ok := _c.mutation.DonorMessage(); ok {
		_spec.SetField(donation.FieldDonorMessage, field.TypeString, value)
		_node.DonorMessage = value
	}
	if value, ok := _c.mutation.TaxReceiptSent(); ok {
		_spec.SetField(donation.FieldTaxReceiptSent, field.TypeBool, value)
		_node.TaxReceiptSent = value
	}
	if value, ok := _c.mutation.TaxReceiptSentAt(); ok {
		_spec.SetField(donation.FieldTaxReceiptSentAt, field.TypeTime, value)
		_node.TaxReceiptSentAt = value
	}
	if value, ok := _c.mutation.RecurringInterval(); ok {
		_spec.SetField(donation.FieldRecurringInterval, field.TypeString, value)
		_node.RecurringInterval = value
	}
	if value, ok := _c.mutation.NextPaymentDate(); ok {
		_spec.SetField(donation.FieldNextPaymentDate, field.TypeTime, value)
		_node.NextPaymentDate = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(donation.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(donation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(donation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.DonorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_donations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.program_donations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CampaignIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fundraising_campaign_donations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Donation.Create().
//		SetAmount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DonationUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (_c *DonationCreate) OnConflict(opts ...sql.ConflictOption) *DonationUpsertOne {
	_c.conflict = opts
	return &DonationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Donation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DonationCreate) OnConflictColumns(columns ...string) *DonationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DonationUpsertOne{
		create: _c,
	}
}

type (
	// DonationUpsertOne is the builder for "upsert"-ing
	//  one Donation node.
	DonationUpsertOne struct {
		create *DonationCreate
	}

	// DonationUpsert is the "OnConflict" setter.
	DonationUpsert struct {
		*sql.UpdateSet
	}
)

// SetAmount sets the "amount" field.
func (u *DonationUpsert) SetAmount(v float64) *DonationUpsert {
	u.Set(donation.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DonationUpsert) UpdateAmount() *DonationUpsert {
	u.SetExcluded(donation.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *DonationUpsert) AddAmount(v float64) *DonationUpsert {
	u.Add(donation.FieldAmount, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *DonationUpsert) SetCurrency(v string) *DonationUpsert {
	u.Set(donation.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *DonationUpsert) UpdateCurrency() *DonationUpsert {
	u.SetExcluded(donation.FieldCurrency)
	return u
}

// SetIsRecurring sets the "is_recurring" field.
func (u *DonationUpsert) SetIsRecurring(v bool) *DonationUpsert {
	u.Set(donation.FieldIsRecurring, v)
	return u
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *DonationUpsert) UpdateIsRecurring() *DonationUpsert {
	u.SetExcluded(donation.FieldIsRecurring)
	return u
}

// SetFrequency sets the "frequency" field.
func (u *DonationUpsert) SetFrequency(v string) *DonationUpsert {
	u.Set(donation.FieldFrequency, v)
	return u
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *DonationUpsert) UpdateFrequency() *DonationUpsert {
	u.SetExcluded(donation.FieldFrequency)
	return u
}

// SetPaymentMethod sets the "payment_method" field.
func (u *DonationUpsert) SetPaymentMethod(v string) *DonationUpsert {
	u.Set(donation.FieldPaymentMethod, v)
	return u
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *DonationUpsert) UpdatePaymentMethod() *DonationUpsert {
	u.SetExcluded(donation.FieldPaymentMethod)
	return u
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (u *DonationUpsert) ClearPaymentMethod() *DonationUpsert {
	u.SetNull(donation.FieldPaymentMethod)
	return u
}

// SetPaymentID sets the "payment_id" field.
func (u *DonationUpsert) SetPaymentID(v string) *DonationUpsert {
	u.Set(donation.FieldPaymentID, v)
	return u
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DonationUpsert) UpdatePaymentID() *DonationUpsert {
	u.SetExcluded(donation.FieldPaymentID)
	return u
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DonationUpsert) ClearPaymentID() *DonationUpsert {
	u.SetNull(donation.FieldPaymentID)
	return u
}

// SetStatus sets the "status" field.
func (u *DonationUpsert) SetStatus(v string) *DonationUpsert {
	u.Set(donation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DonationUpsert) UpdateStatus() *DonationUpsert {
	u.SetExcluded(donation.FieldStatus)
	return u
}

// SetProcessedAt sets the "processed_at" field.
func (u *DonationUpsert) SetProcessedAt(v time.Time) *DonationUpsert {
	u.Set(donation.FieldProcessedAt, v)
	return u
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *DonationUpsert) UpdateProcessedAt() *DonationUpsert {
	u.SetExcluded(donation.FieldProcessedAt)
	return u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *DonationUpsert) ClearProcessedAt() *DonationUpsert {
	u.SetNull(donation.FieldProcessedAt)
	return u
}

// SetAnonymous sets the "anonymous" field.
func (u *DonationUpsert) SetAnonymous(v bool) *DonationUpsert {
	u.Set(donation.FieldAnonymous, v)
	return u
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *DonationUpsert) UpdateAnonymous() *DonationUpsert {
	u.SetExcluded(donation.FieldAnonymous)
	return u
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (u *DonationUpsert) SetPaymentGatewayRef(v string) *DonationUpsert {
	u.Set(donation.FieldPaymentGatewayRef, v)
	return u
}

// UpdatePaymentGatewayRef sets the "payment_gateway_ref" field to the value that was provided on create.
func (u *DonationUpsert) UpdatePaymentGatewayRef() *DonationUpsert {
	u.SetExcluded(donation.FieldPaymentGatewayRef)
	return u
}

// ClearPaymentGatewayRef clears the value of the "payment_gateway_ref" field.
func (u *DonationUpsert) ClearPaymentGatewayRef() *DonationUpsert {
	u.SetNull(donation.FieldPaymentGatewayRef)
	return u
}

// SetDonorMessage sets the "donor_message" field.
func (u *DonationUpsert) SetDonorMessage(v string) *DonationUpsert {
	u.Set(donation.FieldDonorMessage, v)
	return u
}

// UpdateDonorMessage sets the "donor_message" field to the value that was provided on create.
func (u *DonationUpsert) UpdateDonorMessage() *DonationUpsert {
	u.SetExcluded(donation.FieldDonorMessage)
	return u
}

// ClearDonorMessage clears the value of the "donor_message" field.
func (u *DonationUpsert) ClearDonorMessage() *DonationUpsert {
	u.SetNull(donation.FieldDonorMessage)
	return u
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (u *DonationUpsert) SetTaxReceiptSent(v bool) *DonationUpsert {
	u.Set(donation.FieldTaxReceiptSent, v)
	return u
}

// UpdateTaxReceiptSent sets the "tax_receipt_sent" field to the value that was provided on create.
func (u *DonationUpsert) UpdateTaxReceiptSent() *DonationUpsert {
	u.SetExcluded(donation.FieldTaxReceiptSent)
	return u
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (u *DonationUpsert) SetTaxReceiptSentAt(v time.Time) *DonationUpsert {
	u.Set(donation.FieldTaxReceiptSentAt, v)
	return u
}

// UpdateTaxReceiptSentAt sets the "tax_receipt_sent_at" field to the value that was provided on create.
func (u *DonationUpsert) UpdateTaxReceiptSentAt() *DonationUpsert {
	u.SetExcluded(donation.FieldTaxReceiptSentAt)
	return u
}

// ClearTaxReceiptSentAt clears the value of the "tax_receipt_sent_at" field.
func (u *DonationUpsert) ClearTaxReceiptSentAt() *DonationUpsert {
	u.SetNull(donation.FieldTaxReceiptSentAt)
	return u
}

// SetRecurringInterval sets the "recurring_interval" field.
func (u *DonationUpsert) SetRecurringInterval(v string) *DonationUpsert {
	u.Set(donation.FieldRecurringInterval, v)
	return u
}

// UpdateRecurringInterval sets the "recurring_interval" field to the value that was provided on create.
func (u *DonationUpsert) UpdateRecurringInterval() *DonationUpsert {
	u.SetExcluded(donation.FieldRecurringInterval)
	return u
}

// ClearRecurringInterval clears the value of the "recurring_interval" field.
func (u *DonationUpsert) ClearRecurringInterval() *DonationUpsert {
	u.SetNull(donation.FieldRecurringInterval)
	return u
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (u *DonationUpsert) SetNextPaymentDate(v time.Time) *DonationUpsert {
	u.Set(donation.FieldNextPaymentDate, v)
	return u
}

// UpdateNextPaymentDate sets the "next_payment_date" field to the value that was provided on create.
func (u *DonationUpsert) UpdateNextPaymentDate() *DonationUpsert {
	u.SetExcluded(donation.FieldNextPaymentDate)
	return u
}

// ClearNextPaymentDate clears the value of the "next_payment_date" field.
func (u *DonationUpsert) ClearNextPaymentDate() *DonationUpsert {
	u.SetNull(donation.FieldNextPaymentDate)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *DonationUpsert) SetMetadata(v map[string]interface{}) *DonationUpsert {
	u.Set(donation.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DonationUpsert) UpdateMetadata() *DonationUpsert {
	u.SetExcluded(donation.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *DonationUpsert) ClearMetadata() *DonationUpsert {
	u.SetNull(donation.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DonationUpsert) SetUpdatedAt(v time.Time) *DonationUpsert {
	u.Set(donation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DonationUpsert) UpdateUpdatedAt() *DonationUpsert {
	u.SetExcluded(donation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Donation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DonationUpsertOne) UpdateNewValues() *DonationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(donation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Donation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DonationUpsertOne) Ignore() *DonationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DonationUpsertOne) DoNothing() *DonationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DonationCreate.OnConflict
// documentation for more info.
func (u *DonationUpsertOne) Update(set func(*DonationUpsert)) *DonationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DonationUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *DonationUpsertOne) SetAmount(v float64) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *DonationUpsertOne) AddAmount(v float64) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateAmount() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *DonationUpsertOne) SetCurrency(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateCurrency() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateCurrency()
	})
}

// SetIsRecurring sets the "is_recurring" field.
func (u *DonationUpsertOne) SetIsRecurring(v bool) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetIsRecurring(v)
	})
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateIsRecurring() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateIsRecurring()
	})
}

// SetFrequency sets the "frequency" field.
func (u *DonationUpsertOne) SetFrequency(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateFrequency() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateFrequency()
	})
}

// SetPaymentMethod sets the "payment_method" field.
func (u *DonationUpsertOne) SetPaymentMethod(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentMethod(v)
	})
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdatePaymentMethod() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentMethod()
	})
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (u *DonationUpsertOne) ClearPaymentMethod() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentMethod()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *DonationUpsertOne) SetPaymentID(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdatePaymentID() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DonationUpsertOne) ClearPaymentID() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentID()
	})
}

// SetStatus sets the "status" field.
func (u *DonationUpsertOne) SetStatus(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateStatus() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateStatus()
	})
}

// SetProcessedAt sets the "processed_at" field.
func (u *DonationUpsertOne) SetProcessedAt(v time.Time) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetProcessedAt(v)
	})
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateProcessedAt() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateProcessedAt()
	})
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *DonationUpsertOne) ClearProcessedAt() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearProcessedAt()
	})
}

// SetAnonymous sets the "anonymous" field.
func (u *DonationUpsertOne) SetAnonymous(v bool) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetAnonymous(v)
	})
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateAnonymous() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateAnonymous()
	})
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (u *DonationUpsertOne) SetPaymentGatewayRef(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentGatewayRef(v)
	})
}

// UpdatePaymentGatewayRef sets the "payment_gateway_ref" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdatePaymentGatewayRef() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentGatewayRef()
	})
}

// ClearPaymentGatewayRef clears the value of the "payment_gateway_ref" field.
func (u *DonationUpsertOne) ClearPaymentGatewayRef() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentGatewayRef()
	})
}

// SetDonorMessage sets the "donor_message" field.
func (u *DonationUpsertOne) SetDonorMessage(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetDonorMessage(v)
	})
}

// UpdateDonorMessage sets the "donor_message" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateDonorMessage() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateDonorMessage()
	})
}

// ClearDonorMessage clears the value of the "donor_message" field.
func (u *DonationUpsertOne) ClearDonorMessage() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearDonorMessage()
	})
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (u *DonationUpsertOne) SetTaxReceiptSent(v bool) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetTaxReceiptSent(v)
	})
}

// UpdateTaxReceiptSent sets the "tax_receipt_sent" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateTaxReceiptSent() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateTaxReceiptSent()
	})
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (u *DonationUpsertOne) SetTaxReceiptSentAt(v time.Time) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetTaxReceiptSentAt(v)
	})
}

// UpdateTaxReceiptSentAt sets the "tax_receipt_sent_at" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateTaxReceiptSentAt() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateTaxReceiptSentAt()
	})
}

// ClearTaxReceiptSentAt clears the value of the "tax_receipt_sent_at" field.
func (u *DonationUpsertOne) ClearTaxReceiptSentAt() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearTaxReceiptSentAt()
	})
}

// SetRecurringInterval sets the "recurring_interval" field.
func (u *DonationUpsertOne) SetRecurringInterval(v string) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetRecurringInterval(v)
	})
}

// UpdateRecurringInterval sets the "recurring_interval" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateRecurringInterval() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateRecurringInterval()
	})
}

// ClearRecurringInterval clears the value of the "recurring_interval" field.
func (u *DonationUpsertOne) ClearRecurringInterval() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearRecurringInterval()
	})
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (u *DonationUpsertOne) SetNextPaymentDate(v time.Time) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetNextPaymentDate(v)
	})
}

// UpdateNextPaymentDate sets the "next_payment_date" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateNextPaymentDate() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateNextPaymentDate()
	})
}

// ClearNextPaymentDate clears the value of the "next_payment_date" field.
func (u *DonationUpsertOne) ClearNextPaymentDate() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearNextPaymentDate()
	})
}

// SetMetadata sets the "metadata" field.
func (u *DonationUpsertOne) SetMetadata(v map[string]interface{}) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateMetadata() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *DonationUpsertOne) ClearMetadata() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DonationUpsertOne) SetUpdatedAt(v time.Time) *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DonationUpsertOne) UpdateUpdatedAt() *DonationUpsertOne {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DonationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DonationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DonationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DonationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DonationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DonationCreateBulk is the builder for creating many Donation entities in bulk.
type DonationCreateBulk struct {
	config
	err      error
	builders []*DonationCreate
	conflict []sql.ConflictOption
}

// Save creates the Donation entities in the database.
func (_c *DonationCreateBulk) Save(ctx context.Context) ([]*Donation, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Donation, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DonationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DonationCreateBulk) SaveX(ctx context.Context) []*Donation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DonationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DonationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Donation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DonationUpsert) {
//			SetAmount(v+v).
//		}).
//		Exec(ctx)
func (_c *DonationCreateBulk) OnConflict(opts ...sql.ConflictOption) *DonationUpsertBulk {
	_c.conflict = opts
	return &DonationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Donation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DonationCreateBulk) OnConflictColumns(columns ...string) *DonationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DonationUpsertBulk{
		create: _c,
	}
}

// DonationUpsertBulk is the builder for "upsert"-ing
// a bulk of Donation nodes.
type DonationUpsertBulk struct {
	create *DonationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Donation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DonationUpsertBulk) UpdateNewValues() *DonationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(donation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Donation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DonationUpsertBulk) Ignore() *DonationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DonationUpsertBulk) DoNothing() *DonationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DonationCreateBulk.OnConflict
// documentation for more info.
func (u *DonationUpsertBulk) Update(set func(*DonationUpsert)) *DonationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DonationUpsert{UpdateSet: update})
	}))
	return u
}

// SetAmount sets the "amount" field.
func (u *DonationUpsertBulk) SetAmount(v float64) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *DonationUpsertBulk) AddAmount(v float64) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateAmount() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateAmount()
	})
}

// SetCurrency sets the "currency" field.
func (u *DonationUpsertBulk) SetCurrency(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateCurrency() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateCurrency()
	})
}

// SetIsRecurring sets the "is_recurring" field.
func (u *DonationUpsertBulk) SetIsRecurring(v bool) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetIsRecurring(v)
	})
}

// UpdateIsRecurring sets the "is_recurring" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateIsRecurring() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateIsRecurring()
	})
}

// SetFrequency sets the "frequency" field.
func (u *DonationUpsertBulk) SetFrequency(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetFrequency(v)
	})
}

// UpdateFrequency sets the "frequency" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateFrequency() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateFrequency()
	})
}

// SetPaymentMethod sets the "payment_method" field.
func (u *DonationUpsertBulk) SetPaymentMethod(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentMethod(v)
	})
}

// UpdatePaymentMethod sets the "payment_method" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdatePaymentMethod() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentMethod()
	})
}

// ClearPaymentMethod clears the value of the "payment_method" field.
func (u *DonationUpsertBulk) ClearPaymentMethod() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentMethod()
	})
}

// SetPaymentID sets the "payment_id" field.
func (u *DonationUpsertBulk) SetPaymentID(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentID(v)
	})
}

// UpdatePaymentID sets the "payment_id" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdatePaymentID() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentID()
	})
}

// ClearPaymentID clears the value of the "payment_id" field.
func (u *DonationUpsertBulk) ClearPaymentID() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentID()
	})
}

// SetStatus sets the "status" field.
func (u *DonationUpsertBulk) SetStatus(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateStatus() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateStatus()
	})
}

// SetProcessedAt sets the "processed_at" field.
func (u *DonationUpsertBulk) SetProcessedAt(v time.Time) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetProcessedAt(v)
	})
}

// UpdateProcessedAt sets the "processed_at" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateProcessedAt() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateProcessedAt()
	})
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (u *DonationUpsertBulk) ClearProcessedAt() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearProcessedAt()
	})
}

// SetAnonymous sets the "anonymous" field.
func (u *DonationUpsertBulk) SetAnonymous(v bool) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetAnonymous(v)
	})
}

// UpdateAnonymous sets the "anonymous" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateAnonymous() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateAnonymous()
	})
}

// SetPaymentGatewayRef sets the "payment_gateway_ref" field.
func (u *DonationUpsertBulk) SetPaymentGatewayRef(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetPaymentGatewayRef(v)
	})
}

// UpdatePaymentGatewayRef sets the "payment_gateway_ref" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdatePaymentGatewayRef() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdatePaymentGatewayRef()
	})
}

// ClearPaymentGatewayRef clears the value of the "payment_gateway_ref" field.
func (u *DonationUpsertBulk) ClearPaymentGatewayRef() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearPaymentGatewayRef()
	})
}

// SetDonorMessage sets the "donor_message" field.
func (u *DonationUpsertBulk) SetDonorMessage(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetDonorMessage(v)
	})
}

// UpdateDonorMessage sets the "donor_message" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateDonorMessage() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateDonorMessage()
	})
}

// ClearDonorMessage clears the value of the "donor_message" field.
func (u *DonationUpsertBulk) ClearDonorMessage() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearDonorMessage()
	})
}

// SetTaxReceiptSent sets the "tax_receipt_sent" field.
func (u *DonationUpsertBulk) SetTaxReceiptSent(v bool) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetTaxReceiptSent(v)
	})
}

// UpdateTaxReceiptSent sets the "tax_receipt_sent" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateTaxReceiptSent() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateTaxReceiptSent()
	})
}

// SetTaxReceiptSentAt sets the "tax_receipt_sent_at" field.
func (u *DonationUpsertBulk) SetTaxReceiptSentAt(v time.Time) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetTaxReceiptSentAt(v)
	})
}

// UpdateTaxReceiptSentAt sets the "tax_receipt_sent_at" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateTaxReceiptSentAt() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateTaxReceiptSentAt()
	})
}

// ClearTaxReceiptSentAt clears the value of the "tax_receipt_sent_at" field.
func (u *DonationUpsertBulk) ClearTaxReceiptSentAt() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearTaxReceiptSentAt()
	})
}

// SetRecurringInterval sets the "recurring_interval" field.
func (u *DonationUpsertBulk) SetRecurringInterval(v string) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetRecurringInterval(v)
	})
}

// UpdateRecurringInterval sets the "recurring_interval" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateRecurringInterval() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateRecurringInterval()
	})
}

// ClearRecurringInterval clears the value of the "recurring_interval" field.
func (u *DonationUpsertBulk) ClearRecurringInterval() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearRecurringInterval()
	})
}

// SetNextPaymentDate sets the "next_payment_date" field.
func (u *DonationUpsertBulk) SetNextPaymentDate(v time.Time) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetNextPaymentDate(v)
	})
}

// UpdateNextPaymentDate sets the "next_payment_date" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateNextPaymentDate() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateNextPaymentDate()
	})
}

// ClearNextPaymentDate clears the value of the "next_payment_date" field.
func (u *DonationUpsertBulk) ClearNextPaymentDate() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearNextPaymentDate()
	})
}

// SetMetadata sets the "metadata" field.
func (u *DonationUpsertBulk) SetMetadata(v map[string]interface{}) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateMetadata() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *DonationUpsertBulk) ClearMetadata() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DonationUpsertBulk) SetUpdatedAt(v time.Time) *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DonationUpsertBulk) UpdateUpdatedAt() *DonationUpsertBulk {
	return u.Update(func(s *DonationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DonationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DonationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DonationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DonationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
