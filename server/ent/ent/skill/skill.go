// Code generated by ent, DO NOT EDIT.

package skill

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the skill type in the database.
	Label = "skill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the skill in the database.
	Table = "skills"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "user_skills"
	// UsersInverseTable is the table name for the UserSkill entity.
	// It exists in this package in order to avoid circular dependency with the "userskill" package.
	UsersInverseTable = "user_skills"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "skill_users"
)

// Columns holds all SQL columns for skill fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldName,
	FieldCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryTECHNICAL   Category = "TECHNICAL"
	CategorySOFT_SKILLS Category = "SOFT_SKILLS"
	CategoryLANGUAGES   Category = "LANGUAGES"
	CategoryCREATIVE    Category = "CREATIVE"
	CategoryMANAGEMENT  Category = "MANAGEMENT"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryTECHNICAL, CategorySOFT_SKILLS, CategoryLANGUAGES, CategoryCREATIVE, CategoryMANAGEMENT:
		return nil
	default:
		return fmt.Errorf("skill: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Skill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
