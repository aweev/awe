// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GrantReport is the model entity for the GrantReport schema.
type GrantReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// SubmittedDate holds the value of the "submitted_date" field.
	SubmittedDate time.Time `json:"submitted_date,omitempty"`
	// Status holds the value of the "status" field.
	Status grantreport.Status `json:"status,omitempty"`
	// DocumentURL holds the value of the "document_url" field.
	DocumentURL string `json:"document_url,omitempty"`
	// ReportType holds the value of the "report_type" field.
	ReportType string `json:"report_type,omitempty"`
	// ReviewedBy holds the value of the "reviewed_by" field.
	ReviewedBy string `json:"reviewed_by,omitempty"`
	// ReviewedAt holds the value of the "reviewed_at" field.
	ReviewedAt time.Time `json:"reviewed_at,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback string `json:"feedback,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// NextDueDate holds the value of the "next_due_date" field.
	NextDueDate time.Time `json:"next_due_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantReportQuery when eager-loading is set.
	Edges         GrantReportEdges `json:"edges"`
	grant_reports *int
	selectValues  sql.SelectValues
}

// GrantReportEdges holds the relations/edges for other nodes in the graph.
type GrantReportEdges struct {
	// Grant holds the value of the grant edge.
	Grant *Grant `json:"grant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GrantOrErr returns the Grant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantReportEdges) GrantOrErr() (*Grant, error) {
	if e.Grant != nil {
		return e.Grant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: grant.Label}
	}
	return nil, &NotLoadedError{edge: "grant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GrantReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grantreport.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case grantreport.FieldID:
			values[i] = new(sql.NullInt64)
		case grantreport.FieldTitle, grantreport.FieldStatus, grantreport.FieldDocumentURL, grantreport.FieldReportType, grantreport.FieldReviewedBy, grantreport.FieldFeedback:
			values[i] = new(sql.NullString)
		case grantreport.FieldDueDate, grantreport.FieldSubmittedDate, grantreport.FieldReviewedAt, grantreport.FieldNextDueDate, grantreport.FieldCreatedAt, grantreport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case grantreport.ForeignKeys[0]: // grant_reports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GrantReport fields.
func (_m *GrantReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grantreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case grantreport.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case grantreport.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				_m.DueDate = value.Time
			}
		case grantreport.FieldSubmittedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_date", values[i])
			} else if value.Valid {
				_m.SubmittedDate = value.Time
			}
		case grantreport.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = grantreport.Status(value.String)
			}
		case grantreport.FieldDocumentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_url", values[i])
			} else if value.Valid {
				_m.DocumentURL = value.String
			}
		case grantreport.FieldReportType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_type", values[i])
			} else if value.Valid {
				_m.ReportType = value.String
			}
		case grantreport.FieldReviewedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_by", values[i])
			} else if value.Valid {
				_m.ReviewedBy = value.String
			}
		case grantreport.FieldReviewedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_at", values[i])
			} else if value.Valid {
				_m.ReviewedAt = value.Time
			}
		case grantreport.FieldFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value.Valid {
				_m.Feedback = value.String
			}
		case grantreport.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				_m.IsApproved = value.Bool
			}
		case grantreport.FieldNextDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_due_date", values[i])
			} else if value.Valid {
				_m.NextDueDate = value.Time
			}
		case grantreport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case grantreport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case grantreport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field grant_reports", value)
			} else if value.Valid {
				_m.grant_reports = new(int)
				*_m.grant_reports = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GrantReport.
// This includes values selected through modifiers, order, etc.
func (_m *GrantReport) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryGrant queries the "grant" edge of the GrantReport entity.
func (_m *GrantReport) QueryGrant() *GrantQuery {
	return NewGrantReportClient(_m.config).QueryGrant(_m)
}

// Update returns a builder for updating this GrantReport.
// Note that you need to call GrantReport.Unwrap() before calling this method if this GrantReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *GrantReport) Update() *GrantReportUpdateOne {
	return NewGrantReportClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the GrantReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *GrantReport) Unwrap() *GrantReport {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: GrantReport is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *GrantReport) String() string {
	var builder strings.Builder
	builder.WriteString("GrantReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(_m.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("submitted_date=")
	builder.WriteString(_m.SubmittedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("document_url=")
	builder.WriteString(_m.DocumentURL)
	builder.WriteString(", ")
	builder.WriteString("report_type=")
	builder.WriteString(_m.ReportType)
	builder.WriteString(", ")
	builder.WriteString("reviewed_by=")
	builder.WriteString(_m.ReviewedBy)
	builder.WriteString(", ")
	builder.WriteString("reviewed_at=")
	builder.WriteString(_m.ReviewedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(_m.Feedback)
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("next_due_date=")
	builder.WriteString(_m.NextDueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GrantReports is a parsable slice of GrantReport.
type GrantReports []*GrantReport
