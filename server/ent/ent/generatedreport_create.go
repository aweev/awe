// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/job"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GeneratedReportCreate is the builder for creating a GeneratedReport entity.
type GeneratedReportCreate struct {
	config
	mutation *GeneratedReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *GeneratedReportCreate) SetStatus(v string) *GeneratedReportCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetFormat sets the "format" field.
func (_c *GeneratedReportCreate) SetFormat(v generatedreport.Format) *GeneratedReportCreate {
	_c.mutation.SetFormat(v)
	return _c
}

// SetFileURL sets the "file_url" field.
func (_c *GeneratedReportCreate) SetFileURL(v string) *GeneratedReportCreate {
	_c.mutation.SetFileURL(v)
	return _c
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableFileURL(v *string) *GeneratedReportCreate {
	if v != nil {
		_c.SetFileURL(*v)
	}
	return _c
}

// SetFileSize sets the "file_size" field.
func (_c *GeneratedReportCreate) SetFileSize(v int) *GeneratedReportCreate {
	_c.mutation.SetFileSize(v)
	return _c
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableFileSize(v *int) *GeneratedReportCreate {
	if v != nil {
		_c.SetFileSize(*v)
	}
	return _c
}

// SetParameters sets the "parameters" field.
func (_c *GeneratedReportCreate) SetParameters(v map[string]interface{}) *GeneratedReportCreate {
	_c.mutation.SetParameters(v)
	return _c
}

// SetDeliveryMethod sets the "delivery_method" field.
func (_c *GeneratedReportCreate) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportCreate {
	_c.mutation.SetDeliveryMethod(v)
	return _c
}

// SetRecipientEmail sets the "recipient_email" field.
func (_c *GeneratedReportCreate) SetRecipientEmail(v string) *GeneratedReportCreate {
	_c.mutation.SetRecipientEmail(v)
	return _c
}

// SetNillableRecipientEmail sets the "recipient_email" field if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableRecipientEmail(v *string) *GeneratedReportCreate {
	if v != nil {
		_c.SetRecipientEmail(*v)
	}
	return _c
}

// SetGeneratedAt sets the "generated_at" field.
func (_c *GeneratedReportCreate) SetGeneratedAt(v time.Time) *GeneratedReportCreate {
	_c.mutation.SetGeneratedAt(v)
	return _c
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableGeneratedAt(v *time.Time) *GeneratedReportCreate {
	if v != nil {
		_c.SetGeneratedAt(*v)
	}
	return _c
}

// SetError sets the "error" field.
func (_c *GeneratedReportCreate) SetError(v string) *GeneratedReportCreate {
	_c.mutation.SetError(v)
	return _c
}

// SetNillableError sets the "error" field if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableError(v *string) *GeneratedReportCreate {
	if v != nil {
		_c.SetError(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *GeneratedReportCreate) SetMetadata(v map[string]interface{}) *GeneratedReportCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetReportDefinitionID sets the "report_definition" edge to the ReportDefinition entity by ID.
func (_c *GeneratedReportCreate) SetReportDefinitionID(id int) *GeneratedReportCreate {
	_c.mutation.SetReportDefinitionID(id)
	return _c
}

// SetReportDefinition sets the "report_definition" edge to the ReportDefinition entity.
func (_c *GeneratedReportCreate) SetReportDefinition(v *ReportDefinition) *GeneratedReportCreate {
	return _c.SetReportDefinitionID(v.ID)
}

// SetGeneratorID sets the "generator" edge to the User entity by ID.
func (_c *GeneratedReportCreate) SetGeneratorID(id int) *GeneratedReportCreate {
	_c.mutation.SetGeneratorID(id)
	return _c
}

// SetGenerator sets the "generator" edge to the User entity.
func (_c *GeneratedReportCreate) SetGenerator(v *User) *GeneratedReportCreate {
	return _c.SetGeneratorID(v.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_c *GeneratedReportCreate) SetJobID(id int) *GeneratedReportCreate {
	_c.mutation.SetJobID(id)
	return _c
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (_c *GeneratedReportCreate) SetNillableJobID(id *int) *GeneratedReportCreate {
	if id != nil {
		_c = _c.SetJobID(*id)
	}
	return _c
}

// SetJob sets the "job" edge to the Job entity.
func (_c *GeneratedReportCreate) SetJob(v *Job) *GeneratedReportCreate {
	return _c.SetJobID(v.ID)
}

// Mutation returns the GeneratedReportMutation object of the builder.
func (_c *GeneratedReportCreate) Mutation() *GeneratedReportMutation {
	return _c.mutation
}

// Save creates the GeneratedReport in the database.
func (_c *GeneratedReportCreate) Save(ctx context.Context) (*GeneratedReport, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GeneratedReportCreate) SaveX(ctx context.Context) *GeneratedReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GeneratedReportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GeneratedReportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GeneratedReportCreate) defaults() {
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		v := generatedreport.DefaultGeneratedAt()
		_c.mutation.SetGeneratedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GeneratedReportCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GeneratedReport.status"`)}
	}
	if _, ok := _c.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "GeneratedReport.format"`)}
	}
	if v, ok := _c.mutation.Format(); ok {
		if err := generatedreport.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.format": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DeliveryMethod(); !ok {
		return &ValidationError{Name: "delivery_method", err: errors.New(`ent: missing required field "GeneratedReport.delivery_method"`)}
	}
	if v, ok := _c.mutation.DeliveryMethod(); ok {
		if err := generatedreport.DeliveryMethodValidator(v); err != nil {
			return &ValidationError{Name: "delivery_method", err: fmt.Errorf(`ent: validator failed for field "GeneratedReport.delivery_method": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		return &ValidationError{Name: "generated_at", err: errors.New(`ent: missing required field "GeneratedReport.generated_at"`)}
	}
	if len(_c.mutation.ReportDefinitionIDs()) == 0 {
		return &ValidationError{Name: "report_definition", err: errors.New(`ent: missing required edge "GeneratedReport.report_definition"`)}
	}
	if len(_c.mutation.GeneratorIDs()) == 0 {
		return &ValidationError{Name: "generator", err: errors.New(`ent: missing required edge "GeneratedReport.generator"`)}
	}
	return nil
}

func (_c *GeneratedReportCreate) sqlSave(ctx context.Context) (*GeneratedReport, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GeneratedReportCreate) createSpec() (*GeneratedReport, *sqlgraph.CreateSpec) {
	var (
		_node = &GeneratedReport{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(generatedreport.Table, sqlgraph.NewFieldSpec(generatedreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(generatedreport.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Format(); ok {
		_spec.SetField(generatedreport.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := _c.mutation.FileURL(); ok {
		_spec.SetField(generatedreport.FieldFileURL, field.TypeString, value)
		_node.FileURL = value
	}
	if value, ok := _c.mutation.FileSize(); ok {
		_spec.SetField(generatedreport.FieldFileSize, field.TypeInt, value)
		_node.FileSize = value
	}
	if value, ok := _c.mutation.Parameters(); ok {
		_spec.SetField(generatedreport.FieldParameters, field.TypeJSON, value)
		_node.Parameters = value
	}
	if value, ok := _c.mutation.DeliveryMethod(); ok {
		_spec.SetField(generatedreport.FieldDeliveryMethod, field.TypeEnum, value)
		_node.DeliveryMethod = value
	}
	if value, ok := _c.mutation.RecipientEmail(); ok {
		_spec.SetField(generatedreport.FieldRecipientEmail, field.TypeString, value)
		_node.RecipientEmail = value
	}
	if value, ok := _c.mutation.GeneratedAt(); ok {
		_spec.SetField(generatedreport.FieldGeneratedAt, field.TypeTime, value)
		_node.GeneratedAt = value
	}
	if value, ok := _c.mutation.Error(); ok {
		_spec.SetField(generatedreport.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(generatedreport.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.ReportDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reportdefinition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.report_definition_generated_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GeneratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_generated_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_reports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GeneratedReport.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GeneratedReportUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *GeneratedReportCreate) OnConflict(opts ...sql.ConflictOption) *GeneratedReportUpsertOne {
	_c.conflict = opts
	return &GeneratedReportUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GeneratedReportCreate) OnConflictColumns(columns ...string) *GeneratedReportUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GeneratedReportUpsertOne{
		create: _c,
	}
}

type (
	// GeneratedReportUpsertOne is the builder for "upsert"-ing
	//  one GeneratedReport node.
	GeneratedReportUpsertOne struct {
		create *GeneratedReportCreate
	}

	// GeneratedReportUpsert is the "OnConflict" setter.
	GeneratedReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *GeneratedReportUpsert) SetStatus(v string) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateStatus() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldStatus)
	return u
}

// SetFormat sets the "format" field.
func (u *GeneratedReportUpsert) SetFormat(v generatedreport.Format) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateFormat() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldFormat)
	return u
}

// SetFileURL sets the "file_url" field.
func (u *GeneratedReportUpsert) SetFileURL(v string) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldFileURL, v)
	return u
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateFileURL() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldFileURL)
	return u
}

// ClearFileURL clears the value of the "file_url" field.
func (u *GeneratedReportUpsert) ClearFileURL() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldFileURL)
	return u
}

// SetFileSize sets the "file_size" field.
func (u *GeneratedReportUpsert) SetFileSize(v int) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldFileSize, v)
	return u
}

// UpdateFileSize sets the "file_size" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateFileSize() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldFileSize)
	return u
}

// AddFileSize adds v to the "file_size" field.
func (u *GeneratedReportUpsert) AddFileSize(v int) *GeneratedReportUpsert {
	u.Add(generatedreport.FieldFileSize, v)
	return u
}

// ClearFileSize clears the value of the "file_size" field.
func (u *GeneratedReportUpsert) ClearFileSize() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldFileSize)
	return u
}

// SetParameters sets the "parameters" field.
func (u *GeneratedReportUpsert) SetParameters(v map[string]interface{}) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldParameters, v)
	return u
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateParameters() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldParameters)
	return u
}

// ClearParameters clears the value of the "parameters" field.
func (u *GeneratedReportUpsert) ClearParameters() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldParameters)
	return u
}

// SetDeliveryMethod sets the "delivery_method" field.
func (u *GeneratedReportUpsert) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldDeliveryMethod, v)
	return u
}

// UpdateDeliveryMethod sets the "delivery_method" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateDeliveryMethod() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldDeliveryMethod)
	return u
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *GeneratedReportUpsert) SetRecipientEmail(v string) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldRecipientEmail, v)
	return u
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateRecipientEmail() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldRecipientEmail)
	return u
}

// ClearRecipientEmail clears the value of the "recipient_email" field.
func (u *GeneratedReportUpsert) ClearRecipientEmail() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldRecipientEmail)
	return u
}

// SetGeneratedAt sets the "generated_at" field.
func (u *GeneratedReportUpsert) SetGeneratedAt(v time.Time) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldGeneratedAt, v)
	return u
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateGeneratedAt() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldGeneratedAt)
	return u
}

// SetError sets the "error" field.
func (u *GeneratedReportUpsert) SetError(v string) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateError() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *GeneratedReportUpsert) ClearError() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldError)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *GeneratedReportUpsert) SetMetadata(v map[string]interface{}) *GeneratedReportUpsert {
	u.Set(generatedreport.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GeneratedReportUpsert) UpdateMetadata() *GeneratedReportUpsert {
	u.SetExcluded(generatedreport.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GeneratedReportUpsert) ClearMetadata() *GeneratedReportUpsert {
	u.SetNull(generatedreport.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GeneratedReportUpsertOne) UpdateNewValues() *GeneratedReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GeneratedReportUpsertOne) Ignore() *GeneratedReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GeneratedReportUpsertOne) DoNothing() *GeneratedReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GeneratedReportCreate.OnConflict
// documentation for more info.
func (u *GeneratedReportUpsertOne) Update(set func(*GeneratedReportUpsert)) *GeneratedReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GeneratedReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *GeneratedReportUpsertOne) SetStatus(v string) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateStatus() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateStatus()
	})
}

// SetFormat sets the "format" field.
func (u *GeneratedReportUpsertOne) SetFormat(v generatedreport.Format) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateFormat() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFormat()
	})
}

// SetFileURL sets the "file_url" field.
func (u *GeneratedReportUpsertOne) SetFileURL(v string) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFileURL(v)
	})
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateFileURL() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFileURL()
	})
}

// ClearFileURL clears the value of the "file_url" field.
func (u *GeneratedReportUpsertOne) ClearFileURL() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearFileURL()
	})
}

// SetFileSize sets the "file_size" field.
func (u *GeneratedReportUpsertOne) SetFileSize(v int) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFileSize(v)
	})
}

// AddFileSize adds v to the "file_size" field.
func (u *GeneratedReportUpsertOne) AddFileSize(v int) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.AddFileSize(v)
	})
}

// UpdateFileSize sets the "file_size" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateFileSize() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFileSize()
	})
}

// ClearFileSize clears the value of the "file_size" field.
func (u *GeneratedReportUpsertOne) ClearFileSize() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearFileSize()
	})
}

// SetParameters sets the "parameters" field.
func (u *GeneratedReportUpsertOne) SetParameters(v map[string]interface{}) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateParameters() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *GeneratedReportUpsertOne) ClearParameters() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearParameters()
	})
}

// SetDeliveryMethod sets the "delivery_method" field.
func (u *GeneratedReportUpsertOne) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetDeliveryMethod(v)
	})
}

// UpdateDeliveryMethod sets the "delivery_method" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateDeliveryMethod() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateDeliveryMethod()
	})
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *GeneratedReportUpsertOne) SetRecipientEmail(v string) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetRecipientEmail(v)
	})
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateRecipientEmail() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateRecipientEmail()
	})
}

// ClearRecipientEmail clears the value of the "recipient_email" field.
func (u *GeneratedReportUpsertOne) ClearRecipientEmail() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearRecipientEmail()
	})
}

// SetGeneratedAt sets the "generated_at" field.
func (u *GeneratedReportUpsertOne) SetGeneratedAt(v time.Time) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetGeneratedAt(v)
	})
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateGeneratedAt() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateGeneratedAt()
	})
}

// SetError sets the "error" field.
func (u *GeneratedReportUpsertOne) SetError(v string) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateError() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *GeneratedReportUpsertOne) ClearError() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearError()
	})
}

// SetMetadata sets the "metadata" field.
func (u *GeneratedReportUpsertOne) SetMetadata(v map[string]interface{}) *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GeneratedReportUpsertOne) UpdateMetadata() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GeneratedReportUpsertOne) ClearMetadata() *GeneratedReportUpsertOne {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *GeneratedReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GeneratedReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GeneratedReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GeneratedReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GeneratedReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GeneratedReportCreateBulk is the builder for creating many GeneratedReport entities in bulk.
type GeneratedReportCreateBulk struct {
	config
	err      error
	builders []*GeneratedReportCreate
	conflict []sql.ConflictOption
}

// Save creates the GeneratedReport entities in the database.
func (_c *GeneratedReportCreateBulk) Save(ctx context.Context) ([]*GeneratedReport, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*GeneratedReport, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GeneratedReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GeneratedReportCreateBulk) SaveX(ctx context.Context) []*GeneratedReport {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GeneratedReportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GeneratedReportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GeneratedReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GeneratedReportUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *GeneratedReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *GeneratedReportUpsertBulk {
	_c.conflict = opts
	return &GeneratedReportUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *GeneratedReportCreateBulk) OnConflictColumns(columns ...string) *GeneratedReportUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &GeneratedReportUpsertBulk{
		create: _c,
	}
}

// GeneratedReportUpsertBulk is the builder for "upsert"-ing
// a bulk of GeneratedReport nodes.
type GeneratedReportUpsertBulk struct {
	create *GeneratedReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GeneratedReportUpsertBulk) UpdateNewValues() *GeneratedReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GeneratedReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GeneratedReportUpsertBulk) Ignore() *GeneratedReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GeneratedReportUpsertBulk) DoNothing() *GeneratedReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GeneratedReportCreateBulk.OnConflict
// documentation for more info.
func (u *GeneratedReportUpsertBulk) Update(set func(*GeneratedReportUpsert)) *GeneratedReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GeneratedReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *GeneratedReportUpsertBulk) SetStatus(v string) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateStatus() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateStatus()
	})
}

// SetFormat sets the "format" field.
func (u *GeneratedReportUpsertBulk) SetFormat(v generatedreport.Format) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateFormat() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFormat()
	})
}

// SetFileURL sets the "file_url" field.
func (u *GeneratedReportUpsertBulk) SetFileURL(v string) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFileURL(v)
	})
}

// UpdateFileURL sets the "file_url" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateFileURL() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFileURL()
	})
}

// ClearFileURL clears the value of the "file_url" field.
func (u *GeneratedReportUpsertBulk) ClearFileURL() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearFileURL()
	})
}

// SetFileSize sets the "file_size" field.
func (u *GeneratedReportUpsertBulk) SetFileSize(v int) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetFileSize(v)
	})
}

// AddFileSize adds v to the "file_size" field.
func (u *GeneratedReportUpsertBulk) AddFileSize(v int) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.AddFileSize(v)
	})
}

// UpdateFileSize sets the "file_size" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateFileSize() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateFileSize()
	})
}

// ClearFileSize clears the value of the "file_size" field.
func (u *GeneratedReportUpsertBulk) ClearFileSize() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearFileSize()
	})
}

// SetParameters sets the "parameters" field.
func (u *GeneratedReportUpsertBulk) SetParameters(v map[string]interface{}) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetParameters(v)
	})
}

// UpdateParameters sets the "parameters" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateParameters() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateParameters()
	})
}

// ClearParameters clears the value of the "parameters" field.
func (u *GeneratedReportUpsertBulk) ClearParameters() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearParameters()
	})
}

// SetDeliveryMethod sets the "delivery_method" field.
func (u *GeneratedReportUpsertBulk) SetDeliveryMethod(v generatedreport.DeliveryMethod) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetDeliveryMethod(v)
	})
}

// UpdateDeliveryMethod sets the "delivery_method" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateDeliveryMethod() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateDeliveryMethod()
	})
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *GeneratedReportUpsertBulk) SetRecipientEmail(v string) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetRecipientEmail(v)
	})
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateRecipientEmail() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateRecipientEmail()
	})
}

// ClearRecipientEmail clears the value of the "recipient_email" field.
func (u *GeneratedReportUpsertBulk) ClearRecipientEmail() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearRecipientEmail()
	})
}

// SetGeneratedAt sets the "generated_at" field.
func (u *GeneratedReportUpsertBulk) SetGeneratedAt(v time.Time) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetGeneratedAt(v)
	})
}

// UpdateGeneratedAt sets the "generated_at" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateGeneratedAt() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateGeneratedAt()
	})
}

// SetError sets the "error" field.
func (u *GeneratedReportUpsertBulk) SetError(v string) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateError() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *GeneratedReportUpsertBulk) ClearError() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearError()
	})
}

// SetMetadata sets the "metadata" field.
func (u *GeneratedReportUpsertBulk) SetMetadata(v map[string]interface{}) *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *GeneratedReportUpsertBulk) UpdateMetadata() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *GeneratedReportUpsertBulk) ClearMetadata() *GeneratedReportUpsertBulk {
	return u.Update(func(s *GeneratedReportUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *GeneratedReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GeneratedReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GeneratedReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GeneratedReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
