// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/actionitem"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActionItemUpdate is the builder for updating ActionItem entities.
type ActionItemUpdate struct {
	config
	hooks    []Hook
	mutation *ActionItemMutation
}

// Where appends a list predicates to the ActionItemUpdate builder.
func (_u *ActionItemUpdate) Where(ps ...predicate.ActionItem) *ActionItemUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDescription sets the "description" field.
func (_u *ActionItemUpdate) SetDescription(v string) *ActionItemUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableDescription(v *string) *ActionItemUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionItemUpdate) SetOwnerID(v string) *ActionItemUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableOwnerID(v *string) *ActionItemUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionItemUpdate) SetDueDate(v time.Time) *ActionItemUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableDueDate(v *time.Time) *ActionItemUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionItemUpdate) ClearDueDate() *ActionItemUpdate {
	_u.mutation.ClearDueDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionItemUpdate) SetStatus(v string) *ActionItemUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableStatus(v *string) *ActionItemUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *ActionItemUpdate) SetCompletedAt(v time.Time) *ActionItemUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableCompletedAt(v *time.Time) *ActionItemUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *ActionItemUpdate) ClearCompletedAt() *ActionItemUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_u *ActionItemUpdate) SetAgendaItemID(id int) *ActionItemUpdate {
	_u.mutation.SetAgendaItemID(id)
	return _u
}

// SetNillableAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID if the given value is not nil.
func (_u *ActionItemUpdate) SetNillableAgendaItemID(id *int) *ActionItemUpdate {
	if id != nil {
		_u = _u.SetAgendaItemID(*id)
	}
	return _u
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_u *ActionItemUpdate) SetAgendaItem(v *AgendaItem) *ActionItemUpdate {
	return _u.SetAgendaItemID(v.ID)
}

// Mutation returns the ActionItemMutation object of the builder.
func (_u *ActionItemUpdate) Mutation() *ActionItemMutation {
	return _u.mutation
}

// ClearAgendaItem clears the "agenda_item" edge to the AgendaItem entity.
func (_u *ActionItemUpdate) ClearAgendaItem() *ActionItemUpdate {
	_u.mutation.ClearAgendaItem()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ActionItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionItemUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ActionItemUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionItemUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ActionItemUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(actionitem.Table, actionitem.Columns, sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(actionitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(actionitem.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionitem.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionitem.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(actionitem.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(actionitem.FieldCompletedAt, field.TypeTime)
	}
	if _u.mutation.AgendaItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ActionItemUpdateOne is the builder for updating a single ActionItem entity.
type ActionItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActionItemMutation
}

// SetDescription sets the "description" field.
func (_u *ActionItemUpdateOne) SetDescription(v string) *ActionItemUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableDescription(v *string) *ActionItemUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionItemUpdateOne) SetOwnerID(v string) *ActionItemUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableOwnerID(v *string) *ActionItemUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionItemUpdateOne) SetDueDate(v time.Time) *ActionItemUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableDueDate(v *time.Time) *ActionItemUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionItemUpdateOne) ClearDueDate() *ActionItemUpdateOne {
	_u.mutation.ClearDueDate()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionItemUpdateOne) SetStatus(v string) *ActionItemUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableStatus(v *string) *ActionItemUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *ActionItemUpdateOne) SetCompletedAt(v time.Time) *ActionItemUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableCompletedAt(v *time.Time) *ActionItemUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *ActionItemUpdateOne) ClearCompletedAt() *ActionItemUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID.
func (_u *ActionItemUpdateOne) SetAgendaItemID(id int) *ActionItemUpdateOne {
	_u.mutation.SetAgendaItemID(id)
	return _u
}

// SetNillableAgendaItemID sets the "agenda_item" edge to the AgendaItem entity by ID if the given value is not nil.
func (_u *ActionItemUpdateOne) SetNillableAgendaItemID(id *int) *ActionItemUpdateOne {
	if id != nil {
		_u = _u.SetAgendaItemID(*id)
	}
	return _u
}

// SetAgendaItem sets the "agenda_item" edge to the AgendaItem entity.
func (_u *ActionItemUpdateOne) SetAgendaItem(v *AgendaItem) *ActionItemUpdateOne {
	return _u.SetAgendaItemID(v.ID)
}

// Mutation returns the ActionItemMutation object of the builder.
func (_u *ActionItemUpdateOne) Mutation() *ActionItemMutation {
	return _u.mutation
}

// ClearAgendaItem clears the "agenda_item" edge to the AgendaItem entity.
func (_u *ActionItemUpdateOne) ClearAgendaItem() *ActionItemUpdateOne {
	_u.mutation.ClearAgendaItem()
	return _u
}

// Where appends a list predicates to the ActionItemUpdate builder.
func (_u *ActionItemUpdateOne) Where(ps ...predicate.ActionItem) *ActionItemUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ActionItemUpdateOne) Select(field string, fields ...string) *ActionItemUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ActionItem entity.
func (_u *ActionItemUpdateOne) Save(ctx context.Context) (*ActionItem, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionItemUpdateOne) SaveX(ctx context.Context) *ActionItem {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ActionItemUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionItemUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ActionItemUpdateOne) sqlSave(ctx context.Context) (_node *ActionItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(actionitem.Table, actionitem.Columns, sqlgraph.NewFieldSpec(actionitem.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActionItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionitem.FieldID)
		for _, f := range fields {
			if !actionitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != actionitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(actionitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(actionitem.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionitem.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionitem.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(actionitem.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(actionitem.FieldCompletedAt, field.TypeTime)
	}
	if _u.mutation.AgendaItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AgendaItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agendaitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActionItem{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
