// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/program"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Donation is the model entity for the Donation schema.
type Donation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency string `json:"currency,omitempty"`
	// IsRecurring holds the value of the "is_recurring" field.
	IsRecurring bool `json:"is_recurring,omitempty"`
	// Frequency holds the value of the "frequency" field.
	Frequency string `json:"frequency,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod string `json:"payment_method,omitempty"`
	// PaymentID holds the value of the "payment_id" field.
	PaymentID string `json:"payment_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ProcessedAt holds the value of the "processed_at" field.
	ProcessedAt time.Time `json:"processed_at,omitempty"`
	// Anonymous holds the value of the "anonymous" field.
	Anonymous bool `json:"anonymous,omitempty"`
	// PaymentGatewayRef holds the value of the "payment_gateway_ref" field.
	PaymentGatewayRef string `json:"payment_gateway_ref,omitempty"`
	// DonorMessage holds the value of the "donor_message" field.
	DonorMessage string `json:"donor_message,omitempty"`
	// TaxReceiptSent holds the value of the "tax_receipt_sent" field.
	TaxReceiptSent bool `json:"tax_receipt_sent,omitempty"`
	// TaxReceiptSentAt holds the value of the "tax_receipt_sent_at" field.
	TaxReceiptSentAt time.Time `json:"tax_receipt_sent_at,omitempty"`
	// RecurringInterval holds the value of the "recurring_interval" field.
	RecurringInterval string `json:"recurring_interval,omitempty"`
	// NextPaymentDate holds the value of the "next_payment_date" field.
	NextPaymentDate time.Time `json:"next_payment_date,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DonationQuery when eager-loading is set.
	Edges                          DonationEdges `json:"edges"`
	fundraising_campaign_donations *int
	program_donations              *int
	user_donations                 *int
	selectValues                   sql.SelectValues
}

// DonationEdges holds the relations/edges for other nodes in the graph.
type DonationEdges struct {
	// Donor holds the value of the donor edge.
	Donor *User `json:"donor,omitempty"`
	// Program holds the value of the program edge.
	Program *Program `json:"program,omitempty"`
	// Campaign holds the value of the campaign edge.
	Campaign *FundraisingCampaign `json:"campaign,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DonorOrErr returns the Donor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DonationEdges) DonorOrErr() (*User, error) {
	if e.Donor != nil {
		return e.Donor, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "donor"}
}

// ProgramOrErr returns the Program value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DonationEdges) ProgramOrErr() (*Program, error) {
	if e.Program != nil {
		return e.Program, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: program.Label}
	}
	return nil, &NotLoadedError{edge: "program"}
}

// CampaignOrErr returns the Campaign value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DonationEdges) CampaignOrErr() (*FundraisingCampaign, error) {
	if e.Campaign != nil {
		return e.Campaign, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: fundraisingcampaign.Label}
	}
	return nil, &NotLoadedError{edge: "campaign"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Donation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case donation.FieldMetadata:
			values[i] = new([]byte)
		case donation.FieldIsRecurring, donation.FieldAnonymous, donation.FieldTaxReceiptSent:
			values[i] = new(sql.NullBool)
		case donation.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case donation.FieldID:
			values[i] = new(sql.NullInt64)
		case donation.FieldCurrency, donation.FieldFrequency, donation.FieldPaymentMethod, donation.FieldPaymentID, donation.FieldStatus, donation.FieldPaymentGatewayRef, donation.FieldDonorMessage, donation.FieldRecurringInterval:
			values[i] = new(sql.NullString)
		case donation.FieldProcessedAt, donation.FieldTaxReceiptSentAt, donation.FieldNextPaymentDate, donation.FieldCreatedAt, donation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case donation.ForeignKeys[0]: // fundraising_campaign_donations
			values[i] = new(sql.NullInt64)
		case donation.ForeignKeys[1]: // program_donations
			values[i] = new(sql.NullInt64)
		case donation.ForeignKeys[2]: // user_donations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Donation fields.
func (_m *Donation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case donation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case donation.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				_m.Amount = value.Float64
			}
		case donation.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				_m.Currency = value.String
			}
		case donation.FieldIsRecurring:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_recurring", values[i])
			} else if value.Valid {
				_m.IsRecurring = value.Bool
			}
		case donation.FieldFrequency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field frequency", values[i])
			} else if value.Valid {
				_m.Frequency = value.String
			}
		case donation.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				_m.PaymentMethod = value.String
			}
		case donation.FieldPaymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value.Valid {
				_m.PaymentID = value.String
			}
		case donation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case donation.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				_m.ProcessedAt = value.Time
			}
		case donation.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				_m.Anonymous = value.Bool
			}
		case donation.FieldPaymentGatewayRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_gateway_ref", values[i])
			} else if value.Valid {
				_m.PaymentGatewayRef = value.String
			}
		case donation.FieldDonorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field donor_message", values[i])
			} else if value.Valid {
				_m.DonorMessage = value.String
			}
		case donation.FieldTaxReceiptSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field tax_receipt_sent", values[i])
			} else if value.Valid {
				_m.TaxReceiptSent = value.Bool
			}
		case donation.FieldTaxReceiptSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tax_receipt_sent_at", values[i])
			} else if value.Valid {
				_m.TaxReceiptSentAt = value.Time
			}
		case donation.FieldRecurringInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recurring_interval", values[i])
			} else if value.Valid {
				_m.RecurringInterval = value.String
			}
		case donation.FieldNextPaymentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_payment_date", values[i])
			} else if value.Valid {
				_m.NextPaymentDate = value.Time
			}
		case donation.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case donation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case donation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case donation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fundraising_campaign_donations", value)
			} else if value.Valid {
				_m.fundraising_campaign_donations = new(int)
				*_m.fundraising_campaign_donations = int(value.Int64)
			}
		case donation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field program_donations", value)
			} else if value.Valid {
				_m.program_donations = new(int)
				*_m.program_donations = int(value.Int64)
			}
		case donation.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_donations", value)
			} else if value.Valid {
				_m.user_donations = new(int)
				*_m.user_donations = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Donation.
// This includes values selected through modifiers, order, etc.
func (_m *Donation) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDonor queries the "donor" edge of the Donation entity.
func (_m *Donation) QueryDonor() *UserQuery {
	return NewDonationClient(_m.config).QueryDonor(_m)
}

// QueryProgram queries the "program" edge of the Donation entity.
func (_m *Donation) QueryProgram() *ProgramQuery {
	return NewDonationClient(_m.config).QueryProgram(_m)
}

// QueryCampaign queries the "campaign" edge of the Donation entity.
func (_m *Donation) QueryCampaign() *FundraisingCampaignQuery {
	return NewDonationClient(_m.config).QueryCampaign(_m)
}

// Update returns a builder for updating this Donation.
// Note that you need to call Donation.Unwrap() before calling this method if this Donation
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Donation) Update() *DonationUpdateOne {
	return NewDonationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Donation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Donation) Unwrap() *Donation {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Donation is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Donation) String() string {
	var builder strings.Builder
	builder.WriteString("Donation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(_m.Currency)
	builder.WriteString(", ")
	builder.WriteString("is_recurring=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsRecurring))
	builder.WriteString(", ")
	builder.WriteString("frequency=")
	builder.WriteString(_m.Frequency)
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(_m.PaymentMethod)
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(_m.PaymentID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	builder.WriteString("processed_at=")
	builder.WriteString(_m.ProcessedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", _m.Anonymous))
	builder.WriteString(", ")
	builder.WriteString("payment_gateway_ref=")
	builder.WriteString(_m.PaymentGatewayRef)
	builder.WriteString(", ")
	builder.WriteString("donor_message=")
	builder.WriteString(_m.DonorMessage)
	builder.WriteString(", ")
	builder.WriteString("tax_receipt_sent=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaxReceiptSent))
	builder.WriteString(", ")
	builder.WriteString("tax_receipt_sent_at=")
	builder.WriteString(_m.TaxReceiptSentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("recurring_interval=")
	builder.WriteString(_m.RecurringInterval)
	builder.WriteString(", ")
	builder.WriteString("next_payment_date=")
	builder.WriteString(_m.NextPaymentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Donations is a parsable slice of Donation.
type Donations []*Donation
