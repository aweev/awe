// Code generated by ent, DO NOT EDIT.

package galleryimage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the galleryimage type in the database.
	Label = "gallery_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldImageWidth holds the string denoting the image_width field in the database.
	FieldImageWidth = "image_width"
	// FieldImageHeight holds the string denoting the image_height field in the database.
	FieldImageHeight = "image_height"
	// FieldAltText holds the string denoting the alt_text field in the database.
	FieldAltText = "alt_text"
	// FieldCaption holds the string denoting the caption field in the database.
	FieldCaption = "caption"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// Table holds the table name of the galleryimage in the database.
	Table = "gallery_images"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "gallery_images"
	// BlockInverseTable is the table name for the BlockGallery entity.
	// It exists in this package in order to avoid circular dependency with the "blockgallery" package.
	BlockInverseTable = "block_galleries"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "block_gallery_images"
)

// Columns holds all SQL columns for galleryimage fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldImageURL,
	FieldImageWidth,
	FieldImageHeight,
	FieldAltText,
	FieldCaption,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "gallery_images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_gallery_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the GalleryImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByImageWidth orders the results by the image_width field.
func ByImageWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageWidth, opts...).ToFunc()
}

// ByImageHeight orders the results by the image_height field.
func ByImageHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageHeight, opts...).ToFunc()
}

// ByBlockField orders the results by block field.
func ByBlockField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BlockTable, BlockColumn),
	)
}
