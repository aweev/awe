// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/page"
	"awe/ent/ent/predicate"
	"awe/ent/ent/seoconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeoConfigUpdate is the builder for updating SeoConfig entities.
type SeoConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SeoConfigMutation
}

// Where appends a list predicates to the SeoConfigUpdate builder.
func (_u *SeoConfigUpdate) Where(ps ...predicate.SeoConfig) *SeoConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMetaTitle sets the "meta_title" field.
func (_u *SeoConfigUpdate) SetMetaTitle(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetMetaTitle(v)
	return _u
}

// SetMetaDescription sets the "meta_description" field.
func (_u *SeoConfigUpdate) SetMetaDescription(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetMetaDescription(v)
	return _u
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (_u *SeoConfigUpdate) ClearMetaDescription() *SeoConfigUpdate {
	_u.mutation.ClearMetaDescription()
	return _u
}

// SetKeywords sets the "keywords" field.
func (_u *SeoConfigUpdate) SetKeywords(v map[string][]string) *SeoConfigUpdate {
	_u.mutation.SetKeywords(v)
	return _u
}

// ClearKeywords clears the value of the "keywords" field.
func (_u *SeoConfigUpdate) ClearKeywords() *SeoConfigUpdate {
	_u.mutation.ClearKeywords()
	return _u
}

// SetOgTitle sets the "og_title" field.
func (_u *SeoConfigUpdate) SetOgTitle(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetOgTitle(v)
	return _u
}

// ClearOgTitle clears the value of the "og_title" field.
func (_u *SeoConfigUpdate) ClearOgTitle() *SeoConfigUpdate {
	_u.mutation.ClearOgTitle()
	return _u
}

// SetOgDescription sets the "og_description" field.
func (_u *SeoConfigUpdate) SetOgDescription(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetOgDescription(v)
	return _u
}

// ClearOgDescription clears the value of the "og_description" field.
func (_u *SeoConfigUpdate) ClearOgDescription() *SeoConfigUpdate {
	_u.mutation.ClearOgDescription()
	return _u
}

// SetOgImageURL sets the "og_image_url" field.
func (_u *SeoConfigUpdate) SetOgImageURL(v string) *SeoConfigUpdate {
	_u.mutation.SetOgImageURL(v)
	return _u
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableOgImageURL(v *string) *SeoConfigUpdate {
	if v != nil {
		_u.SetOgImageURL(*v)
	}
	return _u
}

// ClearOgImageURL clears the value of the "og_image_url" field.
func (_u *SeoConfigUpdate) ClearOgImageURL() *SeoConfigUpdate {
	_u.mutation.ClearOgImageURL()
	return _u
}

// SetOgType sets the "og_type" field.
func (_u *SeoConfigUpdate) SetOgType(v string) *SeoConfigUpdate {
	_u.mutation.SetOgType(v)
	return _u
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableOgType(v *string) *SeoConfigUpdate {
	if v != nil {
		_u.SetOgType(*v)
	}
	return _u
}

// SetTwitterCard sets the "twitter_card" field.
func (_u *SeoConfigUpdate) SetTwitterCard(v string) *SeoConfigUpdate {
	_u.mutation.SetTwitterCard(v)
	return _u
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableTwitterCard(v *string) *SeoConfigUpdate {
	if v != nil {
		_u.SetTwitterCard(*v)
	}
	return _u
}

// SetTwitterTitle sets the "twitter_title" field.
func (_u *SeoConfigUpdate) SetTwitterTitle(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetTwitterTitle(v)
	return _u
}

// ClearTwitterTitle clears the value of the "twitter_title" field.
func (_u *SeoConfigUpdate) ClearTwitterTitle() *SeoConfigUpdate {
	_u.mutation.ClearTwitterTitle()
	return _u
}

// SetTwitterDescription sets the "twitter_description" field.
func (_u *SeoConfigUpdate) SetTwitterDescription(v map[string]string) *SeoConfigUpdate {
	_u.mutation.SetTwitterDescription(v)
	return _u
}

// ClearTwitterDescription clears the value of the "twitter_description" field.
func (_u *SeoConfigUpdate) ClearTwitterDescription() *SeoConfigUpdate {
	_u.mutation.ClearTwitterDescription()
	return _u
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (_u *SeoConfigUpdate) SetTwitterImageURL(v string) *SeoConfigUpdate {
	_u.mutation.SetTwitterImageURL(v)
	return _u
}

// SetNillableTwitterImageURL sets the "twitter_image_url" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableTwitterImageURL(v *string) *SeoConfigUpdate {
	if v != nil {
		_u.SetTwitterImageURL(*v)
	}
	return _u
}

// ClearTwitterImageURL clears the value of the "twitter_image_url" field.
func (_u *SeoConfigUpdate) ClearTwitterImageURL() *SeoConfigUpdate {
	_u.mutation.ClearTwitterImageURL()
	return _u
}

// SetCanonicalURL sets the "canonical_url" field.
func (_u *SeoConfigUpdate) SetCanonicalURL(v string) *SeoConfigUpdate {
	_u.mutation.SetCanonicalURL(v)
	return _u
}

// SetNillableCanonicalURL sets the "canonical_url" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableCanonicalURL(v *string) *SeoConfigUpdate {
	if v != nil {
		_u.SetCanonicalURL(*v)
	}
	return _u
}

// ClearCanonicalURL clears the value of the "canonical_url" field.
func (_u *SeoConfigUpdate) ClearCanonicalURL() *SeoConfigUpdate {
	_u.mutation.ClearCanonicalURL()
	return _u
}

// SetNoindex sets the "noindex" field.
func (_u *SeoConfigUpdate) SetNoindex(v bool) *SeoConfigUpdate {
	_u.mutation.SetNoindex(v)
	return _u
}

// SetNillableNoindex sets the "noindex" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableNoindex(v *bool) *SeoConfigUpdate {
	if v != nil {
		_u.SetNoindex(*v)
	}
	return _u
}

// SetNofollow sets the "nofollow" field.
func (_u *SeoConfigUpdate) SetNofollow(v bool) *SeoConfigUpdate {
	_u.mutation.SetNofollow(v)
	return _u
}

// SetNillableNofollow sets the "nofollow" field if the given value is not nil.
func (_u *SeoConfigUpdate) SetNillableNofollow(v *bool) *SeoConfigUpdate {
	if v != nil {
		_u.SetNofollow(*v)
	}
	return _u
}

// SetStructuredData sets the "structured_data" field.
func (_u *SeoConfigUpdate) SetStructuredData(v map[string]interface{}) *SeoConfigUpdate {
	_u.mutation.SetStructuredData(v)
	return _u
}

// ClearStructuredData clears the value of the "structured_data" field.
func (_u *SeoConfigUpdate) ClearStructuredData() *SeoConfigUpdate {
	_u.mutation.ClearStructuredData()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SeoConfigUpdate) SetUpdatedAt(v time.Time) *SeoConfigUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_u *SeoConfigUpdate) SetPageID(id int) *SeoConfigUpdate {
	_u.mutation.SetPageID(id)
	return _u
}

// SetPage sets the "page" edge to the Page entity.
func (_u *SeoConfigUpdate) SetPage(v *Page) *SeoConfigUpdate {
	return _u.SetPageID(v.ID)
}

// Mutation returns the SeoConfigMutation object of the builder.
func (_u *SeoConfigUpdate) Mutation() *SeoConfigMutation {
	return _u.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (_u *SeoConfigUpdate) ClearPage() *SeoConfigUpdate {
	_u.mutation.ClearPage()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SeoConfigUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SeoConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SeoConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SeoConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SeoConfigUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := seoconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SeoConfigUpdate) check() error {
	if _u.mutation.PageCleared() && len(_u.mutation.PageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeoConfig.page"`)
	}
	return nil
}

func (_u *SeoConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seoconfig.Table, seoconfig.Columns, sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MetaTitle(); ok {
		_spec.SetField(seoconfig.FieldMetaTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.MetaDescription(); ok {
		_spec.SetField(seoconfig.FieldMetaDescription, field.TypeJSON, value)
	}
	if _u.mutation.MetaDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldMetaDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Keywords(); ok {
		_spec.SetField(seoconfig.FieldKeywords, field.TypeJSON, value)
	}
	if _u.mutation.KeywordsCleared() {
		_spec.ClearField(seoconfig.FieldKeywords, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgTitle(); ok {
		_spec.SetField(seoconfig.FieldOgTitle, field.TypeJSON, value)
	}
	if _u.mutation.OgTitleCleared() {
		_spec.ClearField(seoconfig.FieldOgTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgDescription(); ok {
		_spec.SetField(seoconfig.FieldOgDescription, field.TypeJSON, value)
	}
	if _u.mutation.OgDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldOgDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgImageURL(); ok {
		_spec.SetField(seoconfig.FieldOgImageURL, field.TypeString, value)
	}
	if _u.mutation.OgImageURLCleared() {
		_spec.ClearField(seoconfig.FieldOgImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.OgType(); ok {
		_spec.SetField(seoconfig.FieldOgType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TwitterCard(); ok {
		_spec.SetField(seoconfig.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := _u.mutation.TwitterTitle(); ok {
		_spec.SetField(seoconfig.FieldTwitterTitle, field.TypeJSON, value)
	}
	if _u.mutation.TwitterTitleCleared() {
		_spec.ClearField(seoconfig.FieldTwitterTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.TwitterDescription(); ok {
		_spec.SetField(seoconfig.FieldTwitterDescription, field.TypeJSON, value)
	}
	if _u.mutation.TwitterDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldTwitterDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.TwitterImageURL(); ok {
		_spec.SetField(seoconfig.FieldTwitterImageURL, field.TypeString, value)
	}
	if _u.mutation.TwitterImageURLCleared() {
		_spec.ClearField(seoconfig.FieldTwitterImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.CanonicalURL(); ok {
		_spec.SetField(seoconfig.FieldCanonicalURL, field.TypeString, value)
	}
	if _u.mutation.CanonicalURLCleared() {
		_spec.ClearField(seoconfig.FieldCanonicalURL, field.TypeString)
	}
	if value, ok := _u.mutation.Noindex(); ok {
		_spec.SetField(seoconfig.FieldNoindex, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Nofollow(); ok {
		_spec.SetField(seoconfig.FieldNofollow, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StructuredData(); ok {
		_spec.SetField(seoconfig.FieldStructuredData, field.TypeJSON, value)
	}
	if _u.mutation.StructuredDataCleared() {
		_spec.ClearField(seoconfig.FieldStructuredData, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(seoconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seoconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SeoConfigUpdateOne is the builder for updating a single SeoConfig entity.
type SeoConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeoConfigMutation
}

// SetMetaTitle sets the "meta_title" field.
func (_u *SeoConfigUpdateOne) SetMetaTitle(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetMetaTitle(v)
	return _u
}

// SetMetaDescription sets the "meta_description" field.
func (_u *SeoConfigUpdateOne) SetMetaDescription(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetMetaDescription(v)
	return _u
}

// ClearMetaDescription clears the value of the "meta_description" field.
func (_u *SeoConfigUpdateOne) ClearMetaDescription() *SeoConfigUpdateOne {
	_u.mutation.ClearMetaDescription()
	return _u
}

// SetKeywords sets the "keywords" field.
func (_u *SeoConfigUpdateOne) SetKeywords(v map[string][]string) *SeoConfigUpdateOne {
	_u.mutation.SetKeywords(v)
	return _u
}

// ClearKeywords clears the value of the "keywords" field.
func (_u *SeoConfigUpdateOne) ClearKeywords() *SeoConfigUpdateOne {
	_u.mutation.ClearKeywords()
	return _u
}

// SetOgTitle sets the "og_title" field.
func (_u *SeoConfigUpdateOne) SetOgTitle(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetOgTitle(v)
	return _u
}

// ClearOgTitle clears the value of the "og_title" field.
func (_u *SeoConfigUpdateOne) ClearOgTitle() *SeoConfigUpdateOne {
	_u.mutation.ClearOgTitle()
	return _u
}

// SetOgDescription sets the "og_description" field.
func (_u *SeoConfigUpdateOne) SetOgDescription(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetOgDescription(v)
	return _u
}

// ClearOgDescription clears the value of the "og_description" field.
func (_u *SeoConfigUpdateOne) ClearOgDescription() *SeoConfigUpdateOne {
	_u.mutation.ClearOgDescription()
	return _u
}

// SetOgImageURL sets the "og_image_url" field.
func (_u *SeoConfigUpdateOne) SetOgImageURL(v string) *SeoConfigUpdateOne {
	_u.mutation.SetOgImageURL(v)
	return _u
}

// SetNillableOgImageURL sets the "og_image_url" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableOgImageURL(v *string) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetOgImageURL(*v)
	}
	return _u
}

// ClearOgImageURL clears the value of the "og_image_url" field.
func (_u *SeoConfigUpdateOne) ClearOgImageURL() *SeoConfigUpdateOne {
	_u.mutation.ClearOgImageURL()
	return _u
}

// SetOgType sets the "og_type" field.
func (_u *SeoConfigUpdateOne) SetOgType(v string) *SeoConfigUpdateOne {
	_u.mutation.SetOgType(v)
	return _u
}

// SetNillableOgType sets the "og_type" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableOgType(v *string) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetOgType(*v)
	}
	return _u
}

// SetTwitterCard sets the "twitter_card" field.
func (_u *SeoConfigUpdateOne) SetTwitterCard(v string) *SeoConfigUpdateOne {
	_u.mutation.SetTwitterCard(v)
	return _u
}

// SetNillableTwitterCard sets the "twitter_card" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableTwitterCard(v *string) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetTwitterCard(*v)
	}
	return _u
}

// SetTwitterTitle sets the "twitter_title" field.
func (_u *SeoConfigUpdateOne) SetTwitterTitle(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetTwitterTitle(v)
	return _u
}

// ClearTwitterTitle clears the value of the "twitter_title" field.
func (_u *SeoConfigUpdateOne) ClearTwitterTitle() *SeoConfigUpdateOne {
	_u.mutation.ClearTwitterTitle()
	return _u
}

// SetTwitterDescription sets the "twitter_description" field.
func (_u *SeoConfigUpdateOne) SetTwitterDescription(v map[string]string) *SeoConfigUpdateOne {
	_u.mutation.SetTwitterDescription(v)
	return _u
}

// ClearTwitterDescription clears the value of the "twitter_description" field.
func (_u *SeoConfigUpdateOne) ClearTwitterDescription() *SeoConfigUpdateOne {
	_u.mutation.ClearTwitterDescription()
	return _u
}

// SetTwitterImageURL sets the "twitter_image_url" field.
func (_u *SeoConfigUpdateOne) SetTwitterImageURL(v string) *SeoConfigUpdateOne {
	_u.mutation.SetTwitterImageURL(v)
	return _u
}

// SetNillableTwitterImageURL sets the "twitter_image_url" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableTwitterImageURL(v *string) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetTwitterImageURL(*v)
	}
	return _u
}

// ClearTwitterImageURL clears the value of the "twitter_image_url" field.
func (_u *SeoConfigUpdateOne) ClearTwitterImageURL() *SeoConfigUpdateOne {
	_u.mutation.ClearTwitterImageURL()
	return _u
}

// SetCanonicalURL sets the "canonical_url" field.
func (_u *SeoConfigUpdateOne) SetCanonicalURL(v string) *SeoConfigUpdateOne {
	_u.mutation.SetCanonicalURL(v)
	return _u
}

// SetNillableCanonicalURL sets the "canonical_url" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableCanonicalURL(v *string) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetCanonicalURL(*v)
	}
	return _u
}

// ClearCanonicalURL clears the value of the "canonical_url" field.
func (_u *SeoConfigUpdateOne) ClearCanonicalURL() *SeoConfigUpdateOne {
	_u.mutation.ClearCanonicalURL()
	return _u
}

// SetNoindex sets the "noindex" field.
func (_u *SeoConfigUpdateOne) SetNoindex(v bool) *SeoConfigUpdateOne {
	_u.mutation.SetNoindex(v)
	return _u
}

// SetNillableNoindex sets the "noindex" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableNoindex(v *bool) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetNoindex(*v)
	}
	return _u
}

// SetNofollow sets the "nofollow" field.
func (_u *SeoConfigUpdateOne) SetNofollow(v bool) *SeoConfigUpdateOne {
	_u.mutation.SetNofollow(v)
	return _u
}

// SetNillableNofollow sets the "nofollow" field if the given value is not nil.
func (_u *SeoConfigUpdateOne) SetNillableNofollow(v *bool) *SeoConfigUpdateOne {
	if v != nil {
		_u.SetNofollow(*v)
	}
	return _u
}

// SetStructuredData sets the "structured_data" field.
func (_u *SeoConfigUpdateOne) SetStructuredData(v map[string]interface{}) *SeoConfigUpdateOne {
	_u.mutation.SetStructuredData(v)
	return _u
}

// ClearStructuredData clears the value of the "structured_data" field.
func (_u *SeoConfigUpdateOne) ClearStructuredData() *SeoConfigUpdateOne {
	_u.mutation.ClearStructuredData()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SeoConfigUpdateOne) SetUpdatedAt(v time.Time) *SeoConfigUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (_u *SeoConfigUpdateOne) SetPageID(id int) *SeoConfigUpdateOne {
	_u.mutation.SetPageID(id)
	return _u
}

// SetPage sets the "page" edge to the Page entity.
func (_u *SeoConfigUpdateOne) SetPage(v *Page) *SeoConfigUpdateOne {
	return _u.SetPageID(v.ID)
}

// Mutation returns the SeoConfigMutation object of the builder.
func (_u *SeoConfigUpdateOne) Mutation() *SeoConfigMutation {
	return _u.mutation
}

// ClearPage clears the "page" edge to the Page entity.
func (_u *SeoConfigUpdateOne) ClearPage() *SeoConfigUpdateOne {
	_u.mutation.ClearPage()
	return _u
}

// Where appends a list predicates to the SeoConfigUpdate builder.
func (_u *SeoConfigUpdateOne) Where(ps ...predicate.SeoConfig) *SeoConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SeoConfigUpdateOne) Select(field string, fields ...string) *SeoConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SeoConfig entity.
func (_u *SeoConfigUpdateOne) Save(ctx context.Context) (*SeoConfig, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SeoConfigUpdateOne) SaveX(ctx context.Context) *SeoConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SeoConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SeoConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SeoConfigUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := seoconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SeoConfigUpdateOne) check() error {
	if _u.mutation.PageCleared() && len(_u.mutation.PageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeoConfig.page"`)
	}
	return nil
}

func (_u *SeoConfigUpdateOne) sqlSave(ctx context.Context) (_node *SeoConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seoconfig.Table, seoconfig.Columns, sqlgraph.NewFieldSpec(seoconfig.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeoConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seoconfig.FieldID)
		for _, f := range fields {
			if !seoconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seoconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.MetaTitle(); ok {
		_spec.SetField(seoconfig.FieldMetaTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.MetaDescription(); ok {
		_spec.SetField(seoconfig.FieldMetaDescription, field.TypeJSON, value)
	}
	if _u.mutation.MetaDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldMetaDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.Keywords(); ok {
		_spec.SetField(seoconfig.FieldKeywords, field.TypeJSON, value)
	}
	if _u.mutation.KeywordsCleared() {
		_spec.ClearField(seoconfig.FieldKeywords, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgTitle(); ok {
		_spec.SetField(seoconfig.FieldOgTitle, field.TypeJSON, value)
	}
	if _u.mutation.OgTitleCleared() {
		_spec.ClearField(seoconfig.FieldOgTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgDescription(); ok {
		_spec.SetField(seoconfig.FieldOgDescription, field.TypeJSON, value)
	}
	if _u.mutation.OgDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldOgDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.OgImageURL(); ok {
		_spec.SetField(seoconfig.FieldOgImageURL, field.TypeString, value)
	}
	if _u.mutation.OgImageURLCleared() {
		_spec.ClearField(seoconfig.FieldOgImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.OgType(); ok {
		_spec.SetField(seoconfig.FieldOgType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TwitterCard(); ok {
		_spec.SetField(seoconfig.FieldTwitterCard, field.TypeString, value)
	}
	if value, ok := _u.mutation.TwitterTitle(); ok {
		_spec.SetField(seoconfig.FieldTwitterTitle, field.TypeJSON, value)
	}
	if _u.mutation.TwitterTitleCleared() {
		_spec.ClearField(seoconfig.FieldTwitterTitle, field.TypeJSON)
	}
	if value, ok := _u.mutation.TwitterDescription(); ok {
		_spec.SetField(seoconfig.FieldTwitterDescription, field.TypeJSON, value)
	}
	if _u.mutation.TwitterDescriptionCleared() {
		_spec.ClearField(seoconfig.FieldTwitterDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.TwitterImageURL(); ok {
		_spec.SetField(seoconfig.FieldTwitterImageURL, field.TypeString, value)
	}
	if _u.mutation.TwitterImageURLCleared() {
		_spec.ClearField(seoconfig.FieldTwitterImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.CanonicalURL(); ok {
		_spec.SetField(seoconfig.FieldCanonicalURL, field.TypeString, value)
	}
	if _u.mutation.CanonicalURLCleared() {
		_spec.ClearField(seoconfig.FieldCanonicalURL, field.TypeString)
	}
	if value, ok := _u.mutation.Noindex(); ok {
		_spec.SetField(seoconfig.FieldNoindex, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Nofollow(); ok {
		_spec.SetField(seoconfig.FieldNofollow, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StructuredData(); ok {
		_spec.SetField(seoconfig.FieldStructuredData, field.TypeJSON, value)
	}
	if _u.mutation.StructuredDataCleared() {
		_spec.ClearField(seoconfig.FieldStructuredData, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(seoconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SeoConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seoconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
