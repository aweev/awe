// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockNewsletterSignupUpdate is the builder for updating BlockNewsletterSignup entities.
type BlockNewsletterSignupUpdate struct {
	config
	hooks    []Hook
	mutation *BlockNewsletterSignupMutation
}

// Where appends a list predicates to the BlockNewsletterSignupUpdate builder.
func (_u *BlockNewsletterSignupUpdate) Where(ps ...predicate.BlockNewsletterSignup) *BlockNewsletterSignupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockNewsletterSignupUpdate) SetInternalName(v string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdate) SetNillableInternalName(v *string) *BlockNewsletterSignupUpdate {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockNewsletterSignupUpdate) SetTitle(v map[string]string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockNewsletterSignupUpdate) SetDescription(v map[string]string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockNewsletterSignupUpdate) ClearDescription() *BlockNewsletterSignupUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetButtonText sets the "button_text" field.
func (_u *BlockNewsletterSignupUpdate) SetButtonText(v map[string]string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetButtonText(v)
	return _u
}

// SetShowNameField sets the "show_name_field" field.
func (_u *BlockNewsletterSignupUpdate) SetShowNameField(v bool) *BlockNewsletterSignupUpdate {
	_u.mutation.SetShowNameField(v)
	return _u
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdate) SetNillableShowNameField(v *bool) *BlockNewsletterSignupUpdate {
	if v != nil {
		_u.SetShowNameField(*v)
	}
	return _u
}

// SetPlaceholder sets the "placeholder" field.
func (_u *BlockNewsletterSignupUpdate) SetPlaceholder(v map[string]string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetPlaceholder(v)
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockNewsletterSignupUpdate) SetLayout(v string) *BlockNewsletterSignupUpdate {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdate) SetNillableLayout(v *string) *BlockNewsletterSignupUpdate {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockNewsletterSignupUpdate) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpdate {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdate) SetNillableColorScheme(v *blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpdate {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockNewsletterSignupUpdate) SetUpdatedAt(v time.Time) *BlockNewsletterSignupUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockNewsletterSignupUpdate) SetContentBlockID(id int) *BlockNewsletterSignupUpdate {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockNewsletterSignupUpdate) SetContentBlock(v *ContentBlock) *BlockNewsletterSignupUpdate {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockNewsletterSignupMutation object of the builder.
func (_u *BlockNewsletterSignupUpdate) Mutation() *BlockNewsletterSignupMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockNewsletterSignupUpdate) ClearContentBlock() *BlockNewsletterSignupUpdate {
	_u.mutation.ClearContentBlock()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BlockNewsletterSignupUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockNewsletterSignupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BlockNewsletterSignupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockNewsletterSignupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockNewsletterSignupUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocknewslettersignup.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockNewsletterSignupUpdate) check() error {
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blocknewslettersignup.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockNewsletterSignup.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockNewsletterSignup.content_block"`)
	}
	return nil
}

func (_u *BlockNewsletterSignupUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocknewslettersignup.Table, blocknewslettersignup.Columns, sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocknewslettersignup.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocknewslettersignup.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocknewslettersignup.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocknewslettersignup.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ButtonText(); ok {
		_spec.SetField(blocknewslettersignup.FieldButtonText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ShowNameField(); ok {
		_spec.SetField(blocknewslettersignup.FieldShowNameField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Placeholder(); ok {
		_spec.SetField(blocknewslettersignup.FieldPlaceholder, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocknewslettersignup.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blocknewslettersignup.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocknewslettersignup.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocknewslettersignup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BlockNewsletterSignupUpdateOne is the builder for updating a single BlockNewsletterSignup entity.
type BlockNewsletterSignupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockNewsletterSignupMutation
}

// SetInternalName sets the "internal_name" field.
func (_u *BlockNewsletterSignupUpdateOne) SetInternalName(v string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetInternalName(v)
	return _u
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdateOne) SetNillableInternalName(v *string) *BlockNewsletterSignupUpdateOne {
	if v != nil {
		_u.SetInternalName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *BlockNewsletterSignupUpdateOne) SetTitle(v map[string]string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *BlockNewsletterSignupUpdateOne) SetDescription(v map[string]string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *BlockNewsletterSignupUpdateOne) ClearDescription() *BlockNewsletterSignupUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetButtonText sets the "button_text" field.
func (_u *BlockNewsletterSignupUpdateOne) SetButtonText(v map[string]string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetButtonText(v)
	return _u
}

// SetShowNameField sets the "show_name_field" field.
func (_u *BlockNewsletterSignupUpdateOne) SetShowNameField(v bool) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetShowNameField(v)
	return _u
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdateOne) SetNillableShowNameField(v *bool) *BlockNewsletterSignupUpdateOne {
	if v != nil {
		_u.SetShowNameField(*v)
	}
	return _u
}

// SetPlaceholder sets the "placeholder" field.
func (_u *BlockNewsletterSignupUpdateOne) SetPlaceholder(v map[string]string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetPlaceholder(v)
	return _u
}

// SetLayout sets the "layout" field.
func (_u *BlockNewsletterSignupUpdateOne) SetLayout(v string) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetLayout(v)
	return _u
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdateOne) SetNillableLayout(v *string) *BlockNewsletterSignupUpdateOne {
	if v != nil {
		_u.SetLayout(*v)
	}
	return _u
}

// SetColorScheme sets the "color_scheme" field.
func (_u *BlockNewsletterSignupUpdateOne) SetColorScheme(v blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetColorScheme(v)
	return _u
}

// SetNillableColorScheme sets the "color_scheme" field if the given value is not nil.
func (_u *BlockNewsletterSignupUpdateOne) SetNillableColorScheme(v *blocknewslettersignup.ColorScheme) *BlockNewsletterSignupUpdateOne {
	if v != nil {
		_u.SetColorScheme(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *BlockNewsletterSignupUpdateOne) SetUpdatedAt(v time.Time) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_u *BlockNewsletterSignupUpdateOne) SetContentBlockID(id int) *BlockNewsletterSignupUpdateOne {
	_u.mutation.SetContentBlockID(id)
	return _u
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_u *BlockNewsletterSignupUpdateOne) SetContentBlock(v *ContentBlock) *BlockNewsletterSignupUpdateOne {
	return _u.SetContentBlockID(v.ID)
}

// Mutation returns the BlockNewsletterSignupMutation object of the builder.
func (_u *BlockNewsletterSignupUpdateOne) Mutation() *BlockNewsletterSignupMutation {
	return _u.mutation
}

// ClearContentBlock clears the "content_block" edge to the ContentBlock entity.
func (_u *BlockNewsletterSignupUpdateOne) ClearContentBlock() *BlockNewsletterSignupUpdateOne {
	_u.mutation.ClearContentBlock()
	return _u
}

// Where appends a list predicates to the BlockNewsletterSignupUpdate builder.
func (_u *BlockNewsletterSignupUpdateOne) Where(ps ...predicate.BlockNewsletterSignup) *BlockNewsletterSignupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BlockNewsletterSignupUpdateOne) Select(field string, fields ...string) *BlockNewsletterSignupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BlockNewsletterSignup entity.
func (_u *BlockNewsletterSignupUpdateOne) Save(ctx context.Context) (*BlockNewsletterSignup, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BlockNewsletterSignupUpdateOne) SaveX(ctx context.Context) *BlockNewsletterSignup {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BlockNewsletterSignupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BlockNewsletterSignupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BlockNewsletterSignupUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := blocknewslettersignup.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BlockNewsletterSignupUpdateOne) check() error {
	if v, ok := _u.mutation.ColorScheme(); ok {
		if err := blocknewslettersignup.ColorSchemeValidator(v); err != nil {
			return &ValidationError{Name: "color_scheme", err: fmt.Errorf(`ent: validator failed for field "BlockNewsletterSignup.color_scheme": %w`, err)}
		}
	}
	if _u.mutation.ContentBlockCleared() && len(_u.mutation.ContentBlockIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockNewsletterSignup.content_block"`)
	}
	return nil
}

func (_u *BlockNewsletterSignupUpdateOne) sqlSave(ctx context.Context) (_node *BlockNewsletterSignup, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocknewslettersignup.Table, blocknewslettersignup.Columns, sqlgraph.NewFieldSpec(blocknewslettersignup.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockNewsletterSignup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocknewslettersignup.FieldID)
		for _, f := range fields {
			if !blocknewslettersignup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocknewslettersignup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.InternalName(); ok {
		_spec.SetField(blocknewslettersignup.FieldInternalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(blocknewslettersignup.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(blocknewslettersignup.FieldDescription, field.TypeJSON, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(blocknewslettersignup.FieldDescription, field.TypeJSON)
	}
	if value, ok := _u.mutation.ButtonText(); ok {
		_spec.SetField(blocknewslettersignup.FieldButtonText, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.ShowNameField(); ok {
		_spec.SetField(blocknewslettersignup.FieldShowNameField, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Placeholder(); ok {
		_spec.SetField(blocknewslettersignup.FieldPlaceholder, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Layout(); ok {
		_spec.SetField(blocknewslettersignup.FieldLayout, field.TypeString, value)
	}
	if value, ok := _u.mutation.ColorScheme(); ok {
		_spec.SetField(blocknewslettersignup.FieldColorScheme, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(blocknewslettersignup.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ContentBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockNewsletterSignup{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocknewslettersignup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
