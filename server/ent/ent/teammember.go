// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/teammember"
	"awe/ent/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TeamMember is the model entity for the TeamMember schema.
type TeamMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio map[string]string `json:"bio,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// LinkedinURL holds the value of the "linkedin_url" field.
	LinkedinURL string `json:"linkedin_url,omitempty"`
	// TwitterURL holds the value of the "twitter_url" field.
	TwitterURL string `json:"twitter_url,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Type holds the value of the "type" field.
	Type teammember.Type `json:"type,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamMemberQuery when eager-loading is set.
	Edges            TeamMemberEdges `json:"edges"`
	team_member_user *int
	selectValues     sql.SelectValues
}

// TeamMemberEdges holds the relations/edges for other nodes in the graph.
type TeamMemberEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamMemberEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeamMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teammember.FieldTitle, teammember.FieldBio:
			values[i] = new([]byte)
		case teammember.FieldIsActive:
			values[i] = new(sql.NullBool)
		case teammember.FieldID, teammember.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case teammember.FieldName, teammember.FieldImageURL, teammember.FieldLinkedinURL, teammember.FieldTwitterURL, teammember.FieldEmail, teammember.FieldType:
			values[i] = new(sql.NullString)
		case teammember.FieldCreatedAt, teammember.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case teammember.ForeignKeys[0]: // team_member_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeamMember fields.
func (_m *TeamMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teammember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case teammember.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case teammember.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case teammember.FieldBio:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Bio); err != nil {
					return fmt.Errorf("unmarshal field bio: %w", err)
				}
			}
		case teammember.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case teammember.FieldLinkedinURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field linkedin_url", values[i])
			} else if value.Valid {
				_m.LinkedinURL = value.String
			}
		case teammember.FieldTwitterURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_url", values[i])
			} else if value.Valid {
				_m.TwitterURL = value.String
			}
		case teammember.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case teammember.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = teammember.Type(value.String)
			}
		case teammember.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				_m.DisplayOrder = int(value.Int64)
			}
		case teammember.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case teammember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case teammember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case teammember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_member_user", value)
			} else if value.Valid {
				_m.team_member_user = new(int)
				*_m.team_member_user = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TeamMember.
// This includes values selected through modifiers, order, etc.
func (_m *TeamMember) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TeamMember entity.
func (_m *TeamMember) QueryUser() *UserQuery {
	return NewTeamMemberClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this TeamMember.
// Note that you need to call TeamMember.Unwrap() before calling this method if this TeamMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TeamMember) Update() *TeamMemberUpdateOne {
	return NewTeamMemberClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TeamMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TeamMember) Unwrap() *TeamMember {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeamMember is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TeamMember) String() string {
	var builder strings.Builder
	builder.WriteString("TeamMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(fmt.Sprintf("%v", _m.Bio))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("linkedin_url=")
	builder.WriteString(_m.LinkedinURL)
	builder.WriteString(", ")
	builder.WriteString("twitter_url=")
	builder.WriteString(_m.TwitterURL)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", _m.DisplayOrder))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeamMembers is a parsable slice of TeamMember.
type TeamMembers []*TeamMember
