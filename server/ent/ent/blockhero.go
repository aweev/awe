// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockhero"
	"awe/ent/ent/contentblock"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlockHero is the model entity for the BlockHero schema.
type BlockHero struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle map[string]string `json:"subtitle,omitempty"`
	// CtaButtons holds the value of the "cta_buttons" field.
	CtaButtons []map[string]interface{} `json:"cta_buttons,omitempty"`
	// BackgroundImageURL holds the value of the "background_image_url" field.
	BackgroundImageURL string `json:"background_image_url,omitempty"`
	// Badge holds the value of the "badge" field.
	Badge map[string]string `json:"badge,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// TextAlign holds the value of the "text_align" field.
	TextAlign blockhero.TextAlign `json:"text_align,omitempty"`
	// ColorScheme holds the value of the "color_scheme" field.
	ColorScheme blockhero.ColorScheme `json:"color_scheme,omitempty"`
	// MinHeight holds the value of the "min_height" field.
	MinHeight string `json:"min_height,omitempty"`
	// BackgroundVideoURL holds the value of the "background_video_url" field.
	BackgroundVideoURL string `json:"background_video_url,omitempty"`
	// OverlayColor holds the value of the "overlay_color" field.
	OverlayColor string `json:"overlay_color,omitempty"`
	// OverlayOpacity holds the value of the "overlay_opacity" field.
	OverlayOpacity float64 `json:"overlay_opacity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockHeroQuery when eager-loading is set.
	Edges                    BlockHeroEdges `json:"edges"`
	content_block_block_hero *int
	selectValues             sql.SelectValues
}

// BlockHeroEdges holds the relations/edges for other nodes in the graph.
type BlockHeroEdges struct {
	// ContentBlock holds the value of the content_block edge.
	ContentBlock *ContentBlock `json:"content_block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContentBlockOrErr returns the ContentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockHeroEdges) ContentBlockOrErr() (*ContentBlock, error) {
	if e.ContentBlock != nil {
		return e.ContentBlock, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contentblock.Label}
	}
	return nil, &NotLoadedError{edge: "content_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockHero) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockhero.FieldTitle, blockhero.FieldSubtitle, blockhero.FieldCtaButtons, blockhero.FieldBadge, blockhero.FieldDescription:
			values[i] = new([]byte)
		case blockhero.FieldOverlayOpacity:
			values[i] = new(sql.NullFloat64)
		case blockhero.FieldID:
			values[i] = new(sql.NullInt64)
		case blockhero.FieldInternalName, blockhero.FieldBackgroundImageURL, blockhero.FieldTextAlign, blockhero.FieldColorScheme, blockhero.FieldMinHeight, blockhero.FieldBackgroundVideoURL, blockhero.FieldOverlayColor:
			values[i] = new(sql.NullString)
		case blockhero.ForeignKeys[0]: // content_block_block_hero
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockHero fields.
func (_m *BlockHero) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockhero.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case blockhero.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				_m.InternalName = value.String
			}
		case blockhero.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case blockhero.FieldSubtitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Subtitle); err != nil {
					return fmt.Errorf("unmarshal field subtitle: %w", err)
				}
			}
		case blockhero.FieldCtaButtons:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cta_buttons", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.CtaButtons); err != nil {
					return fmt.Errorf("unmarshal field cta_buttons: %w", err)
				}
			}
		case blockhero.FieldBackgroundImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_image_url", values[i])
			} else if value.Valid {
				_m.BackgroundImageURL = value.String
			}
		case blockhero.FieldBadge:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field badge", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Badge); err != nil {
					return fmt.Errorf("unmarshal field badge: %w", err)
				}
			}
		case blockhero.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case blockhero.FieldTextAlign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_align", values[i])
			} else if value.Valid {
				_m.TextAlign = blockhero.TextAlign(value.String)
			}
		case blockhero.FieldColorScheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_scheme", values[i])
			} else if value.Valid {
				_m.ColorScheme = blockhero.ColorScheme(value.String)
			}
		case blockhero.FieldMinHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field min_height", values[i])
			} else if value.Valid {
				_m.MinHeight = value.String
			}
		case blockhero.FieldBackgroundVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_video_url", values[i])
			} else if value.Valid {
				_m.BackgroundVideoURL = value.String
			}
		case blockhero.FieldOverlayColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overlay_color", values[i])
			} else if value.Valid {
				_m.OverlayColor = value.String
			}
		case blockhero.FieldOverlayOpacity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field overlay_opacity", values[i])
			} else if value.Valid {
				_m.OverlayOpacity = value.Float64
			}
		case blockhero.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field content_block_block_hero", value)
			} else if value.Valid {
				_m.content_block_block_hero = new(int)
				*_m.content_block_block_hero = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockHero.
// This includes values selected through modifiers, order, etc.
func (_m *BlockHero) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryContentBlock queries the "content_block" edge of the BlockHero entity.
func (_m *BlockHero) QueryContentBlock() *ContentBlockQuery {
	return NewBlockHeroClient(_m.config).QueryContentBlock(_m)
}

// Update returns a builder for updating this BlockHero.
// Note that you need to call BlockHero.Unwrap() before calling this method if this BlockHero
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BlockHero) Update() *BlockHeroUpdateOne {
	return NewBlockHeroClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BlockHero entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BlockHero) Unwrap() *BlockHero {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockHero is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BlockHero) String() string {
	var builder strings.Builder
	builder.WriteString("BlockHero(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("internal_name=")
	builder.WriteString(_m.InternalName)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("subtitle=")
	builder.WriteString(fmt.Sprintf("%v", _m.Subtitle))
	builder.WriteString(", ")
	builder.WriteString("cta_buttons=")
	builder.WriteString(fmt.Sprintf("%v", _m.CtaButtons))
	builder.WriteString(", ")
	builder.WriteString("background_image_url=")
	builder.WriteString(_m.BackgroundImageURL)
	builder.WriteString(", ")
	builder.WriteString("badge=")
	builder.WriteString(fmt.Sprintf("%v", _m.Badge))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("text_align=")
	builder.WriteString(fmt.Sprintf("%v", _m.TextAlign))
	builder.WriteString(", ")
	builder.WriteString("color_scheme=")
	builder.WriteString(fmt.Sprintf("%v", _m.ColorScheme))
	builder.WriteString(", ")
	builder.WriteString("min_height=")
	builder.WriteString(_m.MinHeight)
	builder.WriteString(", ")
	builder.WriteString("background_video_url=")
	builder.WriteString(_m.BackgroundVideoURL)
	builder.WriteString(", ")
	builder.WriteString("overlay_color=")
	builder.WriteString(_m.OverlayColor)
	builder.WriteString(", ")
	builder.WriteString("overlay_opacity=")
	builder.WriteString(fmt.Sprintf("%v", _m.OverlayOpacity))
	builder.WriteByte(')')
	return builder.String()
}

// BlockHeros is a parsable slice of BlockHero.
type BlockHeros []*BlockHero
