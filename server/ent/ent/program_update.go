// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/grant"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programcarditem"
	"awe/ent/ent/programcategory"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/successstory"
	"awe/ent/ent/user"
	"awe/ent/ent/volunteeropportunity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProgramUpdate is the builder for updating Program entities.
type ProgramUpdate struct {
	config
	hooks    []Hook
	mutation *ProgramMutation
}

// Where appends a list predicates to the ProgramUpdate builder.
func (_u *ProgramUpdate) Where(ps ...predicate.Program) *ProgramUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *ProgramUpdate) SetSlug(v string) *ProgramUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableSlug(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramUpdate) SetName(v map[string]string) *ProgramUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramUpdate) SetDescription(v map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetTagline sets the "tagline" field.
func (_u *ProgramUpdate) SetTagline(v map[string]string) *ProgramUpdate {
	_u.mutation.SetTagline(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProgramUpdate) SetStatus(v program.Status) *ProgramUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableStatus(v *program.Status) *ProgramUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *ProgramUpdate) SetStartDate(v time.Time) *ProgramUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableStartDate(v *time.Time) *ProgramUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *ProgramUpdate) ClearStartDate() *ProgramUpdate {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *ProgramUpdate) SetEndDate(v time.Time) *ProgramUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableEndDate(v *time.Time) *ProgramUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *ProgramUpdate) ClearEndDate() *ProgramUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *ProgramUpdate) SetHeroImageURL(v string) *ProgramUpdate {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableHeroImageURL(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *ProgramUpdate) ClearHeroImageURL() *ProgramUpdate {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_u *ProgramUpdate) SetThumbnailURL(v string) *ProgramUpdate {
	_u.mutation.SetThumbnailURL(v)
	return _u
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableThumbnailURL(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetThumbnailURL(*v)
	}
	return _u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (_u *ProgramUpdate) ClearThumbnailURL() *ProgramUpdate {
	_u.mutation.ClearThumbnailURL()
	return _u
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (_u *ProgramUpdate) SetVideoThumbnailURL(v string) *ProgramUpdate {
	_u.mutation.SetVideoThumbnailURL(v)
	return _u
}

// SetNillableVideoThumbnailURL sets the "video_thumbnail_url" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableVideoThumbnailURL(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetVideoThumbnailURL(*v)
	}
	return _u
}

// ClearVideoThumbnailURL clears the value of the "video_thumbnail_url" field.
func (_u *ProgramUpdate) ClearVideoThumbnailURL() *ProgramUpdate {
	_u.mutation.ClearVideoThumbnailURL()
	return _u
}

// SetMediaGallery sets the "media_gallery" field.
func (_u *ProgramUpdate) SetMediaGallery(v []string) *ProgramUpdate {
	_u.mutation.SetMediaGallery(v)
	return _u
}

// AppendMediaGallery appends value to the "media_gallery" field.
func (_u *ProgramUpdate) AppendMediaGallery(v []string) *ProgramUpdate {
	_u.mutation.AppendMediaGallery(v)
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProgramUpdate) SetTags(v []string) *ProgramUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProgramUpdate) AppendTags(v []string) *ProgramUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// SetMetrics sets the "metrics" field.
func (_u *ProgramUpdate) SetMetrics(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetMetrics(v)
	return _u
}

// AppendMetrics appends value to the "metrics" field.
func (_u *ProgramUpdate) AppendMetrics(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.AppendMetrics(v)
	return _u
}

// SetCurriculum sets the "curriculum" field.
func (_u *ProgramUpdate) SetCurriculum(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetCurriculum(v)
	return _u
}

// AppendCurriculum appends value to the "curriculum" field.
func (_u *ProgramUpdate) AppendCurriculum(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.AppendCurriculum(v)
	return _u
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (_u *ProgramUpdate) SetEligibilityCriteria(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetEligibilityCriteria(v)
	return _u
}

// AppendEligibilityCriteria appends value to the "eligibility_criteria" field.
func (_u *ProgramUpdate) AppendEligibilityCriteria(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.AppendEligibilityCriteria(v)
	return _u
}

// SetApplicationSteps sets the "application_steps" field.
func (_u *ProgramUpdate) SetApplicationSteps(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetApplicationSteps(v)
	return _u
}

// AppendApplicationSteps appends value to the "application_steps" field.
func (_u *ProgramUpdate) AppendApplicationSteps(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.AppendApplicationSteps(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *ProgramUpdate) SetDuration(v string) *ProgramUpdate {
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableDuration(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *ProgramUpdate) ClearDuration() *ProgramUpdate {
	_u.mutation.ClearDuration()
	return _u
}

// SetCapacity sets the "capacity" field.
func (_u *ProgramUpdate) SetCapacity(v int) *ProgramUpdate {
	_u.mutation.ResetCapacity()
	_u.mutation.SetCapacity(v)
	return _u
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableCapacity(v *int) *ProgramUpdate {
	if v != nil {
		_u.SetCapacity(*v)
	}
	return _u
}

// AddCapacity adds value to the "capacity" field.
func (_u *ProgramUpdate) AddCapacity(v int) *ProgramUpdate {
	_u.mutation.AddCapacity(v)
	return _u
}

// ClearCapacity clears the value of the "capacity" field.
func (_u *ProgramUpdate) ClearCapacity() *ProgramUpdate {
	_u.mutation.ClearCapacity()
	return _u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_u *ProgramUpdate) SetApplicationDeadline(v time.Time) *ProgramUpdate {
	_u.mutation.SetApplicationDeadline(v)
	return _u
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableApplicationDeadline(v *time.Time) *ProgramUpdate {
	if v != nil {
		_u.SetApplicationDeadline(*v)
	}
	return _u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (_u *ProgramUpdate) ClearApplicationDeadline() *ProgramUpdate {
	_u.mutation.ClearApplicationDeadline()
	return _u
}

// SetRequirements sets the "requirements" field.
func (_u *ProgramUpdate) SetRequirements(v []string) *ProgramUpdate {
	_u.mutation.SetRequirements(v)
	return _u
}

// AppendRequirements appends value to the "requirements" field.
func (_u *ProgramUpdate) AppendRequirements(v []string) *ProgramUpdate {
	_u.mutation.AppendRequirements(v)
	return _u
}

// SetMinAge sets the "min_age" field.
func (_u *ProgramUpdate) SetMinAge(v int) *ProgramUpdate {
	_u.mutation.ResetMinAge()
	_u.mutation.SetMinAge(v)
	return _u
}

// SetNillableMinAge sets the "min_age" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableMinAge(v *int) *ProgramUpdate {
	if v != nil {
		_u.SetMinAge(*v)
	}
	return _u
}

// AddMinAge adds value to the "min_age" field.
func (_u *ProgramUpdate) AddMinAge(v int) *ProgramUpdate {
	_u.mutation.AddMinAge(v)
	return _u
}

// ClearMinAge clears the value of the "min_age" field.
func (_u *ProgramUpdate) ClearMinAge() *ProgramUpdate {
	_u.mutation.ClearMinAge()
	return _u
}

// SetMaxAge sets the "max_age" field.
func (_u *ProgramUpdate) SetMaxAge(v int) *ProgramUpdate {
	_u.mutation.ResetMaxAge()
	_u.mutation.SetMaxAge(v)
	return _u
}

// SetNillableMaxAge sets the "max_age" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableMaxAge(v *int) *ProgramUpdate {
	if v != nil {
		_u.SetMaxAge(*v)
	}
	return _u
}

// AddMaxAge adds value to the "max_age" field.
func (_u *ProgramUpdate) AddMaxAge(v int) *ProgramUpdate {
	_u.mutation.AddMaxAge(v)
	return _u
}

// ClearMaxAge clears the value of the "max_age" field.
func (_u *ProgramUpdate) ClearMaxAge() *ProgramUpdate {
	_u.mutation.ClearMaxAge()
	return _u
}

// SetRequiredDocs sets the "required_docs" field.
func (_u *ProgramUpdate) SetRequiredDocs(v []string) *ProgramUpdate {
	_u.mutation.SetRequiredDocs(v)
	return _u
}

// AppendRequiredDocs appends value to the "required_docs" field.
func (_u *ProgramUpdate) AppendRequiredDocs(v []string) *ProgramUpdate {
	_u.mutation.AppendRequiredDocs(v)
	return _u
}

// SetCost sets the "cost" field.
func (_u *ProgramUpdate) SetCost(v float64) *ProgramUpdate {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableCost(v *float64) *ProgramUpdate {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *ProgramUpdate) AddCost(v float64) *ProgramUpdate {
	_u.mutation.AddCost(v)
	return _u
}

// ClearCost clears the value of the "cost" field.
func (_u *ProgramUpdate) ClearCost() *ProgramUpdate {
	_u.mutation.ClearCost()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *ProgramUpdate) SetCurrency(v string) *ProgramUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *ProgramUpdate) SetNillableCurrency(v *string) *ProgramUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetRules sets the "rules" field.
func (_u *ProgramUpdate) SetRules(v []string) *ProgramUpdate {
	_u.mutation.SetRules(v)
	return _u
}

// AppendRules appends value to the "rules" field.
func (_u *ProgramUpdate) AppendRules(v []string) *ProgramUpdate {
	_u.mutation.AppendRules(v)
	return _u
}

// SetSteps sets the "steps" field.
func (_u *ProgramUpdate) SetSteps(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.SetSteps(v)
	return _u
}

// AppendSteps appends value to the "steps" field.
func (_u *ProgramUpdate) AppendSteps(v []map[string]interface{}) *ProgramUpdate {
	_u.mutation.AppendSteps(v)
	return _u
}

// SetRequiredSkills sets the "required_skills" field.
func (_u *ProgramUpdate) SetRequiredSkills(v []string) *ProgramUpdate {
	_u.mutation.SetRequiredSkills(v)
	return _u
}

// AppendRequiredSkills appends value to the "required_skills" field.
func (_u *ProgramUpdate) AppendRequiredSkills(v []string) *ProgramUpdate {
	_u.mutation.AppendRequiredSkills(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramUpdate) SetUpdatedAt(v time.Time) *ProgramUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCategoryID sets the "category" edge to the ProgramCategory entity by ID.
func (_u *ProgramUpdate) SetCategoryID(id int) *ProgramUpdate {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetCategory sets the "category" edge to the ProgramCategory entity.
func (_u *ProgramUpdate) SetCategory(v *ProgramCategory) *ProgramUpdate {
	return _u.SetCategoryID(v.ID)
}

// AddEnrolmentIDs adds the "enrolments" edge to the ProgramEnrolment entity by IDs.
func (_u *ProgramUpdate) AddEnrolmentIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddEnrolmentIDs(ids...)
	return _u
}

// AddEnrolments adds the "enrolments" edges to the ProgramEnrolment entity.
func (_u *ProgramUpdate) AddEnrolments(v ...*ProgramEnrolment) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrolmentIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ProgramParticipant entity by IDs.
func (_u *ProgramUpdate) AddParticipantIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ProgramParticipant entity.
func (_u *ProgramUpdate) AddParticipants(v ...*ProgramParticipant) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_u *ProgramUpdate) SetCreatedByID(id int) *ProgramUpdate {
	_u.mutation.SetCreatedByID(id)
	return _u
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (_u *ProgramUpdate) SetNillableCreatedByID(id *int) *ProgramUpdate {
	if id != nil {
		_u = _u.SetCreatedByID(*id)
	}
	return _u
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_u *ProgramUpdate) SetCreatedBy(v *User) *ProgramUpdate {
	return _u.SetCreatedByID(v.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (_u *ProgramUpdate) SetUpdatedByID(id int) *ProgramUpdate {
	_u.mutation.SetUpdatedByID(id)
	return _u
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (_u *ProgramUpdate) SetNillableUpdatedByID(id *int) *ProgramUpdate {
	if id != nil {
		_u = _u.SetUpdatedByID(*id)
	}
	return _u
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (_u *ProgramUpdate) SetUpdatedBy(v *User) *ProgramUpdate {
	return _u.SetUpdatedByID(v.ID)
}

// AddProgramCardItemIDs adds the "program_card_items" edge to the ProgramCardItem entity by IDs.
func (_u *ProgramUpdate) AddProgramCardItemIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddProgramCardItemIDs(ids...)
	return _u
}

// AddProgramCardItems adds the "program_card_items" edges to the ProgramCardItem entity.
func (_u *ProgramUpdate) AddProgramCardItems(v ...*ProgramCardItem) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramCardItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *ProgramUpdate) AddEventIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *ProgramUpdate) AddEvents(v ...*Event) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_u *ProgramUpdate) AddSuccessStoryIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddSuccessStoryIDs(ids...)
	return _u
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_u *ProgramUpdate) AddSuccessStories(v ...*SuccessStory) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSuccessStoryIDs(ids...)
}

// AddVolunteerOpportunityIDs adds the "volunteer_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_u *ProgramUpdate) AddVolunteerOpportunityIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddVolunteerOpportunityIDs(ids...)
	return _u
}

// AddVolunteerOpportunities adds the "volunteer_opportunities" edges to the VolunteerOpportunity entity.
func (_u *ProgramUpdate) AddVolunteerOpportunities(v ...*VolunteerOpportunity) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVolunteerOpportunityIDs(ids...)
}

// AddFundraisingCampaignIDs adds the "fundraising_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_u *ProgramUpdate) AddFundraisingCampaignIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddFundraisingCampaignIDs(ids...)
	return _u
}

// AddFundraisingCampaigns adds the "fundraising_campaigns" edges to the FundraisingCampaign entity.
func (_u *ProgramUpdate) AddFundraisingCampaigns(v ...*FundraisingCampaign) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFundraisingCampaignIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *ProgramUpdate) AddDonationIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *ProgramUpdate) AddDonations(v ...*Donation) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *ProgramUpdate) AddGrantIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *ProgramUpdate) AddGrants(v ...*Grant) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_u *ProgramUpdate) AddSiteVisitIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddSiteVisitIDs(ids...)
	return _u
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_u *ProgramUpdate) AddSiteVisits(v ...*SiteVisit) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteVisitIDs(ids...)
}

// AddImpactMetricIDs adds the "impact_metrics" edge to the ImpactMetric entity by IDs.
func (_u *ProgramUpdate) AddImpactMetricIDs(ids ...int) *ProgramUpdate {
	_u.mutation.AddImpactMetricIDs(ids...)
	return _u
}

// AddImpactMetrics adds the "impact_metrics" edges to the ImpactMetric entity.
func (_u *ProgramUpdate) AddImpactMetrics(v ...*ImpactMetric) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImpactMetricIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (_u *ProgramUpdate) Mutation() *ProgramMutation {
	return _u.mutation
}

// ClearCategory clears the "category" edge to the ProgramCategory entity.
func (_u *ProgramUpdate) ClearCategory() *ProgramUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// ClearEnrolments clears all "enrolments" edges to the ProgramEnrolment entity.
func (_u *ProgramUpdate) ClearEnrolments() *ProgramUpdate {
	_u.mutation.ClearEnrolments()
	return _u
}

// RemoveEnrolmentIDs removes the "enrolments" edge to ProgramEnrolment entities by IDs.
func (_u *ProgramUpdate) RemoveEnrolmentIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveEnrolmentIDs(ids...)
	return _u
}

// RemoveEnrolments removes "enrolments" edges to ProgramEnrolment entities.
func (_u *ProgramUpdate) RemoveEnrolments(v ...*ProgramEnrolment) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrolmentIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ProgramParticipant entity.
func (_u *ProgramUpdate) ClearParticipants() *ProgramUpdate {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ProgramParticipant entities by IDs.
func (_u *ProgramUpdate) RemoveParticipantIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ProgramParticipant entities.
func (_u *ProgramUpdate) RemoveParticipants(v ...*ProgramParticipant) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (_u *ProgramUpdate) ClearCreatedBy() *ProgramUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (_u *ProgramUpdate) ClearUpdatedBy() *ProgramUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// ClearProgramCardItems clears all "program_card_items" edges to the ProgramCardItem entity.
func (_u *ProgramUpdate) ClearProgramCardItems() *ProgramUpdate {
	_u.mutation.ClearProgramCardItems()
	return _u
}

// RemoveProgramCardItemIDs removes the "program_card_items" edge to ProgramCardItem entities by IDs.
func (_u *ProgramUpdate) RemoveProgramCardItemIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveProgramCardItemIDs(ids...)
	return _u
}

// RemoveProgramCardItems removes "program_card_items" edges to ProgramCardItem entities.
func (_u *ProgramUpdate) RemoveProgramCardItems(v ...*ProgramCardItem) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramCardItemIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *ProgramUpdate) ClearEvents() *ProgramUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *ProgramUpdate) RemoveEventIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *ProgramUpdate) RemoveEvents(v ...*Event) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSuccessStories clears all "success_stories" edges to the SuccessStory entity.
func (_u *ProgramUpdate) ClearSuccessStories() *ProgramUpdate {
	_u.mutation.ClearSuccessStories()
	return _u
}

// RemoveSuccessStoryIDs removes the "success_stories" edge to SuccessStory entities by IDs.
func (_u *ProgramUpdate) RemoveSuccessStoryIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveSuccessStoryIDs(ids...)
	return _u
}

// RemoveSuccessStories removes "success_stories" edges to SuccessStory entities.
func (_u *ProgramUpdate) RemoveSuccessStories(v ...*SuccessStory) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSuccessStoryIDs(ids...)
}

// ClearVolunteerOpportunities clears all "volunteer_opportunities" edges to the VolunteerOpportunity entity.
func (_u *ProgramUpdate) ClearVolunteerOpportunities() *ProgramUpdate {
	_u.mutation.ClearVolunteerOpportunities()
	return _u
}

// RemoveVolunteerOpportunityIDs removes the "volunteer_opportunities" edge to VolunteerOpportunity entities by IDs.
func (_u *ProgramUpdate) RemoveVolunteerOpportunityIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveVolunteerOpportunityIDs(ids...)
	return _u
}

// RemoveVolunteerOpportunities removes "volunteer_opportunities" edges to VolunteerOpportunity entities.
func (_u *ProgramUpdate) RemoveVolunteerOpportunities(v ...*VolunteerOpportunity) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVolunteerOpportunityIDs(ids...)
}

// ClearFundraisingCampaigns clears all "fundraising_campaigns" edges to the FundraisingCampaign entity.
func (_u *ProgramUpdate) ClearFundraisingCampaigns() *ProgramUpdate {
	_u.mutation.ClearFundraisingCampaigns()
	return _u
}

// RemoveFundraisingCampaignIDs removes the "fundraising_campaigns" edge to FundraisingCampaign entities by IDs.
func (_u *ProgramUpdate) RemoveFundraisingCampaignIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveFundraisingCampaignIDs(ids...)
	return _u
}

// RemoveFundraisingCampaigns removes "fundraising_campaigns" edges to FundraisingCampaign entities.
func (_u *ProgramUpdate) RemoveFundraisingCampaigns(v ...*FundraisingCampaign) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFundraisingCampaignIDs(ids...)
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *ProgramUpdate) ClearDonations() *ProgramUpdate {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *ProgramUpdate) RemoveDonationIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *ProgramUpdate) RemoveDonations(v ...*Donation) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *ProgramUpdate) ClearGrants() *ProgramUpdate {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *ProgramUpdate) RemoveGrantIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *ProgramUpdate) RemoveGrants(v ...*Grant) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearSiteVisits clears all "site_visits" edges to the SiteVisit entity.
func (_u *ProgramUpdate) ClearSiteVisits() *ProgramUpdate {
	_u.mutation.ClearSiteVisits()
	return _u
}

// RemoveSiteVisitIDs removes the "site_visits" edge to SiteVisit entities by IDs.
func (_u *ProgramUpdate) RemoveSiteVisitIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveSiteVisitIDs(ids...)
	return _u
}

// RemoveSiteVisits removes "site_visits" edges to SiteVisit entities.
func (_u *ProgramUpdate) RemoveSiteVisits(v ...*SiteVisit) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteVisitIDs(ids...)
}

// ClearImpactMetrics clears all "impact_metrics" edges to the ImpactMetric entity.
func (_u *ProgramUpdate) ClearImpactMetrics() *ProgramUpdate {
	_u.mutation.ClearImpactMetrics()
	return _u
}

// RemoveImpactMetricIDs removes the "impact_metrics" edge to ImpactMetric entities by IDs.
func (_u *ProgramUpdate) RemoveImpactMetricIDs(ids ...int) *ProgramUpdate {
	_u.mutation.RemoveImpactMetricIDs(ids...)
	return _u
}

// RemoveImpactMetrics removes "impact_metrics" edges to ImpactMetric entities.
func (_u *ProgramUpdate) RemoveImpactMetrics(v ...*ImpactMetric) *ProgramUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImpactMetricIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProgramUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProgramUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := program.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Program.status": %w`, err)}
		}
	}
	if _u.mutation.CategoryCleared() && len(_u.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Program.category"`)
	}
	return nil
}

func (_u *ProgramUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(program.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Tagline(); ok {
		_spec.SetField(program.FieldTagline, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(program.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(program.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(program.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(program.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.ThumbnailURL(); ok {
		_spec.SetField(program.FieldThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.ThumbnailURLCleared() {
		_spec.ClearField(program.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.VideoThumbnailURL(); ok {
		_spec.SetField(program.FieldVideoThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.VideoThumbnailURLCleared() {
		_spec.ClearField(program.FieldVideoThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaGallery(); ok {
		_spec.SetField(program.FieldMediaGallery, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMediaGallery(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldMediaGallery, value)
		})
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.Metrics(); ok {
		_spec.SetField(program.FieldMetrics, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMetrics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldMetrics, value)
		})
	}
	if value, ok := _u.mutation.Curriculum(); ok {
		_spec.SetField(program.FieldCurriculum, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCurriculum(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldCurriculum, value)
		})
	}
	if value, ok := _u.mutation.EligibilityCriteria(); ok {
		_spec.SetField(program.FieldEligibilityCriteria, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedEligibilityCriteria(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldEligibilityCriteria, value)
		})
	}
	if value, ok := _u.mutation.ApplicationSteps(); ok {
		_spec.SetField(program.FieldApplicationSteps, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApplicationSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldApplicationSteps, value)
		})
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(program.FieldDuration, field.TypeString, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(program.FieldDuration, field.TypeString)
	}
	if value, ok := _u.mutation.Capacity(); ok {
		_spec.SetField(program.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCapacity(); ok {
		_spec.AddField(program.FieldCapacity, field.TypeInt, value)
	}
	if _u.mutation.CapacityCleared() {
		_spec.ClearField(program.FieldCapacity, field.TypeInt)
	}
	if value, ok := _u.mutation.ApplicationDeadline(); ok {
		_spec.SetField(program.FieldApplicationDeadline, field.TypeTime, value)
	}
	if _u.mutation.ApplicationDeadlineCleared() {
		_spec.ClearField(program.FieldApplicationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.Requirements(); ok {
		_spec.SetField(program.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequirements, value)
		})
	}
	if value, ok := _u.mutation.MinAge(); ok {
		_spec.SetField(program.FieldMinAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMinAge(); ok {
		_spec.AddField(program.FieldMinAge, field.TypeInt, value)
	}
	if _u.mutation.MinAgeCleared() {
		_spec.ClearField(program.FieldMinAge, field.TypeInt)
	}
	if value, ok := _u.mutation.MaxAge(); ok {
		_spec.SetField(program.FieldMaxAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxAge(); ok {
		_spec.AddField(program.FieldMaxAge, field.TypeInt, value)
	}
	if _u.mutation.MaxAgeCleared() {
		_spec.ClearField(program.FieldMaxAge, field.TypeInt)
	}
	if value, ok := _u.mutation.RequiredDocs(); ok {
		_spec.SetField(program.FieldRequiredDocs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredDocs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequiredDocs, value)
		})
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(program.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(program.FieldCost, field.TypeFloat64, value)
	}
	if _u.mutation.CostCleared() {
		_spec.ClearField(program.FieldCost, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(program.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.Rules(); ok {
		_spec.SetField(program.FieldRules, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRules(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRules, value)
		})
	}
	if value, ok := _u.mutation.Steps(); ok {
		_spec.SetField(program.FieldSteps, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldSteps, value)
		})
	}
	if value, ok := _u.mutation.RequiredSkills(); ok {
		_spec.SetField(program.FieldRequiredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequiredSkills, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrolmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramCardItemsIDs(); len(nodes) > 0 && !_u.mutation.ProgramCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramCardItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSuccessStoriesIDs(); len(nodes) > 0 && !_u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVolunteerOpportunitiesIDs(); len(nodes) > 0 && !_u.mutation.VolunteerOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FundraisingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFundraisingCampaignsIDs(); len(nodes) > 0 && !_u.mutation.FundraisingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FundraisingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSiteVisitsIDs(); len(nodes) > 0 && !_u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImpactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImpactMetricsIDs(); len(nodes) > 0 && !_u.mutation.ImpactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImpactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProgramUpdateOne is the builder for updating a single Program entity.
type ProgramUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgramMutation
}

// SetSlug sets the "slug" field.
func (_u *ProgramUpdateOne) SetSlug(v string) *ProgramUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableSlug(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramUpdateOne) SetName(v map[string]string) *ProgramUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramUpdateOne) SetDescription(v map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetTagline sets the "tagline" field.
func (_u *ProgramUpdateOne) SetTagline(v map[string]string) *ProgramUpdateOne {
	_u.mutation.SetTagline(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProgramUpdateOne) SetStatus(v program.Status) *ProgramUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableStatus(v *program.Status) *ProgramUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *ProgramUpdateOne) SetStartDate(v time.Time) *ProgramUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableStartDate(v *time.Time) *ProgramUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *ProgramUpdateOne) ClearStartDate() *ProgramUpdateOne {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *ProgramUpdateOne) SetEndDate(v time.Time) *ProgramUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableEndDate(v *time.Time) *ProgramUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *ProgramUpdateOne) ClearEndDate() *ProgramUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetHeroImageURL sets the "hero_image_url" field.
func (_u *ProgramUpdateOne) SetHeroImageURL(v string) *ProgramUpdateOne {
	_u.mutation.SetHeroImageURL(v)
	return _u
}

// SetNillableHeroImageURL sets the "hero_image_url" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableHeroImageURL(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetHeroImageURL(*v)
	}
	return _u
}

// ClearHeroImageURL clears the value of the "hero_image_url" field.
func (_u *ProgramUpdateOne) ClearHeroImageURL() *ProgramUpdateOne {
	_u.mutation.ClearHeroImageURL()
	return _u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (_u *ProgramUpdateOne) SetThumbnailURL(v string) *ProgramUpdateOne {
	_u.mutation.SetThumbnailURL(v)
	return _u
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableThumbnailURL(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetThumbnailURL(*v)
	}
	return _u
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (_u *ProgramUpdateOne) ClearThumbnailURL() *ProgramUpdateOne {
	_u.mutation.ClearThumbnailURL()
	return _u
}

// SetVideoThumbnailURL sets the "video_thumbnail_url" field.
func (_u *ProgramUpdateOne) SetVideoThumbnailURL(v string) *ProgramUpdateOne {
	_u.mutation.SetVideoThumbnailURL(v)
	return _u
}

// SetNillableVideoThumbnailURL sets the "video_thumbnail_url" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableVideoThumbnailURL(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetVideoThumbnailURL(*v)
	}
	return _u
}

// ClearVideoThumbnailURL clears the value of the "video_thumbnail_url" field.
func (_u *ProgramUpdateOne) ClearVideoThumbnailURL() *ProgramUpdateOne {
	_u.mutation.ClearVideoThumbnailURL()
	return _u
}

// SetMediaGallery sets the "media_gallery" field.
func (_u *ProgramUpdateOne) SetMediaGallery(v []string) *ProgramUpdateOne {
	_u.mutation.SetMediaGallery(v)
	return _u
}

// AppendMediaGallery appends value to the "media_gallery" field.
func (_u *ProgramUpdateOne) AppendMediaGallery(v []string) *ProgramUpdateOne {
	_u.mutation.AppendMediaGallery(v)
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProgramUpdateOne) SetTags(v []string) *ProgramUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProgramUpdateOne) AppendTags(v []string) *ProgramUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// SetMetrics sets the "metrics" field.
func (_u *ProgramUpdateOne) SetMetrics(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetMetrics(v)
	return _u
}

// AppendMetrics appends value to the "metrics" field.
func (_u *ProgramUpdateOne) AppendMetrics(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.AppendMetrics(v)
	return _u
}

// SetCurriculum sets the "curriculum" field.
func (_u *ProgramUpdateOne) SetCurriculum(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetCurriculum(v)
	return _u
}

// AppendCurriculum appends value to the "curriculum" field.
func (_u *ProgramUpdateOne) AppendCurriculum(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.AppendCurriculum(v)
	return _u
}

// SetEligibilityCriteria sets the "eligibility_criteria" field.
func (_u *ProgramUpdateOne) SetEligibilityCriteria(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetEligibilityCriteria(v)
	return _u
}

// AppendEligibilityCriteria appends value to the "eligibility_criteria" field.
func (_u *ProgramUpdateOne) AppendEligibilityCriteria(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.AppendEligibilityCriteria(v)
	return _u
}

// SetApplicationSteps sets the "application_steps" field.
func (_u *ProgramUpdateOne) SetApplicationSteps(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetApplicationSteps(v)
	return _u
}

// AppendApplicationSteps appends value to the "application_steps" field.
func (_u *ProgramUpdateOne) AppendApplicationSteps(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.AppendApplicationSteps(v)
	return _u
}

// SetDuration sets the "duration" field.
func (_u *ProgramUpdateOne) SetDuration(v string) *ProgramUpdateOne {
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableDuration(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *ProgramUpdateOne) ClearDuration() *ProgramUpdateOne {
	_u.mutation.ClearDuration()
	return _u
}

// SetCapacity sets the "capacity" field.
func (_u *ProgramUpdateOne) SetCapacity(v int) *ProgramUpdateOne {
	_u.mutation.ResetCapacity()
	_u.mutation.SetCapacity(v)
	return _u
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableCapacity(v *int) *ProgramUpdateOne {
	if v != nil {
		_u.SetCapacity(*v)
	}
	return _u
}

// AddCapacity adds value to the "capacity" field.
func (_u *ProgramUpdateOne) AddCapacity(v int) *ProgramUpdateOne {
	_u.mutation.AddCapacity(v)
	return _u
}

// ClearCapacity clears the value of the "capacity" field.
func (_u *ProgramUpdateOne) ClearCapacity() *ProgramUpdateOne {
	_u.mutation.ClearCapacity()
	return _u
}

// SetApplicationDeadline sets the "application_deadline" field.
func (_u *ProgramUpdateOne) SetApplicationDeadline(v time.Time) *ProgramUpdateOne {
	_u.mutation.SetApplicationDeadline(v)
	return _u
}

// SetNillableApplicationDeadline sets the "application_deadline" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableApplicationDeadline(v *time.Time) *ProgramUpdateOne {
	if v != nil {
		_u.SetApplicationDeadline(*v)
	}
	return _u
}

// ClearApplicationDeadline clears the value of the "application_deadline" field.
func (_u *ProgramUpdateOne) ClearApplicationDeadline() *ProgramUpdateOne {
	_u.mutation.ClearApplicationDeadline()
	return _u
}

// SetRequirements sets the "requirements" field.
func (_u *ProgramUpdateOne) SetRequirements(v []string) *ProgramUpdateOne {
	_u.mutation.SetRequirements(v)
	return _u
}

// AppendRequirements appends value to the "requirements" field.
func (_u *ProgramUpdateOne) AppendRequirements(v []string) *ProgramUpdateOne {
	_u.mutation.AppendRequirements(v)
	return _u
}

// SetMinAge sets the "min_age" field.
func (_u *ProgramUpdateOne) SetMinAge(v int) *ProgramUpdateOne {
	_u.mutation.ResetMinAge()
	_u.mutation.SetMinAge(v)
	return _u
}

// SetNillableMinAge sets the "min_age" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableMinAge(v *int) *ProgramUpdateOne {
	if v != nil {
		_u.SetMinAge(*v)
	}
	return _u
}

// AddMinAge adds value to the "min_age" field.
func (_u *ProgramUpdateOne) AddMinAge(v int) *ProgramUpdateOne {
	_u.mutation.AddMinAge(v)
	return _u
}

// ClearMinAge clears the value of the "min_age" field.
func (_u *ProgramUpdateOne) ClearMinAge() *ProgramUpdateOne {
	_u.mutation.ClearMinAge()
	return _u
}

// SetMaxAge sets the "max_age" field.
func (_u *ProgramUpdateOne) SetMaxAge(v int) *ProgramUpdateOne {
	_u.mutation.ResetMaxAge()
	_u.mutation.SetMaxAge(v)
	return _u
}

// SetNillableMaxAge sets the "max_age" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableMaxAge(v *int) *ProgramUpdateOne {
	if v != nil {
		_u.SetMaxAge(*v)
	}
	return _u
}

// AddMaxAge adds value to the "max_age" field.
func (_u *ProgramUpdateOne) AddMaxAge(v int) *ProgramUpdateOne {
	_u.mutation.AddMaxAge(v)
	return _u
}

// ClearMaxAge clears the value of the "max_age" field.
func (_u *ProgramUpdateOne) ClearMaxAge() *ProgramUpdateOne {
	_u.mutation.ClearMaxAge()
	return _u
}

// SetRequiredDocs sets the "required_docs" field.
func (_u *ProgramUpdateOne) SetRequiredDocs(v []string) *ProgramUpdateOne {
	_u.mutation.SetRequiredDocs(v)
	return _u
}

// AppendRequiredDocs appends value to the "required_docs" field.
func (_u *ProgramUpdateOne) AppendRequiredDocs(v []string) *ProgramUpdateOne {
	_u.mutation.AppendRequiredDocs(v)
	return _u
}

// SetCost sets the "cost" field.
func (_u *ProgramUpdateOne) SetCost(v float64) *ProgramUpdateOne {
	_u.mutation.ResetCost()
	_u.mutation.SetCost(v)
	return _u
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableCost(v *float64) *ProgramUpdateOne {
	if v != nil {
		_u.SetCost(*v)
	}
	return _u
}

// AddCost adds value to the "cost" field.
func (_u *ProgramUpdateOne) AddCost(v float64) *ProgramUpdateOne {
	_u.mutation.AddCost(v)
	return _u
}

// ClearCost clears the value of the "cost" field.
func (_u *ProgramUpdateOne) ClearCost() *ProgramUpdateOne {
	_u.mutation.ClearCost()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *ProgramUpdateOne) SetCurrency(v string) *ProgramUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableCurrency(v *string) *ProgramUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetRules sets the "rules" field.
func (_u *ProgramUpdateOne) SetRules(v []string) *ProgramUpdateOne {
	_u.mutation.SetRules(v)
	return _u
}

// AppendRules appends value to the "rules" field.
func (_u *ProgramUpdateOne) AppendRules(v []string) *ProgramUpdateOne {
	_u.mutation.AppendRules(v)
	return _u
}

// SetSteps sets the "steps" field.
func (_u *ProgramUpdateOne) SetSteps(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.SetSteps(v)
	return _u
}

// AppendSteps appends value to the "steps" field.
func (_u *ProgramUpdateOne) AppendSteps(v []map[string]interface{}) *ProgramUpdateOne {
	_u.mutation.AppendSteps(v)
	return _u
}

// SetRequiredSkills sets the "required_skills" field.
func (_u *ProgramUpdateOne) SetRequiredSkills(v []string) *ProgramUpdateOne {
	_u.mutation.SetRequiredSkills(v)
	return _u
}

// AppendRequiredSkills appends value to the "required_skills" field.
func (_u *ProgramUpdateOne) AppendRequiredSkills(v []string) *ProgramUpdateOne {
	_u.mutation.AppendRequiredSkills(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramUpdateOne) SetUpdatedAt(v time.Time) *ProgramUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCategoryID sets the "category" edge to the ProgramCategory entity by ID.
func (_u *ProgramUpdateOne) SetCategoryID(id int) *ProgramUpdateOne {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetCategory sets the "category" edge to the ProgramCategory entity.
func (_u *ProgramUpdateOne) SetCategory(v *ProgramCategory) *ProgramUpdateOne {
	return _u.SetCategoryID(v.ID)
}

// AddEnrolmentIDs adds the "enrolments" edge to the ProgramEnrolment entity by IDs.
func (_u *ProgramUpdateOne) AddEnrolmentIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddEnrolmentIDs(ids...)
	return _u
}

// AddEnrolments adds the "enrolments" edges to the ProgramEnrolment entity.
func (_u *ProgramUpdateOne) AddEnrolments(v ...*ProgramEnrolment) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrolmentIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ProgramParticipant entity by IDs.
func (_u *ProgramUpdateOne) AddParticipantIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddParticipantIDs(ids...)
	return _u
}

// AddParticipants adds the "participants" edges to the ProgramParticipant entity.
func (_u *ProgramUpdateOne) AddParticipants(v ...*ProgramParticipant) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddParticipantIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (_u *ProgramUpdateOne) SetCreatedByID(id int) *ProgramUpdateOne {
	_u.mutation.SetCreatedByID(id)
	return _u
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableCreatedByID(id *int) *ProgramUpdateOne {
	if id != nil {
		_u = _u.SetCreatedByID(*id)
	}
	return _u
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (_u *ProgramUpdateOne) SetCreatedBy(v *User) *ProgramUpdateOne {
	return _u.SetCreatedByID(v.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (_u *ProgramUpdateOne) SetUpdatedByID(id int) *ProgramUpdateOne {
	_u.mutation.SetUpdatedByID(id)
	return _u
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (_u *ProgramUpdateOne) SetNillableUpdatedByID(id *int) *ProgramUpdateOne {
	if id != nil {
		_u = _u.SetUpdatedByID(*id)
	}
	return _u
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (_u *ProgramUpdateOne) SetUpdatedBy(v *User) *ProgramUpdateOne {
	return _u.SetUpdatedByID(v.ID)
}

// AddProgramCardItemIDs adds the "program_card_items" edge to the ProgramCardItem entity by IDs.
func (_u *ProgramUpdateOne) AddProgramCardItemIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddProgramCardItemIDs(ids...)
	return _u
}

// AddProgramCardItems adds the "program_card_items" edges to the ProgramCardItem entity.
func (_u *ProgramUpdateOne) AddProgramCardItems(v ...*ProgramCardItem) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramCardItemIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *ProgramUpdateOne) AddEventIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *ProgramUpdateOne) AddEvents(v ...*Event) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSuccessStoryIDs adds the "success_stories" edge to the SuccessStory entity by IDs.
func (_u *ProgramUpdateOne) AddSuccessStoryIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddSuccessStoryIDs(ids...)
	return _u
}

// AddSuccessStories adds the "success_stories" edges to the SuccessStory entity.
func (_u *ProgramUpdateOne) AddSuccessStories(v ...*SuccessStory) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSuccessStoryIDs(ids...)
}

// AddVolunteerOpportunityIDs adds the "volunteer_opportunities" edge to the VolunteerOpportunity entity by IDs.
func (_u *ProgramUpdateOne) AddVolunteerOpportunityIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddVolunteerOpportunityIDs(ids...)
	return _u
}

// AddVolunteerOpportunities adds the "volunteer_opportunities" edges to the VolunteerOpportunity entity.
func (_u *ProgramUpdateOne) AddVolunteerOpportunities(v ...*VolunteerOpportunity) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVolunteerOpportunityIDs(ids...)
}

// AddFundraisingCampaignIDs adds the "fundraising_campaigns" edge to the FundraisingCampaign entity by IDs.
func (_u *ProgramUpdateOne) AddFundraisingCampaignIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddFundraisingCampaignIDs(ids...)
	return _u
}

// AddFundraisingCampaigns adds the "fundraising_campaigns" edges to the FundraisingCampaign entity.
func (_u *ProgramUpdateOne) AddFundraisingCampaigns(v ...*FundraisingCampaign) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFundraisingCampaignIDs(ids...)
}

// AddDonationIDs adds the "donations" edge to the Donation entity by IDs.
func (_u *ProgramUpdateOne) AddDonationIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddDonationIDs(ids...)
	return _u
}

// AddDonations adds the "donations" edges to the Donation entity.
func (_u *ProgramUpdateOne) AddDonations(v ...*Donation) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDonationIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *ProgramUpdateOne) AddGrantIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *ProgramUpdateOne) AddGrants(v ...*Grant) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddSiteVisitIDs adds the "site_visits" edge to the SiteVisit entity by IDs.
func (_u *ProgramUpdateOne) AddSiteVisitIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddSiteVisitIDs(ids...)
	return _u
}

// AddSiteVisits adds the "site_visits" edges to the SiteVisit entity.
func (_u *ProgramUpdateOne) AddSiteVisits(v ...*SiteVisit) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSiteVisitIDs(ids...)
}

// AddImpactMetricIDs adds the "impact_metrics" edge to the ImpactMetric entity by IDs.
func (_u *ProgramUpdateOne) AddImpactMetricIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.AddImpactMetricIDs(ids...)
	return _u
}

// AddImpactMetrics adds the "impact_metrics" edges to the ImpactMetric entity.
func (_u *ProgramUpdateOne) AddImpactMetrics(v ...*ImpactMetric) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddImpactMetricIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (_u *ProgramUpdateOne) Mutation() *ProgramMutation {
	return _u.mutation
}

// ClearCategory clears the "category" edge to the ProgramCategory entity.
func (_u *ProgramUpdateOne) ClearCategory() *ProgramUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// ClearEnrolments clears all "enrolments" edges to the ProgramEnrolment entity.
func (_u *ProgramUpdateOne) ClearEnrolments() *ProgramUpdateOne {
	_u.mutation.ClearEnrolments()
	return _u
}

// RemoveEnrolmentIDs removes the "enrolments" edge to ProgramEnrolment entities by IDs.
func (_u *ProgramUpdateOne) RemoveEnrolmentIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveEnrolmentIDs(ids...)
	return _u
}

// RemoveEnrolments removes "enrolments" edges to ProgramEnrolment entities.
func (_u *ProgramUpdateOne) RemoveEnrolments(v ...*ProgramEnrolment) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrolmentIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ProgramParticipant entity.
func (_u *ProgramUpdateOne) ClearParticipants() *ProgramUpdateOne {
	_u.mutation.ClearParticipants()
	return _u
}

// RemoveParticipantIDs removes the "participants" edge to ProgramParticipant entities by IDs.
func (_u *ProgramUpdateOne) RemoveParticipantIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveParticipantIDs(ids...)
	return _u
}

// RemoveParticipants removes "participants" edges to ProgramParticipant entities.
func (_u *ProgramUpdateOne) RemoveParticipants(v ...*ProgramParticipant) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveParticipantIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (_u *ProgramUpdateOne) ClearCreatedBy() *ProgramUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (_u *ProgramUpdateOne) ClearUpdatedBy() *ProgramUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// ClearProgramCardItems clears all "program_card_items" edges to the ProgramCardItem entity.
func (_u *ProgramUpdateOne) ClearProgramCardItems() *ProgramUpdateOne {
	_u.mutation.ClearProgramCardItems()
	return _u
}

// RemoveProgramCardItemIDs removes the "program_card_items" edge to ProgramCardItem entities by IDs.
func (_u *ProgramUpdateOne) RemoveProgramCardItemIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveProgramCardItemIDs(ids...)
	return _u
}

// RemoveProgramCardItems removes "program_card_items" edges to ProgramCardItem entities.
func (_u *ProgramUpdateOne) RemoveProgramCardItems(v ...*ProgramCardItem) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramCardItemIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *ProgramUpdateOne) ClearEvents() *ProgramUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *ProgramUpdateOne) RemoveEventIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *ProgramUpdateOne) RemoveEvents(v ...*Event) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSuccessStories clears all "success_stories" edges to the SuccessStory entity.
func (_u *ProgramUpdateOne) ClearSuccessStories() *ProgramUpdateOne {
	_u.mutation.ClearSuccessStories()
	return _u
}

// RemoveSuccessStoryIDs removes the "success_stories" edge to SuccessStory entities by IDs.
func (_u *ProgramUpdateOne) RemoveSuccessStoryIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveSuccessStoryIDs(ids...)
	return _u
}

// RemoveSuccessStories removes "success_stories" edges to SuccessStory entities.
func (_u *ProgramUpdateOne) RemoveSuccessStories(v ...*SuccessStory) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSuccessStoryIDs(ids...)
}

// ClearVolunteerOpportunities clears all "volunteer_opportunities" edges to the VolunteerOpportunity entity.
func (_u *ProgramUpdateOne) ClearVolunteerOpportunities() *ProgramUpdateOne {
	_u.mutation.ClearVolunteerOpportunities()
	return _u
}

// RemoveVolunteerOpportunityIDs removes the "volunteer_opportunities" edge to VolunteerOpportunity entities by IDs.
func (_u *ProgramUpdateOne) RemoveVolunteerOpportunityIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveVolunteerOpportunityIDs(ids...)
	return _u
}

// RemoveVolunteerOpportunities removes "volunteer_opportunities" edges to VolunteerOpportunity entities.
func (_u *ProgramUpdateOne) RemoveVolunteerOpportunities(v ...*VolunteerOpportunity) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVolunteerOpportunityIDs(ids...)
}

// ClearFundraisingCampaigns clears all "fundraising_campaigns" edges to the FundraisingCampaign entity.
func (_u *ProgramUpdateOne) ClearFundraisingCampaigns() *ProgramUpdateOne {
	_u.mutation.ClearFundraisingCampaigns()
	return _u
}

// RemoveFundraisingCampaignIDs removes the "fundraising_campaigns" edge to FundraisingCampaign entities by IDs.
func (_u *ProgramUpdateOne) RemoveFundraisingCampaignIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveFundraisingCampaignIDs(ids...)
	return _u
}

// RemoveFundraisingCampaigns removes "fundraising_campaigns" edges to FundraisingCampaign entities.
func (_u *ProgramUpdateOne) RemoveFundraisingCampaigns(v ...*FundraisingCampaign) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFundraisingCampaignIDs(ids...)
}

// ClearDonations clears all "donations" edges to the Donation entity.
func (_u *ProgramUpdateOne) ClearDonations() *ProgramUpdateOne {
	_u.mutation.ClearDonations()
	return _u
}

// RemoveDonationIDs removes the "donations" edge to Donation entities by IDs.
func (_u *ProgramUpdateOne) RemoveDonationIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveDonationIDs(ids...)
	return _u
}

// RemoveDonations removes "donations" edges to Donation entities.
func (_u *ProgramUpdateOne) RemoveDonations(v ...*Donation) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDonationIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *ProgramUpdateOne) ClearGrants() *ProgramUpdateOne {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *ProgramUpdateOne) RemoveGrantIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *ProgramUpdateOne) RemoveGrants(v ...*Grant) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearSiteVisits clears all "site_visits" edges to the SiteVisit entity.
func (_u *ProgramUpdateOne) ClearSiteVisits() *ProgramUpdateOne {
	_u.mutation.ClearSiteVisits()
	return _u
}

// RemoveSiteVisitIDs removes the "site_visits" edge to SiteVisit entities by IDs.
func (_u *ProgramUpdateOne) RemoveSiteVisitIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveSiteVisitIDs(ids...)
	return _u
}

// RemoveSiteVisits removes "site_visits" edges to SiteVisit entities.
func (_u *ProgramUpdateOne) RemoveSiteVisits(v ...*SiteVisit) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSiteVisitIDs(ids...)
}

// ClearImpactMetrics clears all "impact_metrics" edges to the ImpactMetric entity.
func (_u *ProgramUpdateOne) ClearImpactMetrics() *ProgramUpdateOne {
	_u.mutation.ClearImpactMetrics()
	return _u
}

// RemoveImpactMetricIDs removes the "impact_metrics" edge to ImpactMetric entities by IDs.
func (_u *ProgramUpdateOne) RemoveImpactMetricIDs(ids ...int) *ProgramUpdateOne {
	_u.mutation.RemoveImpactMetricIDs(ids...)
	return _u
}

// RemoveImpactMetrics removes "impact_metrics" edges to ImpactMetric entities.
func (_u *ProgramUpdateOne) RemoveImpactMetrics(v ...*ImpactMetric) *ProgramUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveImpactMetricIDs(ids...)
}

// Where appends a list predicates to the ProgramUpdate builder.
func (_u *ProgramUpdateOne) Where(ps ...predicate.Program) *ProgramUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProgramUpdateOne) Select(field string, fields ...string) *ProgramUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Program entity.
func (_u *ProgramUpdateOne) Save(ctx context.Context) (*Program, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramUpdateOne) SaveX(ctx context.Context) *Program {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := program.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Program.status": %w`, err)}
		}
	}
	if _u.mutation.CategoryCleared() && len(_u.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Program.category"`)
	}
	return nil
}

func (_u *ProgramUpdateOne) sqlSave(ctx context.Context) (_node *Program, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Program.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, program.FieldID)
		for _, f := range fields {
			if !program.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != program.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(program.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Tagline(); ok {
		_spec.SetField(program.FieldTagline, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(program.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(program.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.HeroImageURL(); ok {
		_spec.SetField(program.FieldHeroImageURL, field.TypeString, value)
	}
	if _u.mutation.HeroImageURLCleared() {
		_spec.ClearField(program.FieldHeroImageURL, field.TypeString)
	}
	if value, ok := _u.mutation.ThumbnailURL(); ok {
		_spec.SetField(program.FieldThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.ThumbnailURLCleared() {
		_spec.ClearField(program.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.VideoThumbnailURL(); ok {
		_spec.SetField(program.FieldVideoThumbnailURL, field.TypeString, value)
	}
	if _u.mutation.VideoThumbnailURLCleared() {
		_spec.ClearField(program.FieldVideoThumbnailURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaGallery(); ok {
		_spec.SetField(program.FieldMediaGallery, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMediaGallery(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldMediaGallery, value)
		})
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldTags, value)
		})
	}
	if value, ok := _u.mutation.Metrics(); ok {
		_spec.SetField(program.FieldMetrics, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMetrics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldMetrics, value)
		})
	}
	if value, ok := _u.mutation.Curriculum(); ok {
		_spec.SetField(program.FieldCurriculum, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCurriculum(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldCurriculum, value)
		})
	}
	if value, ok := _u.mutation.EligibilityCriteria(); ok {
		_spec.SetField(program.FieldEligibilityCriteria, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedEligibilityCriteria(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldEligibilityCriteria, value)
		})
	}
	if value, ok := _u.mutation.ApplicationSteps(); ok {
		_spec.SetField(program.FieldApplicationSteps, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedApplicationSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldApplicationSteps, value)
		})
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(program.FieldDuration, field.TypeString, value)
	}
	if _u.mutation.DurationCleared() {
		_spec.ClearField(program.FieldDuration, field.TypeString)
	}
	if value, ok := _u.mutation.Capacity(); ok {
		_spec.SetField(program.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCapacity(); ok {
		_spec.AddField(program.FieldCapacity, field.TypeInt, value)
	}
	if _u.mutation.CapacityCleared() {
		_spec.ClearField(program.FieldCapacity, field.TypeInt)
	}
	if value, ok := _u.mutation.ApplicationDeadline(); ok {
		_spec.SetField(program.FieldApplicationDeadline, field.TypeTime, value)
	}
	if _u.mutation.ApplicationDeadlineCleared() {
		_spec.ClearField(program.FieldApplicationDeadline, field.TypeTime)
	}
	if value, ok := _u.mutation.Requirements(); ok {
		_spec.SetField(program.FieldRequirements, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequirements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequirements, value)
		})
	}
	if value, ok := _u.mutation.MinAge(); ok {
		_spec.SetField(program.FieldMinAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMinAge(); ok {
		_spec.AddField(program.FieldMinAge, field.TypeInt, value)
	}
	if _u.mutation.MinAgeCleared() {
		_spec.ClearField(program.FieldMinAge, field.TypeInt)
	}
	if value, ok := _u.mutation.MaxAge(); ok {
		_spec.SetField(program.FieldMaxAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxAge(); ok {
		_spec.AddField(program.FieldMaxAge, field.TypeInt, value)
	}
	if _u.mutation.MaxAgeCleared() {
		_spec.ClearField(program.FieldMaxAge, field.TypeInt)
	}
	if value, ok := _u.mutation.RequiredDocs(); ok {
		_spec.SetField(program.FieldRequiredDocs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredDocs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequiredDocs, value)
		})
	}
	if value, ok := _u.mutation.Cost(); ok {
		_spec.SetField(program.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedCost(); ok {
		_spec.AddField(program.FieldCost, field.TypeFloat64, value)
	}
	if _u.mutation.CostCleared() {
		_spec.ClearField(program.FieldCost, field.TypeFloat64)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(program.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.Rules(); ok {
		_spec.SetField(program.FieldRules, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRules(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRules, value)
		})
	}
	if value, ok := _u.mutation.Steps(); ok {
		_spec.SetField(program.FieldSteps, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldSteps, value)
		})
	}
	if value, ok := _u.mutation.RequiredSkills(); ok {
		_spec.SetField(program.FieldRequiredSkills, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedRequiredSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldRequiredSkills, value)
		})
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrolmentsIDs(); len(nodes) > 0 && !_u.mutation.EnrolmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrolmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programenrolment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !_u.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramCardItemsIDs(); len(nodes) > 0 && !_u.mutation.ProgramCardItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramCardItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programcarditem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSuccessStoriesIDs(); len(nodes) > 0 && !_u.mutation.SuccessStoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SuccessStoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(successstory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VolunteerOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVolunteerOpportunitiesIDs(); len(nodes) > 0 && !_u.mutation.VolunteerOpportunitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VolunteerOpportunitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteeropportunity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FundraisingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFundraisingCampaignsIDs(); len(nodes) > 0 && !_u.mutation.FundraisingCampaignsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FundraisingCampaignsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fundraisingcampaign.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDonationsIDs(); len(nodes) > 0 && !_u.mutation.DonationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DonationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(donation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSiteVisitsIDs(); len(nodes) > 0 && !_u.mutation.SiteVisitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteVisitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitevisit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImpactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedImpactMetricsIDs(); len(nodes) > 0 && !_u.mutation.ImpactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImpactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(impactmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Program{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
