// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/contentblock"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlockTeamGrid is the model entity for the BlockTeamGrid schema.
type BlockTeamGrid struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalName holds the value of the "internal_name" field.
	InternalName string `json:"internal_name,omitempty"`
	// Badge holds the value of the "badge" field.
	Badge map[string]string `json:"badge,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]string `json:"description,omitempty"`
	// ItemsPerRow holds the value of the "items_per_row" field.
	ItemsPerRow int `json:"items_per_row,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockTeamGridQuery when eager-loading is set.
	Edges                         BlockTeamGridEdges `json:"edges"`
	content_block_block_team_grid *int
	selectValues                  sql.SelectValues
}

// BlockTeamGridEdges holds the relations/edges for other nodes in the graph.
type BlockTeamGridEdges struct {
	// ContentBlock holds the value of the content_block edge.
	ContentBlock *ContentBlock `json:"content_block,omitempty"`
	// Members holds the value of the members edge.
	Members []*TeamMemberItem `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ContentBlockOrErr returns the ContentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockTeamGridEdges) ContentBlockOrErr() (*ContentBlock, error) {
	if e.ContentBlock != nil {
		return e.ContentBlock, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contentblock.Label}
	}
	return nil, &NotLoadedError{edge: "content_block"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e BlockTeamGridEdges) MembersOrErr() ([]*TeamMemberItem, error) {
	if e.loadedTypes[1] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockTeamGrid) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockteamgrid.FieldBadge, blockteamgrid.FieldTitle, blockteamgrid.FieldDescription:
			values[i] = new([]byte)
		case blockteamgrid.FieldID, blockteamgrid.FieldItemsPerRow:
			values[i] = new(sql.NullInt64)
		case blockteamgrid.FieldInternalName:
			values[i] = new(sql.NullString)
		case blockteamgrid.FieldCreatedAt, blockteamgrid.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blockteamgrid.ForeignKeys[0]: // content_block_block_team_grid
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockTeamGrid fields.
func (_m *BlockTeamGrid) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockteamgrid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case blockteamgrid.FieldInternalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_name", values[i])
			} else if value.Valid {
				_m.InternalName = value.String
			}
		case blockteamgrid.FieldBadge:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field badge", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Badge); err != nil {
					return fmt.Errorf("unmarshal field badge: %w", err)
				}
			}
		case blockteamgrid.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case blockteamgrid.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case blockteamgrid.FieldItemsPerRow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field items_per_row", values[i])
			} else if value.Valid {
				_m.ItemsPerRow = int(value.Int64)
			}
		case blockteamgrid.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case blockteamgrid.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case blockteamgrid.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field content_block_block_team_grid", value)
			} else if value.Valid {
				_m.content_block_block_team_grid = new(int)
				*_m.content_block_block_team_grid = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockTeamGrid.
// This includes values selected through modifiers, order, etc.
func (_m *BlockTeamGrid) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryContentBlock queries the "content_block" edge of the BlockTeamGrid entity.
func (_m *BlockTeamGrid) QueryContentBlock() *ContentBlockQuery {
	return NewBlockTeamGridClient(_m.config).QueryContentBlock(_m)
}

// QueryMembers queries the "members" edge of the BlockTeamGrid entity.
func (_m *BlockTeamGrid) QueryMembers() *TeamMemberItemQuery {
	return NewBlockTeamGridClient(_m.config).QueryMembers(_m)
}

// Update returns a builder for updating this BlockTeamGrid.
// Note that you need to call BlockTeamGrid.Unwrap() before calling this method if this BlockTeamGrid
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BlockTeamGrid) Update() *BlockTeamGridUpdateOne {
	return NewBlockTeamGridClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BlockTeamGrid entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BlockTeamGrid) Unwrap() *BlockTeamGrid {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockTeamGrid is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BlockTeamGrid) String() string {
	var builder strings.Builder
	builder.WriteString("BlockTeamGrid(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("internal_name=")
	builder.WriteString(_m.InternalName)
	builder.WriteString(", ")
	builder.WriteString("badge=")
	builder.WriteString(fmt.Sprintf("%v", _m.Badge))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", _m.Description))
	builder.WriteString(", ")
	builder.WriteString("items_per_row=")
	builder.WriteString(fmt.Sprintf("%v", _m.ItemsPerRow))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlockTeamGrids is a parsable slice of BlockTeamGrid.
type BlockTeamGrids []*BlockTeamGrid
