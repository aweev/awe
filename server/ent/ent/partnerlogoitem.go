// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/partnerlogoitem"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PartnerLogoItem is the model entity for the PartnerLogoItem schema.
type PartnerLogoItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnerLogoItemQuery when eager-loading is set.
	Edges                        PartnerLogoItemEdges `json:"edges"`
	block_partner_logos_partners *int
	selectValues                 sql.SelectValues
}

// PartnerLogoItemEdges holds the relations/edges for other nodes in the graph.
type PartnerLogoItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockPartnerLogos `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PartnerLogoItemEdges) BlockOrErr() (*BlockPartnerLogos, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockpartnerlogos.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PartnerLogoItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case partnerlogoitem.FieldID, partnerlogoitem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case partnerlogoitem.FieldName, partnerlogoitem.FieldLogoURL, partnerlogoitem.FieldWebsite:
			values[i] = new(sql.NullString)
		case partnerlogoitem.ForeignKeys[0]: // block_partner_logos_partners
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PartnerLogoItem fields.
func (_m *PartnerLogoItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partnerlogoitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case partnerlogoitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case partnerlogoitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case partnerlogoitem.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				_m.LogoURL = value.String
			}
		case partnerlogoitem.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				_m.Website = value.String
			}
		case partnerlogoitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_partner_logos_partners", value)
			} else if value.Valid {
				_m.block_partner_logos_partners = new(int)
				*_m.block_partner_logos_partners = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PartnerLogoItem.
// This includes values selected through modifiers, order, etc.
func (_m *PartnerLogoItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the PartnerLogoItem entity.
func (_m *PartnerLogoItem) QueryBlock() *BlockPartnerLogosQuery {
	return NewPartnerLogoItemClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this PartnerLogoItem.
// Note that you need to call PartnerLogoItem.Unwrap() before calling this method if this PartnerLogoItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PartnerLogoItem) Update() *PartnerLogoItemUpdateOne {
	return NewPartnerLogoItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PartnerLogoItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PartnerLogoItem) Unwrap() *PartnerLogoItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PartnerLogoItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PartnerLogoItem) String() string {
	var builder strings.Builder
	builder.WriteString("PartnerLogoItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(_m.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(_m.Website)
	builder.WriteByte(')')
	return builder.String()
}

// PartnerLogoItems is a parsable slice of PartnerLogoItem.
type PartnerLogoItems []*PartnerLogoItem
