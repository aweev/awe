// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/dashboardwidget"
	"awe/ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DashboardWidgetUpdate is the builder for updating DashboardWidget entities.
type DashboardWidgetUpdate struct {
	config
	hooks    []Hook
	mutation *DashboardWidgetMutation
}

// Where appends a list predicates to the DashboardWidgetUpdate builder.
func (_u *DashboardWidgetUpdate) Where(ps ...predicate.DashboardWidget) *DashboardWidgetUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *DashboardWidgetUpdate) SetTitle(v map[string]string) *DashboardWidgetUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetType sets the "type" field.
func (_u *DashboardWidgetUpdate) SetType(v string) *DashboardWidgetUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DashboardWidgetUpdate) SetNillableType(v *string) *DashboardWidgetUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *DashboardWidgetUpdate) SetConfig(v map[string]interface{}) *DashboardWidgetUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetDataSource sets the "data_source" field.
func (_u *DashboardWidgetUpdate) SetDataSource(v string) *DashboardWidgetUpdate {
	_u.mutation.SetDataSource(v)
	return _u
}

// SetNillableDataSource sets the "data_source" field if the given value is not nil.
func (_u *DashboardWidgetUpdate) SetNillableDataSource(v *string) *DashboardWidgetUpdate {
	if v != nil {
		_u.SetDataSource(*v)
	}
	return _u
}

// SetQuery sets the "query" field.
func (_u *DashboardWidgetUpdate) SetQuery(v map[string]interface{}) *DashboardWidgetUpdate {
	_u.mutation.SetQuery(v)
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *DashboardWidgetUpdate) ClearQuery() *DashboardWidgetUpdate {
	_u.mutation.ClearQuery()
	return _u
}

// SetOrder sets the "order" field.
func (_u *DashboardWidgetUpdate) SetOrder(v int) *DashboardWidgetUpdate {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *DashboardWidgetUpdate) SetNillableOrder(v *int) *DashboardWidgetUpdate {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *DashboardWidgetUpdate) AddOrder(v int) *DashboardWidgetUpdate {
	_u.mutation.AddOrder(v)
	return _u
}

// SetPosition sets the "position" field.
func (_u *DashboardWidgetUpdate) SetPosition(v map[string]int) *DashboardWidgetUpdate {
	_u.mutation.SetPosition(v)
	return _u
}

// SetIsVisible sets the "is_visible" field.
func (_u *DashboardWidgetUpdate) SetIsVisible(v bool) *DashboardWidgetUpdate {
	_u.mutation.SetIsVisible(v)
	return _u
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_u *DashboardWidgetUpdate) SetNillableIsVisible(v *bool) *DashboardWidgetUpdate {
	if v != nil {
		_u.SetIsVisible(*v)
	}
	return _u
}

// SetRefreshRate sets the "refresh_rate" field.
func (_u *DashboardWidgetUpdate) SetRefreshRate(v int) *DashboardWidgetUpdate {
	_u.mutation.ResetRefreshRate()
	_u.mutation.SetRefreshRate(v)
	return _u
}

// SetNillableRefreshRate sets the "refresh_rate" field if the given value is not nil.
func (_u *DashboardWidgetUpdate) SetNillableRefreshRate(v *int) *DashboardWidgetUpdate {
	if v != nil {
		_u.SetRefreshRate(*v)
	}
	return _u
}

// AddRefreshRate adds value to the "refresh_rate" field.
func (_u *DashboardWidgetUpdate) AddRefreshRate(v int) *DashboardWidgetUpdate {
	_u.mutation.AddRefreshRate(v)
	return _u
}

// ClearRefreshRate clears the value of the "refresh_rate" field.
func (_u *DashboardWidgetUpdate) ClearRefreshRate() *DashboardWidgetUpdate {
	_u.mutation.ClearRefreshRate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DashboardWidgetUpdate) SetUpdatedAt(v time.Time) *DashboardWidgetUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDashboardID sets the "dashboard" edge to the AnalyticsDashboard entity by ID.
func (_u *DashboardWidgetUpdate) SetDashboardID(id int) *DashboardWidgetUpdate {
	_u.mutation.SetDashboardID(id)
	return _u
}

// SetDashboard sets the "dashboard" edge to the AnalyticsDashboard entity.
func (_u *DashboardWidgetUpdate) SetDashboard(v *AnalyticsDashboard) *DashboardWidgetUpdate {
	return _u.SetDashboardID(v.ID)
}

// Mutation returns the DashboardWidgetMutation object of the builder.
func (_u *DashboardWidgetUpdate) Mutation() *DashboardWidgetMutation {
	return _u.mutation
}

// ClearDashboard clears the "dashboard" edge to the AnalyticsDashboard entity.
func (_u *DashboardWidgetUpdate) ClearDashboard() *DashboardWidgetUpdate {
	_u.mutation.ClearDashboard()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DashboardWidgetUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DashboardWidgetUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DashboardWidgetUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DashboardWidgetUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DashboardWidgetUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dashboardwidget.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DashboardWidgetUpdate) check() error {
	if _u.mutation.DashboardCleared() && len(_u.mutation.DashboardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DashboardWidget.dashboard"`)
	}
	return nil
}

func (_u *DashboardWidgetUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dashboardwidget.Table, dashboardwidget.Columns, sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dashboardwidget.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(dashboardwidget.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(dashboardwidget.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.DataSource(); ok {
		_spec.SetField(dashboardwidget.FieldDataSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(dashboardwidget.FieldQuery, field.TypeJSON, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(dashboardwidget.FieldQuery, field.TypeJSON)
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(dashboardwidget.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(dashboardwidget.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(dashboardwidget.FieldPosition, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsVisible(); ok {
		_spec.SetField(dashboardwidget.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RefreshRate(); ok {
		_spec.SetField(dashboardwidget.FieldRefreshRate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRefreshRate(); ok {
		_spec.AddField(dashboardwidget.FieldRefreshRate, field.TypeInt, value)
	}
	if _u.mutation.RefreshRateCleared() {
		_spec.ClearField(dashboardwidget.FieldRefreshRate, field.TypeInt)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dashboardwidget.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DashboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DashboardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dashboardwidget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DashboardWidgetUpdateOne is the builder for updating a single DashboardWidget entity.
type DashboardWidgetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DashboardWidgetMutation
}

// SetTitle sets the "title" field.
func (_u *DashboardWidgetUpdateOne) SetTitle(v map[string]string) *DashboardWidgetUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetType sets the "type" field.
func (_u *DashboardWidgetUpdateOne) SetType(v string) *DashboardWidgetUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *DashboardWidgetUpdateOne) SetNillableType(v *string) *DashboardWidgetUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *DashboardWidgetUpdateOne) SetConfig(v map[string]interface{}) *DashboardWidgetUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetDataSource sets the "data_source" field.
func (_u *DashboardWidgetUpdateOne) SetDataSource(v string) *DashboardWidgetUpdateOne {
	_u.mutation.SetDataSource(v)
	return _u
}

// SetNillableDataSource sets the "data_source" field if the given value is not nil.
func (_u *DashboardWidgetUpdateOne) SetNillableDataSource(v *string) *DashboardWidgetUpdateOne {
	if v != nil {
		_u.SetDataSource(*v)
	}
	return _u
}

// SetQuery sets the "query" field.
func (_u *DashboardWidgetUpdateOne) SetQuery(v map[string]interface{}) *DashboardWidgetUpdateOne {
	_u.mutation.SetQuery(v)
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *DashboardWidgetUpdateOne) ClearQuery() *DashboardWidgetUpdateOne {
	_u.mutation.ClearQuery()
	return _u
}

// SetOrder sets the "order" field.
func (_u *DashboardWidgetUpdateOne) SetOrder(v int) *DashboardWidgetUpdateOne {
	_u.mutation.ResetOrder()
	_u.mutation.SetOrder(v)
	return _u
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (_u *DashboardWidgetUpdateOne) SetNillableOrder(v *int) *DashboardWidgetUpdateOne {
	if v != nil {
		_u.SetOrder(*v)
	}
	return _u
}

// AddOrder adds value to the "order" field.
func (_u *DashboardWidgetUpdateOne) AddOrder(v int) *DashboardWidgetUpdateOne {
	_u.mutation.AddOrder(v)
	return _u
}

// SetPosition sets the "position" field.
func (_u *DashboardWidgetUpdateOne) SetPosition(v map[string]int) *DashboardWidgetUpdateOne {
	_u.mutation.SetPosition(v)
	return _u
}

// SetIsVisible sets the "is_visible" field.
func (_u *DashboardWidgetUpdateOne) SetIsVisible(v bool) *DashboardWidgetUpdateOne {
	_u.mutation.SetIsVisible(v)
	return _u
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (_u *DashboardWidgetUpdateOne) SetNillableIsVisible(v *bool) *DashboardWidgetUpdateOne {
	if v != nil {
		_u.SetIsVisible(*v)
	}
	return _u
}

// SetRefreshRate sets the "refresh_rate" field.
func (_u *DashboardWidgetUpdateOne) SetRefreshRate(v int) *DashboardWidgetUpdateOne {
	_u.mutation.ResetRefreshRate()
	_u.mutation.SetRefreshRate(v)
	return _u
}

// SetNillableRefreshRate sets the "refresh_rate" field if the given value is not nil.
func (_u *DashboardWidgetUpdateOne) SetNillableRefreshRate(v *int) *DashboardWidgetUpdateOne {
	if v != nil {
		_u.SetRefreshRate(*v)
	}
	return _u
}

// AddRefreshRate adds value to the "refresh_rate" field.
func (_u *DashboardWidgetUpdateOne) AddRefreshRate(v int) *DashboardWidgetUpdateOne {
	_u.mutation.AddRefreshRate(v)
	return _u
}

// ClearRefreshRate clears the value of the "refresh_rate" field.
func (_u *DashboardWidgetUpdateOne) ClearRefreshRate() *DashboardWidgetUpdateOne {
	_u.mutation.ClearRefreshRate()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DashboardWidgetUpdateOne) SetUpdatedAt(v time.Time) *DashboardWidgetUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDashboardID sets the "dashboard" edge to the AnalyticsDashboard entity by ID.
func (_u *DashboardWidgetUpdateOne) SetDashboardID(id int) *DashboardWidgetUpdateOne {
	_u.mutation.SetDashboardID(id)
	return _u
}

// SetDashboard sets the "dashboard" edge to the AnalyticsDashboard entity.
func (_u *DashboardWidgetUpdateOne) SetDashboard(v *AnalyticsDashboard) *DashboardWidgetUpdateOne {
	return _u.SetDashboardID(v.ID)
}

// Mutation returns the DashboardWidgetMutation object of the builder.
func (_u *DashboardWidgetUpdateOne) Mutation() *DashboardWidgetMutation {
	return _u.mutation
}

// ClearDashboard clears the "dashboard" edge to the AnalyticsDashboard entity.
func (_u *DashboardWidgetUpdateOne) ClearDashboard() *DashboardWidgetUpdateOne {
	_u.mutation.ClearDashboard()
	return _u
}

// Where appends a list predicates to the DashboardWidgetUpdate builder.
func (_u *DashboardWidgetUpdateOne) Where(ps ...predicate.DashboardWidget) *DashboardWidgetUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DashboardWidgetUpdateOne) Select(field string, fields ...string) *DashboardWidgetUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DashboardWidget entity.
func (_u *DashboardWidgetUpdateOne) Save(ctx context.Context) (*DashboardWidget, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DashboardWidgetUpdateOne) SaveX(ctx context.Context) *DashboardWidget {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DashboardWidgetUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DashboardWidgetUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DashboardWidgetUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dashboardwidget.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DashboardWidgetUpdateOne) check() error {
	if _u.mutation.DashboardCleared() && len(_u.mutation.DashboardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DashboardWidget.dashboard"`)
	}
	return nil
}

func (_u *DashboardWidgetUpdateOne) sqlSave(ctx context.Context) (_node *DashboardWidget, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dashboardwidget.Table, dashboardwidget.Columns, sqlgraph.NewFieldSpec(dashboardwidget.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DashboardWidget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dashboardwidget.FieldID)
		for _, f := range fields {
			if !dashboardwidget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dashboardwidget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(dashboardwidget.FieldTitle, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(dashboardwidget.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(dashboardwidget.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.DataSource(); ok {
		_spec.SetField(dashboardwidget.FieldDataSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(dashboardwidget.FieldQuery, field.TypeJSON, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(dashboardwidget.FieldQuery, field.TypeJSON)
	}
	if value, ok := _u.mutation.Order(); ok {
		_spec.SetField(dashboardwidget.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOrder(); ok {
		_spec.AddField(dashboardwidget.FieldOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(dashboardwidget.FieldPosition, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.IsVisible(); ok {
		_spec.SetField(dashboardwidget.FieldIsVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RefreshRate(); ok {
		_spec.SetField(dashboardwidget.FieldRefreshRate, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRefreshRate(); ok {
		_spec.AddField(dashboardwidget.FieldRefreshRate, field.TypeInt, value)
	}
	if _u.mutation.RefreshRateCleared() {
		_spec.ClearField(dashboardwidget.FieldRefreshRate, field.TypeInt)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dashboardwidget.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DashboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DashboardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(analyticsdashboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DashboardWidget{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dashboardwidget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
