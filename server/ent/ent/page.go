// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/page"
	"awe/ent/ent/seoconfig"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Status holds the value of the "status" field.
	Status page.Status `json:"status,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Layout holds the value of the "layout" field.
	Layout string `json:"layout,omitempty"`
	// IsHomepage holds the value of the "is_homepage" field.
	IsHomepage bool `json:"is_homepage,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PageQuery when eager-loading is set.
	Edges            PageEdges `json:"edges"`
	page_parent_page *int
	selectValues     sql.SelectValues
}

// PageEdges holds the relations/edges for other nodes in the graph.
type PageEdges struct {
	// ChildPages holds the value of the child_pages edge.
	ChildPages []*Page `json:"child_pages,omitempty"`
	// ParentPage holds the value of the parent_page edge.
	ParentPage *Page `json:"parent_page,omitempty"`
	// Blocks holds the value of the blocks edge.
	Blocks []*ContentBlock `json:"blocks,omitempty"`
	// Seo holds the value of the seo edge.
	Seo *SeoConfig `json:"seo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ChildPagesOrErr returns the ChildPages value or an error if the edge
// was not loaded in eager-loading.
func (e PageEdges) ChildPagesOrErr() ([]*Page, error) {
	if e.loadedTypes[0] {
		return e.ChildPages, nil
	}
	return nil, &NotLoadedError{edge: "child_pages"}
}

// ParentPageOrErr returns the ParentPage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageEdges) ParentPageOrErr() (*Page, error) {
	if e.ParentPage != nil {
		return e.ParentPage, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: page.Label}
	}
	return nil, &NotLoadedError{edge: "parent_page"}
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e PageEdges) BlocksOrErr() ([]*ContentBlock, error) {
	if e.loadedTypes[2] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// SeoOrErr returns the Seo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PageEdges) SeoOrErr() (*SeoConfig, error) {
	if e.Seo != nil {
		return e.Seo, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: seoconfig.Label}
	}
	return nil, &NotLoadedError{edge: "seo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case page.FieldTitle:
			values[i] = new([]byte)
		case page.FieldIsHomepage:
			values[i] = new(sql.NullBool)
		case page.FieldID:
			values[i] = new(sql.NullInt64)
		case page.FieldSlug, page.FieldStatus, page.FieldLayout:
			values[i] = new(sql.NullString)
		case page.FieldPublishedAt, page.FieldCreatedAt, page.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case page.ForeignKeys[0]: // page_parent_page
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (_m *Page) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case page.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case page.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case page.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case page.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = page.Status(value.String)
			}
		case page.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				_m.PublishedAt = value.Time
			}
		case page.FieldLayout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field layout", values[i])
			} else if value.Valid {
				_m.Layout = value.String
			}
		case page.FieldIsHomepage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_homepage", values[i])
			} else if value.Valid {
				_m.IsHomepage = value.Bool
			}
		case page.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case page.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case page.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field page_parent_page", value)
			} else if value.Valid {
				_m.page_parent_page = new(int)
				*_m.page_parent_page = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Page.
// This includes values selected through modifiers, order, etc.
func (_m *Page) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChildPages queries the "child_pages" edge of the Page entity.
func (_m *Page) QueryChildPages() *PageQuery {
	return NewPageClient(_m.config).QueryChildPages(_m)
}

// QueryParentPage queries the "parent_page" edge of the Page entity.
func (_m *Page) QueryParentPage() *PageQuery {
	return NewPageClient(_m.config).QueryParentPage(_m)
}

// QueryBlocks queries the "blocks" edge of the Page entity.
func (_m *Page) QueryBlocks() *ContentBlockQuery {
	return NewPageClient(_m.config).QueryBlocks(_m)
}

// QuerySeo queries the "seo" edge of the Page entity.
func (_m *Page) QuerySeo() *SeoConfigQuery {
	return NewPageClient(_m.config).QuerySeo(_m)
}

// Update returns a builder for updating this Page.
// Note that you need to call Page.Unwrap() before calling this method if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Page) Update() *PageUpdateOne {
	return NewPageClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Page entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Page) Unwrap() *Page {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(_m.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("layout=")
	builder.WriteString(_m.Layout)
	builder.WriteString(", ")
	builder.WriteString("is_homepage=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsHomepage))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page
