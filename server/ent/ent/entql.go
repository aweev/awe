// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/accordionitem"
	"awe/ent/ent/actionitem"
	"awe/ent/ent/activitylog"
	"awe/ent/ent/address"
	"awe/ent/ent/agenda"
	"awe/ent/ent/agendaitem"
	"awe/ent/ent/analyticsdashboard"
	"awe/ent/ent/analyticsevent"
	"awe/ent/ent/appsetting"
	"awe/ent/ent/auditlog"
	"awe/ent/ent/badge"
	"awe/ent/ent/ballot"
	"awe/ent/ent/blockaccordion"
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/blockcta"
	"awe/ent/ent/blockdivider"
	"awe/ent/ent/blockdonationform"
	"awe/ent/ent/blockfaq"
	"awe/ent/ent/blockgallery"
	"awe/ent/ent/blockhero"
	"awe/ent/ent/blockmap"
	"awe/ent/ent/blocknewslettersignup"
	"awe/ent/ent/blockpartnerlogos"
	"awe/ent/ent/blockprogramcards"
	"awe/ent/ent/blockstats"
	"awe/ent/ent/blocksuccessstories"
	"awe/ent/ent/blocktabs"
	"awe/ent/ent/blockteamgrid"
	"awe/ent/ent/blocktestimonials"
	"awe/ent/ent/blocktextcontent"
	"awe/ent/ent/blocktimeline"
	"awe/ent/ent/blockvideoembed"
	"awe/ent/ent/blockvolunteersignup"
	"awe/ent/ent/brandbenefit"
	"awe/ent/ent/brandconfig"
	"awe/ent/ent/contentblock"
	"awe/ent/ent/conversation"
	"awe/ent/ent/conversationparticipant"
	"awe/ent/ent/dashboardwidget"
	"awe/ent/ent/document"
	"awe/ent/ent/documentcategory"
	"awe/ent/ent/donation"
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/faqitem"
	"awe/ent/ent/featureflag"
	"awe/ent/ent/fundraisingcampaign"
	"awe/ent/ent/galleryimage"
	"awe/ent/ent/generatedreport"
	"awe/ent/ent/grant"
	"awe/ent/ent/grantreport"
	"awe/ent/ent/impactdatapoint"
	"awe/ent/ent/impactmetric"
	"awe/ent/ent/job"
	"awe/ent/ent/joblog"
	"awe/ent/ent/mentorshiprequest"
	"awe/ent/ent/mentorshipsession"
	"awe/ent/ent/message"
	"awe/ent/ent/newsarticle"
	"awe/ent/ent/organization"
	"awe/ent/ent/page"
	"awe/ent/ent/partnerlogoitem"
	"awe/ent/ent/partnership"
	"awe/ent/ent/partnershipinteraction"
	"awe/ent/ent/partnershiprenewal"
	"awe/ent/ent/partnershipreport"
	"awe/ent/ent/passwordhistory"
	"awe/ent/ent/permission"
	"awe/ent/ent/predicate"
	"awe/ent/ent/program"
	"awe/ent/ent/programcarditem"
	"awe/ent/ent/programcategory"
	"awe/ent/ent/programenrolment"
	"awe/ent/ent/programparticipant"
	"awe/ent/ent/reportdefinition"
	"awe/ent/ent/reportpermission"
	"awe/ent/ent/rolepermission"
	"awe/ent/ent/scheduledreport"
	"awe/ent/ent/seoconfig"
	"awe/ent/ent/sitevisit"
	"awe/ent/ent/skill"
	"awe/ent/ent/statitem"
	"awe/ent/ent/successstory"
	"awe/ent/ent/systemerror"
	"awe/ent/ent/systemlog"
	"awe/ent/ent/tabitem"
	"awe/ent/ent/teammember"
	"awe/ent/ent/teammemberitem"
	"awe/ent/ent/testimonialitem"
	"awe/ent/ent/timelineevent"
	"awe/ent/ent/token"
	"awe/ent/ent/trusteddevice"
	"awe/ent/ent/user"
	"awe/ent/ent/userachievement"
	"awe/ent/ent/userconsent"
	"awe/ent/ent/useronboarding"
	"awe/ent/ent/userprofile"
	"awe/ent/ent/usersession"
	"awe/ent/ent/userskill"
	"awe/ent/ent/volunteerapplication"
	"awe/ent/ent/volunteerassignment"
	"awe/ent/ent/volunteeropportunity"
	"awe/ent/ent/vote"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 102)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   accordionitem.Table,
			Columns: accordionitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accordionitem.FieldID,
			},
		},
		Type: "AccordionItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			accordionitem.FieldOrder:     {Type: field.TypeInt, Column: accordionitem.FieldOrder},
			accordionitem.FieldTitle:     {Type: field.TypeJSON, Column: accordionitem.FieldTitle},
			accordionitem.FieldContent:   {Type: field.TypeJSON, Column: accordionitem.FieldContent},
			accordionitem.FieldCreatedAt: {Type: field.TypeTime, Column: accordionitem.FieldCreatedAt},
			accordionitem.FieldUpdatedAt: {Type: field.TypeTime, Column: accordionitem.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   actionitem.Table,
			Columns: actionitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionitem.FieldID,
			},
		},
		Type: "ActionItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			actionitem.FieldDescription: {Type: field.TypeString, Column: actionitem.FieldDescription},
			actionitem.FieldOwnerID:     {Type: field.TypeString, Column: actionitem.FieldOwnerID},
			actionitem.FieldDueDate:     {Type: field.TypeTime, Column: actionitem.FieldDueDate},
			actionitem.FieldStatus:      {Type: field.TypeString, Column: actionitem.FieldStatus},
			actionitem.FieldCreatedAt:   {Type: field.TypeTime, Column: actionitem.FieldCreatedAt},
			actionitem.FieldCompletedAt: {Type: field.TypeTime, Column: actionitem.FieldCompletedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   activitylog.Table,
			Columns: activitylog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activitylog.FieldID,
			},
		},
		Type: "ActivityLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			activitylog.FieldType:        {Type: field.TypeEnum, Column: activitylog.FieldType},
			activitylog.FieldTitle:       {Type: field.TypeString, Column: activitylog.FieldTitle},
			activitylog.FieldDescription: {Type: field.TypeString, Column: activitylog.FieldDescription},
			activitylog.FieldLinkHref:    {Type: field.TypeString, Column: activitylog.FieldLinkHref},
			activitylog.FieldEntityType:  {Type: field.TypeString, Column: activitylog.FieldEntityType},
			activitylog.FieldEntityID:    {Type: field.TypeString, Column: activitylog.FieldEntityID},
			activitylog.FieldMetadata:    {Type: field.TypeJSON, Column: activitylog.FieldMetadata},
			activitylog.FieldIPAddress:   {Type: field.TypeString, Column: activitylog.FieldIPAddress},
			activitylog.FieldUserAgent:   {Type: field.TypeString, Column: activitylog.FieldUserAgent},
			activitylog.FieldCreatedAt:   {Type: field.TypeTime, Column: activitylog.FieldCreatedAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
		Type: "Address",
		Fields: map[string]*sqlgraph.FieldSpec{
			address.FieldStreet1:    {Type: field.TypeString, Column: address.FieldStreet1},
			address.FieldStreet2:    {Type: field.TypeString, Column: address.FieldStreet2},
			address.FieldCity:       {Type: field.TypeString, Column: address.FieldCity},
			address.FieldState:      {Type: field.TypeString, Column: address.FieldState},
			address.FieldPostalCode: {Type: field.TypeString, Column: address.FieldPostalCode},
			address.FieldCountry:    {Type: field.TypeString, Column: address.FieldCountry},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   agenda.Table,
			Columns: agenda.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agenda.FieldID,
			},
		},
		Type: "Agenda",
		Fields: map[string]*sqlgraph.FieldSpec{
			agenda.FieldStatus: {Type: field.TypeString, Column: agenda.FieldStatus},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   agendaitem.Table,
			Columns: agendaitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: agendaitem.FieldID,
			},
		},
		Type: "AgendaItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			agendaitem.FieldOrder:     {Type: field.TypeInt, Column: agendaitem.FieldOrder},
			agendaitem.FieldTitle:     {Type: field.TypeString, Column: agendaitem.FieldTitle},
			agendaitem.FieldPresenter: {Type: field.TypeString, Column: agendaitem.FieldPresenter},
			agendaitem.FieldNotes:     {Type: field.TypeString, Column: agendaitem.FieldNotes},
			agendaitem.FieldDuration:  {Type: field.TypeInt, Column: agendaitem.FieldDuration},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   analyticsdashboard.Table,
			Columns: analyticsdashboard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: analyticsdashboard.FieldID,
			},
		},
		Type: "AnalyticsDashboard",
		Fields: map[string]*sqlgraph.FieldSpec{
			analyticsdashboard.FieldName:         {Type: field.TypeJSON, Column: analyticsdashboard.FieldName},
			analyticsdashboard.FieldDescription:  {Type: field.TypeJSON, Column: analyticsdashboard.FieldDescription},
			analyticsdashboard.FieldSlug:         {Type: field.TypeString, Column: analyticsdashboard.FieldSlug},
			analyticsdashboard.FieldLayout:       {Type: field.TypeJSON, Column: analyticsdashboard.FieldLayout},
			analyticsdashboard.FieldIsDefault:    {Type: field.TypeBool, Column: analyticsdashboard.FieldIsDefault},
			analyticsdashboard.FieldIsPublic:     {Type: field.TypeBool, Column: analyticsdashboard.FieldIsPublic},
			analyticsdashboard.FieldSharedWith:   {Type: field.TypeJSON, Column: analyticsdashboard.FieldSharedWith},
			analyticsdashboard.FieldAllowedRoles: {Type: field.TypeJSON, Column: analyticsdashboard.FieldAllowedRoles},
			analyticsdashboard.FieldCreatedAt:    {Type: field.TypeTime, Column: analyticsdashboard.FieldCreatedAt},
			analyticsdashboard.FieldUpdatedAt:    {Type: field.TypeTime, Column: analyticsdashboard.FieldUpdatedAt},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   analyticsevent.Table,
			Columns: analyticsevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: analyticsevent.FieldID,
			},
		},
		Type: "AnalyticsEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			analyticsevent.FieldEventName:  {Type: field.TypeString, Column: analyticsevent.FieldEventName},
			analyticsevent.FieldProperties: {Type: field.TypeJSON, Column: analyticsevent.FieldProperties},
			analyticsevent.FieldCreatedAt:  {Type: field.TypeTime, Column: analyticsevent.FieldCreatedAt},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appsetting.Table,
			Columns: appsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: appsetting.FieldID,
			},
		},
		Type: "AppSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			appsetting.FieldValue:       {Type: field.TypeJSON, Column: appsetting.FieldValue},
			appsetting.FieldGroup:       {Type: field.TypeString, Column: appsetting.FieldGroup},
			appsetting.FieldDescription: {Type: field.TypeString, Column: appsetting.FieldDescription},
			appsetting.FieldCreatedAt:   {Type: field.TypeTime, Column: appsetting.FieldCreatedAt},
			appsetting.FieldUpdatedAt:   {Type: field.TypeTime, Column: appsetting.FieldUpdatedAt},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   auditlog.Table,
			Columns: auditlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: auditlog.FieldID,
			},
		},
		Type: "AuditLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			auditlog.FieldAction:     {Type: field.TypeString, Column: auditlog.FieldAction},
			auditlog.FieldMeta:       {Type: field.TypeJSON, Column: auditlog.FieldMeta},
			auditlog.FieldCreatedAt:  {Type: field.TypeTime, Column: auditlog.FieldCreatedAt},
			auditlog.FieldEntityID:   {Type: field.TypeString, Column: auditlog.FieldEntityID},
			auditlog.FieldEntityType: {Type: field.TypeString, Column: auditlog.FieldEntityType},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   badge.Table,
			Columns: badge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: badge.FieldID,
			},
		},
		Type: "Badge",
		Fields: map[string]*sqlgraph.FieldSpec{
			badge.FieldName:        {Type: field.TypeJSON, Column: badge.FieldName},
			badge.FieldDescription: {Type: field.TypeJSON, Column: badge.FieldDescription},
			badge.FieldImageURL:    {Type: field.TypeString, Column: badge.FieldImageURL},
			badge.FieldCriteria:    {Type: field.TypeString, Column: badge.FieldCriteria},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ballot.Table,
			Columns: ballot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ballot.FieldID,
			},
		},
		Type: "Ballot",
		Fields: map[string]*sqlgraph.FieldSpec{
			ballot.FieldVoterID: {Type: field.TypeString, Column: ballot.FieldVoterID},
			ballot.FieldChoice:  {Type: field.TypeString, Column: ballot.FieldChoice},
			ballot.FieldCastAt:  {Type: field.TypeTime, Column: ballot.FieldCastAt},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockaccordion.Table,
			Columns: blockaccordion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockaccordion.FieldID,
			},
		},
		Type: "BlockAccordion",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockaccordion.FieldInternalName: {Type: field.TypeString, Column: blockaccordion.FieldInternalName},
			blockaccordion.FieldCreatedAt:    {Type: field.TypeTime, Column: blockaccordion.FieldCreatedAt},
			blockaccordion.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockaccordion.FieldUpdatedAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockcontactform.Table,
			Columns: blockcontactform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockcontactform.FieldID,
			},
		},
		Type: "BlockContactForm",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockcontactform.FieldInternalName:          {Type: field.TypeString, Column: blockcontactform.FieldInternalName},
			blockcontactform.FieldTitle:                 {Type: field.TypeJSON, Column: blockcontactform.FieldTitle},
			blockcontactform.FieldDescription:           {Type: field.TypeJSON, Column: blockcontactform.FieldDescription},
			blockcontactform.FieldShowNameField:         {Type: field.TypeBool, Column: blockcontactform.FieldShowNameField},
			blockcontactform.FieldShowPhoneField:        {Type: field.TypeBool, Column: blockcontactform.FieldShowPhoneField},
			blockcontactform.FieldShowSubjectField:      {Type: field.TypeBool, Column: blockcontactform.FieldShowSubjectField},
			blockcontactform.FieldShowOrganizationField: {Type: field.TypeBool, Column: blockcontactform.FieldShowOrganizationField},
			blockcontactform.FieldRecipientEmail:        {Type: field.TypeString, Column: blockcontactform.FieldRecipientEmail},
			blockcontactform.FieldSuccessMessage:        {Type: field.TypeJSON, Column: blockcontactform.FieldSuccessMessage},
			blockcontactform.FieldCreatedAt:             {Type: field.TypeTime, Column: blockcontactform.FieldCreatedAt},
			blockcontactform.FieldUpdatedAt:             {Type: field.TypeTime, Column: blockcontactform.FieldUpdatedAt},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockcta.Table,
			Columns: blockcta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockcta.FieldID,
			},
		},
		Type: "BlockCta",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockcta.FieldInternalName:         {Type: field.TypeString, Column: blockcta.FieldInternalName},
			blockcta.FieldBadge:                {Type: field.TypeJSON, Column: blockcta.FieldBadge},
			blockcta.FieldTitle:                {Type: field.TypeJSON, Column: blockcta.FieldTitle},
			blockcta.FieldDescription:          {Type: field.TypeJSON, Column: blockcta.FieldDescription},
			blockcta.FieldPrimaryButtonText:    {Type: field.TypeJSON, Column: blockcta.FieldPrimaryButtonText},
			blockcta.FieldPrimaryButtonHref:    {Type: field.TypeString, Column: blockcta.FieldPrimaryButtonHref},
			blockcta.FieldPrimaryButtonStyle:   {Type: field.TypeEnum, Column: blockcta.FieldPrimaryButtonStyle},
			blockcta.FieldSecondaryButtonText:  {Type: field.TypeJSON, Column: blockcta.FieldSecondaryButtonText},
			blockcta.FieldSecondaryButtonHref:  {Type: field.TypeString, Column: blockcta.FieldSecondaryButtonHref},
			blockcta.FieldSecondaryButtonStyle: {Type: field.TypeEnum, Column: blockcta.FieldSecondaryButtonStyle},
			blockcta.FieldTextAlign:            {Type: field.TypeEnum, Column: blockcta.FieldTextAlign},
			blockcta.FieldColorScheme:          {Type: field.TypeEnum, Column: blockcta.FieldColorScheme},
			blockcta.FieldCreatedAt:            {Type: field.TypeTime, Column: blockcta.FieldCreatedAt},
			blockcta.FieldUpdatedAt:            {Type: field.TypeTime, Column: blockcta.FieldUpdatedAt},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockdivider.Table,
			Columns: blockdivider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockdivider.FieldID,
			},
		},
		Type: "BlockDivider",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockdivider.FieldInternalName: {Type: field.TypeString, Column: blockdivider.FieldInternalName},
			blockdivider.FieldHeight:       {Type: field.TypeInt, Column: blockdivider.FieldHeight},
			blockdivider.FieldColor:        {Type: field.TypeString, Column: blockdivider.FieldColor},
			blockdivider.FieldStyle:        {Type: field.TypeString, Column: blockdivider.FieldStyle},
			blockdivider.FieldCreatedAt:    {Type: field.TypeTime, Column: blockdivider.FieldCreatedAt},
			blockdivider.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockdivider.FieldUpdatedAt},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockdonationform.Table,
			Columns: blockdonationform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockdonationform.FieldID,
			},
		},
		Type: "BlockDonationForm",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockdonationform.FieldInternalName:      {Type: field.TypeString, Column: blockdonationform.FieldInternalName},
			blockdonationform.FieldTitle:             {Type: field.TypeJSON, Column: blockdonationform.FieldTitle},
			blockdonationform.FieldDescription:       {Type: field.TypeJSON, Column: blockdonationform.FieldDescription},
			blockdonationform.FieldShowAmountButtons: {Type: field.TypeBool, Column: blockdonationform.FieldShowAmountButtons},
			blockdonationform.FieldDefaultAmounts:    {Type: field.TypeJSON, Column: blockdonationform.FieldDefaultAmounts},
			blockdonationform.FieldAllowCustomAmount: {Type: field.TypeBool, Column: blockdonationform.FieldAllowCustomAmount},
			blockdonationform.FieldShowRecurring:     {Type: field.TypeBool, Column: blockdonationform.FieldShowRecurring},
			blockdonationform.FieldColorScheme:       {Type: field.TypeEnum, Column: blockdonationform.FieldColorScheme},
			blockdonationform.FieldCreatedAt:         {Type: field.TypeTime, Column: blockdonationform.FieldCreatedAt},
			blockdonationform.FieldUpdatedAt:         {Type: field.TypeTime, Column: blockdonationform.FieldUpdatedAt},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockfaq.Table,
			Columns: blockfaq.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockfaq.FieldID,
			},
		},
		Type: "BlockFaq",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockfaq.FieldInternalName:      {Type: field.TypeString, Column: blockfaq.FieldInternalName},
			blockfaq.FieldBadge:             {Type: field.TypeJSON, Column: blockfaq.FieldBadge},
			blockfaq.FieldTitle:             {Type: field.TypeJSON, Column: blockfaq.FieldTitle},
			blockfaq.FieldDescription:       {Type: field.TypeJSON, Column: blockfaq.FieldDescription},
			blockfaq.FieldAllowMultipleOpen: {Type: field.TypeBool, Column: blockfaq.FieldAllowMultipleOpen},
			blockfaq.FieldDefaultOpenFirst:  {Type: field.TypeBool, Column: blockfaq.FieldDefaultOpenFirst},
			blockfaq.FieldCreatedAt:         {Type: field.TypeTime, Column: blockfaq.FieldCreatedAt},
			blockfaq.FieldUpdatedAt:         {Type: field.TypeTime, Column: blockfaq.FieldUpdatedAt},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockgallery.Table,
			Columns: blockgallery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockgallery.FieldID,
			},
		},
		Type: "BlockGallery",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockgallery.FieldInternalName: {Type: field.TypeString, Column: blockgallery.FieldInternalName},
			blockgallery.FieldTitle:        {Type: field.TypeJSON, Column: blockgallery.FieldTitle},
			blockgallery.FieldDescription:  {Type: field.TypeJSON, Column: blockgallery.FieldDescription},
			blockgallery.FieldLayout:       {Type: field.TypeEnum, Column: blockgallery.FieldLayout},
			blockgallery.FieldColumns:      {Type: field.TypeInt, Column: blockgallery.FieldColumns},
			blockgallery.FieldSpacing:      {Type: field.TypeString, Column: blockgallery.FieldSpacing},
			blockgallery.FieldAspectRatio:  {Type: field.TypeString, Column: blockgallery.FieldAspectRatio},
			blockgallery.FieldCreatedAt:    {Type: field.TypeTime, Column: blockgallery.FieldCreatedAt},
			blockgallery.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockgallery.FieldUpdatedAt},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockhero.Table,
			Columns: blockhero.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockhero.FieldID,
			},
		},
		Type: "BlockHero",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockhero.FieldInternalName:       {Type: field.TypeString, Column: blockhero.FieldInternalName},
			blockhero.FieldTitle:              {Type: field.TypeJSON, Column: blockhero.FieldTitle},
			blockhero.FieldSubtitle:           {Type: field.TypeJSON, Column: blockhero.FieldSubtitle},
			blockhero.FieldCtaButtons:         {Type: field.TypeJSON, Column: blockhero.FieldCtaButtons},
			blockhero.FieldBackgroundImageURL: {Type: field.TypeString, Column: blockhero.FieldBackgroundImageURL},
			blockhero.FieldBadge:              {Type: field.TypeJSON, Column: blockhero.FieldBadge},
			blockhero.FieldDescription:        {Type: field.TypeJSON, Column: blockhero.FieldDescription},
			blockhero.FieldTextAlign:          {Type: field.TypeEnum, Column: blockhero.FieldTextAlign},
			blockhero.FieldColorScheme:        {Type: field.TypeEnum, Column: blockhero.FieldColorScheme},
			blockhero.FieldMinHeight:          {Type: field.TypeString, Column: blockhero.FieldMinHeight},
			blockhero.FieldBackgroundVideoURL: {Type: field.TypeString, Column: blockhero.FieldBackgroundVideoURL},
			blockhero.FieldOverlayColor:       {Type: field.TypeString, Column: blockhero.FieldOverlayColor},
			blockhero.FieldOverlayOpacity:     {Type: field.TypeFloat64, Column: blockhero.FieldOverlayOpacity},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockmap.Table,
			Columns: blockmap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockmap.FieldID,
			},
		},
		Type: "BlockMap",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockmap.FieldInternalName: {Type: field.TypeString, Column: blockmap.FieldInternalName},
			blockmap.FieldLatitude:     {Type: field.TypeFloat64, Column: blockmap.FieldLatitude},
			blockmap.FieldLongitude:    {Type: field.TypeFloat64, Column: blockmap.FieldLongitude},
			blockmap.FieldZoom:         {Type: field.TypeInt, Column: blockmap.FieldZoom},
			blockmap.FieldMarkers:      {Type: field.TypeJSON, Column: blockmap.FieldMarkers},
			blockmap.FieldCreatedAt:    {Type: field.TypeTime, Column: blockmap.FieldCreatedAt},
			blockmap.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockmap.FieldUpdatedAt},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocknewslettersignup.Table,
			Columns: blocknewslettersignup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocknewslettersignup.FieldID,
			},
		},
		Type: "BlockNewsletterSignup",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocknewslettersignup.FieldInternalName:  {Type: field.TypeString, Column: blocknewslettersignup.FieldInternalName},
			blocknewslettersignup.FieldTitle:         {Type: field.TypeJSON, Column: blocknewslettersignup.FieldTitle},
			blocknewslettersignup.FieldDescription:   {Type: field.TypeJSON, Column: blocknewslettersignup.FieldDescription},
			blocknewslettersignup.FieldButtonText:    {Type: field.TypeJSON, Column: blocknewslettersignup.FieldButtonText},
			blocknewslettersignup.FieldShowNameField: {Type: field.TypeBool, Column: blocknewslettersignup.FieldShowNameField},
			blocknewslettersignup.FieldPlaceholder:   {Type: field.TypeJSON, Column: blocknewslettersignup.FieldPlaceholder},
			blocknewslettersignup.FieldLayout:        {Type: field.TypeString, Column: blocknewslettersignup.FieldLayout},
			blocknewslettersignup.FieldColorScheme:   {Type: field.TypeEnum, Column: blocknewslettersignup.FieldColorScheme},
			blocknewslettersignup.FieldCreatedAt:     {Type: field.TypeTime, Column: blocknewslettersignup.FieldCreatedAt},
			blocknewslettersignup.FieldUpdatedAt:     {Type: field.TypeTime, Column: blocknewslettersignup.FieldUpdatedAt},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockpartnerlogos.Table,
			Columns: blockpartnerlogos.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockpartnerlogos.FieldID,
			},
		},
		Type: "BlockPartnerLogos",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockpartnerlogos.FieldInternalName: {Type: field.TypeString, Column: blockpartnerlogos.FieldInternalName},
			blockpartnerlogos.FieldTitle:        {Type: field.TypeJSON, Column: blockpartnerlogos.FieldTitle},
			blockpartnerlogos.FieldDescription:  {Type: field.TypeJSON, Column: blockpartnerlogos.FieldDescription},
			blockpartnerlogos.FieldLayout:       {Type: field.TypeString, Column: blockpartnerlogos.FieldLayout},
			blockpartnerlogos.FieldItemsPerRow:  {Type: field.TypeInt, Column: blockpartnerlogos.FieldItemsPerRow},
			blockpartnerlogos.FieldGrayscale:    {Type: field.TypeBool, Column: blockpartnerlogos.FieldGrayscale},
			blockpartnerlogos.FieldCreatedAt:    {Type: field.TypeTime, Column: blockpartnerlogos.FieldCreatedAt},
			blockpartnerlogos.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockpartnerlogos.FieldUpdatedAt},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockprogramcards.Table,
			Columns: blockprogramcards.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockprogramcards.FieldID,
			},
		},
		Type: "BlockProgramCards",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockprogramcards.FieldInternalName:    {Type: field.TypeString, Column: blockprogramcards.FieldInternalName},
			blockprogramcards.FieldBadge:           {Type: field.TypeJSON, Column: blockprogramcards.FieldBadge},
			blockprogramcards.FieldTitle:           {Type: field.TypeJSON, Column: blockprogramcards.FieldTitle},
			blockprogramcards.FieldDescription:     {Type: field.TypeJSON, Column: blockprogramcards.FieldDescription},
			blockprogramcards.FieldLayout:          {Type: field.TypeString, Column: blockprogramcards.FieldLayout},
			blockprogramcards.FieldItemsPerRow:     {Type: field.TypeInt, Column: blockprogramcards.FieldItemsPerRow},
			blockprogramcards.FieldShowAllPrograms: {Type: field.TypeBool, Column: blockprogramcards.FieldShowAllPrograms},
			blockprogramcards.FieldCreatedAt:       {Type: field.TypeTime, Column: blockprogramcards.FieldCreatedAt},
			blockprogramcards.FieldUpdatedAt:       {Type: field.TypeTime, Column: blockprogramcards.FieldUpdatedAt},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockstats.Table,
			Columns: blockstats.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockstats.FieldID,
			},
		},
		Type: "BlockStats",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockstats.FieldInternalName: {Type: field.TypeString, Column: blockstats.FieldInternalName},
			blockstats.FieldBadge:        {Type: field.TypeJSON, Column: blockstats.FieldBadge},
			blockstats.FieldTitle:        {Type: field.TypeJSON, Column: blockstats.FieldTitle},
			blockstats.FieldDescription:  {Type: field.TypeJSON, Column: blockstats.FieldDescription},
			blockstats.FieldLayout:       {Type: field.TypeString, Column: blockstats.FieldLayout},
			blockstats.FieldItemsPerRow:  {Type: field.TypeInt, Column: blockstats.FieldItemsPerRow},
			blockstats.FieldCreatedAt:    {Type: field.TypeTime, Column: blockstats.FieldCreatedAt},
			blockstats.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockstats.FieldUpdatedAt},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocksuccessstories.Table,
			Columns: blocksuccessstories.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocksuccessstories.FieldID,
			},
		},
		Type: "BlockSuccessStories",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocksuccessstories.FieldInternalName:  {Type: field.TypeString, Column: blocksuccessstories.FieldInternalName},
			blocksuccessstories.FieldBadge:         {Type: field.TypeJSON, Column: blocksuccessstories.FieldBadge},
			blocksuccessstories.FieldTitle:         {Type: field.TypeJSON, Column: blocksuccessstories.FieldTitle},
			blocksuccessstories.FieldDescription:   {Type: field.TypeJSON, Column: blocksuccessstories.FieldDescription},
			blocksuccessstories.FieldLayout:        {Type: field.TypeString, Column: blocksuccessstories.FieldLayout},
			blocksuccessstories.FieldMaxItems:      {Type: field.TypeInt, Column: blocksuccessstories.FieldMaxItems},
			blocksuccessstories.FieldAutoplay:      {Type: field.TypeBool, Column: blocksuccessstories.FieldAutoplay},
			blocksuccessstories.FieldProgramFilter: {Type: field.TypeString, Column: blocksuccessstories.FieldProgramFilter},
			blocksuccessstories.FieldCreatedAt:     {Type: field.TypeTime, Column: blocksuccessstories.FieldCreatedAt},
			blocksuccessstories.FieldUpdatedAt:     {Type: field.TypeTime, Column: blocksuccessstories.FieldUpdatedAt},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocktabs.Table,
			Columns: blocktabs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocktabs.FieldID,
			},
		},
		Type: "BlockTabs",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocktabs.FieldInternalName: {Type: field.TypeString, Column: blocktabs.FieldInternalName},
			blocktabs.FieldCreatedAt:    {Type: field.TypeTime, Column: blocktabs.FieldCreatedAt},
			blocktabs.FieldUpdatedAt:    {Type: field.TypeTime, Column: blocktabs.FieldUpdatedAt},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockteamgrid.Table,
			Columns: blockteamgrid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockteamgrid.FieldID,
			},
		},
		Type: "BlockTeamGrid",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockteamgrid.FieldInternalName: {Type: field.TypeString, Column: blockteamgrid.FieldInternalName},
			blockteamgrid.FieldBadge:        {Type: field.TypeJSON, Column: blockteamgrid.FieldBadge},
			blockteamgrid.FieldTitle:        {Type: field.TypeJSON, Column: blockteamgrid.FieldTitle},
			blockteamgrid.FieldDescription:  {Type: field.TypeJSON, Column: blockteamgrid.FieldDescription},
			blockteamgrid.FieldItemsPerRow:  {Type: field.TypeInt, Column: blockteamgrid.FieldItemsPerRow},
			blockteamgrid.FieldCreatedAt:    {Type: field.TypeTime, Column: blockteamgrid.FieldCreatedAt},
			blockteamgrid.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockteamgrid.FieldUpdatedAt},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocktestimonials.Table,
			Columns: blocktestimonials.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocktestimonials.FieldID,
			},
		},
		Type: "BlockTestimonials",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocktestimonials.FieldInternalName:  {Type: field.TypeString, Column: blocktestimonials.FieldInternalName},
			blocktestimonials.FieldBadge:         {Type: field.TypeJSON, Column: blocktestimonials.FieldBadge},
			blocktestimonials.FieldTitle:         {Type: field.TypeJSON, Column: blocktestimonials.FieldTitle},
			blocktestimonials.FieldDescription:   {Type: field.TypeJSON, Column: blocktestimonials.FieldDescription},
			blocktestimonials.FieldLayout:        {Type: field.TypeString, Column: blocktestimonials.FieldLayout},
			blocktestimonials.FieldItemsPerRow:   {Type: field.TypeInt, Column: blocktestimonials.FieldItemsPerRow},
			blocktestimonials.FieldAutoplay:      {Type: field.TypeBool, Column: blocktestimonials.FieldAutoplay},
			blocktestimonials.FieldAutoplaySpeed: {Type: field.TypeInt, Column: blocktestimonials.FieldAutoplaySpeed},
			blocktestimonials.FieldCreatedAt:     {Type: field.TypeTime, Column: blocktestimonials.FieldCreatedAt},
			blocktestimonials.FieldUpdatedAt:     {Type: field.TypeTime, Column: blocktestimonials.FieldUpdatedAt},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocktextcontent.Table,
			Columns: blocktextcontent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocktextcontent.FieldID,
			},
		},
		Type: "BlockTextContent",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocktextcontent.FieldInternalName: {Type: field.TypeString, Column: blocktextcontent.FieldInternalName},
			blocktextcontent.FieldContent:      {Type: field.TypeJSON, Column: blocktextcontent.FieldContent},
			blocktextcontent.FieldTextAlign:    {Type: field.TypeEnum, Column: blocktextcontent.FieldTextAlign},
			blocktextcontent.FieldColorScheme:  {Type: field.TypeEnum, Column: blocktextcontent.FieldColorScheme},
			blocktextcontent.FieldMaxWidth:     {Type: field.TypeString, Column: blocktextcontent.FieldMaxWidth},
			blocktextcontent.FieldCreatedAt:    {Type: field.TypeTime, Column: blocktextcontent.FieldCreatedAt},
			blocktextcontent.FieldUpdatedAt:    {Type: field.TypeTime, Column: blocktextcontent.FieldUpdatedAt},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blocktimeline.Table,
			Columns: blocktimeline.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocktimeline.FieldID,
			},
		},
		Type: "BlockTimeline",
		Fields: map[string]*sqlgraph.FieldSpec{
			blocktimeline.FieldInternalName: {Type: field.TypeString, Column: blocktimeline.FieldInternalName},
			blocktimeline.FieldBadge:        {Type: field.TypeJSON, Column: blocktimeline.FieldBadge},
			blocktimeline.FieldTitle:        {Type: field.TypeJSON, Column: blocktimeline.FieldTitle},
			blocktimeline.FieldDescription:  {Type: field.TypeJSON, Column: blocktimeline.FieldDescription},
			blocktimeline.FieldLayout:       {Type: field.TypeString, Column: blocktimeline.FieldLayout},
			blocktimeline.FieldCreatedAt:    {Type: field.TypeTime, Column: blocktimeline.FieldCreatedAt},
			blocktimeline.FieldUpdatedAt:    {Type: field.TypeTime, Column: blocktimeline.FieldUpdatedAt},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockvideoembed.Table,
			Columns: blockvideoembed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockvideoembed.FieldID,
			},
		},
		Type: "BlockVideoEmbed",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockvideoembed.FieldInternalName: {Type: field.TypeString, Column: blockvideoembed.FieldInternalName},
			blockvideoembed.FieldBadge:        {Type: field.TypeJSON, Column: blockvideoembed.FieldBadge},
			blockvideoembed.FieldTitle:        {Type: field.TypeJSON, Column: blockvideoembed.FieldTitle},
			blockvideoembed.FieldDescription:  {Type: field.TypeJSON, Column: blockvideoembed.FieldDescription},
			blockvideoembed.FieldVideoURL:     {Type: field.TypeString, Column: blockvideoembed.FieldVideoURL},
			blockvideoembed.FieldThumbnailURL: {Type: field.TypeString, Column: blockvideoembed.FieldThumbnailURL},
			blockvideoembed.FieldAspectRatio:  {Type: field.TypeString, Column: blockvideoembed.FieldAspectRatio},
			blockvideoembed.FieldAutoplay:     {Type: field.TypeBool, Column: blockvideoembed.FieldAutoplay},
			blockvideoembed.FieldShowControls: {Type: field.TypeBool, Column: blockvideoembed.FieldShowControls},
			blockvideoembed.FieldCreatedAt:    {Type: field.TypeTime, Column: blockvideoembed.FieldCreatedAt},
			blockvideoembed.FieldUpdatedAt:    {Type: field.TypeTime, Column: blockvideoembed.FieldUpdatedAt},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   blockvolunteersignup.Table,
			Columns: blockvolunteersignup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockvolunteersignup.FieldID,
			},
		},
		Type: "BlockVolunteerSignup",
		Fields: map[string]*sqlgraph.FieldSpec{
			blockvolunteersignup.FieldInternalName:      {Type: field.TypeString, Column: blockvolunteersignup.FieldInternalName},
			blockvolunteersignup.FieldTitle:             {Type: field.TypeJSON, Column: blockvolunteersignup.FieldTitle},
			blockvolunteersignup.FieldDescription:       {Type: field.TypeJSON, Column: blockvolunteersignup.FieldDescription},
			blockvolunteersignup.FieldShowSkillsInput:   {Type: field.TypeBool, Column: blockvolunteersignup.FieldShowSkillsInput},
			blockvolunteersignup.FieldShowAvailability:  {Type: field.TypeBool, Column: blockvolunteersignup.FieldShowAvailability},
			blockvolunteersignup.FieldRequireBackground: {Type: field.TypeBool, Column: blockvolunteersignup.FieldRequireBackground},
			blockvolunteersignup.FieldCreatedAt:         {Type: field.TypeTime, Column: blockvolunteersignup.FieldCreatedAt},
			blockvolunteersignup.FieldUpdatedAt:         {Type: field.TypeTime, Column: blockvolunteersignup.FieldUpdatedAt},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   brandbenefit.Table,
			Columns: brandbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: brandbenefit.FieldID,
			},
		},
		Type: "BrandBenefit",
		Fields: map[string]*sqlgraph.FieldSpec{
			brandbenefit.FieldType:        {Type: field.TypeString, Column: brandbenefit.FieldType},
			brandbenefit.FieldDescription: {Type: field.TypeString, Column: brandbenefit.FieldDescription},
			brandbenefit.FieldURL:         {Type: field.TypeString, Column: brandbenefit.FieldURL},
			brandbenefit.FieldDate:        {Type: field.TypeTime, Column: brandbenefit.FieldDate},
			brandbenefit.FieldValue:       {Type: field.TypeFloat64, Column: brandbenefit.FieldValue},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   brandconfig.Table,
			Columns: brandconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: brandconfig.FieldID,
			},
		},
		Type: "BrandConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			brandconfig.FieldSingleton: {Type: field.TypeString, Column: brandconfig.FieldSingleton},
			brandconfig.FieldName:      {Type: field.TypeString, Column: brandconfig.FieldName},
			brandconfig.FieldLogoURL:   {Type: field.TypeString, Column: brandconfig.FieldLogoURL},
			brandconfig.FieldColors:    {Type: field.TypeJSON, Column: brandconfig.FieldColors},
			brandconfig.FieldContact:   {Type: field.TypeJSON, Column: brandconfig.FieldContact},
			brandconfig.FieldSocial:    {Type: field.TypeJSON, Column: brandconfig.FieldSocial},
			brandconfig.FieldUpdatedAt: {Type: field.TypeTime, Column: brandconfig.FieldUpdatedAt},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contentblock.Table,
			Columns: contentblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contentblock.FieldID,
			},
		},
		Type: "ContentBlock",
		Fields: map[string]*sqlgraph.FieldSpec{
			contentblock.FieldOrder:         {Type: field.TypeInt, Column: contentblock.FieldOrder},
			contentblock.FieldBlockType:     {Type: field.TypeEnum, Column: contentblock.FieldBlockType},
			contentblock.FieldConfig:        {Type: field.TypeJSON, Column: contentblock.FieldConfig},
			contentblock.FieldIsVisible:     {Type: field.TypeBool, Column: contentblock.FieldIsVisible},
			contentblock.FieldHideOnMobile:  {Type: field.TypeBool, Column: contentblock.FieldHideOnMobile},
			contentblock.FieldHideOnTablet:  {Type: field.TypeBool, Column: contentblock.FieldHideOnTablet},
			contentblock.FieldHideOnDesktop: {Type: field.TypeBool, Column: contentblock.FieldHideOnDesktop},
			contentblock.FieldCreatedAt:     {Type: field.TypeTime, Column: contentblock.FieldCreatedAt},
			contentblock.FieldUpdatedAt:     {Type: field.TypeTime, Column: contentblock.FieldUpdatedAt},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   conversation.Table,
			Columns: conversation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversation.FieldID,
			},
		},
		Type: "Conversation",
		Fields: map[string]*sqlgraph.FieldSpec{
			conversation.FieldCreatedAt: {Type: field.TypeTime, Column: conversation.FieldCreatedAt},
			conversation.FieldUpdatedAt: {Type: field.TypeTime, Column: conversation.FieldUpdatedAt},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   conversationparticipant.Table,
			Columns: conversationparticipant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversationparticipant.FieldID,
			},
		},
		Type: "ConversationParticipant",
		Fields: map[string]*sqlgraph.FieldSpec{
			conversationparticipant.FieldLastReadAt: {Type: field.TypeTime, Column: conversationparticipant.FieldLastReadAt},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dashboardwidget.Table,
			Columns: dashboardwidget.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dashboardwidget.FieldID,
			},
		},
		Type: "DashboardWidget",
		Fields: map[string]*sqlgraph.FieldSpec{
			dashboardwidget.FieldTitle:       {Type: field.TypeJSON, Column: dashboardwidget.FieldTitle},
			dashboardwidget.FieldType:        {Type: field.TypeString, Column: dashboardwidget.FieldType},
			dashboardwidget.FieldConfig:      {Type: field.TypeJSON, Column: dashboardwidget.FieldConfig},
			dashboardwidget.FieldDataSource:  {Type: field.TypeString, Column: dashboardwidget.FieldDataSource},
			dashboardwidget.FieldQuery:       {Type: field.TypeJSON, Column: dashboardwidget.FieldQuery},
			dashboardwidget.FieldOrder:       {Type: field.TypeInt, Column: dashboardwidget.FieldOrder},
			dashboardwidget.FieldPosition:    {Type: field.TypeJSON, Column: dashboardwidget.FieldPosition},
			dashboardwidget.FieldIsVisible:   {Type: field.TypeBool, Column: dashboardwidget.FieldIsVisible},
			dashboardwidget.FieldRefreshRate: {Type: field.TypeInt, Column: dashboardwidget.FieldRefreshRate},
			dashboardwidget.FieldCreatedAt:   {Type: field.TypeTime, Column: dashboardwidget.FieldCreatedAt},
			dashboardwidget.FieldUpdatedAt:   {Type: field.TypeTime, Column: dashboardwidget.FieldUpdatedAt},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   document.Table,
			Columns: document.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: document.FieldID,
			},
		},
		Type: "Document",
		Fields: map[string]*sqlgraph.FieldSpec{
			document.FieldTitle:            {Type: field.TypeJSON, Column: document.FieldTitle},
			document.FieldType:             {Type: field.TypeEnum, Column: document.FieldType},
			document.FieldFileURL:          {Type: field.TypeString, Column: document.FieldFileURL},
			document.FieldFileName:         {Type: field.TypeString, Column: document.FieldFileName},
			document.FieldMimeType:         {Type: field.TypeString, Column: document.FieldMimeType},
			document.FieldSize:             {Type: field.TypeInt, Column: document.FieldSize},
			document.FieldDescription:      {Type: field.TypeJSON, Column: document.FieldDescription},
			document.FieldTags:             {Type: field.TypeJSON, Column: document.FieldTags},
			document.FieldVersion:          {Type: field.TypeString, Column: document.FieldVersion},
			document.FieldLanguage:         {Type: field.TypeString, Column: document.FieldLanguage},
			document.FieldIsPublic:         {Type: field.TypeBool, Column: document.FieldIsPublic},
			document.FieldAllowedRoles:     {Type: field.TypeJSON, Column: document.FieldAllowedRoles},
			document.FieldAccessPassword:   {Type: field.TypeString, Column: document.FieldAccessPassword},
			document.FieldRequiresApproval: {Type: field.TypeBool, Column: document.FieldRequiresApproval},
			document.FieldIsApproved:       {Type: field.TypeBool, Column: document.FieldIsApproved},
			document.FieldApprovedBy:       {Type: field.TypeString, Column: document.FieldApprovedBy},
			document.FieldApprovedAt:       {Type: field.TypeTime, Column: document.FieldApprovedAt},
			document.FieldDownloadCount:    {Type: field.TypeInt, Column: document.FieldDownloadCount},
			document.FieldLastAccessed:     {Type: field.TypeTime, Column: document.FieldLastAccessed},
			document.FieldCreatedAt:        {Type: field.TypeTime, Column: document.FieldCreatedAt},
			document.FieldUpdatedAt:        {Type: field.TypeTime, Column: document.FieldUpdatedAt},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentcategory.Table,
			Columns: documentcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: documentcategory.FieldID,
			},
		},
		Type: "DocumentCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentcategory.FieldName:         {Type: field.TypeJSON, Column: documentcategory.FieldName},
			documentcategory.FieldDescription:  {Type: field.TypeJSON, Column: documentcategory.FieldDescription},
			documentcategory.FieldSlug:         {Type: field.TypeString, Column: documentcategory.FieldSlug},
			documentcategory.FieldDisplayOrder: {Type: field.TypeInt, Column: documentcategory.FieldDisplayOrder},
			documentcategory.FieldIsActive:     {Type: field.TypeBool, Column: documentcategory.FieldIsActive},
			documentcategory.FieldCreatedAt:    {Type: field.TypeTime, Column: documentcategory.FieldCreatedAt},
			documentcategory.FieldUpdatedAt:    {Type: field.TypeTime, Column: documentcategory.FieldUpdatedAt},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   donation.Table,
			Columns: donation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: donation.FieldID,
			},
		},
		Type: "Donation",
		Fields: map[string]*sqlgraph.FieldSpec{
			donation.FieldAmount:            {Type: field.TypeFloat64, Column: donation.FieldAmount},
			donation.FieldCurrency:          {Type: field.TypeString, Column: donation.FieldCurrency},
			donation.FieldIsRecurring:       {Type: field.TypeBool, Column: donation.FieldIsRecurring},
			donation.FieldFrequency:         {Type: field.TypeString, Column: donation.FieldFrequency},
			donation.FieldPaymentMethod:     {Type: field.TypeString, Column: donation.FieldPaymentMethod},
			donation.FieldPaymentID:         {Type: field.TypeString, Column: donation.FieldPaymentID},
			donation.FieldStatus:            {Type: field.TypeString, Column: donation.FieldStatus},
			donation.FieldProcessedAt:       {Type: field.TypeTime, Column: donation.FieldProcessedAt},
			donation.FieldAnonymous:         {Type: field.TypeBool, Column: donation.FieldAnonymous},
			donation.FieldPaymentGatewayRef: {Type: field.TypeString, Column: donation.FieldPaymentGatewayRef},
			donation.FieldDonorMessage:      {Type: field.TypeString, Column: donation.FieldDonorMessage},
			donation.FieldTaxReceiptSent:    {Type: field.TypeBool, Column: donation.FieldTaxReceiptSent},
			donation.FieldTaxReceiptSentAt:  {Type: field.TypeTime, Column: donation.FieldTaxReceiptSentAt},
			donation.FieldRecurringInterval: {Type: field.TypeString, Column: donation.FieldRecurringInterval},
			donation.FieldNextPaymentDate:   {Type: field.TypeTime, Column: donation.FieldNextPaymentDate},
			donation.FieldMetadata:          {Type: field.TypeJSON, Column: donation.FieldMetadata},
			donation.FieldCreatedAt:         {Type: field.TypeTime, Column: donation.FieldCreatedAt},
			donation.FieldUpdatedAt:         {Type: field.TypeTime, Column: donation.FieldUpdatedAt},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldTitle:                      {Type: field.TypeJSON, Column: event.FieldTitle},
			event.FieldDescription:                {Type: field.TypeJSON, Column: event.FieldDescription},
			event.FieldEventType:                  {Type: field.TypeString, Column: event.FieldEventType},
			event.FieldStartDate:                  {Type: field.TypeTime, Column: event.FieldStartDate},
			event.FieldEndDate:                    {Type: field.TypeTime, Column: event.FieldEndDate},
			event.FieldCapacity:                   {Type: field.TypeInt, Column: event.FieldCapacity},
			event.FieldStatus:                     {Type: field.TypeEnum, Column: event.FieldStatus},
			event.FieldIsVirtual:                  {Type: field.TypeBool, Column: event.FieldIsVirtual},
			event.FieldMeetingURL:                 {Type: field.TypeString, Column: event.FieldMeetingURL},
			event.FieldRegistrationRequired:       {Type: field.TypeBool, Column: event.FieldRegistrationRequired},
			event.FieldRegistrationDeadline:       {Type: field.TypeTime, Column: event.FieldRegistrationDeadline},
			event.FieldRequiresApproval:           {Type: field.TypeBool, Column: event.FieldRequiresApproval},
			event.FieldTags:                       {Type: field.TypeJSON, Column: event.FieldTags},
			event.FieldImageURL:                   {Type: field.TypeString, Column: event.FieldImageURL},
			event.FieldCorporateVolunteerFriendly: {Type: field.TypeBool, Column: event.FieldCorporateVolunteerFriendly},
			event.FieldAlumniOnly:                 {Type: field.TypeBool, Column: event.FieldAlumniOnly},
			event.FieldMajorDonorOnly:             {Type: field.TypeBool, Column: event.FieldMajorDonorOnly},
			event.FieldCreatedAt:                  {Type: field.TypeTime, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:                  {Type: field.TypeTime, Column: event.FieldUpdatedAt},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventregistration.Table,
			Columns: eventregistration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventregistration.FieldID,
			},
		},
		Type: "EventRegistration",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventregistration.FieldStatus:           {Type: field.TypeEnum, Column: eventregistration.FieldStatus},
			eventregistration.FieldAttendanceStatus: {Type: field.TypeEnum, Column: eventregistration.FieldAttendanceStatus},
			eventregistration.FieldRegistrationData: {Type: field.TypeJSON, Column: eventregistration.FieldRegistrationData},
			eventregistration.FieldFeedback:         {Type: field.TypeJSON, Column: eventregistration.FieldFeedback},
			eventregistration.FieldCreatedAt:        {Type: field.TypeTime, Column: eventregistration.FieldCreatedAt},
			eventregistration.FieldUpdatedAt:        {Type: field.TypeTime, Column: eventregistration.FieldUpdatedAt},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   faqitem.Table,
			Columns: faqitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: faqitem.FieldID,
			},
		},
		Type: "FaqItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			faqitem.FieldOrder:     {Type: field.TypeInt, Column: faqitem.FieldOrder},
			faqitem.FieldQuestion:  {Type: field.TypeJSON, Column: faqitem.FieldQuestion},
			faqitem.FieldAnswer:    {Type: field.TypeJSON, Column: faqitem.FieldAnswer},
			faqitem.FieldCreatedAt: {Type: field.TypeTime, Column: faqitem.FieldCreatedAt},
			faqitem.FieldUpdatedAt: {Type: field.TypeTime, Column: faqitem.FieldUpdatedAt},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   featureflag.Table,
			Columns: featureflag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: featureflag.FieldID,
			},
		},
		Type: "FeatureFlag",
		Fields: map[string]*sqlgraph.FieldSpec{
			featureflag.FieldDescription:       {Type: field.TypeString, Column: featureflag.FieldDescription},
			featureflag.FieldIsActive:          {Type: field.TypeBool, Column: featureflag.FieldIsActive},
			featureflag.FieldRolloutPercentage: {Type: field.TypeInt, Column: featureflag.FieldRolloutPercentage},
			featureflag.FieldAllowedUserIds:    {Type: field.TypeJSON, Column: featureflag.FieldAllowedUserIds},
			featureflag.FieldAllowedRoles:      {Type: field.TypeJSON, Column: featureflag.FieldAllowedRoles},
			featureflag.FieldCreatedAt:         {Type: field.TypeTime, Column: featureflag.FieldCreatedAt},
			featureflag.FieldUpdatedAt:         {Type: field.TypeTime, Column: featureflag.FieldUpdatedAt},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fundraisingcampaign.Table,
			Columns: fundraisingcampaign.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fundraisingcampaign.FieldID,
			},
		},
		Type: "FundraisingCampaign",
		Fields: map[string]*sqlgraph.FieldSpec{
			fundraisingcampaign.FieldSlug:            {Type: field.TypeString, Column: fundraisingcampaign.FieldSlug},
			fundraisingcampaign.FieldTitle:           {Type: field.TypeJSON, Column: fundraisingcampaign.FieldTitle},
			fundraisingcampaign.FieldDescription:     {Type: field.TypeJSON, Column: fundraisingcampaign.FieldDescription},
			fundraisingcampaign.FieldStory:           {Type: field.TypeJSON, Column: fundraisingcampaign.FieldStory},
			fundraisingcampaign.FieldType:            {Type: field.TypeString, Column: fundraisingcampaign.FieldType},
			fundraisingcampaign.FieldCategory:        {Type: field.TypeString, Column: fundraisingcampaign.FieldCategory},
			fundraisingcampaign.FieldTargetAmount:    {Type: field.TypeFloat64, Column: fundraisingcampaign.FieldTargetAmount},
			fundraisingcampaign.FieldCurrentAmount:   {Type: field.TypeFloat64, Column: fundraisingcampaign.FieldCurrentAmount},
			fundraisingcampaign.FieldCurrency:        {Type: field.TypeString, Column: fundraisingcampaign.FieldCurrency},
			fundraisingcampaign.FieldMinimumDonation: {Type: field.TypeFloat64, Column: fundraisingcampaign.FieldMinimumDonation},
			fundraisingcampaign.FieldStartDate:       {Type: field.TypeTime, Column: fundraisingcampaign.FieldStartDate},
			fundraisingcampaign.FieldEndDate:         {Type: field.TypeTime, Column: fundraisingcampaign.FieldEndDate},
			fundraisingcampaign.FieldIsActive:        {Type: field.TypeBool, Column: fundraisingcampaign.FieldIsActive},
			fundraisingcampaign.FieldHeroImageURL:    {Type: field.TypeString, Column: fundraisingcampaign.FieldHeroImageURL},
			fundraisingcampaign.FieldVideoURL:        {Type: field.TypeString, Column: fundraisingcampaign.FieldVideoURL},
			fundraisingcampaign.FieldGalleryImages:   {Type: field.TypeJSON, Column: fundraisingcampaign.FieldGalleryImages},
			fundraisingcampaign.FieldManagerID:       {Type: field.TypeString, Column: fundraisingcampaign.FieldManagerID},
			fundraisingcampaign.FieldIsPublic:        {Type: field.TypeBool, Column: fundraisingcampaign.FieldIsPublic},
			fundraisingcampaign.FieldAllowRecurring:  {Type: field.TypeBool, Column: fundraisingcampaign.FieldAllowRecurring},
			fundraisingcampaign.FieldDonorCount:      {Type: field.TypeInt, Column: fundraisingcampaign.FieldDonorCount},
			fundraisingcampaign.FieldShareCount:      {Type: field.TypeInt, Column: fundraisingcampaign.FieldShareCount},
			fundraisingcampaign.FieldViewCount:       {Type: field.TypeInt, Column: fundraisingcampaign.FieldViewCount},
			fundraisingcampaign.FieldCreatedAt:       {Type: field.TypeTime, Column: fundraisingcampaign.FieldCreatedAt},
			fundraisingcampaign.FieldUpdatedAt:       {Type: field.TypeTime, Column: fundraisingcampaign.FieldUpdatedAt},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   galleryimage.Table,
			Columns: galleryimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: galleryimage.FieldID,
			},
		},
		Type: "GalleryImage",
		Fields: map[string]*sqlgraph.FieldSpec{
			galleryimage.FieldOrder:       {Type: field.TypeInt, Column: galleryimage.FieldOrder},
			galleryimage.FieldImageURL:    {Type: field.TypeString, Column: galleryimage.FieldImageURL},
			galleryimage.FieldImageWidth:  {Type: field.TypeInt, Column: galleryimage.FieldImageWidth},
			galleryimage.FieldImageHeight: {Type: field.TypeInt, Column: galleryimage.FieldImageHeight},
			galleryimage.FieldAltText:     {Type: field.TypeJSON, Column: galleryimage.FieldAltText},
			galleryimage.FieldCaption:     {Type: field.TypeJSON, Column: galleryimage.FieldCaption},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   generatedreport.Table,
			Columns: generatedreport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: generatedreport.FieldID,
			},
		},
		Type: "GeneratedReport",
		Fields: map[string]*sqlgraph.FieldSpec{
			generatedreport.FieldStatus:         {Type: field.TypeString, Column: generatedreport.FieldStatus},
			generatedreport.FieldFormat:         {Type: field.TypeEnum, Column: generatedreport.FieldFormat},
			generatedreport.FieldFileURL:        {Type: field.TypeString, Column: generatedreport.FieldFileURL},
			generatedreport.FieldFileSize:       {Type: field.TypeInt, Column: generatedreport.FieldFileSize},
			generatedreport.FieldParameters:     {Type: field.TypeJSON, Column: generatedreport.FieldParameters},
			generatedreport.FieldDeliveryMethod: {Type: field.TypeEnum, Column: generatedreport.FieldDeliveryMethod},
			generatedreport.FieldRecipientEmail: {Type: field.TypeString, Column: generatedreport.FieldRecipientEmail},
			generatedreport.FieldGeneratedAt:    {Type: field.TypeTime, Column: generatedreport.FieldGeneratedAt},
			generatedreport.FieldError:          {Type: field.TypeString, Column: generatedreport.FieldError},
			generatedreport.FieldMetadata:       {Type: field.TypeJSON, Column: generatedreport.FieldMetadata},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   grant.Table,
			Columns: grant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grant.FieldID,
			},
		},
		Type: "Grant",
		Fields: map[string]*sqlgraph.FieldSpec{
			grant.FieldName:              {Type: field.TypeString, Column: grant.FieldName},
			grant.FieldGrantAmount:       {Type: field.TypeFloat64, Column: grant.FieldGrantAmount},
			grant.FieldStartDate:         {Type: field.TypeTime, Column: grant.FieldStartDate},
			grant.FieldEndDate:           {Type: field.TypeTime, Column: grant.FieldEndDate},
			grant.FieldStatus:            {Type: field.TypeEnum, Column: grant.FieldStatus},
			grant.FieldGoals:             {Type: field.TypeJSON, Column: grant.FieldGoals},
			grant.FieldGrantReference:    {Type: field.TypeString, Column: grant.FieldGrantReference},
			grant.FieldContactPerson:     {Type: field.TypeString, Column: grant.FieldContactPerson},
			grant.FieldContactEmail:      {Type: field.TypeString, Column: grant.FieldContactEmail},
			grant.FieldRenewalEligible:   {Type: field.TypeBool, Column: grant.FieldRenewalEligible},
			grant.FieldNextReviewDate:    {Type: field.TypeTime, Column: grant.FieldNextReviewDate},
			grant.FieldRequiresMatching:  {Type: field.TypeBool, Column: grant.FieldRequiresMatching},
			grant.FieldMatchingAmount:    {Type: field.TypeFloat64, Column: grant.FieldMatchingAmount},
			grant.FieldRestrictions:      {Type: field.TypeJSON, Column: grant.FieldRestrictions},
			grant.FieldReportingSchedule: {Type: field.TypeJSON, Column: grant.FieldReportingSchedule},
			grant.FieldCreatedAt:         {Type: field.TypeTime, Column: grant.FieldCreatedAt},
			grant.FieldUpdatedAt:         {Type: field.TypeTime, Column: grant.FieldUpdatedAt},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   grantreport.Table,
			Columns: grantreport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: grantreport.FieldID,
			},
		},
		Type: "GrantReport",
		Fields: map[string]*sqlgraph.FieldSpec{
			grantreport.FieldTitle:         {Type: field.TypeString, Column: grantreport.FieldTitle},
			grantreport.FieldDueDate:       {Type: field.TypeTime, Column: grantreport.FieldDueDate},
			grantreport.FieldSubmittedDate: {Type: field.TypeTime, Column: grantreport.FieldSubmittedDate},
			grantreport.FieldStatus:        {Type: field.TypeEnum, Column: grantreport.FieldStatus},
			grantreport.FieldDocumentURL:   {Type: field.TypeString, Column: grantreport.FieldDocumentURL},
			grantreport.FieldReportType:    {Type: field.TypeString, Column: grantreport.FieldReportType},
			grantreport.FieldReviewedBy:    {Type: field.TypeString, Column: grantreport.FieldReviewedBy},
			grantreport.FieldReviewedAt:    {Type: field.TypeTime, Column: grantreport.FieldReviewedAt},
			grantreport.FieldFeedback:      {Type: field.TypeString, Column: grantreport.FieldFeedback},
			grantreport.FieldIsApproved:    {Type: field.TypeBool, Column: grantreport.FieldIsApproved},
			grantreport.FieldNextDueDate:   {Type: field.TypeTime, Column: grantreport.FieldNextDueDate},
			grantreport.FieldCreatedAt:     {Type: field.TypeTime, Column: grantreport.FieldCreatedAt},
			grantreport.FieldUpdatedAt:     {Type: field.TypeTime, Column: grantreport.FieldUpdatedAt},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   impactdatapoint.Table,
			Columns: impactdatapoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: impactdatapoint.FieldID,
			},
		},
		Type: "ImpactDataPoint",
		Fields: map[string]*sqlgraph.FieldSpec{
			impactdatapoint.FieldValue:      {Type: field.TypeFloat64, Column: impactdatapoint.FieldValue},
			impactdatapoint.FieldRecordedAt: {Type: field.TypeTime, Column: impactdatapoint.FieldRecordedAt},
			impactdatapoint.FieldRecordedBy: {Type: field.TypeString, Column: impactdatapoint.FieldRecordedBy},
			impactdatapoint.FieldPeriod:     {Type: field.TypeString, Column: impactdatapoint.FieldPeriod},
			impactdatapoint.FieldNotes:      {Type: field.TypeString, Column: impactdatapoint.FieldNotes},
			impactdatapoint.FieldSource:     {Type: field.TypeString, Column: impactdatapoint.FieldSource},
			impactdatapoint.FieldIsVerified: {Type: field.TypeBool, Column: impactdatapoint.FieldIsVerified},
			impactdatapoint.FieldVerifiedBy: {Type: field.TypeString, Column: impactdatapoint.FieldVerifiedBy},
			impactdatapoint.FieldVerifiedAt: {Type: field.TypeTime, Column: impactdatapoint.FieldVerifiedAt},
			impactdatapoint.FieldCreatedAt:  {Type: field.TypeTime, Column: impactdatapoint.FieldCreatedAt},
			impactdatapoint.FieldUpdatedAt:  {Type: field.TypeTime, Column: impactdatapoint.FieldUpdatedAt},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   impactmetric.Table,
			Columns: impactmetric.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: impactmetric.FieldID,
			},
		},
		Type: "ImpactMetric",
		Fields: map[string]*sqlgraph.FieldSpec{
			impactmetric.FieldName:              {Type: field.TypeJSON, Column: impactmetric.FieldName},
			impactmetric.FieldType:              {Type: field.TypeEnum, Column: impactmetric.FieldType},
			impactmetric.FieldUnit:              {Type: field.TypeString, Column: impactmetric.FieldUnit},
			impactmetric.FieldTargetValue:       {Type: field.TypeFloat64, Column: impactmetric.FieldTargetValue},
			impactmetric.FieldCurrentValue:      {Type: field.TypeFloat64, Column: impactmetric.FieldCurrentValue},
			impactmetric.FieldTargetDate:        {Type: field.TypeTime, Column: impactmetric.FieldTargetDate},
			impactmetric.FieldCalculationMethod: {Type: field.TypeString, Column: impactmetric.FieldCalculationMethod},
			impactmetric.FieldIsAutoCalculated:  {Type: field.TypeBool, Column: impactmetric.FieldIsAutoCalculated},
			impactmetric.FieldLastCalculated:    {Type: field.TypeTime, Column: impactmetric.FieldLastCalculated},
			impactmetric.FieldDisplayOrder:      {Type: field.TypeInt, Column: impactmetric.FieldDisplayOrder},
			impactmetric.FieldIsPublic:          {Type: field.TypeBool, Column: impactmetric.FieldIsPublic},
			impactmetric.FieldShowOnDashboard:   {Type: field.TypeBool, Column: impactmetric.FieldShowOnDashboard},
			impactmetric.FieldCreatedAt:         {Type: field.TypeTime, Column: impactmetric.FieldCreatedAt},
			impactmetric.FieldUpdatedAt:         {Type: field.TypeTime, Column: impactmetric.FieldUpdatedAt},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
		Type: "Job",
		Fields: map[string]*sqlgraph.FieldSpec{
			job.FieldType:         {Type: field.TypeString, Column: job.FieldType},
			job.FieldStatus:       {Type: field.TypeEnum, Column: job.FieldStatus},
			job.FieldPayload:      {Type: field.TypeJSON, Column: job.FieldPayload},
			job.FieldResult:       {Type: field.TypeJSON, Column: job.FieldResult},
			job.FieldError:        {Type: field.TypeString, Column: job.FieldError},
			job.FieldInngestRunID: {Type: field.TypeString, Column: job.FieldInngestRunID},
			job.FieldScheduledFor: {Type: field.TypeTime, Column: job.FieldScheduledFor},
			job.FieldPriority:     {Type: field.TypeInt, Column: job.FieldPriority},
			job.FieldMaxRetries:   {Type: field.TypeInt, Column: job.FieldMaxRetries},
			job.FieldCreatedAt:    {Type: field.TypeTime, Column: job.FieldCreatedAt},
			job.FieldUpdatedAt:    {Type: field.TypeTime, Column: job.FieldUpdatedAt},
			job.FieldStartedAt:    {Type: field.TypeTime, Column: job.FieldStartedAt},
			job.FieldCompletedAt:  {Type: field.TypeTime, Column: job.FieldCompletedAt},
			job.FieldMetadata:     {Type: field.TypeJSON, Column: job.FieldMetadata},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   joblog.Table,
			Columns: joblog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: joblog.FieldID,
			},
		},
		Type: "JobLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			joblog.FieldStatus:    {Type: field.TypeEnum, Column: joblog.FieldStatus},
			joblog.FieldMessage:   {Type: field.TypeString, Column: joblog.FieldMessage},
			joblog.FieldMetadata:  {Type: field.TypeJSON, Column: joblog.FieldMetadata},
			joblog.FieldCreatedAt: {Type: field.TypeTime, Column: joblog.FieldCreatedAt},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mentorshiprequest.Table,
			Columns: mentorshiprequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mentorshiprequest.FieldID,
			},
		},
		Type: "MentorshipRequest",
		Fields: map[string]*sqlgraph.FieldSpec{
			mentorshiprequest.FieldStatus:            {Type: field.TypeEnum, Column: mentorshiprequest.FieldStatus},
			mentorshiprequest.FieldGoals:             {Type: field.TypeJSON, Column: mentorshiprequest.FieldGoals},
			mentorshiprequest.FieldPreferences:       {Type: field.TypeJSON, Column: mentorshiprequest.FieldPreferences},
			mentorshiprequest.FieldDuration:          {Type: field.TypeString, Column: mentorshiprequest.FieldDuration},
			mentorshiprequest.FieldMatchedAt:         {Type: field.TypeTime, Column: mentorshiprequest.FieldMatchedAt},
			mentorshiprequest.FieldMatchedBy:         {Type: field.TypeString, Column: mentorshiprequest.FieldMatchedBy},
			mentorshiprequest.FieldMatchReason:       {Type: field.TypeString, Column: mentorshiprequest.FieldMatchReason},
			mentorshiprequest.FieldSessionsCompleted: {Type: field.TypeInt, Column: mentorshiprequest.FieldSessionsCompleted},
			mentorshiprequest.FieldLastSessionDate:   {Type: field.TypeTime, Column: mentorshiprequest.FieldLastSessionDate},
			mentorshiprequest.FieldNextSessionDate:   {Type: field.TypeTime, Column: mentorshiprequest.FieldNextSessionDate},
			mentorshiprequest.FieldCompletionNotes:   {Type: field.TypeString, Column: mentorshiprequest.FieldCompletionNotes},
			mentorshiprequest.FieldCreatedAt:         {Type: field.TypeTime, Column: mentorshiprequest.FieldCreatedAt},
			mentorshiprequest.FieldUpdatedAt:         {Type: field.TypeTime, Column: mentorshiprequest.FieldUpdatedAt},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mentorshipsession.Table,
			Columns: mentorshipsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mentorshipsession.FieldID,
			},
		},
		Type: "MentorshipSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			mentorshipsession.FieldScheduledAt:    {Type: field.TypeTime, Column: mentorshipsession.FieldScheduledAt},
			mentorshipsession.FieldDuration:       {Type: field.TypeInt, Column: mentorshipsession.FieldDuration},
			mentorshipsession.FieldFormat:         {Type: field.TypeString, Column: mentorshipsession.FieldFormat},
			mentorshipsession.FieldStatus:         {Type: field.TypeString, Column: mentorshipsession.FieldStatus},
			mentorshipsession.FieldNotes:          {Type: field.TypeString, Column: mentorshipsession.FieldNotes},
			mentorshipsession.FieldActionItems:    {Type: field.TypeJSON, Column: mentorshipsession.FieldActionItems},
			mentorshipsession.FieldMentorRating:   {Type: field.TypeInt, Column: mentorshipsession.FieldMentorRating},
			mentorshipsession.FieldMenteeRating:   {Type: field.TypeInt, Column: mentorshipsession.FieldMenteeRating},
			mentorshipsession.FieldMentorFeedback: {Type: field.TypeString, Column: mentorshipsession.FieldMentorFeedback},
			mentorshipsession.FieldMenteeFeedback: {Type: field.TypeString, Column: mentorshipsession.FieldMenteeFeedback},
			mentorshipsession.FieldCreatedAt:      {Type: field.TypeTime, Column: mentorshipsession.FieldCreatedAt},
			mentorshipsession.FieldUpdatedAt:      {Type: field.TypeTime, Column: mentorshipsession.FieldUpdatedAt},
		},
	}
	graph.Nodes[57] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
		Type: "Message",
		Fields: map[string]*sqlgraph.FieldSpec{
			message.FieldContent:   {Type: field.TypeString, Column: message.FieldContent},
			message.FieldCreatedAt: {Type: field.TypeTime, Column: message.FieldCreatedAt},
		},
	}
	graph.Nodes[58] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   newsarticle.Table,
			Columns: newsarticle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newsarticle.FieldID,
			},
		},
		Type: "NewsArticle",
		Fields: map[string]*sqlgraph.FieldSpec{
			newsarticle.FieldSlug:             {Type: field.TypeString, Column: newsarticle.FieldSlug},
			newsarticle.FieldTitle:            {Type: field.TypeJSON, Column: newsarticle.FieldTitle},
			newsarticle.FieldContent:          {Type: field.TypeJSON, Column: newsarticle.FieldContent},
			newsarticle.FieldExcerpt:          {Type: field.TypeJSON, Column: newsarticle.FieldExcerpt},
			newsarticle.FieldFeaturedImageURL: {Type: field.TypeString, Column: newsarticle.FieldFeaturedImageURL},
			newsarticle.FieldStatus:           {Type: field.TypeEnum, Column: newsarticle.FieldStatus},
			newsarticle.FieldPublishedAt:      {Type: field.TypeTime, Column: newsarticle.FieldPublishedAt},
			newsarticle.FieldCreatedAt:        {Type: field.TypeTime, Column: newsarticle.FieldCreatedAt},
			newsarticle.FieldUpdatedAt:        {Type: field.TypeTime, Column: newsarticle.FieldUpdatedAt},
		},
	}
	graph.Nodes[59] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldName:         {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldWebsite:      {Type: field.TypeString, Column: organization.FieldWebsite},
			organization.FieldLogoURL:      {Type: field.TypeString, Column: organization.FieldLogoURL},
			organization.FieldDescription:  {Type: field.TypeString, Column: organization.FieldDescription},
			organization.FieldIndustry:     {Type: field.TypeString, Column: organization.FieldIndustry},
			organization.FieldSize:         {Type: field.TypeString, Column: organization.FieldSize},
			organization.FieldContactEmail: {Type: field.TypeString, Column: organization.FieldContactEmail},
			organization.FieldContactPhone: {Type: field.TypeString, Column: organization.FieldContactPhone},
			organization.FieldAddress:      {Type: field.TypeJSON, Column: organization.FieldAddress},
			organization.FieldCreatedAt:    {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:    {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
		},
	}
	graph.Nodes[60] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   page.Table,
			Columns: page.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: page.FieldID,
			},
		},
		Type: "Page",
		Fields: map[string]*sqlgraph.FieldSpec{
			page.FieldSlug:        {Type: field.TypeString, Column: page.FieldSlug},
			page.FieldTitle:       {Type: field.TypeJSON, Column: page.FieldTitle},
			page.FieldStatus:      {Type: field.TypeEnum, Column: page.FieldStatus},
			page.FieldPublishedAt: {Type: field.TypeTime, Column: page.FieldPublishedAt},
			page.FieldLayout:      {Type: field.TypeString, Column: page.FieldLayout},
			page.FieldIsHomepage:  {Type: field.TypeBool, Column: page.FieldIsHomepage},
			page.FieldCreatedAt:   {Type: field.TypeTime, Column: page.FieldCreatedAt},
			page.FieldUpdatedAt:   {Type: field.TypeTime, Column: page.FieldUpdatedAt},
		},
	}
	graph.Nodes[61] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   partnerlogoitem.Table,
			Columns: partnerlogoitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partnerlogoitem.FieldID,
			},
		},
		Type: "PartnerLogoItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			partnerlogoitem.FieldOrder:   {Type: field.TypeInt, Column: partnerlogoitem.FieldOrder},
			partnerlogoitem.FieldName:    {Type: field.TypeString, Column: partnerlogoitem.FieldName},
			partnerlogoitem.FieldLogoURL: {Type: field.TypeString, Column: partnerlogoitem.FieldLogoURL},
			partnerlogoitem.FieldWebsite: {Type: field.TypeString, Column: partnerlogoitem.FieldWebsite},
		},
	}
	graph.Nodes[62] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   partnership.Table,
			Columns: partnership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partnership.FieldID,
			},
		},
		Type: "Partnership",
		Fields: map[string]*sqlgraph.FieldSpec{
			partnership.FieldSlug:         {Type: field.TypeString, Column: partnership.FieldSlug},
			partnership.FieldName:         {Type: field.TypeJSON, Column: partnership.FieldName},
			partnership.FieldType:         {Type: field.TypeEnum, Column: partnership.FieldType},
			partnership.FieldStatus:       {Type: field.TypeEnum, Column: partnership.FieldStatus},
			partnership.FieldDescription:  {Type: field.TypeJSON, Column: partnership.FieldDescription},
			partnership.FieldValue:        {Type: field.TypeFloat64, Column: partnership.FieldValue},
			partnership.FieldCurrency:     {Type: field.TypeString, Column: partnership.FieldCurrency},
			partnership.FieldStartDate:    {Type: field.TypeTime, Column: partnership.FieldStartDate},
			partnership.FieldEndDate:      {Type: field.TypeTime, Column: partnership.FieldEndDate},
			partnership.FieldRenewalDate:  {Type: field.TypeTime, Column: partnership.FieldRenewalDate},
			partnership.FieldBenefits:     {Type: field.TypeJSON, Column: partnership.FieldBenefits},
			partnership.FieldDeliverables: {Type: field.TypeJSON, Column: partnership.FieldDeliverables},
			partnership.FieldRequirements: {Type: field.TypeJSON, Column: partnership.FieldRequirements},
			partnership.FieldLastContact:  {Type: field.TypeTime, Column: partnership.FieldLastContact},
			partnership.FieldNextFollowUp: {Type: field.TypeTime, Column: partnership.FieldNextFollowUp},
			partnership.FieldCreatedAt:    {Type: field.TypeTime, Column: partnership.FieldCreatedAt},
			partnership.FieldUpdatedAt:    {Type: field.TypeTime, Column: partnership.FieldUpdatedAt},
		},
	}
	graph.Nodes[63] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   partnershipinteraction.Table,
			Columns: partnershipinteraction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partnershipinteraction.FieldID,
			},
		},
		Type: "PartnershipInteraction",
		Fields: map[string]*sqlgraph.FieldSpec{
			partnershipinteraction.FieldInteractionType:  {Type: field.TypeString, Column: partnershipinteraction.FieldInteractionType},
			partnershipinteraction.FieldSubject:          {Type: field.TypeString, Column: partnershipinteraction.FieldSubject},
			partnershipinteraction.FieldSummary:          {Type: field.TypeString, Column: partnershipinteraction.FieldSummary},
			partnershipinteraction.FieldInteractedAt:     {Type: field.TypeTime, Column: partnershipinteraction.FieldInteractedAt},
			partnershipinteraction.FieldAttendees:        {Type: field.TypeJSON, Column: partnershipinteraction.FieldAttendees},
			partnershipinteraction.FieldFollowUpRequired: {Type: field.TypeBool, Column: partnershipinteraction.FieldFollowUpRequired},
			partnershipinteraction.FieldFollowUpDate:     {Type: field.TypeTime, Column: partnershipinteraction.FieldFollowUpDate},
			partnershipinteraction.FieldCreatedAt:        {Type: field.TypeTime, Column: partnershipinteraction.FieldCreatedAt},
			partnershipinteraction.FieldUpdatedAt:        {Type: field.TypeTime, Column: partnershipinteraction.FieldUpdatedAt},
		},
	}
	graph.Nodes[64] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   partnershiprenewal.Table,
			Columns: partnershiprenewal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partnershiprenewal.FieldID,
			},
		},
		Type: "PartnershipRenewal",
		Fields: map[string]*sqlgraph.FieldSpec{
			partnershiprenewal.FieldPreviousEndDate: {Type: field.TypeTime, Column: partnershiprenewal.FieldPreviousEndDate},
			partnershiprenewal.FieldNewEndDate:      {Type: field.TypeTime, Column: partnershiprenewal.FieldNewEndDate},
			partnershiprenewal.FieldRenewalValue:    {Type: field.TypeFloat64, Column: partnershiprenewal.FieldRenewalValue},
			partnershiprenewal.FieldRenewalTerms:    {Type: field.TypeJSON, Column: partnershiprenewal.FieldRenewalTerms},
			partnershiprenewal.FieldNegotiatedBy:    {Type: field.TypeString, Column: partnershiprenewal.FieldNegotiatedBy},
			partnershiprenewal.FieldApprovedBy:      {Type: field.TypeString, Column: partnershiprenewal.FieldApprovedBy},
			partnershiprenewal.FieldApprovedAt:      {Type: field.TypeTime, Column: partnershiprenewal.FieldApprovedAt},
			partnershiprenewal.FieldCreatedAt:       {Type: field.TypeTime, Column: partnershiprenewal.FieldCreatedAt},
			partnershiprenewal.FieldUpdatedAt:       {Type: field.TypeTime, Column: partnershiprenewal.FieldUpdatedAt},
		},
	}
	graph.Nodes[65] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   partnershipreport.Table,
			Columns: partnershipreport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partnershipreport.FieldID,
			},
		},
		Type: "PartnershipReport",
		Fields: map[string]*sqlgraph.FieldSpec{
			partnershipreport.FieldReportPeriod:    {Type: field.TypeString, Column: partnershipreport.FieldReportPeriod},
			partnershipreport.FieldGeneratedAt:     {Type: field.TypeTime, Column: partnershipreport.FieldGeneratedAt},
			partnershipreport.FieldGeneratedBy:     {Type: field.TypeString, Column: partnershipreport.FieldGeneratedBy},
			partnershipreport.FieldImpactMetrics:   {Type: field.TypeJSON, Column: partnershipreport.FieldImpactMetrics},
			partnershipreport.FieldOutcomes:        {Type: field.TypeJSON, Column: partnershipreport.FieldOutcomes},
			partnershipreport.FieldFeedback:        {Type: field.TypeJSON, Column: partnershipreport.FieldFeedback},
			partnershipreport.FieldReportURL:       {Type: field.TypeString, Column: partnershipreport.FieldReportURL},
			partnershipreport.FieldPresentationURL: {Type: field.TypeString, Column: partnershipreport.FieldPresentationURL},
			partnershipreport.FieldCreatedAt:       {Type: field.TypeTime, Column: partnershipreport.FieldCreatedAt},
			partnershipreport.FieldUpdatedAt:       {Type: field.TypeTime, Column: partnershipreport.FieldUpdatedAt},
		},
	}
	graph.Nodes[66] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   passwordhistory.Table,
			Columns: passwordhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: passwordhistory.FieldID,
			},
		},
		Type: "PasswordHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			passwordhistory.FieldHashedPassword: {Type: field.TypeString, Column: passwordhistory.FieldHashedPassword},
			passwordhistory.FieldCreatedAt:      {Type: field.TypeTime, Column: passwordhistory.FieldCreatedAt},
		},
	}
	graph.Nodes[67] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldResource: {Type: field.TypeString, Column: permission.FieldResource},
			permission.FieldAction:   {Type: field.TypeString, Column: permission.FieldAction},
		},
	}
	graph.Nodes[68] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   program.Table,
			Columns: program.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: program.FieldID,
			},
		},
		Type: "Program",
		Fields: map[string]*sqlgraph.FieldSpec{
			program.FieldSlug:                {Type: field.TypeString, Column: program.FieldSlug},
			program.FieldName:                {Type: field.TypeJSON, Column: program.FieldName},
			program.FieldDescription:         {Type: field.TypeJSON, Column: program.FieldDescription},
			program.FieldTagline:             {Type: field.TypeJSON, Column: program.FieldTagline},
			program.FieldStatus:              {Type: field.TypeEnum, Column: program.FieldStatus},
			program.FieldStartDate:           {Type: field.TypeTime, Column: program.FieldStartDate},
			program.FieldEndDate:             {Type: field.TypeTime, Column: program.FieldEndDate},
			program.FieldHeroImageURL:        {Type: field.TypeString, Column: program.FieldHeroImageURL},
			program.FieldThumbnailURL:        {Type: field.TypeString, Column: program.FieldThumbnailURL},
			program.FieldVideoThumbnailURL:   {Type: field.TypeString, Column: program.FieldVideoThumbnailURL},
			program.FieldMediaGallery:        {Type: field.TypeJSON, Column: program.FieldMediaGallery},
			program.FieldTags:                {Type: field.TypeJSON, Column: program.FieldTags},
			program.FieldMetrics:             {Type: field.TypeJSON, Column: program.FieldMetrics},
			program.FieldCurriculum:          {Type: field.TypeJSON, Column: program.FieldCurriculum},
			program.FieldEligibilityCriteria: {Type: field.TypeJSON, Column: program.FieldEligibilityCriteria},
			program.FieldApplicationSteps:    {Type: field.TypeJSON, Column: program.FieldApplicationSteps},
			program.FieldDuration:            {Type: field.TypeString, Column: program.FieldDuration},
			program.FieldCapacity:            {Type: field.TypeInt, Column: program.FieldCapacity},
			program.FieldApplicationDeadline: {Type: field.TypeTime, Column: program.FieldApplicationDeadline},
			program.FieldRequirements:        {Type: field.TypeJSON, Column: program.FieldRequirements},
			program.FieldMinAge:              {Type: field.TypeInt, Column: program.FieldMinAge},
			program.FieldMaxAge:              {Type: field.TypeInt, Column: program.FieldMaxAge},
			program.FieldRequiredDocs:        {Type: field.TypeJSON, Column: program.FieldRequiredDocs},
			program.FieldCost:                {Type: field.TypeFloat64, Column: program.FieldCost},
			program.FieldCurrency:            {Type: field.TypeString, Column: program.FieldCurrency},
			program.FieldRules:               {Type: field.TypeJSON, Column: program.FieldRules},
			program.FieldSteps:               {Type: field.TypeJSON, Column: program.FieldSteps},
			program.FieldRequiredSkills:      {Type: field.TypeJSON, Column: program.FieldRequiredSkills},
			program.FieldCreatedAt:           {Type: field.TypeTime, Column: program.FieldCreatedAt},
			program.FieldUpdatedAt:           {Type: field.TypeTime, Column: program.FieldUpdatedAt},
		},
	}
	graph.Nodes[69] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programcarditem.Table,
			Columns: programcarditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: programcarditem.FieldID,
			},
		},
		Type: "ProgramCardItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			programcarditem.FieldOrder: {Type: field.TypeInt, Column: programcarditem.FieldOrder},
		},
	}
	graph.Nodes[70] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programcategory.Table,
			Columns: programcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: programcategory.FieldID,
			},
		},
		Type: "ProgramCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			programcategory.FieldSlug:         {Type: field.TypeString, Column: programcategory.FieldSlug},
			programcategory.FieldName:         {Type: field.TypeJSON, Column: programcategory.FieldName},
			programcategory.FieldDescription:  {Type: field.TypeJSON, Column: programcategory.FieldDescription},
			programcategory.FieldIconName:     {Type: field.TypeString, Column: programcategory.FieldIconName},
			programcategory.FieldDisplayOrder: {Type: field.TypeInt, Column: programcategory.FieldDisplayOrder},
			programcategory.FieldColor:        {Type: field.TypeString, Column: programcategory.FieldColor},
			programcategory.FieldHeroImageURL: {Type: field.TypeString, Column: programcategory.FieldHeroImageURL},
			programcategory.FieldCreatedAt:    {Type: field.TypeTime, Column: programcategory.FieldCreatedAt},
			programcategory.FieldUpdatedAt:    {Type: field.TypeTime, Column: programcategory.FieldUpdatedAt},
		},
	}
	graph.Nodes[71] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programenrolment.Table,
			Columns: programenrolment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: programenrolment.FieldID,
			},
		},
		Type: "ProgramEnrolment",
		Fields: map[string]*sqlgraph.FieldSpec{
			programenrolment.FieldStatus:    {Type: field.TypeEnum, Column: programenrolment.FieldStatus},
			programenrolment.FieldAnswers:   {Type: field.TypeJSON, Column: programenrolment.FieldAnswers},
			programenrolment.FieldCreatedAt: {Type: field.TypeTime, Column: programenrolment.FieldCreatedAt},
			programenrolment.FieldUpdatedAt: {Type: field.TypeTime, Column: programenrolment.FieldUpdatedAt},
		},
	}
	graph.Nodes[72] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   programparticipant.Table,
			Columns: programparticipant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: programparticipant.FieldID,
			},
		},
		Type: "ProgramParticipant",
		Fields: map[string]*sqlgraph.FieldSpec{
			programparticipant.FieldStatus:         {Type: field.TypeString, Column: programparticipant.FieldStatus},
			programparticipant.FieldEnrollmentDate: {Type: field.TypeTime, Column: programparticipant.FieldEnrollmentDate},
			programparticipant.FieldCompletionDate: {Type: field.TypeTime, Column: programparticipant.FieldCompletionDate},
			programparticipant.FieldOutcomes:       {Type: field.TypeJSON, Column: programparticipant.FieldOutcomes},
			programparticipant.FieldNotes:          {Type: field.TypeString, Column: programparticipant.FieldNotes},
			programparticipant.FieldCreatedAt:      {Type: field.TypeTime, Column: programparticipant.FieldCreatedAt},
			programparticipant.FieldUpdatedAt:      {Type: field.TypeTime, Column: programparticipant.FieldUpdatedAt},
		},
	}
	graph.Nodes[73] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reportdefinition.Table,
			Columns: reportdefinition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportdefinition.FieldID,
			},
		},
		Type: "ReportDefinition",
		Fields: map[string]*sqlgraph.FieldSpec{
			reportdefinition.FieldName:        {Type: field.TypeString, Column: reportdefinition.FieldName},
			reportdefinition.FieldSlug:        {Type: field.TypeString, Column: reportdefinition.FieldSlug},
			reportdefinition.FieldType:        {Type: field.TypeEnum, Column: reportdefinition.FieldType},
			reportdefinition.FieldDescription: {Type: field.TypeString, Column: reportdefinition.FieldDescription},
			reportdefinition.FieldQuery:       {Type: field.TypeJSON, Column: reportdefinition.FieldQuery},
			reportdefinition.FieldParameters:  {Type: field.TypeJSON, Column: reportdefinition.FieldParameters},
			reportdefinition.FieldIsPublic:    {Type: field.TypeBool, Column: reportdefinition.FieldIsPublic},
			reportdefinition.FieldCreatedAt:   {Type: field.TypeTime, Column: reportdefinition.FieldCreatedAt},
			reportdefinition.FieldUpdatedAt:   {Type: field.TypeTime, Column: reportdefinition.FieldUpdatedAt},
		},
	}
	graph.Nodes[74] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reportpermission.Table,
			Columns: reportpermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reportpermission.FieldID,
			},
		},
		Type: "ReportPermission",
		Fields: map[string]*sqlgraph.FieldSpec{
			reportpermission.FieldRoleID:      {Type: field.TypeString, Column: reportpermission.FieldRoleID},
			reportpermission.FieldCanView:     {Type: field.TypeBool, Column: reportpermission.FieldCanView},
			reportpermission.FieldCanEdit:     {Type: field.TypeBool, Column: reportpermission.FieldCanEdit},
			reportpermission.FieldCanDelete:   {Type: field.TypeBool, Column: reportpermission.FieldCanDelete},
			reportpermission.FieldCanSchedule: {Type: field.TypeBool, Column: reportpermission.FieldCanSchedule},
			reportpermission.FieldCreatedAt:   {Type: field.TypeTime, Column: reportpermission.FieldCreatedAt},
		},
	}
	graph.Nodes[75] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rolepermission.Table,
			Columns: rolepermission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolepermission.FieldID,
			},
		},
		Type: "RolePermission",
		Fields: map[string]*sqlgraph.FieldSpec{
			rolepermission.FieldRole: {Type: field.TypeEnum, Column: rolepermission.FieldRole},
		},
	}
	graph.Nodes[76] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scheduledreport.Table,
			Columns: scheduledreport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scheduledreport.FieldID,
			},
		},
		Type: "ScheduledReport",
		Fields: map[string]*sqlgraph.FieldSpec{
			scheduledreport.FieldFrequency:  {Type: field.TypeString, Column: scheduledreport.FieldFrequency},
			scheduledreport.FieldDayOfWeek:  {Type: field.TypeInt, Column: scheduledreport.FieldDayOfWeek},
			scheduledreport.FieldDayOfMonth: {Type: field.TypeInt, Column: scheduledreport.FieldDayOfMonth},
			scheduledreport.FieldTime:       {Type: field.TypeString, Column: scheduledreport.FieldTime},
			scheduledreport.FieldTimezone:   {Type: field.TypeString, Column: scheduledreport.FieldTimezone},
			scheduledreport.FieldRecipients: {Type: field.TypeJSON, Column: scheduledreport.FieldRecipients},
			scheduledreport.FieldFormat:     {Type: field.TypeEnum, Column: scheduledreport.FieldFormat},
			scheduledreport.FieldParameters: {Type: field.TypeJSON, Column: scheduledreport.FieldParameters},
			scheduledreport.FieldIsActive:   {Type: field.TypeBool, Column: scheduledreport.FieldIsActive},
			scheduledreport.FieldLastRunAt:  {Type: field.TypeTime, Column: scheduledreport.FieldLastRunAt},
			scheduledreport.FieldNextRunAt:  {Type: field.TypeTime, Column: scheduledreport.FieldNextRunAt},
			scheduledreport.FieldCreatedAt:  {Type: field.TypeTime, Column: scheduledreport.FieldCreatedAt},
			scheduledreport.FieldUpdatedAt:  {Type: field.TypeTime, Column: scheduledreport.FieldUpdatedAt},
		},
	}
	graph.Nodes[77] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   seoconfig.Table,
			Columns: seoconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: seoconfig.FieldID,
			},
		},
		Type: "SeoConfig",
		Fields: map[string]*sqlgraph.FieldSpec{
			seoconfig.FieldMetaTitle:          {Type: field.TypeJSON, Column: seoconfig.FieldMetaTitle},
			seoconfig.FieldMetaDescription:    {Type: field.TypeJSON, Column: seoconfig.FieldMetaDescription},
			seoconfig.FieldKeywords:           {Type: field.TypeJSON, Column: seoconfig.FieldKeywords},
			seoconfig.FieldOgTitle:            {Type: field.TypeJSON, Column: seoconfig.FieldOgTitle},
			seoconfig.FieldOgDescription:      {Type: field.TypeJSON, Column: seoconfig.FieldOgDescription},
			seoconfig.FieldOgImageURL:         {Type: field.TypeString, Column: seoconfig.FieldOgImageURL},
			seoconfig.FieldOgType:             {Type: field.TypeString, Column: seoconfig.FieldOgType},
			seoconfig.FieldTwitterCard:        {Type: field.TypeString, Column: seoconfig.FieldTwitterCard},
			seoconfig.FieldTwitterTitle:       {Type: field.TypeJSON, Column: seoconfig.FieldTwitterTitle},
			seoconfig.FieldTwitterDescription: {Type: field.TypeJSON, Column: seoconfig.FieldTwitterDescription},
			seoconfig.FieldTwitterImageURL:    {Type: field.TypeString, Column: seoconfig.FieldTwitterImageURL},
			seoconfig.FieldCanonicalURL:       {Type: field.TypeString, Column: seoconfig.FieldCanonicalURL},
			seoconfig.FieldNoindex:            {Type: field.TypeBool, Column: seoconfig.FieldNoindex},
			seoconfig.FieldNofollow:           {Type: field.TypeBool, Column: seoconfig.FieldNofollow},
			seoconfig.FieldStructuredData:     {Type: field.TypeJSON, Column: seoconfig.FieldStructuredData},
			seoconfig.FieldUpdatedAt:          {Type: field.TypeTime, Column: seoconfig.FieldUpdatedAt},
		},
	}
	graph.Nodes[78] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sitevisit.Table,
			Columns: sitevisit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sitevisit.FieldID,
			},
		},
		Type: "SiteVisit",
		Fields: map[string]*sqlgraph.FieldSpec{
			sitevisit.FieldRequestedDate: {Type: field.TypeTime, Column: sitevisit.FieldRequestedDate},
			sitevisit.FieldScheduledDate: {Type: field.TypeTime, Column: sitevisit.FieldScheduledDate},
			sitevisit.FieldStatus:        {Type: field.TypeString, Column: sitevisit.FieldStatus},
			sitevisit.FieldNotes:         {Type: field.TypeString, Column: sitevisit.FieldNotes},
		},
	}
	graph.Nodes[79] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   skill.Table,
			Columns: skill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skill.FieldID,
			},
		},
		Type: "Skill",
		Fields: map[string]*sqlgraph.FieldSpec{
			skill.FieldKey:      {Type: field.TypeString, Column: skill.FieldKey},
			skill.FieldName:     {Type: field.TypeJSON, Column: skill.FieldName},
			skill.FieldCategory: {Type: field.TypeEnum, Column: skill.FieldCategory},
		},
	}
	graph.Nodes[80] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   statitem.Table,
			Columns: statitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statitem.FieldID,
			},
		},
		Type: "StatItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			statitem.FieldOrder:       {Type: field.TypeInt, Column: statitem.FieldOrder},
			statitem.FieldValue:       {Type: field.TypeString, Column: statitem.FieldValue},
			statitem.FieldLabel:       {Type: field.TypeJSON, Column: statitem.FieldLabel},
			statitem.FieldDescription: {Type: field.TypeJSON, Column: statitem.FieldDescription},
			statitem.FieldIconName:    {Type: field.TypeString, Column: statitem.FieldIconName},
			statitem.FieldColor:       {Type: field.TypeString, Column: statitem.FieldColor},
		},
	}
	graph.Nodes[81] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   successstory.Table,
			Columns: successstory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: successstory.FieldID,
			},
		},
		Type: "SuccessStory",
		Fields: map[string]*sqlgraph.FieldSpec{
			successstory.FieldSlug:        {Type: field.TypeString, Column: successstory.FieldSlug},
			successstory.FieldTitle:       {Type: field.TypeJSON, Column: successstory.FieldTitle},
			successstory.FieldExcerpt:     {Type: field.TypeJSON, Column: successstory.FieldExcerpt},
			successstory.FieldContent:     {Type: field.TypeJSON, Column: successstory.FieldContent},
			successstory.FieldQuote:       {Type: field.TypeString, Column: successstory.FieldQuote},
			successstory.FieldStatus:      {Type: field.TypeEnum, Column: successstory.FieldStatus},
			successstory.FieldPublishedAt: {Type: field.TypeTime, Column: successstory.FieldPublishedAt},
			successstory.FieldImageURL:    {Type: field.TypeString, Column: successstory.FieldImageURL},
			successstory.FieldCreatedAt:   {Type: field.TypeTime, Column: successstory.FieldCreatedAt},
			successstory.FieldUpdatedAt:   {Type: field.TypeTime, Column: successstory.FieldUpdatedAt},
		},
	}
	graph.Nodes[82] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemerror.Table,
			Columns: systemerror.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemerror.FieldID,
			},
		},
		Type: "SystemError",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemerror.FieldTimestamp:  {Type: field.TypeTime, Column: systemerror.FieldTimestamp},
			systemerror.FieldMessage:    {Type: field.TypeString, Column: systemerror.FieldMessage},
			systemerror.FieldName:       {Type: field.TypeString, Column: systemerror.FieldName},
			systemerror.FieldStack:      {Type: field.TypeString, Column: systemerror.FieldStack},
			systemerror.FieldMetadata:   {Type: field.TypeJSON, Column: systemerror.FieldMetadata},
			systemerror.FieldUserID:     {Type: field.TypeString, Column: systemerror.FieldUserID},
			systemerror.FieldContext:    {Type: field.TypeString, Column: systemerror.FieldContext},
			systemerror.FieldIsResolved: {Type: field.TypeBool, Column: systemerror.FieldIsResolved},
			systemerror.FieldResolvedAt: {Type: field.TypeTime, Column: systemerror.FieldResolvedAt},
			systemerror.FieldResolvedBy: {Type: field.TypeString, Column: systemerror.FieldResolvedBy},
		},
	}
	graph.Nodes[83] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemlog.Table,
			Columns: systemlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemlog.FieldID,
			},
		},
		Type: "SystemLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemlog.FieldTimestamp: {Type: field.TypeTime, Column: systemlog.FieldTimestamp},
			systemlog.FieldLevel:     {Type: field.TypeEnum, Column: systemlog.FieldLevel},
			systemlog.FieldMessage:   {Type: field.TypeString, Column: systemlog.FieldMessage},
			systemlog.FieldMetadata:  {Type: field.TypeJSON, Column: systemlog.FieldMetadata},
			systemlog.FieldUserID:    {Type: field.TypeString, Column: systemlog.FieldUserID},
			systemlog.FieldContext:   {Type: field.TypeString, Column: systemlog.FieldContext},
		},
	}
	graph.Nodes[84] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tabitem.Table,
			Columns: tabitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tabitem.FieldID,
			},
		},
		Type: "TabItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			tabitem.FieldOrder:     {Type: field.TypeInt, Column: tabitem.FieldOrder},
			tabitem.FieldTitle:     {Type: field.TypeJSON, Column: tabitem.FieldTitle},
			tabitem.FieldContent:   {Type: field.TypeJSON, Column: tabitem.FieldContent},
			tabitem.FieldCreatedAt: {Type: field.TypeTime, Column: tabitem.FieldCreatedAt},
			tabitem.FieldUpdatedAt: {Type: field.TypeTime, Column: tabitem.FieldUpdatedAt},
		},
	}
	graph.Nodes[85] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   teammember.Table,
			Columns: teammember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teammember.FieldID,
			},
		},
		Type: "TeamMember",
		Fields: map[string]*sqlgraph.FieldSpec{
			teammember.FieldName:         {Type: field.TypeString, Column: teammember.FieldName},
			teammember.FieldTitle:        {Type: field.TypeJSON, Column: teammember.FieldTitle},
			teammember.FieldBio:          {Type: field.TypeJSON, Column: teammember.FieldBio},
			teammember.FieldImageURL:     {Type: field.TypeString, Column: teammember.FieldImageURL},
			teammember.FieldLinkedinURL:  {Type: field.TypeString, Column: teammember.FieldLinkedinURL},
			teammember.FieldTwitterURL:   {Type: field.TypeString, Column: teammember.FieldTwitterURL},
			teammember.FieldEmail:        {Type: field.TypeString, Column: teammember.FieldEmail},
			teammember.FieldType:         {Type: field.TypeEnum, Column: teammember.FieldType},
			teammember.FieldDisplayOrder: {Type: field.TypeInt, Column: teammember.FieldDisplayOrder},
			teammember.FieldIsActive:     {Type: field.TypeBool, Column: teammember.FieldIsActive},
			teammember.FieldCreatedAt:    {Type: field.TypeTime, Column: teammember.FieldCreatedAt},
			teammember.FieldUpdatedAt:    {Type: field.TypeTime, Column: teammember.FieldUpdatedAt},
		},
	}
	graph.Nodes[86] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   teammemberitem.Table,
			Columns: teammemberitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: teammemberitem.FieldID,
			},
		},
		Type: "TeamMemberItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			teammemberitem.FieldOrder:       {Type: field.TypeInt, Column: teammemberitem.FieldOrder},
			teammemberitem.FieldName:        {Type: field.TypeString, Column: teammemberitem.FieldName},
			teammemberitem.FieldRole:        {Type: field.TypeJSON, Column: teammemberitem.FieldRole},
			teammemberitem.FieldBio:         {Type: field.TypeJSON, Column: teammemberitem.FieldBio},
			teammemberitem.FieldImageURL:    {Type: field.TypeString, Column: teammemberitem.FieldImageURL},
			teammemberitem.FieldLinkedinURL: {Type: field.TypeString, Column: teammemberitem.FieldLinkedinURL},
			teammemberitem.FieldTwitterURL:  {Type: field.TypeString, Column: teammemberitem.FieldTwitterURL},
			teammemberitem.FieldEmailURL:    {Type: field.TypeString, Column: teammemberitem.FieldEmailURL},
		},
	}
	graph.Nodes[87] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   testimonialitem.Table,
			Columns: testimonialitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: testimonialitem.FieldID,
			},
		},
		Type: "TestimonialItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			testimonialitem.FieldOrder:          {Type: field.TypeInt, Column: testimonialitem.FieldOrder},
			testimonialitem.FieldQuote:          {Type: field.TypeJSON, Column: testimonialitem.FieldQuote},
			testimonialitem.FieldAuthorName:     {Type: field.TypeString, Column: testimonialitem.FieldAuthorName},
			testimonialitem.FieldAuthorRole:     {Type: field.TypeJSON, Column: testimonialitem.FieldAuthorRole},
			testimonialitem.FieldAuthorImageURL: {Type: field.TypeString, Column: testimonialitem.FieldAuthorImageURL},
		},
	}
	graph.Nodes[88] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   timelineevent.Table,
			Columns: timelineevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timelineevent.FieldID,
			},
		},
		Type: "TimelineEvent",
		Fields: map[string]*sqlgraph.FieldSpec{
			timelineevent.FieldOrder:       {Type: field.TypeInt, Column: timelineevent.FieldOrder},
			timelineevent.FieldDate:        {Type: field.TypeString, Column: timelineevent.FieldDate},
			timelineevent.FieldTitle:       {Type: field.TypeJSON, Column: timelineevent.FieldTitle},
			timelineevent.FieldDescription: {Type: field.TypeJSON, Column: timelineevent.FieldDescription},
			timelineevent.FieldImageURL:    {Type: field.TypeString, Column: timelineevent.FieldImageURL},
		},
	}
	graph.Nodes[89] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: token.FieldID,
			},
		},
		Type: "Token",
		Fields: map[string]*sqlgraph.FieldSpec{
			token.FieldType:        {Type: field.TypeEnum, Column: token.FieldType},
			token.FieldTokenHash:   {Type: field.TypeString, Column: token.FieldTokenHash},
			token.FieldJti:         {Type: field.TypeString, Column: token.FieldJti},
			token.FieldExpiresAt:   {Type: field.TypeTime, Column: token.FieldExpiresAt},
			token.FieldUsed:        {Type: field.TypeBool, Column: token.FieldUsed},
			token.FieldMfaVerified: {Type: field.TypeBool, Column: token.FieldMfaVerified},
			token.FieldMfaMethod:   {Type: field.TypeString, Column: token.FieldMfaMethod},
			token.FieldCreatedAt:   {Type: field.TypeTime, Column: token.FieldCreatedAt},
		},
	}
	graph.Nodes[90] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   trusteddevice.Table,
			Columns: trusteddevice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trusteddevice.FieldID,
			},
		},
		Type: "TrustedDevice",
		Fields: map[string]*sqlgraph.FieldSpec{
			trusteddevice.FieldFingerprint: {Type: field.TypeString, Column: trusteddevice.FieldFingerprint},
			trusteddevice.FieldUserAgent:   {Type: field.TypeString, Column: trusteddevice.FieldUserAgent},
			trusteddevice.FieldLastIP:      {Type: field.TypeString, Column: trusteddevice.FieldLastIP},
			trusteddevice.FieldLastUsedAt:  {Type: field.TypeTime, Column: trusteddevice.FieldLastUsedAt},
			trusteddevice.FieldCreatedAt:   {Type: field.TypeTime, Column: trusteddevice.FieldCreatedAt},
			trusteddevice.FieldVerifiedAt:  {Type: field.TypeTime, Column: trusteddevice.FieldVerifiedAt},
		},
	}
	graph.Nodes[91] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldEmail:                 {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldUsername:              {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldHashedPassword:        {Type: field.TypeString, Column: user.FieldHashedPassword},
			user.FieldIsVerified:            {Type: field.TypeBool, Column: user.FieldIsVerified},
			user.FieldEmailVerified:         {Type: field.TypeTime, Column: user.FieldEmailVerified},
			user.FieldLastLoginAt:           {Type: field.TypeTime, Column: user.FieldLastLoginAt},
			user.FieldIsActive:              {Type: field.TypeBool, Column: user.FieldIsActive},
			user.FieldDeactivatedAt:         {Type: field.TypeTime, Column: user.FieldDeactivatedAt},
			user.FieldLockedUntil:           {Type: field.TypeTime, Column: user.FieldLockedUntil},
			user.FieldCreatedAt:             {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:             {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldImpersonatingUserID:   {Type: field.TypeString, Column: user.FieldImpersonatingUserID},
			user.FieldSecurityTimestamp:     {Type: field.TypeTime, Column: user.FieldSecurityTimestamp},
			user.FieldPasswordResetRequired: {Type: field.TypeBool, Column: user.FieldPasswordResetRequired},
			user.FieldRoles:                 {Type: field.TypeJSON, Column: user.FieldRoles},
			user.FieldMfaSecret:             {Type: field.TypeString, Column: user.FieldMfaSecret},
			user.FieldMfaEnabled:            {Type: field.TypeBool, Column: user.FieldMfaEnabled},
			user.FieldOnboardingStartedAt:   {Type: field.TypeTime, Column: user.FieldOnboardingStartedAt},
			user.FieldOnboardingCompletedAt: {Type: field.TypeTime, Column: user.FieldOnboardingCompletedAt},
			user.FieldOnboardingSkipped:     {Type: field.TypeBool, Column: user.FieldOnboardingSkipped},
			user.FieldOnboardingVersion:     {Type: field.TypeString, Column: user.FieldOnboardingVersion},
			user.FieldOnboardingCompleted:   {Type: field.TypeBool, Column: user.FieldOnboardingCompleted},
			user.FieldPosition:              {Type: field.TypeString, Column: user.FieldPosition},
			user.FieldAnalyticsProperties:   {Type: field.TypeJSON, Column: user.FieldAnalyticsProperties},
		},
	}
	graph.Nodes[92] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userachievement.Table,
			Columns: userachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userachievement.FieldID,
			},
		},
		Type: "UserAchievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			userachievement.FieldAwardedAt: {Type: field.TypeTime, Column: userachievement.FieldAwardedAt},
			userachievement.FieldNotes:     {Type: field.TypeString, Column: userachievement.FieldNotes},
		},
	}
	graph.Nodes[93] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userconsent.Table,
			Columns: userconsent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userconsent.FieldID,
			},
		},
		Type: "UserConsent",
		Fields: map[string]*sqlgraph.FieldSpec{
			userconsent.FieldPreferences: {Type: field.TypeJSON, Column: userconsent.FieldPreferences},
			userconsent.FieldIPAddress:   {Type: field.TypeString, Column: userconsent.FieldIPAddress},
			userconsent.FieldCreatedAt:   {Type: field.TypeTime, Column: userconsent.FieldCreatedAt},
			userconsent.FieldUpdatedAt:   {Type: field.TypeTime, Column: userconsent.FieldUpdatedAt},
		},
	}
	graph.Nodes[94] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   useronboarding.Table,
			Columns: useronboarding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useronboarding.FieldID,
			},
		},
		Type: "UserOnboarding",
		Fields: map[string]*sqlgraph.FieldSpec{
			useronboarding.FieldIsCompleted: {Type: field.TypeBool, Column: useronboarding.FieldIsCompleted},
			useronboarding.FieldCompletedAt: {Type: field.TypeTime, Column: useronboarding.FieldCompletedAt},
			useronboarding.FieldSteps:       {Type: field.TypeJSON, Column: useronboarding.FieldSteps},
			useronboarding.FieldCreatedAt:   {Type: field.TypeTime, Column: useronboarding.FieldCreatedAt},
			useronboarding.FieldUpdatedAt:   {Type: field.TypeTime, Column: useronboarding.FieldUpdatedAt},
		},
	}
	graph.Nodes[95] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userprofile.Table,
			Columns: userprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userprofile.FieldID,
			},
		},
		Type: "UserProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			userprofile.FieldFirstName:    {Type: field.TypeString, Column: userprofile.FieldFirstName},
			userprofile.FieldLastName:     {Type: field.TypeString, Column: userprofile.FieldLastName},
			userprofile.FieldAvatarURL:    {Type: field.TypeString, Column: userprofile.FieldAvatarURL},
			userprofile.FieldBio:          {Type: field.TypeString, Column: userprofile.FieldBio},
			userprofile.FieldPhone:        {Type: field.TypeString, Column: userprofile.FieldPhone},
			userprofile.FieldJobTitle:     {Type: field.TypeString, Column: userprofile.FieldJobTitle},
			userprofile.FieldCompany:      {Type: field.TypeString, Column: userprofile.FieldCompany},
			userprofile.FieldLinkedin:     {Type: field.TypeString, Column: userprofile.FieldLinkedin},
			userprofile.FieldTwitter:      {Type: field.TypeString, Column: userprofile.FieldTwitter},
			userprofile.FieldInterests:    {Type: field.TypeJSON, Column: userprofile.FieldInterests},
			userprofile.FieldCompletedPct: {Type: field.TypeInt, Column: userprofile.FieldCompletedPct},
			userprofile.FieldCreatedAt:    {Type: field.TypeTime, Column: userprofile.FieldCreatedAt},
			userprofile.FieldUpdatedAt:    {Type: field.TypeTime, Column: userprofile.FieldUpdatedAt},
		},
	}
	graph.Nodes[96] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersession.Table,
			Columns: usersession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersession.FieldID,
			},
		},
		Type: "UserSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersession.FieldSessionToken:      {Type: field.TypeString, Column: usersession.FieldSessionToken},
			usersession.FieldExpiresAt:         {Type: field.TypeTime, Column: usersession.FieldExpiresAt},
			usersession.FieldIPAddress:         {Type: field.TypeString, Column: usersession.FieldIPAddress},
			usersession.FieldUserAgent:         {Type: field.TypeString, Column: usersession.FieldUserAgent},
			usersession.FieldCreatedAt:         {Type: field.TypeTime, Column: usersession.FieldCreatedAt},
			usersession.FieldLastAccessed:      {Type: field.TypeTime, Column: usersession.FieldLastAccessed},
			usersession.FieldDeviceFingerprint: {Type: field.TypeString, Column: usersession.FieldDeviceFingerprint},
		},
	}
	graph.Nodes[97] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userskill.Table,
			Columns: userskill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userskill.FieldID,
			},
		},
		Type: "UserSkill",
		Fields: map[string]*sqlgraph.FieldSpec{
			userskill.FieldLevel: {Type: field.TypeEnum, Column: userskill.FieldLevel},
		},
	}
	graph.Nodes[98] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   volunteerapplication.Table,
			Columns: volunteerapplication.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: volunteerapplication.FieldID,
			},
		},
		Type: "VolunteerApplication",
		Fields: map[string]*sqlgraph.FieldSpec{
			volunteerapplication.FieldStatus:              {Type: field.TypeEnum, Column: volunteerapplication.FieldStatus},
			volunteerapplication.FieldMotivation:          {Type: field.TypeString, Column: volunteerapplication.FieldMotivation},
			volunteerapplication.FieldAvailability:        {Type: field.TypeJSON, Column: volunteerapplication.FieldAvailability},
			volunteerapplication.FieldBackgroundCheck:     {Type: field.TypeBool, Column: volunteerapplication.FieldBackgroundCheck},
			volunteerapplication.FieldBackgroundCheckDate: {Type: field.TypeTime, Column: volunteerapplication.FieldBackgroundCheckDate},
			volunteerapplication.FieldReferences:          {Type: field.TypeJSON, Column: volunteerapplication.FieldReferences},
			volunteerapplication.FieldEmergencyContact:    {Type: field.TypeJSON, Column: volunteerapplication.FieldEmergencyContact},
			volunteerapplication.FieldReviewedBy:          {Type: field.TypeString, Column: volunteerapplication.FieldReviewedBy},
			volunteerapplication.FieldReviewedAt:          {Type: field.TypeTime, Column: volunteerapplication.FieldReviewedAt},
			volunteerapplication.FieldReviewNotes:         {Type: field.TypeString, Column: volunteerapplication.FieldReviewNotes},
			volunteerapplication.FieldInterviewDate:       {Type: field.TypeTime, Column: volunteerapplication.FieldInterviewDate},
			volunteerapplication.FieldCreatedAt:           {Type: field.TypeTime, Column: volunteerapplication.FieldCreatedAt},
			volunteerapplication.FieldUpdatedAt:           {Type: field.TypeTime, Column: volunteerapplication.FieldUpdatedAt},
		},
	}
	graph.Nodes[99] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   volunteerassignment.Table,
			Columns: volunteerassignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: volunteerassignment.FieldID,
			},
		},
		Type: "VolunteerAssignment",
		Fields: map[string]*sqlgraph.FieldSpec{
			volunteerassignment.FieldStatus:          {Type: field.TypeString, Column: volunteerassignment.FieldStatus},
			volunteerassignment.FieldStartDate:       {Type: field.TypeTime, Column: volunteerassignment.FieldStartDate},
			volunteerassignment.FieldEndDate:         {Type: field.TypeTime, Column: volunteerassignment.FieldEndDate},
			volunteerassignment.FieldHoursCompleted:  {Type: field.TypeInt, Column: volunteerassignment.FieldHoursCompleted},
			volunteerassignment.FieldHoursCommitted:  {Type: field.TypeInt, Column: volunteerassignment.FieldHoursCommitted},
			volunteerassignment.FieldFeedback:        {Type: field.TypeString, Column: volunteerassignment.FieldFeedback},
			volunteerassignment.FieldRating:          {Type: field.TypeInt, Column: volunteerassignment.FieldRating},
			volunteerassignment.FieldCompletionNotes: {Type: field.TypeString, Column: volunteerassignment.FieldCompletionNotes},
			volunteerassignment.FieldCreatedAt:       {Type: field.TypeTime, Column: volunteerassignment.FieldCreatedAt},
			volunteerassignment.FieldUpdatedAt:       {Type: field.TypeTime, Column: volunteerassignment.FieldUpdatedAt},
		},
	}
	graph.Nodes[100] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   volunteeropportunity.Table,
			Columns: volunteeropportunity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: volunteeropportunity.FieldID,
			},
		},
		Type: "VolunteerOpportunity",
		Fields: map[string]*sqlgraph.FieldSpec{
			volunteeropportunity.FieldTitle:               {Type: field.TypeJSON, Column: volunteeropportunity.FieldTitle},
			volunteeropportunity.FieldDescription:         {Type: field.TypeJSON, Column: volunteeropportunity.FieldDescription},
			volunteeropportunity.FieldTimeCommitment:      {Type: field.TypeString, Column: volunteeropportunity.FieldTimeCommitment},
			volunteeropportunity.FieldLocation:            {Type: field.TypeJSON, Column: volunteeropportunity.FieldLocation},
			volunteeropportunity.FieldIsActive:            {Type: field.TypeBool, Column: volunteeropportunity.FieldIsActive},
			volunteeropportunity.FieldMaxVolunteers:       {Type: field.TypeInt, Column: volunteeropportunity.FieldMaxVolunteers},
			volunteeropportunity.FieldCurrentVolunteers:   {Type: field.TypeInt, Column: volunteeropportunity.FieldCurrentVolunteers},
			volunteeropportunity.FieldStartDate:           {Type: field.TypeTime, Column: volunteeropportunity.FieldStartDate},
			volunteeropportunity.FieldEndDate:             {Type: field.TypeTime, Column: volunteeropportunity.FieldEndDate},
			volunteeropportunity.FieldApplicationDeadline: {Type: field.TypeTime, Column: volunteeropportunity.FieldApplicationDeadline},
			volunteeropportunity.FieldRequiredSkills:      {Type: field.TypeJSON, Column: volunteeropportunity.FieldRequiredSkills},
			volunteeropportunity.FieldPreferredSkills:     {Type: field.TypeJSON, Column: volunteeropportunity.FieldPreferredSkills},
			volunteeropportunity.FieldTags:                {Type: field.TypeJSON, Column: volunteeropportunity.FieldTags},
			volunteeropportunity.FieldIsUrgent:            {Type: field.TypeBool, Column: volunteeropportunity.FieldIsUrgent},
			volunteeropportunity.FieldIsRecurring:         {Type: field.TypeBool, Column: volunteeropportunity.FieldIsRecurring},
			volunteeropportunity.FieldCreatedAt:           {Type: field.TypeTime, Column: volunteeropportunity.FieldCreatedAt},
			volunteeropportunity.FieldUpdatedAt:           {Type: field.TypeTime, Column: volunteeropportunity.FieldUpdatedAt},
		},
	}
	graph.Nodes[101] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vote.FieldID,
			},
		},
		Type: "Vote",
		Fields: map[string]*sqlgraph.FieldSpec{
			vote.FieldQuestion: {Type: field.TypeString, Column: vote.FieldQuestion},
			vote.FieldOptions:  {Type: field.TypeJSON, Column: vote.FieldOptions},
			vote.FieldStatus:   {Type: field.TypeString, Column: vote.FieldStatus},
			vote.FieldResult:   {Type: field.TypeString, Column: vote.FieldResult},
		},
	}
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accordionitem.BlockTable,
			Columns: []string{accordionitem.BlockColumn},
			Bidi:    false,
		},
		"AccordionItem",
		"BlockAccordion",
	)
	graph.MustAddE(
		"agenda_item",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actionitem.AgendaItemTable,
			Columns: []string{actionitem.AgendaItemColumn},
			Bidi:    false,
		},
		"ActionItem",
		"AgendaItem",
	)
	graph.MustAddE(
		"actor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitylog.ActorTable,
			Columns: []string{activitylog.ActorColumn},
			Bidi:    false,
		},
		"ActivityLog",
		"User",
	)
	graph.MustAddE(
		"user_profiles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.UserProfilesTable,
			Columns: []string{address.UserProfilesColumn},
			Bidi:    false,
		},
		"Address",
		"UserProfile",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.EventsTable,
			Columns: []string{address.EventsColumn},
			Bidi:    false,
		},
		"Address",
		"Event",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.EventTable,
			Columns: []string{agenda.EventColumn},
			Bidi:    false,
		},
		"Agenda",
		"Event",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agenda.ItemsTable,
			Columns: []string{agenda.ItemsColumn},
			Bidi:    false,
		},
		"Agenda",
		"AgendaItem",
	)
	graph.MustAddE(
		"mentorship_session",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   agenda.MentorshipSessionTable,
			Columns: []string{agenda.MentorshipSessionColumn},
			Bidi:    false,
		},
		"Agenda",
		"MentorshipSession",
	)
	graph.MustAddE(
		"agenda",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agendaitem.AgendaTable,
			Columns: []string{agendaitem.AgendaColumn},
			Bidi:    false,
		},
		"AgendaItem",
		"Agenda",
	)
	graph.MustAddE(
		"vote",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agendaitem.VoteTable,
			Columns: []string{agendaitem.VoteColumn},
			Bidi:    false,
		},
		"AgendaItem",
		"Vote",
	)
	graph.MustAddE(
		"action_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agendaitem.ActionItemsTable,
			Columns: []string{agendaitem.ActionItemsColumn},
			Bidi:    false,
		},
		"AgendaItem",
		"ActionItem",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsdashboard.OwnerTable,
			Columns: []string{analyticsdashboard.OwnerColumn},
			Bidi:    false,
		},
		"AnalyticsDashboard",
		"User",
	)
	graph.MustAddE(
		"widgets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   analyticsdashboard.WidgetsTable,
			Columns: []string{analyticsdashboard.WidgetsColumn},
			Bidi:    false,
		},
		"AnalyticsDashboard",
		"DashboardWidget",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   analyticsevent.UserTable,
			Columns: []string{analyticsevent.UserColumn},
			Bidi:    false,
		},
		"AnalyticsEvent",
		"User",
	)
	graph.MustAddE(
		"actor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   auditlog.ActorTable,
			Columns: []string{auditlog.ActorColumn},
			Bidi:    false,
		},
		"AuditLog",
		"User",
	)
	graph.MustAddE(
		"user_achievements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   badge.UserAchievementsTable,
			Columns: []string{badge.UserAchievementsColumn},
			Bidi:    false,
		},
		"Badge",
		"UserAchievement",
	)
	graph.MustAddE(
		"vote",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ballot.VoteTable,
			Columns: []string{ballot.VoteColumn},
			Bidi:    false,
		},
		"Ballot",
		"Vote",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockaccordion.ContentBlockTable,
			Columns: []string{blockaccordion.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockAccordion",
		"ContentBlock",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockaccordion.ItemsTable,
			Columns: []string{blockaccordion.ItemsColumn},
			Bidi:    false,
		},
		"BlockAccordion",
		"AccordionItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockContactForm",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcta.ContentBlockTable,
			Columns: []string{blockcta.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockCta",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdivider.ContentBlockTable,
			Columns: []string{blockdivider.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockDivider",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockdonationform.ContentBlockTable,
			Columns: []string{blockdonationform.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockDonationForm",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockfaq.ContentBlockTable,
			Columns: []string{blockfaq.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockFaq",
		"ContentBlock",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockfaq.ItemsTable,
			Columns: []string{blockfaq.ItemsColumn},
			Bidi:    false,
		},
		"BlockFaq",
		"FaqItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockgallery.ContentBlockTable,
			Columns: []string{blockgallery.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockGallery",
		"ContentBlock",
	)
	graph.MustAddE(
		"images",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockgallery.ImagesTable,
			Columns: []string{blockgallery.ImagesColumn},
			Bidi:    false,
		},
		"BlockGallery",
		"GalleryImage",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockhero.ContentBlockTable,
			Columns: []string{blockhero.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockHero",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockmap.ContentBlockTable,
			Columns: []string{blockmap.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockMap",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocknewslettersignup.ContentBlockTable,
			Columns: []string{blocknewslettersignup.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockNewsletterSignup",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockpartnerlogos.ContentBlockTable,
			Columns: []string{blockpartnerlogos.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockPartnerLogos",
		"ContentBlock",
	)
	graph.MustAddE(
		"partners",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockpartnerlogos.PartnersTable,
			Columns: []string{blockpartnerlogos.PartnersColumn},
			Bidi:    false,
		},
		"BlockPartnerLogos",
		"PartnerLogoItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockprogramcards.ContentBlockTable,
			Columns: []string{blockprogramcards.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockProgramCards",
		"ContentBlock",
	)
	graph.MustAddE(
		"selected_programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockprogramcards.SelectedProgramsTable,
			Columns: []string{blockprogramcards.SelectedProgramsColumn},
			Bidi:    false,
		},
		"BlockProgramCards",
		"ProgramCardItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockstats.ContentBlockTable,
			Columns: []string{blockstats.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockStats",
		"ContentBlock",
	)
	graph.MustAddE(
		"stats",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockstats.StatsTable,
			Columns: []string{blockstats.StatsColumn},
			Bidi:    false,
		},
		"BlockStats",
		"StatItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocksuccessstories.ContentBlockTable,
			Columns: []string{blocksuccessstories.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockSuccessStories",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktabs.ContentBlockTable,
			Columns: []string{blocktabs.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockTabs",
		"ContentBlock",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktabs.ItemsTable,
			Columns: []string{blocktabs.ItemsColumn},
			Bidi:    false,
		},
		"BlockTabs",
		"TabItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockteamgrid.ContentBlockTable,
			Columns: []string{blockteamgrid.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockTeamGrid",
		"ContentBlock",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blockteamgrid.MembersTable,
			Columns: []string{blockteamgrid.MembersColumn},
			Bidi:    false,
		},
		"BlockTeamGrid",
		"TeamMemberItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktestimonials.ContentBlockTable,
			Columns: []string{blocktestimonials.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockTestimonials",
		"ContentBlock",
	)
	graph.MustAddE(
		"testimonials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktestimonials.TestimonialsTable,
			Columns: []string{blocktestimonials.TestimonialsColumn},
			Bidi:    false,
		},
		"BlockTestimonials",
		"TestimonialItem",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktextcontent.ContentBlockTable,
			Columns: []string{blocktextcontent.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockTextContent",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blocktimeline.ContentBlockTable,
			Columns: []string{blocktimeline.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockTimeline",
		"ContentBlock",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blocktimeline.EventsTable,
			Columns: []string{blocktimeline.EventsColumn},
			Bidi:    false,
		},
		"BlockTimeline",
		"TimelineEvent",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvideoembed.ContentBlockTable,
			Columns: []string{blockvideoembed.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockVideoEmbed",
		"ContentBlock",
	)
	graph.MustAddE(
		"content_block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockvolunteersignup.ContentBlockTable,
			Columns: []string{blockvolunteersignup.ContentBlockColumn},
			Bidi:    false,
		},
		"BlockVolunteerSignup",
		"ContentBlock",
	)
	graph.MustAddE(
		"partnership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brandbenefit.PartnershipTable,
			Columns: []string{brandbenefit.PartnershipColumn},
			Bidi:    false,
		},
		"BrandBenefit",
		"Partnership",
	)
	graph.MustAddE(
		"page",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contentblock.PageTable,
			Columns: []string{contentblock.PageColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"Page",
	)
	graph.MustAddE(
		"block_hero",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockHeroTable,
			Columns: []string{contentblock.BlockHeroColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockHero",
	)
	graph.MustAddE(
		"block_text_content",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTextContentTable,
			Columns: []string{contentblock.BlockTextContentColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockTextContent",
	)
	graph.MustAddE(
		"block_faq",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockFaqTable,
			Columns: []string{contentblock.BlockFaqColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockFaq",
	)
	graph.MustAddE(
		"block_cta",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockCtaTable,
			Columns: []string{contentblock.BlockCtaColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockCta",
	)
	graph.MustAddE(
		"block_testimonials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTestimonialsTable,
			Columns: []string{contentblock.BlockTestimonialsColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockTestimonials",
	)
	graph.MustAddE(
		"block_stats",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockStatsTable,
			Columns: []string{contentblock.BlockStatsColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockStats",
	)
	graph.MustAddE(
		"block_gallery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockGalleryTable,
			Columns: []string{contentblock.BlockGalleryColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockGallery",
	)
	graph.MustAddE(
		"block_program_cards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockProgramCardsTable,
			Columns: []string{contentblock.BlockProgramCardsColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockProgramCards",
	)
	graph.MustAddE(
		"block_success_stories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockSuccessStoriesTable,
			Columns: []string{contentblock.BlockSuccessStoriesColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockSuccessStories",
	)
	graph.MustAddE(
		"block_donation_form",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDonationFormTable,
			Columns: []string{contentblock.BlockDonationFormColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockDonationForm",
	)
	graph.MustAddE(
		"block_volunteer_signup",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVolunteerSignupTable,
			Columns: []string{contentblock.BlockVolunteerSignupColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockVolunteerSignup",
	)
	graph.MustAddE(
		"block_newsletter_signup",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockNewsletterSignupTable,
			Columns: []string{contentblock.BlockNewsletterSignupColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockNewsletterSignup",
	)
	graph.MustAddE(
		"block_partner_logos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockPartnerLogosTable,
			Columns: []string{contentblock.BlockPartnerLogosColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockPartnerLogos",
	)
	graph.MustAddE(
		"block_team_grid",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTeamGridTable,
			Columns: []string{contentblock.BlockTeamGridColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockTeamGrid",
	)
	graph.MustAddE(
		"block_timeline",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTimelineTable,
			Columns: []string{contentblock.BlockTimelineColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockTimeline",
	)
	graph.MustAddE(
		"block_contact_form",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockContactFormTable,
			Columns: []string{contentblock.BlockContactFormColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockContactForm",
	)
	graph.MustAddE(
		"block_video_embed",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockVideoEmbedTable,
			Columns: []string{contentblock.BlockVideoEmbedColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockVideoEmbed",
	)
	graph.MustAddE(
		"block_map",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockMapTable,
			Columns: []string{contentblock.BlockMapColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockMap",
	)
	graph.MustAddE(
		"block_accordion",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockAccordionTable,
			Columns: []string{contentblock.BlockAccordionColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockAccordion",
	)
	graph.MustAddE(
		"block_tabs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockTabsTable,
			Columns: []string{contentblock.BlockTabsColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockTabs",
	)
	graph.MustAddE(
		"block_divider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   contentblock.BlockDividerTable,
			Columns: []string{contentblock.BlockDividerColumn},
			Bidi:    false,
		},
		"ContentBlock",
		"BlockDivider",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
		},
		"Conversation",
		"Message",
	)
	graph.MustAddE(
		"participants",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
		},
		"Conversation",
		"ConversationParticipant",
	)
	graph.MustAddE(
		"conversation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
		},
		"ConversationParticipant",
		"Conversation",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
		},
		"ConversationParticipant",
		"User",
	)
	graph.MustAddE(
		"dashboard",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dashboardwidget.DashboardTable,
			Columns: []string{dashboardwidget.DashboardColumn},
			Bidi:    false,
		},
		"DashboardWidget",
		"AnalyticsDashboard",
	)
	graph.MustAddE(
		"uploader",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.UploaderTable,
			Columns: []string{document.UploaderColumn},
			Bidi:    false,
		},
		"Document",
		"User",
	)
	graph.MustAddE(
		"category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CategoryTable,
			Columns: []string{document.CategoryColumn},
			Bidi:    false,
		},
		"Document",
		"DocumentCategory",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   documentcategory.ChildrenTable,
			Columns: []string{documentcategory.ChildrenColumn},
			Bidi:    false,
		},
		"DocumentCategory",
		"DocumentCategory",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentcategory.ParentTable,
			Columns: []string{documentcategory.ParentColumn},
			Bidi:    false,
		},
		"DocumentCategory",
		"DocumentCategory",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.DocumentsTable,
			Columns: []string{documentcategory.DocumentsColumn},
			Bidi:    false,
		},
		"DocumentCategory",
		"Document",
	)
	graph.MustAddE(
		"donor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.DonorTable,
			Columns: []string{donation.DonorColumn},
			Bidi:    false,
		},
		"Donation",
		"User",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.ProgramTable,
			Columns: []string{donation.ProgramColumn},
			Bidi:    false,
		},
		"Donation",
		"Program",
	)
	graph.MustAddE(
		"campaign",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   donation.CampaignTable,
			Columns: []string{donation.CampaignColumn},
			Bidi:    false,
		},
		"Donation",
		"FundraisingCampaign",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.ProgramTable,
			Columns: []string{event.ProgramColumn},
			Bidi:    false,
		},
		"Event",
		"Program",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.CreatedByTable,
			Columns: []string{event.CreatedByColumn},
			Bidi:    false,
		},
		"Event",
		"User",
	)
	graph.MustAddE(
		"registrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.RegistrationsTable,
			Columns: []string{event.RegistrationsColumn},
			Bidi:    false,
		},
		"Event",
		"EventRegistration",
	)
	graph.MustAddE(
		"agenda",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.AgendaTable,
			Columns: []string{event.AgendaColumn},
			Bidi:    false,
		},
		"Event",
		"Agenda",
	)
	graph.MustAddE(
		"location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
		},
		"Event",
		"Address",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
		},
		"EventRegistration",
		"Event",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
		},
		"EventRegistration",
		"User",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faqitem.BlockTable,
			Columns: []string{faqitem.BlockColumn},
			Bidi:    false,
		},
		"FaqItem",
		"BlockFaq",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fundraisingcampaign.ProgramTable,
			Columns: []string{fundraisingcampaign.ProgramColumn},
			Bidi:    false,
		},
		"FundraisingCampaign",
		"Program",
	)
	graph.MustAddE(
		"child_campaigns",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fundraisingcampaign.ChildCampaignsTable,
			Columns: []string{fundraisingcampaign.ChildCampaignsColumn},
			Bidi:    false,
		},
		"FundraisingCampaign",
		"FundraisingCampaign",
	)
	graph.MustAddE(
		"parent_campaign",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fundraisingcampaign.ParentCampaignTable,
			Columns: []string{fundraisingcampaign.ParentCampaignColumn},
			Bidi:    false,
		},
		"FundraisingCampaign",
		"FundraisingCampaign",
	)
	graph.MustAddE(
		"donations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fundraisingcampaign.DonationsTable,
			Columns: []string{fundraisingcampaign.DonationsColumn},
			Bidi:    false,
		},
		"FundraisingCampaign",
		"Donation",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   galleryimage.BlockTable,
			Columns: []string{galleryimage.BlockColumn},
			Bidi:    false,
		},
		"GalleryImage",
		"BlockGallery",
	)
	graph.MustAddE(
		"report_definition",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.ReportDefinitionTable,
			Columns: []string{generatedreport.ReportDefinitionColumn},
			Bidi:    false,
		},
		"GeneratedReport",
		"ReportDefinition",
	)
	graph.MustAddE(
		"generator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.GeneratorTable,
			Columns: []string{generatedreport.GeneratorColumn},
			Bidi:    false,
		},
		"GeneratedReport",
		"User",
	)
	graph.MustAddE(
		"job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedreport.JobTable,
			Columns: []string{generatedreport.JobColumn},
			Bidi:    false,
		},
		"GeneratedReport",
		"Job",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OrganizationTable,
			Columns: []string{grant.OrganizationColumn},
			Bidi:    false,
		},
		"Grant",
		"Organization",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.ProgramTable,
			Columns: []string{grant.ProgramColumn},
			Bidi:    false,
		},
		"Grant",
		"Program",
	)
	graph.MustAddE(
		"reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ReportsTable,
			Columns: []string{grant.ReportsColumn},
			Bidi:    false,
		},
		"Grant",
		"GrantReport",
	)
	graph.MustAddE(
		"grant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grantreport.GrantTable,
			Columns: []string{grantreport.GrantColumn},
			Bidi:    false,
		},
		"GrantReport",
		"Grant",
	)
	graph.MustAddE(
		"metric",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactdatapoint.MetricTable,
			Columns: []string{impactdatapoint.MetricColumn},
			Bidi:    false,
		},
		"ImpactDataPoint",
		"ImpactMetric",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   impactmetric.ProgramTable,
			Columns: []string{impactmetric.ProgramColumn},
			Bidi:    false,
		},
		"ImpactMetric",
		"Program",
	)
	graph.MustAddE(
		"data_points",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   impactmetric.DataPointsTable,
			Columns: []string{impactmetric.DataPointsColumn},
			Bidi:    false,
		},
		"ImpactMetric",
		"ImpactDataPoint",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
		},
		"Job",
		"User",
	)
	graph.MustAddE(
		"logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.LogsTable,
			Columns: []string{job.LogsColumn},
			Bidi:    false,
		},
		"Job",
		"JobLog",
	)
	graph.MustAddE(
		"dependents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   job.DependentsTable,
			Columns: []string{job.DependentsColumn},
			Bidi:    false,
		},
		"Job",
		"Job",
	)
	graph.MustAddE(
		"depends_on",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   job.DependsOnTable,
			Columns: []string{job.DependsOnColumn},
			Bidi:    false,
		},
		"Job",
		"Job",
	)
	graph.MustAddE(
		"reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ReportsTable,
			Columns: []string{job.ReportsColumn},
			Bidi:    false,
		},
		"Job",
		"GeneratedReport",
	)
	graph.MustAddE(
		"job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblog.JobTable,
			Columns: []string{joblog.JobColumn},
			Bidi:    false,
		},
		"JobLog",
		"Job",
	)
	graph.MustAddE(
		"requester",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.RequesterTable,
			Columns: []string{mentorshiprequest.RequesterColumn},
			Bidi:    false,
		},
		"MentorshipRequest",
		"User",
	)
	graph.MustAddE(
		"mentor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshiprequest.MentorTable,
			Columns: []string{mentorshiprequest.MentorColumn},
			Bidi:    false,
		},
		"MentorshipRequest",
		"User",
	)
	graph.MustAddE(
		"sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mentorshiprequest.SessionsTable,
			Columns: []string{mentorshiprequest.SessionsColumn},
			Bidi:    false,
		},
		"MentorshipRequest",
		"MentorshipSession",
	)
	graph.MustAddE(
		"mentorship_request",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mentorshipsession.MentorshipRequestTable,
			Columns: []string{mentorshipsession.MentorshipRequestColumn},
			Bidi:    false,
		},
		"MentorshipSession",
		"MentorshipRequest",
	)
	graph.MustAddE(
		"agenda",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   mentorshipsession.AgendaTable,
			Columns: []string{mentorshipsession.AgendaColumn},
			Bidi:    false,
		},
		"MentorshipSession",
		"Agenda",
	)
	graph.MustAddE(
		"conversation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ConversationTable,
			Columns: []string{message.ConversationColumn},
			Bidi:    false,
		},
		"Message",
		"Conversation",
	)
	graph.MustAddE(
		"sender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
		},
		"Message",
		"User",
	)
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   newsarticle.AuthorTable,
			Columns: []string{newsarticle.AuthorColumn},
			Bidi:    false,
		},
		"NewsArticle",
		"User",
	)
	graph.MustAddE(
		"partnerships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PartnershipsTable,
			Columns: []string{organization.PartnershipsColumn},
			Bidi:    false,
		},
		"Organization",
		"Partnership",
	)
	graph.MustAddE(
		"grants",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GrantsTable,
			Columns: []string{organization.GrantsColumn},
			Bidi:    false,
		},
		"Organization",
		"Grant",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.UserTable,
			Columns: []string{organization.UserColumn},
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"child_pages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   page.ChildPagesTable,
			Columns: []string{page.ChildPagesColumn},
			Bidi:    false,
		},
		"Page",
		"Page",
	)
	graph.MustAddE(
		"parent_page",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   page.ParentPageTable,
			Columns: []string{page.ParentPageColumn},
			Bidi:    false,
		},
		"Page",
		"Page",
	)
	graph.MustAddE(
		"blocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   page.BlocksTable,
			Columns: []string{page.BlocksColumn},
			Bidi:    false,
		},
		"Page",
		"ContentBlock",
	)
	graph.MustAddE(
		"seo",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   page.SeoTable,
			Columns: []string{page.SeoColumn},
			Bidi:    false,
		},
		"Page",
		"SeoConfig",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnerlogoitem.BlockTable,
			Columns: []string{partnerlogoitem.BlockColumn},
			Bidi:    false,
		},
		"PartnerLogoItem",
		"BlockPartnerLogos",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.OrganizationTable,
			Columns: []string{partnership.OrganizationColumn},
			Bidi:    false,
		},
		"Partnership",
		"Organization",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnership.ManagerTable,
			Columns: []string{partnership.ManagerColumn},
			Bidi:    false,
		},
		"Partnership",
		"User",
	)
	graph.MustAddE(
		"primary_contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   partnership.PrimaryContactsTable,
			Columns: partnership.PrimaryContactsPrimaryKey,
			Bidi:    false,
		},
		"Partnership",
		"User",
	)
	graph.MustAddE(
		"reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.ReportsTable,
			Columns: []string{partnership.ReportsColumn},
			Bidi:    false,
		},
		"Partnership",
		"PartnershipReport",
	)
	graph.MustAddE(
		"interactions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.InteractionsTable,
			Columns: []string{partnership.InteractionsColumn},
			Bidi:    false,
		},
		"Partnership",
		"PartnershipInteraction",
	)
	graph.MustAddE(
		"renewals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.RenewalsTable,
			Columns: []string{partnership.RenewalsColumn},
			Bidi:    false,
		},
		"Partnership",
		"PartnershipRenewal",
	)
	graph.MustAddE(
		"brand_benefits",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partnership.BrandBenefitsTable,
			Columns: []string{partnership.BrandBenefitsColumn},
			Bidi:    false,
		},
		"Partnership",
		"BrandBenefit",
	)
	graph.MustAddE(
		"partnership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipinteraction.PartnershipTable,
			Columns: []string{partnershipinteraction.PartnershipColumn},
			Bidi:    false,
		},
		"PartnershipInteraction",
		"Partnership",
	)
	graph.MustAddE(
		"partnership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershiprenewal.PartnershipTable,
			Columns: []string{partnershiprenewal.PartnershipColumn},
			Bidi:    false,
		},
		"PartnershipRenewal",
		"Partnership",
	)
	graph.MustAddE(
		"partnership",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   partnershipreport.PartnershipTable,
			Columns: []string{partnershipreport.PartnershipColumn},
			Bidi:    false,
		},
		"PartnershipReport",
		"Partnership",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordhistory.UserTable,
			Columns: []string{passwordhistory.UserColumn},
			Bidi:    false,
		},
		"PasswordHistory",
		"User",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.RolesTable,
			Columns: []string{permission.RolesColumn},
			Bidi:    false,
		},
		"Permission",
		"RolePermission",
	)
	graph.MustAddE(
		"category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CategoryTable,
			Columns: []string{program.CategoryColumn},
			Bidi:    false,
		},
		"Program",
		"ProgramCategory",
	)
	graph.MustAddE(
		"enrolments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EnrolmentsTable,
			Columns: []string{program.EnrolmentsColumn},
			Bidi:    false,
		},
		"Program",
		"ProgramEnrolment",
	)
	graph.MustAddE(
		"participants",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ParticipantsTable,
			Columns: []string{program.ParticipantsColumn},
			Bidi:    false,
		},
		"Program",
		"ProgramParticipant",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.CreatedByTable,
			Columns: []string{program.CreatedByColumn},
			Bidi:    false,
		},
		"Program",
		"User",
	)
	graph.MustAddE(
		"updated_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UpdatedByTable,
			Columns: []string{program.UpdatedByColumn},
			Bidi:    false,
		},
		"Program",
		"User",
	)
	graph.MustAddE(
		"program_card_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ProgramCardItemsTable,
			Columns: []string{program.ProgramCardItemsColumn},
			Bidi:    false,
		},
		"Program",
		"ProgramCardItem",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.EventsTable,
			Columns: []string{program.EventsColumn},
			Bidi:    false,
		},
		"Program",
		"Event",
	)
	graph.MustAddE(
		"success_stories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SuccessStoriesTable,
			Columns: []string{program.SuccessStoriesColumn},
			Bidi:    false,
		},
		"Program",
		"SuccessStory",
	)
	graph.MustAddE(
		"volunteer_opportunities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.VolunteerOpportunitiesTable,
			Columns: []string{program.VolunteerOpportunitiesColumn},
			Bidi:    false,
		},
		"Program",
		"VolunteerOpportunity",
	)
	graph.MustAddE(
		"fundraising_campaigns",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.FundraisingCampaignsTable,
			Columns: []string{program.FundraisingCampaignsColumn},
			Bidi:    false,
		},
		"Program",
		"FundraisingCampaign",
	)
	graph.MustAddE(
		"donations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.DonationsTable,
			Columns: []string{program.DonationsColumn},
			Bidi:    false,
		},
		"Program",
		"Donation",
	)
	graph.MustAddE(
		"grants",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.GrantsTable,
			Columns: []string{program.GrantsColumn},
			Bidi:    false,
		},
		"Program",
		"Grant",
	)
	graph.MustAddE(
		"site_visits",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.SiteVisitsTable,
			Columns: []string{program.SiteVisitsColumn},
			Bidi:    false,
		},
		"Program",
		"SiteVisit",
	)
	graph.MustAddE(
		"impact_metrics",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ImpactMetricsTable,
			Columns: []string{program.ImpactMetricsColumn},
			Bidi:    false,
		},
		"Program",
		"ImpactMetric",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programcarditem.BlockTable,
			Columns: []string{programcarditem.BlockColumn},
			Bidi:    false,
		},
		"ProgramCardItem",
		"BlockProgramCards",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programcarditem.ProgramTable,
			Columns: []string{programcarditem.ProgramColumn},
			Bidi:    false,
		},
		"ProgramCardItem",
		"Program",
	)
	graph.MustAddE(
		"programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   programcategory.ProgramsTable,
			Columns: []string{programcategory.ProgramsColumn},
			Bidi:    false,
		},
		"ProgramCategory",
		"Program",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.ProgramTable,
			Columns: []string{programenrolment.ProgramColumn},
			Bidi:    false,
		},
		"ProgramEnrolment",
		"Program",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programenrolment.UserTable,
			Columns: []string{programenrolment.UserColumn},
			Bidi:    false,
		},
		"ProgramEnrolment",
		"User",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programparticipant.ProgramTable,
			Columns: []string{programparticipant.ProgramColumn},
			Bidi:    false,
		},
		"ProgramParticipant",
		"Program",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   programparticipant.UserTable,
			Columns: []string{programparticipant.UserColumn},
			Bidi:    false,
		},
		"ProgramParticipant",
		"User",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportdefinition.CreatorTable,
			Columns: []string{reportdefinition.CreatorColumn},
			Bidi:    false,
		},
		"ReportDefinition",
		"User",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.PermissionsTable,
			Columns: []string{reportdefinition.PermissionsColumn},
			Bidi:    false,
		},
		"ReportDefinition",
		"ReportPermission",
	)
	graph.MustAddE(
		"generated_reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.GeneratedReportsTable,
			Columns: []string{reportdefinition.GeneratedReportsColumn},
			Bidi:    false,
		},
		"ReportDefinition",
		"GeneratedReport",
	)
	graph.MustAddE(
		"schedules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reportdefinition.SchedulesTable,
			Columns: []string{reportdefinition.SchedulesColumn},
			Bidi:    false,
		},
		"ReportDefinition",
		"ScheduledReport",
	)
	graph.MustAddE(
		"report_definition",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.ReportDefinitionTable,
			Columns: []string{reportpermission.ReportDefinitionColumn},
			Bidi:    false,
		},
		"ReportPermission",
		"ReportDefinition",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reportpermission.UserTable,
			Columns: []string{reportpermission.UserColumn},
			Bidi:    false,
		},
		"ReportPermission",
		"User",
	)
	graph.MustAddE(
		"permission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
		},
		"RolePermission",
		"Permission",
	)
	graph.MustAddE(
		"report_definition",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.ReportDefinitionTable,
			Columns: []string{scheduledreport.ReportDefinitionColumn},
			Bidi:    false,
		},
		"ScheduledReport",
		"ReportDefinition",
	)
	graph.MustAddE(
		"creator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledreport.CreatorTable,
			Columns: []string{scheduledreport.CreatorColumn},
			Bidi:    false,
		},
		"ScheduledReport",
		"User",
	)
	graph.MustAddE(
		"page",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   seoconfig.PageTable,
			Columns: []string{seoconfig.PageColumn},
			Bidi:    false,
		},
		"SeoConfig",
		"Page",
	)
	graph.MustAddE(
		"donor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.DonorTable,
			Columns: []string{sitevisit.DonorColumn},
			Bidi:    false,
		},
		"SiteVisit",
		"User",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sitevisit.ProgramTable,
			Columns: []string{sitevisit.ProgramColumn},
			Bidi:    false,
		},
		"SiteVisit",
		"Program",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.UsersTable,
			Columns: []string{skill.UsersColumn},
			Bidi:    false,
		},
		"Skill",
		"UserSkill",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statitem.BlockTable,
			Columns: []string{statitem.BlockColumn},
			Bidi:    false,
		},
		"StatItem",
		"BlockStats",
	)
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.AuthorTable,
			Columns: []string{successstory.AuthorColumn},
			Bidi:    false,
		},
		"SuccessStory",
		"User",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   successstory.ProgramTable,
			Columns: []string{successstory.ProgramColumn},
			Bidi:    false,
		},
		"SuccessStory",
		"Program",
	)
	graph.MustAddE(
		"testimonials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   successstory.TestimonialsTable,
			Columns: []string{successstory.TestimonialsColumn},
			Bidi:    false,
		},
		"SuccessStory",
		"TestimonialItem",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabitem.BlockTable,
			Columns: []string{tabitem.BlockColumn},
			Bidi:    false,
		},
		"TabItem",
		"BlockTabs",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammember.UserTable,
			Columns: []string{teammember.UserColumn},
			Bidi:    false,
		},
		"TeamMember",
		"User",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammemberitem.BlockTable,
			Columns: []string{teammemberitem.BlockColumn},
			Bidi:    false,
		},
		"TeamMemberItem",
		"BlockTeamGrid",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testimonialitem.BlockTable,
			Columns: []string{testimonialitem.BlockColumn},
			Bidi:    false,
		},
		"TestimonialItem",
		"BlockTestimonials",
	)
	graph.MustAddE(
		"success_story",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   testimonialitem.SuccessStoryTable,
			Columns: []string{testimonialitem.SuccessStoryColumn},
			Bidi:    false,
		},
		"TestimonialItem",
		"SuccessStory",
	)
	graph.MustAddE(
		"block",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timelineevent.BlockTable,
			Columns: []string{timelineevent.BlockColumn},
			Bidi:    false,
		},
		"TimelineEvent",
		"BlockTimeline",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.UserTable,
			Columns: []string{token.UserColumn},
			Bidi:    false,
		},
		"Token",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trusteddevice.UserTable,
			Columns: []string{trusteddevice.UserColumn},
			Bidi:    false,
		},
		"TrustedDevice",
		"User",
	)
	graph.MustAddE(
		"profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
		},
		"User",
		"UserProfile",
	)
	graph.MustAddE(
		"sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
		},
		"User",
		"UserSession",
	)
	graph.MustAddE(
		"tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
		},
		"User",
		"Token",
	)
	graph.MustAddE(
		"trusted_devices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TrustedDevicesTable,
			Columns: []string{user.TrustedDevicesColumn},
			Bidi:    false,
		},
		"User",
		"TrustedDevice",
	)
	graph.MustAddE(
		"password_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordHistoryTable,
			Columns: []string{user.PasswordHistoryColumn},
			Bidi:    false,
		},
		"User",
		"PasswordHistory",
	)
	graph.MustAddE(
		"team_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TeamMemberTable,
			Columns: []string{user.TeamMemberColumn},
			Bidi:    false,
		},
		"User",
		"TeamMember",
	)
	graph.MustAddE(
		"audit_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AuditLogsTable,
			Columns: []string{user.AuditLogsColumn},
			Bidi:    false,
		},
		"User",
		"AuditLog",
	)
	graph.MustAddE(
		"jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JobsTable,
			Columns: []string{user.JobsColumn},
			Bidi:    false,
		},
		"User",
		"Job",
	)
	graph.MustAddE(
		"dashboards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DashboardsTable,
			Columns: []string{user.DashboardsColumn},
			Bidi:    false,
		},
		"User",
		"AnalyticsDashboard",
	)
	graph.MustAddE(
		"analytics_events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AnalyticsEventsTable,
			Columns: []string{user.AnalyticsEventsColumn},
			Bidi:    false,
		},
		"User",
		"AnalyticsEvent",
	)
	graph.MustAddE(
		"created_reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedReportsTable,
			Columns: []string{user.CreatedReportsColumn},
			Bidi:    false,
		},
		"User",
		"ReportDefinition",
	)
	graph.MustAddE(
		"generated_reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GeneratedReportsTable,
			Columns: []string{user.GeneratedReportsColumn},
			Bidi:    false,
		},
		"User",
		"GeneratedReport",
	)
	graph.MustAddE(
		"report_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportPermissionsTable,
			Columns: []string{user.ReportPermissionsColumn},
			Bidi:    false,
		},
		"User",
		"ReportPermission",
	)
	graph.MustAddE(
		"scheduled_reports",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ScheduledReportsTable,
			Columns: []string{user.ScheduledReportsColumn},
			Bidi:    false,
		},
		"User",
		"ScheduledReport",
	)
	graph.MustAddE(
		"created_programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedProgramsTable,
			Columns: []string{user.CreatedProgramsColumn},
			Bidi:    false,
		},
		"User",
		"Program",
	)
	graph.MustAddE(
		"updated_programs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpdatedProgramsTable,
			Columns: []string{user.UpdatedProgramsColumn},
			Bidi:    false,
		},
		"User",
		"Program",
	)
	graph.MustAddE(
		"program_enrolments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProgramEnrolmentsTable,
			Columns: []string{user.ProgramEnrolmentsColumn},
			Bidi:    false,
		},
		"User",
		"ProgramEnrolment",
	)
	graph.MustAddE(
		"participant_in",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantInTable,
			Columns: []string{user.ParticipantInColumn},
			Bidi:    false,
		},
		"User",
		"ProgramParticipant",
	)
	graph.MustAddE(
		"success_stories",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SuccessStoriesTable,
			Columns: []string{user.SuccessStoriesColumn},
			Bidi:    false,
		},
		"User",
		"SuccessStory",
	)
	graph.MustAddE(
		"news_articles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NewsArticlesTable,
			Columns: []string{user.NewsArticlesColumn},
			Bidi:    false,
		},
		"User",
		"NewsArticle",
	)
	graph.MustAddE(
		"created_events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedEventsTable,
			Columns: []string{user.CreatedEventsColumn},
			Bidi:    false,
		},
		"User",
		"Event",
	)
	graph.MustAddE(
		"event_registrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventRegistrationsTable,
			Columns: []string{user.EventRegistrationsColumn},
			Bidi:    false,
		},
		"User",
		"EventRegistration",
	)
	graph.MustAddE(
		"messages_sent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesSentTable,
			Columns: []string{user.MessagesSentColumn},
			Bidi:    false,
		},
		"User",
		"Message",
	)
	graph.MustAddE(
		"conversation_links",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConversationLinksTable,
			Columns: []string{user.ConversationLinksColumn},
			Bidi:    false,
		},
		"User",
		"ConversationParticipant",
	)
	graph.MustAddE(
		"volunteer_applications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VolunteerApplicationsTable,
			Columns: []string{user.VolunteerApplicationsColumn},
			Bidi:    false,
		},
		"User",
		"VolunteerApplication",
	)
	graph.MustAddE(
		"mentorship_requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipRequestsTable,
			Columns: []string{user.MentorshipRequestsColumn},
			Bidi:    false,
		},
		"User",
		"MentorshipRequest",
	)
	graph.MustAddE(
		"mentorships_mentoring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MentorshipsMentoringTable,
			Columns: []string{user.MentorshipsMentoringColumn},
			Bidi:    false,
		},
		"User",
		"MentorshipRequest",
	)
	graph.MustAddE(
		"achievements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AchievementsTable,
			Columns: []string{user.AchievementsColumn},
			Bidi:    false,
		},
		"User",
		"UserAchievement",
	)
	graph.MustAddE(
		"donations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DonationsTable,
			Columns: []string{user.DonationsColumn},
			Bidi:    false,
		},
		"User",
		"Donation",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrganizationTable,
			Columns: []string{user.OrganizationColumn},
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"managed_partnerships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ManagedPartnershipsTable,
			Columns: []string{user.ManagedPartnershipsColumn},
			Bidi:    false,
		},
		"User",
		"Partnership",
	)
	graph.MustAddE(
		"partnership_contacts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PartnershipContactsTable,
			Columns: user.PartnershipContactsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Partnership",
	)
	graph.MustAddE(
		"site_visits",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SiteVisitsTable,
			Columns: []string{user.SiteVisitsColumn},
			Bidi:    false,
		},
		"User",
		"SiteVisit",
	)
	graph.MustAddE(
		"document_uploads",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DocumentUploadsTable,
			Columns: []string{user.DocumentUploadsColumn},
			Bidi:    false,
		},
		"User",
		"Document",
	)
	graph.MustAddE(
		"activity_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ActivityLogsTable,
			Columns: []string{user.ActivityLogsColumn},
			Bidi:    false,
		},
		"User",
		"ActivityLog",
	)
	graph.MustAddE(
		"consents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ConsentsTable,
			Columns: []string{user.ConsentsColumn},
			Bidi:    false,
		},
		"User",
		"UserConsent",
	)
	graph.MustAddE(
		"onboarding",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OnboardingTable,
			Columns: []string{user.OnboardingColumn},
			Bidi:    false,
		},
		"User",
		"UserOnboarding",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.UserTable,
			Columns: []string{userachievement.UserColumn},
			Bidi:    false,
		},
		"UserAchievement",
		"User",
	)
	graph.MustAddE(
		"badge",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userachievement.BadgeTable,
			Columns: []string{userachievement.BadgeColumn},
			Bidi:    false,
		},
		"UserAchievement",
		"Badge",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userconsent.UserTable,
			Columns: []string{userconsent.UserColumn},
			Bidi:    false,
		},
		"UserConsent",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   useronboarding.UserTable,
			Columns: []string{useronboarding.UserColumn},
			Bidi:    false,
		},
		"UserOnboarding",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userprofile.UserTable,
			Columns: []string{userprofile.UserColumn},
			Bidi:    false,
		},
		"UserProfile",
		"User",
	)
	graph.MustAddE(
		"assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.AssignmentsTable,
			Columns: []string{userprofile.AssignmentsColumn},
			Bidi:    false,
		},
		"UserProfile",
		"VolunteerAssignment",
	)
	graph.MustAddE(
		"skills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprofile.SkillsTable,
			Columns: []string{userprofile.SkillsColumn},
			Bidi:    false,
		},
		"UserProfile",
		"UserSkill",
	)
	graph.MustAddE(
		"address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userprofile.AddressTable,
			Columns: []string{userprofile.AddressColumn},
			Bidi:    false,
		},
		"UserProfile",
		"Address",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usersession.UserTable,
			Columns: []string{usersession.UserColumn},
			Bidi:    false,
		},
		"UserSession",
		"User",
	)
	graph.MustAddE(
		"profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.ProfileTable,
			Columns: []string{userskill.ProfileColumn},
			Bidi:    false,
		},
		"UserSkill",
		"UserProfile",
	)
	graph.MustAddE(
		"skill",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
		},
		"UserSkill",
		"Skill",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerapplication.UserTable,
			Columns: []string{volunteerapplication.UserColumn},
			Bidi:    false,
		},
		"VolunteerApplication",
		"User",
	)
	graph.MustAddE(
		"interested_opportunities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   volunteerapplication.InterestedOpportunitiesTable,
			Columns: volunteerapplication.InterestedOpportunitiesPrimaryKey,
			Bidi:    false,
		},
		"VolunteerApplication",
		"VolunteerOpportunity",
	)
	graph.MustAddE(
		"opportunity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.OpportunityTable,
			Columns: []string{volunteerassignment.OpportunityColumn},
			Bidi:    false,
		},
		"VolunteerAssignment",
		"VolunteerOpportunity",
	)
	graph.MustAddE(
		"volunteer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteerassignment.VolunteerTable,
			Columns: []string{volunteerassignment.VolunteerColumn},
			Bidi:    false,
		},
		"VolunteerAssignment",
		"UserProfile",
	)
	graph.MustAddE(
		"program",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   volunteeropportunity.ProgramTable,
			Columns: []string{volunteeropportunity.ProgramColumn},
			Bidi:    false,
		},
		"VolunteerOpportunity",
		"Program",
	)
	graph.MustAddE(
		"interested_volunteers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   volunteeropportunity.InterestedVolunteersTable,
			Columns: volunteeropportunity.InterestedVolunteersPrimaryKey,
			Bidi:    false,
		},
		"VolunteerOpportunity",
		"VolunteerApplication",
	)
	graph.MustAddE(
		"assignments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   volunteeropportunity.AssignmentsTable,
			Columns: []string{volunteeropportunity.AssignmentsColumn},
			Bidi:    false,
		},
		"VolunteerOpportunity",
		"VolunteerAssignment",
	)
	graph.MustAddE(
		"agenda_item",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vote.AgendaItemTable,
			Columns: []string{vote.AgendaItemColumn},
			Bidi:    false,
		},
		"Vote",
		"AgendaItem",
	)
	graph.MustAddE(
		"ballots",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vote.BallotsTable,
			Columns: []string{vote.BallotsColumn},
			Bidi:    false,
		},
		"Vote",
		"Ballot",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *AccordionItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccordionItemQuery builder.
func (_q *AccordionItemQuery) Filter() *AccordionItemFilter {
	return &AccordionItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AccordionItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccordionItemMutation builder.
func (m *AccordionItemMutation) Filter() *AccordionItemFilter {
	return &AccordionItemFilter{config: m.config, predicateAdder: m}
}

// AccordionItemFilter provides a generic filtering capability at runtime for AccordionItemQuery.
type AccordionItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccordionItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AccordionItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(accordionitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *AccordionItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(accordionitem.FieldOrder))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *AccordionItemFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(accordionitem.FieldTitle))
}

// WhereContent applies the entql json.RawMessage predicate on the content field.
func (f *AccordionItemFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(accordionitem.FieldContent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AccordionItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(accordionitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AccordionItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(accordionitem.FieldUpdatedAt))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *AccordionItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *AccordionItemFilter) WhereHasBlockWith(preds ...predicate.BlockAccordion) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ActionItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActionItemQuery builder.
func (_q *ActionItemQuery) Filter() *ActionItemFilter {
	return &ActionItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ActionItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActionItemMutation builder.
func (m *ActionItemMutation) Filter() *ActionItemFilter {
	return &ActionItemFilter{config: m.config, predicateAdder: m}
}

// ActionItemFilter provides a generic filtering capability at runtime for ActionItemQuery.
type ActionItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ActionItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ActionItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(actionitem.FieldID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ActionItemFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(actionitem.FieldDescription))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *ActionItemFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(actionitem.FieldOwnerID))
}

// WhereDueDate applies the entql time.Time predicate on the due_date field.
func (f *ActionItemFilter) WhereDueDate(p entql.TimeP) {
	f.Where(p.Field(actionitem.FieldDueDate))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ActionItemFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(actionitem.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ActionItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(actionitem.FieldCreatedAt))
}

// WhereCompletedAt applies the entql time.Time predicate on the completed_at field.
func (f *ActionItemFilter) WhereCompletedAt(p entql.TimeP) {
	f.Where(p.Field(actionitem.FieldCompletedAt))
}

// WhereHasAgendaItem applies a predicate to check if query has an edge agenda_item.
func (f *ActionItemFilter) WhereHasAgendaItem() {
	f.Where(entql.HasEdge("agenda_item"))
}

// WhereHasAgendaItemWith applies a predicate to check if query has an edge agenda_item with a given conditions (other predicates).
func (f *ActionItemFilter) WhereHasAgendaItemWith(preds ...predicate.AgendaItem) {
	f.Where(entql.HasEdgeWith("agenda_item", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ActivityLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActivityLogQuery builder.
func (_q *ActivityLogQuery) Filter() *ActivityLogFilter {
	return &ActivityLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ActivityLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActivityLogMutation builder.
func (m *ActivityLogMutation) Filter() *ActivityLogFilter {
	return &ActivityLogFilter{config: m.config, predicateAdder: m}
}

// ActivityLogFilter provides a generic filtering capability at runtime for ActivityLogQuery.
type ActivityLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ActivityLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ActivityLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(activitylog.FieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *ActivityLogFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldType))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ActivityLogFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ActivityLogFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldDescription))
}

// WhereLinkHref applies the entql string predicate on the link_href field.
func (f *ActivityLogFilter) WhereLinkHref(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldLinkHref))
}

// WhereEntityType applies the entql string predicate on the entity_type field.
func (f *ActivityLogFilter) WhereEntityType(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldEntityType))
}

// WhereEntityID applies the entql string predicate on the entity_id field.
func (f *ActivityLogFilter) WhereEntityID(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldEntityID))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *ActivityLogFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(activitylog.FieldMetadata))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *ActivityLogFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *ActivityLogFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(activitylog.FieldUserAgent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ActivityLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(activitylog.FieldCreatedAt))
}

// WhereHasActor applies a predicate to check if query has an edge actor.
func (f *ActivityLogFilter) WhereHasActor() {
	f.Where(entql.HasEdge("actor"))
}

// WhereHasActorWith applies a predicate to check if query has an edge actor with a given conditions (other predicates).
func (f *ActivityLogFilter) WhereHasActorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("actor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AddressQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AddressQuery builder.
func (_q *AddressQuery) Filter() *AddressFilter {
	return &AddressFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AddressMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AddressMutation builder.
func (m *AddressMutation) Filter() *AddressFilter {
	return &AddressFilter{config: m.config, predicateAdder: m}
}

// AddressFilter provides a generic filtering capability at runtime for AddressQuery.
type AddressFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AddressFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AddressFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(address.FieldID))
}

// WhereStreet1 applies the entql string predicate on the street1 field.
func (f *AddressFilter) WhereStreet1(p entql.StringP) {
	f.Where(p.Field(address.FieldStreet1))
}

// WhereStreet2 applies the entql string predicate on the street2 field.
func (f *AddressFilter) WhereStreet2(p entql.StringP) {
	f.Where(p.Field(address.FieldStreet2))
}

// WhereCity applies the entql string predicate on the city field.
func (f *AddressFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(address.FieldCity))
}

// WhereState applies the entql string predicate on the state field.
func (f *AddressFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(address.FieldState))
}

// WherePostalCode applies the entql string predicate on the postal_code field.
func (f *AddressFilter) WherePostalCode(p entql.StringP) {
	f.Where(p.Field(address.FieldPostalCode))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *AddressFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(address.FieldCountry))
}

// WhereHasUserProfiles applies a predicate to check if query has an edge user_profiles.
func (f *AddressFilter) WhereHasUserProfiles() {
	f.Where(entql.HasEdge("user_profiles"))
}

// WhereHasUserProfilesWith applies a predicate to check if query has an edge user_profiles with a given conditions (other predicates).
func (f *AddressFilter) WhereHasUserProfilesWith(preds ...predicate.UserProfile) {
	f.Where(entql.HasEdgeWith("user_profiles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *AddressFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *AddressFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AgendaQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AgendaQuery builder.
func (_q *AgendaQuery) Filter() *AgendaFilter {
	return &AgendaFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AgendaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AgendaMutation builder.
func (m *AgendaMutation) Filter() *AgendaFilter {
	return &AgendaFilter{config: m.config, predicateAdder: m}
}

// AgendaFilter provides a generic filtering capability at runtime for AgendaQuery.
type AgendaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AgendaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AgendaFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(agenda.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *AgendaFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(agenda.FieldStatus))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *AgendaFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *AgendaFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *AgendaFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *AgendaFilter) WhereHasItemsWith(preds ...predicate.AgendaItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentorshipSession applies a predicate to check if query has an edge mentorship_session.
func (f *AgendaFilter) WhereHasMentorshipSession() {
	f.Where(entql.HasEdge("mentorship_session"))
}

// WhereHasMentorshipSessionWith applies a predicate to check if query has an edge mentorship_session with a given conditions (other predicates).
func (f *AgendaFilter) WhereHasMentorshipSessionWith(preds ...predicate.MentorshipSession) {
	f.Where(entql.HasEdgeWith("mentorship_session", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AgendaItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AgendaItemQuery builder.
func (_q *AgendaItemQuery) Filter() *AgendaItemFilter {
	return &AgendaItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AgendaItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AgendaItemMutation builder.
func (m *AgendaItemMutation) Filter() *AgendaItemFilter {
	return &AgendaItemFilter{config: m.config, predicateAdder: m}
}

// AgendaItemFilter provides a generic filtering capability at runtime for AgendaItemQuery.
type AgendaItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AgendaItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AgendaItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(agendaitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *AgendaItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(agendaitem.FieldOrder))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AgendaItemFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(agendaitem.FieldTitle))
}

// WherePresenter applies the entql string predicate on the presenter field.
func (f *AgendaItemFilter) WherePresenter(p entql.StringP) {
	f.Where(p.Field(agendaitem.FieldPresenter))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *AgendaItemFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(agendaitem.FieldNotes))
}

// WhereDuration applies the entql int predicate on the duration field.
func (f *AgendaItemFilter) WhereDuration(p entql.IntP) {
	f.Where(p.Field(agendaitem.FieldDuration))
}

// WhereHasAgenda applies a predicate to check if query has an edge agenda.
func (f *AgendaItemFilter) WhereHasAgenda() {
	f.Where(entql.HasEdge("agenda"))
}

// WhereHasAgendaWith applies a predicate to check if query has an edge agenda with a given conditions (other predicates).
func (f *AgendaItemFilter) WhereHasAgendaWith(preds ...predicate.Agenda) {
	f.Where(entql.HasEdgeWith("agenda", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVote applies a predicate to check if query has an edge vote.
func (f *AgendaItemFilter) WhereHasVote() {
	f.Where(entql.HasEdge("vote"))
}

// WhereHasVoteWith applies a predicate to check if query has an edge vote with a given conditions (other predicates).
func (f *AgendaItemFilter) WhereHasVoteWith(preds ...predicate.Vote) {
	f.Where(entql.HasEdgeWith("vote", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActionItems applies a predicate to check if query has an edge action_items.
func (f *AgendaItemFilter) WhereHasActionItems() {
	f.Where(entql.HasEdge("action_items"))
}

// WhereHasActionItemsWith applies a predicate to check if query has an edge action_items with a given conditions (other predicates).
func (f *AgendaItemFilter) WhereHasActionItemsWith(preds ...predicate.ActionItem) {
	f.Where(entql.HasEdgeWith("action_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AnalyticsDashboardQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AnalyticsDashboardQuery builder.
func (_q *AnalyticsDashboardQuery) Filter() *AnalyticsDashboardFilter {
	return &AnalyticsDashboardFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AnalyticsDashboardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AnalyticsDashboardMutation builder.
func (m *AnalyticsDashboardMutation) Filter() *AnalyticsDashboardFilter {
	return &AnalyticsDashboardFilter{config: m.config, predicateAdder: m}
}

// AnalyticsDashboardFilter provides a generic filtering capability at runtime for AnalyticsDashboardQuery.
type AnalyticsDashboardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AnalyticsDashboardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AnalyticsDashboardFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(analyticsdashboard.FieldID))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *AnalyticsDashboardFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(analyticsdashboard.FieldName))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *AnalyticsDashboardFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(analyticsdashboard.FieldDescription))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *AnalyticsDashboardFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(analyticsdashboard.FieldSlug))
}

// WhereLayout applies the entql json.RawMessage predicate on the layout field.
func (f *AnalyticsDashboardFilter) WhereLayout(p entql.BytesP) {
	f.Where(p.Field(analyticsdashboard.FieldLayout))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *AnalyticsDashboardFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(analyticsdashboard.FieldIsDefault))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *AnalyticsDashboardFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(analyticsdashboard.FieldIsPublic))
}

// WhereSharedWith applies the entql json.RawMessage predicate on the shared_with field.
func (f *AnalyticsDashboardFilter) WhereSharedWith(p entql.BytesP) {
	f.Where(p.Field(analyticsdashboard.FieldSharedWith))
}

// WhereAllowedRoles applies the entql json.RawMessage predicate on the allowed_roles field.
func (f *AnalyticsDashboardFilter) WhereAllowedRoles(p entql.BytesP) {
	f.Where(p.Field(analyticsdashboard.FieldAllowedRoles))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AnalyticsDashboardFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(analyticsdashboard.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AnalyticsDashboardFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(analyticsdashboard.FieldUpdatedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *AnalyticsDashboardFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *AnalyticsDashboardFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWidgets applies a predicate to check if query has an edge widgets.
func (f *AnalyticsDashboardFilter) WhereHasWidgets() {
	f.Where(entql.HasEdge("widgets"))
}

// WhereHasWidgetsWith applies a predicate to check if query has an edge widgets with a given conditions (other predicates).
func (f *AnalyticsDashboardFilter) WhereHasWidgetsWith(preds ...predicate.DashboardWidget) {
	f.Where(entql.HasEdgeWith("widgets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AnalyticsEventQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AnalyticsEventQuery builder.
func (_q *AnalyticsEventQuery) Filter() *AnalyticsEventFilter {
	return &AnalyticsEventFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AnalyticsEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AnalyticsEventMutation builder.
func (m *AnalyticsEventMutation) Filter() *AnalyticsEventFilter {
	return &AnalyticsEventFilter{config: m.config, predicateAdder: m}
}

// AnalyticsEventFilter provides a generic filtering capability at runtime for AnalyticsEventQuery.
type AnalyticsEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AnalyticsEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AnalyticsEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(analyticsevent.FieldID))
}

// WhereEventName applies the entql string predicate on the event_name field.
func (f *AnalyticsEventFilter) WhereEventName(p entql.StringP) {
	f.Where(p.Field(analyticsevent.FieldEventName))
}

// WhereProperties applies the entql json.RawMessage predicate on the properties field.
func (f *AnalyticsEventFilter) WhereProperties(p entql.BytesP) {
	f.Where(p.Field(analyticsevent.FieldProperties))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AnalyticsEventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(analyticsevent.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *AnalyticsEventFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *AnalyticsEventFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *AppSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppSettingQuery builder.
func (_q *AppSettingQuery) Filter() *AppSettingFilter {
	return &AppSettingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AppSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppSettingMutation builder.
func (m *AppSettingMutation) Filter() *AppSettingFilter {
	return &AppSettingFilter{config: m.config, predicateAdder: m}
}

// AppSettingFilter provides a generic filtering capability at runtime for AppSettingQuery.
type AppSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AppSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(appsetting.FieldID))
}

// WhereValue applies the entql json.RawMessage predicate on the value field.
func (f *AppSettingFilter) WhereValue(p entql.BytesP) {
	f.Where(p.Field(appsetting.FieldValue))
}

// WhereGroup applies the entql string predicate on the group field.
func (f *AppSettingFilter) WhereGroup(p entql.StringP) {
	f.Where(p.Field(appsetting.FieldGroup))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *AppSettingFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(appsetting.FieldDescription))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AppSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(appsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AppSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(appsetting.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (_q *AuditLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuditLogQuery builder.
func (_q *AuditLogQuery) Filter() *AuditLogFilter {
	return &AuditLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *AuditLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuditLogMutation builder.
func (m *AuditLogMutation) Filter() *AuditLogFilter {
	return &AuditLogFilter{config: m.config, predicateAdder: m}
}

// AuditLogFilter provides a generic filtering capability at runtime for AuditLogQuery.
type AuditLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuditLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AuditLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(auditlog.FieldID))
}

// WhereAction applies the entql string predicate on the action field.
func (f *AuditLogFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(auditlog.FieldAction))
}

// WhereMeta applies the entql json.RawMessage predicate on the meta field.
func (f *AuditLogFilter) WhereMeta(p entql.BytesP) {
	f.Where(p.Field(auditlog.FieldMeta))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AuditLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(auditlog.FieldCreatedAt))
}

// WhereEntityID applies the entql string predicate on the entity_id field.
func (f *AuditLogFilter) WhereEntityID(p entql.StringP) {
	f.Where(p.Field(auditlog.FieldEntityID))
}

// WhereEntityType applies the entql string predicate on the entity_type field.
func (f *AuditLogFilter) WhereEntityType(p entql.StringP) {
	f.Where(p.Field(auditlog.FieldEntityType))
}

// WhereHasActor applies a predicate to check if query has an edge actor.
func (f *AuditLogFilter) WhereHasActor() {
	f.Where(entql.HasEdge("actor"))
}

// WhereHasActorWith applies a predicate to check if query has an edge actor with a given conditions (other predicates).
func (f *AuditLogFilter) WhereHasActorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("actor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BadgeQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BadgeQuery builder.
func (_q *BadgeQuery) Filter() *BadgeFilter {
	return &BadgeFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BadgeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BadgeMutation builder.
func (m *BadgeMutation) Filter() *BadgeFilter {
	return &BadgeFilter{config: m.config, predicateAdder: m}
}

// BadgeFilter provides a generic filtering capability at runtime for BadgeQuery.
type BadgeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BadgeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BadgeFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(badge.FieldID))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *BadgeFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(badge.FieldName))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BadgeFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(badge.FieldDescription))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *BadgeFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(badge.FieldImageURL))
}

// WhereCriteria applies the entql string predicate on the criteria field.
func (f *BadgeFilter) WhereCriteria(p entql.StringP) {
	f.Where(p.Field(badge.FieldCriteria))
}

// WhereHasUserAchievements applies a predicate to check if query has an edge user_achievements.
func (f *BadgeFilter) WhereHasUserAchievements() {
	f.Where(entql.HasEdge("user_achievements"))
}

// WhereHasUserAchievementsWith applies a predicate to check if query has an edge user_achievements with a given conditions (other predicates).
func (f *BadgeFilter) WhereHasUserAchievementsWith(preds ...predicate.UserAchievement) {
	f.Where(entql.HasEdgeWith("user_achievements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BallotQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BallotQuery builder.
func (_q *BallotQuery) Filter() *BallotFilter {
	return &BallotFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BallotMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BallotMutation builder.
func (m *BallotMutation) Filter() *BallotFilter {
	return &BallotFilter{config: m.config, predicateAdder: m}
}

// BallotFilter provides a generic filtering capability at runtime for BallotQuery.
type BallotFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BallotFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BallotFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(ballot.FieldID))
}

// WhereVoterID applies the entql string predicate on the voter_id field.
func (f *BallotFilter) WhereVoterID(p entql.StringP) {
	f.Where(p.Field(ballot.FieldVoterID))
}

// WhereChoice applies the entql string predicate on the choice field.
func (f *BallotFilter) WhereChoice(p entql.StringP) {
	f.Where(p.Field(ballot.FieldChoice))
}

// WhereCastAt applies the entql time.Time predicate on the cast_at field.
func (f *BallotFilter) WhereCastAt(p entql.TimeP) {
	f.Where(p.Field(ballot.FieldCastAt))
}

// WhereHasVote applies a predicate to check if query has an edge vote.
func (f *BallotFilter) WhereHasVote() {
	f.Where(entql.HasEdge("vote"))
}

// WhereHasVoteWith applies a predicate to check if query has an edge vote with a given conditions (other predicates).
func (f *BallotFilter) WhereHasVoteWith(preds ...predicate.Vote) {
	f.Where(entql.HasEdgeWith("vote", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockAccordionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockAccordionQuery builder.
func (_q *BlockAccordionQuery) Filter() *BlockAccordionFilter {
	return &BlockAccordionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockAccordionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockAccordionMutation builder.
func (m *BlockAccordionMutation) Filter() *BlockAccordionFilter {
	return &BlockAccordionFilter{config: m.config, predicateAdder: m}
}

// BlockAccordionFilter provides a generic filtering capability at runtime for BlockAccordionQuery.
type BlockAccordionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockAccordionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockAccordionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockaccordion.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockAccordionFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockaccordion.FieldInternalName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockAccordionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockaccordion.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockAccordionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockaccordion.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockAccordionFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockAccordionFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *BlockAccordionFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *BlockAccordionFilter) WhereHasItemsWith(preds ...predicate.AccordionItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockContactFormQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockContactFormQuery builder.
func (_q *BlockContactFormQuery) Filter() *BlockContactFormFilter {
	return &BlockContactFormFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockContactFormMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockContactFormMutation builder.
func (m *BlockContactFormMutation) Filter() *BlockContactFormFilter {
	return &BlockContactFormFilter{config: m.config, predicateAdder: m}
}

// BlockContactFormFilter provides a generic filtering capability at runtime for BlockContactFormQuery.
type BlockContactFormFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockContactFormFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockContactFormFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockcontactform.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockContactFormFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockcontactform.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockContactFormFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockcontactform.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockContactFormFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockcontactform.FieldDescription))
}

// WhereShowNameField applies the entql bool predicate on the show_name_field field.
func (f *BlockContactFormFilter) WhereShowNameField(p entql.BoolP) {
	f.Where(p.Field(blockcontactform.FieldShowNameField))
}

// WhereShowPhoneField applies the entql bool predicate on the show_phone_field field.
func (f *BlockContactFormFilter) WhereShowPhoneField(p entql.BoolP) {
	f.Where(p.Field(blockcontactform.FieldShowPhoneField))
}

// WhereShowSubjectField applies the entql bool predicate on the show_subject_field field.
func (f *BlockContactFormFilter) WhereShowSubjectField(p entql.BoolP) {
	f.Where(p.Field(blockcontactform.FieldShowSubjectField))
}

// WhereShowOrganizationField applies the entql bool predicate on the show_organization_field field.
func (f *BlockContactFormFilter) WhereShowOrganizationField(p entql.BoolP) {
	f.Where(p.Field(blockcontactform.FieldShowOrganizationField))
}

// WhereRecipientEmail applies the entql string predicate on the recipient_email field.
func (f *BlockContactFormFilter) WhereRecipientEmail(p entql.StringP) {
	f.Where(p.Field(blockcontactform.FieldRecipientEmail))
}

// WhereSuccessMessage applies the entql json.RawMessage predicate on the success_message field.
func (f *BlockContactFormFilter) WhereSuccessMessage(p entql.BytesP) {
	f.Where(p.Field(blockcontactform.FieldSuccessMessage))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockContactFormFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockcontactform.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockContactFormFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockcontactform.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockContactFormFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockContactFormFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockCtaQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockCtaQuery builder.
func (_q *BlockCtaQuery) Filter() *BlockCtaFilter {
	return &BlockCtaFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockCtaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockCtaMutation builder.
func (m *BlockCtaMutation) Filter() *BlockCtaFilter {
	return &BlockCtaFilter{config: m.config, predicateAdder: m}
}

// BlockCtaFilter provides a generic filtering capability at runtime for BlockCtaQuery.
type BlockCtaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockCtaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockCtaFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockcta.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockCtaFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockCtaFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockcta.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockCtaFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockcta.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockCtaFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockcta.FieldDescription))
}

// WherePrimaryButtonText applies the entql json.RawMessage predicate on the primary_button_text field.
func (f *BlockCtaFilter) WherePrimaryButtonText(p entql.BytesP) {
	f.Where(p.Field(blockcta.FieldPrimaryButtonText))
}

// WherePrimaryButtonHref applies the entql string predicate on the primary_button_href field.
func (f *BlockCtaFilter) WherePrimaryButtonHref(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldPrimaryButtonHref))
}

// WherePrimaryButtonStyle applies the entql string predicate on the primary_button_style field.
func (f *BlockCtaFilter) WherePrimaryButtonStyle(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldPrimaryButtonStyle))
}

// WhereSecondaryButtonText applies the entql json.RawMessage predicate on the secondary_button_text field.
func (f *BlockCtaFilter) WhereSecondaryButtonText(p entql.BytesP) {
	f.Where(p.Field(blockcta.FieldSecondaryButtonText))
}

// WhereSecondaryButtonHref applies the entql string predicate on the secondary_button_href field.
func (f *BlockCtaFilter) WhereSecondaryButtonHref(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldSecondaryButtonHref))
}

// WhereSecondaryButtonStyle applies the entql string predicate on the secondary_button_style field.
func (f *BlockCtaFilter) WhereSecondaryButtonStyle(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldSecondaryButtonStyle))
}

// WhereTextAlign applies the entql string predicate on the text_align field.
func (f *BlockCtaFilter) WhereTextAlign(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldTextAlign))
}

// WhereColorScheme applies the entql string predicate on the color_scheme field.
func (f *BlockCtaFilter) WhereColorScheme(p entql.StringP) {
	f.Where(p.Field(blockcta.FieldColorScheme))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockCtaFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockcta.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockCtaFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockcta.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockCtaFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockCtaFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockDividerQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockDividerQuery builder.
func (_q *BlockDividerQuery) Filter() *BlockDividerFilter {
	return &BlockDividerFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockDividerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockDividerMutation builder.
func (m *BlockDividerMutation) Filter() *BlockDividerFilter {
	return &BlockDividerFilter{config: m.config, predicateAdder: m}
}

// BlockDividerFilter provides a generic filtering capability at runtime for BlockDividerQuery.
type BlockDividerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockDividerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockDividerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockdivider.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockDividerFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockdivider.FieldInternalName))
}

// WhereHeight applies the entql int predicate on the height field.
func (f *BlockDividerFilter) WhereHeight(p entql.IntP) {
	f.Where(p.Field(blockdivider.FieldHeight))
}

// WhereColor applies the entql string predicate on the color field.
func (f *BlockDividerFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(blockdivider.FieldColor))
}

// WhereStyle applies the entql string predicate on the style field.
func (f *BlockDividerFilter) WhereStyle(p entql.StringP) {
	f.Where(p.Field(blockdivider.FieldStyle))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockDividerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockdivider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockDividerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockdivider.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockDividerFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockDividerFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockDonationFormQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockDonationFormQuery builder.
func (_q *BlockDonationFormQuery) Filter() *BlockDonationFormFilter {
	return &BlockDonationFormFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockDonationFormMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockDonationFormMutation builder.
func (m *BlockDonationFormMutation) Filter() *BlockDonationFormFilter {
	return &BlockDonationFormFilter{config: m.config, predicateAdder: m}
}

// BlockDonationFormFilter provides a generic filtering capability at runtime for BlockDonationFormQuery.
type BlockDonationFormFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockDonationFormFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockDonationFormFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockdonationform.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockDonationFormFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockdonationform.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockDonationFormFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockdonationform.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockDonationFormFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockdonationform.FieldDescription))
}

// WhereShowAmountButtons applies the entql bool predicate on the show_amount_buttons field.
func (f *BlockDonationFormFilter) WhereShowAmountButtons(p entql.BoolP) {
	f.Where(p.Field(blockdonationform.FieldShowAmountButtons))
}

// WhereDefaultAmounts applies the entql json.RawMessage predicate on the default_amounts field.
func (f *BlockDonationFormFilter) WhereDefaultAmounts(p entql.BytesP) {
	f.Where(p.Field(blockdonationform.FieldDefaultAmounts))
}

// WhereAllowCustomAmount applies the entql bool predicate on the allow_custom_amount field.
func (f *BlockDonationFormFilter) WhereAllowCustomAmount(p entql.BoolP) {
	f.Where(p.Field(blockdonationform.FieldAllowCustomAmount))
}

// WhereShowRecurring applies the entql bool predicate on the show_recurring field.
func (f *BlockDonationFormFilter) WhereShowRecurring(p entql.BoolP) {
	f.Where(p.Field(blockdonationform.FieldShowRecurring))
}

// WhereColorScheme applies the entql string predicate on the color_scheme field.
func (f *BlockDonationFormFilter) WhereColorScheme(p entql.StringP) {
	f.Where(p.Field(blockdonationform.FieldColorScheme))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockDonationFormFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockdonationform.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockDonationFormFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockdonationform.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockDonationFormFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockDonationFormFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockFaqQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockFaqQuery builder.
func (_q *BlockFaqQuery) Filter() *BlockFaqFilter {
	return &BlockFaqFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockFaqMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockFaqMutation builder.
func (m *BlockFaqMutation) Filter() *BlockFaqFilter {
	return &BlockFaqFilter{config: m.config, predicateAdder: m}
}

// BlockFaqFilter provides a generic filtering capability at runtime for BlockFaqQuery.
type BlockFaqFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockFaqFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockFaqFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockfaq.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockFaqFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockfaq.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockFaqFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockfaq.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockFaqFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockfaq.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockFaqFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockfaq.FieldDescription))
}

// WhereAllowMultipleOpen applies the entql bool predicate on the allow_multiple_open field.
func (f *BlockFaqFilter) WhereAllowMultipleOpen(p entql.BoolP) {
	f.Where(p.Field(blockfaq.FieldAllowMultipleOpen))
}

// WhereDefaultOpenFirst applies the entql bool predicate on the default_open_first field.
func (f *BlockFaqFilter) WhereDefaultOpenFirst(p entql.BoolP) {
	f.Where(p.Field(blockfaq.FieldDefaultOpenFirst))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockFaqFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockfaq.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockFaqFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockfaq.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockFaqFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockFaqFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *BlockFaqFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *BlockFaqFilter) WhereHasItemsWith(preds ...predicate.FaqItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockGalleryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockGalleryQuery builder.
func (_q *BlockGalleryQuery) Filter() *BlockGalleryFilter {
	return &BlockGalleryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockGalleryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockGalleryMutation builder.
func (m *BlockGalleryMutation) Filter() *BlockGalleryFilter {
	return &BlockGalleryFilter{config: m.config, predicateAdder: m}
}

// BlockGalleryFilter provides a generic filtering capability at runtime for BlockGalleryQuery.
type BlockGalleryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockGalleryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockGalleryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockgallery.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockGalleryFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockgallery.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockGalleryFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockgallery.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockGalleryFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockgallery.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockGalleryFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blockgallery.FieldLayout))
}

// WhereColumns applies the entql int predicate on the columns field.
func (f *BlockGalleryFilter) WhereColumns(p entql.IntP) {
	f.Where(p.Field(blockgallery.FieldColumns))
}

// WhereSpacing applies the entql string predicate on the spacing field.
func (f *BlockGalleryFilter) WhereSpacing(p entql.StringP) {
	f.Where(p.Field(blockgallery.FieldSpacing))
}

// WhereAspectRatio applies the entql string predicate on the aspect_ratio field.
func (f *BlockGalleryFilter) WhereAspectRatio(p entql.StringP) {
	f.Where(p.Field(blockgallery.FieldAspectRatio))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockGalleryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockgallery.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockGalleryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockgallery.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockGalleryFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockGalleryFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasImages applies a predicate to check if query has an edge images.
func (f *BlockGalleryFilter) WhereHasImages() {
	f.Where(entql.HasEdge("images"))
}

// WhereHasImagesWith applies a predicate to check if query has an edge images with a given conditions (other predicates).
func (f *BlockGalleryFilter) WhereHasImagesWith(preds ...predicate.GalleryImage) {
	f.Where(entql.HasEdgeWith("images", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockHeroQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockHeroQuery builder.
func (_q *BlockHeroQuery) Filter() *BlockHeroFilter {
	return &BlockHeroFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockHeroMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockHeroMutation builder.
func (m *BlockHeroMutation) Filter() *BlockHeroFilter {
	return &BlockHeroFilter{config: m.config, predicateAdder: m}
}

// BlockHeroFilter provides a generic filtering capability at runtime for BlockHeroQuery.
type BlockHeroFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockHeroFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockHeroFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockhero.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockHeroFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockHeroFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockhero.FieldTitle))
}

// WhereSubtitle applies the entql json.RawMessage predicate on the subtitle field.
func (f *BlockHeroFilter) WhereSubtitle(p entql.BytesP) {
	f.Where(p.Field(blockhero.FieldSubtitle))
}

// WhereCtaButtons applies the entql json.RawMessage predicate on the cta_buttons field.
func (f *BlockHeroFilter) WhereCtaButtons(p entql.BytesP) {
	f.Where(p.Field(blockhero.FieldCtaButtons))
}

// WhereBackgroundImageURL applies the entql string predicate on the background_image_url field.
func (f *BlockHeroFilter) WhereBackgroundImageURL(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldBackgroundImageURL))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockHeroFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockhero.FieldBadge))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockHeroFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockhero.FieldDescription))
}

// WhereTextAlign applies the entql string predicate on the text_align field.
func (f *BlockHeroFilter) WhereTextAlign(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldTextAlign))
}

// WhereColorScheme applies the entql string predicate on the color_scheme field.
func (f *BlockHeroFilter) WhereColorScheme(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldColorScheme))
}

// WhereMinHeight applies the entql string predicate on the min_height field.
func (f *BlockHeroFilter) WhereMinHeight(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldMinHeight))
}

// WhereBackgroundVideoURL applies the entql string predicate on the background_video_url field.
func (f *BlockHeroFilter) WhereBackgroundVideoURL(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldBackgroundVideoURL))
}

// WhereOverlayColor applies the entql string predicate on the overlay_color field.
func (f *BlockHeroFilter) WhereOverlayColor(p entql.StringP) {
	f.Where(p.Field(blockhero.FieldOverlayColor))
}

// WhereOverlayOpacity applies the entql float64 predicate on the overlay_opacity field.
func (f *BlockHeroFilter) WhereOverlayOpacity(p entql.Float64P) {
	f.Where(p.Field(blockhero.FieldOverlayOpacity))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockHeroFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockHeroFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockMapQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockMapQuery builder.
func (_q *BlockMapQuery) Filter() *BlockMapFilter {
	return &BlockMapFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockMapMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockMapMutation builder.
func (m *BlockMapMutation) Filter() *BlockMapFilter {
	return &BlockMapFilter{config: m.config, predicateAdder: m}
}

// BlockMapFilter provides a generic filtering capability at runtime for BlockMapQuery.
type BlockMapFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockMapFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockMapFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockmap.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockMapFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockmap.FieldInternalName))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *BlockMapFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(blockmap.FieldLatitude))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *BlockMapFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(blockmap.FieldLongitude))
}

// WhereZoom applies the entql int predicate on the zoom field.
func (f *BlockMapFilter) WhereZoom(p entql.IntP) {
	f.Where(p.Field(blockmap.FieldZoom))
}

// WhereMarkers applies the entql json.RawMessage predicate on the markers field.
func (f *BlockMapFilter) WhereMarkers(p entql.BytesP) {
	f.Where(p.Field(blockmap.FieldMarkers))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockMapFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockmap.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockMapFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockmap.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockMapFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockMapFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockNewsletterSignupQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockNewsletterSignupQuery builder.
func (_q *BlockNewsletterSignupQuery) Filter() *BlockNewsletterSignupFilter {
	return &BlockNewsletterSignupFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockNewsletterSignupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockNewsletterSignupMutation builder.
func (m *BlockNewsletterSignupMutation) Filter() *BlockNewsletterSignupFilter {
	return &BlockNewsletterSignupFilter{config: m.config, predicateAdder: m}
}

// BlockNewsletterSignupFilter provides a generic filtering capability at runtime for BlockNewsletterSignupQuery.
type BlockNewsletterSignupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockNewsletterSignupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockNewsletterSignupFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocknewslettersignup.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockNewsletterSignupFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocknewslettersignup.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockNewsletterSignupFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blocknewslettersignup.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockNewsletterSignupFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blocknewslettersignup.FieldDescription))
}

// WhereButtonText applies the entql json.RawMessage predicate on the button_text field.
func (f *BlockNewsletterSignupFilter) WhereButtonText(p entql.BytesP) {
	f.Where(p.Field(blocknewslettersignup.FieldButtonText))
}

// WhereShowNameField applies the entql bool predicate on the show_name_field field.
func (f *BlockNewsletterSignupFilter) WhereShowNameField(p entql.BoolP) {
	f.Where(p.Field(blocknewslettersignup.FieldShowNameField))
}

// WherePlaceholder applies the entql json.RawMessage predicate on the placeholder field.
func (f *BlockNewsletterSignupFilter) WherePlaceholder(p entql.BytesP) {
	f.Where(p.Field(blocknewslettersignup.FieldPlaceholder))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockNewsletterSignupFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blocknewslettersignup.FieldLayout))
}

// WhereColorScheme applies the entql string predicate on the color_scheme field.
func (f *BlockNewsletterSignupFilter) WhereColorScheme(p entql.StringP) {
	f.Where(p.Field(blocknewslettersignup.FieldColorScheme))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockNewsletterSignupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocknewslettersignup.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockNewsletterSignupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocknewslettersignup.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockNewsletterSignupFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockNewsletterSignupFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockPartnerLogosQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockPartnerLogosQuery builder.
func (_q *BlockPartnerLogosQuery) Filter() *BlockPartnerLogosFilter {
	return &BlockPartnerLogosFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockPartnerLogosMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockPartnerLogosMutation builder.
func (m *BlockPartnerLogosMutation) Filter() *BlockPartnerLogosFilter {
	return &BlockPartnerLogosFilter{config: m.config, predicateAdder: m}
}

// BlockPartnerLogosFilter provides a generic filtering capability at runtime for BlockPartnerLogosQuery.
type BlockPartnerLogosFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockPartnerLogosFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockPartnerLogosFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockpartnerlogos.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockPartnerLogosFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockpartnerlogos.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockPartnerLogosFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockpartnerlogos.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockPartnerLogosFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockpartnerlogos.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockPartnerLogosFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blockpartnerlogos.FieldLayout))
}

// WhereItemsPerRow applies the entql int predicate on the items_per_row field.
func (f *BlockPartnerLogosFilter) WhereItemsPerRow(p entql.IntP) {
	f.Where(p.Field(blockpartnerlogos.FieldItemsPerRow))
}

// WhereGrayscale applies the entql bool predicate on the grayscale field.
func (f *BlockPartnerLogosFilter) WhereGrayscale(p entql.BoolP) {
	f.Where(p.Field(blockpartnerlogos.FieldGrayscale))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockPartnerLogosFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockpartnerlogos.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockPartnerLogosFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockpartnerlogos.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockPartnerLogosFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockPartnerLogosFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPartners applies a predicate to check if query has an edge partners.
func (f *BlockPartnerLogosFilter) WhereHasPartners() {
	f.Where(entql.HasEdge("partners"))
}

// WhereHasPartnersWith applies a predicate to check if query has an edge partners with a given conditions (other predicates).
func (f *BlockPartnerLogosFilter) WhereHasPartnersWith(preds ...predicate.PartnerLogoItem) {
	f.Where(entql.HasEdgeWith("partners", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockProgramCardsQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockProgramCardsQuery builder.
func (_q *BlockProgramCardsQuery) Filter() *BlockProgramCardsFilter {
	return &BlockProgramCardsFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockProgramCardsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockProgramCardsMutation builder.
func (m *BlockProgramCardsMutation) Filter() *BlockProgramCardsFilter {
	return &BlockProgramCardsFilter{config: m.config, predicateAdder: m}
}

// BlockProgramCardsFilter provides a generic filtering capability at runtime for BlockProgramCardsQuery.
type BlockProgramCardsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockProgramCardsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockProgramCardsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockprogramcards.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockProgramCardsFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockprogramcards.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockProgramCardsFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockprogramcards.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockProgramCardsFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockprogramcards.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockProgramCardsFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockprogramcards.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockProgramCardsFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blockprogramcards.FieldLayout))
}

// WhereItemsPerRow applies the entql int predicate on the items_per_row field.
func (f *BlockProgramCardsFilter) WhereItemsPerRow(p entql.IntP) {
	f.Where(p.Field(blockprogramcards.FieldItemsPerRow))
}

// WhereShowAllPrograms applies the entql bool predicate on the show_all_programs field.
func (f *BlockProgramCardsFilter) WhereShowAllPrograms(p entql.BoolP) {
	f.Where(p.Field(blockprogramcards.FieldShowAllPrograms))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockProgramCardsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockprogramcards.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockProgramCardsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockprogramcards.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockProgramCardsFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockProgramCardsFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSelectedPrograms applies a predicate to check if query has an edge selected_programs.
func (f *BlockProgramCardsFilter) WhereHasSelectedPrograms() {
	f.Where(entql.HasEdge("selected_programs"))
}

// WhereHasSelectedProgramsWith applies a predicate to check if query has an edge selected_programs with a given conditions (other predicates).
func (f *BlockProgramCardsFilter) WhereHasSelectedProgramsWith(preds ...predicate.ProgramCardItem) {
	f.Where(entql.HasEdgeWith("selected_programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockStatsQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockStatsQuery builder.
func (_q *BlockStatsQuery) Filter() *BlockStatsFilter {
	return &BlockStatsFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockStatsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockStatsMutation builder.
func (m *BlockStatsMutation) Filter() *BlockStatsFilter {
	return &BlockStatsFilter{config: m.config, predicateAdder: m}
}

// BlockStatsFilter provides a generic filtering capability at runtime for BlockStatsQuery.
type BlockStatsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockStatsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockStatsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockstats.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockStatsFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockstats.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockStatsFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockstats.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockStatsFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockstats.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockStatsFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockstats.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockStatsFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blockstats.FieldLayout))
}

// WhereItemsPerRow applies the entql int predicate on the items_per_row field.
func (f *BlockStatsFilter) WhereItemsPerRow(p entql.IntP) {
	f.Where(p.Field(blockstats.FieldItemsPerRow))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockStatsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockstats.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockStatsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockstats.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockStatsFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockStatsFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStats applies a predicate to check if query has an edge stats.
func (f *BlockStatsFilter) WhereHasStats() {
	f.Where(entql.HasEdge("stats"))
}

// WhereHasStatsWith applies a predicate to check if query has an edge stats with a given conditions (other predicates).
func (f *BlockStatsFilter) WhereHasStatsWith(preds ...predicate.StatItem) {
	f.Where(entql.HasEdgeWith("stats", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockSuccessStoriesQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockSuccessStoriesQuery builder.
func (_q *BlockSuccessStoriesQuery) Filter() *BlockSuccessStoriesFilter {
	return &BlockSuccessStoriesFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockSuccessStoriesMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockSuccessStoriesMutation builder.
func (m *BlockSuccessStoriesMutation) Filter() *BlockSuccessStoriesFilter {
	return &BlockSuccessStoriesFilter{config: m.config, predicateAdder: m}
}

// BlockSuccessStoriesFilter provides a generic filtering capability at runtime for BlockSuccessStoriesQuery.
type BlockSuccessStoriesFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockSuccessStoriesFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockSuccessStoriesFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocksuccessstories.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockSuccessStoriesFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocksuccessstories.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockSuccessStoriesFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blocksuccessstories.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockSuccessStoriesFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blocksuccessstories.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockSuccessStoriesFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blocksuccessstories.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockSuccessStoriesFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blocksuccessstories.FieldLayout))
}

// WhereMaxItems applies the entql int predicate on the max_items field.
func (f *BlockSuccessStoriesFilter) WhereMaxItems(p entql.IntP) {
	f.Where(p.Field(blocksuccessstories.FieldMaxItems))
}

// WhereAutoplay applies the entql bool predicate on the autoplay field.
func (f *BlockSuccessStoriesFilter) WhereAutoplay(p entql.BoolP) {
	f.Where(p.Field(blocksuccessstories.FieldAutoplay))
}

// WhereProgramFilter applies the entql string predicate on the program_filter field.
func (f *BlockSuccessStoriesFilter) WhereProgramFilter(p entql.StringP) {
	f.Where(p.Field(blocksuccessstories.FieldProgramFilter))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockSuccessStoriesFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocksuccessstories.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockSuccessStoriesFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocksuccessstories.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockSuccessStoriesFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockSuccessStoriesFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockTabsQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockTabsQuery builder.
func (_q *BlockTabsQuery) Filter() *BlockTabsFilter {
	return &BlockTabsFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockTabsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockTabsMutation builder.
func (m *BlockTabsMutation) Filter() *BlockTabsFilter {
	return &BlockTabsFilter{config: m.config, predicateAdder: m}
}

// BlockTabsFilter provides a generic filtering capability at runtime for BlockTabsQuery.
type BlockTabsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockTabsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockTabsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocktabs.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockTabsFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocktabs.FieldInternalName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockTabsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktabs.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockTabsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktabs.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockTabsFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockTabsFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *BlockTabsFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *BlockTabsFilter) WhereHasItemsWith(preds ...predicate.TabItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockTeamGridQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockTeamGridQuery builder.
func (_q *BlockTeamGridQuery) Filter() *BlockTeamGridFilter {
	return &BlockTeamGridFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockTeamGridMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockTeamGridMutation builder.
func (m *BlockTeamGridMutation) Filter() *BlockTeamGridFilter {
	return &BlockTeamGridFilter{config: m.config, predicateAdder: m}
}

// BlockTeamGridFilter provides a generic filtering capability at runtime for BlockTeamGridQuery.
type BlockTeamGridFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockTeamGridFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockTeamGridFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockteamgrid.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockTeamGridFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockteamgrid.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockTeamGridFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockteamgrid.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockTeamGridFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockteamgrid.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockTeamGridFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockteamgrid.FieldDescription))
}

// WhereItemsPerRow applies the entql int predicate on the items_per_row field.
func (f *BlockTeamGridFilter) WhereItemsPerRow(p entql.IntP) {
	f.Where(p.Field(blockteamgrid.FieldItemsPerRow))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockTeamGridFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockteamgrid.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockTeamGridFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockteamgrid.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockTeamGridFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockTeamGridFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *BlockTeamGridFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *BlockTeamGridFilter) WhereHasMembersWith(preds ...predicate.TeamMemberItem) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockTestimonialsQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockTestimonialsQuery builder.
func (_q *BlockTestimonialsQuery) Filter() *BlockTestimonialsFilter {
	return &BlockTestimonialsFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockTestimonialsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockTestimonialsMutation builder.
func (m *BlockTestimonialsMutation) Filter() *BlockTestimonialsFilter {
	return &BlockTestimonialsFilter{config: m.config, predicateAdder: m}
}

// BlockTestimonialsFilter provides a generic filtering capability at runtime for BlockTestimonialsQuery.
type BlockTestimonialsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockTestimonialsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockTestimonialsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocktestimonials.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockTestimonialsFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocktestimonials.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockTestimonialsFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blocktestimonials.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockTestimonialsFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blocktestimonials.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockTestimonialsFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blocktestimonials.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockTestimonialsFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blocktestimonials.FieldLayout))
}

// WhereItemsPerRow applies the entql int predicate on the items_per_row field.
func (f *BlockTestimonialsFilter) WhereItemsPerRow(p entql.IntP) {
	f.Where(p.Field(blocktestimonials.FieldItemsPerRow))
}

// WhereAutoplay applies the entql bool predicate on the autoplay field.
func (f *BlockTestimonialsFilter) WhereAutoplay(p entql.BoolP) {
	f.Where(p.Field(blocktestimonials.FieldAutoplay))
}

// WhereAutoplaySpeed applies the entql int predicate on the autoplay_speed field.
func (f *BlockTestimonialsFilter) WhereAutoplaySpeed(p entql.IntP) {
	f.Where(p.Field(blocktestimonials.FieldAutoplaySpeed))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockTestimonialsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktestimonials.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockTestimonialsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktestimonials.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockTestimonialsFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockTestimonialsFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTestimonials applies a predicate to check if query has an edge testimonials.
func (f *BlockTestimonialsFilter) WhereHasTestimonials() {
	f.Where(entql.HasEdge("testimonials"))
}

// WhereHasTestimonialsWith applies a predicate to check if query has an edge testimonials with a given conditions (other predicates).
func (f *BlockTestimonialsFilter) WhereHasTestimonialsWith(preds ...predicate.TestimonialItem) {
	f.Where(entql.HasEdgeWith("testimonials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockTextContentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockTextContentQuery builder.
func (_q *BlockTextContentQuery) Filter() *BlockTextContentFilter {
	return &BlockTextContentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockTextContentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockTextContentMutation builder.
func (m *BlockTextContentMutation) Filter() *BlockTextContentFilter {
	return &BlockTextContentFilter{config: m.config, predicateAdder: m}
}

// BlockTextContentFilter provides a generic filtering capability at runtime for BlockTextContentQuery.
type BlockTextContentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockTextContentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockTextContentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocktextcontent.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockTextContentFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocktextcontent.FieldInternalName))
}

// WhereContent applies the entql json.RawMessage predicate on the content field.
func (f *BlockTextContentFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(blocktextcontent.FieldContent))
}

// WhereTextAlign applies the entql string predicate on the text_align field.
func (f *BlockTextContentFilter) WhereTextAlign(p entql.StringP) {
	f.Where(p.Field(blocktextcontent.FieldTextAlign))
}

// WhereColorScheme applies the entql string predicate on the color_scheme field.
func (f *BlockTextContentFilter) WhereColorScheme(p entql.StringP) {
	f.Where(p.Field(blocktextcontent.FieldColorScheme))
}

// WhereMaxWidth applies the entql string predicate on the max_width field.
func (f *BlockTextContentFilter) WhereMaxWidth(p entql.StringP) {
	f.Where(p.Field(blocktextcontent.FieldMaxWidth))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockTextContentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktextcontent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockTextContentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktextcontent.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockTextContentFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockTextContentFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockTimelineQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockTimelineQuery builder.
func (_q *BlockTimelineQuery) Filter() *BlockTimelineFilter {
	return &BlockTimelineFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockTimelineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockTimelineMutation builder.
func (m *BlockTimelineMutation) Filter() *BlockTimelineFilter {
	return &BlockTimelineFilter{config: m.config, predicateAdder: m}
}

// BlockTimelineFilter provides a generic filtering capability at runtime for BlockTimelineQuery.
type BlockTimelineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockTimelineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockTimelineFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blocktimeline.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockTimelineFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blocktimeline.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockTimelineFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blocktimeline.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockTimelineFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blocktimeline.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockTimelineFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blocktimeline.FieldDescription))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *BlockTimelineFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(blocktimeline.FieldLayout))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockTimelineFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktimeline.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockTimelineFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blocktimeline.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockTimelineFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockTimelineFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *BlockTimelineFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *BlockTimelineFilter) WhereHasEventsWith(preds ...predicate.TimelineEvent) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockVideoEmbedQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockVideoEmbedQuery builder.
func (_q *BlockVideoEmbedQuery) Filter() *BlockVideoEmbedFilter {
	return &BlockVideoEmbedFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockVideoEmbedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockVideoEmbedMutation builder.
func (m *BlockVideoEmbedMutation) Filter() *BlockVideoEmbedFilter {
	return &BlockVideoEmbedFilter{config: m.config, predicateAdder: m}
}

// BlockVideoEmbedFilter provides a generic filtering capability at runtime for BlockVideoEmbedQuery.
type BlockVideoEmbedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockVideoEmbedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockVideoEmbedFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockvideoembed.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockVideoEmbedFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockvideoembed.FieldInternalName))
}

// WhereBadge applies the entql json.RawMessage predicate on the badge field.
func (f *BlockVideoEmbedFilter) WhereBadge(p entql.BytesP) {
	f.Where(p.Field(blockvideoembed.FieldBadge))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockVideoEmbedFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockvideoembed.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockVideoEmbedFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockvideoembed.FieldDescription))
}

// WhereVideoURL applies the entql string predicate on the video_url field.
func (f *BlockVideoEmbedFilter) WhereVideoURL(p entql.StringP) {
	f.Where(p.Field(blockvideoembed.FieldVideoURL))
}

// WhereThumbnailURL applies the entql string predicate on the thumbnail_url field.
func (f *BlockVideoEmbedFilter) WhereThumbnailURL(p entql.StringP) {
	f.Where(p.Field(blockvideoembed.FieldThumbnailURL))
}

// WhereAspectRatio applies the entql string predicate on the aspect_ratio field.
func (f *BlockVideoEmbedFilter) WhereAspectRatio(p entql.StringP) {
	f.Where(p.Field(blockvideoembed.FieldAspectRatio))
}

// WhereAutoplay applies the entql bool predicate on the autoplay field.
func (f *BlockVideoEmbedFilter) WhereAutoplay(p entql.BoolP) {
	f.Where(p.Field(blockvideoembed.FieldAutoplay))
}

// WhereShowControls applies the entql bool predicate on the show_controls field.
func (f *BlockVideoEmbedFilter) WhereShowControls(p entql.BoolP) {
	f.Where(p.Field(blockvideoembed.FieldShowControls))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockVideoEmbedFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockvideoembed.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockVideoEmbedFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockvideoembed.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockVideoEmbedFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockVideoEmbedFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BlockVolunteerSignupQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BlockVolunteerSignupQuery builder.
func (_q *BlockVolunteerSignupQuery) Filter() *BlockVolunteerSignupFilter {
	return &BlockVolunteerSignupFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BlockVolunteerSignupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BlockVolunteerSignupMutation builder.
func (m *BlockVolunteerSignupMutation) Filter() *BlockVolunteerSignupFilter {
	return &BlockVolunteerSignupFilter{config: m.config, predicateAdder: m}
}

// BlockVolunteerSignupFilter provides a generic filtering capability at runtime for BlockVolunteerSignupQuery.
type BlockVolunteerSignupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BlockVolunteerSignupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BlockVolunteerSignupFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(blockvolunteersignup.FieldID))
}

// WhereInternalName applies the entql string predicate on the internal_name field.
func (f *BlockVolunteerSignupFilter) WhereInternalName(p entql.StringP) {
	f.Where(p.Field(blockvolunteersignup.FieldInternalName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *BlockVolunteerSignupFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(blockvolunteersignup.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *BlockVolunteerSignupFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(blockvolunteersignup.FieldDescription))
}

// WhereShowSkillsInput applies the entql bool predicate on the show_skills_input field.
func (f *BlockVolunteerSignupFilter) WhereShowSkillsInput(p entql.BoolP) {
	f.Where(p.Field(blockvolunteersignup.FieldShowSkillsInput))
}

// WhereShowAvailability applies the entql bool predicate on the show_availability field.
func (f *BlockVolunteerSignupFilter) WhereShowAvailability(p entql.BoolP) {
	f.Where(p.Field(blockvolunteersignup.FieldShowAvailability))
}

// WhereRequireBackground applies the entql bool predicate on the require_background field.
func (f *BlockVolunteerSignupFilter) WhereRequireBackground(p entql.BoolP) {
	f.Where(p.Field(blockvolunteersignup.FieldRequireBackground))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BlockVolunteerSignupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(blockvolunteersignup.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BlockVolunteerSignupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(blockvolunteersignup.FieldUpdatedAt))
}

// WhereHasContentBlock applies a predicate to check if query has an edge content_block.
func (f *BlockVolunteerSignupFilter) WhereHasContentBlock() {
	f.Where(entql.HasEdge("content_block"))
}

// WhereHasContentBlockWith applies a predicate to check if query has an edge content_block with a given conditions (other predicates).
func (f *BlockVolunteerSignupFilter) WhereHasContentBlockWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("content_block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BrandBenefitQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BrandBenefitQuery builder.
func (_q *BrandBenefitQuery) Filter() *BrandBenefitFilter {
	return &BrandBenefitFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BrandBenefitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BrandBenefitMutation builder.
func (m *BrandBenefitMutation) Filter() *BrandBenefitFilter {
	return &BrandBenefitFilter{config: m.config, predicateAdder: m}
}

// BrandBenefitFilter provides a generic filtering capability at runtime for BrandBenefitQuery.
type BrandBenefitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BrandBenefitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BrandBenefitFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(brandbenefit.FieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *BrandBenefitFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(brandbenefit.FieldType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *BrandBenefitFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(brandbenefit.FieldDescription))
}

// WhereURL applies the entql string predicate on the url field.
func (f *BrandBenefitFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(brandbenefit.FieldURL))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *BrandBenefitFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(brandbenefit.FieldDate))
}

// WhereValue applies the entql float64 predicate on the value field.
func (f *BrandBenefitFilter) WhereValue(p entql.Float64P) {
	f.Where(p.Field(brandbenefit.FieldValue))
}

// WhereHasPartnership applies a predicate to check if query has an edge partnership.
func (f *BrandBenefitFilter) WhereHasPartnership() {
	f.Where(entql.HasEdge("partnership"))
}

// WhereHasPartnershipWith applies a predicate to check if query has an edge partnership with a given conditions (other predicates).
func (f *BrandBenefitFilter) WhereHasPartnershipWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *BrandConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BrandConfigQuery builder.
func (_q *BrandConfigQuery) Filter() *BrandConfigFilter {
	return &BrandConfigFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *BrandConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BrandConfigMutation builder.
func (m *BrandConfigMutation) Filter() *BrandConfigFilter {
	return &BrandConfigFilter{config: m.config, predicateAdder: m}
}

// BrandConfigFilter provides a generic filtering capability at runtime for BrandConfigQuery.
type BrandConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BrandConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *BrandConfigFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(brandconfig.FieldID))
}

// WhereSingleton applies the entql string predicate on the singleton field.
func (f *BrandConfigFilter) WhereSingleton(p entql.StringP) {
	f.Where(p.Field(brandconfig.FieldSingleton))
}

// WhereName applies the entql string predicate on the name field.
func (f *BrandConfigFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(brandconfig.FieldName))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *BrandConfigFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(brandconfig.FieldLogoURL))
}

// WhereColors applies the entql json.RawMessage predicate on the colors field.
func (f *BrandConfigFilter) WhereColors(p entql.BytesP) {
	f.Where(p.Field(brandconfig.FieldColors))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *BrandConfigFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(brandconfig.FieldContact))
}

// WhereSocial applies the entql json.RawMessage predicate on the social field.
func (f *BrandConfigFilter) WhereSocial(p entql.BytesP) {
	f.Where(p.Field(brandconfig.FieldSocial))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BrandConfigFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(brandconfig.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (_q *ContentBlockQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContentBlockQuery builder.
func (_q *ContentBlockQuery) Filter() *ContentBlockFilter {
	return &ContentBlockFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ContentBlockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContentBlockMutation builder.
func (m *ContentBlockMutation) Filter() *ContentBlockFilter {
	return &ContentBlockFilter{config: m.config, predicateAdder: m}
}

// ContentBlockFilter provides a generic filtering capability at runtime for ContentBlockQuery.
type ContentBlockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContentBlockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ContentBlockFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(contentblock.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *ContentBlockFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(contentblock.FieldOrder))
}

// WhereBlockType applies the entql string predicate on the block_type field.
func (f *ContentBlockFilter) WhereBlockType(p entql.StringP) {
	f.Where(p.Field(contentblock.FieldBlockType))
}

// WhereConfig applies the entql json.RawMessage predicate on the config field.
func (f *ContentBlockFilter) WhereConfig(p entql.BytesP) {
	f.Where(p.Field(contentblock.FieldConfig))
}

// WhereIsVisible applies the entql bool predicate on the is_visible field.
func (f *ContentBlockFilter) WhereIsVisible(p entql.BoolP) {
	f.Where(p.Field(contentblock.FieldIsVisible))
}

// WhereHideOnMobile applies the entql bool predicate on the hide_on_mobile field.
func (f *ContentBlockFilter) WhereHideOnMobile(p entql.BoolP) {
	f.Where(p.Field(contentblock.FieldHideOnMobile))
}

// WhereHideOnTablet applies the entql bool predicate on the hide_on_tablet field.
func (f *ContentBlockFilter) WhereHideOnTablet(p entql.BoolP) {
	f.Where(p.Field(contentblock.FieldHideOnTablet))
}

// WhereHideOnDesktop applies the entql bool predicate on the hide_on_desktop field.
func (f *ContentBlockFilter) WhereHideOnDesktop(p entql.BoolP) {
	f.Where(p.Field(contentblock.FieldHideOnDesktop))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContentBlockFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contentblock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContentBlockFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contentblock.FieldUpdatedAt))
}

// WhereHasPage applies a predicate to check if query has an edge page.
func (f *ContentBlockFilter) WhereHasPage() {
	f.Where(entql.HasEdge("page"))
}

// WhereHasPageWith applies a predicate to check if query has an edge page with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasPageWith(preds ...predicate.Page) {
	f.Where(entql.HasEdgeWith("page", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockHero applies a predicate to check if query has an edge block_hero.
func (f *ContentBlockFilter) WhereHasBlockHero() {
	f.Where(entql.HasEdge("block_hero"))
}

// WhereHasBlockHeroWith applies a predicate to check if query has an edge block_hero with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockHeroWith(preds ...predicate.BlockHero) {
	f.Where(entql.HasEdgeWith("block_hero", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockTextContent applies a predicate to check if query has an edge block_text_content.
func (f *ContentBlockFilter) WhereHasBlockTextContent() {
	f.Where(entql.HasEdge("block_text_content"))
}

// WhereHasBlockTextContentWith applies a predicate to check if query has an edge block_text_content with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockTextContentWith(preds ...predicate.BlockTextContent) {
	f.Where(entql.HasEdgeWith("block_text_content", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockFaq applies a predicate to check if query has an edge block_faq.
func (f *ContentBlockFilter) WhereHasBlockFaq() {
	f.Where(entql.HasEdge("block_faq"))
}

// WhereHasBlockFaqWith applies a predicate to check if query has an edge block_faq with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockFaqWith(preds ...predicate.BlockFaq) {
	f.Where(entql.HasEdgeWith("block_faq", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockCta applies a predicate to check if query has an edge block_cta.
func (f *ContentBlockFilter) WhereHasBlockCta() {
	f.Where(entql.HasEdge("block_cta"))
}

// WhereHasBlockCtaWith applies a predicate to check if query has an edge block_cta with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockCtaWith(preds ...predicate.BlockCta) {
	f.Where(entql.HasEdgeWith("block_cta", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockTestimonials applies a predicate to check if query has an edge block_testimonials.
func (f *ContentBlockFilter) WhereHasBlockTestimonials() {
	f.Where(entql.HasEdge("block_testimonials"))
}

// WhereHasBlockTestimonialsWith applies a predicate to check if query has an edge block_testimonials with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockTestimonialsWith(preds ...predicate.BlockTestimonials) {
	f.Where(entql.HasEdgeWith("block_testimonials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockStats applies a predicate to check if query has an edge block_stats.
func (f *ContentBlockFilter) WhereHasBlockStats() {
	f.Where(entql.HasEdge("block_stats"))
}

// WhereHasBlockStatsWith applies a predicate to check if query has an edge block_stats with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockStatsWith(preds ...predicate.BlockStats) {
	f.Where(entql.HasEdgeWith("block_stats", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockGallery applies a predicate to check if query has an edge block_gallery.
func (f *ContentBlockFilter) WhereHasBlockGallery() {
	f.Where(entql.HasEdge("block_gallery"))
}

// WhereHasBlockGalleryWith applies a predicate to check if query has an edge block_gallery with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockGalleryWith(preds ...predicate.BlockGallery) {
	f.Where(entql.HasEdgeWith("block_gallery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockProgramCards applies a predicate to check if query has an edge block_program_cards.
func (f *ContentBlockFilter) WhereHasBlockProgramCards() {
	f.Where(entql.HasEdge("block_program_cards"))
}

// WhereHasBlockProgramCardsWith applies a predicate to check if query has an edge block_program_cards with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockProgramCardsWith(preds ...predicate.BlockProgramCards) {
	f.Where(entql.HasEdgeWith("block_program_cards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockSuccessStories applies a predicate to check if query has an edge block_success_stories.
func (f *ContentBlockFilter) WhereHasBlockSuccessStories() {
	f.Where(entql.HasEdge("block_success_stories"))
}

// WhereHasBlockSuccessStoriesWith applies a predicate to check if query has an edge block_success_stories with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockSuccessStoriesWith(preds ...predicate.BlockSuccessStories) {
	f.Where(entql.HasEdgeWith("block_success_stories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockDonationForm applies a predicate to check if query has an edge block_donation_form.
func (f *ContentBlockFilter) WhereHasBlockDonationForm() {
	f.Where(entql.HasEdge("block_donation_form"))
}

// WhereHasBlockDonationFormWith applies a predicate to check if query has an edge block_donation_form with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockDonationFormWith(preds ...predicate.BlockDonationForm) {
	f.Where(entql.HasEdgeWith("block_donation_form", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockVolunteerSignup applies a predicate to check if query has an edge block_volunteer_signup.
func (f *ContentBlockFilter) WhereHasBlockVolunteerSignup() {
	f.Where(entql.HasEdge("block_volunteer_signup"))
}

// WhereHasBlockVolunteerSignupWith applies a predicate to check if query has an edge block_volunteer_signup with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockVolunteerSignupWith(preds ...predicate.BlockVolunteerSignup) {
	f.Where(entql.HasEdgeWith("block_volunteer_signup", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockNewsletterSignup applies a predicate to check if query has an edge block_newsletter_signup.
func (f *ContentBlockFilter) WhereHasBlockNewsletterSignup() {
	f.Where(entql.HasEdge("block_newsletter_signup"))
}

// WhereHasBlockNewsletterSignupWith applies a predicate to check if query has an edge block_newsletter_signup with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockNewsletterSignupWith(preds ...predicate.BlockNewsletterSignup) {
	f.Where(entql.HasEdgeWith("block_newsletter_signup", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockPartnerLogos applies a predicate to check if query has an edge block_partner_logos.
func (f *ContentBlockFilter) WhereHasBlockPartnerLogos() {
	f.Where(entql.HasEdge("block_partner_logos"))
}

// WhereHasBlockPartnerLogosWith applies a predicate to check if query has an edge block_partner_logos with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockPartnerLogosWith(preds ...predicate.BlockPartnerLogos) {
	f.Where(entql.HasEdgeWith("block_partner_logos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockTeamGrid applies a predicate to check if query has an edge block_team_grid.
func (f *ContentBlockFilter) WhereHasBlockTeamGrid() {
	f.Where(entql.HasEdge("block_team_grid"))
}

// WhereHasBlockTeamGridWith applies a predicate to check if query has an edge block_team_grid with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockTeamGridWith(preds ...predicate.BlockTeamGrid) {
	f.Where(entql.HasEdgeWith("block_team_grid", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockTimeline applies a predicate to check if query has an edge block_timeline.
func (f *ContentBlockFilter) WhereHasBlockTimeline() {
	f.Where(entql.HasEdge("block_timeline"))
}

// WhereHasBlockTimelineWith applies a predicate to check if query has an edge block_timeline with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockTimelineWith(preds ...predicate.BlockTimeline) {
	f.Where(entql.HasEdgeWith("block_timeline", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockContactForm applies a predicate to check if query has an edge block_contact_form.
func (f *ContentBlockFilter) WhereHasBlockContactForm() {
	f.Where(entql.HasEdge("block_contact_form"))
}

// WhereHasBlockContactFormWith applies a predicate to check if query has an edge block_contact_form with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockContactFormWith(preds ...predicate.BlockContactForm) {
	f.Where(entql.HasEdgeWith("block_contact_form", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockVideoEmbed applies a predicate to check if query has an edge block_video_embed.
func (f *ContentBlockFilter) WhereHasBlockVideoEmbed() {
	f.Where(entql.HasEdge("block_video_embed"))
}

// WhereHasBlockVideoEmbedWith applies a predicate to check if query has an edge block_video_embed with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockVideoEmbedWith(preds ...predicate.BlockVideoEmbed) {
	f.Where(entql.HasEdgeWith("block_video_embed", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockMap applies a predicate to check if query has an edge block_map.
func (f *ContentBlockFilter) WhereHasBlockMap() {
	f.Where(entql.HasEdge("block_map"))
}

// WhereHasBlockMapWith applies a predicate to check if query has an edge block_map with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockMapWith(preds ...predicate.BlockMap) {
	f.Where(entql.HasEdgeWith("block_map", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockAccordion applies a predicate to check if query has an edge block_accordion.
func (f *ContentBlockFilter) WhereHasBlockAccordion() {
	f.Where(entql.HasEdge("block_accordion"))
}

// WhereHasBlockAccordionWith applies a predicate to check if query has an edge block_accordion with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockAccordionWith(preds ...predicate.BlockAccordion) {
	f.Where(entql.HasEdgeWith("block_accordion", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockTabs applies a predicate to check if query has an edge block_tabs.
func (f *ContentBlockFilter) WhereHasBlockTabs() {
	f.Where(entql.HasEdge("block_tabs"))
}

// WhereHasBlockTabsWith applies a predicate to check if query has an edge block_tabs with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockTabsWith(preds ...predicate.BlockTabs) {
	f.Where(entql.HasEdgeWith("block_tabs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlockDivider applies a predicate to check if query has an edge block_divider.
func (f *ContentBlockFilter) WhereHasBlockDivider() {
	f.Where(entql.HasEdge("block_divider"))
}

// WhereHasBlockDividerWith applies a predicate to check if query has an edge block_divider with a given conditions (other predicates).
func (f *ContentBlockFilter) WhereHasBlockDividerWith(preds ...predicate.BlockDivider) {
	f.Where(entql.HasEdgeWith("block_divider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ConversationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConversationQuery builder.
func (_q *ConversationQuery) Filter() *ConversationFilter {
	return &ConversationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ConversationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConversationMutation builder.
func (m *ConversationMutation) Filter() *ConversationFilter {
	return &ConversationFilter{config: m.config, predicateAdder: m}
}

// ConversationFilter provides a generic filtering capability at runtime for ConversationQuery.
type ConversationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConversationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ConversationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(conversation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ConversationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(conversation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ConversationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(conversation.FieldUpdatedAt))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *ConversationFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *ConversationFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParticipants applies a predicate to check if query has an edge participants.
func (f *ConversationFilter) WhereHasParticipants() {
	f.Where(entql.HasEdge("participants"))
}

// WhereHasParticipantsWith applies a predicate to check if query has an edge participants with a given conditions (other predicates).
func (f *ConversationFilter) WhereHasParticipantsWith(preds ...predicate.ConversationParticipant) {
	f.Where(entql.HasEdgeWith("participants", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ConversationParticipantQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConversationParticipantQuery builder.
func (_q *ConversationParticipantQuery) Filter() *ConversationParticipantFilter {
	return &ConversationParticipantFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ConversationParticipantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConversationParticipantMutation builder.
func (m *ConversationParticipantMutation) Filter() *ConversationParticipantFilter {
	return &ConversationParticipantFilter{config: m.config, predicateAdder: m}
}

// ConversationParticipantFilter provides a generic filtering capability at runtime for ConversationParticipantQuery.
type ConversationParticipantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConversationParticipantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ConversationParticipantFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(conversationparticipant.FieldID))
}

// WhereLastReadAt applies the entql time.Time predicate on the last_read_at field.
func (f *ConversationParticipantFilter) WhereLastReadAt(p entql.TimeP) {
	f.Where(p.Field(conversationparticipant.FieldLastReadAt))
}

// WhereHasConversation applies a predicate to check if query has an edge conversation.
func (f *ConversationParticipantFilter) WhereHasConversation() {
	f.Where(entql.HasEdge("conversation"))
}

// WhereHasConversationWith applies a predicate to check if query has an edge conversation with a given conditions (other predicates).
func (f *ConversationParticipantFilter) WhereHasConversationWith(preds ...predicate.Conversation) {
	f.Where(entql.HasEdgeWith("conversation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ConversationParticipantFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ConversationParticipantFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DashboardWidgetQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DashboardWidgetQuery builder.
func (_q *DashboardWidgetQuery) Filter() *DashboardWidgetFilter {
	return &DashboardWidgetFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DashboardWidgetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DashboardWidgetMutation builder.
func (m *DashboardWidgetMutation) Filter() *DashboardWidgetFilter {
	return &DashboardWidgetFilter{config: m.config, predicateAdder: m}
}

// DashboardWidgetFilter provides a generic filtering capability at runtime for DashboardWidgetQuery.
type DashboardWidgetFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DashboardWidgetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DashboardWidgetFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dashboardwidget.FieldID))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *DashboardWidgetFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(dashboardwidget.FieldTitle))
}

// WhereType applies the entql string predicate on the type field.
func (f *DashboardWidgetFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(dashboardwidget.FieldType))
}

// WhereConfig applies the entql json.RawMessage predicate on the config field.
func (f *DashboardWidgetFilter) WhereConfig(p entql.BytesP) {
	f.Where(p.Field(dashboardwidget.FieldConfig))
}

// WhereDataSource applies the entql string predicate on the data_source field.
func (f *DashboardWidgetFilter) WhereDataSource(p entql.StringP) {
	f.Where(p.Field(dashboardwidget.FieldDataSource))
}

// WhereQuery applies the entql json.RawMessage predicate on the query field.
func (f *DashboardWidgetFilter) WhereQuery(p entql.BytesP) {
	f.Where(p.Field(dashboardwidget.FieldQuery))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *DashboardWidgetFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(dashboardwidget.FieldOrder))
}

// WherePosition applies the entql json.RawMessage predicate on the position field.
func (f *DashboardWidgetFilter) WherePosition(p entql.BytesP) {
	f.Where(p.Field(dashboardwidget.FieldPosition))
}

// WhereIsVisible applies the entql bool predicate on the is_visible field.
func (f *DashboardWidgetFilter) WhereIsVisible(p entql.BoolP) {
	f.Where(p.Field(dashboardwidget.FieldIsVisible))
}

// WhereRefreshRate applies the entql int predicate on the refresh_rate field.
func (f *DashboardWidgetFilter) WhereRefreshRate(p entql.IntP) {
	f.Where(p.Field(dashboardwidget.FieldRefreshRate))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DashboardWidgetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dashboardwidget.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DashboardWidgetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dashboardwidget.FieldUpdatedAt))
}

// WhereHasDashboard applies a predicate to check if query has an edge dashboard.
func (f *DashboardWidgetFilter) WhereHasDashboard() {
	f.Where(entql.HasEdge("dashboard"))
}

// WhereHasDashboardWith applies a predicate to check if query has an edge dashboard with a given conditions (other predicates).
func (f *DashboardWidgetFilter) WhereHasDashboardWith(preds ...predicate.AnalyticsDashboard) {
	f.Where(entql.HasEdgeWith("dashboard", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DocumentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentQuery builder.
func (_q *DocumentQuery) Filter() *DocumentFilter {
	return &DocumentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentMutation builder.
func (m *DocumentMutation) Filter() *DocumentFilter {
	return &DocumentFilter{config: m.config, predicateAdder: m}
}

// DocumentFilter provides a generic filtering capability at runtime for DocumentQuery.
type DocumentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DocumentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(document.FieldID))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *DocumentFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(document.FieldTitle))
}

// WhereType applies the entql string predicate on the type field.
func (f *DocumentFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(document.FieldType))
}

// WhereFileURL applies the entql string predicate on the file_url field.
func (f *DocumentFilter) WhereFileURL(p entql.StringP) {
	f.Where(p.Field(document.FieldFileURL))
}

// WhereFileName applies the entql string predicate on the file_name field.
func (f *DocumentFilter) WhereFileName(p entql.StringP) {
	f.Where(p.Field(document.FieldFileName))
}

// WhereMimeType applies the entql string predicate on the mime_type field.
func (f *DocumentFilter) WhereMimeType(p entql.StringP) {
	f.Where(p.Field(document.FieldMimeType))
}

// WhereSize applies the entql int predicate on the size field.
func (f *DocumentFilter) WhereSize(p entql.IntP) {
	f.Where(p.Field(document.FieldSize))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *DocumentFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(document.FieldDescription))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(document.FieldTags))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *DocumentFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(document.FieldVersion))
}

// WhereLanguage applies the entql string predicate on the language field.
func (f *DocumentFilter) WhereLanguage(p entql.StringP) {
	f.Where(p.Field(document.FieldLanguage))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *DocumentFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(document.FieldIsPublic))
}

// WhereAllowedRoles applies the entql json.RawMessage predicate on the allowed_roles field.
func (f *DocumentFilter) WhereAllowedRoles(p entql.BytesP) {
	f.Where(p.Field(document.FieldAllowedRoles))
}

// WhereAccessPassword applies the entql string predicate on the access_password field.
func (f *DocumentFilter) WhereAccessPassword(p entql.StringP) {
	f.Where(p.Field(document.FieldAccessPassword))
}

// WhereRequiresApproval applies the entql bool predicate on the requires_approval field.
func (f *DocumentFilter) WhereRequiresApproval(p entql.BoolP) {
	f.Where(p.Field(document.FieldRequiresApproval))
}

// WhereIsApproved applies the entql bool predicate on the is_approved field.
func (f *DocumentFilter) WhereIsApproved(p entql.BoolP) {
	f.Where(p.Field(document.FieldIsApproved))
}

// WhereApprovedBy applies the entql string predicate on the approved_by field.
func (f *DocumentFilter) WhereApprovedBy(p entql.StringP) {
	f.Where(p.Field(document.FieldApprovedBy))
}

// WhereApprovedAt applies the entql time.Time predicate on the approved_at field.
func (f *DocumentFilter) WhereApprovedAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldApprovedAt))
}

// WhereDownloadCount applies the entql int predicate on the download_count field.
func (f *DocumentFilter) WhereDownloadCount(p entql.IntP) {
	f.Where(p.Field(document.FieldDownloadCount))
}

// WhereLastAccessed applies the entql time.Time predicate on the last_accessed field.
func (f *DocumentFilter) WhereLastAccessed(p entql.TimeP) {
	f.Where(p.Field(document.FieldLastAccessed))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldUpdatedAt))
}

// WhereHasUploader applies a predicate to check if query has an edge uploader.
func (f *DocumentFilter) WhereHasUploader() {
	f.Where(entql.HasEdge("uploader"))
}

// WhereHasUploaderWith applies a predicate to check if query has an edge uploader with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasUploaderWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("uploader", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCategory applies a predicate to check if query has an edge category.
func (f *DocumentFilter) WhereHasCategory() {
	f.Where(entql.HasEdge("category"))
}

// WhereHasCategoryWith applies a predicate to check if query has an edge category with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasCategoryWith(preds ...predicate.DocumentCategory) {
	f.Where(entql.HasEdgeWith("category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DocumentCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentCategoryQuery builder.
func (_q *DocumentCategoryQuery) Filter() *DocumentCategoryFilter {
	return &DocumentCategoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentCategoryMutation builder.
func (m *DocumentCategoryMutation) Filter() *DocumentCategoryFilter {
	return &DocumentCategoryFilter{config: m.config, predicateAdder: m}
}

// DocumentCategoryFilter provides a generic filtering capability at runtime for DocumentCategoryQuery.
type DocumentCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DocumentCategoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(documentcategory.FieldID))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *DocumentCategoryFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(documentcategory.FieldName))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *DocumentCategoryFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(documentcategory.FieldDescription))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *DocumentCategoryFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(documentcategory.FieldSlug))
}

// WhereDisplayOrder applies the entql int predicate on the display_order field.
func (f *DocumentCategoryFilter) WhereDisplayOrder(p entql.IntP) {
	f.Where(p.Field(documentcategory.FieldDisplayOrder))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *DocumentCategoryFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(documentcategory.FieldIsActive))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentcategory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DocumentCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(documentcategory.FieldUpdatedAt))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DocumentCategoryFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DocumentCategoryFilter) WhereHasChildrenWith(preds ...predicate.DocumentCategory) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DocumentCategoryFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DocumentCategoryFilter) WhereHasParentWith(preds ...predicate.DocumentCategory) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *DocumentCategoryFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *DocumentCategoryFilter) WhereHasDocumentsWith(preds ...predicate.Document) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *DonationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DonationQuery builder.
func (_q *DonationQuery) Filter() *DonationFilter {
	return &DonationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DonationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DonationMutation builder.
func (m *DonationMutation) Filter() *DonationFilter {
	return &DonationFilter{config: m.config, predicateAdder: m}
}

// DonationFilter provides a generic filtering capability at runtime for DonationQuery.
type DonationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DonationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DonationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(donation.FieldID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *DonationFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(donation.FieldAmount))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *DonationFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(donation.FieldCurrency))
}

// WhereIsRecurring applies the entql bool predicate on the is_recurring field.
func (f *DonationFilter) WhereIsRecurring(p entql.BoolP) {
	f.Where(p.Field(donation.FieldIsRecurring))
}

// WhereFrequency applies the entql string predicate on the frequency field.
func (f *DonationFilter) WhereFrequency(p entql.StringP) {
	f.Where(p.Field(donation.FieldFrequency))
}

// WherePaymentMethod applies the entql string predicate on the payment_method field.
func (f *DonationFilter) WherePaymentMethod(p entql.StringP) {
	f.Where(p.Field(donation.FieldPaymentMethod))
}

// WherePaymentID applies the entql string predicate on the payment_id field.
func (f *DonationFilter) WherePaymentID(p entql.StringP) {
	f.Where(p.Field(donation.FieldPaymentID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DonationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(donation.FieldStatus))
}

// WhereProcessedAt applies the entql time.Time predicate on the processed_at field.
func (f *DonationFilter) WhereProcessedAt(p entql.TimeP) {
	f.Where(p.Field(donation.FieldProcessedAt))
}

// WhereAnonymous applies the entql bool predicate on the anonymous field.
func (f *DonationFilter) WhereAnonymous(p entql.BoolP) {
	f.Where(p.Field(donation.FieldAnonymous))
}

// WherePaymentGatewayRef applies the entql string predicate on the payment_gateway_ref field.
func (f *DonationFilter) WherePaymentGatewayRef(p entql.StringP) {
	f.Where(p.Field(donation.FieldPaymentGatewayRef))
}

// WhereDonorMessage applies the entql string predicate on the donor_message field.
func (f *DonationFilter) WhereDonorMessage(p entql.StringP) {
	f.Where(p.Field(donation.FieldDonorMessage))
}

// WhereTaxReceiptSent applies the entql bool predicate on the tax_receipt_sent field.
func (f *DonationFilter) WhereTaxReceiptSent(p entql.BoolP) {
	f.Where(p.Field(donation.FieldTaxReceiptSent))
}

// WhereTaxReceiptSentAt applies the entql time.Time predicate on the tax_receipt_sent_at field.
func (f *DonationFilter) WhereTaxReceiptSentAt(p entql.TimeP) {
	f.Where(p.Field(donation.FieldTaxReceiptSentAt))
}

// WhereRecurringInterval applies the entql string predicate on the recurring_interval field.
func (f *DonationFilter) WhereRecurringInterval(p entql.StringP) {
	f.Where(p.Field(donation.FieldRecurringInterval))
}

// WhereNextPaymentDate applies the entql time.Time predicate on the next_payment_date field.
func (f *DonationFilter) WhereNextPaymentDate(p entql.TimeP) {
	f.Where(p.Field(donation.FieldNextPaymentDate))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *DonationFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(donation.FieldMetadata))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DonationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(donation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DonationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(donation.FieldUpdatedAt))
}

// WhereHasDonor applies a predicate to check if query has an edge donor.
func (f *DonationFilter) WhereHasDonor() {
	f.Where(entql.HasEdge("donor"))
}

// WhereHasDonorWith applies a predicate to check if query has an edge donor with a given conditions (other predicates).
func (f *DonationFilter) WhereHasDonorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("donor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *DonationFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *DonationFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCampaign applies a predicate to check if query has an edge campaign.
func (f *DonationFilter) WhereHasCampaign() {
	f.Where(entql.HasEdge("campaign"))
}

// WhereHasCampaignWith applies a predicate to check if query has an edge campaign with a given conditions (other predicates).
func (f *DonationFilter) WhereHasCampaignWith(preds ...predicate.FundraisingCampaign) {
	f.Where(entql.HasEdgeWith("campaign", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (_q *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(event.FieldID))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *EventFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(event.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *EventFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(event.FieldDescription))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *EventFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(event.FieldEventType))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *EventFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(event.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *EventFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(event.FieldEndDate))
}

// WhereCapacity applies the entql int predicate on the capacity field.
func (f *EventFilter) WhereCapacity(p entql.IntP) {
	f.Where(p.Field(event.FieldCapacity))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EventFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(event.FieldStatus))
}

// WhereIsVirtual applies the entql bool predicate on the is_virtual field.
func (f *EventFilter) WhereIsVirtual(p entql.BoolP) {
	f.Where(p.Field(event.FieldIsVirtual))
}

// WhereMeetingURL applies the entql string predicate on the meeting_url field.
func (f *EventFilter) WhereMeetingURL(p entql.StringP) {
	f.Where(p.Field(event.FieldMeetingURL))
}

// WhereRegistrationRequired applies the entql bool predicate on the registration_required field.
func (f *EventFilter) WhereRegistrationRequired(p entql.BoolP) {
	f.Where(p.Field(event.FieldRegistrationRequired))
}

// WhereRegistrationDeadline applies the entql time.Time predicate on the registration_deadline field.
func (f *EventFilter) WhereRegistrationDeadline(p entql.TimeP) {
	f.Where(p.Field(event.FieldRegistrationDeadline))
}

// WhereRequiresApproval applies the entql bool predicate on the requires_approval field.
func (f *EventFilter) WhereRequiresApproval(p entql.BoolP) {
	f.Where(p.Field(event.FieldRequiresApproval))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *EventFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(event.FieldTags))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *EventFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(event.FieldImageURL))
}

// WhereCorporateVolunteerFriendly applies the entql bool predicate on the corporate_volunteer_friendly field.
func (f *EventFilter) WhereCorporateVolunteerFriendly(p entql.BoolP) {
	f.Where(p.Field(event.FieldCorporateVolunteerFriendly))
}

// WhereAlumniOnly applies the entql bool predicate on the alumni_only field.
func (f *EventFilter) WhereAlumniOnly(p entql.BoolP) {
	f.Where(p.Field(event.FieldAlumniOnly))
}

// WhereMajorDonorOnly applies the entql bool predicate on the major_donor_only field.
func (f *EventFilter) WhereMajorDonorOnly(p entql.BoolP) {
	f.Where(p.Field(event.FieldMajorDonorOnly))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *EventFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *EventFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *EventFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *EventFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRegistrations applies a predicate to check if query has an edge registrations.
func (f *EventFilter) WhereHasRegistrations() {
	f.Where(entql.HasEdge("registrations"))
}

// WhereHasRegistrationsWith applies a predicate to check if query has an edge registrations with a given conditions (other predicates).
func (f *EventFilter) WhereHasRegistrationsWith(preds ...predicate.EventRegistration) {
	f.Where(entql.HasEdgeWith("registrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgenda applies a predicate to check if query has an edge agenda.
func (f *EventFilter) WhereHasAgenda() {
	f.Where(entql.HasEdge("agenda"))
}

// WhereHasAgendaWith applies a predicate to check if query has an edge agenda with a given conditions (other predicates).
func (f *EventFilter) WhereHasAgendaWith(preds ...predicate.Agenda) {
	f.Where(entql.HasEdgeWith("agenda", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocation applies a predicate to check if query has an edge location.
func (f *EventFilter) WhereHasLocation() {
	f.Where(entql.HasEdge("location"))
}

// WhereHasLocationWith applies a predicate to check if query has an edge location with a given conditions (other predicates).
func (f *EventFilter) WhereHasLocationWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *EventRegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventRegistrationQuery builder.
func (_q *EventRegistrationQuery) Filter() *EventRegistrationFilter {
	return &EventRegistrationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *EventRegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventRegistrationMutation builder.
func (m *EventRegistrationMutation) Filter() *EventRegistrationFilter {
	return &EventRegistrationFilter{config: m.config, predicateAdder: m}
}

// EventRegistrationFilter provides a generic filtering capability at runtime for EventRegistrationQuery.
type EventRegistrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventRegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventRegistrationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(eventregistration.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *EventRegistrationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(eventregistration.FieldStatus))
}

// WhereAttendanceStatus applies the entql string predicate on the attendance_status field.
func (f *EventRegistrationFilter) WhereAttendanceStatus(p entql.StringP) {
	f.Where(p.Field(eventregistration.FieldAttendanceStatus))
}

// WhereRegistrationData applies the entql json.RawMessage predicate on the registration_data field.
func (f *EventRegistrationFilter) WhereRegistrationData(p entql.BytesP) {
	f.Where(p.Field(eventregistration.FieldRegistrationData))
}

// WhereFeedback applies the entql json.RawMessage predicate on the feedback field.
func (f *EventRegistrationFilter) WhereFeedback(p entql.BytesP) {
	f.Where(p.Field(eventregistration.FieldFeedback))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventRegistrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(eventregistration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventRegistrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(eventregistration.FieldUpdatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *EventRegistrationFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *EventRegistrationFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *EventRegistrationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *EventRegistrationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FaqItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FaqItemQuery builder.
func (_q *FaqItemQuery) Filter() *FaqItemFilter {
	return &FaqItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FaqItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FaqItemMutation builder.
func (m *FaqItemMutation) Filter() *FaqItemFilter {
	return &FaqItemFilter{config: m.config, predicateAdder: m}
}

// FaqItemFilter provides a generic filtering capability at runtime for FaqItemQuery.
type FaqItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FaqItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *FaqItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(faqitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *FaqItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(faqitem.FieldOrder))
}

// WhereQuestion applies the entql json.RawMessage predicate on the question field.
func (f *FaqItemFilter) WhereQuestion(p entql.BytesP) {
	f.Where(p.Field(faqitem.FieldQuestion))
}

// WhereAnswer applies the entql json.RawMessage predicate on the answer field.
func (f *FaqItemFilter) WhereAnswer(p entql.BytesP) {
	f.Where(p.Field(faqitem.FieldAnswer))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FaqItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(faqitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FaqItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(faqitem.FieldUpdatedAt))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *FaqItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *FaqItemFilter) WhereHasBlockWith(preds ...predicate.BlockFaq) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *FeatureFlagQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeatureFlagQuery builder.
func (_q *FeatureFlagQuery) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FeatureFlagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeatureFlagMutation builder.
func (m *FeatureFlagMutation) Filter() *FeatureFlagFilter {
	return &FeatureFlagFilter{config: m.config, predicateAdder: m}
}

// FeatureFlagFilter provides a generic filtering capability at runtime for FeatureFlagQuery.
type FeatureFlagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeatureFlagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *FeatureFlagFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FeatureFlagFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(featureflag.FieldDescription))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *FeatureFlagFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(featureflag.FieldIsActive))
}

// WhereRolloutPercentage applies the entql int predicate on the rollout_percentage field.
func (f *FeatureFlagFilter) WhereRolloutPercentage(p entql.IntP) {
	f.Where(p.Field(featureflag.FieldRolloutPercentage))
}

// WhereAllowedUserIds applies the entql json.RawMessage predicate on the allowed_user_ids field.
func (f *FeatureFlagFilter) WhereAllowedUserIds(p entql.BytesP) {
	f.Where(p.Field(featureflag.FieldAllowedUserIds))
}

// WhereAllowedRoles applies the entql json.RawMessage predicate on the allowed_roles field.
func (f *FeatureFlagFilter) WhereAllowedRoles(p entql.BytesP) {
	f.Where(p.Field(featureflag.FieldAllowedRoles))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeatureFlagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeatureFlagFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(featureflag.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (_q *FundraisingCampaignQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FundraisingCampaignQuery builder.
func (_q *FundraisingCampaignQuery) Filter() *FundraisingCampaignFilter {
	return &FundraisingCampaignFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *FundraisingCampaignMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FundraisingCampaignMutation builder.
func (m *FundraisingCampaignMutation) Filter() *FundraisingCampaignFilter {
	return &FundraisingCampaignFilter{config: m.config, predicateAdder: m}
}

// FundraisingCampaignFilter provides a generic filtering capability at runtime for FundraisingCampaignQuery.
type FundraisingCampaignFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FundraisingCampaignFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *FundraisingCampaignFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(fundraisingcampaign.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *FundraisingCampaignFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldSlug))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *FundraisingCampaignFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(fundraisingcampaign.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *FundraisingCampaignFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(fundraisingcampaign.FieldDescription))
}

// WhereStory applies the entql json.RawMessage predicate on the story field.
func (f *FundraisingCampaignFilter) WhereStory(p entql.BytesP) {
	f.Where(p.Field(fundraisingcampaign.FieldStory))
}

// WhereType applies the entql string predicate on the type field.
func (f *FundraisingCampaignFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldType))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *FundraisingCampaignFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldCategory))
}

// WhereTargetAmount applies the entql float64 predicate on the target_amount field.
func (f *FundraisingCampaignFilter) WhereTargetAmount(p entql.Float64P) {
	f.Where(p.Field(fundraisingcampaign.FieldTargetAmount))
}

// WhereCurrentAmount applies the entql float64 predicate on the current_amount field.
func (f *FundraisingCampaignFilter) WhereCurrentAmount(p entql.Float64P) {
	f.Where(p.Field(fundraisingcampaign.FieldCurrentAmount))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *FundraisingCampaignFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldCurrency))
}

// WhereMinimumDonation applies the entql float64 predicate on the minimum_donation field.
func (f *FundraisingCampaignFilter) WhereMinimumDonation(p entql.Float64P) {
	f.Where(p.Field(fundraisingcampaign.FieldMinimumDonation))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *FundraisingCampaignFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(fundraisingcampaign.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *FundraisingCampaignFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(fundraisingcampaign.FieldEndDate))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *FundraisingCampaignFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(fundraisingcampaign.FieldIsActive))
}

// WhereHeroImageURL applies the entql string predicate on the hero_image_url field.
func (f *FundraisingCampaignFilter) WhereHeroImageURL(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldHeroImageURL))
}

// WhereVideoURL applies the entql string predicate on the video_url field.
func (f *FundraisingCampaignFilter) WhereVideoURL(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldVideoURL))
}

// WhereGalleryImages applies the entql json.RawMessage predicate on the gallery_images field.
func (f *FundraisingCampaignFilter) WhereGalleryImages(p entql.BytesP) {
	f.Where(p.Field(fundraisingcampaign.FieldGalleryImages))
}

// WhereManagerID applies the entql string predicate on the manager_id field.
func (f *FundraisingCampaignFilter) WhereManagerID(p entql.StringP) {
	f.Where(p.Field(fundraisingcampaign.FieldManagerID))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *FundraisingCampaignFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(fundraisingcampaign.FieldIsPublic))
}

// WhereAllowRecurring applies the entql bool predicate on the allow_recurring field.
func (f *FundraisingCampaignFilter) WhereAllowRecurring(p entql.BoolP) {
	f.Where(p.Field(fundraisingcampaign.FieldAllowRecurring))
}

// WhereDonorCount applies the entql int predicate on the donor_count field.
func (f *FundraisingCampaignFilter) WhereDonorCount(p entql.IntP) {
	f.Where(p.Field(fundraisingcampaign.FieldDonorCount))
}

// WhereShareCount applies the entql int predicate on the share_count field.
func (f *FundraisingCampaignFilter) WhereShareCount(p entql.IntP) {
	f.Where(p.Field(fundraisingcampaign.FieldShareCount))
}

// WhereViewCount applies the entql int predicate on the view_count field.
func (f *FundraisingCampaignFilter) WhereViewCount(p entql.IntP) {
	f.Where(p.Field(fundraisingcampaign.FieldViewCount))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FundraisingCampaignFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(fundraisingcampaign.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FundraisingCampaignFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(fundraisingcampaign.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *FundraisingCampaignFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *FundraisingCampaignFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildCampaigns applies a predicate to check if query has an edge child_campaigns.
func (f *FundraisingCampaignFilter) WhereHasChildCampaigns() {
	f.Where(entql.HasEdge("child_campaigns"))
}

// WhereHasChildCampaignsWith applies a predicate to check if query has an edge child_campaigns with a given conditions (other predicates).
func (f *FundraisingCampaignFilter) WhereHasChildCampaignsWith(preds ...predicate.FundraisingCampaign) {
	f.Where(entql.HasEdgeWith("child_campaigns", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParentCampaign applies a predicate to check if query has an edge parent_campaign.
func (f *FundraisingCampaignFilter) WhereHasParentCampaign() {
	f.Where(entql.HasEdge("parent_campaign"))
}

// WhereHasParentCampaignWith applies a predicate to check if query has an edge parent_campaign with a given conditions (other predicates).
func (f *FundraisingCampaignFilter) WhereHasParentCampaignWith(preds ...predicate.FundraisingCampaign) {
	f.Where(entql.HasEdgeWith("parent_campaign", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDonations applies a predicate to check if query has an edge donations.
func (f *FundraisingCampaignFilter) WhereHasDonations() {
	f.Where(entql.HasEdge("donations"))
}

// WhereHasDonationsWith applies a predicate to check if query has an edge donations with a given conditions (other predicates).
func (f *FundraisingCampaignFilter) WhereHasDonationsWith(preds ...predicate.Donation) {
	f.Where(entql.HasEdgeWith("donations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GalleryImageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GalleryImageQuery builder.
func (_q *GalleryImageQuery) Filter() *GalleryImageFilter {
	return &GalleryImageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GalleryImageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GalleryImageMutation builder.
func (m *GalleryImageMutation) Filter() *GalleryImageFilter {
	return &GalleryImageFilter{config: m.config, predicateAdder: m}
}

// GalleryImageFilter provides a generic filtering capability at runtime for GalleryImageQuery.
type GalleryImageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GalleryImageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GalleryImageFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(galleryimage.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *GalleryImageFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(galleryimage.FieldOrder))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *GalleryImageFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(galleryimage.FieldImageURL))
}

// WhereImageWidth applies the entql int predicate on the image_width field.
func (f *GalleryImageFilter) WhereImageWidth(p entql.IntP) {
	f.Where(p.Field(galleryimage.FieldImageWidth))
}

// WhereImageHeight applies the entql int predicate on the image_height field.
func (f *GalleryImageFilter) WhereImageHeight(p entql.IntP) {
	f.Where(p.Field(galleryimage.FieldImageHeight))
}

// WhereAltText applies the entql json.RawMessage predicate on the alt_text field.
func (f *GalleryImageFilter) WhereAltText(p entql.BytesP) {
	f.Where(p.Field(galleryimage.FieldAltText))
}

// WhereCaption applies the entql json.RawMessage predicate on the caption field.
func (f *GalleryImageFilter) WhereCaption(p entql.BytesP) {
	f.Where(p.Field(galleryimage.FieldCaption))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *GalleryImageFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *GalleryImageFilter) WhereHasBlockWith(preds ...predicate.BlockGallery) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GeneratedReportQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GeneratedReportQuery builder.
func (_q *GeneratedReportQuery) Filter() *GeneratedReportFilter {
	return &GeneratedReportFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GeneratedReportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GeneratedReportMutation builder.
func (m *GeneratedReportMutation) Filter() *GeneratedReportFilter {
	return &GeneratedReportFilter{config: m.config, predicateAdder: m}
}

// GeneratedReportFilter provides a generic filtering capability at runtime for GeneratedReportQuery.
type GeneratedReportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GeneratedReportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GeneratedReportFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(generatedreport.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *GeneratedReportFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldStatus))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *GeneratedReportFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldFormat))
}

// WhereFileURL applies the entql string predicate on the file_url field.
func (f *GeneratedReportFilter) WhereFileURL(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldFileURL))
}

// WhereFileSize applies the entql int predicate on the file_size field.
func (f *GeneratedReportFilter) WhereFileSize(p entql.IntP) {
	f.Where(p.Field(generatedreport.FieldFileSize))
}

// WhereParameters applies the entql json.RawMessage predicate on the parameters field.
func (f *GeneratedReportFilter) WhereParameters(p entql.BytesP) {
	f.Where(p.Field(generatedreport.FieldParameters))
}

// WhereDeliveryMethod applies the entql string predicate on the delivery_method field.
func (f *GeneratedReportFilter) WhereDeliveryMethod(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldDeliveryMethod))
}

// WhereRecipientEmail applies the entql string predicate on the recipient_email field.
func (f *GeneratedReportFilter) WhereRecipientEmail(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldRecipientEmail))
}

// WhereGeneratedAt applies the entql time.Time predicate on the generated_at field.
func (f *GeneratedReportFilter) WhereGeneratedAt(p entql.TimeP) {
	f.Where(p.Field(generatedreport.FieldGeneratedAt))
}

// WhereError applies the entql string predicate on the error field.
func (f *GeneratedReportFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(generatedreport.FieldError))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *GeneratedReportFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(generatedreport.FieldMetadata))
}

// WhereHasReportDefinition applies a predicate to check if query has an edge report_definition.
func (f *GeneratedReportFilter) WhereHasReportDefinition() {
	f.Where(entql.HasEdge("report_definition"))
}

// WhereHasReportDefinitionWith applies a predicate to check if query has an edge report_definition with a given conditions (other predicates).
func (f *GeneratedReportFilter) WhereHasReportDefinitionWith(preds ...predicate.ReportDefinition) {
	f.Where(entql.HasEdgeWith("report_definition", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGenerator applies a predicate to check if query has an edge generator.
func (f *GeneratedReportFilter) WhereHasGenerator() {
	f.Where(entql.HasEdge("generator"))
}

// WhereHasGeneratorWith applies a predicate to check if query has an edge generator with a given conditions (other predicates).
func (f *GeneratedReportFilter) WhereHasGeneratorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("generator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJob applies a predicate to check if query has an edge job.
func (f *GeneratedReportFilter) WhereHasJob() {
	f.Where(entql.HasEdge("job"))
}

// WhereHasJobWith applies a predicate to check if query has an edge job with a given conditions (other predicates).
func (f *GeneratedReportFilter) WhereHasJobWith(preds ...predicate.Job) {
	f.Where(entql.HasEdgeWith("job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GrantQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GrantQuery builder.
func (_q *GrantQuery) Filter() *GrantFilter {
	return &GrantFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GrantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GrantMutation builder.
func (m *GrantMutation) Filter() *GrantFilter {
	return &GrantFilter{config: m.config, predicateAdder: m}
}

// GrantFilter provides a generic filtering capability at runtime for GrantQuery.
type GrantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GrantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GrantFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(grant.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GrantFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(grant.FieldName))
}

// WhereGrantAmount applies the entql float64 predicate on the grant_amount field.
func (f *GrantFilter) WhereGrantAmount(p entql.Float64P) {
	f.Where(p.Field(grant.FieldGrantAmount))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *GrantFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(grant.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *GrantFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(grant.FieldEndDate))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *GrantFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(grant.FieldStatus))
}

// WhereGoals applies the entql json.RawMessage predicate on the goals field.
func (f *GrantFilter) WhereGoals(p entql.BytesP) {
	f.Where(p.Field(grant.FieldGoals))
}

// WhereGrantReference applies the entql string predicate on the grant_reference field.
func (f *GrantFilter) WhereGrantReference(p entql.StringP) {
	f.Where(p.Field(grant.FieldGrantReference))
}

// WhereContactPerson applies the entql string predicate on the contact_person field.
func (f *GrantFilter) WhereContactPerson(p entql.StringP) {
	f.Where(p.Field(grant.FieldContactPerson))
}

// WhereContactEmail applies the entql string predicate on the contact_email field.
func (f *GrantFilter) WhereContactEmail(p entql.StringP) {
	f.Where(p.Field(grant.FieldContactEmail))
}

// WhereRenewalEligible applies the entql bool predicate on the renewal_eligible field.
func (f *GrantFilter) WhereRenewalEligible(p entql.BoolP) {
	f.Where(p.Field(grant.FieldRenewalEligible))
}

// WhereNextReviewDate applies the entql time.Time predicate on the next_review_date field.
func (f *GrantFilter) WhereNextReviewDate(p entql.TimeP) {
	f.Where(p.Field(grant.FieldNextReviewDate))
}

// WhereRequiresMatching applies the entql bool predicate on the requires_matching field.
func (f *GrantFilter) WhereRequiresMatching(p entql.BoolP) {
	f.Where(p.Field(grant.FieldRequiresMatching))
}

// WhereMatchingAmount applies the entql float64 predicate on the matching_amount field.
func (f *GrantFilter) WhereMatchingAmount(p entql.Float64P) {
	f.Where(p.Field(grant.FieldMatchingAmount))
}

// WhereRestrictions applies the entql json.RawMessage predicate on the restrictions field.
func (f *GrantFilter) WhereRestrictions(p entql.BytesP) {
	f.Where(p.Field(grant.FieldRestrictions))
}

// WhereReportingSchedule applies the entql json.RawMessage predicate on the reporting_schedule field.
func (f *GrantFilter) WhereReportingSchedule(p entql.BytesP) {
	f.Where(p.Field(grant.FieldReportingSchedule))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GrantFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(grant.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GrantFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(grant.FieldUpdatedAt))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *GrantFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *GrantFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *GrantFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *GrantFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReports applies a predicate to check if query has an edge reports.
func (f *GrantFilter) WhereHasReports() {
	f.Where(entql.HasEdge("reports"))
}

// WhereHasReportsWith applies a predicate to check if query has an edge reports with a given conditions (other predicates).
func (f *GrantFilter) WhereHasReportsWith(preds ...predicate.GrantReport) {
	f.Where(entql.HasEdgeWith("reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *GrantReportQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GrantReportQuery builder.
func (_q *GrantReportQuery) Filter() *GrantReportFilter {
	return &GrantReportFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *GrantReportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GrantReportMutation builder.
func (m *GrantReportMutation) Filter() *GrantReportFilter {
	return &GrantReportFilter{config: m.config, predicateAdder: m}
}

// GrantReportFilter provides a generic filtering capability at runtime for GrantReportQuery.
type GrantReportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GrantReportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GrantReportFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(grantreport.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *GrantReportFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldTitle))
}

// WhereDueDate applies the entql time.Time predicate on the due_date field.
func (f *GrantReportFilter) WhereDueDate(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldDueDate))
}

// WhereSubmittedDate applies the entql time.Time predicate on the submitted_date field.
func (f *GrantReportFilter) WhereSubmittedDate(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldSubmittedDate))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *GrantReportFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldStatus))
}

// WhereDocumentURL applies the entql string predicate on the document_url field.
func (f *GrantReportFilter) WhereDocumentURL(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldDocumentURL))
}

// WhereReportType applies the entql string predicate on the report_type field.
func (f *GrantReportFilter) WhereReportType(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldReportType))
}

// WhereReviewedBy applies the entql string predicate on the reviewed_by field.
func (f *GrantReportFilter) WhereReviewedBy(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldReviewedBy))
}

// WhereReviewedAt applies the entql time.Time predicate on the reviewed_at field.
func (f *GrantReportFilter) WhereReviewedAt(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldReviewedAt))
}

// WhereFeedback applies the entql string predicate on the feedback field.
func (f *GrantReportFilter) WhereFeedback(p entql.StringP) {
	f.Where(p.Field(grantreport.FieldFeedback))
}

// WhereIsApproved applies the entql bool predicate on the is_approved field.
func (f *GrantReportFilter) WhereIsApproved(p entql.BoolP) {
	f.Where(p.Field(grantreport.FieldIsApproved))
}

// WhereNextDueDate applies the entql time.Time predicate on the next_due_date field.
func (f *GrantReportFilter) WhereNextDueDate(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldNextDueDate))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GrantReportFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GrantReportFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(grantreport.FieldUpdatedAt))
}

// WhereHasGrant applies a predicate to check if query has an edge grant.
func (f *GrantReportFilter) WhereHasGrant() {
	f.Where(entql.HasEdge("grant"))
}

// WhereHasGrantWith applies a predicate to check if query has an edge grant with a given conditions (other predicates).
func (f *GrantReportFilter) WhereHasGrantWith(preds ...predicate.Grant) {
	f.Where(entql.HasEdgeWith("grant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ImpactDataPointQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ImpactDataPointQuery builder.
func (_q *ImpactDataPointQuery) Filter() *ImpactDataPointFilter {
	return &ImpactDataPointFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ImpactDataPointMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ImpactDataPointMutation builder.
func (m *ImpactDataPointMutation) Filter() *ImpactDataPointFilter {
	return &ImpactDataPointFilter{config: m.config, predicateAdder: m}
}

// ImpactDataPointFilter provides a generic filtering capability at runtime for ImpactDataPointQuery.
type ImpactDataPointFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ImpactDataPointFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ImpactDataPointFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(impactdatapoint.FieldID))
}

// WhereValue applies the entql float64 predicate on the value field.
func (f *ImpactDataPointFilter) WhereValue(p entql.Float64P) {
	f.Where(p.Field(impactdatapoint.FieldValue))
}

// WhereRecordedAt applies the entql time.Time predicate on the recorded_at field.
func (f *ImpactDataPointFilter) WhereRecordedAt(p entql.TimeP) {
	f.Where(p.Field(impactdatapoint.FieldRecordedAt))
}

// WhereRecordedBy applies the entql string predicate on the recorded_by field.
func (f *ImpactDataPointFilter) WhereRecordedBy(p entql.StringP) {
	f.Where(p.Field(impactdatapoint.FieldRecordedBy))
}

// WherePeriod applies the entql string predicate on the period field.
func (f *ImpactDataPointFilter) WherePeriod(p entql.StringP) {
	f.Where(p.Field(impactdatapoint.FieldPeriod))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *ImpactDataPointFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(impactdatapoint.FieldNotes))
}

// WhereSource applies the entql string predicate on the source field.
func (f *ImpactDataPointFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(impactdatapoint.FieldSource))
}

// WhereIsVerified applies the entql bool predicate on the is_verified field.
func (f *ImpactDataPointFilter) WhereIsVerified(p entql.BoolP) {
	f.Where(p.Field(impactdatapoint.FieldIsVerified))
}

// WhereVerifiedBy applies the entql string predicate on the verified_by field.
func (f *ImpactDataPointFilter) WhereVerifiedBy(p entql.StringP) {
	f.Where(p.Field(impactdatapoint.FieldVerifiedBy))
}

// WhereVerifiedAt applies the entql time.Time predicate on the verified_at field.
func (f *ImpactDataPointFilter) WhereVerifiedAt(p entql.TimeP) {
	f.Where(p.Field(impactdatapoint.FieldVerifiedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ImpactDataPointFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(impactdatapoint.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ImpactDataPointFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(impactdatapoint.FieldUpdatedAt))
}

// WhereHasMetric applies a predicate to check if query has an edge metric.
func (f *ImpactDataPointFilter) WhereHasMetric() {
	f.Where(entql.HasEdge("metric"))
}

// WhereHasMetricWith applies a predicate to check if query has an edge metric with a given conditions (other predicates).
func (f *ImpactDataPointFilter) WhereHasMetricWith(preds ...predicate.ImpactMetric) {
	f.Where(entql.HasEdgeWith("metric", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ImpactMetricQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ImpactMetricQuery builder.
func (_q *ImpactMetricQuery) Filter() *ImpactMetricFilter {
	return &ImpactMetricFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ImpactMetricMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ImpactMetricMutation builder.
func (m *ImpactMetricMutation) Filter() *ImpactMetricFilter {
	return &ImpactMetricFilter{config: m.config, predicateAdder: m}
}

// ImpactMetricFilter provides a generic filtering capability at runtime for ImpactMetricQuery.
type ImpactMetricFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ImpactMetricFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ImpactMetricFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(impactmetric.FieldID))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *ImpactMetricFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(impactmetric.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *ImpactMetricFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(impactmetric.FieldType))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *ImpactMetricFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(impactmetric.FieldUnit))
}

// WhereTargetValue applies the entql float64 predicate on the target_value field.
func (f *ImpactMetricFilter) WhereTargetValue(p entql.Float64P) {
	f.Where(p.Field(impactmetric.FieldTargetValue))
}

// WhereCurrentValue applies the entql float64 predicate on the current_value field.
func (f *ImpactMetricFilter) WhereCurrentValue(p entql.Float64P) {
	f.Where(p.Field(impactmetric.FieldCurrentValue))
}

// WhereTargetDate applies the entql time.Time predicate on the target_date field.
func (f *ImpactMetricFilter) WhereTargetDate(p entql.TimeP) {
	f.Where(p.Field(impactmetric.FieldTargetDate))
}

// WhereCalculationMethod applies the entql string predicate on the calculation_method field.
func (f *ImpactMetricFilter) WhereCalculationMethod(p entql.StringP) {
	f.Where(p.Field(impactmetric.FieldCalculationMethod))
}

// WhereIsAutoCalculated applies the entql bool predicate on the is_auto_calculated field.
func (f *ImpactMetricFilter) WhereIsAutoCalculated(p entql.BoolP) {
	f.Where(p.Field(impactmetric.FieldIsAutoCalculated))
}

// WhereLastCalculated applies the entql time.Time predicate on the last_calculated field.
func (f *ImpactMetricFilter) WhereLastCalculated(p entql.TimeP) {
	f.Where(p.Field(impactmetric.FieldLastCalculated))
}

// WhereDisplayOrder applies the entql int predicate on the display_order field.
func (f *ImpactMetricFilter) WhereDisplayOrder(p entql.IntP) {
	f.Where(p.Field(impactmetric.FieldDisplayOrder))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *ImpactMetricFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(impactmetric.FieldIsPublic))
}

// WhereShowOnDashboard applies the entql bool predicate on the show_on_dashboard field.
func (f *ImpactMetricFilter) WhereShowOnDashboard(p entql.BoolP) {
	f.Where(p.Field(impactmetric.FieldShowOnDashboard))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ImpactMetricFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(impactmetric.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ImpactMetricFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(impactmetric.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *ImpactMetricFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *ImpactMetricFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDataPoints applies a predicate to check if query has an edge data_points.
func (f *ImpactMetricFilter) WhereHasDataPoints() {
	f.Where(entql.HasEdge("data_points"))
}

// WhereHasDataPointsWith applies a predicate to check if query has an edge data_points with a given conditions (other predicates).
func (f *ImpactMetricFilter) WhereHasDataPointsWith(preds ...predicate.ImpactDataPoint) {
	f.Where(entql.HasEdgeWith("data_points", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobQuery builder.
func (_q *JobQuery) Filter() *JobFilter {
	return &JobFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobMutation builder.
func (m *JobMutation) Filter() *JobFilter {
	return &JobFilter{config: m.config, predicateAdder: m}
}

// JobFilter provides a generic filtering capability at runtime for JobQuery.
type JobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *JobFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(job.FieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *JobFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(job.FieldType))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *JobFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(job.FieldStatus))
}

// WherePayload applies the entql json.RawMessage predicate on the payload field.
func (f *JobFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(job.FieldPayload))
}

// WhereResult applies the entql json.RawMessage predicate on the result field.
func (f *JobFilter) WhereResult(p entql.BytesP) {
	f.Where(p.Field(job.FieldResult))
}

// WhereError applies the entql string predicate on the error field.
func (f *JobFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(job.FieldError))
}

// WhereInngestRunID applies the entql string predicate on the inngest_run_id field.
func (f *JobFilter) WhereInngestRunID(p entql.StringP) {
	f.Where(p.Field(job.FieldInngestRunID))
}

// WhereScheduledFor applies the entql time.Time predicate on the scheduled_for field.
func (f *JobFilter) WhereScheduledFor(p entql.TimeP) {
	f.Where(p.Field(job.FieldScheduledFor))
}

// WherePriority applies the entql int predicate on the priority field.
func (f *JobFilter) WherePriority(p entql.IntP) {
	f.Where(p.Field(job.FieldPriority))
}

// WhereMaxRetries applies the entql int predicate on the max_retries field.
func (f *JobFilter) WhereMaxRetries(p entql.IntP) {
	f.Where(p.Field(job.FieldMaxRetries))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(job.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *JobFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(job.FieldUpdatedAt))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *JobFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(job.FieldStartedAt))
}

// WhereCompletedAt applies the entql time.Time predicate on the completed_at field.
func (f *JobFilter) WhereCompletedAt(p entql.TimeP) {
	f.Where(p.Field(job.FieldCompletedAt))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *JobFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(job.FieldMetadata))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *JobFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *JobFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLogs applies a predicate to check if query has an edge logs.
func (f *JobFilter) WhereHasLogs() {
	f.Where(entql.HasEdge("logs"))
}

// WhereHasLogsWith applies a predicate to check if query has an edge logs with a given conditions (other predicates).
func (f *JobFilter) WhereHasLogsWith(preds ...predicate.JobLog) {
	f.Where(entql.HasEdgeWith("logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDependents applies a predicate to check if query has an edge dependents.
func (f *JobFilter) WhereHasDependents() {
	f.Where(entql.HasEdge("dependents"))
}

// WhereHasDependentsWith applies a predicate to check if query has an edge dependents with a given conditions (other predicates).
func (f *JobFilter) WhereHasDependentsWith(preds ...predicate.Job) {
	f.Where(entql.HasEdgeWith("dependents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDependsOn applies a predicate to check if query has an edge depends_on.
func (f *JobFilter) WhereHasDependsOn() {
	f.Where(entql.HasEdge("depends_on"))
}

// WhereHasDependsOnWith applies a predicate to check if query has an edge depends_on with a given conditions (other predicates).
func (f *JobFilter) WhereHasDependsOnWith(preds ...predicate.Job) {
	f.Where(entql.HasEdgeWith("depends_on", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReports applies a predicate to check if query has an edge reports.
func (f *JobFilter) WhereHasReports() {
	f.Where(entql.HasEdge("reports"))
}

// WhereHasReportsWith applies a predicate to check if query has an edge reports with a given conditions (other predicates).
func (f *JobFilter) WhereHasReportsWith(preds ...predicate.GeneratedReport) {
	f.Where(entql.HasEdgeWith("reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *JobLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobLogQuery builder.
func (_q *JobLogQuery) Filter() *JobLogFilter {
	return &JobLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *JobLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobLogMutation builder.
func (m *JobLogMutation) Filter() *JobLogFilter {
	return &JobLogFilter{config: m.config, predicateAdder: m}
}

// JobLogFilter provides a generic filtering capability at runtime for JobLogQuery.
type JobLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *JobLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(joblog.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *JobLogFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(joblog.FieldStatus))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *JobLogFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(joblog.FieldMessage))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *JobLogFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(joblog.FieldMetadata))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *JobLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(joblog.FieldCreatedAt))
}

// WhereHasJob applies a predicate to check if query has an edge job.
func (f *JobLogFilter) WhereHasJob() {
	f.Where(entql.HasEdge("job"))
}

// WhereHasJobWith applies a predicate to check if query has an edge job with a given conditions (other predicates).
func (f *JobLogFilter) WhereHasJobWith(preds ...predicate.Job) {
	f.Where(entql.HasEdgeWith("job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MentorshipRequestQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MentorshipRequestQuery builder.
func (_q *MentorshipRequestQuery) Filter() *MentorshipRequestFilter {
	return &MentorshipRequestFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MentorshipRequestMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MentorshipRequestMutation builder.
func (m *MentorshipRequestMutation) Filter() *MentorshipRequestFilter {
	return &MentorshipRequestFilter{config: m.config, predicateAdder: m}
}

// MentorshipRequestFilter provides a generic filtering capability at runtime for MentorshipRequestQuery.
type MentorshipRequestFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MentorshipRequestFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MentorshipRequestFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(mentorshiprequest.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *MentorshipRequestFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(mentorshiprequest.FieldStatus))
}

// WhereGoals applies the entql json.RawMessage predicate on the goals field.
func (f *MentorshipRequestFilter) WhereGoals(p entql.BytesP) {
	f.Where(p.Field(mentorshiprequest.FieldGoals))
}

// WherePreferences applies the entql json.RawMessage predicate on the preferences field.
func (f *MentorshipRequestFilter) WherePreferences(p entql.BytesP) {
	f.Where(p.Field(mentorshiprequest.FieldPreferences))
}

// WhereDuration applies the entql string predicate on the duration field.
func (f *MentorshipRequestFilter) WhereDuration(p entql.StringP) {
	f.Where(p.Field(mentorshiprequest.FieldDuration))
}

// WhereMatchedAt applies the entql time.Time predicate on the matched_at field.
func (f *MentorshipRequestFilter) WhereMatchedAt(p entql.TimeP) {
	f.Where(p.Field(mentorshiprequest.FieldMatchedAt))
}

// WhereMatchedBy applies the entql string predicate on the matched_by field.
func (f *MentorshipRequestFilter) WhereMatchedBy(p entql.StringP) {
	f.Where(p.Field(mentorshiprequest.FieldMatchedBy))
}

// WhereMatchReason applies the entql string predicate on the match_reason field.
func (f *MentorshipRequestFilter) WhereMatchReason(p entql.StringP) {
	f.Where(p.Field(mentorshiprequest.FieldMatchReason))
}

// WhereSessionsCompleted applies the entql int predicate on the sessions_completed field.
func (f *MentorshipRequestFilter) WhereSessionsCompleted(p entql.IntP) {
	f.Where(p.Field(mentorshiprequest.FieldSessionsCompleted))
}

// WhereLastSessionDate applies the entql time.Time predicate on the last_session_date field.
func (f *MentorshipRequestFilter) WhereLastSessionDate(p entql.TimeP) {
	f.Where(p.Field(mentorshiprequest.FieldLastSessionDate))
}

// WhereNextSessionDate applies the entql time.Time predicate on the next_session_date field.
func (f *MentorshipRequestFilter) WhereNextSessionDate(p entql.TimeP) {
	f.Where(p.Field(mentorshiprequest.FieldNextSessionDate))
}

// WhereCompletionNotes applies the entql string predicate on the completion_notes field.
func (f *MentorshipRequestFilter) WhereCompletionNotes(p entql.StringP) {
	f.Where(p.Field(mentorshiprequest.FieldCompletionNotes))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MentorshipRequestFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mentorshiprequest.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MentorshipRequestFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mentorshiprequest.FieldUpdatedAt))
}

// WhereHasRequester applies a predicate to check if query has an edge requester.
func (f *MentorshipRequestFilter) WhereHasRequester() {
	f.Where(entql.HasEdge("requester"))
}

// WhereHasRequesterWith applies a predicate to check if query has an edge requester with a given conditions (other predicates).
func (f *MentorshipRequestFilter) WhereHasRequesterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("requester", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentor applies a predicate to check if query has an edge mentor.
func (f *MentorshipRequestFilter) WhereHasMentor() {
	f.Where(entql.HasEdge("mentor"))
}

// WhereHasMentorWith applies a predicate to check if query has an edge mentor with a given conditions (other predicates).
func (f *MentorshipRequestFilter) WhereHasMentorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("mentor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSessions applies a predicate to check if query has an edge sessions.
func (f *MentorshipRequestFilter) WhereHasSessions() {
	f.Where(entql.HasEdge("sessions"))
}

// WhereHasSessionsWith applies a predicate to check if query has an edge sessions with a given conditions (other predicates).
func (f *MentorshipRequestFilter) WhereHasSessionsWith(preds ...predicate.MentorshipSession) {
	f.Where(entql.HasEdgeWith("sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MentorshipSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MentorshipSessionQuery builder.
func (_q *MentorshipSessionQuery) Filter() *MentorshipSessionFilter {
	return &MentorshipSessionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MentorshipSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MentorshipSessionMutation builder.
func (m *MentorshipSessionMutation) Filter() *MentorshipSessionFilter {
	return &MentorshipSessionFilter{config: m.config, predicateAdder: m}
}

// MentorshipSessionFilter provides a generic filtering capability at runtime for MentorshipSessionQuery.
type MentorshipSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MentorshipSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MentorshipSessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(mentorshipsession.FieldID))
}

// WhereScheduledAt applies the entql time.Time predicate on the scheduled_at field.
func (f *MentorshipSessionFilter) WhereScheduledAt(p entql.TimeP) {
	f.Where(p.Field(mentorshipsession.FieldScheduledAt))
}

// WhereDuration applies the entql int predicate on the duration field.
func (f *MentorshipSessionFilter) WhereDuration(p entql.IntP) {
	f.Where(p.Field(mentorshipsession.FieldDuration))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *MentorshipSessionFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(mentorshipsession.FieldFormat))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *MentorshipSessionFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(mentorshipsession.FieldStatus))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *MentorshipSessionFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(mentorshipsession.FieldNotes))
}

// WhereActionItems applies the entql json.RawMessage predicate on the action_items field.
func (f *MentorshipSessionFilter) WhereActionItems(p entql.BytesP) {
	f.Where(p.Field(mentorshipsession.FieldActionItems))
}

// WhereMentorRating applies the entql int predicate on the mentor_rating field.
func (f *MentorshipSessionFilter) WhereMentorRating(p entql.IntP) {
	f.Where(p.Field(mentorshipsession.FieldMentorRating))
}

// WhereMenteeRating applies the entql int predicate on the mentee_rating field.
func (f *MentorshipSessionFilter) WhereMenteeRating(p entql.IntP) {
	f.Where(p.Field(mentorshipsession.FieldMenteeRating))
}

// WhereMentorFeedback applies the entql string predicate on the mentor_feedback field.
func (f *MentorshipSessionFilter) WhereMentorFeedback(p entql.StringP) {
	f.Where(p.Field(mentorshipsession.FieldMentorFeedback))
}

// WhereMenteeFeedback applies the entql string predicate on the mentee_feedback field.
func (f *MentorshipSessionFilter) WhereMenteeFeedback(p entql.StringP) {
	f.Where(p.Field(mentorshipsession.FieldMenteeFeedback))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MentorshipSessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(mentorshipsession.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MentorshipSessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(mentorshipsession.FieldUpdatedAt))
}

// WhereHasMentorshipRequest applies a predicate to check if query has an edge mentorship_request.
func (f *MentorshipSessionFilter) WhereHasMentorshipRequest() {
	f.Where(entql.HasEdge("mentorship_request"))
}

// WhereHasMentorshipRequestWith applies a predicate to check if query has an edge mentorship_request with a given conditions (other predicates).
func (f *MentorshipSessionFilter) WhereHasMentorshipRequestWith(preds ...predicate.MentorshipRequest) {
	f.Where(entql.HasEdgeWith("mentorship_request", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgenda applies a predicate to check if query has an edge agenda.
func (f *MentorshipSessionFilter) WhereHasAgenda() {
	f.Where(entql.HasEdge("agenda"))
}

// WhereHasAgendaWith applies a predicate to check if query has an edge agenda with a given conditions (other predicates).
func (f *MentorshipSessionFilter) WhereHasAgendaWith(preds ...predicate.Agenda) {
	f.Where(entql.HasEdgeWith("agenda", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MessageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MessageQuery builder.
func (_q *MessageQuery) Filter() *MessageFilter {
	return &MessageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MessageMutation builder.
func (m *MessageMutation) Filter() *MessageFilter {
	return &MessageFilter{config: m.config, predicateAdder: m}
}

// MessageFilter provides a generic filtering capability at runtime for MessageQuery.
type MessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[57].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MessageFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(message.FieldID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *MessageFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(message.FieldContent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MessageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(message.FieldCreatedAt))
}

// WhereHasConversation applies a predicate to check if query has an edge conversation.
func (f *MessageFilter) WhereHasConversation() {
	f.Where(entql.HasEdge("conversation"))
}

// WhereHasConversationWith applies a predicate to check if query has an edge conversation with a given conditions (other predicates).
func (f *MessageFilter) WhereHasConversationWith(preds ...predicate.Conversation) {
	f.Where(entql.HasEdgeWith("conversation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSender applies a predicate to check if query has an edge sender.
func (f *MessageFilter) WhereHasSender() {
	f.Where(entql.HasEdge("sender"))
}

// WhereHasSenderWith applies a predicate to check if query has an edge sender with a given conditions (other predicates).
func (f *MessageFilter) WhereHasSenderWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("sender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *NewsArticleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NewsArticleQuery builder.
func (_q *NewsArticleQuery) Filter() *NewsArticleFilter {
	return &NewsArticleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *NewsArticleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NewsArticleMutation builder.
func (m *NewsArticleMutation) Filter() *NewsArticleFilter {
	return &NewsArticleFilter{config: m.config, predicateAdder: m}
}

// NewsArticleFilter provides a generic filtering capability at runtime for NewsArticleQuery.
type NewsArticleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NewsArticleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[58].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *NewsArticleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(newsarticle.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *NewsArticleFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(newsarticle.FieldSlug))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *NewsArticleFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(newsarticle.FieldTitle))
}

// WhereContent applies the entql json.RawMessage predicate on the content field.
func (f *NewsArticleFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(newsarticle.FieldContent))
}

// WhereExcerpt applies the entql json.RawMessage predicate on the excerpt field.
func (f *NewsArticleFilter) WhereExcerpt(p entql.BytesP) {
	f.Where(p.Field(newsarticle.FieldExcerpt))
}

// WhereFeaturedImageURL applies the entql string predicate on the featured_image_url field.
func (f *NewsArticleFilter) WhereFeaturedImageURL(p entql.StringP) {
	f.Where(p.Field(newsarticle.FieldFeaturedImageURL))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *NewsArticleFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(newsarticle.FieldStatus))
}

// WherePublishedAt applies the entql time.Time predicate on the published_at field.
func (f *NewsArticleFilter) WherePublishedAt(p entql.TimeP) {
	f.Where(p.Field(newsarticle.FieldPublishedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *NewsArticleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(newsarticle.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *NewsArticleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(newsarticle.FieldUpdatedAt))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *NewsArticleFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *NewsArticleFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (_q *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[59].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereWebsite applies the entql string predicate on the website field.
func (f *OrganizationFilter) WhereWebsite(p entql.StringP) {
	f.Where(p.Field(organization.FieldWebsite))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *OrganizationFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(organization.FieldLogoURL))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organization.FieldDescription))
}

// WhereIndustry applies the entql string predicate on the industry field.
func (f *OrganizationFilter) WhereIndustry(p entql.StringP) {
	f.Where(p.Field(organization.FieldIndustry))
}

// WhereSize applies the entql string predicate on the size field.
func (f *OrganizationFilter) WhereSize(p entql.StringP) {
	f.Where(p.Field(organization.FieldSize))
}

// WhereContactEmail applies the entql string predicate on the contact_email field.
func (f *OrganizationFilter) WhereContactEmail(p entql.StringP) {
	f.Where(p.Field(organization.FieldContactEmail))
}

// WhereContactPhone applies the entql string predicate on the contact_phone field.
func (f *OrganizationFilter) WhereContactPhone(p entql.StringP) {
	f.Where(p.Field(organization.FieldContactPhone))
}

// WhereAddress applies the entql json.RawMessage predicate on the address field.
func (f *OrganizationFilter) WhereAddress(p entql.BytesP) {
	f.Where(p.Field(organization.FieldAddress))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereHasPartnerships applies a predicate to check if query has an edge partnerships.
func (f *OrganizationFilter) WhereHasPartnerships() {
	f.Where(entql.HasEdge("partnerships"))
}

// WhereHasPartnershipsWith applies a predicate to check if query has an edge partnerships with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasPartnershipsWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnerships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGrants applies a predicate to check if query has an edge grants.
func (f *OrganizationFilter) WhereHasGrants() {
	f.Where(entql.HasEdge("grants"))
}

// WhereHasGrantsWith applies a predicate to check if query has an edge grants with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGrantsWith(preds ...predicate.Grant) {
	f.Where(entql.HasEdgeWith("grants", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrganizationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PageQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PageQuery builder.
func (_q *PageQuery) Filter() *PageFilter {
	return &PageFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PageMutation builder.
func (m *PageMutation) Filter() *PageFilter {
	return &PageFilter{config: m.config, predicateAdder: m}
}

// PageFilter provides a generic filtering capability at runtime for PageQuery.
type PageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[60].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PageFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(page.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *PageFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(page.FieldSlug))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *PageFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(page.FieldTitle))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PageFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(page.FieldStatus))
}

// WherePublishedAt applies the entql time.Time predicate on the published_at field.
func (f *PageFilter) WherePublishedAt(p entql.TimeP) {
	f.Where(p.Field(page.FieldPublishedAt))
}

// WhereLayout applies the entql string predicate on the layout field.
func (f *PageFilter) WhereLayout(p entql.StringP) {
	f.Where(p.Field(page.FieldLayout))
}

// WhereIsHomepage applies the entql bool predicate on the is_homepage field.
func (f *PageFilter) WhereIsHomepage(p entql.BoolP) {
	f.Where(p.Field(page.FieldIsHomepage))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PageFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(page.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PageFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(page.FieldUpdatedAt))
}

// WhereHasChildPages applies a predicate to check if query has an edge child_pages.
func (f *PageFilter) WhereHasChildPages() {
	f.Where(entql.HasEdge("child_pages"))
}

// WhereHasChildPagesWith applies a predicate to check if query has an edge child_pages with a given conditions (other predicates).
func (f *PageFilter) WhereHasChildPagesWith(preds ...predicate.Page) {
	f.Where(entql.HasEdgeWith("child_pages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParentPage applies a predicate to check if query has an edge parent_page.
func (f *PageFilter) WhereHasParentPage() {
	f.Where(entql.HasEdge("parent_page"))
}

// WhereHasParentPageWith applies a predicate to check if query has an edge parent_page with a given conditions (other predicates).
func (f *PageFilter) WhereHasParentPageWith(preds ...predicate.Page) {
	f.Where(entql.HasEdgeWith("parent_page", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBlocks applies a predicate to check if query has an edge blocks.
func (f *PageFilter) WhereHasBlocks() {
	f.Where(entql.HasEdge("blocks"))
}

// WhereHasBlocksWith applies a predicate to check if query has an edge blocks with a given conditions (other predicates).
func (f *PageFilter) WhereHasBlocksWith(preds ...predicate.ContentBlock) {
	f.Where(entql.HasEdgeWith("blocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeo applies a predicate to check if query has an edge seo.
func (f *PageFilter) WhereHasSeo() {
	f.Where(entql.HasEdge("seo"))
}

// WhereHasSeoWith applies a predicate to check if query has an edge seo with a given conditions (other predicates).
func (f *PageFilter) WhereHasSeoWith(preds ...predicate.SeoConfig) {
	f.Where(entql.HasEdgeWith("seo", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PartnerLogoItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PartnerLogoItemQuery builder.
func (_q *PartnerLogoItemQuery) Filter() *PartnerLogoItemFilter {
	return &PartnerLogoItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PartnerLogoItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PartnerLogoItemMutation builder.
func (m *PartnerLogoItemMutation) Filter() *PartnerLogoItemFilter {
	return &PartnerLogoItemFilter{config: m.config, predicateAdder: m}
}

// PartnerLogoItemFilter provides a generic filtering capability at runtime for PartnerLogoItemQuery.
type PartnerLogoItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PartnerLogoItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[61].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PartnerLogoItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(partnerlogoitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *PartnerLogoItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(partnerlogoitem.FieldOrder))
}

// WhereName applies the entql string predicate on the name field.
func (f *PartnerLogoItemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(partnerlogoitem.FieldName))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *PartnerLogoItemFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(partnerlogoitem.FieldLogoURL))
}

// WhereWebsite applies the entql string predicate on the website field.
func (f *PartnerLogoItemFilter) WhereWebsite(p entql.StringP) {
	f.Where(p.Field(partnerlogoitem.FieldWebsite))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *PartnerLogoItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *PartnerLogoItemFilter) WhereHasBlockWith(preds ...predicate.BlockPartnerLogos) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PartnershipQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PartnershipQuery builder.
func (_q *PartnershipQuery) Filter() *PartnershipFilter {
	return &PartnershipFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PartnershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PartnershipMutation builder.
func (m *PartnershipMutation) Filter() *PartnershipFilter {
	return &PartnershipFilter{config: m.config, predicateAdder: m}
}

// PartnershipFilter provides a generic filtering capability at runtime for PartnershipQuery.
type PartnershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PartnershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[62].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PartnershipFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(partnership.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *PartnershipFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(partnership.FieldSlug))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *PartnershipFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(partnership.FieldName))
}

// WhereType applies the entql string predicate on the type field.
func (f *PartnershipFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(partnership.FieldType))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PartnershipFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(partnership.FieldStatus))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *PartnershipFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(partnership.FieldDescription))
}

// WhereValue applies the entql float64 predicate on the value field.
func (f *PartnershipFilter) WhereValue(p entql.Float64P) {
	f.Where(p.Field(partnership.FieldValue))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *PartnershipFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(partnership.FieldCurrency))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *PartnershipFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *PartnershipFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldEndDate))
}

// WhereRenewalDate applies the entql time.Time predicate on the renewal_date field.
func (f *PartnershipFilter) WhereRenewalDate(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldRenewalDate))
}

// WhereBenefits applies the entql json.RawMessage predicate on the benefits field.
func (f *PartnershipFilter) WhereBenefits(p entql.BytesP) {
	f.Where(p.Field(partnership.FieldBenefits))
}

// WhereDeliverables applies the entql json.RawMessage predicate on the deliverables field.
func (f *PartnershipFilter) WhereDeliverables(p entql.BytesP) {
	f.Where(p.Field(partnership.FieldDeliverables))
}

// WhereRequirements applies the entql json.RawMessage predicate on the requirements field.
func (f *PartnershipFilter) WhereRequirements(p entql.BytesP) {
	f.Where(p.Field(partnership.FieldRequirements))
}

// WhereLastContact applies the entql time.Time predicate on the last_contact field.
func (f *PartnershipFilter) WhereLastContact(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldLastContact))
}

// WhereNextFollowUp applies the entql time.Time predicate on the next_follow_up field.
func (f *PartnershipFilter) WhereNextFollowUp(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldNextFollowUp))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PartnershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PartnershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(partnership.FieldUpdatedAt))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *PartnershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *PartnershipFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasManagerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrimaryContacts applies a predicate to check if query has an edge primary_contacts.
func (f *PartnershipFilter) WhereHasPrimaryContacts() {
	f.Where(entql.HasEdge("primary_contacts"))
}

// WhereHasPrimaryContactsWith applies a predicate to check if query has an edge primary_contacts with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasPrimaryContactsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("primary_contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReports applies a predicate to check if query has an edge reports.
func (f *PartnershipFilter) WhereHasReports() {
	f.Where(entql.HasEdge("reports"))
}

// WhereHasReportsWith applies a predicate to check if query has an edge reports with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasReportsWith(preds ...predicate.PartnershipReport) {
	f.Where(entql.HasEdgeWith("reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInteractions applies a predicate to check if query has an edge interactions.
func (f *PartnershipFilter) WhereHasInteractions() {
	f.Where(entql.HasEdge("interactions"))
}

// WhereHasInteractionsWith applies a predicate to check if query has an edge interactions with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasInteractionsWith(preds ...predicate.PartnershipInteraction) {
	f.Where(entql.HasEdgeWith("interactions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRenewals applies a predicate to check if query has an edge renewals.
func (f *PartnershipFilter) WhereHasRenewals() {
	f.Where(entql.HasEdge("renewals"))
}

// WhereHasRenewalsWith applies a predicate to check if query has an edge renewals with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasRenewalsWith(preds ...predicate.PartnershipRenewal) {
	f.Where(entql.HasEdgeWith("renewals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrandBenefits applies a predicate to check if query has an edge brand_benefits.
func (f *PartnershipFilter) WhereHasBrandBenefits() {
	f.Where(entql.HasEdge("brand_benefits"))
}

// WhereHasBrandBenefitsWith applies a predicate to check if query has an edge brand_benefits with a given conditions (other predicates).
func (f *PartnershipFilter) WhereHasBrandBenefitsWith(preds ...predicate.BrandBenefit) {
	f.Where(entql.HasEdgeWith("brand_benefits", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PartnershipInteractionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PartnershipInteractionQuery builder.
func (_q *PartnershipInteractionQuery) Filter() *PartnershipInteractionFilter {
	return &PartnershipInteractionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PartnershipInteractionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PartnershipInteractionMutation builder.
func (m *PartnershipInteractionMutation) Filter() *PartnershipInteractionFilter {
	return &PartnershipInteractionFilter{config: m.config, predicateAdder: m}
}

// PartnershipInteractionFilter provides a generic filtering capability at runtime for PartnershipInteractionQuery.
type PartnershipInteractionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PartnershipInteractionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[63].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PartnershipInteractionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(partnershipinteraction.FieldID))
}

// WhereInteractionType applies the entql string predicate on the interaction_type field.
func (f *PartnershipInteractionFilter) WhereInteractionType(p entql.StringP) {
	f.Where(p.Field(partnershipinteraction.FieldInteractionType))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *PartnershipInteractionFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(partnershipinteraction.FieldSubject))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *PartnershipInteractionFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(partnershipinteraction.FieldSummary))
}

// WhereInteractedAt applies the entql time.Time predicate on the interacted_at field.
func (f *PartnershipInteractionFilter) WhereInteractedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipinteraction.FieldInteractedAt))
}

// WhereAttendees applies the entql json.RawMessage predicate on the attendees field.
func (f *PartnershipInteractionFilter) WhereAttendees(p entql.BytesP) {
	f.Where(p.Field(partnershipinteraction.FieldAttendees))
}

// WhereFollowUpRequired applies the entql bool predicate on the follow_up_required field.
func (f *PartnershipInteractionFilter) WhereFollowUpRequired(p entql.BoolP) {
	f.Where(p.Field(partnershipinteraction.FieldFollowUpRequired))
}

// WhereFollowUpDate applies the entql time.Time predicate on the follow_up_date field.
func (f *PartnershipInteractionFilter) WhereFollowUpDate(p entql.TimeP) {
	f.Where(p.Field(partnershipinteraction.FieldFollowUpDate))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PartnershipInteractionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipinteraction.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PartnershipInteractionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipinteraction.FieldUpdatedAt))
}

// WhereHasPartnership applies a predicate to check if query has an edge partnership.
func (f *PartnershipInteractionFilter) WhereHasPartnership() {
	f.Where(entql.HasEdge("partnership"))
}

// WhereHasPartnershipWith applies a predicate to check if query has an edge partnership with a given conditions (other predicates).
func (f *PartnershipInteractionFilter) WhereHasPartnershipWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PartnershipRenewalQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PartnershipRenewalQuery builder.
func (_q *PartnershipRenewalQuery) Filter() *PartnershipRenewalFilter {
	return &PartnershipRenewalFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PartnershipRenewalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PartnershipRenewalMutation builder.
func (m *PartnershipRenewalMutation) Filter() *PartnershipRenewalFilter {
	return &PartnershipRenewalFilter{config: m.config, predicateAdder: m}
}

// PartnershipRenewalFilter provides a generic filtering capability at runtime for PartnershipRenewalQuery.
type PartnershipRenewalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PartnershipRenewalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[64].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PartnershipRenewalFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(partnershiprenewal.FieldID))
}

// WherePreviousEndDate applies the entql time.Time predicate on the previous_end_date field.
func (f *PartnershipRenewalFilter) WherePreviousEndDate(p entql.TimeP) {
	f.Where(p.Field(partnershiprenewal.FieldPreviousEndDate))
}

// WhereNewEndDate applies the entql time.Time predicate on the new_end_date field.
func (f *PartnershipRenewalFilter) WhereNewEndDate(p entql.TimeP) {
	f.Where(p.Field(partnershiprenewal.FieldNewEndDate))
}

// WhereRenewalValue applies the entql float64 predicate on the renewal_value field.
func (f *PartnershipRenewalFilter) WhereRenewalValue(p entql.Float64P) {
	f.Where(p.Field(partnershiprenewal.FieldRenewalValue))
}

// WhereRenewalTerms applies the entql json.RawMessage predicate on the renewal_terms field.
func (f *PartnershipRenewalFilter) WhereRenewalTerms(p entql.BytesP) {
	f.Where(p.Field(partnershiprenewal.FieldRenewalTerms))
}

// WhereNegotiatedBy applies the entql string predicate on the negotiated_by field.
func (f *PartnershipRenewalFilter) WhereNegotiatedBy(p entql.StringP) {
	f.Where(p.Field(partnershiprenewal.FieldNegotiatedBy))
}

// WhereApprovedBy applies the entql string predicate on the approved_by field.
func (f *PartnershipRenewalFilter) WhereApprovedBy(p entql.StringP) {
	f.Where(p.Field(partnershiprenewal.FieldApprovedBy))
}

// WhereApprovedAt applies the entql time.Time predicate on the approved_at field.
func (f *PartnershipRenewalFilter) WhereApprovedAt(p entql.TimeP) {
	f.Where(p.Field(partnershiprenewal.FieldApprovedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PartnershipRenewalFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershiprenewal.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PartnershipRenewalFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershiprenewal.FieldUpdatedAt))
}

// WhereHasPartnership applies a predicate to check if query has an edge partnership.
func (f *PartnershipRenewalFilter) WhereHasPartnership() {
	f.Where(entql.HasEdge("partnership"))
}

// WhereHasPartnershipWith applies a predicate to check if query has an edge partnership with a given conditions (other predicates).
func (f *PartnershipRenewalFilter) WhereHasPartnershipWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PartnershipReportQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PartnershipReportQuery builder.
func (_q *PartnershipReportQuery) Filter() *PartnershipReportFilter {
	return &PartnershipReportFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PartnershipReportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PartnershipReportMutation builder.
func (m *PartnershipReportMutation) Filter() *PartnershipReportFilter {
	return &PartnershipReportFilter{config: m.config, predicateAdder: m}
}

// PartnershipReportFilter provides a generic filtering capability at runtime for PartnershipReportQuery.
type PartnershipReportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PartnershipReportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[65].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PartnershipReportFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(partnershipreport.FieldID))
}

// WhereReportPeriod applies the entql string predicate on the report_period field.
func (f *PartnershipReportFilter) WhereReportPeriod(p entql.StringP) {
	f.Where(p.Field(partnershipreport.FieldReportPeriod))
}

// WhereGeneratedAt applies the entql time.Time predicate on the generated_at field.
func (f *PartnershipReportFilter) WhereGeneratedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipreport.FieldGeneratedAt))
}

// WhereGeneratedBy applies the entql string predicate on the generated_by field.
func (f *PartnershipReportFilter) WhereGeneratedBy(p entql.StringP) {
	f.Where(p.Field(partnershipreport.FieldGeneratedBy))
}

// WhereImpactMetrics applies the entql json.RawMessage predicate on the impact_metrics field.
func (f *PartnershipReportFilter) WhereImpactMetrics(p entql.BytesP) {
	f.Where(p.Field(partnershipreport.FieldImpactMetrics))
}

// WhereOutcomes applies the entql json.RawMessage predicate on the outcomes field.
func (f *PartnershipReportFilter) WhereOutcomes(p entql.BytesP) {
	f.Where(p.Field(partnershipreport.FieldOutcomes))
}

// WhereFeedback applies the entql json.RawMessage predicate on the feedback field.
func (f *PartnershipReportFilter) WhereFeedback(p entql.BytesP) {
	f.Where(p.Field(partnershipreport.FieldFeedback))
}

// WhereReportURL applies the entql string predicate on the report_url field.
func (f *PartnershipReportFilter) WhereReportURL(p entql.StringP) {
	f.Where(p.Field(partnershipreport.FieldReportURL))
}

// WherePresentationURL applies the entql string predicate on the presentation_url field.
func (f *PartnershipReportFilter) WherePresentationURL(p entql.StringP) {
	f.Where(p.Field(partnershipreport.FieldPresentationURL))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PartnershipReportFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipreport.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PartnershipReportFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(partnershipreport.FieldUpdatedAt))
}

// WhereHasPartnership applies a predicate to check if query has an edge partnership.
func (f *PartnershipReportFilter) WhereHasPartnership() {
	f.Where(entql.HasEdge("partnership"))
}

// WhereHasPartnershipWith applies a predicate to check if query has an edge partnership with a given conditions (other predicates).
func (f *PartnershipReportFilter) WhereHasPartnershipWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnership", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PasswordHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PasswordHistoryQuery builder.
func (_q *PasswordHistoryQuery) Filter() *PasswordHistoryFilter {
	return &PasswordHistoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PasswordHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PasswordHistoryMutation builder.
func (m *PasswordHistoryMutation) Filter() *PasswordHistoryFilter {
	return &PasswordHistoryFilter{config: m.config, predicateAdder: m}
}

// PasswordHistoryFilter provides a generic filtering capability at runtime for PasswordHistoryQuery.
type PasswordHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PasswordHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[66].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PasswordHistoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(passwordhistory.FieldID))
}

// WhereHashedPassword applies the entql string predicate on the hashed_password field.
func (f *PasswordHistoryFilter) WhereHashedPassword(p entql.StringP) {
	f.Where(p.Field(passwordhistory.FieldHashedPassword))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PasswordHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordhistory.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *PasswordHistoryFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *PasswordHistoryFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (_q *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[67].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(permission.FieldID))
}

// WhereResource applies the entql string predicate on the resource field.
func (f *PermissionFilter) WhereResource(p entql.StringP) {
	f.Where(p.Field(permission.FieldResource))
}

// WhereAction applies the entql string predicate on the action field.
func (f *PermissionFilter) WhereAction(p entql.StringP) {
	f.Where(p.Field(permission.FieldAction))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *PermissionFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRolesWith(preds ...predicate.RolePermission) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramQuery builder.
func (_q *ProgramQuery) Filter() *ProgramFilter {
	return &ProgramFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramMutation builder.
func (m *ProgramMutation) Filter() *ProgramFilter {
	return &ProgramFilter{config: m.config, predicateAdder: m}
}

// ProgramFilter provides a generic filtering capability at runtime for ProgramQuery.
type ProgramFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[68].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ProgramFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(program.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *ProgramFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(program.FieldSlug))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *ProgramFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(program.FieldName))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *ProgramFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(program.FieldDescription))
}

// WhereTagline applies the entql json.RawMessage predicate on the tagline field.
func (f *ProgramFilter) WhereTagline(p entql.BytesP) {
	f.Where(p.Field(program.FieldTagline))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProgramFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(program.FieldStatus))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *ProgramFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(program.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *ProgramFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(program.FieldEndDate))
}

// WhereHeroImageURL applies the entql string predicate on the hero_image_url field.
func (f *ProgramFilter) WhereHeroImageURL(p entql.StringP) {
	f.Where(p.Field(program.FieldHeroImageURL))
}

// WhereThumbnailURL applies the entql string predicate on the thumbnail_url field.
func (f *ProgramFilter) WhereThumbnailURL(p entql.StringP) {
	f.Where(p.Field(program.FieldThumbnailURL))
}

// WhereVideoThumbnailURL applies the entql string predicate on the video_thumbnail_url field.
func (f *ProgramFilter) WhereVideoThumbnailURL(p entql.StringP) {
	f.Where(p.Field(program.FieldVideoThumbnailURL))
}

// WhereMediaGallery applies the entql json.RawMessage predicate on the media_gallery field.
func (f *ProgramFilter) WhereMediaGallery(p entql.BytesP) {
	f.Where(p.Field(program.FieldMediaGallery))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ProgramFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(program.FieldTags))
}

// WhereMetrics applies the entql json.RawMessage predicate on the metrics field.
func (f *ProgramFilter) WhereMetrics(p entql.BytesP) {
	f.Where(p.Field(program.FieldMetrics))
}

// WhereCurriculum applies the entql json.RawMessage predicate on the curriculum field.
func (f *ProgramFilter) WhereCurriculum(p entql.BytesP) {
	f.Where(p.Field(program.FieldCurriculum))
}

// WhereEligibilityCriteria applies the entql json.RawMessage predicate on the eligibility_criteria field.
func (f *ProgramFilter) WhereEligibilityCriteria(p entql.BytesP) {
	f.Where(p.Field(program.FieldEligibilityCriteria))
}

// WhereApplicationSteps applies the entql json.RawMessage predicate on the application_steps field.
func (f *ProgramFilter) WhereApplicationSteps(p entql.BytesP) {
	f.Where(p.Field(program.FieldApplicationSteps))
}

// WhereDuration applies the entql string predicate on the duration field.
func (f *ProgramFilter) WhereDuration(p entql.StringP) {
	f.Where(p.Field(program.FieldDuration))
}

// WhereCapacity applies the entql int predicate on the capacity field.
func (f *ProgramFilter) WhereCapacity(p entql.IntP) {
	f.Where(p.Field(program.FieldCapacity))
}

// WhereApplicationDeadline applies the entql time.Time predicate on the application_deadline field.
func (f *ProgramFilter) WhereApplicationDeadline(p entql.TimeP) {
	f.Where(p.Field(program.FieldApplicationDeadline))
}

// WhereRequirements applies the entql json.RawMessage predicate on the requirements field.
func (f *ProgramFilter) WhereRequirements(p entql.BytesP) {
	f.Where(p.Field(program.FieldRequirements))
}

// WhereMinAge applies the entql int predicate on the min_age field.
func (f *ProgramFilter) WhereMinAge(p entql.IntP) {
	f.Where(p.Field(program.FieldMinAge))
}

// WhereMaxAge applies the entql int predicate on the max_age field.
func (f *ProgramFilter) WhereMaxAge(p entql.IntP) {
	f.Where(p.Field(program.FieldMaxAge))
}

// WhereRequiredDocs applies the entql json.RawMessage predicate on the required_docs field.
func (f *ProgramFilter) WhereRequiredDocs(p entql.BytesP) {
	f.Where(p.Field(program.FieldRequiredDocs))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *ProgramFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(program.FieldCost))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *ProgramFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(program.FieldCurrency))
}

// WhereRules applies the entql json.RawMessage predicate on the rules field.
func (f *ProgramFilter) WhereRules(p entql.BytesP) {
	f.Where(p.Field(program.FieldRules))
}

// WhereSteps applies the entql json.RawMessage predicate on the steps field.
func (f *ProgramFilter) WhereSteps(p entql.BytesP) {
	f.Where(p.Field(program.FieldSteps))
}

// WhereRequiredSkills applies the entql json.RawMessage predicate on the required_skills field.
func (f *ProgramFilter) WhereRequiredSkills(p entql.BytesP) {
	f.Where(p.Field(program.FieldRequiredSkills))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(program.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(program.FieldUpdatedAt))
}

// WhereHasCategory applies a predicate to check if query has an edge category.
func (f *ProgramFilter) WhereHasCategory() {
	f.Where(entql.HasEdge("category"))
}

// WhereHasCategoryWith applies a predicate to check if query has an edge category with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasCategoryWith(preds ...predicate.ProgramCategory) {
	f.Where(entql.HasEdgeWith("category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnrolments applies a predicate to check if query has an edge enrolments.
func (f *ProgramFilter) WhereHasEnrolments() {
	f.Where(entql.HasEdge("enrolments"))
}

// WhereHasEnrolmentsWith applies a predicate to check if query has an edge enrolments with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasEnrolmentsWith(preds ...predicate.ProgramEnrolment) {
	f.Where(entql.HasEdgeWith("enrolments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParticipants applies a predicate to check if query has an edge participants.
func (f *ProgramFilter) WhereHasParticipants() {
	f.Where(entql.HasEdge("participants"))
}

// WhereHasParticipantsWith applies a predicate to check if query has an edge participants with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasParticipantsWith(preds ...predicate.ProgramParticipant) {
	f.Where(entql.HasEdgeWith("participants", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *ProgramFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdatedBy applies a predicate to check if query has an edge updated_by.
func (f *ProgramFilter) WhereHasUpdatedBy() {
	f.Where(entql.HasEdge("updated_by"))
}

// WhereHasUpdatedByWith applies a predicate to check if query has an edge updated_by with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasUpdatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("updated_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramCardItems applies a predicate to check if query has an edge program_card_items.
func (f *ProgramFilter) WhereHasProgramCardItems() {
	f.Where(entql.HasEdge("program_card_items"))
}

// WhereHasProgramCardItemsWith applies a predicate to check if query has an edge program_card_items with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasProgramCardItemsWith(preds ...predicate.ProgramCardItem) {
	f.Where(entql.HasEdgeWith("program_card_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *ProgramFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuccessStories applies a predicate to check if query has an edge success_stories.
func (f *ProgramFilter) WhereHasSuccessStories() {
	f.Where(entql.HasEdge("success_stories"))
}

// WhereHasSuccessStoriesWith applies a predicate to check if query has an edge success_stories with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasSuccessStoriesWith(preds ...predicate.SuccessStory) {
	f.Where(entql.HasEdgeWith("success_stories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVolunteerOpportunities applies a predicate to check if query has an edge volunteer_opportunities.
func (f *ProgramFilter) WhereHasVolunteerOpportunities() {
	f.Where(entql.HasEdge("volunteer_opportunities"))
}

// WhereHasVolunteerOpportunitiesWith applies a predicate to check if query has an edge volunteer_opportunities with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasVolunteerOpportunitiesWith(preds ...predicate.VolunteerOpportunity) {
	f.Where(entql.HasEdgeWith("volunteer_opportunities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFundraisingCampaigns applies a predicate to check if query has an edge fundraising_campaigns.
func (f *ProgramFilter) WhereHasFundraisingCampaigns() {
	f.Where(entql.HasEdge("fundraising_campaigns"))
}

// WhereHasFundraisingCampaignsWith applies a predicate to check if query has an edge fundraising_campaigns with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasFundraisingCampaignsWith(preds ...predicate.FundraisingCampaign) {
	f.Where(entql.HasEdgeWith("fundraising_campaigns", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDonations applies a predicate to check if query has an edge donations.
func (f *ProgramFilter) WhereHasDonations() {
	f.Where(entql.HasEdge("donations"))
}

// WhereHasDonationsWith applies a predicate to check if query has an edge donations with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasDonationsWith(preds ...predicate.Donation) {
	f.Where(entql.HasEdgeWith("donations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGrants applies a predicate to check if query has an edge grants.
func (f *ProgramFilter) WhereHasGrants() {
	f.Where(entql.HasEdge("grants"))
}

// WhereHasGrantsWith applies a predicate to check if query has an edge grants with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasGrantsWith(preds ...predicate.Grant) {
	f.Where(entql.HasEdgeWith("grants", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSiteVisits applies a predicate to check if query has an edge site_visits.
func (f *ProgramFilter) WhereHasSiteVisits() {
	f.Where(entql.HasEdge("site_visits"))
}

// WhereHasSiteVisitsWith applies a predicate to check if query has an edge site_visits with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasSiteVisitsWith(preds ...predicate.SiteVisit) {
	f.Where(entql.HasEdgeWith("site_visits", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasImpactMetrics applies a predicate to check if query has an edge impact_metrics.
func (f *ProgramFilter) WhereHasImpactMetrics() {
	f.Where(entql.HasEdge("impact_metrics"))
}

// WhereHasImpactMetricsWith applies a predicate to check if query has an edge impact_metrics with a given conditions (other predicates).
func (f *ProgramFilter) WhereHasImpactMetricsWith(preds ...predicate.ImpactMetric) {
	f.Where(entql.HasEdgeWith("impact_metrics", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramCardItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramCardItemQuery builder.
func (_q *ProgramCardItemQuery) Filter() *ProgramCardItemFilter {
	return &ProgramCardItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramCardItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramCardItemMutation builder.
func (m *ProgramCardItemMutation) Filter() *ProgramCardItemFilter {
	return &ProgramCardItemFilter{config: m.config, predicateAdder: m}
}

// ProgramCardItemFilter provides a generic filtering capability at runtime for ProgramCardItemQuery.
type ProgramCardItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramCardItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[69].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ProgramCardItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(programcarditem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *ProgramCardItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(programcarditem.FieldOrder))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *ProgramCardItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *ProgramCardItemFilter) WhereHasBlockWith(preds ...predicate.BlockProgramCards) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *ProgramCardItemFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *ProgramCardItemFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramCategoryQuery builder.
func (_q *ProgramCategoryQuery) Filter() *ProgramCategoryFilter {
	return &ProgramCategoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramCategoryMutation builder.
func (m *ProgramCategoryMutation) Filter() *ProgramCategoryFilter {
	return &ProgramCategoryFilter{config: m.config, predicateAdder: m}
}

// ProgramCategoryFilter provides a generic filtering capability at runtime for ProgramCategoryQuery.
type ProgramCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[70].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ProgramCategoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(programcategory.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *ProgramCategoryFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(programcategory.FieldSlug))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *ProgramCategoryFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(programcategory.FieldName))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *ProgramCategoryFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(programcategory.FieldDescription))
}

// WhereIconName applies the entql string predicate on the icon_name field.
func (f *ProgramCategoryFilter) WhereIconName(p entql.StringP) {
	f.Where(p.Field(programcategory.FieldIconName))
}

// WhereDisplayOrder applies the entql int predicate on the display_order field.
func (f *ProgramCategoryFilter) WhereDisplayOrder(p entql.IntP) {
	f.Where(p.Field(programcategory.FieldDisplayOrder))
}

// WhereColor applies the entql string predicate on the color field.
func (f *ProgramCategoryFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(programcategory.FieldColor))
}

// WhereHeroImageURL applies the entql string predicate on the hero_image_url field.
func (f *ProgramCategoryFilter) WhereHeroImageURL(p entql.StringP) {
	f.Where(p.Field(programcategory.FieldHeroImageURL))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramCategoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programcategory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramCategoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programcategory.FieldUpdatedAt))
}

// WhereHasPrograms applies a predicate to check if query has an edge programs.
func (f *ProgramCategoryFilter) WhereHasPrograms() {
	f.Where(entql.HasEdge("programs"))
}

// WhereHasProgramsWith applies a predicate to check if query has an edge programs with a given conditions (other predicates).
func (f *ProgramCategoryFilter) WhereHasProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramEnrolmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramEnrolmentQuery builder.
func (_q *ProgramEnrolmentQuery) Filter() *ProgramEnrolmentFilter {
	return &ProgramEnrolmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramEnrolmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramEnrolmentMutation builder.
func (m *ProgramEnrolmentMutation) Filter() *ProgramEnrolmentFilter {
	return &ProgramEnrolmentFilter{config: m.config, predicateAdder: m}
}

// ProgramEnrolmentFilter provides a generic filtering capability at runtime for ProgramEnrolmentQuery.
type ProgramEnrolmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramEnrolmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[71].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ProgramEnrolmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(programenrolment.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProgramEnrolmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(programenrolment.FieldStatus))
}

// WhereAnswers applies the entql json.RawMessage predicate on the answers field.
func (f *ProgramEnrolmentFilter) WhereAnswers(p entql.BytesP) {
	f.Where(p.Field(programenrolment.FieldAnswers))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramEnrolmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programenrolment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramEnrolmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programenrolment.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *ProgramEnrolmentFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *ProgramEnrolmentFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ProgramEnrolmentFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ProgramEnrolmentFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ProgramParticipantQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProgramParticipantQuery builder.
func (_q *ProgramParticipantQuery) Filter() *ProgramParticipantFilter {
	return &ProgramParticipantFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ProgramParticipantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProgramParticipantMutation builder.
func (m *ProgramParticipantMutation) Filter() *ProgramParticipantFilter {
	return &ProgramParticipantFilter{config: m.config, predicateAdder: m}
}

// ProgramParticipantFilter provides a generic filtering capability at runtime for ProgramParticipantQuery.
type ProgramParticipantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProgramParticipantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[72].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ProgramParticipantFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(programparticipant.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProgramParticipantFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(programparticipant.FieldStatus))
}

// WhereEnrollmentDate applies the entql time.Time predicate on the enrollment_date field.
func (f *ProgramParticipantFilter) WhereEnrollmentDate(p entql.TimeP) {
	f.Where(p.Field(programparticipant.FieldEnrollmentDate))
}

// WhereCompletionDate applies the entql time.Time predicate on the completion_date field.
func (f *ProgramParticipantFilter) WhereCompletionDate(p entql.TimeP) {
	f.Where(p.Field(programparticipant.FieldCompletionDate))
}

// WhereOutcomes applies the entql json.RawMessage predicate on the outcomes field.
func (f *ProgramParticipantFilter) WhereOutcomes(p entql.BytesP) {
	f.Where(p.Field(programparticipant.FieldOutcomes))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *ProgramParticipantFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(programparticipant.FieldNotes))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProgramParticipantFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(programparticipant.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProgramParticipantFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(programparticipant.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *ProgramParticipantFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *ProgramParticipantFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ProgramParticipantFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ProgramParticipantFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ReportDefinitionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReportDefinitionQuery builder.
func (_q *ReportDefinitionQuery) Filter() *ReportDefinitionFilter {
	return &ReportDefinitionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ReportDefinitionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReportDefinitionMutation builder.
func (m *ReportDefinitionMutation) Filter() *ReportDefinitionFilter {
	return &ReportDefinitionFilter{config: m.config, predicateAdder: m}
}

// ReportDefinitionFilter provides a generic filtering capability at runtime for ReportDefinitionQuery.
type ReportDefinitionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReportDefinitionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[73].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ReportDefinitionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(reportdefinition.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ReportDefinitionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(reportdefinition.FieldName))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *ReportDefinitionFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(reportdefinition.FieldSlug))
}

// WhereType applies the entql string predicate on the type field.
func (f *ReportDefinitionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(reportdefinition.FieldType))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ReportDefinitionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(reportdefinition.FieldDescription))
}

// WhereQuery applies the entql json.RawMessage predicate on the query field.
func (f *ReportDefinitionFilter) WhereQuery(p entql.BytesP) {
	f.Where(p.Field(reportdefinition.FieldQuery))
}

// WhereParameters applies the entql json.RawMessage predicate on the parameters field.
func (f *ReportDefinitionFilter) WhereParameters(p entql.BytesP) {
	f.Where(p.Field(reportdefinition.FieldParameters))
}

// WhereIsPublic applies the entql bool predicate on the is_public field.
func (f *ReportDefinitionFilter) WhereIsPublic(p entql.BoolP) {
	f.Where(p.Field(reportdefinition.FieldIsPublic))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReportDefinitionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reportdefinition.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReportDefinitionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reportdefinition.FieldUpdatedAt))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *ReportDefinitionFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *ReportDefinitionFilter) WhereHasCreatorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *ReportDefinitionFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *ReportDefinitionFilter) WhereHasPermissionsWith(preds ...predicate.ReportPermission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGeneratedReports applies a predicate to check if query has an edge generated_reports.
func (f *ReportDefinitionFilter) WhereHasGeneratedReports() {
	f.Where(entql.HasEdge("generated_reports"))
}

// WhereHasGeneratedReportsWith applies a predicate to check if query has an edge generated_reports with a given conditions (other predicates).
func (f *ReportDefinitionFilter) WhereHasGeneratedReportsWith(preds ...predicate.GeneratedReport) {
	f.Where(entql.HasEdgeWith("generated_reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSchedules applies a predicate to check if query has an edge schedules.
func (f *ReportDefinitionFilter) WhereHasSchedules() {
	f.Where(entql.HasEdge("schedules"))
}

// WhereHasSchedulesWith applies a predicate to check if query has an edge schedules with a given conditions (other predicates).
func (f *ReportDefinitionFilter) WhereHasSchedulesWith(preds ...predicate.ScheduledReport) {
	f.Where(entql.HasEdgeWith("schedules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ReportPermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReportPermissionQuery builder.
func (_q *ReportPermissionQuery) Filter() *ReportPermissionFilter {
	return &ReportPermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ReportPermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReportPermissionMutation builder.
func (m *ReportPermissionMutation) Filter() *ReportPermissionFilter {
	return &ReportPermissionFilter{config: m.config, predicateAdder: m}
}

// ReportPermissionFilter provides a generic filtering capability at runtime for ReportPermissionQuery.
type ReportPermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReportPermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[74].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ReportPermissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(reportpermission.FieldID))
}

// WhereRoleID applies the entql string predicate on the role_id field.
func (f *ReportPermissionFilter) WhereRoleID(p entql.StringP) {
	f.Where(p.Field(reportpermission.FieldRoleID))
}

// WhereCanView applies the entql bool predicate on the can_view field.
func (f *ReportPermissionFilter) WhereCanView(p entql.BoolP) {
	f.Where(p.Field(reportpermission.FieldCanView))
}

// WhereCanEdit applies the entql bool predicate on the can_edit field.
func (f *ReportPermissionFilter) WhereCanEdit(p entql.BoolP) {
	f.Where(p.Field(reportpermission.FieldCanEdit))
}

// WhereCanDelete applies the entql bool predicate on the can_delete field.
func (f *ReportPermissionFilter) WhereCanDelete(p entql.BoolP) {
	f.Where(p.Field(reportpermission.FieldCanDelete))
}

// WhereCanSchedule applies the entql bool predicate on the can_schedule field.
func (f *ReportPermissionFilter) WhereCanSchedule(p entql.BoolP) {
	f.Where(p.Field(reportpermission.FieldCanSchedule))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReportPermissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reportpermission.FieldCreatedAt))
}

// WhereHasReportDefinition applies a predicate to check if query has an edge report_definition.
func (f *ReportPermissionFilter) WhereHasReportDefinition() {
	f.Where(entql.HasEdge("report_definition"))
}

// WhereHasReportDefinitionWith applies a predicate to check if query has an edge report_definition with a given conditions (other predicates).
func (f *ReportPermissionFilter) WhereHasReportDefinitionWith(preds ...predicate.ReportDefinition) {
	f.Where(entql.HasEdgeWith("report_definition", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ReportPermissionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ReportPermissionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *RolePermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RolePermissionQuery builder.
func (_q *RolePermissionQuery) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RolePermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RolePermissionMutation builder.
func (m *RolePermissionMutation) Filter() *RolePermissionFilter {
	return &RolePermissionFilter{config: m.config, predicateAdder: m}
}

// RolePermissionFilter provides a generic filtering capability at runtime for RolePermissionQuery.
type RolePermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RolePermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[75].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RolePermissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(rolepermission.FieldID))
}

// WhereRole applies the entql string predicate on the role field.
func (f *RolePermissionFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(rolepermission.FieldRole))
}

// WhereHasPermission applies a predicate to check if query has an edge permission.
func (f *RolePermissionFilter) WhereHasPermission() {
	f.Where(entql.HasEdge("permission"))
}

// WhereHasPermissionWith applies a predicate to check if query has an edge permission with a given conditions (other predicates).
func (f *RolePermissionFilter) WhereHasPermissionWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ScheduledReportQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScheduledReportQuery builder.
func (_q *ScheduledReportQuery) Filter() *ScheduledReportFilter {
	return &ScheduledReportFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ScheduledReportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScheduledReportMutation builder.
func (m *ScheduledReportMutation) Filter() *ScheduledReportFilter {
	return &ScheduledReportFilter{config: m.config, predicateAdder: m}
}

// ScheduledReportFilter provides a generic filtering capability at runtime for ScheduledReportQuery.
type ScheduledReportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScheduledReportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[76].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ScheduledReportFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(scheduledreport.FieldID))
}

// WhereFrequency applies the entql string predicate on the frequency field.
func (f *ScheduledReportFilter) WhereFrequency(p entql.StringP) {
	f.Where(p.Field(scheduledreport.FieldFrequency))
}

// WhereDayOfWeek applies the entql int predicate on the day_of_week field.
func (f *ScheduledReportFilter) WhereDayOfWeek(p entql.IntP) {
	f.Where(p.Field(scheduledreport.FieldDayOfWeek))
}

// WhereDayOfMonth applies the entql int predicate on the day_of_month field.
func (f *ScheduledReportFilter) WhereDayOfMonth(p entql.IntP) {
	f.Where(p.Field(scheduledreport.FieldDayOfMonth))
}

// WhereTime applies the entql string predicate on the time field.
func (f *ScheduledReportFilter) WhereTime(p entql.StringP) {
	f.Where(p.Field(scheduledreport.FieldTime))
}

// WhereTimezone applies the entql string predicate on the timezone field.
func (f *ScheduledReportFilter) WhereTimezone(p entql.StringP) {
	f.Where(p.Field(scheduledreport.FieldTimezone))
}

// WhereRecipients applies the entql json.RawMessage predicate on the recipients field.
func (f *ScheduledReportFilter) WhereRecipients(p entql.BytesP) {
	f.Where(p.Field(scheduledreport.FieldRecipients))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *ScheduledReportFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(scheduledreport.FieldFormat))
}

// WhereParameters applies the entql json.RawMessage predicate on the parameters field.
func (f *ScheduledReportFilter) WhereParameters(p entql.BytesP) {
	f.Where(p.Field(scheduledreport.FieldParameters))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *ScheduledReportFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(scheduledreport.FieldIsActive))
}

// WhereLastRunAt applies the entql time.Time predicate on the last_run_at field.
func (f *ScheduledReportFilter) WhereLastRunAt(p entql.TimeP) {
	f.Where(p.Field(scheduledreport.FieldLastRunAt))
}

// WhereNextRunAt applies the entql time.Time predicate on the next_run_at field.
func (f *ScheduledReportFilter) WhereNextRunAt(p entql.TimeP) {
	f.Where(p.Field(scheduledreport.FieldNextRunAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScheduledReportFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledreport.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScheduledReportFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scheduledreport.FieldUpdatedAt))
}

// WhereHasReportDefinition applies a predicate to check if query has an edge report_definition.
func (f *ScheduledReportFilter) WhereHasReportDefinition() {
	f.Where(entql.HasEdge("report_definition"))
}

// WhereHasReportDefinitionWith applies a predicate to check if query has an edge report_definition with a given conditions (other predicates).
func (f *ScheduledReportFilter) WhereHasReportDefinitionWith(preds ...predicate.ReportDefinition) {
	f.Where(entql.HasEdgeWith("report_definition", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreator applies a predicate to check if query has an edge creator.
func (f *ScheduledReportFilter) WhereHasCreator() {
	f.Where(entql.HasEdge("creator"))
}

// WhereHasCreatorWith applies a predicate to check if query has an edge creator with a given conditions (other predicates).
func (f *ScheduledReportFilter) WhereHasCreatorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("creator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SeoConfigQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SeoConfigQuery builder.
func (_q *SeoConfigQuery) Filter() *SeoConfigFilter {
	return &SeoConfigFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SeoConfigMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SeoConfigMutation builder.
func (m *SeoConfigMutation) Filter() *SeoConfigFilter {
	return &SeoConfigFilter{config: m.config, predicateAdder: m}
}

// SeoConfigFilter provides a generic filtering capability at runtime for SeoConfigQuery.
type SeoConfigFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SeoConfigFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[77].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SeoConfigFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(seoconfig.FieldID))
}

// WhereMetaTitle applies the entql json.RawMessage predicate on the meta_title field.
func (f *SeoConfigFilter) WhereMetaTitle(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldMetaTitle))
}

// WhereMetaDescription applies the entql json.RawMessage predicate on the meta_description field.
func (f *SeoConfigFilter) WhereMetaDescription(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldMetaDescription))
}

// WhereKeywords applies the entql json.RawMessage predicate on the keywords field.
func (f *SeoConfigFilter) WhereKeywords(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldKeywords))
}

// WhereOgTitle applies the entql json.RawMessage predicate on the og_title field.
func (f *SeoConfigFilter) WhereOgTitle(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldOgTitle))
}

// WhereOgDescription applies the entql json.RawMessage predicate on the og_description field.
func (f *SeoConfigFilter) WhereOgDescription(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldOgDescription))
}

// WhereOgImageURL applies the entql string predicate on the og_image_url field.
func (f *SeoConfigFilter) WhereOgImageURL(p entql.StringP) {
	f.Where(p.Field(seoconfig.FieldOgImageURL))
}

// WhereOgType applies the entql string predicate on the og_type field.
func (f *SeoConfigFilter) WhereOgType(p entql.StringP) {
	f.Where(p.Field(seoconfig.FieldOgType))
}

// WhereTwitterCard applies the entql string predicate on the twitter_card field.
func (f *SeoConfigFilter) WhereTwitterCard(p entql.StringP) {
	f.Where(p.Field(seoconfig.FieldTwitterCard))
}

// WhereTwitterTitle applies the entql json.RawMessage predicate on the twitter_title field.
func (f *SeoConfigFilter) WhereTwitterTitle(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldTwitterTitle))
}

// WhereTwitterDescription applies the entql json.RawMessage predicate on the twitter_description field.
func (f *SeoConfigFilter) WhereTwitterDescription(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldTwitterDescription))
}

// WhereTwitterImageURL applies the entql string predicate on the twitter_image_url field.
func (f *SeoConfigFilter) WhereTwitterImageURL(p entql.StringP) {
	f.Where(p.Field(seoconfig.FieldTwitterImageURL))
}

// WhereCanonicalURL applies the entql string predicate on the canonical_url field.
func (f *SeoConfigFilter) WhereCanonicalURL(p entql.StringP) {
	f.Where(p.Field(seoconfig.FieldCanonicalURL))
}

// WhereNoindex applies the entql bool predicate on the noindex field.
func (f *SeoConfigFilter) WhereNoindex(p entql.BoolP) {
	f.Where(p.Field(seoconfig.FieldNoindex))
}

// WhereNofollow applies the entql bool predicate on the nofollow field.
func (f *SeoConfigFilter) WhereNofollow(p entql.BoolP) {
	f.Where(p.Field(seoconfig.FieldNofollow))
}

// WhereStructuredData applies the entql json.RawMessage predicate on the structured_data field.
func (f *SeoConfigFilter) WhereStructuredData(p entql.BytesP) {
	f.Where(p.Field(seoconfig.FieldStructuredData))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SeoConfigFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(seoconfig.FieldUpdatedAt))
}

// WhereHasPage applies a predicate to check if query has an edge page.
func (f *SeoConfigFilter) WhereHasPage() {
	f.Where(entql.HasEdge("page"))
}

// WhereHasPageWith applies a predicate to check if query has an edge page with a given conditions (other predicates).
func (f *SeoConfigFilter) WhereHasPageWith(preds ...predicate.Page) {
	f.Where(entql.HasEdgeWith("page", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SiteVisitQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SiteVisitQuery builder.
func (_q *SiteVisitQuery) Filter() *SiteVisitFilter {
	return &SiteVisitFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SiteVisitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SiteVisitMutation builder.
func (m *SiteVisitMutation) Filter() *SiteVisitFilter {
	return &SiteVisitFilter{config: m.config, predicateAdder: m}
}

// SiteVisitFilter provides a generic filtering capability at runtime for SiteVisitQuery.
type SiteVisitFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SiteVisitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[78].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SiteVisitFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sitevisit.FieldID))
}

// WhereRequestedDate applies the entql time.Time predicate on the requested_date field.
func (f *SiteVisitFilter) WhereRequestedDate(p entql.TimeP) {
	f.Where(p.Field(sitevisit.FieldRequestedDate))
}

// WhereScheduledDate applies the entql time.Time predicate on the scheduled_date field.
func (f *SiteVisitFilter) WhereScheduledDate(p entql.TimeP) {
	f.Where(p.Field(sitevisit.FieldScheduledDate))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *SiteVisitFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(sitevisit.FieldStatus))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *SiteVisitFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(sitevisit.FieldNotes))
}

// WhereHasDonor applies a predicate to check if query has an edge donor.
func (f *SiteVisitFilter) WhereHasDonor() {
	f.Where(entql.HasEdge("donor"))
}

// WhereHasDonorWith applies a predicate to check if query has an edge donor with a given conditions (other predicates).
func (f *SiteVisitFilter) WhereHasDonorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("donor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *SiteVisitFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *SiteVisitFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SkillQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SkillQuery builder.
func (_q *SkillQuery) Filter() *SkillFilter {
	return &SkillFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SkillMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SkillMutation builder.
func (m *SkillMutation) Filter() *SkillFilter {
	return &SkillFilter{config: m.config, predicateAdder: m}
}

// SkillFilter provides a generic filtering capability at runtime for SkillQuery.
type SkillFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SkillFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[79].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SkillFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(skill.FieldID))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SkillFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(skill.FieldKey))
}

// WhereName applies the entql json.RawMessage predicate on the name field.
func (f *SkillFilter) WhereName(p entql.BytesP) {
	f.Where(p.Field(skill.FieldName))
}

// WhereCategory applies the entql string predicate on the category field.
func (f *SkillFilter) WhereCategory(p entql.StringP) {
	f.Where(p.Field(skill.FieldCategory))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *SkillFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *SkillFilter) WhereHasUsersWith(preds ...predicate.UserSkill) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *StatItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StatItemQuery builder.
func (_q *StatItemQuery) Filter() *StatItemFilter {
	return &StatItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *StatItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StatItemMutation builder.
func (m *StatItemMutation) Filter() *StatItemFilter {
	return &StatItemFilter{config: m.config, predicateAdder: m}
}

// StatItemFilter provides a generic filtering capability at runtime for StatItemQuery.
type StatItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StatItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[80].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *StatItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(statitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *StatItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(statitem.FieldOrder))
}

// WhereValue applies the entql string predicate on the value field.
func (f *StatItemFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(statitem.FieldValue))
}

// WhereLabel applies the entql json.RawMessage predicate on the label field.
func (f *StatItemFilter) WhereLabel(p entql.BytesP) {
	f.Where(p.Field(statitem.FieldLabel))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *StatItemFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(statitem.FieldDescription))
}

// WhereIconName applies the entql string predicate on the icon_name field.
func (f *StatItemFilter) WhereIconName(p entql.StringP) {
	f.Where(p.Field(statitem.FieldIconName))
}

// WhereColor applies the entql string predicate on the color field.
func (f *StatItemFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(statitem.FieldColor))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *StatItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *StatItemFilter) WhereHasBlockWith(preds ...predicate.BlockStats) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SuccessStoryQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SuccessStoryQuery builder.
func (_q *SuccessStoryQuery) Filter() *SuccessStoryFilter {
	return &SuccessStoryFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SuccessStoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SuccessStoryMutation builder.
func (m *SuccessStoryMutation) Filter() *SuccessStoryFilter {
	return &SuccessStoryFilter{config: m.config, predicateAdder: m}
}

// SuccessStoryFilter provides a generic filtering capability at runtime for SuccessStoryQuery.
type SuccessStoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SuccessStoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[81].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SuccessStoryFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(successstory.FieldID))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *SuccessStoryFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(successstory.FieldSlug))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *SuccessStoryFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(successstory.FieldTitle))
}

// WhereExcerpt applies the entql json.RawMessage predicate on the excerpt field.
func (f *SuccessStoryFilter) WhereExcerpt(p entql.BytesP) {
	f.Where(p.Field(successstory.FieldExcerpt))
}

// WhereContent applies the entql json.RawMessage predicate on the content field.
func (f *SuccessStoryFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(successstory.FieldContent))
}

// WhereQuote applies the entql string predicate on the quote field.
func (f *SuccessStoryFilter) WhereQuote(p entql.StringP) {
	f.Where(p.Field(successstory.FieldQuote))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *SuccessStoryFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(successstory.FieldStatus))
}

// WherePublishedAt applies the entql time.Time predicate on the published_at field.
func (f *SuccessStoryFilter) WherePublishedAt(p entql.TimeP) {
	f.Where(p.Field(successstory.FieldPublishedAt))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *SuccessStoryFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(successstory.FieldImageURL))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SuccessStoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(successstory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SuccessStoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(successstory.FieldUpdatedAt))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *SuccessStoryFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *SuccessStoryFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *SuccessStoryFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *SuccessStoryFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTestimonials applies a predicate to check if query has an edge testimonials.
func (f *SuccessStoryFilter) WhereHasTestimonials() {
	f.Where(entql.HasEdge("testimonials"))
}

// WhereHasTestimonialsWith applies a predicate to check if query has an edge testimonials with a given conditions (other predicates).
func (f *SuccessStoryFilter) WhereHasTestimonialsWith(preds ...predicate.TestimonialItem) {
	f.Where(entql.HasEdgeWith("testimonials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *SystemErrorQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemErrorQuery builder.
func (_q *SystemErrorQuery) Filter() *SystemErrorFilter {
	return &SystemErrorFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemErrorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemErrorMutation builder.
func (m *SystemErrorMutation) Filter() *SystemErrorFilter {
	return &SystemErrorFilter{config: m.config, predicateAdder: m}
}

// SystemErrorFilter provides a generic filtering capability at runtime for SystemErrorQuery.
type SystemErrorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemErrorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[82].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SystemErrorFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(systemerror.FieldID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *SystemErrorFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(systemerror.FieldTimestamp))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *SystemErrorFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *SystemErrorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldName))
}

// WhereStack applies the entql string predicate on the stack field.
func (f *SystemErrorFilter) WhereStack(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldStack))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *SystemErrorFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(systemerror.FieldMetadata))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *SystemErrorFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldUserID))
}

// WhereContext applies the entql string predicate on the context field.
func (f *SystemErrorFilter) WhereContext(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldContext))
}

// WhereIsResolved applies the entql bool predicate on the is_resolved field.
func (f *SystemErrorFilter) WhereIsResolved(p entql.BoolP) {
	f.Where(p.Field(systemerror.FieldIsResolved))
}

// WhereResolvedAt applies the entql time.Time predicate on the resolved_at field.
func (f *SystemErrorFilter) WhereResolvedAt(p entql.TimeP) {
	f.Where(p.Field(systemerror.FieldResolvedAt))
}

// WhereResolvedBy applies the entql string predicate on the resolved_by field.
func (f *SystemErrorFilter) WhereResolvedBy(p entql.StringP) {
	f.Where(p.Field(systemerror.FieldResolvedBy))
}

// addPredicate implements the predicateAdder interface.
func (_q *SystemLogQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemLogQuery builder.
func (_q *SystemLogQuery) Filter() *SystemLogFilter {
	return &SystemLogFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemLogMutation builder.
func (m *SystemLogMutation) Filter() *SystemLogFilter {
	return &SystemLogFilter{config: m.config, predicateAdder: m}
}

// SystemLogFilter provides a generic filtering capability at runtime for SystemLogQuery.
type SystemLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[83].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SystemLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(systemlog.FieldID))
}

// WhereTimestamp applies the entql time.Time predicate on the timestamp field.
func (f *SystemLogFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(systemlog.FieldTimestamp))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *SystemLogFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(systemlog.FieldLevel))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *SystemLogFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(systemlog.FieldMessage))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *SystemLogFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(systemlog.FieldMetadata))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *SystemLogFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(systemlog.FieldUserID))
}

// WhereContext applies the entql string predicate on the context field.
func (f *SystemLogFilter) WhereContext(p entql.StringP) {
	f.Where(p.Field(systemlog.FieldContext))
}

// addPredicate implements the predicateAdder interface.
func (_q *TabItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TabItemQuery builder.
func (_q *TabItemQuery) Filter() *TabItemFilter {
	return &TabItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TabItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TabItemMutation builder.
func (m *TabItemMutation) Filter() *TabItemFilter {
	return &TabItemFilter{config: m.config, predicateAdder: m}
}

// TabItemFilter provides a generic filtering capability at runtime for TabItemQuery.
type TabItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TabItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[84].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TabItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(tabitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *TabItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(tabitem.FieldOrder))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *TabItemFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(tabitem.FieldTitle))
}

// WhereContent applies the entql json.RawMessage predicate on the content field.
func (f *TabItemFilter) WhereContent(p entql.BytesP) {
	f.Where(p.Field(tabitem.FieldContent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TabItemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tabitem.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TabItemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tabitem.FieldUpdatedAt))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *TabItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *TabItemFilter) WhereHasBlockWith(preds ...predicate.BlockTabs) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TeamMemberQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TeamMemberQuery builder.
func (_q *TeamMemberQuery) Filter() *TeamMemberFilter {
	return &TeamMemberFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TeamMemberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TeamMemberMutation builder.
func (m *TeamMemberMutation) Filter() *TeamMemberFilter {
	return &TeamMemberFilter{config: m.config, predicateAdder: m}
}

// TeamMemberFilter provides a generic filtering capability at runtime for TeamMemberQuery.
type TeamMemberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TeamMemberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[85].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TeamMemberFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(teammember.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TeamMemberFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(teammember.FieldName))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *TeamMemberFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(teammember.FieldTitle))
}

// WhereBio applies the entql json.RawMessage predicate on the bio field.
func (f *TeamMemberFilter) WhereBio(p entql.BytesP) {
	f.Where(p.Field(teammember.FieldBio))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *TeamMemberFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(teammember.FieldImageURL))
}

// WhereLinkedinURL applies the entql string predicate on the linkedin_url field.
func (f *TeamMemberFilter) WhereLinkedinURL(p entql.StringP) {
	f.Where(p.Field(teammember.FieldLinkedinURL))
}

// WhereTwitterURL applies the entql string predicate on the twitter_url field.
func (f *TeamMemberFilter) WhereTwitterURL(p entql.StringP) {
	f.Where(p.Field(teammember.FieldTwitterURL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *TeamMemberFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(teammember.FieldEmail))
}

// WhereType applies the entql string predicate on the type field.
func (f *TeamMemberFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(teammember.FieldType))
}

// WhereDisplayOrder applies the entql int predicate on the display_order field.
func (f *TeamMemberFilter) WhereDisplayOrder(p entql.IntP) {
	f.Where(p.Field(teammember.FieldDisplayOrder))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *TeamMemberFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(teammember.FieldIsActive))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TeamMemberFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(teammember.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TeamMemberFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(teammember.FieldUpdatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *TeamMemberFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *TeamMemberFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TeamMemberItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TeamMemberItemQuery builder.
func (_q *TeamMemberItemQuery) Filter() *TeamMemberItemFilter {
	return &TeamMemberItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TeamMemberItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TeamMemberItemMutation builder.
func (m *TeamMemberItemMutation) Filter() *TeamMemberItemFilter {
	return &TeamMemberItemFilter{config: m.config, predicateAdder: m}
}

// TeamMemberItemFilter provides a generic filtering capability at runtime for TeamMemberItemQuery.
type TeamMemberItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TeamMemberItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[86].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TeamMemberItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(teammemberitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *TeamMemberItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(teammemberitem.FieldOrder))
}

// WhereName applies the entql string predicate on the name field.
func (f *TeamMemberItemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(teammemberitem.FieldName))
}

// WhereRole applies the entql json.RawMessage predicate on the role field.
func (f *TeamMemberItemFilter) WhereRole(p entql.BytesP) {
	f.Where(p.Field(teammemberitem.FieldRole))
}

// WhereBio applies the entql json.RawMessage predicate on the bio field.
func (f *TeamMemberItemFilter) WhereBio(p entql.BytesP) {
	f.Where(p.Field(teammemberitem.FieldBio))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *TeamMemberItemFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(teammemberitem.FieldImageURL))
}

// WhereLinkedinURL applies the entql string predicate on the linkedin_url field.
func (f *TeamMemberItemFilter) WhereLinkedinURL(p entql.StringP) {
	f.Where(p.Field(teammemberitem.FieldLinkedinURL))
}

// WhereTwitterURL applies the entql string predicate on the twitter_url field.
func (f *TeamMemberItemFilter) WhereTwitterURL(p entql.StringP) {
	f.Where(p.Field(teammemberitem.FieldTwitterURL))
}

// WhereEmailURL applies the entql string predicate on the email_url field.
func (f *TeamMemberItemFilter) WhereEmailURL(p entql.StringP) {
	f.Where(p.Field(teammemberitem.FieldEmailURL))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *TeamMemberItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *TeamMemberItemFilter) WhereHasBlockWith(preds ...predicate.BlockTeamGrid) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TestimonialItemQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TestimonialItemQuery builder.
func (_q *TestimonialItemQuery) Filter() *TestimonialItemFilter {
	return &TestimonialItemFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TestimonialItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TestimonialItemMutation builder.
func (m *TestimonialItemMutation) Filter() *TestimonialItemFilter {
	return &TestimonialItemFilter{config: m.config, predicateAdder: m}
}

// TestimonialItemFilter provides a generic filtering capability at runtime for TestimonialItemQuery.
type TestimonialItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TestimonialItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[87].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TestimonialItemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(testimonialitem.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *TestimonialItemFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(testimonialitem.FieldOrder))
}

// WhereQuote applies the entql json.RawMessage predicate on the quote field.
func (f *TestimonialItemFilter) WhereQuote(p entql.BytesP) {
	f.Where(p.Field(testimonialitem.FieldQuote))
}

// WhereAuthorName applies the entql string predicate on the author_name field.
func (f *TestimonialItemFilter) WhereAuthorName(p entql.StringP) {
	f.Where(p.Field(testimonialitem.FieldAuthorName))
}

// WhereAuthorRole applies the entql json.RawMessage predicate on the author_role field.
func (f *TestimonialItemFilter) WhereAuthorRole(p entql.BytesP) {
	f.Where(p.Field(testimonialitem.FieldAuthorRole))
}

// WhereAuthorImageURL applies the entql string predicate on the author_image_url field.
func (f *TestimonialItemFilter) WhereAuthorImageURL(p entql.StringP) {
	f.Where(p.Field(testimonialitem.FieldAuthorImageURL))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *TestimonialItemFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *TestimonialItemFilter) WhereHasBlockWith(preds ...predicate.BlockTestimonials) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuccessStory applies a predicate to check if query has an edge success_story.
func (f *TestimonialItemFilter) WhereHasSuccessStory() {
	f.Where(entql.HasEdge("success_story"))
}

// WhereHasSuccessStoryWith applies a predicate to check if query has an edge success_story with a given conditions (other predicates).
func (f *TestimonialItemFilter) WhereHasSuccessStoryWith(preds ...predicate.SuccessStory) {
	f.Where(entql.HasEdgeWith("success_story", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TimelineEventQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TimelineEventQuery builder.
func (_q *TimelineEventQuery) Filter() *TimelineEventFilter {
	return &TimelineEventFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TimelineEventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TimelineEventMutation builder.
func (m *TimelineEventMutation) Filter() *TimelineEventFilter {
	return &TimelineEventFilter{config: m.config, predicateAdder: m}
}

// TimelineEventFilter provides a generic filtering capability at runtime for TimelineEventQuery.
type TimelineEventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TimelineEventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[88].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TimelineEventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(timelineevent.FieldID))
}

// WhereOrder applies the entql int predicate on the order field.
func (f *TimelineEventFilter) WhereOrder(p entql.IntP) {
	f.Where(p.Field(timelineevent.FieldOrder))
}

// WhereDate applies the entql string predicate on the date field.
func (f *TimelineEventFilter) WhereDate(p entql.StringP) {
	f.Where(p.Field(timelineevent.FieldDate))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *TimelineEventFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(timelineevent.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *TimelineEventFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(timelineevent.FieldDescription))
}

// WhereImageURL applies the entql string predicate on the image_url field.
func (f *TimelineEventFilter) WhereImageURL(p entql.StringP) {
	f.Where(p.Field(timelineevent.FieldImageURL))
}

// WhereHasBlock applies a predicate to check if query has an edge block.
func (f *TimelineEventFilter) WhereHasBlock() {
	f.Where(entql.HasEdge("block"))
}

// WhereHasBlockWith applies a predicate to check if query has an edge block with a given conditions (other predicates).
func (f *TimelineEventFilter) WhereHasBlockWith(preds ...predicate.BlockTimeline) {
	f.Where(entql.HasEdgeWith("block", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TokenQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenQuery builder.
func (_q *TokenQuery) Filter() *TokenFilter {
	return &TokenFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenMutation builder.
func (m *TokenMutation) Filter() *TokenFilter {
	return &TokenFilter{config: m.config, predicateAdder: m}
}

// TokenFilter provides a generic filtering capability at runtime for TokenQuery.
type TokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[89].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TokenFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(token.FieldID))
}

// WhereType applies the entql string predicate on the type field.
func (f *TokenFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(token.FieldType))
}

// WhereTokenHash applies the entql string predicate on the token_hash field.
func (f *TokenFilter) WhereTokenHash(p entql.StringP) {
	f.Where(p.Field(token.FieldTokenHash))
}

// WhereJti applies the entql string predicate on the jti field.
func (f *TokenFilter) WhereJti(p entql.StringP) {
	f.Where(p.Field(token.FieldJti))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *TokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldExpiresAt))
}

// WhereUsed applies the entql bool predicate on the used field.
func (f *TokenFilter) WhereUsed(p entql.BoolP) {
	f.Where(p.Field(token.FieldUsed))
}

// WhereMfaVerified applies the entql bool predicate on the mfa_verified field.
func (f *TokenFilter) WhereMfaVerified(p entql.BoolP) {
	f.Where(p.Field(token.FieldMfaVerified))
}

// WhereMfaMethod applies the entql string predicate on the mfa_method field.
func (f *TokenFilter) WhereMfaMethod(p entql.StringP) {
	f.Where(p.Field(token.FieldMfaMethod))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(token.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *TokenFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *TokenFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TrustedDeviceQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TrustedDeviceQuery builder.
func (_q *TrustedDeviceQuery) Filter() *TrustedDeviceFilter {
	return &TrustedDeviceFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TrustedDeviceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TrustedDeviceMutation builder.
func (m *TrustedDeviceMutation) Filter() *TrustedDeviceFilter {
	return &TrustedDeviceFilter{config: m.config, predicateAdder: m}
}

// TrustedDeviceFilter provides a generic filtering capability at runtime for TrustedDeviceQuery.
type TrustedDeviceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TrustedDeviceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[90].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TrustedDeviceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(trusteddevice.FieldID))
}

// WhereFingerprint applies the entql string predicate on the fingerprint field.
func (f *TrustedDeviceFilter) WhereFingerprint(p entql.StringP) {
	f.Where(p.Field(trusteddevice.FieldFingerprint))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *TrustedDeviceFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(trusteddevice.FieldUserAgent))
}

// WhereLastIP applies the entql string predicate on the last_ip field.
func (f *TrustedDeviceFilter) WhereLastIP(p entql.StringP) {
	f.Where(p.Field(trusteddevice.FieldLastIP))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *TrustedDeviceFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(trusteddevice.FieldLastUsedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TrustedDeviceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(trusteddevice.FieldCreatedAt))
}

// WhereVerifiedAt applies the entql time.Time predicate on the verified_at field.
func (f *TrustedDeviceFilter) WhereVerifiedAt(p entql.TimeP) {
	f.Where(p.Field(trusteddevice.FieldVerifiedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *TrustedDeviceFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *TrustedDeviceFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[91].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereHashedPassword applies the entql string predicate on the hashed_password field.
func (f *UserFilter) WhereHashedPassword(p entql.StringP) {
	f.Where(p.Field(user.FieldHashedPassword))
}

// WhereIsVerified applies the entql bool predicate on the is_verified field.
func (f *UserFilter) WhereIsVerified(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsVerified))
}

// WhereEmailVerified applies the entql time.Time predicate on the email_verified field.
func (f *UserFilter) WhereEmailVerified(p entql.TimeP) {
	f.Where(p.Field(user.FieldEmailVerified))
}

// WhereLastLoginAt applies the entql time.Time predicate on the last_login_at field.
func (f *UserFilter) WhereLastLoginAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLoginAt))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *UserFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsActive))
}

// WhereDeactivatedAt applies the entql time.Time predicate on the deactivated_at field.
func (f *UserFilter) WhereDeactivatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeactivatedAt))
}

// WhereLockedUntil applies the entql time.Time predicate on the locked_until field.
func (f *UserFilter) WhereLockedUntil(p entql.TimeP) {
	f.Where(p.Field(user.FieldLockedUntil))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereImpersonatingUserID applies the entql string predicate on the impersonating_user_id field.
func (f *UserFilter) WhereImpersonatingUserID(p entql.StringP) {
	f.Where(p.Field(user.FieldImpersonatingUserID))
}

// WhereSecurityTimestamp applies the entql time.Time predicate on the security_timestamp field.
func (f *UserFilter) WhereSecurityTimestamp(p entql.TimeP) {
	f.Where(p.Field(user.FieldSecurityTimestamp))
}

// WherePasswordResetRequired applies the entql bool predicate on the password_reset_required field.
func (f *UserFilter) WherePasswordResetRequired(p entql.BoolP) {
	f.Where(p.Field(user.FieldPasswordResetRequired))
}

// WhereRoles applies the entql json.RawMessage predicate on the roles field.
func (f *UserFilter) WhereRoles(p entql.BytesP) {
	f.Where(p.Field(user.FieldRoles))
}

// WhereMfaSecret applies the entql string predicate on the mfa_secret field.
func (f *UserFilter) WhereMfaSecret(p entql.StringP) {
	f.Where(p.Field(user.FieldMfaSecret))
}

// WhereMfaEnabled applies the entql bool predicate on the mfa_enabled field.
func (f *UserFilter) WhereMfaEnabled(p entql.BoolP) {
	f.Where(p.Field(user.FieldMfaEnabled))
}

// WhereOnboardingStartedAt applies the entql time.Time predicate on the onboarding_started_at field.
func (f *UserFilter) WhereOnboardingStartedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldOnboardingStartedAt))
}

// WhereOnboardingCompletedAt applies the entql time.Time predicate on the onboarding_completed_at field.
func (f *UserFilter) WhereOnboardingCompletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldOnboardingCompletedAt))
}

// WhereOnboardingSkipped applies the entql bool predicate on the onboarding_skipped field.
func (f *UserFilter) WhereOnboardingSkipped(p entql.BoolP) {
	f.Where(p.Field(user.FieldOnboardingSkipped))
}

// WhereOnboardingVersion applies the entql string predicate on the onboarding_version field.
func (f *UserFilter) WhereOnboardingVersion(p entql.StringP) {
	f.Where(p.Field(user.FieldOnboardingVersion))
}

// WhereOnboardingCompleted applies the entql bool predicate on the onboarding_completed field.
func (f *UserFilter) WhereOnboardingCompleted(p entql.BoolP) {
	f.Where(p.Field(user.FieldOnboardingCompleted))
}

// WherePosition applies the entql string predicate on the position field.
func (f *UserFilter) WherePosition(p entql.StringP) {
	f.Where(p.Field(user.FieldPosition))
}

// WhereAnalyticsProperties applies the entql json.RawMessage predicate on the analytics_properties field.
func (f *UserFilter) WhereAnalyticsProperties(p entql.BytesP) {
	f.Where(p.Field(user.FieldAnalyticsProperties))
}

// WhereHasProfile applies a predicate to check if query has an edge profile.
func (f *UserFilter) WhereHasProfile() {
	f.Where(entql.HasEdge("profile"))
}

// WhereHasProfileWith applies a predicate to check if query has an edge profile with a given conditions (other predicates).
func (f *UserFilter) WhereHasProfileWith(preds ...predicate.UserProfile) {
	f.Where(entql.HasEdgeWith("profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSessions applies a predicate to check if query has an edge sessions.
func (f *UserFilter) WhereHasSessions() {
	f.Where(entql.HasEdge("sessions"))
}

// WhereHasSessionsWith applies a predicate to check if query has an edge sessions with a given conditions (other predicates).
func (f *UserFilter) WhereHasSessionsWith(preds ...predicate.UserSession) {
	f.Where(entql.HasEdgeWith("sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTokens applies a predicate to check if query has an edge tokens.
func (f *UserFilter) WhereHasTokens() {
	f.Where(entql.HasEdge("tokens"))
}

// WhereHasTokensWith applies a predicate to check if query has an edge tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasTokensWith(preds ...predicate.Token) {
	f.Where(entql.HasEdgeWith("tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTrustedDevices applies a predicate to check if query has an edge trusted_devices.
func (f *UserFilter) WhereHasTrustedDevices() {
	f.Where(entql.HasEdge("trusted_devices"))
}

// WhereHasTrustedDevicesWith applies a predicate to check if query has an edge trusted_devices with a given conditions (other predicates).
func (f *UserFilter) WhereHasTrustedDevicesWith(preds ...predicate.TrustedDevice) {
	f.Where(entql.HasEdgeWith("trusted_devices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPasswordHistory applies a predicate to check if query has an edge password_history.
func (f *UserFilter) WhereHasPasswordHistory() {
	f.Where(entql.HasEdge("password_history"))
}

// WhereHasPasswordHistoryWith applies a predicate to check if query has an edge password_history with a given conditions (other predicates).
func (f *UserFilter) WhereHasPasswordHistoryWith(preds ...predicate.PasswordHistory) {
	f.Where(entql.HasEdgeWith("password_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeamMember applies a predicate to check if query has an edge team_member.
func (f *UserFilter) WhereHasTeamMember() {
	f.Where(entql.HasEdge("team_member"))
}

// WhereHasTeamMemberWith applies a predicate to check if query has an edge team_member with a given conditions (other predicates).
func (f *UserFilter) WhereHasTeamMemberWith(preds ...predicate.TeamMember) {
	f.Where(entql.HasEdgeWith("team_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAuditLogs applies a predicate to check if query has an edge audit_logs.
func (f *UserFilter) WhereHasAuditLogs() {
	f.Where(entql.HasEdge("audit_logs"))
}

// WhereHasAuditLogsWith applies a predicate to check if query has an edge audit_logs with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuditLogsWith(preds ...predicate.AuditLog) {
	f.Where(entql.HasEdgeWith("audit_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasJobs applies a predicate to check if query has an edge jobs.
func (f *UserFilter) WhereHasJobs() {
	f.Where(entql.HasEdge("jobs"))
}

// WhereHasJobsWith applies a predicate to check if query has an edge jobs with a given conditions (other predicates).
func (f *UserFilter) WhereHasJobsWith(preds ...predicate.Job) {
	f.Where(entql.HasEdgeWith("jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDashboards applies a predicate to check if query has an edge dashboards.
func (f *UserFilter) WhereHasDashboards() {
	f.Where(entql.HasEdge("dashboards"))
}

// WhereHasDashboardsWith applies a predicate to check if query has an edge dashboards with a given conditions (other predicates).
func (f *UserFilter) WhereHasDashboardsWith(preds ...predicate.AnalyticsDashboard) {
	f.Where(entql.HasEdgeWith("dashboards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAnalyticsEvents applies a predicate to check if query has an edge analytics_events.
func (f *UserFilter) WhereHasAnalyticsEvents() {
	f.Where(entql.HasEdge("analytics_events"))
}

// WhereHasAnalyticsEventsWith applies a predicate to check if query has an edge analytics_events with a given conditions (other predicates).
func (f *UserFilter) WhereHasAnalyticsEventsWith(preds ...predicate.AnalyticsEvent) {
	f.Where(entql.HasEdgeWith("analytics_events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedReports applies a predicate to check if query has an edge created_reports.
func (f *UserFilter) WhereHasCreatedReports() {
	f.Where(entql.HasEdge("created_reports"))
}

// WhereHasCreatedReportsWith applies a predicate to check if query has an edge created_reports with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedReportsWith(preds ...predicate.ReportDefinition) {
	f.Where(entql.HasEdgeWith("created_reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGeneratedReports applies a predicate to check if query has an edge generated_reports.
func (f *UserFilter) WhereHasGeneratedReports() {
	f.Where(entql.HasEdge("generated_reports"))
}

// WhereHasGeneratedReportsWith applies a predicate to check if query has an edge generated_reports with a given conditions (other predicates).
func (f *UserFilter) WhereHasGeneratedReportsWith(preds ...predicate.GeneratedReport) {
	f.Where(entql.HasEdgeWith("generated_reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReportPermissions applies a predicate to check if query has an edge report_permissions.
func (f *UserFilter) WhereHasReportPermissions() {
	f.Where(entql.HasEdge("report_permissions"))
}

// WhereHasReportPermissionsWith applies a predicate to check if query has an edge report_permissions with a given conditions (other predicates).
func (f *UserFilter) WhereHasReportPermissionsWith(preds ...predicate.ReportPermission) {
	f.Where(entql.HasEdgeWith("report_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasScheduledReports applies a predicate to check if query has an edge scheduled_reports.
func (f *UserFilter) WhereHasScheduledReports() {
	f.Where(entql.HasEdge("scheduled_reports"))
}

// WhereHasScheduledReportsWith applies a predicate to check if query has an edge scheduled_reports with a given conditions (other predicates).
func (f *UserFilter) WhereHasScheduledReportsWith(preds ...predicate.ScheduledReport) {
	f.Where(entql.HasEdgeWith("scheduled_reports", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedPrograms applies a predicate to check if query has an edge created_programs.
func (f *UserFilter) WhereHasCreatedPrograms() {
	f.Where(entql.HasEdge("created_programs"))
}

// WhereHasCreatedProgramsWith applies a predicate to check if query has an edge created_programs with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("created_programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdatedPrograms applies a predicate to check if query has an edge updated_programs.
func (f *UserFilter) WhereHasUpdatedPrograms() {
	f.Where(entql.HasEdge("updated_programs"))
}

// WhereHasUpdatedProgramsWith applies a predicate to check if query has an edge updated_programs with a given conditions (other predicates).
func (f *UserFilter) WhereHasUpdatedProgramsWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("updated_programs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProgramEnrolments applies a predicate to check if query has an edge program_enrolments.
func (f *UserFilter) WhereHasProgramEnrolments() {
	f.Where(entql.HasEdge("program_enrolments"))
}

// WhereHasProgramEnrolmentsWith applies a predicate to check if query has an edge program_enrolments with a given conditions (other predicates).
func (f *UserFilter) WhereHasProgramEnrolmentsWith(preds ...predicate.ProgramEnrolment) {
	f.Where(entql.HasEdgeWith("program_enrolments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParticipantIn applies a predicate to check if query has an edge participant_in.
func (f *UserFilter) WhereHasParticipantIn() {
	f.Where(entql.HasEdge("participant_in"))
}

// WhereHasParticipantInWith applies a predicate to check if query has an edge participant_in with a given conditions (other predicates).
func (f *UserFilter) WhereHasParticipantInWith(preds ...predicate.ProgramParticipant) {
	f.Where(entql.HasEdgeWith("participant_in", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuccessStories applies a predicate to check if query has an edge success_stories.
func (f *UserFilter) WhereHasSuccessStories() {
	f.Where(entql.HasEdge("success_stories"))
}

// WhereHasSuccessStoriesWith applies a predicate to check if query has an edge success_stories with a given conditions (other predicates).
func (f *UserFilter) WhereHasSuccessStoriesWith(preds ...predicate.SuccessStory) {
	f.Where(entql.HasEdgeWith("success_stories", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNewsArticles applies a predicate to check if query has an edge news_articles.
func (f *UserFilter) WhereHasNewsArticles() {
	f.Where(entql.HasEdge("news_articles"))
}

// WhereHasNewsArticlesWith applies a predicate to check if query has an edge news_articles with a given conditions (other predicates).
func (f *UserFilter) WhereHasNewsArticlesWith(preds ...predicate.NewsArticle) {
	f.Where(entql.HasEdgeWith("news_articles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedEvents applies a predicate to check if query has an edge created_events.
func (f *UserFilter) WhereHasCreatedEvents() {
	f.Where(entql.HasEdge("created_events"))
}

// WhereHasCreatedEventsWith applies a predicate to check if query has an edge created_events with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("created_events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventRegistrations applies a predicate to check if query has an edge event_registrations.
func (f *UserFilter) WhereHasEventRegistrations() {
	f.Where(entql.HasEdge("event_registrations"))
}

// WhereHasEventRegistrationsWith applies a predicate to check if query has an edge event_registrations with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventRegistrationsWith(preds ...predicate.EventRegistration) {
	f.Where(entql.HasEdgeWith("event_registrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessagesSent applies a predicate to check if query has an edge messages_sent.
func (f *UserFilter) WhereHasMessagesSent() {
	f.Where(entql.HasEdge("messages_sent"))
}

// WhereHasMessagesSentWith applies a predicate to check if query has an edge messages_sent with a given conditions (other predicates).
func (f *UserFilter) WhereHasMessagesSentWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages_sent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConversationLinks applies a predicate to check if query has an edge conversation_links.
func (f *UserFilter) WhereHasConversationLinks() {
	f.Where(entql.HasEdge("conversation_links"))
}

// WhereHasConversationLinksWith applies a predicate to check if query has an edge conversation_links with a given conditions (other predicates).
func (f *UserFilter) WhereHasConversationLinksWith(preds ...predicate.ConversationParticipant) {
	f.Where(entql.HasEdgeWith("conversation_links", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVolunteerApplications applies a predicate to check if query has an edge volunteer_applications.
func (f *UserFilter) WhereHasVolunteerApplications() {
	f.Where(entql.HasEdge("volunteer_applications"))
}

// WhereHasVolunteerApplicationsWith applies a predicate to check if query has an edge volunteer_applications with a given conditions (other predicates).
func (f *UserFilter) WhereHasVolunteerApplicationsWith(preds ...predicate.VolunteerApplication) {
	f.Where(entql.HasEdgeWith("volunteer_applications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentorshipRequests applies a predicate to check if query has an edge mentorship_requests.
func (f *UserFilter) WhereHasMentorshipRequests() {
	f.Where(entql.HasEdge("mentorship_requests"))
}

// WhereHasMentorshipRequestsWith applies a predicate to check if query has an edge mentorship_requests with a given conditions (other predicates).
func (f *UserFilter) WhereHasMentorshipRequestsWith(preds ...predicate.MentorshipRequest) {
	f.Where(entql.HasEdgeWith("mentorship_requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMentorshipsMentoring applies a predicate to check if query has an edge mentorships_mentoring.
func (f *UserFilter) WhereHasMentorshipsMentoring() {
	f.Where(entql.HasEdge("mentorships_mentoring"))
}

// WhereHasMentorshipsMentoringWith applies a predicate to check if query has an edge mentorships_mentoring with a given conditions (other predicates).
func (f *UserFilter) WhereHasMentorshipsMentoringWith(preds ...predicate.MentorshipRequest) {
	f.Where(entql.HasEdgeWith("mentorships_mentoring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAchievements applies a predicate to check if query has an edge achievements.
func (f *UserFilter) WhereHasAchievements() {
	f.Where(entql.HasEdge("achievements"))
}

// WhereHasAchievementsWith applies a predicate to check if query has an edge achievements with a given conditions (other predicates).
func (f *UserFilter) WhereHasAchievementsWith(preds ...predicate.UserAchievement) {
	f.Where(entql.HasEdgeWith("achievements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDonations applies a predicate to check if query has an edge donations.
func (f *UserFilter) WhereHasDonations() {
	f.Where(entql.HasEdge("donations"))
}

// WhereHasDonationsWith applies a predicate to check if query has an edge donations with a given conditions (other predicates).
func (f *UserFilter) WhereHasDonationsWith(preds ...predicate.Donation) {
	f.Where(entql.HasEdgeWith("donations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *UserFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManagedPartnerships applies a predicate to check if query has an edge managed_partnerships.
func (f *UserFilter) WhereHasManagedPartnerships() {
	f.Where(entql.HasEdge("managed_partnerships"))
}

// WhereHasManagedPartnershipsWith applies a predicate to check if query has an edge managed_partnerships with a given conditions (other predicates).
func (f *UserFilter) WhereHasManagedPartnershipsWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("managed_partnerships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPartnershipContacts applies a predicate to check if query has an edge partnership_contacts.
func (f *UserFilter) WhereHasPartnershipContacts() {
	f.Where(entql.HasEdge("partnership_contacts"))
}

// WhereHasPartnershipContactsWith applies a predicate to check if query has an edge partnership_contacts with a given conditions (other predicates).
func (f *UserFilter) WhereHasPartnershipContactsWith(preds ...predicate.Partnership) {
	f.Where(entql.HasEdgeWith("partnership_contacts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSiteVisits applies a predicate to check if query has an edge site_visits.
func (f *UserFilter) WhereHasSiteVisits() {
	f.Where(entql.HasEdge("site_visits"))
}

// WhereHasSiteVisitsWith applies a predicate to check if query has an edge site_visits with a given conditions (other predicates).
func (f *UserFilter) WhereHasSiteVisitsWith(preds ...predicate.SiteVisit) {
	f.Where(entql.HasEdgeWith("site_visits", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocumentUploads applies a predicate to check if query has an edge document_uploads.
func (f *UserFilter) WhereHasDocumentUploads() {
	f.Where(entql.HasEdge("document_uploads"))
}

// WhereHasDocumentUploadsWith applies a predicate to check if query has an edge document_uploads with a given conditions (other predicates).
func (f *UserFilter) WhereHasDocumentUploadsWith(preds ...predicate.Document) {
	f.Where(entql.HasEdgeWith("document_uploads", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActivityLogs applies a predicate to check if query has an edge activity_logs.
func (f *UserFilter) WhereHasActivityLogs() {
	f.Where(entql.HasEdge("activity_logs"))
}

// WhereHasActivityLogsWith applies a predicate to check if query has an edge activity_logs with a given conditions (other predicates).
func (f *UserFilter) WhereHasActivityLogsWith(preds ...predicate.ActivityLog) {
	f.Where(entql.HasEdgeWith("activity_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConsents applies a predicate to check if query has an edge consents.
func (f *UserFilter) WhereHasConsents() {
	f.Where(entql.HasEdge("consents"))
}

// WhereHasConsentsWith applies a predicate to check if query has an edge consents with a given conditions (other predicates).
func (f *UserFilter) WhereHasConsentsWith(preds ...predicate.UserConsent) {
	f.Where(entql.HasEdgeWith("consents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOnboarding applies a predicate to check if query has an edge onboarding.
func (f *UserFilter) WhereHasOnboarding() {
	f.Where(entql.HasEdge("onboarding"))
}

// WhereHasOnboardingWith applies a predicate to check if query has an edge onboarding with a given conditions (other predicates).
func (f *UserFilter) WhereHasOnboardingWith(preds ...predicate.UserOnboarding) {
	f.Where(entql.HasEdgeWith("onboarding", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserAchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserAchievementQuery builder.
func (_q *UserAchievementQuery) Filter() *UserAchievementFilter {
	return &UserAchievementFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserAchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserAchievementMutation builder.
func (m *UserAchievementMutation) Filter() *UserAchievementFilter {
	return &UserAchievementFilter{config: m.config, predicateAdder: m}
}

// UserAchievementFilter provides a generic filtering capability at runtime for UserAchievementQuery.
type UserAchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserAchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[92].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserAchievementFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userachievement.FieldID))
}

// WhereAwardedAt applies the entql time.Time predicate on the awarded_at field.
func (f *UserAchievementFilter) WhereAwardedAt(p entql.TimeP) {
	f.Where(p.Field(userachievement.FieldAwardedAt))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *UserAchievementFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(userachievement.FieldNotes))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserAchievementFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserAchievementFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBadge applies a predicate to check if query has an edge badge.
func (f *UserAchievementFilter) WhereHasBadge() {
	f.Where(entql.HasEdge("badge"))
}

// WhereHasBadgeWith applies a predicate to check if query has an edge badge with a given conditions (other predicates).
func (f *UserAchievementFilter) WhereHasBadgeWith(preds ...predicate.Badge) {
	f.Where(entql.HasEdgeWith("badge", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserConsentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserConsentQuery builder.
func (_q *UserConsentQuery) Filter() *UserConsentFilter {
	return &UserConsentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserConsentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserConsentMutation builder.
func (m *UserConsentMutation) Filter() *UserConsentFilter {
	return &UserConsentFilter{config: m.config, predicateAdder: m}
}

// UserConsentFilter provides a generic filtering capability at runtime for UserConsentQuery.
type UserConsentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserConsentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[93].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserConsentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userconsent.FieldID))
}

// WherePreferences applies the entql json.RawMessage predicate on the preferences field.
func (f *UserConsentFilter) WherePreferences(p entql.BytesP) {
	f.Where(p.Field(userconsent.FieldPreferences))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *UserConsentFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(userconsent.FieldIPAddress))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserConsentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userconsent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserConsentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userconsent.FieldUpdatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserConsentFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserConsentFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserOnboardingQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserOnboardingQuery builder.
func (_q *UserOnboardingQuery) Filter() *UserOnboardingFilter {
	return &UserOnboardingFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserOnboardingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserOnboardingMutation builder.
func (m *UserOnboardingMutation) Filter() *UserOnboardingFilter {
	return &UserOnboardingFilter{config: m.config, predicateAdder: m}
}

// UserOnboardingFilter provides a generic filtering capability at runtime for UserOnboardingQuery.
type UserOnboardingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserOnboardingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[94].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserOnboardingFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(useronboarding.FieldID))
}

// WhereIsCompleted applies the entql bool predicate on the is_completed field.
func (f *UserOnboardingFilter) WhereIsCompleted(p entql.BoolP) {
	f.Where(p.Field(useronboarding.FieldIsCompleted))
}

// WhereCompletedAt applies the entql time.Time predicate on the completed_at field.
func (f *UserOnboardingFilter) WhereCompletedAt(p entql.TimeP) {
	f.Where(p.Field(useronboarding.FieldCompletedAt))
}

// WhereSteps applies the entql json.RawMessage predicate on the steps field.
func (f *UserOnboardingFilter) WhereSteps(p entql.BytesP) {
	f.Where(p.Field(useronboarding.FieldSteps))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserOnboardingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(useronboarding.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserOnboardingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(useronboarding.FieldUpdatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserOnboardingFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserOnboardingFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserProfileQuery builder.
func (_q *UserProfileQuery) Filter() *UserProfileFilter {
	return &UserProfileFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserProfileMutation builder.
func (m *UserProfileMutation) Filter() *UserProfileFilter {
	return &UserProfileFilter{config: m.config, predicateAdder: m}
}

// UserProfileFilter provides a generic filtering capability at runtime for UserProfileQuery.
type UserProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[95].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserProfileFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userprofile.FieldID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserProfileFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserProfileFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldLastName))
}

// WhereAvatarURL applies the entql string predicate on the avatar_url field.
func (f *UserProfileFilter) WhereAvatarURL(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldAvatarURL))
}

// WhereBio applies the entql string predicate on the bio field.
func (f *UserProfileFilter) WhereBio(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldBio))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserProfileFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldPhone))
}

// WhereJobTitle applies the entql string predicate on the job_title field.
func (f *UserProfileFilter) WhereJobTitle(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldJobTitle))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *UserProfileFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldCompany))
}

// WhereLinkedin applies the entql string predicate on the linkedin field.
func (f *UserProfileFilter) WhereLinkedin(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldLinkedin))
}

// WhereTwitter applies the entql string predicate on the twitter field.
func (f *UserProfileFilter) WhereTwitter(p entql.StringP) {
	f.Where(p.Field(userprofile.FieldTwitter))
}

// WhereInterests applies the entql json.RawMessage predicate on the interests field.
func (f *UserProfileFilter) WhereInterests(p entql.BytesP) {
	f.Where(p.Field(userprofile.FieldInterests))
}

// WhereCompletedPct applies the entql int predicate on the completed_pct field.
func (f *UserProfileFilter) WhereCompletedPct(p entql.IntP) {
	f.Where(p.Field(userprofile.FieldCompletedPct))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserProfileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userprofile.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserProfileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(userprofile.FieldUpdatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserProfileFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserProfileFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignments applies a predicate to check if query has an edge assignments.
func (f *UserProfileFilter) WhereHasAssignments() {
	f.Where(entql.HasEdge("assignments"))
}

// WhereHasAssignmentsWith applies a predicate to check if query has an edge assignments with a given conditions (other predicates).
func (f *UserProfileFilter) WhereHasAssignmentsWith(preds ...predicate.VolunteerAssignment) {
	f.Where(entql.HasEdgeWith("assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSkills applies a predicate to check if query has an edge skills.
func (f *UserProfileFilter) WhereHasSkills() {
	f.Where(entql.HasEdge("skills"))
}

// WhereHasSkillsWith applies a predicate to check if query has an edge skills with a given conditions (other predicates).
func (f *UserProfileFilter) WhereHasSkillsWith(preds ...predicate.UserSkill) {
	f.Where(entql.HasEdgeWith("skills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddress applies a predicate to check if query has an edge address.
func (f *UserProfileFilter) WhereHasAddress() {
	f.Where(entql.HasEdge("address"))
}

// WhereHasAddressWith applies a predicate to check if query has an edge address with a given conditions (other predicates).
func (f *UserProfileFilter) WhereHasAddressWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSessionQuery builder.
func (_q *UserSessionQuery) Filter() *UserSessionFilter {
	return &UserSessionFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSessionMutation builder.
func (m *UserSessionMutation) Filter() *UserSessionFilter {
	return &UserSessionFilter{config: m.config, predicateAdder: m}
}

// UserSessionFilter provides a generic filtering capability at runtime for UserSessionQuery.
type UserSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[96].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserSessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(usersession.FieldID))
}

// WhereSessionToken applies the entql string predicate on the session_token field.
func (f *UserSessionFilter) WhereSessionToken(p entql.StringP) {
	f.Where(p.Field(usersession.FieldSessionToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *UserSessionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(usersession.FieldExpiresAt))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *UserSessionFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(usersession.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *UserSessionFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(usersession.FieldUserAgent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersession.FieldCreatedAt))
}

// WhereLastAccessed applies the entql time.Time predicate on the last_accessed field.
func (f *UserSessionFilter) WhereLastAccessed(p entql.TimeP) {
	f.Where(p.Field(usersession.FieldLastAccessed))
}

// WhereDeviceFingerprint applies the entql string predicate on the device_fingerprint field.
func (f *UserSessionFilter) WhereDeviceFingerprint(p entql.StringP) {
	f.Where(p.Field(usersession.FieldDeviceFingerprint))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserSessionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserSessionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserSkillQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSkillQuery builder.
func (_q *UserSkillQuery) Filter() *UserSkillFilter {
	return &UserSkillFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSkillMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSkillMutation builder.
func (m *UserSkillMutation) Filter() *UserSkillFilter {
	return &UserSkillFilter{config: m.config, predicateAdder: m}
}

// UserSkillFilter provides a generic filtering capability at runtime for UserSkillQuery.
type UserSkillFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSkillFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[97].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserSkillFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userskill.FieldID))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *UserSkillFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(userskill.FieldLevel))
}

// WhereHasProfile applies a predicate to check if query has an edge profile.
func (f *UserSkillFilter) WhereHasProfile() {
	f.Where(entql.HasEdge("profile"))
}

// WhereHasProfileWith applies a predicate to check if query has an edge profile with a given conditions (other predicates).
func (f *UserSkillFilter) WhereHasProfileWith(preds ...predicate.UserProfile) {
	f.Where(entql.HasEdgeWith("profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSkill applies a predicate to check if query has an edge skill.
func (f *UserSkillFilter) WhereHasSkill() {
	f.Where(entql.HasEdge("skill"))
}

// WhereHasSkillWith applies a predicate to check if query has an edge skill with a given conditions (other predicates).
func (f *UserSkillFilter) WhereHasSkillWith(preds ...predicate.Skill) {
	f.Where(entql.HasEdgeWith("skill", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *VolunteerApplicationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VolunteerApplicationQuery builder.
func (_q *VolunteerApplicationQuery) Filter() *VolunteerApplicationFilter {
	return &VolunteerApplicationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *VolunteerApplicationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VolunteerApplicationMutation builder.
func (m *VolunteerApplicationMutation) Filter() *VolunteerApplicationFilter {
	return &VolunteerApplicationFilter{config: m.config, predicateAdder: m}
}

// VolunteerApplicationFilter provides a generic filtering capability at runtime for VolunteerApplicationQuery.
type VolunteerApplicationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VolunteerApplicationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[98].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VolunteerApplicationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(volunteerapplication.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *VolunteerApplicationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(volunteerapplication.FieldStatus))
}

// WhereMotivation applies the entql string predicate on the motivation field.
func (f *VolunteerApplicationFilter) WhereMotivation(p entql.StringP) {
	f.Where(p.Field(volunteerapplication.FieldMotivation))
}

// WhereAvailability applies the entql json.RawMessage predicate on the availability field.
func (f *VolunteerApplicationFilter) WhereAvailability(p entql.BytesP) {
	f.Where(p.Field(volunteerapplication.FieldAvailability))
}

// WhereBackgroundCheck applies the entql bool predicate on the background_check field.
func (f *VolunteerApplicationFilter) WhereBackgroundCheck(p entql.BoolP) {
	f.Where(p.Field(volunteerapplication.FieldBackgroundCheck))
}

// WhereBackgroundCheckDate applies the entql time.Time predicate on the background_check_date field.
func (f *VolunteerApplicationFilter) WhereBackgroundCheckDate(p entql.TimeP) {
	f.Where(p.Field(volunteerapplication.FieldBackgroundCheckDate))
}

// WhereReferences applies the entql json.RawMessage predicate on the references field.
func (f *VolunteerApplicationFilter) WhereReferences(p entql.BytesP) {
	f.Where(p.Field(volunteerapplication.FieldReferences))
}

// WhereEmergencyContact applies the entql json.RawMessage predicate on the emergency_contact field.
func (f *VolunteerApplicationFilter) WhereEmergencyContact(p entql.BytesP) {
	f.Where(p.Field(volunteerapplication.FieldEmergencyContact))
}

// WhereReviewedBy applies the entql string predicate on the reviewed_by field.
func (f *VolunteerApplicationFilter) WhereReviewedBy(p entql.StringP) {
	f.Where(p.Field(volunteerapplication.FieldReviewedBy))
}

// WhereReviewedAt applies the entql time.Time predicate on the reviewed_at field.
func (f *VolunteerApplicationFilter) WhereReviewedAt(p entql.TimeP) {
	f.Where(p.Field(volunteerapplication.FieldReviewedAt))
}

// WhereReviewNotes applies the entql string predicate on the review_notes field.
func (f *VolunteerApplicationFilter) WhereReviewNotes(p entql.StringP) {
	f.Where(p.Field(volunteerapplication.FieldReviewNotes))
}

// WhereInterviewDate applies the entql time.Time predicate on the interview_date field.
func (f *VolunteerApplicationFilter) WhereInterviewDate(p entql.TimeP) {
	f.Where(p.Field(volunteerapplication.FieldInterviewDate))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VolunteerApplicationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteerapplication.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VolunteerApplicationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteerapplication.FieldUpdatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *VolunteerApplicationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *VolunteerApplicationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInterestedOpportunities applies a predicate to check if query has an edge interested_opportunities.
func (f *VolunteerApplicationFilter) WhereHasInterestedOpportunities() {
	f.Where(entql.HasEdge("interested_opportunities"))
}

// WhereHasInterestedOpportunitiesWith applies a predicate to check if query has an edge interested_opportunities with a given conditions (other predicates).
func (f *VolunteerApplicationFilter) WhereHasInterestedOpportunitiesWith(preds ...predicate.VolunteerOpportunity) {
	f.Where(entql.HasEdgeWith("interested_opportunities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *VolunteerAssignmentQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VolunteerAssignmentQuery builder.
func (_q *VolunteerAssignmentQuery) Filter() *VolunteerAssignmentFilter {
	return &VolunteerAssignmentFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *VolunteerAssignmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VolunteerAssignmentMutation builder.
func (m *VolunteerAssignmentMutation) Filter() *VolunteerAssignmentFilter {
	return &VolunteerAssignmentFilter{config: m.config, predicateAdder: m}
}

// VolunteerAssignmentFilter provides a generic filtering capability at runtime for VolunteerAssignmentQuery.
type VolunteerAssignmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VolunteerAssignmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[99].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VolunteerAssignmentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(volunteerassignment.FieldID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *VolunteerAssignmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(volunteerassignment.FieldStatus))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *VolunteerAssignmentFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(volunteerassignment.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *VolunteerAssignmentFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(volunteerassignment.FieldEndDate))
}

// WhereHoursCompleted applies the entql int predicate on the hours_completed field.
func (f *VolunteerAssignmentFilter) WhereHoursCompleted(p entql.IntP) {
	f.Where(p.Field(volunteerassignment.FieldHoursCompleted))
}

// WhereHoursCommitted applies the entql int predicate on the hours_committed field.
func (f *VolunteerAssignmentFilter) WhereHoursCommitted(p entql.IntP) {
	f.Where(p.Field(volunteerassignment.FieldHoursCommitted))
}

// WhereFeedback applies the entql string predicate on the feedback field.
func (f *VolunteerAssignmentFilter) WhereFeedback(p entql.StringP) {
	f.Where(p.Field(volunteerassignment.FieldFeedback))
}

// WhereRating applies the entql int predicate on the rating field.
func (f *VolunteerAssignmentFilter) WhereRating(p entql.IntP) {
	f.Where(p.Field(volunteerassignment.FieldRating))
}

// WhereCompletionNotes applies the entql string predicate on the completion_notes field.
func (f *VolunteerAssignmentFilter) WhereCompletionNotes(p entql.StringP) {
	f.Where(p.Field(volunteerassignment.FieldCompletionNotes))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VolunteerAssignmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteerassignment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VolunteerAssignmentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteerassignment.FieldUpdatedAt))
}

// WhereHasOpportunity applies a predicate to check if query has an edge opportunity.
func (f *VolunteerAssignmentFilter) WhereHasOpportunity() {
	f.Where(entql.HasEdge("opportunity"))
}

// WhereHasOpportunityWith applies a predicate to check if query has an edge opportunity with a given conditions (other predicates).
func (f *VolunteerAssignmentFilter) WhereHasOpportunityWith(preds ...predicate.VolunteerOpportunity) {
	f.Where(entql.HasEdgeWith("opportunity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVolunteer applies a predicate to check if query has an edge volunteer.
func (f *VolunteerAssignmentFilter) WhereHasVolunteer() {
	f.Where(entql.HasEdge("volunteer"))
}

// WhereHasVolunteerWith applies a predicate to check if query has an edge volunteer with a given conditions (other predicates).
func (f *VolunteerAssignmentFilter) WhereHasVolunteerWith(preds ...predicate.UserProfile) {
	f.Where(entql.HasEdgeWith("volunteer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *VolunteerOpportunityQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VolunteerOpportunityQuery builder.
func (_q *VolunteerOpportunityQuery) Filter() *VolunteerOpportunityFilter {
	return &VolunteerOpportunityFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *VolunteerOpportunityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VolunteerOpportunityMutation builder.
func (m *VolunteerOpportunityMutation) Filter() *VolunteerOpportunityFilter {
	return &VolunteerOpportunityFilter{config: m.config, predicateAdder: m}
}

// VolunteerOpportunityFilter provides a generic filtering capability at runtime for VolunteerOpportunityQuery.
type VolunteerOpportunityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VolunteerOpportunityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[100].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VolunteerOpportunityFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(volunteeropportunity.FieldID))
}

// WhereTitle applies the entql json.RawMessage predicate on the title field.
func (f *VolunteerOpportunityFilter) WhereTitle(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldTitle))
}

// WhereDescription applies the entql json.RawMessage predicate on the description field.
func (f *VolunteerOpportunityFilter) WhereDescription(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldDescription))
}

// WhereTimeCommitment applies the entql string predicate on the time_commitment field.
func (f *VolunteerOpportunityFilter) WhereTimeCommitment(p entql.StringP) {
	f.Where(p.Field(volunteeropportunity.FieldTimeCommitment))
}

// WhereLocation applies the entql json.RawMessage predicate on the location field.
func (f *VolunteerOpportunityFilter) WhereLocation(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldLocation))
}

// WhereIsActive applies the entql bool predicate on the is_active field.
func (f *VolunteerOpportunityFilter) WhereIsActive(p entql.BoolP) {
	f.Where(p.Field(volunteeropportunity.FieldIsActive))
}

// WhereMaxVolunteers applies the entql int predicate on the max_volunteers field.
func (f *VolunteerOpportunityFilter) WhereMaxVolunteers(p entql.IntP) {
	f.Where(p.Field(volunteeropportunity.FieldMaxVolunteers))
}

// WhereCurrentVolunteers applies the entql int predicate on the current_volunteers field.
func (f *VolunteerOpportunityFilter) WhereCurrentVolunteers(p entql.IntP) {
	f.Where(p.Field(volunteeropportunity.FieldCurrentVolunteers))
}

// WhereStartDate applies the entql time.Time predicate on the start_date field.
func (f *VolunteerOpportunityFilter) WhereStartDate(p entql.TimeP) {
	f.Where(p.Field(volunteeropportunity.FieldStartDate))
}

// WhereEndDate applies the entql time.Time predicate on the end_date field.
func (f *VolunteerOpportunityFilter) WhereEndDate(p entql.TimeP) {
	f.Where(p.Field(volunteeropportunity.FieldEndDate))
}

// WhereApplicationDeadline applies the entql time.Time predicate on the application_deadline field.
func (f *VolunteerOpportunityFilter) WhereApplicationDeadline(p entql.TimeP) {
	f.Where(p.Field(volunteeropportunity.FieldApplicationDeadline))
}

// WhereRequiredSkills applies the entql json.RawMessage predicate on the required_skills field.
func (f *VolunteerOpportunityFilter) WhereRequiredSkills(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldRequiredSkills))
}

// WherePreferredSkills applies the entql json.RawMessage predicate on the preferred_skills field.
func (f *VolunteerOpportunityFilter) WherePreferredSkills(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldPreferredSkills))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *VolunteerOpportunityFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(volunteeropportunity.FieldTags))
}

// WhereIsUrgent applies the entql bool predicate on the is_urgent field.
func (f *VolunteerOpportunityFilter) WhereIsUrgent(p entql.BoolP) {
	f.Where(p.Field(volunteeropportunity.FieldIsUrgent))
}

// WhereIsRecurring applies the entql bool predicate on the is_recurring field.
func (f *VolunteerOpportunityFilter) WhereIsRecurring(p entql.BoolP) {
	f.Where(p.Field(volunteeropportunity.FieldIsRecurring))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VolunteerOpportunityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteeropportunity.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VolunteerOpportunityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(volunteeropportunity.FieldUpdatedAt))
}

// WhereHasProgram applies a predicate to check if query has an edge program.
func (f *VolunteerOpportunityFilter) WhereHasProgram() {
	f.Where(entql.HasEdge("program"))
}

// WhereHasProgramWith applies a predicate to check if query has an edge program with a given conditions (other predicates).
func (f *VolunteerOpportunityFilter) WhereHasProgramWith(preds ...predicate.Program) {
	f.Where(entql.HasEdgeWith("program", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInterestedVolunteers applies a predicate to check if query has an edge interested_volunteers.
func (f *VolunteerOpportunityFilter) WhereHasInterestedVolunteers() {
	f.Where(entql.HasEdge("interested_volunteers"))
}

// WhereHasInterestedVolunteersWith applies a predicate to check if query has an edge interested_volunteers with a given conditions (other predicates).
func (f *VolunteerOpportunityFilter) WhereHasInterestedVolunteersWith(preds ...predicate.VolunteerApplication) {
	f.Where(entql.HasEdgeWith("interested_volunteers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignments applies a predicate to check if query has an edge assignments.
func (f *VolunteerOpportunityFilter) WhereHasAssignments() {
	f.Where(entql.HasEdge("assignments"))
}

// WhereHasAssignmentsWith applies a predicate to check if query has an edge assignments with a given conditions (other predicates).
func (f *VolunteerOpportunityFilter) WhereHasAssignmentsWith(preds ...predicate.VolunteerAssignment) {
	f.Where(entql.HasEdgeWith("assignments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *VoteQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VoteQuery builder.
func (_q *VoteQuery) Filter() *VoteFilter {
	return &VoteFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *VoteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VoteMutation builder.
func (m *VoteMutation) Filter() *VoteFilter {
	return &VoteFilter{config: m.config, predicateAdder: m}
}

// VoteFilter provides a generic filtering capability at runtime for VoteQuery.
type VoteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VoteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[101].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VoteFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vote.FieldID))
}

// WhereQuestion applies the entql string predicate on the question field.
func (f *VoteFilter) WhereQuestion(p entql.StringP) {
	f.Where(p.Field(vote.FieldQuestion))
}

// WhereOptions applies the entql json.RawMessage predicate on the options field.
func (f *VoteFilter) WhereOptions(p entql.BytesP) {
	f.Where(p.Field(vote.FieldOptions))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *VoteFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(vote.FieldStatus))
}

// WhereResult applies the entql string predicate on the result field.
func (f *VoteFilter) WhereResult(p entql.StringP) {
	f.Where(p.Field(vote.FieldResult))
}

// WhereHasAgendaItem applies a predicate to check if query has an edge agenda_item.
func (f *VoteFilter) WhereHasAgendaItem() {
	f.Where(entql.HasEdge("agenda_item"))
}

// WhereHasAgendaItemWith applies a predicate to check if query has an edge agenda_item with a given conditions (other predicates).
func (f *VoteFilter) WhereHasAgendaItemWith(preds ...predicate.AgendaItem) {
	f.Where(entql.HasEdgeWith("agenda_item", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBallots applies a predicate to check if query has an edge ballots.
func (f *VoteFilter) WhereHasBallots() {
	f.Where(entql.HasEdge("ballots"))
}

// WhereHasBallotsWith applies a predicate to check if query has an edge ballots with a given conditions (other predicates).
func (f *VoteFilter) WhereHasBallotsWith(preds ...predicate.Ballot) {
	f.Where(entql.HasEdgeWith("ballots", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
