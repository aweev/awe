// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/accordionitem"
	"awe/ent/ent/blockaccordion"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccordionItem is the model entity for the AccordionItem schema.
type AccordionItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Title holds the value of the "title" field.
	Title map[string]string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content map[string]string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccordionItemQuery when eager-loading is set.
	Edges                 AccordionItemEdges `json:"edges"`
	block_accordion_items *int
	selectValues          sql.SelectValues
}

// AccordionItemEdges holds the relations/edges for other nodes in the graph.
type AccordionItemEdges struct {
	// Block holds the value of the block edge.
	Block *BlockAccordion `json:"block,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccordionItemEdges) BlockOrErr() (*BlockAccordion, error) {
	if e.Block != nil {
		return e.Block, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blockaccordion.Label}
	}
	return nil, &NotLoadedError{edge: "block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccordionItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accordionitem.FieldTitle, accordionitem.FieldContent:
			values[i] = new([]byte)
		case accordionitem.FieldID, accordionitem.FieldOrder:
			values[i] = new(sql.NullInt64)
		case accordionitem.FieldCreatedAt, accordionitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case accordionitem.ForeignKeys[0]: // block_accordion_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccordionItem fields.
func (_m *AccordionItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accordionitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case accordionitem.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				_m.Order = int(value.Int64)
			}
		case accordionitem.FieldTitle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Title); err != nil {
					return fmt.Errorf("unmarshal field title: %w", err)
				}
			}
		case accordionitem.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case accordionitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case accordionitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case accordionitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field block_accordion_items", value)
			} else if value.Valid {
				_m.block_accordion_items = new(int)
				*_m.block_accordion_items = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccordionItem.
// This includes values selected through modifiers, order, etc.
func (_m *AccordionItem) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBlock queries the "block" edge of the AccordionItem entity.
func (_m *AccordionItem) QueryBlock() *BlockAccordionQuery {
	return NewAccordionItemClient(_m.config).QueryBlock(_m)
}

// Update returns a builder for updating this AccordionItem.
// Note that you need to call AccordionItem.Unwrap() before calling this method if this AccordionItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AccordionItem) Update() *AccordionItemUpdateOne {
	return NewAccordionItemClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AccordionItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AccordionItem) Unwrap() *AccordionItem {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccordionItem is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AccordionItem) String() string {
	var builder strings.Builder
	builder.WriteString("AccordionItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", _m.Order))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(fmt.Sprintf("%v", _m.Title))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", _m.Content))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccordionItems is a parsable slice of AccordionItem.
type AccordionItems []*AccordionItem
