// Code generated by ent, DO NOT EDIT.

package event

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCapacity, v))
}

// IsVirtual applies equality check predicate on the "is_virtual" field. It's identical to IsVirtualEQ.
func IsVirtual(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsVirtual, v))
}

// MeetingURL applies equality check predicate on the "meeting_url" field. It's identical to MeetingURLEQ.
func MeetingURL(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMeetingURL, v))
}

// RegistrationRequired applies equality check predicate on the "registration_required" field. It's identical to RegistrationRequiredEQ.
func RegistrationRequired(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationRequired, v))
}

// RegistrationDeadline applies equality check predicate on the "registration_deadline" field. It's identical to RegistrationDeadlineEQ.
func RegistrationDeadline(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationDeadline, v))
}

// RequiresApproval applies equality check predicate on the "requires_approval" field. It's identical to RequiresApprovalEQ.
func RequiresApproval(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRequiresApproval, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldImageURL, v))
}

// CorporateVolunteerFriendly applies equality check predicate on the "corporate_volunteer_friendly" field. It's identical to CorporateVolunteerFriendlyEQ.
func CorporateVolunteerFriendly(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCorporateVolunteerFriendly, v))
}

// AlumniOnly applies equality check predicate on the "alumni_only" field. It's identical to AlumniOnlyEQ.
func AlumniOnly(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAlumniOnly, v))
}

// MajorDonorOnly applies equality check predicate on the "major_donor_only" field. It's identical to MajorDonorOnlyEQ.
func MajorDonorOnly(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMajorDonorOnly, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldEventType, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEndDate, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCapacity, v))
}

// CapacityIsNil applies the IsNil predicate on the "capacity" field.
func CapacityIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldCapacity))
}

// CapacityNotNil applies the NotNil predicate on the "capacity" field.
func CapacityNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldCapacity))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStatus, vs...))
}

// IsVirtualEQ applies the EQ predicate on the "is_virtual" field.
func IsVirtualEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsVirtual, v))
}

// IsVirtualNEQ applies the NEQ predicate on the "is_virtual" field.
func IsVirtualNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsVirtual, v))
}

// MeetingURLEQ applies the EQ predicate on the "meeting_url" field.
func MeetingURLEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMeetingURL, v))
}

// MeetingURLNEQ applies the NEQ predicate on the "meeting_url" field.
func MeetingURLNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMeetingURL, v))
}

// MeetingURLIn applies the In predicate on the "meeting_url" field.
func MeetingURLIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldMeetingURL, vs...))
}

// MeetingURLNotIn applies the NotIn predicate on the "meeting_url" field.
func MeetingURLNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldMeetingURL, vs...))
}

// MeetingURLGT applies the GT predicate on the "meeting_url" field.
func MeetingURLGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldMeetingURL, v))
}

// MeetingURLGTE applies the GTE predicate on the "meeting_url" field.
func MeetingURLGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldMeetingURL, v))
}

// MeetingURLLT applies the LT predicate on the "meeting_url" field.
func MeetingURLLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldMeetingURL, v))
}

// MeetingURLLTE applies the LTE predicate on the "meeting_url" field.
func MeetingURLLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldMeetingURL, v))
}

// MeetingURLContains applies the Contains predicate on the "meeting_url" field.
func MeetingURLContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldMeetingURL, v))
}

// MeetingURLHasPrefix applies the HasPrefix predicate on the "meeting_url" field.
func MeetingURLHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldMeetingURL, v))
}

// MeetingURLHasSuffix applies the HasSuffix predicate on the "meeting_url" field.
func MeetingURLHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldMeetingURL, v))
}

// MeetingURLIsNil applies the IsNil predicate on the "meeting_url" field.
func MeetingURLIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldMeetingURL))
}

// MeetingURLNotNil applies the NotNil predicate on the "meeting_url" field.
func MeetingURLNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldMeetingURL))
}

// MeetingURLEqualFold applies the EqualFold predicate on the "meeting_url" field.
func MeetingURLEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldMeetingURL, v))
}

// MeetingURLContainsFold applies the ContainsFold predicate on the "meeting_url" field.
func MeetingURLContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldMeetingURL, v))
}

// RegistrationRequiredEQ applies the EQ predicate on the "registration_required" field.
func RegistrationRequiredEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationRequired, v))
}

// RegistrationRequiredNEQ applies the NEQ predicate on the "registration_required" field.
func RegistrationRequiredNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldRegistrationRequired, v))
}

// RegistrationDeadlineEQ applies the EQ predicate on the "registration_deadline" field.
func RegistrationDeadlineEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineNEQ applies the NEQ predicate on the "registration_deadline" field.
func RegistrationDeadlineNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineIn applies the In predicate on the "registration_deadline" field.
func RegistrationDeadlineIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldRegistrationDeadline, vs...))
}

// RegistrationDeadlineNotIn applies the NotIn predicate on the "registration_deadline" field.
func RegistrationDeadlineNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldRegistrationDeadline, vs...))
}

// RegistrationDeadlineGT applies the GT predicate on the "registration_deadline" field.
func RegistrationDeadlineGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineGTE applies the GTE predicate on the "registration_deadline" field.
func RegistrationDeadlineGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineLT applies the LT predicate on the "registration_deadline" field.
func RegistrationDeadlineLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineLTE applies the LTE predicate on the "registration_deadline" field.
func RegistrationDeadlineLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineIsNil applies the IsNil predicate on the "registration_deadline" field.
func RegistrationDeadlineIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldRegistrationDeadline))
}

// RegistrationDeadlineNotNil applies the NotNil predicate on the "registration_deadline" field.
func RegistrationDeadlineNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldRegistrationDeadline))
}

// RequiresApprovalEQ applies the EQ predicate on the "requires_approval" field.
func RequiresApprovalEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRequiresApproval, v))
}

// RequiresApprovalNEQ applies the NEQ predicate on the "requires_approval" field.
func RequiresApprovalNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldRequiresApproval, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldImageURL, v))
}

// CorporateVolunteerFriendlyEQ applies the EQ predicate on the "corporate_volunteer_friendly" field.
func CorporateVolunteerFriendlyEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCorporateVolunteerFriendly, v))
}

// CorporateVolunteerFriendlyNEQ applies the NEQ predicate on the "corporate_volunteer_friendly" field.
func CorporateVolunteerFriendlyNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCorporateVolunteerFriendly, v))
}

// AlumniOnlyEQ applies the EQ predicate on the "alumni_only" field.
func AlumniOnlyEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldAlumniOnly, v))
}

// AlumniOnlyNEQ applies the NEQ predicate on the "alumni_only" field.
func AlumniOnlyNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldAlumniOnly, v))
}

// MajorDonorOnlyEQ applies the EQ predicate on the "major_donor_only" field.
func MajorDonorOnlyEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMajorDonorOnly, v))
}

// MajorDonorOnlyNEQ applies the NEQ predicate on the "major_donor_only" field.
func MajorDonorOnlyNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMajorDonorOnly, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newProgramStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistrations applies the HasEdge predicate on the "registrations" edge.
func HasRegistrations() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistrationsTable, RegistrationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistrationsWith applies the HasEdge predicate on the "registrations" edge with a given conditions (other predicates).
func HasRegistrationsWith(preds ...predicate.EventRegistration) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newRegistrationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgenda applies the HasEdge predicate on the "agenda" edge.
func HasAgenda() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AgendaTable, AgendaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgendaWith applies the HasEdge predicate on the "agenda" edge with a given conditions (other predicates).
func HasAgendaWith(preds ...predicate.Agenda) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newAgendaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Address) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
