// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsVirtual holds the string denoting the is_virtual field in the database.
	FieldIsVirtual = "is_virtual"
	// FieldMeetingURL holds the string denoting the meeting_url field in the database.
	FieldMeetingURL = "meeting_url"
	// FieldRegistrationRequired holds the string denoting the registration_required field in the database.
	FieldRegistrationRequired = "registration_required"
	// FieldRegistrationDeadline holds the string denoting the registration_deadline field in the database.
	FieldRegistrationDeadline = "registration_deadline"
	// FieldRequiresApproval holds the string denoting the requires_approval field in the database.
	FieldRequiresApproval = "requires_approval"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldCorporateVolunteerFriendly holds the string denoting the corporate_volunteer_friendly field in the database.
	FieldCorporateVolunteerFriendly = "corporate_volunteer_friendly"
	// FieldAlumniOnly holds the string denoting the alumni_only field in the database.
	FieldAlumniOnly = "alumni_only"
	// FieldMajorDonorOnly holds the string denoting the major_donor_only field in the database.
	FieldMajorDonorOnly = "major_donor_only"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeRegistrations holds the string denoting the registrations edge name in mutations.
	EdgeRegistrations = "registrations"
	// EdgeAgenda holds the string denoting the agenda edge name in mutations.
	EdgeAgenda = "agenda"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// Table holds the table name of the event in the database.
	Table = "events"
	// ProgramTable is the table that holds the program relation/edge.
	ProgramTable = "events"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
	// ProgramColumn is the table column denoting the program relation/edge.
	ProgramColumn = "program_events"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "events"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "user_created_events"
	// RegistrationsTable is the table that holds the registrations relation/edge.
	RegistrationsTable = "event_registrations"
	// RegistrationsInverseTable is the table name for the EventRegistration entity.
	// It exists in this package in order to avoid circular dependency with the "eventregistration" package.
	RegistrationsInverseTable = "event_registrations"
	// RegistrationsColumn is the table column denoting the registrations relation/edge.
	RegistrationsColumn = "event_registrations"
	// AgendaTable is the table that holds the agenda relation/edge.
	AgendaTable = "agendas"
	// AgendaInverseTable is the table name for the Agenda entity.
	// It exists in this package in order to avoid circular dependency with the "agenda" package.
	AgendaInverseTable = "agendas"
	// AgendaColumn is the table column denoting the agenda relation/edge.
	AgendaColumn = "event_agenda"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "events"
	// LocationInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	LocationInverseTable = "addresses"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "event_location"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldEventType,
	FieldStartDate,
	FieldEndDate,
	FieldCapacity,
	FieldStatus,
	FieldIsVirtual,
	FieldMeetingURL,
	FieldRegistrationRequired,
	FieldRegistrationDeadline,
	FieldRequiresApproval,
	FieldTags,
	FieldImageURL,
	FieldCorporateVolunteerFriendly,
	FieldAlumniOnly,
	FieldMajorDonorOnly,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"address_events",
	"event_location",
	"program_events",
	"user_created_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsVirtual holds the default value on creation for the "is_virtual" field.
	DefaultIsVirtual bool
	// DefaultRegistrationRequired holds the default value on creation for the "registration_required" field.
	DefaultRegistrationRequired bool
	// DefaultRequiresApproval holds the default value on creation for the "requires_approval" field.
	DefaultRequiresApproval bool
	// DefaultCorporateVolunteerFriendly holds the default value on creation for the "corporate_volunteer_friendly" field.
	DefaultCorporateVolunteerFriendly bool
	// DefaultAlumniOnly holds the default value on creation for the "alumni_only" field.
	DefaultAlumniOnly bool
	// DefaultMajorDonorOnly holds the default value on creation for the "major_donor_only" field.
	DefaultMajorDonorOnly bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDRAFT is the default value of the Status enum.
const DefaultStatus = StatusDRAFT

// Status values.
const (
	StatusDRAFT     Status = "DRAFT"
	StatusPUBLISHED Status = "PUBLISHED"
	StatusCANCELLED Status = "CANCELLED"
	StatusARCHIVED  Status = "ARCHIVED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusPUBLISHED, StatusCANCELLED, StatusARCHIVED:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByCapacity orders the results by the capacity field.
func ByCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacity, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsVirtual orders the results by the is_virtual field.
func ByIsVirtual(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVirtual, opts...).ToFunc()
}

// ByMeetingURL orders the results by the meeting_url field.
func ByMeetingURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeetingURL, opts...).ToFunc()
}

// ByRegistrationRequired orders the results by the registration_required field.
func ByRegistrationRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationRequired, opts...).ToFunc()
}

// ByRegistrationDeadline orders the results by the registration_deadline field.
func ByRegistrationDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationDeadline, opts...).ToFunc()
}

// ByRequiresApproval orders the results by the requires_approval field.
func ByRequiresApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiresApproval, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByCorporateVolunteerFriendly orders the results by the corporate_volunteer_friendly field.
func ByCorporateVolunteerFriendly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorporateVolunteerFriendly, opts...).ToFunc()
}

// ByAlumniOnly orders the results by the alumni_only field.
func ByAlumniOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlumniOnly, opts...).ToFunc()
}

// ByMajorDonorOnly orders the results by the major_donor_only field.
func ByMajorDonorOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMajorDonorOnly, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgramField orders the results by program field.
func ByProgramField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByRegistrationsCount orders the results by registrations count.
func ByRegistrationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRegistrationsStep(), opts...)
	}
}

// ByRegistrations orders the results by registrations terms.
func ByRegistrations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegistrationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgendaField orders the results by agenda field.
func ByAgendaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgendaStep(), sql.OrderByField(field, opts...))
	}
}

// ByLocationField orders the results by location field.
func ByLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), sql.OrderByField(field, opts...))
	}
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgramTable, ProgramColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CreatedByTable, CreatedByColumn),
	)
}
func newRegistrationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegistrationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RegistrationsTable, RegistrationsColumn),
	)
}
func newAgendaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgendaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AgendaTable, AgendaColumn),
	)
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LocationTable, LocationColumn),
	)
}
