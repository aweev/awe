// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldHashedPassword holds the string denoting the hashed_password field in the database.
	FieldHashedPassword = "hashed_password"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldDeactivatedAt holds the string denoting the deactivated_at field in the database.
	FieldDeactivatedAt = "deactivated_at"
	// FieldLockedUntil holds the string denoting the locked_until field in the database.
	FieldLockedUntil = "locked_until"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldImpersonatingUserID holds the string denoting the impersonating_user_id field in the database.
	FieldImpersonatingUserID = "impersonating_user_id"
	// FieldSecurityTimestamp holds the string denoting the security_timestamp field in the database.
	FieldSecurityTimestamp = "security_timestamp"
	// FieldPasswordResetRequired holds the string denoting the password_reset_required field in the database.
	FieldPasswordResetRequired = "password_reset_required"
	// FieldRoles holds the string denoting the roles field in the database.
	FieldRoles = "roles"
	// FieldMfaSecret holds the string denoting the mfa_secret field in the database.
	FieldMfaSecret = "mfa_secret"
	// FieldMfaEnabled holds the string denoting the mfa_enabled field in the database.
	FieldMfaEnabled = "mfa_enabled"
	// FieldOnboardingStartedAt holds the string denoting the onboarding_started_at field in the database.
	FieldOnboardingStartedAt = "onboarding_started_at"
	// FieldOnboardingCompletedAt holds the string denoting the onboarding_completed_at field in the database.
	FieldOnboardingCompletedAt = "onboarding_completed_at"
	// FieldOnboardingSkipped holds the string denoting the onboarding_skipped field in the database.
	FieldOnboardingSkipped = "onboarding_skipped"
	// FieldOnboardingVersion holds the string denoting the onboarding_version field in the database.
	FieldOnboardingVersion = "onboarding_version"
	// FieldOnboardingCompleted holds the string denoting the onboarding_completed field in the database.
	FieldOnboardingCompleted = "onboarding_completed"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldAnalyticsProperties holds the string denoting the analytics_properties field in the database.
	FieldAnalyticsProperties = "analytics_properties"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// EdgeTrustedDevices holds the string denoting the trusted_devices edge name in mutations.
	EdgeTrustedDevices = "trusted_devices"
	// EdgePasswordHistory holds the string denoting the password_history edge name in mutations.
	EdgePasswordHistory = "password_history"
	// EdgeTeamMember holds the string denoting the team_member edge name in mutations.
	EdgeTeamMember = "team_member"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgeDashboards holds the string denoting the dashboards edge name in mutations.
	EdgeDashboards = "dashboards"
	// EdgeAnalyticsEvents holds the string denoting the analytics_events edge name in mutations.
	EdgeAnalyticsEvents = "analytics_events"
	// EdgeCreatedReports holds the string denoting the created_reports edge name in mutations.
	EdgeCreatedReports = "created_reports"
	// EdgeGeneratedReports holds the string denoting the generated_reports edge name in mutations.
	EdgeGeneratedReports = "generated_reports"
	// EdgeReportPermissions holds the string denoting the report_permissions edge name in mutations.
	EdgeReportPermissions = "report_permissions"
	// EdgeScheduledReports holds the string denoting the scheduled_reports edge name in mutations.
	EdgeScheduledReports = "scheduled_reports"
	// EdgeCreatedPrograms holds the string denoting the created_programs edge name in mutations.
	EdgeCreatedPrograms = "created_programs"
	// EdgeUpdatedPrograms holds the string denoting the updated_programs edge name in mutations.
	EdgeUpdatedPrograms = "updated_programs"
	// EdgeProgramEnrolments holds the string denoting the program_enrolments edge name in mutations.
	EdgeProgramEnrolments = "program_enrolments"
	// EdgeParticipantIn holds the string denoting the participant_in edge name in mutations.
	EdgeParticipantIn = "participant_in"
	// EdgeSuccessStories holds the string denoting the success_stories edge name in mutations.
	EdgeSuccessStories = "success_stories"
	// EdgeNewsArticles holds the string denoting the news_articles edge name in mutations.
	EdgeNewsArticles = "news_articles"
	// EdgeCreatedEvents holds the string denoting the created_events edge name in mutations.
	EdgeCreatedEvents = "created_events"
	// EdgeEventRegistrations holds the string denoting the event_registrations edge name in mutations.
	EdgeEventRegistrations = "event_registrations"
	// EdgeMessagesSent holds the string denoting the messages_sent edge name in mutations.
	EdgeMessagesSent = "messages_sent"
	// EdgeConversationLinks holds the string denoting the conversation_links edge name in mutations.
	EdgeConversationLinks = "conversation_links"
	// EdgeVolunteerApplications holds the string denoting the volunteer_applications edge name in mutations.
	EdgeVolunteerApplications = "volunteer_applications"
	// EdgeMentorshipRequests holds the string denoting the mentorship_requests edge name in mutations.
	EdgeMentorshipRequests = "mentorship_requests"
	// EdgeMentorshipsMentoring holds the string denoting the mentorships_mentoring edge name in mutations.
	EdgeMentorshipsMentoring = "mentorships_mentoring"
	// EdgeAchievements holds the string denoting the achievements edge name in mutations.
	EdgeAchievements = "achievements"
	// EdgeDonations holds the string denoting the donations edge name in mutations.
	EdgeDonations = "donations"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeManagedPartnerships holds the string denoting the managed_partnerships edge name in mutations.
	EdgeManagedPartnerships = "managed_partnerships"
	// EdgePartnershipContacts holds the string denoting the partnership_contacts edge name in mutations.
	EdgePartnershipContacts = "partnership_contacts"
	// EdgeSiteVisits holds the string denoting the site_visits edge name in mutations.
	EdgeSiteVisits = "site_visits"
	// EdgeDocumentUploads holds the string denoting the document_uploads edge name in mutations.
	EdgeDocumentUploads = "document_uploads"
	// EdgeActivityLogs holds the string denoting the activity_logs edge name in mutations.
	EdgeActivityLogs = "activity_logs"
	// EdgeConsents holds the string denoting the consents edge name in mutations.
	EdgeConsents = "consents"
	// EdgeOnboarding holds the string denoting the onboarding edge name in mutations.
	EdgeOnboarding = "onboarding"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "user_profiles"
	// ProfileInverseTable is the table name for the UserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userprofile" package.
	ProfileInverseTable = "user_profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "user_profile"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "user_sessions"
	// SessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	SessionsInverseTable = "user_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "tokens"
	// TokensInverseTable is the table name for the Token entity.
	// It exists in this package in order to avoid circular dependency with the "token" package.
	TokensInverseTable = "tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "user_tokens"
	// TrustedDevicesTable is the table that holds the trusted_devices relation/edge.
	TrustedDevicesTable = "trusted_devices"
	// TrustedDevicesInverseTable is the table name for the TrustedDevice entity.
	// It exists in this package in order to avoid circular dependency with the "trusteddevice" package.
	TrustedDevicesInverseTable = "trusted_devices"
	// TrustedDevicesColumn is the table column denoting the trusted_devices relation/edge.
	TrustedDevicesColumn = "user_trusted_devices"
	// PasswordHistoryTable is the table that holds the password_history relation/edge.
	PasswordHistoryTable = "password_histories"
	// PasswordHistoryInverseTable is the table name for the PasswordHistory entity.
	// It exists in this package in order to avoid circular dependency with the "passwordhistory" package.
	PasswordHistoryInverseTable = "password_histories"
	// PasswordHistoryColumn is the table column denoting the password_history relation/edge.
	PasswordHistoryColumn = "user_password_history"
	// TeamMemberTable is the table that holds the team_member relation/edge.
	TeamMemberTable = "users"
	// TeamMemberInverseTable is the table name for the TeamMember entity.
	// It exists in this package in order to avoid circular dependency with the "teammember" package.
	TeamMemberInverseTable = "team_members"
	// TeamMemberColumn is the table column denoting the team_member relation/edge.
	TeamMemberColumn = "user_team_member"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audit_logs"
	// AuditLogsInverseTable is the table name for the AuditLog entity.
	// It exists in this package in order to avoid circular dependency with the "auditlog" package.
	AuditLogsInverseTable = "audit_logs"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "user_audit_logs"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "user_jobs"
	// DashboardsTable is the table that holds the dashboards relation/edge.
	DashboardsTable = "analytics_dashboards"
	// DashboardsInverseTable is the table name for the AnalyticsDashboard entity.
	// It exists in this package in order to avoid circular dependency with the "analyticsdashboard" package.
	DashboardsInverseTable = "analytics_dashboards"
	// DashboardsColumn is the table column denoting the dashboards relation/edge.
	DashboardsColumn = "user_dashboards"
	// AnalyticsEventsTable is the table that holds the analytics_events relation/edge.
	AnalyticsEventsTable = "analytics_events"
	// AnalyticsEventsInverseTable is the table name for the AnalyticsEvent entity.
	// It exists in this package in order to avoid circular dependency with the "analyticsevent" package.
	AnalyticsEventsInverseTable = "analytics_events"
	// AnalyticsEventsColumn is the table column denoting the analytics_events relation/edge.
	AnalyticsEventsColumn = "user_analytics_events"
	// CreatedReportsTable is the table that holds the created_reports relation/edge.
	CreatedReportsTable = "report_definitions"
	// CreatedReportsInverseTable is the table name for the ReportDefinition entity.
	// It exists in this package in order to avoid circular dependency with the "reportdefinition" package.
	CreatedReportsInverseTable = "report_definitions"
	// CreatedReportsColumn is the table column denoting the created_reports relation/edge.
	CreatedReportsColumn = "user_created_reports"
	// GeneratedReportsTable is the table that holds the generated_reports relation/edge.
	GeneratedReportsTable = "generated_reports"
	// GeneratedReportsInverseTable is the table name for the GeneratedReport entity.
	// It exists in this package in order to avoid circular dependency with the "generatedreport" package.
	GeneratedReportsInverseTable = "generated_reports"
	// GeneratedReportsColumn is the table column denoting the generated_reports relation/edge.
	GeneratedReportsColumn = "user_generated_reports"
	// ReportPermissionsTable is the table that holds the report_permissions relation/edge.
	ReportPermissionsTable = "report_permissions"
	// ReportPermissionsInverseTable is the table name for the ReportPermission entity.
	// It exists in this package in order to avoid circular dependency with the "reportpermission" package.
	ReportPermissionsInverseTable = "report_permissions"
	// ReportPermissionsColumn is the table column denoting the report_permissions relation/edge.
	ReportPermissionsColumn = "user_report_permissions"
	// ScheduledReportsTable is the table that holds the scheduled_reports relation/edge.
	ScheduledReportsTable = "scheduled_reports"
	// ScheduledReportsInverseTable is the table name for the ScheduledReport entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledreport" package.
	ScheduledReportsInverseTable = "scheduled_reports"
	// ScheduledReportsColumn is the table column denoting the scheduled_reports relation/edge.
	ScheduledReportsColumn = "user_scheduled_reports"
	// CreatedProgramsTable is the table that holds the created_programs relation/edge.
	CreatedProgramsTable = "programs"
	// CreatedProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	CreatedProgramsInverseTable = "programs"
	// CreatedProgramsColumn is the table column denoting the created_programs relation/edge.
	CreatedProgramsColumn = "user_created_programs"
	// UpdatedProgramsTable is the table that holds the updated_programs relation/edge.
	UpdatedProgramsTable = "programs"
	// UpdatedProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	UpdatedProgramsInverseTable = "programs"
	// UpdatedProgramsColumn is the table column denoting the updated_programs relation/edge.
	UpdatedProgramsColumn = "user_updated_programs"
	// ProgramEnrolmentsTable is the table that holds the program_enrolments relation/edge.
	ProgramEnrolmentsTable = "program_enrolments"
	// ProgramEnrolmentsInverseTable is the table name for the ProgramEnrolment entity.
	// It exists in this package in order to avoid circular dependency with the "programenrolment" package.
	ProgramEnrolmentsInverseTable = "program_enrolments"
	// ProgramEnrolmentsColumn is the table column denoting the program_enrolments relation/edge.
	ProgramEnrolmentsColumn = "user_program_enrolments"
	// ParticipantInTable is the table that holds the participant_in relation/edge.
	ParticipantInTable = "program_participants"
	// ParticipantInInverseTable is the table name for the ProgramParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "programparticipant" package.
	ParticipantInInverseTable = "program_participants"
	// ParticipantInColumn is the table column denoting the participant_in relation/edge.
	ParticipantInColumn = "user_participant_in"
	// SuccessStoriesTable is the table that holds the success_stories relation/edge.
	SuccessStoriesTable = "success_stories"
	// SuccessStoriesInverseTable is the table name for the SuccessStory entity.
	// It exists in this package in order to avoid circular dependency with the "successstory" package.
	SuccessStoriesInverseTable = "success_stories"
	// SuccessStoriesColumn is the table column denoting the success_stories relation/edge.
	SuccessStoriesColumn = "user_success_stories"
	// NewsArticlesTable is the table that holds the news_articles relation/edge.
	NewsArticlesTable = "news_articles"
	// NewsArticlesInverseTable is the table name for the NewsArticle entity.
	// It exists in this package in order to avoid circular dependency with the "newsarticle" package.
	NewsArticlesInverseTable = "news_articles"
	// NewsArticlesColumn is the table column denoting the news_articles relation/edge.
	NewsArticlesColumn = "user_news_articles"
	// CreatedEventsTable is the table that holds the created_events relation/edge.
	CreatedEventsTable = "events"
	// CreatedEventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	CreatedEventsInverseTable = "events"
	// CreatedEventsColumn is the table column denoting the created_events relation/edge.
	CreatedEventsColumn = "user_created_events"
	// EventRegistrationsTable is the table that holds the event_registrations relation/edge.
	EventRegistrationsTable = "event_registrations"
	// EventRegistrationsInverseTable is the table name for the EventRegistration entity.
	// It exists in this package in order to avoid circular dependency with the "eventregistration" package.
	EventRegistrationsInverseTable = "event_registrations"
	// EventRegistrationsColumn is the table column denoting the event_registrations relation/edge.
	EventRegistrationsColumn = "user_event_registrations"
	// MessagesSentTable is the table that holds the messages_sent relation/edge.
	MessagesSentTable = "messages"
	// MessagesSentInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesSentInverseTable = "messages"
	// MessagesSentColumn is the table column denoting the messages_sent relation/edge.
	MessagesSentColumn = "user_messages_sent"
	// ConversationLinksTable is the table that holds the conversation_links relation/edge.
	ConversationLinksTable = "conversation_participants"
	// ConversationLinksInverseTable is the table name for the ConversationParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "conversationparticipant" package.
	ConversationLinksInverseTable = "conversation_participants"
	// ConversationLinksColumn is the table column denoting the conversation_links relation/edge.
	ConversationLinksColumn = "user_conversation_links"
	// VolunteerApplicationsTable is the table that holds the volunteer_applications relation/edge.
	VolunteerApplicationsTable = "volunteer_applications"
	// VolunteerApplicationsInverseTable is the table name for the VolunteerApplication entity.
	// It exists in this package in order to avoid circular dependency with the "volunteerapplication" package.
	VolunteerApplicationsInverseTable = "volunteer_applications"
	// VolunteerApplicationsColumn is the table column denoting the volunteer_applications relation/edge.
	VolunteerApplicationsColumn = "user_volunteer_applications"
	// MentorshipRequestsTable is the table that holds the mentorship_requests relation/edge.
	MentorshipRequestsTable = "mentorship_requests"
	// MentorshipRequestsInverseTable is the table name for the MentorshipRequest entity.
	// It exists in this package in order to avoid circular dependency with the "mentorshiprequest" package.
	MentorshipRequestsInverseTable = "mentorship_requests"
	// MentorshipRequestsColumn is the table column denoting the mentorship_requests relation/edge.
	MentorshipRequestsColumn = "user_mentorship_requests"
	// MentorshipsMentoringTable is the table that holds the mentorships_mentoring relation/edge.
	MentorshipsMentoringTable = "mentorship_requests"
	// MentorshipsMentoringInverseTable is the table name for the MentorshipRequest entity.
	// It exists in this package in order to avoid circular dependency with the "mentorshiprequest" package.
	MentorshipsMentoringInverseTable = "mentorship_requests"
	// MentorshipsMentoringColumn is the table column denoting the mentorships_mentoring relation/edge.
	MentorshipsMentoringColumn = "user_mentorships_mentoring"
	// AchievementsTable is the table that holds the achievements relation/edge.
	AchievementsTable = "user_achievements"
	// AchievementsInverseTable is the table name for the UserAchievement entity.
	// It exists in this package in order to avoid circular dependency with the "userachievement" package.
	AchievementsInverseTable = "user_achievements"
	// AchievementsColumn is the table column denoting the achievements relation/edge.
	AchievementsColumn = "user_achievements"
	// DonationsTable is the table that holds the donations relation/edge.
	DonationsTable = "donations"
	// DonationsInverseTable is the table name for the Donation entity.
	// It exists in this package in order to avoid circular dependency with the "donation" package.
	DonationsInverseTable = "donations"
	// DonationsColumn is the table column denoting the donations relation/edge.
	DonationsColumn = "user_donations"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "organizations"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "user_organization"
	// ManagedPartnershipsTable is the table that holds the managed_partnerships relation/edge.
	ManagedPartnershipsTable = "partnerships"
	// ManagedPartnershipsInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	ManagedPartnershipsInverseTable = "partnerships"
	// ManagedPartnershipsColumn is the table column denoting the managed_partnerships relation/edge.
	ManagedPartnershipsColumn = "user_managed_partnerships"
	// PartnershipContactsTable is the table that holds the partnership_contacts relation/edge. The primary key declared below.
	PartnershipContactsTable = "user_partnership_contacts"
	// PartnershipContactsInverseTable is the table name for the Partnership entity.
	// It exists in this package in order to avoid circular dependency with the "partnership" package.
	PartnershipContactsInverseTable = "partnerships"
	// SiteVisitsTable is the table that holds the site_visits relation/edge.
	SiteVisitsTable = "site_visits"
	// SiteVisitsInverseTable is the table name for the SiteVisit entity.
	// It exists in this package in order to avoid circular dependency with the "sitevisit" package.
	SiteVisitsInverseTable = "site_visits"
	// SiteVisitsColumn is the table column denoting the site_visits relation/edge.
	SiteVisitsColumn = "user_site_visits"
	// DocumentUploadsTable is the table that holds the document_uploads relation/edge.
	DocumentUploadsTable = "documents"
	// DocumentUploadsInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentUploadsInverseTable = "documents"
	// DocumentUploadsColumn is the table column denoting the document_uploads relation/edge.
	DocumentUploadsColumn = "user_document_uploads"
	// ActivityLogsTable is the table that holds the activity_logs relation/edge.
	ActivityLogsTable = "activity_logs"
	// ActivityLogsInverseTable is the table name for the ActivityLog entity.
	// It exists in this package in order to avoid circular dependency with the "activitylog" package.
	ActivityLogsInverseTable = "activity_logs"
	// ActivityLogsColumn is the table column denoting the activity_logs relation/edge.
	ActivityLogsColumn = "user_activity_logs"
	// ConsentsTable is the table that holds the consents relation/edge.
	ConsentsTable = "user_consents"
	// ConsentsInverseTable is the table name for the UserConsent entity.
	// It exists in this package in order to avoid circular dependency with the "userconsent" package.
	ConsentsInverseTable = "user_consents"
	// ConsentsColumn is the table column denoting the consents relation/edge.
	ConsentsColumn = "user_consents"
	// OnboardingTable is the table that holds the onboarding relation/edge.
	OnboardingTable = "user_onboardings"
	// OnboardingInverseTable is the table name for the UserOnboarding entity.
	// It exists in this package in order to avoid circular dependency with the "useronboarding" package.
	OnboardingInverseTable = "user_onboardings"
	// OnboardingColumn is the table column denoting the onboarding relation/edge.
	OnboardingColumn = "user_onboarding"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldUsername,
	FieldHashedPassword,
	FieldIsVerified,
	FieldEmailVerified,
	FieldLastLoginAt,
	FieldIsActive,
	FieldDeactivatedAt,
	FieldLockedUntil,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldImpersonatingUserID,
	FieldSecurityTimestamp,
	FieldPasswordResetRequired,
	FieldRoles,
	FieldMfaSecret,
	FieldMfaEnabled,
	FieldOnboardingStartedAt,
	FieldOnboardingCompletedAt,
	FieldOnboardingSkipped,
	FieldOnboardingVersion,
	FieldOnboardingCompleted,
	FieldPosition,
	FieldAnalyticsProperties,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_team_member",
}

var (
	// PartnershipContactsPrimaryKey and PartnershipContactsColumn2 are the table columns denoting the
	// primary key for the partnership_contacts relation (M2M).
	PartnershipContactsPrimaryKey = []string{"user_id", "partnership_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsVerified holds the default value on creation for the "is_verified" field.
	DefaultIsVerified bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSecurityTimestamp holds the default value on creation for the "security_timestamp" field.
	DefaultSecurityTimestamp func() time.Time
	// DefaultPasswordResetRequired holds the default value on creation for the "password_reset_required" field.
	DefaultPasswordResetRequired bool
	// DefaultMfaEnabled holds the default value on creation for the "mfa_enabled" field.
	DefaultMfaEnabled bool
	// DefaultOnboardingSkipped holds the default value on creation for the "onboarding_skipped" field.
	DefaultOnboardingSkipped bool
	// DefaultOnboardingCompleted holds the default value on creation for the "onboarding_completed" field.
	DefaultOnboardingCompleted bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByHashedPassword orders the results by the hashed_password field.
func ByHashedPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashedPassword, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByDeactivatedAt orders the results by the deactivated_at field.
func ByDeactivatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeactivatedAt, opts...).ToFunc()
}

// ByLockedUntil orders the results by the locked_until field.
func ByLockedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedUntil, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByImpersonatingUserID orders the results by the impersonating_user_id field.
func ByImpersonatingUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpersonatingUserID, opts...).ToFunc()
}

// BySecurityTimestamp orders the results by the security_timestamp field.
func BySecurityTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityTimestamp, opts...).ToFunc()
}

// ByPasswordResetRequired orders the results by the password_reset_required field.
func ByPasswordResetRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordResetRequired, opts...).ToFunc()
}

// ByMfaSecret orders the results by the mfa_secret field.
func ByMfaSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaSecret, opts...).ToFunc()
}

// ByMfaEnabled orders the results by the mfa_enabled field.
func ByMfaEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaEnabled, opts...).ToFunc()
}

// ByOnboardingStartedAt orders the results by the onboarding_started_at field.
func ByOnboardingStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnboardingStartedAt, opts...).ToFunc()
}

// ByOnboardingCompletedAt orders the results by the onboarding_completed_at field.
func ByOnboardingCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnboardingCompletedAt, opts...).ToFunc()
}

// ByOnboardingSkipped orders the results by the onboarding_skipped field.
func ByOnboardingSkipped(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnboardingSkipped, opts...).ToFunc()
}

// ByOnboardingVersion orders the results by the onboarding_version field.
func ByOnboardingVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnboardingVersion, opts...).ToFunc()
}

// ByOnboardingCompleted orders the results by the onboarding_completed field.
func ByOnboardingCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnboardingCompleted, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrustedDevicesCount orders the results by trusted_devices count.
func ByTrustedDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrustedDevicesStep(), opts...)
	}
}

// ByTrustedDevices orders the results by trusted_devices terms.
func ByTrustedDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustedDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPasswordHistoryCount orders the results by password_history count.
func ByPasswordHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasswordHistoryStep(), opts...)
	}
}

// ByPasswordHistory orders the results by password_history terms.
func ByPasswordHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasswordHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeamMemberField orders the results by team_member field.
func ByTeamMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDashboardsCount orders the results by dashboards count.
func ByDashboardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDashboardsStep(), opts...)
	}
}

// ByDashboards orders the results by dashboards terms.
func ByDashboards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDashboardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnalyticsEventsCount orders the results by analytics_events count.
func ByAnalyticsEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnalyticsEventsStep(), opts...)
	}
}

// ByAnalyticsEvents orders the results by analytics_events terms.
func ByAnalyticsEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnalyticsEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedReportsCount orders the results by created_reports count.
func ByCreatedReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedReportsStep(), opts...)
	}
}

// ByCreatedReports orders the results by created_reports terms.
func ByCreatedReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGeneratedReportsCount orders the results by generated_reports count.
func ByGeneratedReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGeneratedReportsStep(), opts...)
	}
}

// ByGeneratedReports orders the results by generated_reports terms.
func ByGeneratedReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneratedReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReportPermissionsCount orders the results by report_permissions count.
func ByReportPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportPermissionsStep(), opts...)
	}
}

// ByReportPermissions orders the results by report_permissions terms.
func ByReportPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduledReportsCount orders the results by scheduled_reports count.
func ByScheduledReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheduledReportsStep(), opts...)
	}
}

// ByScheduledReports orders the results by scheduled_reports terms.
func ByScheduledReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedProgramsCount orders the results by created_programs count.
func ByCreatedProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedProgramsStep(), opts...)
	}
}

// ByCreatedPrograms orders the results by created_programs terms.
func ByCreatedPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUpdatedProgramsCount orders the results by updated_programs count.
func ByUpdatedProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUpdatedProgramsStep(), opts...)
	}
}

// ByUpdatedPrograms orders the results by updated_programs terms.
func ByUpdatedPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramEnrolmentsCount orders the results by program_enrolments count.
func ByProgramEnrolmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramEnrolmentsStep(), opts...)
	}
}

// ByProgramEnrolments orders the results by program_enrolments terms.
func ByProgramEnrolments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramEnrolmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParticipantInCount orders the results by participant_in count.
func ByParticipantInCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParticipantInStep(), opts...)
	}
}

// ByParticipantIn orders the results by participant_in terms.
func ByParticipantIn(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParticipantInStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySuccessStoriesCount orders the results by success_stories count.
func BySuccessStoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuccessStoriesStep(), opts...)
	}
}

// BySuccessStories orders the results by success_stories terms.
func BySuccessStories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuccessStoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNewsArticlesCount orders the results by news_articles count.
func ByNewsArticlesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNewsArticlesStep(), opts...)
	}
}

// ByNewsArticles orders the results by news_articles terms.
func ByNewsArticles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNewsArticlesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedEventsCount orders the results by created_events count.
func ByCreatedEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedEventsStep(), opts...)
	}
}

// ByCreatedEvents orders the results by created_events terms.
func ByCreatedEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventRegistrationsCount orders the results by event_registrations count.
func ByEventRegistrationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventRegistrationsStep(), opts...)
	}
}

// ByEventRegistrations orders the results by event_registrations terms.
func ByEventRegistrations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventRegistrationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagesSentCount orders the results by messages_sent count.
func ByMessagesSentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesSentStep(), opts...)
	}
}

// ByMessagesSent orders the results by messages_sent terms.
func ByMessagesSent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesSentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConversationLinksCount orders the results by conversation_links count.
func ByConversationLinksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConversationLinksStep(), opts...)
	}
}

// ByConversationLinks orders the results by conversation_links terms.
func ByConversationLinks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationLinksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVolunteerApplicationsCount orders the results by volunteer_applications count.
func ByVolunteerApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVolunteerApplicationsStep(), opts...)
	}
}

// ByVolunteerApplications orders the results by volunteer_applications terms.
func ByVolunteerApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMentorshipRequestsCount orders the results by mentorship_requests count.
func ByMentorshipRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMentorshipRequestsStep(), opts...)
	}
}

// ByMentorshipRequests orders the results by mentorship_requests terms.
func ByMentorshipRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorshipRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMentorshipsMentoringCount orders the results by mentorships_mentoring count.
func ByMentorshipsMentoringCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMentorshipsMentoringStep(), opts...)
	}
}

// ByMentorshipsMentoring orders the results by mentorships_mentoring terms.
func ByMentorshipsMentoring(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMentorshipsMentoringStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAchievementsCount orders the results by achievements count.
func ByAchievementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAchievementsStep(), opts...)
	}
}

// ByAchievements orders the results by achievements terms.
func ByAchievements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAchievementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDonationsCount orders the results by donations count.
func ByDonationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDonationsStep(), opts...)
	}
}

// ByDonations orders the results by donations terms.
func ByDonations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDonationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationCount orders the results by organization count.
func ByOrganizationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationStep(), opts...)
	}
}

// ByOrganization orders the results by organization terms.
func ByOrganization(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagedPartnershipsCount orders the results by managed_partnerships count.
func ByManagedPartnershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagedPartnershipsStep(), opts...)
	}
}

// ByManagedPartnerships orders the results by managed_partnerships terms.
func ByManagedPartnerships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagedPartnershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPartnershipContactsCount orders the results by partnership_contacts count.
func ByPartnershipContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnershipContactsStep(), opts...)
	}
}

// ByPartnershipContacts orders the results by partnership_contacts terms.
func ByPartnershipContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnershipContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySiteVisitsCount orders the results by site_visits count.
func BySiteVisitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSiteVisitsStep(), opts...)
	}
}

// BySiteVisits orders the results by site_visits terms.
func BySiteVisits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteVisitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentUploadsCount orders the results by document_uploads count.
func ByDocumentUploadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentUploadsStep(), opts...)
	}
}

// ByDocumentUploads orders the results by document_uploads terms.
func ByDocumentUploads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentUploadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActivityLogsCount orders the results by activity_logs count.
func ByActivityLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActivityLogsStep(), opts...)
	}
}

// ByActivityLogs orders the results by activity_logs terms.
func ByActivityLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActivityLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConsentsField orders the results by consents field.
func ByConsentsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsentsStep(), sql.OrderByField(field, opts...))
	}
}

// ByOnboardingField orders the results by onboarding field.
func ByOnboardingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOnboardingStep(), sql.OrderByField(field, opts...))
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProfileTable, ProfileColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
func newTrustedDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustedDevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrustedDevicesTable, TrustedDevicesColumn),
	)
}
func newPasswordHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasswordHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasswordHistoryTable, PasswordHistoryColumn),
	)
}
func newTeamMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TeamMemberTable, TeamMemberColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
func newDashboardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DashboardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DashboardsTable, DashboardsColumn),
	)
}
func newAnalyticsEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnalyticsEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnalyticsEventsTable, AnalyticsEventsColumn),
	)
}
func newCreatedReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedReportsTable, CreatedReportsColumn),
	)
}
func newGeneratedReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneratedReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GeneratedReportsTable, GeneratedReportsColumn),
	)
}
func newReportPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportPermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReportPermissionsTable, ReportPermissionsColumn),
	)
}
func newScheduledReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheduledReportsTable, ScheduledReportsColumn),
	)
}
func newCreatedProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedProgramsTable, CreatedProgramsColumn),
	)
}
func newUpdatedProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UpdatedProgramsTable, UpdatedProgramsColumn),
	)
}
func newProgramEnrolmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramEnrolmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgramEnrolmentsTable, ProgramEnrolmentsColumn),
	)
}
func newParticipantInStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParticipantInInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ParticipantInTable, ParticipantInColumn),
	)
}
func newSuccessStoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuccessStoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuccessStoriesTable, SuccessStoriesColumn),
	)
}
func newNewsArticlesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NewsArticlesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NewsArticlesTable, NewsArticlesColumn),
	)
}
func newCreatedEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedEventsTable, CreatedEventsColumn),
	)
}
func newEventRegistrationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventRegistrationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventRegistrationsTable, EventRegistrationsColumn),
	)
}
func newMessagesSentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesSentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesSentTable, MessagesSentColumn),
	)
}
func newConversationLinksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationLinksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConversationLinksTable, ConversationLinksColumn),
	)
}
func newVolunteerApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VolunteerApplicationsTable, VolunteerApplicationsColumn),
	)
}
func newMentorshipRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorshipRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MentorshipRequestsTable, MentorshipRequestsColumn),
	)
}
func newMentorshipsMentoringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MentorshipsMentoringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MentorshipsMentoringTable, MentorshipsMentoringColumn),
	)
}
func newAchievementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AchievementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AchievementsTable, AchievementsColumn),
	)
}
func newDonationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DonationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrganizationTable, OrganizationColumn),
	)
}
func newManagedPartnershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagedPartnershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ManagedPartnershipsTable, ManagedPartnershipsColumn),
	)
}
func newPartnershipContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnershipContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PartnershipContactsTable, PartnershipContactsPrimaryKey...),
	)
}
func newSiteVisitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteVisitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SiteVisitsTable, SiteVisitsColumn),
	)
}
func newDocumentUploadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentUploadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentUploadsTable, DocumentUploadsColumn),
	)
}
func newActivityLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActivityLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActivityLogsTable, ActivityLogsColumn),
	)
}
func newConsentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ConsentsTable, ConsentsColumn),
	)
}
func newOnboardingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OnboardingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OnboardingTable, OnboardingColumn),
	)
}
