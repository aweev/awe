// Code generated by ent, DO NOT EDIT.

package user

import (
	"awe/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// HashedPassword applies equality check predicate on the "hashed_password" field. It's identical to HashedPasswordEQ.
func HashedPassword(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// IsVerified applies equality check predicate on the "is_verified" field. It's identical to IsVerifiedEQ.
func IsVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// DeactivatedAt applies equality check predicate on the "deactivated_at" field. It's identical to DeactivatedAtEQ.
func DeactivatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeactivatedAt, v))
}

// LockedUntil applies equality check predicate on the "locked_until" field. It's identical to LockedUntilEQ.
func LockedUntil(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedUntil, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// ImpersonatingUserID applies equality check predicate on the "impersonating_user_id" field. It's identical to ImpersonatingUserIDEQ.
func ImpersonatingUserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImpersonatingUserID, v))
}

// SecurityTimestamp applies equality check predicate on the "security_timestamp" field. It's identical to SecurityTimestampEQ.
func SecurityTimestamp(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecurityTimestamp, v))
}

// PasswordResetRequired applies equality check predicate on the "password_reset_required" field. It's identical to PasswordResetRequiredEQ.
func PasswordResetRequired(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetRequired, v))
}

// MfaSecret applies equality check predicate on the "mfa_secret" field. It's identical to MfaSecretEQ.
func MfaSecret(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMfaSecret, v))
}

// MfaEnabled applies equality check predicate on the "mfa_enabled" field. It's identical to MfaEnabledEQ.
func MfaEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMfaEnabled, v))
}

// OnboardingStartedAt applies equality check predicate on the "onboarding_started_at" field. It's identical to OnboardingStartedAtEQ.
func OnboardingStartedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingStartedAt, v))
}

// OnboardingCompletedAt applies equality check predicate on the "onboarding_completed_at" field. It's identical to OnboardingCompletedAtEQ.
func OnboardingCompletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingCompletedAt, v))
}

// OnboardingSkipped applies equality check predicate on the "onboarding_skipped" field. It's identical to OnboardingSkippedEQ.
func OnboardingSkipped(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingSkipped, v))
}

// OnboardingVersion applies equality check predicate on the "onboarding_version" field. It's identical to OnboardingVersionEQ.
func OnboardingVersion(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingVersion, v))
}

// OnboardingCompleted applies equality check predicate on the "onboarding_completed" field. It's identical to OnboardingCompletedEQ.
func OnboardingCompleted(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingCompleted, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPosition, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// HashedPasswordEQ applies the EQ predicate on the "hashed_password" field.
func HashedPasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashedPassword, v))
}

// HashedPasswordNEQ applies the NEQ predicate on the "hashed_password" field.
func HashedPasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHashedPassword, v))
}

// HashedPasswordIn applies the In predicate on the "hashed_password" field.
func HashedPasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHashedPassword, vs...))
}

// HashedPasswordNotIn applies the NotIn predicate on the "hashed_password" field.
func HashedPasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHashedPassword, vs...))
}

// HashedPasswordGT applies the GT predicate on the "hashed_password" field.
func HashedPasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHashedPassword, v))
}

// HashedPasswordGTE applies the GTE predicate on the "hashed_password" field.
func HashedPasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHashedPassword, v))
}

// HashedPasswordLT applies the LT predicate on the "hashed_password" field.
func HashedPasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHashedPassword, v))
}

// HashedPasswordLTE applies the LTE predicate on the "hashed_password" field.
func HashedPasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHashedPassword, v))
}

// HashedPasswordContains applies the Contains predicate on the "hashed_password" field.
func HashedPasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHashedPassword, v))
}

// HashedPasswordHasPrefix applies the HasPrefix predicate on the "hashed_password" field.
func HashedPasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHashedPassword, v))
}

// HashedPasswordHasSuffix applies the HasSuffix predicate on the "hashed_password" field.
func HashedPasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHashedPassword, v))
}

// HashedPasswordIsNil applies the IsNil predicate on the "hashed_password" field.
func HashedPasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHashedPassword))
}

// HashedPasswordNotNil applies the NotNil predicate on the "hashed_password" field.
func HashedPasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHashedPassword))
}

// HashedPasswordEqualFold applies the EqualFold predicate on the "hashed_password" field.
func HashedPasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHashedPassword, v))
}

// HashedPasswordContainsFold applies the ContainsFold predicate on the "hashed_password" field.
func HashedPasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHashedPassword, v))
}

// IsVerifiedEQ applies the EQ predicate on the "is_verified" field.
func IsVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsVerified, v))
}

// IsVerifiedNEQ applies the NEQ predicate on the "is_verified" field.
func IsVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsVerified, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// EmailVerifiedIn applies the In predicate on the "email_verified" field.
func EmailVerifiedIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmailVerified, vs...))
}

// EmailVerifiedNotIn applies the NotIn predicate on the "email_verified" field.
func EmailVerifiedNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmailVerified, vs...))
}

// EmailVerifiedGT applies the GT predicate on the "email_verified" field.
func EmailVerifiedGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmailVerified, v))
}

// EmailVerifiedGTE applies the GTE predicate on the "email_verified" field.
func EmailVerifiedGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmailVerified, v))
}

// EmailVerifiedLT applies the LT predicate on the "email_verified" field.
func EmailVerifiedLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmailVerified, v))
}

// EmailVerifiedLTE applies the LTE predicate on the "email_verified" field.
func EmailVerifiedLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmailVerified, v))
}

// EmailVerifiedIsNil applies the IsNil predicate on the "email_verified" field.
func EmailVerifiedIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmailVerified))
}

// EmailVerifiedNotNil applies the NotNil predicate on the "email_verified" field.
func EmailVerifiedNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmailVerified))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// DeactivatedAtEQ applies the EQ predicate on the "deactivated_at" field.
func DeactivatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeactivatedAt, v))
}

// DeactivatedAtNEQ applies the NEQ predicate on the "deactivated_at" field.
func DeactivatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeactivatedAt, v))
}

// DeactivatedAtIn applies the In predicate on the "deactivated_at" field.
func DeactivatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeactivatedAt, vs...))
}

// DeactivatedAtNotIn applies the NotIn predicate on the "deactivated_at" field.
func DeactivatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeactivatedAt, vs...))
}

// DeactivatedAtGT applies the GT predicate on the "deactivated_at" field.
func DeactivatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeactivatedAt, v))
}

// DeactivatedAtGTE applies the GTE predicate on the "deactivated_at" field.
func DeactivatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeactivatedAt, v))
}

// DeactivatedAtLT applies the LT predicate on the "deactivated_at" field.
func DeactivatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeactivatedAt, v))
}

// DeactivatedAtLTE applies the LTE predicate on the "deactivated_at" field.
func DeactivatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeactivatedAt, v))
}

// DeactivatedAtIsNil applies the IsNil predicate on the "deactivated_at" field.
func DeactivatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeactivatedAt))
}

// DeactivatedAtNotNil applies the NotNil predicate on the "deactivated_at" field.
func DeactivatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeactivatedAt))
}

// LockedUntilEQ applies the EQ predicate on the "locked_until" field.
func LockedUntilEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockedUntil, v))
}

// LockedUntilNEQ applies the NEQ predicate on the "locked_until" field.
func LockedUntilNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockedUntil, v))
}

// LockedUntilIn applies the In predicate on the "locked_until" field.
func LockedUntilIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLockedUntil, vs...))
}

// LockedUntilNotIn applies the NotIn predicate on the "locked_until" field.
func LockedUntilNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLockedUntil, vs...))
}

// LockedUntilGT applies the GT predicate on the "locked_until" field.
func LockedUntilGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLockedUntil, v))
}

// LockedUntilGTE applies the GTE predicate on the "locked_until" field.
func LockedUntilGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLockedUntil, v))
}

// LockedUntilLT applies the LT predicate on the "locked_until" field.
func LockedUntilLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLockedUntil, v))
}

// LockedUntilLTE applies the LTE predicate on the "locked_until" field.
func LockedUntilLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLockedUntil, v))
}

// LockedUntilIsNil applies the IsNil predicate on the "locked_until" field.
func LockedUntilIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLockedUntil))
}

// LockedUntilNotNil applies the NotNil predicate on the "locked_until" field.
func LockedUntilNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLockedUntil))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// ImpersonatingUserIDEQ applies the EQ predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDNEQ applies the NEQ predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDIn applies the In predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldImpersonatingUserID, vs...))
}

// ImpersonatingUserIDNotIn applies the NotIn predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldImpersonatingUserID, vs...))
}

// ImpersonatingUserIDGT applies the GT predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDGTE applies the GTE predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDLT applies the LT predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDLTE applies the LTE predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDContains applies the Contains predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDHasPrefix applies the HasPrefix predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDHasSuffix applies the HasSuffix predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDIsNil applies the IsNil predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldImpersonatingUserID))
}

// ImpersonatingUserIDNotNil applies the NotNil predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldImpersonatingUserID))
}

// ImpersonatingUserIDEqualFold applies the EqualFold predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldImpersonatingUserID, v))
}

// ImpersonatingUserIDContainsFold applies the ContainsFold predicate on the "impersonating_user_id" field.
func ImpersonatingUserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldImpersonatingUserID, v))
}

// SecurityTimestampEQ applies the EQ predicate on the "security_timestamp" field.
func SecurityTimestampEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSecurityTimestamp, v))
}

// SecurityTimestampNEQ applies the NEQ predicate on the "security_timestamp" field.
func SecurityTimestampNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSecurityTimestamp, v))
}

// SecurityTimestampIn applies the In predicate on the "security_timestamp" field.
func SecurityTimestampIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldSecurityTimestamp, vs...))
}

// SecurityTimestampNotIn applies the NotIn predicate on the "security_timestamp" field.
func SecurityTimestampNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSecurityTimestamp, vs...))
}

// SecurityTimestampGT applies the GT predicate on the "security_timestamp" field.
func SecurityTimestampGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldSecurityTimestamp, v))
}

// SecurityTimestampGTE applies the GTE predicate on the "security_timestamp" field.
func SecurityTimestampGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSecurityTimestamp, v))
}

// SecurityTimestampLT applies the LT predicate on the "security_timestamp" field.
func SecurityTimestampLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldSecurityTimestamp, v))
}

// SecurityTimestampLTE applies the LTE predicate on the "security_timestamp" field.
func SecurityTimestampLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSecurityTimestamp, v))
}

// PasswordResetRequiredEQ applies the EQ predicate on the "password_reset_required" field.
func PasswordResetRequiredEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordResetRequired, v))
}

// PasswordResetRequiredNEQ applies the NEQ predicate on the "password_reset_required" field.
func PasswordResetRequiredNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordResetRequired, v))
}

// MfaSecretEQ applies the EQ predicate on the "mfa_secret" field.
func MfaSecretEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMfaSecret, v))
}

// MfaSecretNEQ applies the NEQ predicate on the "mfa_secret" field.
func MfaSecretNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMfaSecret, v))
}

// MfaSecretIn applies the In predicate on the "mfa_secret" field.
func MfaSecretIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldMfaSecret, vs...))
}

// MfaSecretNotIn applies the NotIn predicate on the "mfa_secret" field.
func MfaSecretNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMfaSecret, vs...))
}

// MfaSecretGT applies the GT predicate on the "mfa_secret" field.
func MfaSecretGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldMfaSecret, v))
}

// MfaSecretGTE applies the GTE predicate on the "mfa_secret" field.
func MfaSecretGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldMfaSecret, v))
}

// MfaSecretLT applies the LT predicate on the "mfa_secret" field.
func MfaSecretLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldMfaSecret, v))
}

// MfaSecretLTE applies the LTE predicate on the "mfa_secret" field.
func MfaSecretLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldMfaSecret, v))
}

// MfaSecretContains applies the Contains predicate on the "mfa_secret" field.
func MfaSecretContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldMfaSecret, v))
}

// MfaSecretHasPrefix applies the HasPrefix predicate on the "mfa_secret" field.
func MfaSecretHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldMfaSecret, v))
}

// MfaSecretHasSuffix applies the HasSuffix predicate on the "mfa_secret" field.
func MfaSecretHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldMfaSecret, v))
}

// MfaSecretIsNil applies the IsNil predicate on the "mfa_secret" field.
func MfaSecretIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldMfaSecret))
}

// MfaSecretNotNil applies the NotNil predicate on the "mfa_secret" field.
func MfaSecretNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldMfaSecret))
}

// MfaSecretEqualFold applies the EqualFold predicate on the "mfa_secret" field.
func MfaSecretEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldMfaSecret, v))
}

// MfaSecretContainsFold applies the ContainsFold predicate on the "mfa_secret" field.
func MfaSecretContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldMfaSecret, v))
}

// MfaEnabledEQ applies the EQ predicate on the "mfa_enabled" field.
func MfaEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMfaEnabled, v))
}

// MfaEnabledNEQ applies the NEQ predicate on the "mfa_enabled" field.
func MfaEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMfaEnabled, v))
}

// OnboardingStartedAtEQ applies the EQ predicate on the "onboarding_started_at" field.
func OnboardingStartedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtNEQ applies the NEQ predicate on the "onboarding_started_at" field.
func OnboardingStartedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtIn applies the In predicate on the "onboarding_started_at" field.
func OnboardingStartedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldOnboardingStartedAt, vs...))
}

// OnboardingStartedAtNotIn applies the NotIn predicate on the "onboarding_started_at" field.
func OnboardingStartedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOnboardingStartedAt, vs...))
}

// OnboardingStartedAtGT applies the GT predicate on the "onboarding_started_at" field.
func OnboardingStartedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtGTE applies the GTE predicate on the "onboarding_started_at" field.
func OnboardingStartedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtLT applies the LT predicate on the "onboarding_started_at" field.
func OnboardingStartedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtLTE applies the LTE predicate on the "onboarding_started_at" field.
func OnboardingStartedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOnboardingStartedAt, v))
}

// OnboardingStartedAtIsNil applies the IsNil predicate on the "onboarding_started_at" field.
func OnboardingStartedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOnboardingStartedAt))
}

// OnboardingStartedAtNotNil applies the NotNil predicate on the "onboarding_started_at" field.
func OnboardingStartedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOnboardingStartedAt))
}

// OnboardingCompletedAtEQ applies the EQ predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtNEQ applies the NEQ predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtIn applies the In predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldOnboardingCompletedAt, vs...))
}

// OnboardingCompletedAtNotIn applies the NotIn predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOnboardingCompletedAt, vs...))
}

// OnboardingCompletedAtGT applies the GT predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtGTE applies the GTE predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtLT applies the LT predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtLTE applies the LTE predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOnboardingCompletedAt, v))
}

// OnboardingCompletedAtIsNil applies the IsNil predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOnboardingCompletedAt))
}

// OnboardingCompletedAtNotNil applies the NotNil predicate on the "onboarding_completed_at" field.
func OnboardingCompletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOnboardingCompletedAt))
}

// OnboardingSkippedEQ applies the EQ predicate on the "onboarding_skipped" field.
func OnboardingSkippedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingSkipped, v))
}

// OnboardingSkippedNEQ applies the NEQ predicate on the "onboarding_skipped" field.
func OnboardingSkippedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnboardingSkipped, v))
}

// OnboardingVersionEQ applies the EQ predicate on the "onboarding_version" field.
func OnboardingVersionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingVersion, v))
}

// OnboardingVersionNEQ applies the NEQ predicate on the "onboarding_version" field.
func OnboardingVersionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnboardingVersion, v))
}

// OnboardingVersionIn applies the In predicate on the "onboarding_version" field.
func OnboardingVersionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOnboardingVersion, vs...))
}

// OnboardingVersionNotIn applies the NotIn predicate on the "onboarding_version" field.
func OnboardingVersionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOnboardingVersion, vs...))
}

// OnboardingVersionGT applies the GT predicate on the "onboarding_version" field.
func OnboardingVersionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOnboardingVersion, v))
}

// OnboardingVersionGTE applies the GTE predicate on the "onboarding_version" field.
func OnboardingVersionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOnboardingVersion, v))
}

// OnboardingVersionLT applies the LT predicate on the "onboarding_version" field.
func OnboardingVersionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOnboardingVersion, v))
}

// OnboardingVersionLTE applies the LTE predicate on the "onboarding_version" field.
func OnboardingVersionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOnboardingVersion, v))
}

// OnboardingVersionContains applies the Contains predicate on the "onboarding_version" field.
func OnboardingVersionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOnboardingVersion, v))
}

// OnboardingVersionHasPrefix applies the HasPrefix predicate on the "onboarding_version" field.
func OnboardingVersionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOnboardingVersion, v))
}

// OnboardingVersionHasSuffix applies the HasSuffix predicate on the "onboarding_version" field.
func OnboardingVersionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOnboardingVersion, v))
}

// OnboardingVersionIsNil applies the IsNil predicate on the "onboarding_version" field.
func OnboardingVersionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOnboardingVersion))
}

// OnboardingVersionNotNil applies the NotNil predicate on the "onboarding_version" field.
func OnboardingVersionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOnboardingVersion))
}

// OnboardingVersionEqualFold applies the EqualFold predicate on the "onboarding_version" field.
func OnboardingVersionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOnboardingVersion, v))
}

// OnboardingVersionContainsFold applies the ContainsFold predicate on the "onboarding_version" field.
func OnboardingVersionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOnboardingVersion, v))
}

// OnboardingCompletedEQ applies the EQ predicate on the "onboarding_completed" field.
func OnboardingCompletedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOnboardingCompleted, v))
}

// OnboardingCompletedNEQ applies the NEQ predicate on the "onboarding_completed" field.
func OnboardingCompletedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOnboardingCompleted, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "position" field.
func PositionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "position" field.
func PositionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPosition, v))
}

// AnalyticsPropertiesIsNil applies the IsNil predicate on the "analytics_properties" field.
func AnalyticsPropertiesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAnalyticsProperties))
}

// AnalyticsPropertiesNotNil applies the NotNil predicate on the "analytics_properties" field.
func AnalyticsPropertiesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAnalyticsProperties))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.UserProfile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.UserSession) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrustedDevices applies the HasEdge predicate on the "trusted_devices" edge.
func HasTrustedDevices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TrustedDevicesTable, TrustedDevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrustedDevicesWith applies the HasEdge predicate on the "trusted_devices" edge with a given conditions (other predicates).
func HasTrustedDevicesWith(preds ...predicate.TrustedDevice) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTrustedDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPasswordHistory applies the HasEdge predicate on the "password_history" edge.
func HasPasswordHistory() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PasswordHistoryTable, PasswordHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPasswordHistoryWith applies the HasEdge predicate on the "password_history" edge with a given conditions (other predicates).
func HasPasswordHistoryWith(preds ...predicate.PasswordHistory) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPasswordHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamMember applies the HasEdge predicate on the "team_member" edge.
func HasTeamMember() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TeamMemberTable, TeamMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamMemberWith applies the HasEdge predicate on the "team_member" edge with a given conditions (other predicates).
func HasTeamMemberWith(preds ...predicate.TeamMember) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTeamMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.AuditLog) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.Job) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDashboards applies the HasEdge predicate on the "dashboards" edge.
func HasDashboards() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DashboardsTable, DashboardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDashboardsWith applies the HasEdge predicate on the "dashboards" edge with a given conditions (other predicates).
func HasDashboardsWith(preds ...predicate.AnalyticsDashboard) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDashboardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnalyticsEvents applies the HasEdge predicate on the "analytics_events" edge.
func HasAnalyticsEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnalyticsEventsTable, AnalyticsEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnalyticsEventsWith applies the HasEdge predicate on the "analytics_events" edge with a given conditions (other predicates).
func HasAnalyticsEventsWith(preds ...predicate.AnalyticsEvent) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAnalyticsEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedReports applies the HasEdge predicate on the "created_reports" edge.
func HasCreatedReports() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedReportsTable, CreatedReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedReportsWith applies the HasEdge predicate on the "created_reports" edge with a given conditions (other predicates).
func HasCreatedReportsWith(preds ...predicate.ReportDefinition) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGeneratedReports applies the HasEdge predicate on the "generated_reports" edge.
func HasGeneratedReports() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GeneratedReportsTable, GeneratedReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeneratedReportsWith applies the HasEdge predicate on the "generated_reports" edge with a given conditions (other predicates).
func HasGeneratedReportsWith(preds ...predicate.GeneratedReport) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGeneratedReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReportPermissions applies the HasEdge predicate on the "report_permissions" edge.
func HasReportPermissions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReportPermissionsTable, ReportPermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportPermissionsWith applies the HasEdge predicate on the "report_permissions" edge with a given conditions (other predicates).
func HasReportPermissionsWith(preds ...predicate.ReportPermission) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newReportPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduledReports applies the HasEdge predicate on the "scheduled_reports" edge.
func HasScheduledReports() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScheduledReportsTable, ScheduledReportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduledReportsWith applies the HasEdge predicate on the "scheduled_reports" edge with a given conditions (other predicates).
func HasScheduledReportsWith(preds ...predicate.ScheduledReport) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newScheduledReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedPrograms applies the HasEdge predicate on the "created_programs" edge.
func HasCreatedPrograms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedProgramsTable, CreatedProgramsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedProgramsWith applies the HasEdge predicate on the "created_programs" edge with a given conditions (other predicates).
func HasCreatedProgramsWith(preds ...predicate.Program) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedProgramsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedPrograms applies the HasEdge predicate on the "updated_programs" edge.
func HasUpdatedPrograms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UpdatedProgramsTable, UpdatedProgramsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedProgramsWith applies the HasEdge predicate on the "updated_programs" edge with a given conditions (other predicates).
func HasUpdatedProgramsWith(preds ...predicate.Program) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUpdatedProgramsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramEnrolments applies the HasEdge predicate on the "program_enrolments" edge.
func HasProgramEnrolments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgramEnrolmentsTable, ProgramEnrolmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramEnrolmentsWith applies the HasEdge predicate on the "program_enrolments" edge with a given conditions (other predicates).
func HasProgramEnrolmentsWith(preds ...predicate.ProgramEnrolment) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProgramEnrolmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipantIn applies the HasEdge predicate on the "participant_in" edge.
func HasParticipantIn() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantInTable, ParticipantInColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantInWith applies the HasEdge predicate on the "participant_in" edge with a given conditions (other predicates).
func HasParticipantInWith(preds ...predicate.ProgramParticipant) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newParticipantInStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuccessStories applies the HasEdge predicate on the "success_stories" edge.
func HasSuccessStories() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuccessStoriesTable, SuccessStoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuccessStoriesWith applies the HasEdge predicate on the "success_stories" edge with a given conditions (other predicates).
func HasSuccessStoriesWith(preds ...predicate.SuccessStory) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSuccessStoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNewsArticles applies the HasEdge predicate on the "news_articles" edge.
func HasNewsArticles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NewsArticlesTable, NewsArticlesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNewsArticlesWith applies the HasEdge predicate on the "news_articles" edge with a given conditions (other predicates).
func HasNewsArticlesWith(preds ...predicate.NewsArticle) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newNewsArticlesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedEvents applies the HasEdge predicate on the "created_events" edge.
func HasCreatedEvents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedEventsTable, CreatedEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedEventsWith applies the HasEdge predicate on the "created_events" edge with a given conditions (other predicates).
func HasCreatedEventsWith(preds ...predicate.Event) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCreatedEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventRegistrations applies the HasEdge predicate on the "event_registrations" edge.
func HasEventRegistrations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventRegistrationsTable, EventRegistrationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventRegistrationsWith applies the HasEdge predicate on the "event_registrations" edge with a given conditions (other predicates).
func HasEventRegistrationsWith(preds ...predicate.EventRegistration) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventRegistrationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessagesSent applies the HasEdge predicate on the "messages_sent" edge.
func HasMessagesSent() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesSentTable, MessagesSentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesSentWith applies the HasEdge predicate on the "messages_sent" edge with a given conditions (other predicates).
func HasMessagesSentWith(preds ...predicate.Message) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMessagesSentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConversationLinks applies the HasEdge predicate on the "conversation_links" edge.
func HasConversationLinks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConversationLinksTable, ConversationLinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationLinksWith applies the HasEdge predicate on the "conversation_links" edge with a given conditions (other predicates).
func HasConversationLinksWith(preds ...predicate.ConversationParticipant) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newConversationLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVolunteerApplications applies the HasEdge predicate on the "volunteer_applications" edge.
func HasVolunteerApplications() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VolunteerApplicationsTable, VolunteerApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolunteerApplicationsWith applies the HasEdge predicate on the "volunteer_applications" edge with a given conditions (other predicates).
func HasVolunteerApplicationsWith(preds ...predicate.VolunteerApplication) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newVolunteerApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentorshipRequests applies the HasEdge predicate on the "mentorship_requests" edge.
func HasMentorshipRequests() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MentorshipRequestsTable, MentorshipRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentorshipRequestsWith applies the HasEdge predicate on the "mentorship_requests" edge with a given conditions (other predicates).
func HasMentorshipRequestsWith(preds ...predicate.MentorshipRequest) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMentorshipRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMentorshipsMentoring applies the HasEdge predicate on the "mentorships_mentoring" edge.
func HasMentorshipsMentoring() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MentorshipsMentoringTable, MentorshipsMentoringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMentorshipsMentoringWith applies the HasEdge predicate on the "mentorships_mentoring" edge with a given conditions (other predicates).
func HasMentorshipsMentoringWith(preds ...predicate.MentorshipRequest) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMentorshipsMentoringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAchievements applies the HasEdge predicate on the "achievements" edge.
func HasAchievements() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AchievementsTable, AchievementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAchievementsWith applies the HasEdge predicate on the "achievements" edge with a given conditions (other predicates).
func HasAchievementsWith(preds ...predicate.UserAchievement) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newAchievementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDonations applies the HasEdge predicate on the "donations" edge.
func HasDonations() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DonationsTable, DonationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDonationsWith applies the HasEdge predicate on the "donations" edge with a given conditions (other predicates).
func HasDonationsWith(preds ...predicate.Donation) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDonationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManagedPartnerships applies the HasEdge predicate on the "managed_partnerships" edge.
func HasManagedPartnerships() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ManagedPartnershipsTable, ManagedPartnershipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagedPartnershipsWith applies the HasEdge predicate on the "managed_partnerships" edge with a given conditions (other predicates).
func HasManagedPartnershipsWith(preds ...predicate.Partnership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newManagedPartnershipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPartnershipContacts applies the HasEdge predicate on the "partnership_contacts" edge.
func HasPartnershipContacts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PartnershipContactsTable, PartnershipContactsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPartnershipContactsWith applies the HasEdge predicate on the "partnership_contacts" edge with a given conditions (other predicates).
func HasPartnershipContactsWith(preds ...predicate.Partnership) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPartnershipContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSiteVisits applies the HasEdge predicate on the "site_visits" edge.
func HasSiteVisits() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SiteVisitsTable, SiteVisitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteVisitsWith applies the HasEdge predicate on the "site_visits" edge with a given conditions (other predicates).
func HasSiteVisitsWith(preds ...predicate.SiteVisit) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSiteVisitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocumentUploads applies the HasEdge predicate on the "document_uploads" edge.
func HasDocumentUploads() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentUploadsTable, DocumentUploadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentUploadsWith applies the HasEdge predicate on the "document_uploads" edge with a given conditions (other predicates).
func HasDocumentUploadsWith(preds ...predicate.Document) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDocumentUploadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivityLogs applies the HasEdge predicate on the "activity_logs" edge.
func HasActivityLogs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivityLogsTable, ActivityLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityLogsWith applies the HasEdge predicate on the "activity_logs" edge with a given conditions (other predicates).
func HasActivityLogsWith(preds ...predicate.ActivityLog) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newActivityLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsents applies the HasEdge predicate on the "consents" edge.
func HasConsents() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ConsentsTable, ConsentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsentsWith applies the HasEdge predicate on the "consents" edge with a given conditions (other predicates).
func HasConsentsWith(preds ...predicate.UserConsent) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newConsentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOnboarding applies the HasEdge predicate on the "onboarding" edge.
func HasOnboarding() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OnboardingTable, OnboardingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOnboardingWith applies the HasEdge predicate on the "onboarding" edge with a given conditions (other predicates).
func HasOnboardingWith(preds ...predicate.UserOnboarding) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOnboardingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
