// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/blockcontactform"
	"awe/ent/ent/contentblock"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlockContactFormCreate is the builder for creating a BlockContactForm entity.
type BlockContactFormCreate struct {
	config
	mutation *BlockContactFormMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalName sets the "internal_name" field.
func (_c *BlockContactFormCreate) SetInternalName(v string) *BlockContactFormCreate {
	_c.mutation.SetInternalName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *BlockContactFormCreate) SetTitle(v map[string]string) *BlockContactFormCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *BlockContactFormCreate) SetDescription(v map[string]string) *BlockContactFormCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetShowNameField sets the "show_name_field" field.
func (_c *BlockContactFormCreate) SetShowNameField(v bool) *BlockContactFormCreate {
	_c.mutation.SetShowNameField(v)
	return _c
}

// SetNillableShowNameField sets the "show_name_field" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableShowNameField(v *bool) *BlockContactFormCreate {
	if v != nil {
		_c.SetShowNameField(*v)
	}
	return _c
}

// SetShowPhoneField sets the "show_phone_field" field.
func (_c *BlockContactFormCreate) SetShowPhoneField(v bool) *BlockContactFormCreate {
	_c.mutation.SetShowPhoneField(v)
	return _c
}

// SetNillableShowPhoneField sets the "show_phone_field" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableShowPhoneField(v *bool) *BlockContactFormCreate {
	if v != nil {
		_c.SetShowPhoneField(*v)
	}
	return _c
}

// SetShowSubjectField sets the "show_subject_field" field.
func (_c *BlockContactFormCreate) SetShowSubjectField(v bool) *BlockContactFormCreate {
	_c.mutation.SetShowSubjectField(v)
	return _c
}

// SetNillableShowSubjectField sets the "show_subject_field" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableShowSubjectField(v *bool) *BlockContactFormCreate {
	if v != nil {
		_c.SetShowSubjectField(*v)
	}
	return _c
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (_c *BlockContactFormCreate) SetShowOrganizationField(v bool) *BlockContactFormCreate {
	_c.mutation.SetShowOrganizationField(v)
	return _c
}

// SetNillableShowOrganizationField sets the "show_organization_field" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableShowOrganizationField(v *bool) *BlockContactFormCreate {
	if v != nil {
		_c.SetShowOrganizationField(*v)
	}
	return _c
}

// SetRecipientEmail sets the "recipient_email" field.
func (_c *BlockContactFormCreate) SetRecipientEmail(v string) *BlockContactFormCreate {
	_c.mutation.SetRecipientEmail(v)
	return _c
}

// SetSuccessMessage sets the "success_message" field.
func (_c *BlockContactFormCreate) SetSuccessMessage(v map[string]string) *BlockContactFormCreate {
	_c.mutation.SetSuccessMessage(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *BlockContactFormCreate) SetCreatedAt(v time.Time) *BlockContactFormCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableCreatedAt(v *time.Time) *BlockContactFormCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *BlockContactFormCreate) SetUpdatedAt(v time.Time) *BlockContactFormCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *BlockContactFormCreate) SetNillableUpdatedAt(v *time.Time) *BlockContactFormCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetContentBlockID sets the "content_block" edge to the ContentBlock entity by ID.
func (_c *BlockContactFormCreate) SetContentBlockID(id int) *BlockContactFormCreate {
	_c.mutation.SetContentBlockID(id)
	return _c
}

// SetContentBlock sets the "content_block" edge to the ContentBlock entity.
func (_c *BlockContactFormCreate) SetContentBlock(v *ContentBlock) *BlockContactFormCreate {
	return _c.SetContentBlockID(v.ID)
}

// Mutation returns the BlockContactFormMutation object of the builder.
func (_c *BlockContactFormCreate) Mutation() *BlockContactFormMutation {
	return _c.mutation
}

// Save creates the BlockContactForm in the database.
func (_c *BlockContactFormCreate) Save(ctx context.Context) (*BlockContactForm, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BlockContactFormCreate) SaveX(ctx context.Context) *BlockContactForm {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockContactFormCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockContactFormCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BlockContactFormCreate) defaults() {
	if _, ok := _c.mutation.ShowNameField(); !ok {
		v := blockcontactform.DefaultShowNameField
		_c.mutation.SetShowNameField(v)
	}
	if _, ok := _c.mutation.ShowPhoneField(); !ok {
		v := blockcontactform.DefaultShowPhoneField
		_c.mutation.SetShowPhoneField(v)
	}
	if _, ok := _c.mutation.ShowSubjectField(); !ok {
		v := blockcontactform.DefaultShowSubjectField
		_c.mutation.SetShowSubjectField(v)
	}
	if _, ok := _c.mutation.ShowOrganizationField(); !ok {
		v := blockcontactform.DefaultShowOrganizationField
		_c.mutation.SetShowOrganizationField(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := blockcontactform.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := blockcontactform.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BlockContactFormCreate) check() error {
	if _, ok := _c.mutation.InternalName(); !ok {
		return &ValidationError{Name: "internal_name", err: errors.New(`ent: missing required field "BlockContactForm.internal_name"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlockContactForm.title"`)}
	}
	if _, ok := _c.mutation.ShowNameField(); !ok {
		return &ValidationError{Name: "show_name_field", err: errors.New(`ent: missing required field "BlockContactForm.show_name_field"`)}
	}
	if _, ok := _c.mutation.ShowPhoneField(); !ok {
		return &ValidationError{Name: "show_phone_field", err: errors.New(`ent: missing required field "BlockContactForm.show_phone_field"`)}
	}
	if _, ok := _c.mutation.ShowSubjectField(); !ok {
		return &ValidationError{Name: "show_subject_field", err: errors.New(`ent: missing required field "BlockContactForm.show_subject_field"`)}
	}
	if _, ok := _c.mutation.ShowOrganizationField(); !ok {
		return &ValidationError{Name: "show_organization_field", err: errors.New(`ent: missing required field "BlockContactForm.show_organization_field"`)}
	}
	if _, ok := _c.mutation.RecipientEmail(); !ok {
		return &ValidationError{Name: "recipient_email", err: errors.New(`ent: missing required field "BlockContactForm.recipient_email"`)}
	}
	if _, ok := _c.mutation.SuccessMessage(); !ok {
		return &ValidationError{Name: "success_message", err: errors.New(`ent: missing required field "BlockContactForm.success_message"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockContactForm.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlockContactForm.updated_at"`)}
	}
	if len(_c.mutation.ContentBlockIDs()) == 0 {
		return &ValidationError{Name: "content_block", err: errors.New(`ent: missing required edge "BlockContactForm.content_block"`)}
	}
	return nil
}

func (_c *BlockContactFormCreate) sqlSave(ctx context.Context) (*BlockContactForm, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BlockContactFormCreate) createSpec() (*BlockContactForm, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockContactForm{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(blockcontactform.Table, sqlgraph.NewFieldSpec(blockcontactform.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.InternalName(); ok {
		_spec.SetField(blockcontactform.FieldInternalName, field.TypeString, value)
		_node.InternalName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(blockcontactform.FieldTitle, field.TypeJSON, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(blockcontactform.FieldDescription, field.TypeJSON, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ShowNameField(); ok {
		_spec.SetField(blockcontactform.FieldShowNameField, field.TypeBool, value)
		_node.ShowNameField = value
	}
	if value, ok := _c.mutation.ShowPhoneField(); ok {
		_spec.SetField(blockcontactform.FieldShowPhoneField, field.TypeBool, value)
		_node.ShowPhoneField = value
	}
	if value, ok := _c.mutation.ShowSubjectField(); ok {
		_spec.SetField(blockcontactform.FieldShowSubjectField, field.TypeBool, value)
		_node.ShowSubjectField = value
	}
	if value, ok := _c.mutation.ShowOrganizationField(); ok {
		_spec.SetField(blockcontactform.FieldShowOrganizationField, field.TypeBool, value)
		_node.ShowOrganizationField = value
	}
	if value, ok := _c.mutation.RecipientEmail(); ok {
		_spec.SetField(blockcontactform.FieldRecipientEmail, field.TypeString, value)
		_node.RecipientEmail = value
	}
	if value, ok := _c.mutation.SuccessMessage(); ok {
		_spec.SetField(blockcontactform.FieldSuccessMessage, field.TypeJSON, value)
		_node.SuccessMessage = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(blockcontactform.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(blockcontactform.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.ContentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   blockcontactform.ContentBlockTable,
			Columns: []string{blockcontactform.ContentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentblock.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.content_block_block_contact_form = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockContactForm.Create().
//		SetInternalName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockContactFormUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockContactFormCreate) OnConflict(opts ...sql.ConflictOption) *BlockContactFormUpsertOne {
	_c.conflict = opts
	return &BlockContactFormUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockContactFormCreate) OnConflictColumns(columns ...string) *BlockContactFormUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockContactFormUpsertOne{
		create: _c,
	}
}

type (
	// BlockContactFormUpsertOne is the builder for "upsert"-ing
	//  one BlockContactForm node.
	BlockContactFormUpsertOne struct {
		create *BlockContactFormCreate
	}

	// BlockContactFormUpsert is the "OnConflict" setter.
	BlockContactFormUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalName sets the "internal_name" field.
func (u *BlockContactFormUpsert) SetInternalName(v string) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldInternalName, v)
	return u
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateInternalName() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldInternalName)
	return u
}

// SetTitle sets the "title" field.
func (u *BlockContactFormUpsert) SetTitle(v map[string]string) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateTitle() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *BlockContactFormUpsert) SetDescription(v map[string]string) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateDescription() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *BlockContactFormUpsert) ClearDescription() *BlockContactFormUpsert {
	u.SetNull(blockcontactform.FieldDescription)
	return u
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockContactFormUpsert) SetShowNameField(v bool) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldShowNameField, v)
	return u
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateShowNameField() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldShowNameField)
	return u
}

// SetShowPhoneField sets the "show_phone_field" field.
func (u *BlockContactFormUpsert) SetShowPhoneField(v bool) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldShowPhoneField, v)
	return u
}

// UpdateShowPhoneField sets the "show_phone_field" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateShowPhoneField() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldShowPhoneField)
	return u
}

// SetShowSubjectField sets the "show_subject_field" field.
func (u *BlockContactFormUpsert) SetShowSubjectField(v bool) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldShowSubjectField, v)
	return u
}

// UpdateShowSubjectField sets the "show_subject_field" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateShowSubjectField() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldShowSubjectField)
	return u
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (u *BlockContactFormUpsert) SetShowOrganizationField(v bool) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldShowOrganizationField, v)
	return u
}

// UpdateShowOrganizationField sets the "show_organization_field" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateShowOrganizationField() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldShowOrganizationField)
	return u
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *BlockContactFormUpsert) SetRecipientEmail(v string) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldRecipientEmail, v)
	return u
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateRecipientEmail() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldRecipientEmail)
	return u
}

// SetSuccessMessage sets the "success_message" field.
func (u *BlockContactFormUpsert) SetSuccessMessage(v map[string]string) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldSuccessMessage, v)
	return u
}

// UpdateSuccessMessage sets the "success_message" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateSuccessMessage() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldSuccessMessage)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockContactFormUpsert) SetUpdatedAt(v time.Time) *BlockContactFormUpsert {
	u.Set(blockcontactform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockContactFormUpsert) UpdateUpdatedAt() *BlockContactFormUpsert {
	u.SetExcluded(blockcontactform.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockContactFormUpsertOne) UpdateNewValues() *BlockContactFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(blockcontactform.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockContactFormUpsertOne) Ignore() *BlockContactFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockContactFormUpsertOne) DoNothing() *BlockContactFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockContactFormCreate.OnConflict
// documentation for more info.
func (u *BlockContactFormUpsertOne) Update(set func(*BlockContactFormUpsert)) *BlockContactFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockContactFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockContactFormUpsertOne) SetInternalName(v string) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateInternalName() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockContactFormUpsertOne) SetTitle(v map[string]string) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateTitle() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockContactFormUpsertOne) SetDescription(v map[string]string) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateDescription() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockContactFormUpsertOne) ClearDescription() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.ClearDescription()
	})
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockContactFormUpsertOne) SetShowNameField(v bool) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowNameField(v)
	})
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateShowNameField() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowNameField()
	})
}

// SetShowPhoneField sets the "show_phone_field" field.
func (u *BlockContactFormUpsertOne) SetShowPhoneField(v bool) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowPhoneField(v)
	})
}

// UpdateShowPhoneField sets the "show_phone_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateShowPhoneField() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowPhoneField()
	})
}

// SetShowSubjectField sets the "show_subject_field" field.
func (u *BlockContactFormUpsertOne) SetShowSubjectField(v bool) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowSubjectField(v)
	})
}

// UpdateShowSubjectField sets the "show_subject_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateShowSubjectField() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowSubjectField()
	})
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (u *BlockContactFormUpsertOne) SetShowOrganizationField(v bool) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowOrganizationField(v)
	})
}

// UpdateShowOrganizationField sets the "show_organization_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateShowOrganizationField() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowOrganizationField()
	})
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *BlockContactFormUpsertOne) SetRecipientEmail(v string) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetRecipientEmail(v)
	})
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateRecipientEmail() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateRecipientEmail()
	})
}

// SetSuccessMessage sets the "success_message" field.
func (u *BlockContactFormUpsertOne) SetSuccessMessage(v map[string]string) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetSuccessMessage(v)
	})
}

// UpdateSuccessMessage sets the "success_message" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateSuccessMessage() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateSuccessMessage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockContactFormUpsertOne) SetUpdatedAt(v time.Time) *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockContactFormUpsertOne) UpdateUpdatedAt() *BlockContactFormUpsertOne {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockContactFormUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockContactFormCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockContactFormUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockContactFormUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockContactFormUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockContactFormCreateBulk is the builder for creating many BlockContactForm entities in bulk.
type BlockContactFormCreateBulk struct {
	config
	err      error
	builders []*BlockContactFormCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockContactForm entities in the database.
func (_c *BlockContactFormCreateBulk) Save(ctx context.Context) ([]*BlockContactForm, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BlockContactForm, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockContactFormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BlockContactFormCreateBulk) SaveX(ctx context.Context) []*BlockContactForm {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BlockContactFormCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BlockContactFormCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockContactForm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockContactFormUpsert) {
//			SetInternalName(v+v).
//		}).
//		Exec(ctx)
func (_c *BlockContactFormCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockContactFormUpsertBulk {
	_c.conflict = opts
	return &BlockContactFormUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *BlockContactFormCreateBulk) OnConflictColumns(columns ...string) *BlockContactFormUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &BlockContactFormUpsertBulk{
		create: _c,
	}
}

// BlockContactFormUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockContactForm nodes.
type BlockContactFormUpsertBulk struct {
	create *BlockContactFormCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BlockContactFormUpsertBulk) UpdateNewValues() *BlockContactFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(blockcontactform.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockContactForm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockContactFormUpsertBulk) Ignore() *BlockContactFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockContactFormUpsertBulk) DoNothing() *BlockContactFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockContactFormCreateBulk.OnConflict
// documentation for more info.
func (u *BlockContactFormUpsertBulk) Update(set func(*BlockContactFormUpsert)) *BlockContactFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockContactFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalName sets the "internal_name" field.
func (u *BlockContactFormUpsertBulk) SetInternalName(v string) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetInternalName(v)
	})
}

// UpdateInternalName sets the "internal_name" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateInternalName() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateInternalName()
	})
}

// SetTitle sets the "title" field.
func (u *BlockContactFormUpsertBulk) SetTitle(v map[string]string) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateTitle() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *BlockContactFormUpsertBulk) SetDescription(v map[string]string) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateDescription() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *BlockContactFormUpsertBulk) ClearDescription() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.ClearDescription()
	})
}

// SetShowNameField sets the "show_name_field" field.
func (u *BlockContactFormUpsertBulk) SetShowNameField(v bool) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowNameField(v)
	})
}

// UpdateShowNameField sets the "show_name_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateShowNameField() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowNameField()
	})
}

// SetShowPhoneField sets the "show_phone_field" field.
func (u *BlockContactFormUpsertBulk) SetShowPhoneField(v bool) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowPhoneField(v)
	})
}

// UpdateShowPhoneField sets the "show_phone_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateShowPhoneField() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowPhoneField()
	})
}

// SetShowSubjectField sets the "show_subject_field" field.
func (u *BlockContactFormUpsertBulk) SetShowSubjectField(v bool) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowSubjectField(v)
	})
}

// UpdateShowSubjectField sets the "show_subject_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateShowSubjectField() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowSubjectField()
	})
}

// SetShowOrganizationField sets the "show_organization_field" field.
func (u *BlockContactFormUpsertBulk) SetShowOrganizationField(v bool) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetShowOrganizationField(v)
	})
}

// UpdateShowOrganizationField sets the "show_organization_field" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateShowOrganizationField() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateShowOrganizationField()
	})
}

// SetRecipientEmail sets the "recipient_email" field.
func (u *BlockContactFormUpsertBulk) SetRecipientEmail(v string) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetRecipientEmail(v)
	})
}

// UpdateRecipientEmail sets the "recipient_email" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateRecipientEmail() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateRecipientEmail()
	})
}

// SetSuccessMessage sets the "success_message" field.
func (u *BlockContactFormUpsertBulk) SetSuccessMessage(v map[string]string) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetSuccessMessage(v)
	})
}

// UpdateSuccessMessage sets the "success_message" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateSuccessMessage() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateSuccessMessage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockContactFormUpsertBulk) SetUpdatedAt(v time.Time) *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockContactFormUpsertBulk) UpdateUpdatedAt() *BlockContactFormUpsertBulk {
	return u.Update(func(s *BlockContactFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BlockContactFormUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockContactFormCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockContactFormCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockContactFormUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
