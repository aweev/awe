// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awe/ent/ent/event"
	"awe/ent/ent/eventregistration"
	"awe/ent/ent/predicate"
	"awe/ent/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventRegistrationUpdate is the builder for updating EventRegistration entities.
type EventRegistrationUpdate struct {
	config
	hooks    []Hook
	mutation *EventRegistrationMutation
}

// Where appends a list predicates to the EventRegistrationUpdate builder.
func (_u *EventRegistrationUpdate) Where(ps ...predicate.EventRegistration) *EventRegistrationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *EventRegistrationUpdate) SetStatus(v eventregistration.Status) *EventRegistrationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EventRegistrationUpdate) SetNillableStatus(v *eventregistration.Status) *EventRegistrationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAttendanceStatus sets the "attendance_status" field.
func (_u *EventRegistrationUpdate) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationUpdate {
	_u.mutation.SetAttendanceStatus(v)
	return _u
}

// SetNillableAttendanceStatus sets the "attendance_status" field if the given value is not nil.
func (_u *EventRegistrationUpdate) SetNillableAttendanceStatus(v *eventregistration.AttendanceStatus) *EventRegistrationUpdate {
	if v != nil {
		_u.SetAttendanceStatus(*v)
	}
	return _u
}

// SetRegistrationData sets the "registration_data" field.
func (_u *EventRegistrationUpdate) SetRegistrationData(v map[string]interface{}) *EventRegistrationUpdate {
	_u.mutation.SetRegistrationData(v)
	return _u
}

// ClearRegistrationData clears the value of the "registration_data" field.
func (_u *EventRegistrationUpdate) ClearRegistrationData() *EventRegistrationUpdate {
	_u.mutation.ClearRegistrationData()
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *EventRegistrationUpdate) SetFeedback(v map[string]interface{}) *EventRegistrationUpdate {
	_u.mutation.SetFeedback(v)
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *EventRegistrationUpdate) ClearFeedback() *EventRegistrationUpdate {
	_u.mutation.ClearFeedback()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventRegistrationUpdate) SetUpdatedAt(v time.Time) *EventRegistrationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *EventRegistrationUpdate) SetEventID(id int) *EventRegistrationUpdate {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *EventRegistrationUpdate) SetEvent(v *Event) *EventRegistrationUpdate {
	return _u.SetEventID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *EventRegistrationUpdate) SetUserID(id int) *EventRegistrationUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EventRegistrationUpdate) SetUser(v *User) *EventRegistrationUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EventRegistrationMutation object of the builder.
func (_u *EventRegistrationUpdate) Mutation() *EventRegistrationMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *EventRegistrationUpdate) ClearEvent() *EventRegistrationUpdate {
	_u.mutation.ClearEvent()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EventRegistrationUpdate) ClearUser() *EventRegistrationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EventRegistrationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventRegistrationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EventRegistrationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventRegistrationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventRegistrationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := eventregistration.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventRegistrationUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := eventregistration.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AttendanceStatus(); ok {
		if err := eventregistration.AttendanceStatusValidator(v); err != nil {
			return &ValidationError{Name: "attendance_status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.attendance_status": %w`, err)}
		}
	}
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventRegistration.event"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventRegistration.user"`)
	}
	return nil
}

func (_u *EventRegistrationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventregistration.Table, eventregistration.Columns, sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(eventregistration.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AttendanceStatus(); ok {
		_spec.SetField(eventregistration.FieldAttendanceStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.RegistrationData(); ok {
		_spec.SetField(eventregistration.FieldRegistrationData, field.TypeJSON, value)
	}
	if _u.mutation.RegistrationDataCleared() {
		_spec.ClearField(eventregistration.FieldRegistrationData, field.TypeJSON)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(eventregistration.FieldFeedback, field.TypeJSON, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(eventregistration.FieldFeedback, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(eventregistration.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventregistration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EventRegistrationUpdateOne is the builder for updating a single EventRegistration entity.
type EventRegistrationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventRegistrationMutation
}

// SetStatus sets the "status" field.
func (_u *EventRegistrationUpdateOne) SetStatus(v eventregistration.Status) *EventRegistrationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EventRegistrationUpdateOne) SetNillableStatus(v *eventregistration.Status) *EventRegistrationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAttendanceStatus sets the "attendance_status" field.
func (_u *EventRegistrationUpdateOne) SetAttendanceStatus(v eventregistration.AttendanceStatus) *EventRegistrationUpdateOne {
	_u.mutation.SetAttendanceStatus(v)
	return _u
}

// SetNillableAttendanceStatus sets the "attendance_status" field if the given value is not nil.
func (_u *EventRegistrationUpdateOne) SetNillableAttendanceStatus(v *eventregistration.AttendanceStatus) *EventRegistrationUpdateOne {
	if v != nil {
		_u.SetAttendanceStatus(*v)
	}
	return _u
}

// SetRegistrationData sets the "registration_data" field.
func (_u *EventRegistrationUpdateOne) SetRegistrationData(v map[string]interface{}) *EventRegistrationUpdateOne {
	_u.mutation.SetRegistrationData(v)
	return _u
}

// ClearRegistrationData clears the value of the "registration_data" field.
func (_u *EventRegistrationUpdateOne) ClearRegistrationData() *EventRegistrationUpdateOne {
	_u.mutation.ClearRegistrationData()
	return _u
}

// SetFeedback sets the "feedback" field.
func (_u *EventRegistrationUpdateOne) SetFeedback(v map[string]interface{}) *EventRegistrationUpdateOne {
	_u.mutation.SetFeedback(v)
	return _u
}

// ClearFeedback clears the value of the "feedback" field.
func (_u *EventRegistrationUpdateOne) ClearFeedback() *EventRegistrationUpdateOne {
	_u.mutation.ClearFeedback()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventRegistrationUpdateOne) SetUpdatedAt(v time.Time) *EventRegistrationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *EventRegistrationUpdateOne) SetEventID(id int) *EventRegistrationUpdateOne {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *EventRegistrationUpdateOne) SetEvent(v *Event) *EventRegistrationUpdateOne {
	return _u.SetEventID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *EventRegistrationUpdateOne) SetUserID(id int) *EventRegistrationUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *EventRegistrationUpdateOne) SetUser(v *User) *EventRegistrationUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the EventRegistrationMutation object of the builder.
func (_u *EventRegistrationUpdateOne) Mutation() *EventRegistrationMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *EventRegistrationUpdateOne) ClearEvent() *EventRegistrationUpdateOne {
	_u.mutation.ClearEvent()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *EventRegistrationUpdateOne) ClearUser() *EventRegistrationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the EventRegistrationUpdate builder.
func (_u *EventRegistrationUpdateOne) Where(ps ...predicate.EventRegistration) *EventRegistrationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EventRegistrationUpdateOne) Select(field string, fields ...string) *EventRegistrationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EventRegistration entity.
func (_u *EventRegistrationUpdateOne) Save(ctx context.Context) (*EventRegistration, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventRegistrationUpdateOne) SaveX(ctx context.Context) *EventRegistration {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EventRegistrationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventRegistrationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventRegistrationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := eventregistration.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EventRegistrationUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := eventregistration.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AttendanceStatus(); ok {
		if err := eventregistration.AttendanceStatusValidator(v); err != nil {
			return &ValidationError{Name: "attendance_status", err: fmt.Errorf(`ent: validator failed for field "EventRegistration.attendance_status": %w`, err)}
		}
	}
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventRegistration.event"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventRegistration.user"`)
	}
	return nil
}

func (_u *EventRegistrationUpdateOne) sqlSave(ctx context.Context) (_node *EventRegistration, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventregistration.Table, eventregistration.Columns, sqlgraph.NewFieldSpec(eventregistration.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventRegistration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventregistration.FieldID)
		for _, f := range fields {
			if !eventregistration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventregistration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(eventregistration.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AttendanceStatus(); ok {
		_spec.SetField(eventregistration.FieldAttendanceStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.RegistrationData(); ok {
		_spec.SetField(eventregistration.FieldRegistrationData, field.TypeJSON, value)
	}
	if _u.mutation.RegistrationDataCleared() {
		_spec.ClearField(eventregistration.FieldRegistrationData, field.TypeJSON)
	}
	if value, ok := _u.mutation.Feedback(); ok {
		_spec.SetField(eventregistration.FieldFeedback, field.TypeJSON, value)
	}
	if _u.mutation.FeedbackCleared() {
		_spec.ClearField(eventregistration.FieldFeedback, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(eventregistration.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.EventTable,
			Columns: []string{eventregistration.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventregistration.UserTable,
			Columns: []string{eventregistration.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventRegistration{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventregistration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
